/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.workflow;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * *任务流程Vo***
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-18")
public class WorkflowHistoryVo implements org.apache.thrift.TBase<WorkflowHistoryVo, WorkflowHistoryVo._Fields>, java.io.Serializable, Cloneable, Comparable<WorkflowHistoryVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkflowHistoryVo");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROCESS_INSTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processInstractId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROCESSDEFINTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processdefintionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXECTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exectionId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TASK_DEF_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("taskDefKey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TASK_DEF_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskDefName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXEC_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("execUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXEC_USER_REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("execUserRealName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXECUTE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("executeDttm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DELETE_RESON_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteReson", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WORKFLOW_PROCESS_DEFKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowProcessDefkey", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PROCESS_DEF_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("processDefName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkflowHistoryVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkflowHistoryVoTupleSchemeFactory());
  }

  public int taskId; // required
  public String processInstractId; // required
  public String processdefintionId; // required
  public int exectionId; // required
  public String taskDefKey; // required
  public String taskDefName; // required
  public String execUserName; // required
  public String execUserRealName; // required
  public String executeDttm; // required
  public String deleteReson; // required
  public String workflowProcessDefkey; // required
  public String processDefName; // required
  public int projectId; // required
  public int refId; // required
  public String projectName; // required
  public String message; // required
  public int rows; // required
  public int page; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    PROCESS_INSTRACT_ID((short)2, "processInstractId"),
    PROCESSDEFINTION_ID((short)3, "processdefintionId"),
    EXECTION_ID((short)4, "exectionId"),
    TASK_DEF_KEY((short)5, "taskDefKey"),
    TASK_DEF_NAME((short)6, "taskDefName"),
    EXEC_USER_NAME((short)7, "execUserName"),
    EXEC_USER_REAL_NAME((short)8, "execUserRealName"),
    EXECUTE_DTTM((short)9, "executeDttm"),
    DELETE_RESON((short)10, "deleteReson"),
    WORKFLOW_PROCESS_DEFKEY((short)11, "workflowProcessDefkey"),
    PROCESS_DEF_NAME((short)12, "processDefName"),
    PROJECT_ID((short)13, "projectId"),
    REF_ID((short)14, "refId"),
    PROJECT_NAME((short)15, "projectName"),
    MESSAGE((short)16, "message"),
    ROWS((short)17, "rows"),
    PAGE((short)18, "page");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // PROCESS_INSTRACT_ID
          return PROCESS_INSTRACT_ID;
        case 3: // PROCESSDEFINTION_ID
          return PROCESSDEFINTION_ID;
        case 4: // EXECTION_ID
          return EXECTION_ID;
        case 5: // TASK_DEF_KEY
          return TASK_DEF_KEY;
        case 6: // TASK_DEF_NAME
          return TASK_DEF_NAME;
        case 7: // EXEC_USER_NAME
          return EXEC_USER_NAME;
        case 8: // EXEC_USER_REAL_NAME
          return EXEC_USER_REAL_NAME;
        case 9: // EXECUTE_DTTM
          return EXECUTE_DTTM;
        case 10: // DELETE_RESON
          return DELETE_RESON;
        case 11: // WORKFLOW_PROCESS_DEFKEY
          return WORKFLOW_PROCESS_DEFKEY;
        case 12: // PROCESS_DEF_NAME
          return PROCESS_DEF_NAME;
        case 13: // PROJECT_ID
          return PROJECT_ID;
        case 14: // REF_ID
          return REF_ID;
        case 15: // PROJECT_NAME
          return PROJECT_NAME;
        case 16: // MESSAGE
          return MESSAGE;
        case 17: // ROWS
          return ROWS;
        case 18: // PAGE
          return PAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __EXECTIONID_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private static final int __REFID_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESS_INSTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("processInstractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESSDEFINTION_ID, new org.apache.thrift.meta_data.FieldMetaData("processdefintionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECTION_ID, new org.apache.thrift.meta_data.FieldMetaData("exectionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_DEF_KEY, new org.apache.thrift.meta_data.FieldMetaData("taskDefKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_DEF_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskDefName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("execUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_USER_REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("execUserRealName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("executeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETE_RESON, new org.apache.thrift.meta_data.FieldMetaData("deleteReson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_PROCESS_DEFKEY, new org.apache.thrift.meta_data.FieldMetaData("workflowProcessDefkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_DEF_NAME, new org.apache.thrift.meta_data.FieldMetaData("processDefName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkflowHistoryVo.class, metaDataMap);
  }

  public WorkflowHistoryVo() {
  }

  public WorkflowHistoryVo(
    int taskId,
    String processInstractId,
    String processdefintionId,
    int exectionId,
    String taskDefKey,
    String taskDefName,
    String execUserName,
    String execUserRealName,
    String executeDttm,
    String deleteReson,
    String workflowProcessDefkey,
    String processDefName,
    int projectId,
    int refId,
    String projectName,
    String message,
    int rows,
    int page)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.processInstractId = processInstractId;
    this.processdefintionId = processdefintionId;
    this.exectionId = exectionId;
    setExectionIdIsSet(true);
    this.taskDefKey = taskDefKey;
    this.taskDefName = taskDefName;
    this.execUserName = execUserName;
    this.execUserRealName = execUserRealName;
    this.executeDttm = executeDttm;
    this.deleteReson = deleteReson;
    this.workflowProcessDefkey = workflowProcessDefkey;
    this.processDefName = processDefName;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.projectName = projectName;
    this.message = message;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkflowHistoryVo(WorkflowHistoryVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetProcessInstractId()) {
      this.processInstractId = other.processInstractId;
    }
    if (other.isSetProcessdefintionId()) {
      this.processdefintionId = other.processdefintionId;
    }
    this.exectionId = other.exectionId;
    if (other.isSetTaskDefKey()) {
      this.taskDefKey = other.taskDefKey;
    }
    if (other.isSetTaskDefName()) {
      this.taskDefName = other.taskDefName;
    }
    if (other.isSetExecUserName()) {
      this.execUserName = other.execUserName;
    }
    if (other.isSetExecUserRealName()) {
      this.execUserRealName = other.execUserRealName;
    }
    if (other.isSetExecuteDttm()) {
      this.executeDttm = other.executeDttm;
    }
    if (other.isSetDeleteReson()) {
      this.deleteReson = other.deleteReson;
    }
    if (other.isSetWorkflowProcessDefkey()) {
      this.workflowProcessDefkey = other.workflowProcessDefkey;
    }
    if (other.isSetProcessDefName()) {
      this.processDefName = other.processDefName;
    }
    this.projectId = other.projectId;
    this.refId = other.refId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.rows = other.rows;
    this.page = other.page;
  }

  public WorkflowHistoryVo deepCopy() {
    return new WorkflowHistoryVo(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.processInstractId = null;
    this.processdefintionId = null;
    setExectionIdIsSet(false);
    this.exectionId = 0;
    this.taskDefKey = null;
    this.taskDefName = null;
    this.execUserName = null;
    this.execUserRealName = null;
    this.executeDttm = null;
    this.deleteReson = null;
    this.workflowProcessDefkey = null;
    this.processDefName = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    this.projectName = null;
    this.message = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
  }

  public int getTaskId() {
    return this.taskId;
  }

  public WorkflowHistoryVo setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public String getProcessInstractId() {
    return this.processInstractId;
  }

  public WorkflowHistoryVo setProcessInstractId(String processInstractId) {
    this.processInstractId = processInstractId;
    return this;
  }

  public void unsetProcessInstractId() {
    this.processInstractId = null;
  }

  /** Returns true if field processInstractId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessInstractId() {
    return this.processInstractId != null;
  }

  public void setProcessInstractIdIsSet(boolean value) {
    if (!value) {
      this.processInstractId = null;
    }
  }

  public String getProcessdefintionId() {
    return this.processdefintionId;
  }

  public WorkflowHistoryVo setProcessdefintionId(String processdefintionId) {
    this.processdefintionId = processdefintionId;
    return this;
  }

  public void unsetProcessdefintionId() {
    this.processdefintionId = null;
  }

  /** Returns true if field processdefintionId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessdefintionId() {
    return this.processdefintionId != null;
  }

  public void setProcessdefintionIdIsSet(boolean value) {
    if (!value) {
      this.processdefintionId = null;
    }
  }

  public int getExectionId() {
    return this.exectionId;
  }

  public WorkflowHistoryVo setExectionId(int exectionId) {
    this.exectionId = exectionId;
    setExectionIdIsSet(true);
    return this;
  }

  public void unsetExectionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTIONID_ISSET_ID);
  }

  /** Returns true if field exectionId is set (has been assigned a value) and false otherwise */
  public boolean isSetExectionId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTIONID_ISSET_ID);
  }

  public void setExectionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTIONID_ISSET_ID, value);
  }

  public String getTaskDefKey() {
    return this.taskDefKey;
  }

  public WorkflowHistoryVo setTaskDefKey(String taskDefKey) {
    this.taskDefKey = taskDefKey;
    return this;
  }

  public void unsetTaskDefKey() {
    this.taskDefKey = null;
  }

  /** Returns true if field taskDefKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskDefKey() {
    return this.taskDefKey != null;
  }

  public void setTaskDefKeyIsSet(boolean value) {
    if (!value) {
      this.taskDefKey = null;
    }
  }

  public String getTaskDefName() {
    return this.taskDefName;
  }

  public WorkflowHistoryVo setTaskDefName(String taskDefName) {
    this.taskDefName = taskDefName;
    return this;
  }

  public void unsetTaskDefName() {
    this.taskDefName = null;
  }

  /** Returns true if field taskDefName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskDefName() {
    return this.taskDefName != null;
  }

  public void setTaskDefNameIsSet(boolean value) {
    if (!value) {
      this.taskDefName = null;
    }
  }

  public String getExecUserName() {
    return this.execUserName;
  }

  public WorkflowHistoryVo setExecUserName(String execUserName) {
    this.execUserName = execUserName;
    return this;
  }

  public void unsetExecUserName() {
    this.execUserName = null;
  }

  /** Returns true if field execUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecUserName() {
    return this.execUserName != null;
  }

  public void setExecUserNameIsSet(boolean value) {
    if (!value) {
      this.execUserName = null;
    }
  }

  public String getExecUserRealName() {
    return this.execUserRealName;
  }

  public WorkflowHistoryVo setExecUserRealName(String execUserRealName) {
    this.execUserRealName = execUserRealName;
    return this;
  }

  public void unsetExecUserRealName() {
    this.execUserRealName = null;
  }

  /** Returns true if field execUserRealName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecUserRealName() {
    return this.execUserRealName != null;
  }

  public void setExecUserRealNameIsSet(boolean value) {
    if (!value) {
      this.execUserRealName = null;
    }
  }

  public String getExecuteDttm() {
    return this.executeDttm;
  }

  public WorkflowHistoryVo setExecuteDttm(String executeDttm) {
    this.executeDttm = executeDttm;
    return this;
  }

  public void unsetExecuteDttm() {
    this.executeDttm = null;
  }

  /** Returns true if field executeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteDttm() {
    return this.executeDttm != null;
  }

  public void setExecuteDttmIsSet(boolean value) {
    if (!value) {
      this.executeDttm = null;
    }
  }

  public String getDeleteReson() {
    return this.deleteReson;
  }

  public WorkflowHistoryVo setDeleteReson(String deleteReson) {
    this.deleteReson = deleteReson;
    return this;
  }

  public void unsetDeleteReson() {
    this.deleteReson = null;
  }

  /** Returns true if field deleteReson is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteReson() {
    return this.deleteReson != null;
  }

  public void setDeleteResonIsSet(boolean value) {
    if (!value) {
      this.deleteReson = null;
    }
  }

  public String getWorkflowProcessDefkey() {
    return this.workflowProcessDefkey;
  }

  public WorkflowHistoryVo setWorkflowProcessDefkey(String workflowProcessDefkey) {
    this.workflowProcessDefkey = workflowProcessDefkey;
    return this;
  }

  public void unsetWorkflowProcessDefkey() {
    this.workflowProcessDefkey = null;
  }

  /** Returns true if field workflowProcessDefkey is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowProcessDefkey() {
    return this.workflowProcessDefkey != null;
  }

  public void setWorkflowProcessDefkeyIsSet(boolean value) {
    if (!value) {
      this.workflowProcessDefkey = null;
    }
  }

  public String getProcessDefName() {
    return this.processDefName;
  }

  public WorkflowHistoryVo setProcessDefName(String processDefName) {
    this.processDefName = processDefName;
    return this;
  }

  public void unsetProcessDefName() {
    this.processDefName = null;
  }

  /** Returns true if field processDefName is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessDefName() {
    return this.processDefName != null;
  }

  public void setProcessDefNameIsSet(boolean value) {
    if (!value) {
      this.processDefName = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public WorkflowHistoryVo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public WorkflowHistoryVo setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public WorkflowHistoryVo setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public WorkflowHistoryVo setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public WorkflowHistoryVo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public WorkflowHistoryVo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case PROCESS_INSTRACT_ID:
      if (value == null) {
        unsetProcessInstractId();
      } else {
        setProcessInstractId((String)value);
      }
      break;

    case PROCESSDEFINTION_ID:
      if (value == null) {
        unsetProcessdefintionId();
      } else {
        setProcessdefintionId((String)value);
      }
      break;

    case EXECTION_ID:
      if (value == null) {
        unsetExectionId();
      } else {
        setExectionId((Integer)value);
      }
      break;

    case TASK_DEF_KEY:
      if (value == null) {
        unsetTaskDefKey();
      } else {
        setTaskDefKey((String)value);
      }
      break;

    case TASK_DEF_NAME:
      if (value == null) {
        unsetTaskDefName();
      } else {
        setTaskDefName((String)value);
      }
      break;

    case EXEC_USER_NAME:
      if (value == null) {
        unsetExecUserName();
      } else {
        setExecUserName((String)value);
      }
      break;

    case EXEC_USER_REAL_NAME:
      if (value == null) {
        unsetExecUserRealName();
      } else {
        setExecUserRealName((String)value);
      }
      break;

    case EXECUTE_DTTM:
      if (value == null) {
        unsetExecuteDttm();
      } else {
        setExecuteDttm((String)value);
      }
      break;

    case DELETE_RESON:
      if (value == null) {
        unsetDeleteReson();
      } else {
        setDeleteReson((String)value);
      }
      break;

    case WORKFLOW_PROCESS_DEFKEY:
      if (value == null) {
        unsetWorkflowProcessDefkey();
      } else {
        setWorkflowProcessDefkey((String)value);
      }
      break;

    case PROCESS_DEF_NAME:
      if (value == null) {
        unsetProcessDefName();
      } else {
        setProcessDefName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case PROCESS_INSTRACT_ID:
      return getProcessInstractId();

    case PROCESSDEFINTION_ID:
      return getProcessdefintionId();

    case EXECTION_ID:
      return Integer.valueOf(getExectionId());

    case TASK_DEF_KEY:
      return getTaskDefKey();

    case TASK_DEF_NAME:
      return getTaskDefName();

    case EXEC_USER_NAME:
      return getExecUserName();

    case EXEC_USER_REAL_NAME:
      return getExecUserRealName();

    case EXECUTE_DTTM:
      return getExecuteDttm();

    case DELETE_RESON:
      return getDeleteReson();

    case WORKFLOW_PROCESS_DEFKEY:
      return getWorkflowProcessDefkey();

    case PROCESS_DEF_NAME:
      return getProcessDefName();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case PROJECT_NAME:
      return getProjectName();

    case MESSAGE:
      return getMessage();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case PROCESS_INSTRACT_ID:
      return isSetProcessInstractId();
    case PROCESSDEFINTION_ID:
      return isSetProcessdefintionId();
    case EXECTION_ID:
      return isSetExectionId();
    case TASK_DEF_KEY:
      return isSetTaskDefKey();
    case TASK_DEF_NAME:
      return isSetTaskDefName();
    case EXEC_USER_NAME:
      return isSetExecUserName();
    case EXEC_USER_REAL_NAME:
      return isSetExecUserRealName();
    case EXECUTE_DTTM:
      return isSetExecuteDttm();
    case DELETE_RESON:
      return isSetDeleteReson();
    case WORKFLOW_PROCESS_DEFKEY:
      return isSetWorkflowProcessDefkey();
    case PROCESS_DEF_NAME:
      return isSetProcessDefName();
    case PROJECT_ID:
      return isSetProjectId();
    case REF_ID:
      return isSetRefId();
    case PROJECT_NAME:
      return isSetProjectName();
    case MESSAGE:
      return isSetMessage();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkflowHistoryVo)
      return this.equals((WorkflowHistoryVo)that);
    return false;
  }

  public boolean equals(WorkflowHistoryVo that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_processInstractId = true && this.isSetProcessInstractId();
    boolean that_present_processInstractId = true && that.isSetProcessInstractId();
    if (this_present_processInstractId || that_present_processInstractId) {
      if (!(this_present_processInstractId && that_present_processInstractId))
        return false;
      if (!this.processInstractId.equals(that.processInstractId))
        return false;
    }

    boolean this_present_processdefintionId = true && this.isSetProcessdefintionId();
    boolean that_present_processdefintionId = true && that.isSetProcessdefintionId();
    if (this_present_processdefintionId || that_present_processdefintionId) {
      if (!(this_present_processdefintionId && that_present_processdefintionId))
        return false;
      if (!this.processdefintionId.equals(that.processdefintionId))
        return false;
    }

    boolean this_present_exectionId = true;
    boolean that_present_exectionId = true;
    if (this_present_exectionId || that_present_exectionId) {
      if (!(this_present_exectionId && that_present_exectionId))
        return false;
      if (this.exectionId != that.exectionId)
        return false;
    }

    boolean this_present_taskDefKey = true && this.isSetTaskDefKey();
    boolean that_present_taskDefKey = true && that.isSetTaskDefKey();
    if (this_present_taskDefKey || that_present_taskDefKey) {
      if (!(this_present_taskDefKey && that_present_taskDefKey))
        return false;
      if (!this.taskDefKey.equals(that.taskDefKey))
        return false;
    }

    boolean this_present_taskDefName = true && this.isSetTaskDefName();
    boolean that_present_taskDefName = true && that.isSetTaskDefName();
    if (this_present_taskDefName || that_present_taskDefName) {
      if (!(this_present_taskDefName && that_present_taskDefName))
        return false;
      if (!this.taskDefName.equals(that.taskDefName))
        return false;
    }

    boolean this_present_execUserName = true && this.isSetExecUserName();
    boolean that_present_execUserName = true && that.isSetExecUserName();
    if (this_present_execUserName || that_present_execUserName) {
      if (!(this_present_execUserName && that_present_execUserName))
        return false;
      if (!this.execUserName.equals(that.execUserName))
        return false;
    }

    boolean this_present_execUserRealName = true && this.isSetExecUserRealName();
    boolean that_present_execUserRealName = true && that.isSetExecUserRealName();
    if (this_present_execUserRealName || that_present_execUserRealName) {
      if (!(this_present_execUserRealName && that_present_execUserRealName))
        return false;
      if (!this.execUserRealName.equals(that.execUserRealName))
        return false;
    }

    boolean this_present_executeDttm = true && this.isSetExecuteDttm();
    boolean that_present_executeDttm = true && that.isSetExecuteDttm();
    if (this_present_executeDttm || that_present_executeDttm) {
      if (!(this_present_executeDttm && that_present_executeDttm))
        return false;
      if (!this.executeDttm.equals(that.executeDttm))
        return false;
    }

    boolean this_present_deleteReson = true && this.isSetDeleteReson();
    boolean that_present_deleteReson = true && that.isSetDeleteReson();
    if (this_present_deleteReson || that_present_deleteReson) {
      if (!(this_present_deleteReson && that_present_deleteReson))
        return false;
      if (!this.deleteReson.equals(that.deleteReson))
        return false;
    }

    boolean this_present_workflowProcessDefkey = true && this.isSetWorkflowProcessDefkey();
    boolean that_present_workflowProcessDefkey = true && that.isSetWorkflowProcessDefkey();
    if (this_present_workflowProcessDefkey || that_present_workflowProcessDefkey) {
      if (!(this_present_workflowProcessDefkey && that_present_workflowProcessDefkey))
        return false;
      if (!this.workflowProcessDefkey.equals(that.workflowProcessDefkey))
        return false;
    }

    boolean this_present_processDefName = true && this.isSetProcessDefName();
    boolean that_present_processDefName = true && that.isSetProcessDefName();
    if (this_present_processDefName || that_present_processDefName) {
      if (!(this_present_processDefName && that_present_processDefName))
        return false;
      if (!this.processDefName.equals(that.processDefName))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_processInstractId = true && (isSetProcessInstractId());
    list.add(present_processInstractId);
    if (present_processInstractId)
      list.add(processInstractId);

    boolean present_processdefintionId = true && (isSetProcessdefintionId());
    list.add(present_processdefintionId);
    if (present_processdefintionId)
      list.add(processdefintionId);

    boolean present_exectionId = true;
    list.add(present_exectionId);
    if (present_exectionId)
      list.add(exectionId);

    boolean present_taskDefKey = true && (isSetTaskDefKey());
    list.add(present_taskDefKey);
    if (present_taskDefKey)
      list.add(taskDefKey);

    boolean present_taskDefName = true && (isSetTaskDefName());
    list.add(present_taskDefName);
    if (present_taskDefName)
      list.add(taskDefName);

    boolean present_execUserName = true && (isSetExecUserName());
    list.add(present_execUserName);
    if (present_execUserName)
      list.add(execUserName);

    boolean present_execUserRealName = true && (isSetExecUserRealName());
    list.add(present_execUserRealName);
    if (present_execUserRealName)
      list.add(execUserRealName);

    boolean present_executeDttm = true && (isSetExecuteDttm());
    list.add(present_executeDttm);
    if (present_executeDttm)
      list.add(executeDttm);

    boolean present_deleteReson = true && (isSetDeleteReson());
    list.add(present_deleteReson);
    if (present_deleteReson)
      list.add(deleteReson);

    boolean present_workflowProcessDefkey = true && (isSetWorkflowProcessDefkey());
    list.add(present_workflowProcessDefkey);
    if (present_workflowProcessDefkey)
      list.add(workflowProcessDefkey);

    boolean present_processDefName = true && (isSetProcessDefName());
    list.add(present_processDefName);
    if (present_processDefName)
      list.add(processDefName);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkflowHistoryVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessInstractId()).compareTo(other.isSetProcessInstractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessInstractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processInstractId, other.processInstractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessdefintionId()).compareTo(other.isSetProcessdefintionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessdefintionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processdefintionId, other.processdefintionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExectionId()).compareTo(other.isSetExectionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExectionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exectionId, other.exectionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskDefKey()).compareTo(other.isSetTaskDefKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskDefKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskDefKey, other.taskDefKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskDefName()).compareTo(other.isSetTaskDefName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskDefName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskDefName, other.taskDefName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecUserName()).compareTo(other.isSetExecUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execUserName, other.execUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecUserRealName()).compareTo(other.isSetExecUserRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecUserRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execUserRealName, other.execUserRealName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteDttm()).compareTo(other.isSetExecuteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeDttm, other.executeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleteReson()).compareTo(other.isSetDeleteReson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteReson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteReson, other.deleteReson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowProcessDefkey()).compareTo(other.isSetWorkflowProcessDefkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowProcessDefkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowProcessDefkey, other.workflowProcessDefkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessDefName()).compareTo(other.isSetProcessDefName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessDefName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processDefName, other.processDefName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkflowHistoryVo(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processInstractId:");
    if (this.processInstractId == null) {
      sb.append("null");
    } else {
      sb.append(this.processInstractId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processdefintionId:");
    if (this.processdefintionId == null) {
      sb.append("null");
    } else {
      sb.append(this.processdefintionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exectionId:");
    sb.append(this.exectionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskDefKey:");
    if (this.taskDefKey == null) {
      sb.append("null");
    } else {
      sb.append(this.taskDefKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskDefName:");
    if (this.taskDefName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskDefName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execUserName:");
    if (this.execUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.execUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execUserRealName:");
    if (this.execUserRealName == null) {
      sb.append("null");
    } else {
      sb.append(this.execUserRealName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executeDttm:");
    if (this.executeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.executeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleteReson:");
    if (this.deleteReson == null) {
      sb.append("null");
    } else {
      sb.append(this.deleteReson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowProcessDefkey:");
    if (this.workflowProcessDefkey == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowProcessDefkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processDefName:");
    if (this.processDefName == null) {
      sb.append("null");
    } else {
      sb.append(this.processDefName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkflowHistoryVoStandardSchemeFactory implements SchemeFactory {
    public WorkflowHistoryVoStandardScheme getScheme() {
      return new WorkflowHistoryVoStandardScheme();
    }
  }

  private static class WorkflowHistoryVoStandardScheme extends StandardScheme<WorkflowHistoryVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkflowHistoryVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROCESS_INSTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processInstractId = iprot.readString();
              struct.setProcessInstractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROCESSDEFINTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processdefintionId = iprot.readString();
              struct.setProcessdefintionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exectionId = iprot.readI32();
              struct.setExectionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_DEF_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskDefKey = iprot.readString();
              struct.setTaskDefKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TASK_DEF_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskDefName = iprot.readString();
              struct.setTaskDefNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXEC_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execUserName = iprot.readString();
              struct.setExecUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXEC_USER_REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execUserRealName = iprot.readString();
              struct.setExecUserRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXECUTE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executeDttm = iprot.readString();
              struct.setExecuteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELETE_RESON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deleteReson = iprot.readString();
              struct.setDeleteResonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WORKFLOW_PROCESS_DEFKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowProcessDefkey = iprot.readString();
              struct.setWorkflowProcessDefkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROCESS_DEF_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processDefName = iprot.readString();
              struct.setProcessDefNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkflowHistoryVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      if (struct.processInstractId != null) {
        oprot.writeFieldBegin(PROCESS_INSTRACT_ID_FIELD_DESC);
        oprot.writeString(struct.processInstractId);
        oprot.writeFieldEnd();
      }
      if (struct.processdefintionId != null) {
        oprot.writeFieldBegin(PROCESSDEFINTION_ID_FIELD_DESC);
        oprot.writeString(struct.processdefintionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECTION_ID_FIELD_DESC);
      oprot.writeI32(struct.exectionId);
      oprot.writeFieldEnd();
      if (struct.taskDefKey != null) {
        oprot.writeFieldBegin(TASK_DEF_KEY_FIELD_DESC);
        oprot.writeString(struct.taskDefKey);
        oprot.writeFieldEnd();
      }
      if (struct.taskDefName != null) {
        oprot.writeFieldBegin(TASK_DEF_NAME_FIELD_DESC);
        oprot.writeString(struct.taskDefName);
        oprot.writeFieldEnd();
      }
      if (struct.execUserName != null) {
        oprot.writeFieldBegin(EXEC_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.execUserName);
        oprot.writeFieldEnd();
      }
      if (struct.execUserRealName != null) {
        oprot.writeFieldBegin(EXEC_USER_REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.execUserRealName);
        oprot.writeFieldEnd();
      }
      if (struct.executeDttm != null) {
        oprot.writeFieldBegin(EXECUTE_DTTM_FIELD_DESC);
        oprot.writeString(struct.executeDttm);
        oprot.writeFieldEnd();
      }
      if (struct.deleteReson != null) {
        oprot.writeFieldBegin(DELETE_RESON_FIELD_DESC);
        oprot.writeString(struct.deleteReson);
        oprot.writeFieldEnd();
      }
      if (struct.workflowProcessDefkey != null) {
        oprot.writeFieldBegin(WORKFLOW_PROCESS_DEFKEY_FIELD_DESC);
        oprot.writeString(struct.workflowProcessDefkey);
        oprot.writeFieldEnd();
      }
      if (struct.processDefName != null) {
        oprot.writeFieldBegin(PROCESS_DEF_NAME_FIELD_DESC);
        oprot.writeString(struct.processDefName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkflowHistoryVoTupleSchemeFactory implements SchemeFactory {
    public WorkflowHistoryVoTupleScheme getScheme() {
      return new WorkflowHistoryVoTupleScheme();
    }
  }

  private static class WorkflowHistoryVoTupleScheme extends TupleScheme<WorkflowHistoryVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkflowHistoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetProcessInstractId()) {
        optionals.set(1);
      }
      if (struct.isSetProcessdefintionId()) {
        optionals.set(2);
      }
      if (struct.isSetExectionId()) {
        optionals.set(3);
      }
      if (struct.isSetTaskDefKey()) {
        optionals.set(4);
      }
      if (struct.isSetTaskDefName()) {
        optionals.set(5);
      }
      if (struct.isSetExecUserName()) {
        optionals.set(6);
      }
      if (struct.isSetExecUserRealName()) {
        optionals.set(7);
      }
      if (struct.isSetExecuteDttm()) {
        optionals.set(8);
      }
      if (struct.isSetDeleteReson()) {
        optionals.set(9);
      }
      if (struct.isSetWorkflowProcessDefkey()) {
        optionals.set(10);
      }
      if (struct.isSetProcessDefName()) {
        optionals.set(11);
      }
      if (struct.isSetProjectId()) {
        optionals.set(12);
      }
      if (struct.isSetRefId()) {
        optionals.set(13);
      }
      if (struct.isSetProjectName()) {
        optionals.set(14);
      }
      if (struct.isSetMessage()) {
        optionals.set(15);
      }
      if (struct.isSetRows()) {
        optionals.set(16);
      }
      if (struct.isSetPage()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetProcessInstractId()) {
        oprot.writeString(struct.processInstractId);
      }
      if (struct.isSetProcessdefintionId()) {
        oprot.writeString(struct.processdefintionId);
      }
      if (struct.isSetExectionId()) {
        oprot.writeI32(struct.exectionId);
      }
      if (struct.isSetTaskDefKey()) {
        oprot.writeString(struct.taskDefKey);
      }
      if (struct.isSetTaskDefName()) {
        oprot.writeString(struct.taskDefName);
      }
      if (struct.isSetExecUserName()) {
        oprot.writeString(struct.execUserName);
      }
      if (struct.isSetExecUserRealName()) {
        oprot.writeString(struct.execUserRealName);
      }
      if (struct.isSetExecuteDttm()) {
        oprot.writeString(struct.executeDttm);
      }
      if (struct.isSetDeleteReson()) {
        oprot.writeString(struct.deleteReson);
      }
      if (struct.isSetWorkflowProcessDefkey()) {
        oprot.writeString(struct.workflowProcessDefkey);
      }
      if (struct.isSetProcessDefName()) {
        oprot.writeString(struct.processDefName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkflowHistoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.processInstractId = iprot.readString();
        struct.setProcessInstractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.processdefintionId = iprot.readString();
        struct.setProcessdefintionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exectionId = iprot.readI32();
        struct.setExectionIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.taskDefKey = iprot.readString();
        struct.setTaskDefKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.taskDefName = iprot.readString();
        struct.setTaskDefNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.execUserName = iprot.readString();
        struct.setExecUserNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.execUserRealName = iprot.readString();
        struct.setExecUserRealNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.executeDttm = iprot.readString();
        struct.setExecuteDttmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deleteReson = iprot.readString();
        struct.setDeleteResonIsSet(true);
      }
      if (incoming.get(10)) {
        struct.workflowProcessDefkey = iprot.readString();
        struct.setWorkflowProcessDefkeyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.processDefName = iprot.readString();
        struct.setProcessDefNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
    }
  }

}


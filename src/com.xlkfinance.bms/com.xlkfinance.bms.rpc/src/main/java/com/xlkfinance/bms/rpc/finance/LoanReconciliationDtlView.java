/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class LoanReconciliationDtlView implements org.apache.thrift.TBase<LoanReconciliationDtlView, LoanReconciliationDtlView._Fields>, java.io.Serializable, Cloneable, Comparable<LoanReconciliationDtlView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanReconciliationDtlView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CYCLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationDt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEL_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("delTypeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanReconciliationDtlViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanReconciliationDtlViewTupleSchemeFactory());
  }

  public int pid; // required
  public String cycleName; // required
  public String reconciliationDt; // required
  public String delTypeName; // required
  public double reconciliationAmt; // required
  public String description; // required
  public int type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CYCLE_NAME((short)2, "cycleName"),
    RECONCILIATION_DT((short)3, "reconciliationDt"),
    DEL_TYPE_NAME((short)4, "delTypeName"),
    RECONCILIATION_AMT((short)5, "reconciliationAmt"),
    DESCRIPTION((short)6, "description"),
    TYPE((short)7, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CYCLE_NAME
          return CYCLE_NAME;
        case 3: // RECONCILIATION_DT
          return RECONCILIATION_DT;
        case 4: // DEL_TYPE_NAME
          return DEL_TYPE_NAME;
        case 5: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CYCLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("cycleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECONCILIATION_DT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEL_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("delTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanReconciliationDtlView.class, metaDataMap);
  }

  public LoanReconciliationDtlView() {
  }

  public LoanReconciliationDtlView(
    int pid,
    String cycleName,
    String reconciliationDt,
    String delTypeName,
    double reconciliationAmt,
    String description,
    int type)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cycleName = cycleName;
    this.reconciliationDt = reconciliationDt;
    this.delTypeName = delTypeName;
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.description = description;
    this.type = type;
    setTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanReconciliationDtlView(LoanReconciliationDtlView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCycleName()) {
      this.cycleName = other.cycleName;
    }
    if (other.isSetReconciliationDt()) {
      this.reconciliationDt = other.reconciliationDt;
    }
    if (other.isSetDelTypeName()) {
      this.delTypeName = other.delTypeName;
    }
    this.reconciliationAmt = other.reconciliationAmt;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.type = other.type;
  }

  public LoanReconciliationDtlView deepCopy() {
    return new LoanReconciliationDtlView(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cycleName = null;
    this.reconciliationDt = null;
    this.delTypeName = null;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    this.description = null;
    setTypeIsSet(false);
    this.type = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public LoanReconciliationDtlView setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getCycleName() {
    return this.cycleName;
  }

  public LoanReconciliationDtlView setCycleName(String cycleName) {
    this.cycleName = cycleName;
    return this;
  }

  public void unsetCycleName() {
    this.cycleName = null;
  }

  /** Returns true if field cycleName is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleName() {
    return this.cycleName != null;
  }

  public void setCycleNameIsSet(boolean value) {
    if (!value) {
      this.cycleName = null;
    }
  }

  public String getReconciliationDt() {
    return this.reconciliationDt;
  }

  public LoanReconciliationDtlView setReconciliationDt(String reconciliationDt) {
    this.reconciliationDt = reconciliationDt;
    return this;
  }

  public void unsetReconciliationDt() {
    this.reconciliationDt = null;
  }

  /** Returns true if field reconciliationDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationDt() {
    return this.reconciliationDt != null;
  }

  public void setReconciliationDtIsSet(boolean value) {
    if (!value) {
      this.reconciliationDt = null;
    }
  }

  public String getDelTypeName() {
    return this.delTypeName;
  }

  public LoanReconciliationDtlView setDelTypeName(String delTypeName) {
    this.delTypeName = delTypeName;
    return this;
  }

  public void unsetDelTypeName() {
    this.delTypeName = null;
  }

  /** Returns true if field delTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetDelTypeName() {
    return this.delTypeName != null;
  }

  public void setDelTypeNameIsSet(boolean value) {
    if (!value) {
      this.delTypeName = null;
    }
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public LoanReconciliationDtlView setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public LoanReconciliationDtlView setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public LoanReconciliationDtlView setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CYCLE_NAME:
      if (value == null) {
        unsetCycleName();
      } else {
        setCycleName((String)value);
      }
      break;

    case RECONCILIATION_DT:
      if (value == null) {
        unsetReconciliationDt();
      } else {
        setReconciliationDt((String)value);
      }
      break;

    case DEL_TYPE_NAME:
      if (value == null) {
        unsetDelTypeName();
      } else {
        setDelTypeName((String)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CYCLE_NAME:
      return getCycleName();

    case RECONCILIATION_DT:
      return getReconciliationDt();

    case DEL_TYPE_NAME:
      return getDelTypeName();

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case DESCRIPTION:
      return getDescription();

    case TYPE:
      return Integer.valueOf(getType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CYCLE_NAME:
      return isSetCycleName();
    case RECONCILIATION_DT:
      return isSetReconciliationDt();
    case DEL_TYPE_NAME:
      return isSetDelTypeName();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case DESCRIPTION:
      return isSetDescription();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanReconciliationDtlView)
      return this.equals((LoanReconciliationDtlView)that);
    return false;
  }

  public boolean equals(LoanReconciliationDtlView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cycleName = true && this.isSetCycleName();
    boolean that_present_cycleName = true && that.isSetCycleName();
    if (this_present_cycleName || that_present_cycleName) {
      if (!(this_present_cycleName && that_present_cycleName))
        return false;
      if (!this.cycleName.equals(that.cycleName))
        return false;
    }

    boolean this_present_reconciliationDt = true && this.isSetReconciliationDt();
    boolean that_present_reconciliationDt = true && that.isSetReconciliationDt();
    if (this_present_reconciliationDt || that_present_reconciliationDt) {
      if (!(this_present_reconciliationDt && that_present_reconciliationDt))
        return false;
      if (!this.reconciliationDt.equals(that.reconciliationDt))
        return false;
    }

    boolean this_present_delTypeName = true && this.isSetDelTypeName();
    boolean that_present_delTypeName = true && that.isSetDelTypeName();
    if (this_present_delTypeName || that_present_delTypeName) {
      if (!(this_present_delTypeName && that_present_delTypeName))
        return false;
      if (!this.delTypeName.equals(that.delTypeName))
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cycleName = true && (isSetCycleName());
    list.add(present_cycleName);
    if (present_cycleName)
      list.add(cycleName);

    boolean present_reconciliationDt = true && (isSetReconciliationDt());
    list.add(present_reconciliationDt);
    if (present_reconciliationDt)
      list.add(reconciliationDt);

    boolean present_delTypeName = true && (isSetDelTypeName());
    list.add(present_delTypeName);
    if (present_delTypeName)
      list.add(delTypeName);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanReconciliationDtlView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleName()).compareTo(other.isSetCycleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleName, other.cycleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationDt()).compareTo(other.isSetReconciliationDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationDt, other.reconciliationDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelTypeName()).compareTo(other.isSetDelTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delTypeName, other.delTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanReconciliationDtlView(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleName:");
    if (this.cycleName == null) {
      sb.append("null");
    } else {
      sb.append(this.cycleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationDt:");
    if (this.reconciliationDt == null) {
      sb.append("null");
    } else {
      sb.append(this.reconciliationDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("delTypeName:");
    if (this.delTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.delTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanReconciliationDtlViewStandardSchemeFactory implements SchemeFactory {
    public LoanReconciliationDtlViewStandardScheme getScheme() {
      return new LoanReconciliationDtlViewStandardScheme();
    }
  }

  private static class LoanReconciliationDtlViewStandardScheme extends StandardScheme<LoanReconciliationDtlView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanReconciliationDtlView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CYCLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cycleName = iprot.readString();
              struct.setCycleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECONCILIATION_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reconciliationDt = iprot.readString();
              struct.setReconciliationDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEL_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delTypeName = iprot.readString();
              struct.setDelTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanReconciliationDtlView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cycleName != null) {
        oprot.writeFieldBegin(CYCLE_NAME_FIELD_DESC);
        oprot.writeString(struct.cycleName);
        oprot.writeFieldEnd();
      }
      if (struct.reconciliationDt != null) {
        oprot.writeFieldBegin(RECONCILIATION_DT_FIELD_DESC);
        oprot.writeString(struct.reconciliationDt);
        oprot.writeFieldEnd();
      }
      if (struct.delTypeName != null) {
        oprot.writeFieldBegin(DEL_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.delTypeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanReconciliationDtlViewTupleSchemeFactory implements SchemeFactory {
    public LoanReconciliationDtlViewTupleScheme getScheme() {
      return new LoanReconciliationDtlViewTupleScheme();
    }
  }

  private static class LoanReconciliationDtlViewTupleScheme extends TupleScheme<LoanReconciliationDtlView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanReconciliationDtlView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCycleName()) {
        optionals.set(1);
      }
      if (struct.isSetReconciliationDt()) {
        optionals.set(2);
      }
      if (struct.isSetDelTypeName()) {
        optionals.set(3);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(4);
      }
      if (struct.isSetDescription()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCycleName()) {
        oprot.writeString(struct.cycleName);
      }
      if (struct.isSetReconciliationDt()) {
        oprot.writeString(struct.reconciliationDt);
      }
      if (struct.isSetDelTypeName()) {
        oprot.writeString(struct.delTypeName);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanReconciliationDtlView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cycleName = iprot.readString();
        struct.setCycleNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reconciliationDt = iprot.readString();
        struct.setReconciliationDtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.delTypeName = iprot.readString();
        struct.setDelTypeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
    }
  }

}


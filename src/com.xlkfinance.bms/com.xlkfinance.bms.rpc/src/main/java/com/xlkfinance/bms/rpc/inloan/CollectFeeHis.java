/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class CollectFeeHis implements org.apache.thrift.TBase<CollectFeeHis, CollectFeeHis._Fields>, java.io.Serializable, Cloneable, Comparable<CollectFeeHis> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectFeeHis");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CONSULTING_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("consultingFee", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BROKERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerage", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PRO_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("proResource", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CREATER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createrName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FINANCE_HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("financeHandleId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PRO_RESOURCELOOKUP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("proResourcelookupVal", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccount", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REC_PRO_FIELD_DESC = new org.apache.thrift.protocol.TField("recPro", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REC_PRO_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("recProStr", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectFeeHisStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectFeeHisTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public double consultingFee; // required
  public double poundage; // required
  public double brokerage; // required
  public String recDate; // required
  public String proResource; // required
  public int createrId; // required
  public String createrDate; // required
  public int page; // required
  public int rows; // required
  public String createrName; // required
  public int financeHandleId; // required
  public String proResourcelookupVal; // required
  public String recAccount; // required
  public int recPro; // required
  public String recProStr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    CONSULTING_FEE((short)3, "consultingFee"),
    POUNDAGE((short)4, "poundage"),
    BROKERAGE((short)5, "brokerage"),
    REC_DATE((short)6, "recDate"),
    PRO_RESOURCE((short)7, "proResource"),
    CREATER_ID((short)8, "createrId"),
    CREATER_DATE((short)9, "createrDate"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    CREATER_NAME((short)12, "createrName"),
    FINANCE_HANDLE_ID((short)13, "financeHandleId"),
    PRO_RESOURCELOOKUP_VAL((short)14, "proResourcelookupVal"),
    REC_ACCOUNT((short)15, "recAccount"),
    REC_PRO((short)16, "recPro"),
    REC_PRO_STR((short)17, "recProStr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // CONSULTING_FEE
          return CONSULTING_FEE;
        case 4: // POUNDAGE
          return POUNDAGE;
        case 5: // BROKERAGE
          return BROKERAGE;
        case 6: // REC_DATE
          return REC_DATE;
        case 7: // PRO_RESOURCE
          return PRO_RESOURCE;
        case 8: // CREATER_ID
          return CREATER_ID;
        case 9: // CREATER_DATE
          return CREATER_DATE;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // CREATER_NAME
          return CREATER_NAME;
        case 13: // FINANCE_HANDLE_ID
          return FINANCE_HANDLE_ID;
        case 14: // PRO_RESOURCELOOKUP_VAL
          return PRO_RESOURCELOOKUP_VAL;
        case 15: // REC_ACCOUNT
          return REC_ACCOUNT;
        case 16: // REC_PRO
          return REC_PRO;
        case 17: // REC_PRO_STR
          return REC_PRO_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __CONSULTINGFEE_ISSET_ID = 2;
  private static final int __POUNDAGE_ISSET_ID = 3;
  private static final int __BROKERAGE_ISSET_ID = 4;
  private static final int __CREATERID_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private static final int __FINANCEHANDLEID_ISSET_ID = 8;
  private static final int __RECPRO_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONSULTING_FEE, new org.apache.thrift.meta_data.FieldMetaData("consultingFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BROKERAGE, new org.apache.thrift.meta_data.FieldMetaData("brokerage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_DATE, new org.apache.thrift.meta_data.FieldMetaData("recDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRO_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("proResource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_NAME, new org.apache.thrift.meta_data.FieldMetaData("createrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINANCE_HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("financeHandleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRO_RESOURCELOOKUP_VAL, new org.apache.thrift.meta_data.FieldMetaData("proResourcelookupVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("recAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_PRO, new org.apache.thrift.meta_data.FieldMetaData("recPro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_PRO_STR, new org.apache.thrift.meta_data.FieldMetaData("recProStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectFeeHis.class, metaDataMap);
  }

  public CollectFeeHis() {
    this.page = 1;

    this.rows = 10;

  }

  public CollectFeeHis(
    int pid,
    int projectId,
    double consultingFee,
    double poundage,
    double brokerage,
    String recDate,
    String proResource,
    int createrId,
    String createrDate,
    int page,
    int rows,
    String createrName,
    int financeHandleId,
    String proResourcelookupVal,
    String recAccount,
    int recPro,
    String recProStr)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.consultingFee = consultingFee;
    setConsultingFeeIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    this.recDate = recDate;
    this.proResource = proResource;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.createrDate = createrDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.createrName = createrName;
    this.financeHandleId = financeHandleId;
    setFinanceHandleIdIsSet(true);
    this.proResourcelookupVal = proResourcelookupVal;
    this.recAccount = recAccount;
    this.recPro = recPro;
    setRecProIsSet(true);
    this.recProStr = recProStr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectFeeHis(CollectFeeHis other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.consultingFee = other.consultingFee;
    this.poundage = other.poundage;
    this.brokerage = other.brokerage;
    if (other.isSetRecDate()) {
      this.recDate = other.recDate;
    }
    if (other.isSetProResource()) {
      this.proResource = other.proResource;
    }
    this.createrId = other.createrId;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreaterName()) {
      this.createrName = other.createrName;
    }
    this.financeHandleId = other.financeHandleId;
    if (other.isSetProResourcelookupVal()) {
      this.proResourcelookupVal = other.proResourcelookupVal;
    }
    if (other.isSetRecAccount()) {
      this.recAccount = other.recAccount;
    }
    this.recPro = other.recPro;
    if (other.isSetRecProStr()) {
      this.recProStr = other.recProStr;
    }
  }

  public CollectFeeHis deepCopy() {
    return new CollectFeeHis(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setConsultingFeeIsSet(false);
    this.consultingFee = 0.0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    setBrokerageIsSet(false);
    this.brokerage = 0.0;
    this.recDate = null;
    this.proResource = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.createrDate = null;
    this.page = 1;

    this.rows = 10;

    this.createrName = null;
    setFinanceHandleIdIsSet(false);
    this.financeHandleId = 0;
    this.proResourcelookupVal = null;
    this.recAccount = null;
    setRecProIsSet(false);
    this.recPro = 0;
    this.recProStr = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CollectFeeHis setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CollectFeeHis setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getConsultingFee() {
    return this.consultingFee;
  }

  public CollectFeeHis setConsultingFee(double consultingFee) {
    this.consultingFee = consultingFee;
    setConsultingFeeIsSet(true);
    return this;
  }

  public void unsetConsultingFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSULTINGFEE_ISSET_ID);
  }

  /** Returns true if field consultingFee is set (has been assigned a value) and false otherwise */
  public boolean isSetConsultingFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSULTINGFEE_ISSET_ID);
  }

  public void setConsultingFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSULTINGFEE_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public CollectFeeHis setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public double getBrokerage() {
    return this.brokerage;
  }

  public CollectFeeHis setBrokerage(double brokerage) {
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    return this;
  }

  public void unsetBrokerage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  /** Returns true if field brokerage is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerage() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  public void setBrokerageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERAGE_ISSET_ID, value);
  }

  public String getRecDate() {
    return this.recDate;
  }

  public CollectFeeHis setRecDate(String recDate) {
    this.recDate = recDate;
    return this;
  }

  public void unsetRecDate() {
    this.recDate = null;
  }

  /** Returns true if field recDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecDate() {
    return this.recDate != null;
  }

  public void setRecDateIsSet(boolean value) {
    if (!value) {
      this.recDate = null;
    }
  }

  public String getProResource() {
    return this.proResource;
  }

  public CollectFeeHis setProResource(String proResource) {
    this.proResource = proResource;
    return this;
  }

  public void unsetProResource() {
    this.proResource = null;
  }

  /** Returns true if field proResource is set (has been assigned a value) and false otherwise */
  public boolean isSetProResource() {
    return this.proResource != null;
  }

  public void setProResourceIsSet(boolean value) {
    if (!value) {
      this.proResource = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public CollectFeeHis setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public CollectFeeHis setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CollectFeeHis setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CollectFeeHis setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreaterName() {
    return this.createrName;
  }

  public CollectFeeHis setCreaterName(String createrName) {
    this.createrName = createrName;
    return this;
  }

  public void unsetCreaterName() {
    this.createrName = null;
  }

  /** Returns true if field createrName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterName() {
    return this.createrName != null;
  }

  public void setCreaterNameIsSet(boolean value) {
    if (!value) {
      this.createrName = null;
    }
  }

  public int getFinanceHandleId() {
    return this.financeHandleId;
  }

  public CollectFeeHis setFinanceHandleId(int financeHandleId) {
    this.financeHandleId = financeHandleId;
    setFinanceHandleIdIsSet(true);
    return this;
  }

  public void unsetFinanceHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINANCEHANDLEID_ISSET_ID);
  }

  /** Returns true if field financeHandleId is set (has been assigned a value) and false otherwise */
  public boolean isSetFinanceHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __FINANCEHANDLEID_ISSET_ID);
  }

  public void setFinanceHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINANCEHANDLEID_ISSET_ID, value);
  }

  public String getProResourcelookupVal() {
    return this.proResourcelookupVal;
  }

  public CollectFeeHis setProResourcelookupVal(String proResourcelookupVal) {
    this.proResourcelookupVal = proResourcelookupVal;
    return this;
  }

  public void unsetProResourcelookupVal() {
    this.proResourcelookupVal = null;
  }

  /** Returns true if field proResourcelookupVal is set (has been assigned a value) and false otherwise */
  public boolean isSetProResourcelookupVal() {
    return this.proResourcelookupVal != null;
  }

  public void setProResourcelookupValIsSet(boolean value) {
    if (!value) {
      this.proResourcelookupVal = null;
    }
  }

  public String getRecAccount() {
    return this.recAccount;
  }

  public CollectFeeHis setRecAccount(String recAccount) {
    this.recAccount = recAccount;
    return this;
  }

  public void unsetRecAccount() {
    this.recAccount = null;
  }

  /** Returns true if field recAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccount() {
    return this.recAccount != null;
  }

  public void setRecAccountIsSet(boolean value) {
    if (!value) {
      this.recAccount = null;
    }
  }

  public int getRecPro() {
    return this.recPro;
  }

  public CollectFeeHis setRecPro(int recPro) {
    this.recPro = recPro;
    setRecProIsSet(true);
    return this;
  }

  public void unsetRecPro() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECPRO_ISSET_ID);
  }

  /** Returns true if field recPro is set (has been assigned a value) and false otherwise */
  public boolean isSetRecPro() {
    return EncodingUtils.testBit(__isset_bitfield, __RECPRO_ISSET_ID);
  }

  public void setRecProIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECPRO_ISSET_ID, value);
  }

  public String getRecProStr() {
    return this.recProStr;
  }

  public CollectFeeHis setRecProStr(String recProStr) {
    this.recProStr = recProStr;
    return this;
  }

  public void unsetRecProStr() {
    this.recProStr = null;
  }

  /** Returns true if field recProStr is set (has been assigned a value) and false otherwise */
  public boolean isSetRecProStr() {
    return this.recProStr != null;
  }

  public void setRecProStrIsSet(boolean value) {
    if (!value) {
      this.recProStr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case CONSULTING_FEE:
      if (value == null) {
        unsetConsultingFee();
      } else {
        setConsultingFee((Double)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case BROKERAGE:
      if (value == null) {
        unsetBrokerage();
      } else {
        setBrokerage((Double)value);
      }
      break;

    case REC_DATE:
      if (value == null) {
        unsetRecDate();
      } else {
        setRecDate((String)value);
      }
      break;

    case PRO_RESOURCE:
      if (value == null) {
        unsetProResource();
      } else {
        setProResource((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATER_NAME:
      if (value == null) {
        unsetCreaterName();
      } else {
        setCreaterName((String)value);
      }
      break;

    case FINANCE_HANDLE_ID:
      if (value == null) {
        unsetFinanceHandleId();
      } else {
        setFinanceHandleId((Integer)value);
      }
      break;

    case PRO_RESOURCELOOKUP_VAL:
      if (value == null) {
        unsetProResourcelookupVal();
      } else {
        setProResourcelookupVal((String)value);
      }
      break;

    case REC_ACCOUNT:
      if (value == null) {
        unsetRecAccount();
      } else {
        setRecAccount((String)value);
      }
      break;

    case REC_PRO:
      if (value == null) {
        unsetRecPro();
      } else {
        setRecPro((Integer)value);
      }
      break;

    case REC_PRO_STR:
      if (value == null) {
        unsetRecProStr();
      } else {
        setRecProStr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case CONSULTING_FEE:
      return Double.valueOf(getConsultingFee());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case BROKERAGE:
      return Double.valueOf(getBrokerage());

    case REC_DATE:
      return getRecDate();

    case PRO_RESOURCE:
      return getProResource();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case CREATER_DATE:
      return getCreaterDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATER_NAME:
      return getCreaterName();

    case FINANCE_HANDLE_ID:
      return Integer.valueOf(getFinanceHandleId());

    case PRO_RESOURCELOOKUP_VAL:
      return getProResourcelookupVal();

    case REC_ACCOUNT:
      return getRecAccount();

    case REC_PRO:
      return Integer.valueOf(getRecPro());

    case REC_PRO_STR:
      return getRecProStr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case CONSULTING_FEE:
      return isSetConsultingFee();
    case POUNDAGE:
      return isSetPoundage();
    case BROKERAGE:
      return isSetBrokerage();
    case REC_DATE:
      return isSetRecDate();
    case PRO_RESOURCE:
      return isSetProResource();
    case CREATER_ID:
      return isSetCreaterId();
    case CREATER_DATE:
      return isSetCreaterDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATER_NAME:
      return isSetCreaterName();
    case FINANCE_HANDLE_ID:
      return isSetFinanceHandleId();
    case PRO_RESOURCELOOKUP_VAL:
      return isSetProResourcelookupVal();
    case REC_ACCOUNT:
      return isSetRecAccount();
    case REC_PRO:
      return isSetRecPro();
    case REC_PRO_STR:
      return isSetRecProStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectFeeHis)
      return this.equals((CollectFeeHis)that);
    return false;
  }

  public boolean equals(CollectFeeHis that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_consultingFee = true;
    boolean that_present_consultingFee = true;
    if (this_present_consultingFee || that_present_consultingFee) {
      if (!(this_present_consultingFee && that_present_consultingFee))
        return false;
      if (this.consultingFee != that.consultingFee)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_brokerage = true;
    boolean that_present_brokerage = true;
    if (this_present_brokerage || that_present_brokerage) {
      if (!(this_present_brokerage && that_present_brokerage))
        return false;
      if (this.brokerage != that.brokerage)
        return false;
    }

    boolean this_present_recDate = true && this.isSetRecDate();
    boolean that_present_recDate = true && that.isSetRecDate();
    if (this_present_recDate || that_present_recDate) {
      if (!(this_present_recDate && that_present_recDate))
        return false;
      if (!this.recDate.equals(that.recDate))
        return false;
    }

    boolean this_present_proResource = true && this.isSetProResource();
    boolean that_present_proResource = true && that.isSetProResource();
    if (this_present_proResource || that_present_proResource) {
      if (!(this_present_proResource && that_present_proResource))
        return false;
      if (!this.proResource.equals(that.proResource))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_createrName = true && this.isSetCreaterName();
    boolean that_present_createrName = true && that.isSetCreaterName();
    if (this_present_createrName || that_present_createrName) {
      if (!(this_present_createrName && that_present_createrName))
        return false;
      if (!this.createrName.equals(that.createrName))
        return false;
    }

    boolean this_present_financeHandleId = true;
    boolean that_present_financeHandleId = true;
    if (this_present_financeHandleId || that_present_financeHandleId) {
      if (!(this_present_financeHandleId && that_present_financeHandleId))
        return false;
      if (this.financeHandleId != that.financeHandleId)
        return false;
    }

    boolean this_present_proResourcelookupVal = true && this.isSetProResourcelookupVal();
    boolean that_present_proResourcelookupVal = true && that.isSetProResourcelookupVal();
    if (this_present_proResourcelookupVal || that_present_proResourcelookupVal) {
      if (!(this_present_proResourcelookupVal && that_present_proResourcelookupVal))
        return false;
      if (!this.proResourcelookupVal.equals(that.proResourcelookupVal))
        return false;
    }

    boolean this_present_recAccount = true && this.isSetRecAccount();
    boolean that_present_recAccount = true && that.isSetRecAccount();
    if (this_present_recAccount || that_present_recAccount) {
      if (!(this_present_recAccount && that_present_recAccount))
        return false;
      if (!this.recAccount.equals(that.recAccount))
        return false;
    }

    boolean this_present_recPro = true;
    boolean that_present_recPro = true;
    if (this_present_recPro || that_present_recPro) {
      if (!(this_present_recPro && that_present_recPro))
        return false;
      if (this.recPro != that.recPro)
        return false;
    }

    boolean this_present_recProStr = true && this.isSetRecProStr();
    boolean that_present_recProStr = true && that.isSetRecProStr();
    if (this_present_recProStr || that_present_recProStr) {
      if (!(this_present_recProStr && that_present_recProStr))
        return false;
      if (!this.recProStr.equals(that.recProStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_consultingFee = true;
    list.add(present_consultingFee);
    if (present_consultingFee)
      list.add(consultingFee);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_brokerage = true;
    list.add(present_brokerage);
    if (present_brokerage)
      list.add(brokerage);

    boolean present_recDate = true && (isSetRecDate());
    list.add(present_recDate);
    if (present_recDate)
      list.add(recDate);

    boolean present_proResource = true && (isSetProResource());
    list.add(present_proResource);
    if (present_proResource)
      list.add(proResource);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_createrName = true && (isSetCreaterName());
    list.add(present_createrName);
    if (present_createrName)
      list.add(createrName);

    boolean present_financeHandleId = true;
    list.add(present_financeHandleId);
    if (present_financeHandleId)
      list.add(financeHandleId);

    boolean present_proResourcelookupVal = true && (isSetProResourcelookupVal());
    list.add(present_proResourcelookupVal);
    if (present_proResourcelookupVal)
      list.add(proResourcelookupVal);

    boolean present_recAccount = true && (isSetRecAccount());
    list.add(present_recAccount);
    if (present_recAccount)
      list.add(recAccount);

    boolean present_recPro = true;
    list.add(present_recPro);
    if (present_recPro)
      list.add(recPro);

    boolean present_recProStr = true && (isSetRecProStr());
    list.add(present_recProStr);
    if (present_recProStr)
      list.add(recProStr);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectFeeHis other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsultingFee()).compareTo(other.isSetConsultingFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsultingFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consultingFee, other.consultingFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerage()).compareTo(other.isSetBrokerage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerage, other.brokerage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecDate()).compareTo(other.isSetRecDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recDate, other.recDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProResource()).compareTo(other.isSetProResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proResource, other.proResource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterName()).compareTo(other.isSetCreaterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrName, other.createrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinanceHandleId()).compareTo(other.isSetFinanceHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinanceHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeHandleId, other.financeHandleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProResourcelookupVal()).compareTo(other.isSetProResourcelookupVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProResourcelookupVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proResourcelookupVal, other.proResourcelookupVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccount()).compareTo(other.isSetRecAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccount, other.recAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecPro()).compareTo(other.isSetRecPro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecPro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recPro, other.recPro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecProStr()).compareTo(other.isSetRecProStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecProStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recProStr, other.recProStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectFeeHis(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consultingFee:");
    sb.append(this.consultingFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerage:");
    sb.append(this.brokerage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recDate:");
    if (this.recDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proResource:");
    if (this.proResource == null) {
      sb.append("null");
    } else {
      sb.append(this.proResource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrName:");
    if (this.createrName == null) {
      sb.append("null");
    } else {
      sb.append(this.createrName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("financeHandleId:");
    sb.append(this.financeHandleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proResourcelookupVal:");
    if (this.proResourcelookupVal == null) {
      sb.append("null");
    } else {
      sb.append(this.proResourcelookupVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccount:");
    if (this.recAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recPro:");
    sb.append(this.recPro);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recProStr:");
    if (this.recProStr == null) {
      sb.append("null");
    } else {
      sb.append(this.recProStr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectFeeHisStandardSchemeFactory implements SchemeFactory {
    public CollectFeeHisStandardScheme getScheme() {
      return new CollectFeeHisStandardScheme();
    }
  }

  private static class CollectFeeHisStandardScheme extends StandardScheme<CollectFeeHis> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectFeeHis struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONSULTING_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consultingFee = iprot.readDouble();
              struct.setConsultingFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.brokerage = iprot.readDouble();
              struct.setBrokerageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recDate = iprot.readString();
              struct.setRecDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRO_RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proResource = iprot.readString();
              struct.setProResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrName = iprot.readString();
              struct.setCreaterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FINANCE_HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.financeHandleId = iprot.readI32();
              struct.setFinanceHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRO_RESOURCELOOKUP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proResourcelookupVal = iprot.readString();
              struct.setProResourcelookupValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REC_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccount = iprot.readString();
              struct.setRecAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REC_PRO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recPro = iprot.readI32();
              struct.setRecProIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REC_PRO_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recProStr = iprot.readString();
              struct.setRecProStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectFeeHis struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONSULTING_FEE_FIELD_DESC);
      oprot.writeDouble(struct.consultingFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BROKERAGE_FIELD_DESC);
      oprot.writeDouble(struct.brokerage);
      oprot.writeFieldEnd();
      if (struct.recDate != null) {
        oprot.writeFieldBegin(REC_DATE_FIELD_DESC);
        oprot.writeString(struct.recDate);
        oprot.writeFieldEnd();
      }
      if (struct.proResource != null) {
        oprot.writeFieldBegin(PRO_RESOURCE_FIELD_DESC);
        oprot.writeString(struct.proResource);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.createrName != null) {
        oprot.writeFieldBegin(CREATER_NAME_FIELD_DESC);
        oprot.writeString(struct.createrName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINANCE_HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.financeHandleId);
      oprot.writeFieldEnd();
      if (struct.proResourcelookupVal != null) {
        oprot.writeFieldBegin(PRO_RESOURCELOOKUP_VAL_FIELD_DESC);
        oprot.writeString(struct.proResourcelookupVal);
        oprot.writeFieldEnd();
      }
      if (struct.recAccount != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.recAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_PRO_FIELD_DESC);
      oprot.writeI32(struct.recPro);
      oprot.writeFieldEnd();
      if (struct.recProStr != null) {
        oprot.writeFieldBegin(REC_PRO_STR_FIELD_DESC);
        oprot.writeString(struct.recProStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectFeeHisTupleSchemeFactory implements SchemeFactory {
    public CollectFeeHisTupleScheme getScheme() {
      return new CollectFeeHisTupleScheme();
    }
  }

  private static class CollectFeeHisTupleScheme extends TupleScheme<CollectFeeHis> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectFeeHis struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetConsultingFee()) {
        optionals.set(2);
      }
      if (struct.isSetPoundage()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerage()) {
        optionals.set(4);
      }
      if (struct.isSetRecDate()) {
        optionals.set(5);
      }
      if (struct.isSetProResource()) {
        optionals.set(6);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(7);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetCreaterName()) {
        optionals.set(11);
      }
      if (struct.isSetFinanceHandleId()) {
        optionals.set(12);
      }
      if (struct.isSetProResourcelookupVal()) {
        optionals.set(13);
      }
      if (struct.isSetRecAccount()) {
        optionals.set(14);
      }
      if (struct.isSetRecPro()) {
        optionals.set(15);
      }
      if (struct.isSetRecProStr()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetConsultingFee()) {
        oprot.writeDouble(struct.consultingFee);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetBrokerage()) {
        oprot.writeDouble(struct.brokerage);
      }
      if (struct.isSetRecDate()) {
        oprot.writeString(struct.recDate);
      }
      if (struct.isSetProResource()) {
        oprot.writeString(struct.proResource);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreaterName()) {
        oprot.writeString(struct.createrName);
      }
      if (struct.isSetFinanceHandleId()) {
        oprot.writeI32(struct.financeHandleId);
      }
      if (struct.isSetProResourcelookupVal()) {
        oprot.writeString(struct.proResourcelookupVal);
      }
      if (struct.isSetRecAccount()) {
        oprot.writeString(struct.recAccount);
      }
      if (struct.isSetRecPro()) {
        oprot.writeI32(struct.recPro);
      }
      if (struct.isSetRecProStr()) {
        oprot.writeString(struct.recProStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectFeeHis struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.consultingFee = iprot.readDouble();
        struct.setConsultingFeeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerage = iprot.readDouble();
        struct.setBrokerageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recDate = iprot.readString();
        struct.setRecDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.proResource = iprot.readString();
        struct.setProResourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createrName = iprot.readString();
        struct.setCreaterNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.financeHandleId = iprot.readI32();
        struct.setFinanceHandleIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.proResourcelookupVal = iprot.readString();
        struct.setProResourcelookupValIsSet(true);
      }
      if (incoming.get(14)) {
        struct.recAccount = iprot.readString();
        struct.setRecAccountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.recPro = iprot.readI32();
        struct.setRecProIsSet(true);
      }
      if (incoming.get(16)) {
        struct.recProStr = iprot.readString();
        struct.setRecProStrIsSet(true);
      }
    }
  }

}


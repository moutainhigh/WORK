/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepayOverdueView implements org.apache.thrift.TBase<RepayOverdueView, RepayOverdueView._Fields>, java.io.Serializable, Cloneable, Comparable<RepayOverdueView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepayOverdueView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStartDt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_START_DT_LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStartDtLast", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDt", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DT_LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDtLast", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OVERDUE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueTime", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField OVERDUE_TIME_LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueTimeLast", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IS_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconciliation", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ROW_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rowNum", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepayOverdueViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepayOverdueViewTupleSchemeFactory());
  }

  public int pId; // required
  public String projectName; // required
  public String projectId; // required
  public int acctType; // required
  public String cusName; // required
  public String requestStartDt; // required
  public String requestStartDtLast; // required
  public String planRepayDt; // required
  public String planRepayDtLast; // required
  public int overdueTime; // required
  public int overdueTimeLast; // required
  public String ecoTrade; // required
  public int isReconciliation; // required
  public int planCycleNum; // required
  public int rows; // required
  public int page; // required
  public int rowNum; // required
  public List<RepayOverdueDTO> results; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_ID((short)3, "projectId"),
    ACCT_TYPE((short)4, "acctType"),
    CUS_NAME((short)5, "cusName"),
    REQUEST_START_DT((short)6, "requestStartDt"),
    REQUEST_START_DT_LAST((short)7, "requestStartDtLast"),
    PLAN_REPAY_DT((short)8, "planRepayDt"),
    PLAN_REPAY_DT_LAST((short)9, "planRepayDtLast"),
    OVERDUE_TIME((short)10, "overdueTime"),
    OVERDUE_TIME_LAST((short)11, "overdueTimeLast"),
    ECO_TRADE((short)12, "ecoTrade"),
    IS_RECONCILIATION((short)13, "isReconciliation"),
    PLAN_CYCLE_NUM((short)14, "planCycleNum"),
    ROWS((short)16, "rows"),
    PAGE((short)17, "page"),
    ROW_NUM((short)18, "rowNum"),
    RESULTS((short)19, "results");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // ACCT_TYPE
          return ACCT_TYPE;
        case 5: // CUS_NAME
          return CUS_NAME;
        case 6: // REQUEST_START_DT
          return REQUEST_START_DT;
        case 7: // REQUEST_START_DT_LAST
          return REQUEST_START_DT_LAST;
        case 8: // PLAN_REPAY_DT
          return PLAN_REPAY_DT;
        case 9: // PLAN_REPAY_DT_LAST
          return PLAN_REPAY_DT_LAST;
        case 10: // OVERDUE_TIME
          return OVERDUE_TIME;
        case 11: // OVERDUE_TIME_LAST
          return OVERDUE_TIME_LAST;
        case 12: // ECO_TRADE
          return ECO_TRADE;
        case 13: // IS_RECONCILIATION
          return IS_RECONCILIATION;
        case 14: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 16: // ROWS
          return ROWS;
        case 17: // PAGE
          return PAGE;
        case 18: // ROW_NUM
          return ROW_NUM;
        case 19: // RESULTS
          return RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTTYPE_ISSET_ID = 1;
  private static final int __OVERDUETIME_ISSET_ID = 2;
  private static final int __OVERDUETIMELAST_ISSET_ID = 3;
  private static final int __ISRECONCILIATION_ISSET_ID = 4;
  private static final int __PLANCYCLENUM_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWNUM_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_START_DT, new org.apache.thrift.meta_data.FieldMetaData("requestStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_START_DT_LAST, new org.apache.thrift.meta_data.FieldMetaData("requestStartDtLast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_DT_LAST, new org.apache.thrift.meta_data.FieldMetaData("planRepayDtLast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_TIME, new org.apache.thrift.meta_data.FieldMetaData("overdueTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_TIME_LAST, new org.apache.thrift.meta_data.FieldMetaData("overdueTimeLast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("isReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROW_NUM, new org.apache.thrift.meta_data.FieldMetaData("rowNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "RepayOverdueDTO"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepayOverdueView.class, metaDataMap);
  }

  public RepayOverdueView() {
  }

  public RepayOverdueView(
    int pId,
    String projectName,
    String projectId,
    int acctType,
    String cusName,
    String requestStartDt,
    String requestStartDtLast,
    String planRepayDt,
    String planRepayDtLast,
    int overdueTime,
    int overdueTimeLast,
    String ecoTrade,
    int isReconciliation,
    int planCycleNum,
    int rows,
    int page,
    int rowNum,
    List<RepayOverdueDTO> results)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.projectName = projectName;
    this.projectId = projectId;
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    this.cusName = cusName;
    this.requestStartDt = requestStartDt;
    this.requestStartDtLast = requestStartDtLast;
    this.planRepayDt = planRepayDt;
    this.planRepayDtLast = planRepayDtLast;
    this.overdueTime = overdueTime;
    setOverdueTimeIsSet(true);
    this.overdueTimeLast = overdueTimeLast;
    setOverdueTimeLastIsSet(true);
    this.ecoTrade = ecoTrade;
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rowNum = rowNum;
    setRowNumIsSet(true);
    this.results = results;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepayOverdueView(RepayOverdueView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    this.acctType = other.acctType;
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    if (other.isSetRequestStartDt()) {
      this.requestStartDt = other.requestStartDt;
    }
    if (other.isSetRequestStartDtLast()) {
      this.requestStartDtLast = other.requestStartDtLast;
    }
    if (other.isSetPlanRepayDt()) {
      this.planRepayDt = other.planRepayDt;
    }
    if (other.isSetPlanRepayDtLast()) {
      this.planRepayDtLast = other.planRepayDtLast;
    }
    this.overdueTime = other.overdueTime;
    this.overdueTimeLast = other.overdueTimeLast;
    if (other.isSetEcoTrade()) {
      this.ecoTrade = other.ecoTrade;
    }
    this.isReconciliation = other.isReconciliation;
    this.planCycleNum = other.planCycleNum;
    this.rows = other.rows;
    this.page = other.page;
    this.rowNum = other.rowNum;
    if (other.isSetResults()) {
      List<RepayOverdueDTO> __this__results = new ArrayList<RepayOverdueDTO>(other.results.size());
      for (RepayOverdueDTO other_element : other.results) {
        __this__results.add(other_element);
      }
      this.results = __this__results;
    }
  }

  public RepayOverdueView deepCopy() {
    return new RepayOverdueView(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    this.projectName = null;
    this.projectId = null;
    setAcctTypeIsSet(false);
    this.acctType = 0;
    this.cusName = null;
    this.requestStartDt = null;
    this.requestStartDtLast = null;
    this.planRepayDt = null;
    this.planRepayDtLast = null;
    setOverdueTimeIsSet(false);
    this.overdueTime = 0;
    setOverdueTimeLastIsSet(false);
    this.overdueTimeLast = 0;
    this.ecoTrade = null;
    setIsReconciliationIsSet(false);
    this.isReconciliation = 0;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowNumIsSet(false);
    this.rowNum = 0;
    this.results = null;
  }

  public int getPId() {
    return this.pId;
  }

  public RepayOverdueView setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RepayOverdueView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public RepayOverdueView setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public int getAcctType() {
    return this.acctType;
  }

  public RepayOverdueView setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTTYPE_ISSET_ID, value);
  }

  public String getCusName() {
    return this.cusName;
  }

  public RepayOverdueView setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public String getRequestStartDt() {
    return this.requestStartDt;
  }

  public RepayOverdueView setRequestStartDt(String requestStartDt) {
    this.requestStartDt = requestStartDt;
    return this;
  }

  public void unsetRequestStartDt() {
    this.requestStartDt = null;
  }

  /** Returns true if field requestStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStartDt() {
    return this.requestStartDt != null;
  }

  public void setRequestStartDtIsSet(boolean value) {
    if (!value) {
      this.requestStartDt = null;
    }
  }

  public String getRequestStartDtLast() {
    return this.requestStartDtLast;
  }

  public RepayOverdueView setRequestStartDtLast(String requestStartDtLast) {
    this.requestStartDtLast = requestStartDtLast;
    return this;
  }

  public void unsetRequestStartDtLast() {
    this.requestStartDtLast = null;
  }

  /** Returns true if field requestStartDtLast is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStartDtLast() {
    return this.requestStartDtLast != null;
  }

  public void setRequestStartDtLastIsSet(boolean value) {
    if (!value) {
      this.requestStartDtLast = null;
    }
  }

  public String getPlanRepayDt() {
    return this.planRepayDt;
  }

  public RepayOverdueView setPlanRepayDt(String planRepayDt) {
    this.planRepayDt = planRepayDt;
    return this;
  }

  public void unsetPlanRepayDt() {
    this.planRepayDt = null;
  }

  /** Returns true if field planRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDt() {
    return this.planRepayDt != null;
  }

  public void setPlanRepayDtIsSet(boolean value) {
    if (!value) {
      this.planRepayDt = null;
    }
  }

  public String getPlanRepayDtLast() {
    return this.planRepayDtLast;
  }

  public RepayOverdueView setPlanRepayDtLast(String planRepayDtLast) {
    this.planRepayDtLast = planRepayDtLast;
    return this;
  }

  public void unsetPlanRepayDtLast() {
    this.planRepayDtLast = null;
  }

  /** Returns true if field planRepayDtLast is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDtLast() {
    return this.planRepayDtLast != null;
  }

  public void setPlanRepayDtLastIsSet(boolean value) {
    if (!value) {
      this.planRepayDtLast = null;
    }
  }

  public int getOverdueTime() {
    return this.overdueTime;
  }

  public RepayOverdueView setOverdueTime(int overdueTime) {
    this.overdueTime = overdueTime;
    setOverdueTimeIsSet(true);
    return this;
  }

  public void unsetOverdueTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUETIME_ISSET_ID);
  }

  /** Returns true if field overdueTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUETIME_ISSET_ID);
  }

  public void setOverdueTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUETIME_ISSET_ID, value);
  }

  public int getOverdueTimeLast() {
    return this.overdueTimeLast;
  }

  public RepayOverdueView setOverdueTimeLast(int overdueTimeLast) {
    this.overdueTimeLast = overdueTimeLast;
    setOverdueTimeLastIsSet(true);
    return this;
  }

  public void unsetOverdueTimeLast() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUETIMELAST_ISSET_ID);
  }

  /** Returns true if field overdueTimeLast is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueTimeLast() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUETIMELAST_ISSET_ID);
  }

  public void setOverdueTimeLastIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUETIMELAST_ISSET_ID, value);
  }

  public String getEcoTrade() {
    return this.ecoTrade;
  }

  public RepayOverdueView setEcoTrade(String ecoTrade) {
    this.ecoTrade = ecoTrade;
    return this;
  }

  public void unsetEcoTrade() {
    this.ecoTrade = null;
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return this.ecoTrade != null;
  }

  public void setEcoTradeIsSet(boolean value) {
    if (!value) {
      this.ecoTrade = null;
    }
  }

  public int getIsReconciliation() {
    return this.isReconciliation;
  }

  public RepayOverdueView setIsReconciliation(int isReconciliation) {
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    return this;
  }

  public void unsetIsReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  /** Returns true if field isReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  public void setIsReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID, value);
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public RepayOverdueView setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RepayOverdueView setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public RepayOverdueView setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRowNum() {
    return this.rowNum;
  }

  public RepayOverdueView setRowNum(int rowNum) {
    this.rowNum = rowNum;
    setRowNumIsSet(true);
    return this;
  }

  public void unsetRowNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWNUM_ISSET_ID);
  }

  /** Returns true if field rowNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRowNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWNUM_ISSET_ID);
  }

  public void setRowNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWNUM_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<RepayOverdueDTO> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(RepayOverdueDTO elem) {
    if (this.results == null) {
      this.results = new ArrayList<RepayOverdueDTO>();
    }
    this.results.add(elem);
  }

  public List<RepayOverdueDTO> getResults() {
    return this.results;
  }

  public RepayOverdueView setResults(List<RepayOverdueDTO> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case REQUEST_START_DT:
      if (value == null) {
        unsetRequestStartDt();
      } else {
        setRequestStartDt((String)value);
      }
      break;

    case REQUEST_START_DT_LAST:
      if (value == null) {
        unsetRequestStartDtLast();
      } else {
        setRequestStartDtLast((String)value);
      }
      break;

    case PLAN_REPAY_DT:
      if (value == null) {
        unsetPlanRepayDt();
      } else {
        setPlanRepayDt((String)value);
      }
      break;

    case PLAN_REPAY_DT_LAST:
      if (value == null) {
        unsetPlanRepayDtLast();
      } else {
        setPlanRepayDtLast((String)value);
      }
      break;

    case OVERDUE_TIME:
      if (value == null) {
        unsetOverdueTime();
      } else {
        setOverdueTime((Integer)value);
      }
      break;

    case OVERDUE_TIME_LAST:
      if (value == null) {
        unsetOverdueTimeLast();
      } else {
        setOverdueTimeLast((Integer)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((String)value);
      }
      break;

    case IS_RECONCILIATION:
      if (value == null) {
        unsetIsReconciliation();
      } else {
        setIsReconciliation((Integer)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROW_NUM:
      if (value == null) {
        unsetRowNum();
      } else {
        setRowNum((Integer)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<RepayOverdueDTO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_ID:
      return getProjectId();

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    case CUS_NAME:
      return getCusName();

    case REQUEST_START_DT:
      return getRequestStartDt();

    case REQUEST_START_DT_LAST:
      return getRequestStartDtLast();

    case PLAN_REPAY_DT:
      return getPlanRepayDt();

    case PLAN_REPAY_DT_LAST:
      return getPlanRepayDtLast();

    case OVERDUE_TIME:
      return Integer.valueOf(getOverdueTime());

    case OVERDUE_TIME_LAST:
      return Integer.valueOf(getOverdueTimeLast());

    case ECO_TRADE:
      return getEcoTrade();

    case IS_RECONCILIATION:
      return Integer.valueOf(getIsReconciliation());

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROW_NUM:
      return Integer.valueOf(getRowNum());

    case RESULTS:
      return getResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_TYPE:
      return isSetAcctType();
    case CUS_NAME:
      return isSetCusName();
    case REQUEST_START_DT:
      return isSetRequestStartDt();
    case REQUEST_START_DT_LAST:
      return isSetRequestStartDtLast();
    case PLAN_REPAY_DT:
      return isSetPlanRepayDt();
    case PLAN_REPAY_DT_LAST:
      return isSetPlanRepayDtLast();
    case OVERDUE_TIME:
      return isSetOverdueTime();
    case OVERDUE_TIME_LAST:
      return isSetOverdueTimeLast();
    case ECO_TRADE:
      return isSetEcoTrade();
    case IS_RECONCILIATION:
      return isSetIsReconciliation();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case ROW_NUM:
      return isSetRowNum();
    case RESULTS:
      return isSetResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepayOverdueView)
      return this.equals((RepayOverdueView)that);
    return false;
  }

  public boolean equals(RepayOverdueView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_requestStartDt = true && this.isSetRequestStartDt();
    boolean that_present_requestStartDt = true && that.isSetRequestStartDt();
    if (this_present_requestStartDt || that_present_requestStartDt) {
      if (!(this_present_requestStartDt && that_present_requestStartDt))
        return false;
      if (!this.requestStartDt.equals(that.requestStartDt))
        return false;
    }

    boolean this_present_requestStartDtLast = true && this.isSetRequestStartDtLast();
    boolean that_present_requestStartDtLast = true && that.isSetRequestStartDtLast();
    if (this_present_requestStartDtLast || that_present_requestStartDtLast) {
      if (!(this_present_requestStartDtLast && that_present_requestStartDtLast))
        return false;
      if (!this.requestStartDtLast.equals(that.requestStartDtLast))
        return false;
    }

    boolean this_present_planRepayDt = true && this.isSetPlanRepayDt();
    boolean that_present_planRepayDt = true && that.isSetPlanRepayDt();
    if (this_present_planRepayDt || that_present_planRepayDt) {
      if (!(this_present_planRepayDt && that_present_planRepayDt))
        return false;
      if (!this.planRepayDt.equals(that.planRepayDt))
        return false;
    }

    boolean this_present_planRepayDtLast = true && this.isSetPlanRepayDtLast();
    boolean that_present_planRepayDtLast = true && that.isSetPlanRepayDtLast();
    if (this_present_planRepayDtLast || that_present_planRepayDtLast) {
      if (!(this_present_planRepayDtLast && that_present_planRepayDtLast))
        return false;
      if (!this.planRepayDtLast.equals(that.planRepayDtLast))
        return false;
    }

    boolean this_present_overdueTime = true;
    boolean that_present_overdueTime = true;
    if (this_present_overdueTime || that_present_overdueTime) {
      if (!(this_present_overdueTime && that_present_overdueTime))
        return false;
      if (this.overdueTime != that.overdueTime)
        return false;
    }

    boolean this_present_overdueTimeLast = true;
    boolean that_present_overdueTimeLast = true;
    if (this_present_overdueTimeLast || that_present_overdueTimeLast) {
      if (!(this_present_overdueTimeLast && that_present_overdueTimeLast))
        return false;
      if (this.overdueTimeLast != that.overdueTimeLast)
        return false;
    }

    boolean this_present_ecoTrade = true && this.isSetEcoTrade();
    boolean that_present_ecoTrade = true && that.isSetEcoTrade();
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (!this.ecoTrade.equals(that.ecoTrade))
        return false;
    }

    boolean this_present_isReconciliation = true;
    boolean that_present_isReconciliation = true;
    if (this_present_isReconciliation || that_present_isReconciliation) {
      if (!(this_present_isReconciliation && that_present_isReconciliation))
        return false;
      if (this.isReconciliation != that.isReconciliation)
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rowNum = true;
    boolean that_present_rowNum = true;
    if (this_present_rowNum || that_present_rowNum) {
      if (!(this_present_rowNum && that_present_rowNum))
        return false;
      if (this.rowNum != that.rowNum)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_requestStartDt = true && (isSetRequestStartDt());
    list.add(present_requestStartDt);
    if (present_requestStartDt)
      list.add(requestStartDt);

    boolean present_requestStartDtLast = true && (isSetRequestStartDtLast());
    list.add(present_requestStartDtLast);
    if (present_requestStartDtLast)
      list.add(requestStartDtLast);

    boolean present_planRepayDt = true && (isSetPlanRepayDt());
    list.add(present_planRepayDt);
    if (present_planRepayDt)
      list.add(planRepayDt);

    boolean present_planRepayDtLast = true && (isSetPlanRepayDtLast());
    list.add(present_planRepayDtLast);
    if (present_planRepayDtLast)
      list.add(planRepayDtLast);

    boolean present_overdueTime = true;
    list.add(present_overdueTime);
    if (present_overdueTime)
      list.add(overdueTime);

    boolean present_overdueTimeLast = true;
    list.add(present_overdueTimeLast);
    if (present_overdueTimeLast)
      list.add(overdueTimeLast);

    boolean present_ecoTrade = true && (isSetEcoTrade());
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_isReconciliation = true;
    list.add(present_isReconciliation);
    if (present_isReconciliation)
      list.add(isReconciliation);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rowNum = true;
    list.add(present_rowNum);
    if (present_rowNum)
      list.add(rowNum);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepayOverdueView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStartDt()).compareTo(other.isSetRequestStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStartDt, other.requestStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStartDtLast()).compareTo(other.isSetRequestStartDtLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStartDtLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStartDtLast, other.requestStartDtLast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDt()).compareTo(other.isSetPlanRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDt, other.planRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDtLast()).compareTo(other.isSetPlanRepayDtLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDtLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDtLast, other.planRepayDtLast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueTime()).compareTo(other.isSetOverdueTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueTime, other.overdueTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueTimeLast()).compareTo(other.isSetOverdueTimeLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueTimeLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueTimeLast, other.overdueTimeLast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconciliation()).compareTo(other.isSetIsReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconciliation, other.isReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowNum()).compareTo(other.isSetRowNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowNum, other.rowNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepayOverdueView(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStartDt:");
    if (this.requestStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStartDtLast:");
    if (this.requestStartDtLast == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStartDtLast);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDt:");
    if (this.planRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDtLast:");
    if (this.planRepayDtLast == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDtLast);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueTime:");
    sb.append(this.overdueTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueTimeLast:");
    sb.append(this.overdueTimeLast);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    if (this.ecoTrade == null) {
      sb.append("null");
    } else {
      sb.append(this.ecoTrade);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReconciliation:");
    sb.append(this.isReconciliation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowNum:");
    sb.append(this.rowNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepayOverdueViewStandardSchemeFactory implements SchemeFactory {
    public RepayOverdueViewStandardScheme getScheme() {
      return new RepayOverdueViewStandardScheme();
    }
  }

  private static class RepayOverdueViewStandardScheme extends StandardScheme<RepayOverdueView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepayOverdueView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestStartDt = iprot.readString();
              struct.setRequestStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_START_DT_LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestStartDtLast = iprot.readString();
              struct.setRequestStartDtLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PLAN_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDt = iprot.readString();
              struct.setPlanRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PLAN_REPAY_DT_LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDtLast = iprot.readString();
              struct.setPlanRepayDtLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OVERDUE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueTime = iprot.readI32();
              struct.setOverdueTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERDUE_TIME_LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueTimeLast = iprot.readI32();
              struct.setOverdueTimeLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecoTrade = iprot.readString();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReconciliation = iprot.readI32();
              struct.setIsReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ROW_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowNum = iprot.readI32();
              struct.setRowNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.results = new ArrayList<RepayOverdueDTO>(_list16.size);
                RepayOverdueDTO _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new RepayOverdueDTO();
                  _elem17.read(iprot);
                  struct.results.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepayOverdueView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      if (struct.requestStartDt != null) {
        oprot.writeFieldBegin(REQUEST_START_DT_FIELD_DESC);
        oprot.writeString(struct.requestStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.requestStartDtLast != null) {
        oprot.writeFieldBegin(REQUEST_START_DT_LAST_FIELD_DESC);
        oprot.writeString(struct.requestStartDtLast);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayDt);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayDtLast != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DT_LAST_FIELD_DESC);
        oprot.writeString(struct.planRepayDtLast);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_TIME_FIELD_DESC);
      oprot.writeI32(struct.overdueTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_TIME_LAST_FIELD_DESC);
      oprot.writeI32(struct.overdueTimeLast);
      oprot.writeFieldEnd();
      if (struct.ecoTrade != null) {
        oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
        oprot.writeString(struct.ecoTrade);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.isReconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROW_NUM_FIELD_DESC);
      oprot.writeI32(struct.rowNum);
      oprot.writeFieldEnd();
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (RepayOverdueDTO _iter19 : struct.results)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepayOverdueViewTupleSchemeFactory implements SchemeFactory {
    public RepayOverdueViewTupleScheme getScheme() {
      return new RepayOverdueViewTupleScheme();
    }
  }

  private static class RepayOverdueViewTupleScheme extends TupleScheme<RepayOverdueView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepayOverdueView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetAcctType()) {
        optionals.set(3);
      }
      if (struct.isSetCusName()) {
        optionals.set(4);
      }
      if (struct.isSetRequestStartDt()) {
        optionals.set(5);
      }
      if (struct.isSetRequestStartDtLast()) {
        optionals.set(6);
      }
      if (struct.isSetPlanRepayDt()) {
        optionals.set(7);
      }
      if (struct.isSetPlanRepayDtLast()) {
        optionals.set(8);
      }
      if (struct.isSetOverdueTime()) {
        optionals.set(9);
      }
      if (struct.isSetOverdueTimeLast()) {
        optionals.set(10);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(11);
      }
      if (struct.isSetIsReconciliation()) {
        optionals.set(12);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(13);
      }
      if (struct.isSetRows()) {
        optionals.set(14);
      }
      if (struct.isSetPage()) {
        optionals.set(15);
      }
      if (struct.isSetRowNum()) {
        optionals.set(16);
      }
      if (struct.isSetResults()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetRequestStartDt()) {
        oprot.writeString(struct.requestStartDt);
      }
      if (struct.isSetRequestStartDtLast()) {
        oprot.writeString(struct.requestStartDtLast);
      }
      if (struct.isSetPlanRepayDt()) {
        oprot.writeString(struct.planRepayDt);
      }
      if (struct.isSetPlanRepayDtLast()) {
        oprot.writeString(struct.planRepayDtLast);
      }
      if (struct.isSetOverdueTime()) {
        oprot.writeI32(struct.overdueTime);
      }
      if (struct.isSetOverdueTimeLast()) {
        oprot.writeI32(struct.overdueTimeLast);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeString(struct.ecoTrade);
      }
      if (struct.isSetIsReconciliation()) {
        oprot.writeI32(struct.isReconciliation);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRowNum()) {
        oprot.writeI32(struct.rowNum);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (RepayOverdueDTO _iter20 : struct.results)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepayOverdueView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestStartDt = iprot.readString();
        struct.setRequestStartDtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestStartDtLast = iprot.readString();
        struct.setRequestStartDtLastIsSet(true);
      }
      if (incoming.get(7)) {
        struct.planRepayDt = iprot.readString();
        struct.setPlanRepayDtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.planRepayDtLast = iprot.readString();
        struct.setPlanRepayDtLastIsSet(true);
      }
      if (incoming.get(9)) {
        struct.overdueTime = iprot.readI32();
        struct.setOverdueTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.overdueTimeLast = iprot.readI32();
        struct.setOverdueTimeLastIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ecoTrade = iprot.readString();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isReconciliation = iprot.readI32();
        struct.setIsReconciliationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rowNum = iprot.readI32();
        struct.setRowNumIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<RepayOverdueDTO>(_list21.size);
          RepayOverdueDTO _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new RepayOverdueDTO();
            _elem22.read(iprot);
            struct.results.add(_elem22);
          }
        }
        struct.setResultsIsSet(true);
      }
    }
  }

}


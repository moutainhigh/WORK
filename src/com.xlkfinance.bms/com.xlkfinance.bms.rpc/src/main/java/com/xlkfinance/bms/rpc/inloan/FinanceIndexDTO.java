/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class FinanceIndexDTO implements org.apache.thrift.TBase<FinanceIndexDTO, FinanceIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceIndexDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("statusList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField HOUSE_CLERK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("houseClerkId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField HOUSE_CLERK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseClerkName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REAL_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("realLoan", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField PROJECT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectStatus", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentApprovalStatus", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField BIZ_HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bizHandleId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_TURN_DOWN_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureTurnDownRemark", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationApprovalStatus", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField RE_CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reCheckStatus", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField MAKE_LOANS_APPLY_FINANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("makeLoansApplyFinanceId", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("makeLoansApplyFinanceApplyStatus", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField IS_NEED_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedHandle", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField ACCOUNT_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("accountManager", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField ACCOUNT_DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("accountDepartment", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField ORG_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLoanDate", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField QUERY_USER_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryUserSource", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField IS_NEED_FINANCIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedFinancial", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField MAKE_APPLY_FINANCE_ID_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("makeApplyFinanceIdTwo", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField PRODUCT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("productNumber", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField MAKE_APPLY_STATUS_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("makeApplyStatusTwo", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField COLLECT_FEE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFeeStatus", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField COLLECT_FEE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFeeType", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField MORTGAGE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageStatus", org.apache.thrift.protocol.TType.I32, (short)47);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceIndexDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public int status; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public String createrDate; // required
  public List<Integer> statusList; // required
  public int houseClerkId; // required
  public String houseClerkName; // required
  public double realLoan; // required
  public double loanMoney; // required
  public int projectStatus; // required
  public int type; // required
  public int checkDocumentApprovalStatus; // required
  public int projectSource; // required
  public int projectType; // required
  public double extensionFee; // required
  public int bizHandleId; // required
  public int foreclosureStatus; // required
  public String foreclosureTurnDownRemark; // required
  public int checkLitigationApprovalStatus; // required
  public int reCheckStatus; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public int isChechan; // required
  public int makeLoansApplyFinanceId; // required
  public int makeLoansApplyFinanceApplyStatus; // required
  public int isNeedHandle; // required
  public String accountManager; // required
  public String accountDepartment; // required
  public String orgLoanDate; // required
  public int queryUserSource; // required
  public int isNeedFinancial; // required
  public String productName; // required
  public int makeApplyFinanceIdTwo; // required
  public String productNumber; // required
  public int makeApplyStatusTwo; // required
  public int productId; // required
  public int collectFeeStatus; // required
  public int collectFeeType; // required
  public double poundage; // required
  public int mortgageStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PROJECT_NAME((short)4, "projectName"),
    STATUS((short)5, "status"),
    CREATER_ID((short)6, "createrId"),
    USER_IDS((short)7, "userIds"),
    PAGE((short)8, "page"),
    ROWS((short)9, "rows"),
    CREATER_DATE((short)10, "createrDate"),
    STATUS_LIST((short)11, "statusList"),
    HOUSE_CLERK_ID((short)12, "houseClerkId"),
    HOUSE_CLERK_NAME((short)13, "houseClerkName"),
    REAL_LOAN((short)14, "realLoan"),
    LOAN_MONEY((short)15, "loanMoney"),
    PROJECT_STATUS((short)16, "projectStatus"),
    TYPE((short)17, "type"),
    CHECK_DOCUMENT_APPROVAL_STATUS((short)18, "checkDocumentApprovalStatus"),
    PROJECT_SOURCE((short)19, "projectSource"),
    PROJECT_TYPE((short)20, "projectType"),
    EXTENSION_FEE((short)21, "extensionFee"),
    BIZ_HANDLE_ID((short)22, "bizHandleId"),
    FORECLOSURE_STATUS((short)23, "foreclosureStatus"),
    FORECLOSURE_TURN_DOWN_REMARK((short)24, "foreclosureTurnDownRemark"),
    CHECK_LITIGATION_APPROVAL_STATUS((short)25, "checkLitigationApprovalStatus"),
    RE_CHECK_STATUS((short)26, "reCheckStatus"),
    HOUSE_NAME((short)27, "houseName"),
    BUYER_NAME((short)28, "buyerName"),
    SELLER_NAME((short)29, "sellerName"),
    IS_CHECHAN((short)30, "isChechan"),
    MAKE_LOANS_APPLY_FINANCE_ID((short)31, "makeLoansApplyFinanceId"),
    MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS((short)32, "makeLoansApplyFinanceApplyStatus"),
    IS_NEED_HANDLE((short)33, "isNeedHandle"),
    ACCOUNT_MANAGER((short)34, "accountManager"),
    ACCOUNT_DEPARTMENT((short)35, "accountDepartment"),
    ORG_LOAN_DATE((short)36, "orgLoanDate"),
    QUERY_USER_SOURCE((short)37, "queryUserSource"),
    IS_NEED_FINANCIAL((short)38, "isNeedFinancial"),
    PRODUCT_NAME((short)39, "productName"),
    MAKE_APPLY_FINANCE_ID_TWO((short)40, "makeApplyFinanceIdTwo"),
    PRODUCT_NUMBER((short)41, "productNumber"),
    MAKE_APPLY_STATUS_TWO((short)42, "makeApplyStatusTwo"),
    PRODUCT_ID((short)43, "productId"),
    COLLECT_FEE_STATUS((short)44, "collectFeeStatus"),
    COLLECT_FEE_TYPE((short)45, "collectFeeType"),
    POUNDAGE((short)46, "poundage"),
    MORTGAGE_STATUS((short)47, "mortgageStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // STATUS
          return STATUS;
        case 6: // CREATER_ID
          return CREATER_ID;
        case 7: // USER_IDS
          return USER_IDS;
        case 8: // PAGE
          return PAGE;
        case 9: // ROWS
          return ROWS;
        case 10: // CREATER_DATE
          return CREATER_DATE;
        case 11: // STATUS_LIST
          return STATUS_LIST;
        case 12: // HOUSE_CLERK_ID
          return HOUSE_CLERK_ID;
        case 13: // HOUSE_CLERK_NAME
          return HOUSE_CLERK_NAME;
        case 14: // REAL_LOAN
          return REAL_LOAN;
        case 15: // LOAN_MONEY
          return LOAN_MONEY;
        case 16: // PROJECT_STATUS
          return PROJECT_STATUS;
        case 17: // TYPE
          return TYPE;
        case 18: // CHECK_DOCUMENT_APPROVAL_STATUS
          return CHECK_DOCUMENT_APPROVAL_STATUS;
        case 19: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 20: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 21: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 22: // BIZ_HANDLE_ID
          return BIZ_HANDLE_ID;
        case 23: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 24: // FORECLOSURE_TURN_DOWN_REMARK
          return FORECLOSURE_TURN_DOWN_REMARK;
        case 25: // CHECK_LITIGATION_APPROVAL_STATUS
          return CHECK_LITIGATION_APPROVAL_STATUS;
        case 26: // RE_CHECK_STATUS
          return RE_CHECK_STATUS;
        case 27: // HOUSE_NAME
          return HOUSE_NAME;
        case 28: // BUYER_NAME
          return BUYER_NAME;
        case 29: // SELLER_NAME
          return SELLER_NAME;
        case 30: // IS_CHECHAN
          return IS_CHECHAN;
        case 31: // MAKE_LOANS_APPLY_FINANCE_ID
          return MAKE_LOANS_APPLY_FINANCE_ID;
        case 32: // MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS
          return MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS;
        case 33: // IS_NEED_HANDLE
          return IS_NEED_HANDLE;
        case 34: // ACCOUNT_MANAGER
          return ACCOUNT_MANAGER;
        case 35: // ACCOUNT_DEPARTMENT
          return ACCOUNT_DEPARTMENT;
        case 36: // ORG_LOAN_DATE
          return ORG_LOAN_DATE;
        case 37: // QUERY_USER_SOURCE
          return QUERY_USER_SOURCE;
        case 38: // IS_NEED_FINANCIAL
          return IS_NEED_FINANCIAL;
        case 39: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 40: // MAKE_APPLY_FINANCE_ID_TWO
          return MAKE_APPLY_FINANCE_ID_TWO;
        case 41: // PRODUCT_NUMBER
          return PRODUCT_NUMBER;
        case 42: // MAKE_APPLY_STATUS_TWO
          return MAKE_APPLY_STATUS_TWO;
        case 43: // PRODUCT_ID
          return PRODUCT_ID;
        case 44: // COLLECT_FEE_STATUS
          return COLLECT_FEE_STATUS;
        case 45: // COLLECT_FEE_TYPE
          return COLLECT_FEE_TYPE;
        case 46: // POUNDAGE
          return POUNDAGE;
        case 47: // MORTGAGE_STATUS
          return MORTGAGE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __CREATERID_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private static final int __HOUSECLERKID_ISSET_ID = 6;
  private static final int __REALLOAN_ISSET_ID = 7;
  private static final int __LOANMONEY_ISSET_ID = 8;
  private static final int __PROJECTSTATUS_ISSET_ID = 9;
  private static final int __TYPE_ISSET_ID = 10;
  private static final int __CHECKDOCUMENTAPPROVALSTATUS_ISSET_ID = 11;
  private static final int __PROJECTSOURCE_ISSET_ID = 12;
  private static final int __PROJECTTYPE_ISSET_ID = 13;
  private static final int __EXTENSIONFEE_ISSET_ID = 14;
  private static final int __BIZHANDLEID_ISSET_ID = 15;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 16;
  private static final int __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID = 17;
  private static final int __RECHECKSTATUS_ISSET_ID = 18;
  private static final int __ISCHECHAN_ISSET_ID = 19;
  private static final int __MAKELOANSAPPLYFINANCEID_ISSET_ID = 20;
  private static final int __MAKELOANSAPPLYFINANCEAPPLYSTATUS_ISSET_ID = 21;
  private static final int __ISNEEDHANDLE_ISSET_ID = 22;
  private static final int __QUERYUSERSOURCE_ISSET_ID = 23;
  private static final int __ISNEEDFINANCIAL_ISSET_ID = 24;
  private static final int __MAKEAPPLYFINANCEIDTWO_ISSET_ID = 25;
  private static final int __MAKEAPPLYSTATUSTWO_ISSET_ID = 26;
  private static final int __PRODUCTID_ISSET_ID = 27;
  private static final int __COLLECTFEESTATUS_ISSET_ID = 28;
  private static final int __COLLECTFEETYPE_ISSET_ID = 29;
  private static final int __POUNDAGE_ISSET_ID = 30;
  private static final int __MORTGAGESTATUS_ISSET_ID = 31;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("statusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOUSE_CLERK_ID, new org.apache.thrift.meta_data.FieldMetaData("houseClerkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_CLERK_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseClerkName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_LOAN, new org.apache.thrift.meta_data.FieldMetaData("realLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("projectStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_DOCUMENT_APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentApprovalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BIZ_HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("bizHandleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORECLOSURE_TURN_DOWN_REMARK, new org.apache.thrift.meta_data.FieldMetaData("foreclosureTurnDownRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_LITIGATION_APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationApprovalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reCheckStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAKE_LOANS_APPLY_FINANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("makeLoansApplyFinanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("makeLoansApplyFinanceApplyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEED_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("isNeedHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("accountManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("accountDepartment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("orgLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_USER_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("queryUserSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEED_FINANCIAL, new org.apache.thrift.meta_data.FieldMetaData("isNeedFinancial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAKE_APPLY_FINANCE_ID_TWO, new org.apache.thrift.meta_data.FieldMetaData("makeApplyFinanceIdTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("productNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAKE_APPLY_STATUS_TWO, new org.apache.thrift.meta_data.FieldMetaData("makeApplyStatusTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECT_FEE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("collectFeeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECT_FEE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("collectFeeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MORTGAGE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("mortgageStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceIndexDTO.class, metaDataMap);
  }

  public FinanceIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public FinanceIndexDTO(
    int pid,
    int projectId,
    String projectNumber,
    String projectName,
    int status,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows,
    String createrDate,
    List<Integer> statusList,
    int houseClerkId,
    String houseClerkName,
    double realLoan,
    double loanMoney,
    int projectStatus,
    int type,
    int checkDocumentApprovalStatus,
    int projectSource,
    int projectType,
    double extensionFee,
    int bizHandleId,
    int foreclosureStatus,
    String foreclosureTurnDownRemark,
    int checkLitigationApprovalStatus,
    int reCheckStatus,
    String houseName,
    String buyerName,
    String sellerName,
    int isChechan,
    int makeLoansApplyFinanceId,
    int makeLoansApplyFinanceApplyStatus,
    int isNeedHandle,
    String accountManager,
    String accountDepartment,
    String orgLoanDate,
    int queryUserSource,
    int isNeedFinancial,
    String productName,
    int makeApplyFinanceIdTwo,
    String productNumber,
    int makeApplyStatusTwo,
    int productId,
    int collectFeeStatus,
    int collectFeeType,
    double poundage,
    int mortgageStatus)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.status = status;
    setStatusIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.createrDate = createrDate;
    this.statusList = statusList;
    this.houseClerkId = houseClerkId;
    setHouseClerkIdIsSet(true);
    this.houseClerkName = houseClerkName;
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.projectStatus = projectStatus;
    setProjectStatusIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.checkDocumentApprovalStatus = checkDocumentApprovalStatus;
    setCheckDocumentApprovalStatusIsSet(true);
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.bizHandleId = bizHandleId;
    setBizHandleIdIsSet(true);
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.foreclosureTurnDownRemark = foreclosureTurnDownRemark;
    this.checkLitigationApprovalStatus = checkLitigationApprovalStatus;
    setCheckLitigationApprovalStatusIsSet(true);
    this.reCheckStatus = reCheckStatus;
    setReCheckStatusIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.makeLoansApplyFinanceId = makeLoansApplyFinanceId;
    setMakeLoansApplyFinanceIdIsSet(true);
    this.makeLoansApplyFinanceApplyStatus = makeLoansApplyFinanceApplyStatus;
    setMakeLoansApplyFinanceApplyStatusIsSet(true);
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    this.accountManager = accountManager;
    this.accountDepartment = accountDepartment;
    this.orgLoanDate = orgLoanDate;
    this.queryUserSource = queryUserSource;
    setQueryUserSourceIsSet(true);
    this.isNeedFinancial = isNeedFinancial;
    setIsNeedFinancialIsSet(true);
    this.productName = productName;
    this.makeApplyFinanceIdTwo = makeApplyFinanceIdTwo;
    setMakeApplyFinanceIdTwoIsSet(true);
    this.productNumber = productNumber;
    this.makeApplyStatusTwo = makeApplyStatusTwo;
    setMakeApplyStatusTwoIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.collectFeeStatus = collectFeeStatus;
    setCollectFeeStatusIsSet(true);
    this.collectFeeType = collectFeeType;
    setCollectFeeTypeIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceIndexDTO(FinanceIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.status = other.status;
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    if (other.isSetStatusList()) {
      List<Integer> __this__statusList = new ArrayList<Integer>(other.statusList);
      this.statusList = __this__statusList;
    }
    this.houseClerkId = other.houseClerkId;
    if (other.isSetHouseClerkName()) {
      this.houseClerkName = other.houseClerkName;
    }
    this.realLoan = other.realLoan;
    this.loanMoney = other.loanMoney;
    this.projectStatus = other.projectStatus;
    this.type = other.type;
    this.checkDocumentApprovalStatus = other.checkDocumentApprovalStatus;
    this.projectSource = other.projectSource;
    this.projectType = other.projectType;
    this.extensionFee = other.extensionFee;
    this.bizHandleId = other.bizHandleId;
    this.foreclosureStatus = other.foreclosureStatus;
    if (other.isSetForeclosureTurnDownRemark()) {
      this.foreclosureTurnDownRemark = other.foreclosureTurnDownRemark;
    }
    this.checkLitigationApprovalStatus = other.checkLitigationApprovalStatus;
    this.reCheckStatus = other.reCheckStatus;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.isChechan = other.isChechan;
    this.makeLoansApplyFinanceId = other.makeLoansApplyFinanceId;
    this.makeLoansApplyFinanceApplyStatus = other.makeLoansApplyFinanceApplyStatus;
    this.isNeedHandle = other.isNeedHandle;
    if (other.isSetAccountManager()) {
      this.accountManager = other.accountManager;
    }
    if (other.isSetAccountDepartment()) {
      this.accountDepartment = other.accountDepartment;
    }
    if (other.isSetOrgLoanDate()) {
      this.orgLoanDate = other.orgLoanDate;
    }
    this.queryUserSource = other.queryUserSource;
    this.isNeedFinancial = other.isNeedFinancial;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.makeApplyFinanceIdTwo = other.makeApplyFinanceIdTwo;
    if (other.isSetProductNumber()) {
      this.productNumber = other.productNumber;
    }
    this.makeApplyStatusTwo = other.makeApplyStatusTwo;
    this.productId = other.productId;
    this.collectFeeStatus = other.collectFeeStatus;
    this.collectFeeType = other.collectFeeType;
    this.poundage = other.poundage;
    this.mortgageStatus = other.mortgageStatus;
  }

  public FinanceIndexDTO deepCopy() {
    return new FinanceIndexDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setStatusIsSet(false);
    this.status = 0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    this.createrDate = null;
    this.statusList = null;
    setHouseClerkIdIsSet(false);
    this.houseClerkId = 0;
    this.houseClerkName = null;
    setRealLoanIsSet(false);
    this.realLoan = 0.0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setProjectStatusIsSet(false);
    this.projectStatus = 0;
    setTypeIsSet(false);
    this.type = 0;
    setCheckDocumentApprovalStatusIsSet(false);
    this.checkDocumentApprovalStatus = 0;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    setBizHandleIdIsSet(false);
    this.bizHandleId = 0;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    this.foreclosureTurnDownRemark = null;
    setCheckLitigationApprovalStatusIsSet(false);
    this.checkLitigationApprovalStatus = 0;
    setReCheckStatusIsSet(false);
    this.reCheckStatus = 0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    setMakeLoansApplyFinanceIdIsSet(false);
    this.makeLoansApplyFinanceId = 0;
    setMakeLoansApplyFinanceApplyStatusIsSet(false);
    this.makeLoansApplyFinanceApplyStatus = 0;
    setIsNeedHandleIsSet(false);
    this.isNeedHandle = 0;
    this.accountManager = null;
    this.accountDepartment = null;
    this.orgLoanDate = null;
    setQueryUserSourceIsSet(false);
    this.queryUserSource = 0;
    setIsNeedFinancialIsSet(false);
    this.isNeedFinancial = 0;
    this.productName = null;
    setMakeApplyFinanceIdTwoIsSet(false);
    this.makeApplyFinanceIdTwo = 0;
    this.productNumber = null;
    setMakeApplyStatusTwoIsSet(false);
    this.makeApplyStatusTwo = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    setCollectFeeStatusIsSet(false);
    this.collectFeeStatus = 0;
    setCollectFeeTypeIsSet(false);
    this.collectFeeType = 0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    setMortgageStatusIsSet(false);
    this.mortgageStatus = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceIndexDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public FinanceIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public FinanceIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public FinanceIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public FinanceIndexDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public FinanceIndexDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public FinanceIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public FinanceIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public FinanceIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public FinanceIndexDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getStatusListSize() {
    return (this.statusList == null) ? 0 : this.statusList.size();
  }

  public java.util.Iterator<Integer> getStatusListIterator() {
    return (this.statusList == null) ? null : this.statusList.iterator();
  }

  public void addToStatusList(int elem) {
    if (this.statusList == null) {
      this.statusList = new ArrayList<Integer>();
    }
    this.statusList.add(elem);
  }

  public List<Integer> getStatusList() {
    return this.statusList;
  }

  public FinanceIndexDTO setStatusList(List<Integer> statusList) {
    this.statusList = statusList;
    return this;
  }

  public void unsetStatusList() {
    this.statusList = null;
  }

  /** Returns true if field statusList is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusList() {
    return this.statusList != null;
  }

  public void setStatusListIsSet(boolean value) {
    if (!value) {
      this.statusList = null;
    }
  }

  public int getHouseClerkId() {
    return this.houseClerkId;
  }

  public FinanceIndexDTO setHouseClerkId(int houseClerkId) {
    this.houseClerkId = houseClerkId;
    setHouseClerkIdIsSet(true);
    return this;
  }

  public void unsetHouseClerkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID);
  }

  /** Returns true if field houseClerkId is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseClerkId() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID);
  }

  public void setHouseClerkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID, value);
  }

  public String getHouseClerkName() {
    return this.houseClerkName;
  }

  public FinanceIndexDTO setHouseClerkName(String houseClerkName) {
    this.houseClerkName = houseClerkName;
    return this;
  }

  public void unsetHouseClerkName() {
    this.houseClerkName = null;
  }

  /** Returns true if field houseClerkName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseClerkName() {
    return this.houseClerkName != null;
  }

  public void setHouseClerkNameIsSet(boolean value) {
    if (!value) {
      this.houseClerkName = null;
    }
  }

  public double getRealLoan() {
    return this.realLoan;
  }

  public FinanceIndexDTO setRealLoan(double realLoan) {
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    return this;
  }

  public void unsetRealLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  /** Returns true if field realLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetRealLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  public void setRealLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALLOAN_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public FinanceIndexDTO setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public int getProjectStatus() {
    return this.projectStatus;
  }

  public FinanceIndexDTO setProjectStatus(int projectStatus) {
    this.projectStatus = projectStatus;
    setProjectStatusIsSet(true);
    return this;
  }

  public void unsetProjectStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID);
  }

  /** Returns true if field projectStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID);
  }

  public void setProjectStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public FinanceIndexDTO setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getCheckDocumentApprovalStatus() {
    return this.checkDocumentApprovalStatus;
  }

  public FinanceIndexDTO setCheckDocumentApprovalStatus(int checkDocumentApprovalStatus) {
    this.checkDocumentApprovalStatus = checkDocumentApprovalStatus;
    setCheckDocumentApprovalStatusIsSet(true);
    return this;
  }

  public void unsetCheckDocumentApprovalStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKDOCUMENTAPPROVALSTATUS_ISSET_ID);
  }

  /** Returns true if field checkDocumentApprovalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDocumentApprovalStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKDOCUMENTAPPROVALSTATUS_ISSET_ID);
  }

  public void setCheckDocumentApprovalStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKDOCUMENTAPPROVALSTATUS_ISSET_ID, value);
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public FinanceIndexDTO setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public FinanceIndexDTO setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public FinanceIndexDTO setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public int getBizHandleId() {
    return this.bizHandleId;
  }

  public FinanceIndexDTO setBizHandleId(int bizHandleId) {
    this.bizHandleId = bizHandleId;
    setBizHandleIdIsSet(true);
    return this;
  }

  public void unsetBizHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZHANDLEID_ISSET_ID);
  }

  /** Returns true if field bizHandleId is set (has been assigned a value) and false otherwise */
  public boolean isSetBizHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZHANDLEID_ISSET_ID);
  }

  public void setBizHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZHANDLEID_ISSET_ID, value);
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public FinanceIndexDTO setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public String getForeclosureTurnDownRemark() {
    return this.foreclosureTurnDownRemark;
  }

  public FinanceIndexDTO setForeclosureTurnDownRemark(String foreclosureTurnDownRemark) {
    this.foreclosureTurnDownRemark = foreclosureTurnDownRemark;
    return this;
  }

  public void unsetForeclosureTurnDownRemark() {
    this.foreclosureTurnDownRemark = null;
  }

  /** Returns true if field foreclosureTurnDownRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureTurnDownRemark() {
    return this.foreclosureTurnDownRemark != null;
  }

  public void setForeclosureTurnDownRemarkIsSet(boolean value) {
    if (!value) {
      this.foreclosureTurnDownRemark = null;
    }
  }

  public int getCheckLitigationApprovalStatus() {
    return this.checkLitigationApprovalStatus;
  }

  public FinanceIndexDTO setCheckLitigationApprovalStatus(int checkLitigationApprovalStatus) {
    this.checkLitigationApprovalStatus = checkLitigationApprovalStatus;
    setCheckLitigationApprovalStatusIsSet(true);
    return this;
  }

  public void unsetCheckLitigationApprovalStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID);
  }

  /** Returns true if field checkLitigationApprovalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckLitigationApprovalStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID);
  }

  public void setCheckLitigationApprovalStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID, value);
  }

  public int getReCheckStatus() {
    return this.reCheckStatus;
  }

  public FinanceIndexDTO setReCheckStatus(int reCheckStatus) {
    this.reCheckStatus = reCheckStatus;
    setReCheckStatusIsSet(true);
    return this;
  }

  public void unsetReCheckStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECHECKSTATUS_ISSET_ID);
  }

  /** Returns true if field reCheckStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReCheckStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECHECKSTATUS_ISSET_ID);
  }

  public void setReCheckStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECHECKSTATUS_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public FinanceIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public FinanceIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public FinanceIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public FinanceIndexDTO setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public int getMakeLoansApplyFinanceId() {
    return this.makeLoansApplyFinanceId;
  }

  public FinanceIndexDTO setMakeLoansApplyFinanceId(int makeLoansApplyFinanceId) {
    this.makeLoansApplyFinanceId = makeLoansApplyFinanceId;
    setMakeLoansApplyFinanceIdIsSet(true);
    return this;
  }

  public void unsetMakeLoansApplyFinanceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAKELOANSAPPLYFINANCEID_ISSET_ID);
  }

  /** Returns true if field makeLoansApplyFinanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetMakeLoansApplyFinanceId() {
    return EncodingUtils.testBit(__isset_bitfield, __MAKELOANSAPPLYFINANCEID_ISSET_ID);
  }

  public void setMakeLoansApplyFinanceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAKELOANSAPPLYFINANCEID_ISSET_ID, value);
  }

  public int getMakeLoansApplyFinanceApplyStatus() {
    return this.makeLoansApplyFinanceApplyStatus;
  }

  public FinanceIndexDTO setMakeLoansApplyFinanceApplyStatus(int makeLoansApplyFinanceApplyStatus) {
    this.makeLoansApplyFinanceApplyStatus = makeLoansApplyFinanceApplyStatus;
    setMakeLoansApplyFinanceApplyStatusIsSet(true);
    return this;
  }

  public void unsetMakeLoansApplyFinanceApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAKELOANSAPPLYFINANCEAPPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field makeLoansApplyFinanceApplyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMakeLoansApplyFinanceApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MAKELOANSAPPLYFINANCEAPPLYSTATUS_ISSET_ID);
  }

  public void setMakeLoansApplyFinanceApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAKELOANSAPPLYFINANCEAPPLYSTATUS_ISSET_ID, value);
  }

  public int getIsNeedHandle() {
    return this.isNeedHandle;
  }

  public FinanceIndexDTO setIsNeedHandle(int isNeedHandle) {
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    return this;
  }

  public void unsetIsNeedHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  /** Returns true if field isNeedHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  public void setIsNeedHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID, value);
  }

  public String getAccountManager() {
    return this.accountManager;
  }

  public FinanceIndexDTO setAccountManager(String accountManager) {
    this.accountManager = accountManager;
    return this;
  }

  public void unsetAccountManager() {
    this.accountManager = null;
  }

  /** Returns true if field accountManager is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountManager() {
    return this.accountManager != null;
  }

  public void setAccountManagerIsSet(boolean value) {
    if (!value) {
      this.accountManager = null;
    }
  }

  public String getAccountDepartment() {
    return this.accountDepartment;
  }

  public FinanceIndexDTO setAccountDepartment(String accountDepartment) {
    this.accountDepartment = accountDepartment;
    return this;
  }

  public void unsetAccountDepartment() {
    this.accountDepartment = null;
  }

  /** Returns true if field accountDepartment is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountDepartment() {
    return this.accountDepartment != null;
  }

  public void setAccountDepartmentIsSet(boolean value) {
    if (!value) {
      this.accountDepartment = null;
    }
  }

  public String getOrgLoanDate() {
    return this.orgLoanDate;
  }

  public FinanceIndexDTO setOrgLoanDate(String orgLoanDate) {
    this.orgLoanDate = orgLoanDate;
    return this;
  }

  public void unsetOrgLoanDate() {
    this.orgLoanDate = null;
  }

  /** Returns true if field orgLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgLoanDate() {
    return this.orgLoanDate != null;
  }

  public void setOrgLoanDateIsSet(boolean value) {
    if (!value) {
      this.orgLoanDate = null;
    }
  }

  public int getQueryUserSource() {
    return this.queryUserSource;
  }

  public FinanceIndexDTO setQueryUserSource(int queryUserSource) {
    this.queryUserSource = queryUserSource;
    setQueryUserSourceIsSet(true);
    return this;
  }

  public void unsetQueryUserSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYUSERSOURCE_ISSET_ID);
  }

  /** Returns true if field queryUserSource is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryUserSource() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYUSERSOURCE_ISSET_ID);
  }

  public void setQueryUserSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYUSERSOURCE_ISSET_ID, value);
  }

  public int getIsNeedFinancial() {
    return this.isNeedFinancial;
  }

  public FinanceIndexDTO setIsNeedFinancial(int isNeedFinancial) {
    this.isNeedFinancial = isNeedFinancial;
    setIsNeedFinancialIsSet(true);
    return this;
  }

  public void unsetIsNeedFinancial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDFINANCIAL_ISSET_ID);
  }

  /** Returns true if field isNeedFinancial is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedFinancial() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDFINANCIAL_ISSET_ID);
  }

  public void setIsNeedFinancialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDFINANCIAL_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public FinanceIndexDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getMakeApplyFinanceIdTwo() {
    return this.makeApplyFinanceIdTwo;
  }

  public FinanceIndexDTO setMakeApplyFinanceIdTwo(int makeApplyFinanceIdTwo) {
    this.makeApplyFinanceIdTwo = makeApplyFinanceIdTwo;
    setMakeApplyFinanceIdTwoIsSet(true);
    return this;
  }

  public void unsetMakeApplyFinanceIdTwo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAKEAPPLYFINANCEIDTWO_ISSET_ID);
  }

  /** Returns true if field makeApplyFinanceIdTwo is set (has been assigned a value) and false otherwise */
  public boolean isSetMakeApplyFinanceIdTwo() {
    return EncodingUtils.testBit(__isset_bitfield, __MAKEAPPLYFINANCEIDTWO_ISSET_ID);
  }

  public void setMakeApplyFinanceIdTwoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAKEAPPLYFINANCEIDTWO_ISSET_ID, value);
  }

  public String getProductNumber() {
    return this.productNumber;
  }

  public FinanceIndexDTO setProductNumber(String productNumber) {
    this.productNumber = productNumber;
    return this;
  }

  public void unsetProductNumber() {
    this.productNumber = null;
  }

  /** Returns true if field productNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProductNumber() {
    return this.productNumber != null;
  }

  public void setProductNumberIsSet(boolean value) {
    if (!value) {
      this.productNumber = null;
    }
  }

  public int getMakeApplyStatusTwo() {
    return this.makeApplyStatusTwo;
  }

  public FinanceIndexDTO setMakeApplyStatusTwo(int makeApplyStatusTwo) {
    this.makeApplyStatusTwo = makeApplyStatusTwo;
    setMakeApplyStatusTwoIsSet(true);
    return this;
  }

  public void unsetMakeApplyStatusTwo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAKEAPPLYSTATUSTWO_ISSET_ID);
  }

  /** Returns true if field makeApplyStatusTwo is set (has been assigned a value) and false otherwise */
  public boolean isSetMakeApplyStatusTwo() {
    return EncodingUtils.testBit(__isset_bitfield, __MAKEAPPLYSTATUSTWO_ISSET_ID);
  }

  public void setMakeApplyStatusTwoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAKEAPPLYSTATUSTWO_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public FinanceIndexDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public int getCollectFeeStatus() {
    return this.collectFeeStatus;
  }

  public FinanceIndexDTO setCollectFeeStatus(int collectFeeStatus) {
    this.collectFeeStatus = collectFeeStatus;
    setCollectFeeStatusIsSet(true);
    return this;
  }

  public void unsetCollectFeeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTFEESTATUS_ISSET_ID);
  }

  /** Returns true if field collectFeeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFeeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTFEESTATUS_ISSET_ID);
  }

  public void setCollectFeeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTFEESTATUS_ISSET_ID, value);
  }

  public int getCollectFeeType() {
    return this.collectFeeType;
  }

  public FinanceIndexDTO setCollectFeeType(int collectFeeType) {
    this.collectFeeType = collectFeeType;
    setCollectFeeTypeIsSet(true);
    return this;
  }

  public void unsetCollectFeeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTFEETYPE_ISSET_ID);
  }

  /** Returns true if field collectFeeType is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFeeType() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTFEETYPE_ISSET_ID);
  }

  public void setCollectFeeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTFEETYPE_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public FinanceIndexDTO setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public int getMortgageStatus() {
    return this.mortgageStatus;
  }

  public FinanceIndexDTO setMortgageStatus(int mortgageStatus) {
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
    return this;
  }

  public void unsetMortgageStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  /** Returns true if field mortgageStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  public void setMortgageStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case STATUS_LIST:
      if (value == null) {
        unsetStatusList();
      } else {
        setStatusList((List<Integer>)value);
      }
      break;

    case HOUSE_CLERK_ID:
      if (value == null) {
        unsetHouseClerkId();
      } else {
        setHouseClerkId((Integer)value);
      }
      break;

    case HOUSE_CLERK_NAME:
      if (value == null) {
        unsetHouseClerkName();
      } else {
        setHouseClerkName((String)value);
      }
      break;

    case REAL_LOAN:
      if (value == null) {
        unsetRealLoan();
      } else {
        setRealLoan((Double)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case PROJECT_STATUS:
      if (value == null) {
        unsetProjectStatus();
      } else {
        setProjectStatus((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case CHECK_DOCUMENT_APPROVAL_STATUS:
      if (value == null) {
        unsetCheckDocumentApprovalStatus();
      } else {
        setCheckDocumentApprovalStatus((Integer)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case BIZ_HANDLE_ID:
      if (value == null) {
        unsetBizHandleId();
      } else {
        setBizHandleId((Integer)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case FORECLOSURE_TURN_DOWN_REMARK:
      if (value == null) {
        unsetForeclosureTurnDownRemark();
      } else {
        setForeclosureTurnDownRemark((String)value);
      }
      break;

    case CHECK_LITIGATION_APPROVAL_STATUS:
      if (value == null) {
        unsetCheckLitigationApprovalStatus();
      } else {
        setCheckLitigationApprovalStatus((Integer)value);
      }
      break;

    case RE_CHECK_STATUS:
      if (value == null) {
        unsetReCheckStatus();
      } else {
        setReCheckStatus((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case MAKE_LOANS_APPLY_FINANCE_ID:
      if (value == null) {
        unsetMakeLoansApplyFinanceId();
      } else {
        setMakeLoansApplyFinanceId((Integer)value);
      }
      break;

    case MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS:
      if (value == null) {
        unsetMakeLoansApplyFinanceApplyStatus();
      } else {
        setMakeLoansApplyFinanceApplyStatus((Integer)value);
      }
      break;

    case IS_NEED_HANDLE:
      if (value == null) {
        unsetIsNeedHandle();
      } else {
        setIsNeedHandle((Integer)value);
      }
      break;

    case ACCOUNT_MANAGER:
      if (value == null) {
        unsetAccountManager();
      } else {
        setAccountManager((String)value);
      }
      break;

    case ACCOUNT_DEPARTMENT:
      if (value == null) {
        unsetAccountDepartment();
      } else {
        setAccountDepartment((String)value);
      }
      break;

    case ORG_LOAN_DATE:
      if (value == null) {
        unsetOrgLoanDate();
      } else {
        setOrgLoanDate((String)value);
      }
      break;

    case QUERY_USER_SOURCE:
      if (value == null) {
        unsetQueryUserSource();
      } else {
        setQueryUserSource((Integer)value);
      }
      break;

    case IS_NEED_FINANCIAL:
      if (value == null) {
        unsetIsNeedFinancial();
      } else {
        setIsNeedFinancial((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case MAKE_APPLY_FINANCE_ID_TWO:
      if (value == null) {
        unsetMakeApplyFinanceIdTwo();
      } else {
        setMakeApplyFinanceIdTwo((Integer)value);
      }
      break;

    case PRODUCT_NUMBER:
      if (value == null) {
        unsetProductNumber();
      } else {
        setProductNumber((String)value);
      }
      break;

    case MAKE_APPLY_STATUS_TWO:
      if (value == null) {
        unsetMakeApplyStatusTwo();
      } else {
        setMakeApplyStatusTwo((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case COLLECT_FEE_STATUS:
      if (value == null) {
        unsetCollectFeeStatus();
      } else {
        setCollectFeeStatus((Integer)value);
      }
      break;

    case COLLECT_FEE_TYPE:
      if (value == null) {
        unsetCollectFeeType();
      } else {
        setCollectFeeType((Integer)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case MORTGAGE_STATUS:
      if (value == null) {
        unsetMortgageStatus();
      } else {
        setMortgageStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATER_DATE:
      return getCreaterDate();

    case STATUS_LIST:
      return getStatusList();

    case HOUSE_CLERK_ID:
      return Integer.valueOf(getHouseClerkId());

    case HOUSE_CLERK_NAME:
      return getHouseClerkName();

    case REAL_LOAN:
      return Double.valueOf(getRealLoan());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case PROJECT_STATUS:
      return Integer.valueOf(getProjectStatus());

    case TYPE:
      return Integer.valueOf(getType());

    case CHECK_DOCUMENT_APPROVAL_STATUS:
      return Integer.valueOf(getCheckDocumentApprovalStatus());

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case BIZ_HANDLE_ID:
      return Integer.valueOf(getBizHandleId());

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case FORECLOSURE_TURN_DOWN_REMARK:
      return getForeclosureTurnDownRemark();

    case CHECK_LITIGATION_APPROVAL_STATUS:
      return Integer.valueOf(getCheckLitigationApprovalStatus());

    case RE_CHECK_STATUS:
      return Integer.valueOf(getReCheckStatus());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case MAKE_LOANS_APPLY_FINANCE_ID:
      return Integer.valueOf(getMakeLoansApplyFinanceId());

    case MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS:
      return Integer.valueOf(getMakeLoansApplyFinanceApplyStatus());

    case IS_NEED_HANDLE:
      return Integer.valueOf(getIsNeedHandle());

    case ACCOUNT_MANAGER:
      return getAccountManager();

    case ACCOUNT_DEPARTMENT:
      return getAccountDepartment();

    case ORG_LOAN_DATE:
      return getOrgLoanDate();

    case QUERY_USER_SOURCE:
      return Integer.valueOf(getQueryUserSource());

    case IS_NEED_FINANCIAL:
      return Integer.valueOf(getIsNeedFinancial());

    case PRODUCT_NAME:
      return getProductName();

    case MAKE_APPLY_FINANCE_ID_TWO:
      return Integer.valueOf(getMakeApplyFinanceIdTwo());

    case PRODUCT_NUMBER:
      return getProductNumber();

    case MAKE_APPLY_STATUS_TWO:
      return Integer.valueOf(getMakeApplyStatusTwo());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case COLLECT_FEE_STATUS:
      return Integer.valueOf(getCollectFeeStatus());

    case COLLECT_FEE_TYPE:
      return Integer.valueOf(getCollectFeeType());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case MORTGAGE_STATUS:
      return Integer.valueOf(getMortgageStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case STATUS:
      return isSetStatus();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATER_DATE:
      return isSetCreaterDate();
    case STATUS_LIST:
      return isSetStatusList();
    case HOUSE_CLERK_ID:
      return isSetHouseClerkId();
    case HOUSE_CLERK_NAME:
      return isSetHouseClerkName();
    case REAL_LOAN:
      return isSetRealLoan();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case PROJECT_STATUS:
      return isSetProjectStatus();
    case TYPE:
      return isSetType();
    case CHECK_DOCUMENT_APPROVAL_STATUS:
      return isSetCheckDocumentApprovalStatus();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case PROJECT_TYPE:
      return isSetProjectType();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case BIZ_HANDLE_ID:
      return isSetBizHandleId();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case FORECLOSURE_TURN_DOWN_REMARK:
      return isSetForeclosureTurnDownRemark();
    case CHECK_LITIGATION_APPROVAL_STATUS:
      return isSetCheckLitigationApprovalStatus();
    case RE_CHECK_STATUS:
      return isSetReCheckStatus();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case IS_CHECHAN:
      return isSetIsChechan();
    case MAKE_LOANS_APPLY_FINANCE_ID:
      return isSetMakeLoansApplyFinanceId();
    case MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS:
      return isSetMakeLoansApplyFinanceApplyStatus();
    case IS_NEED_HANDLE:
      return isSetIsNeedHandle();
    case ACCOUNT_MANAGER:
      return isSetAccountManager();
    case ACCOUNT_DEPARTMENT:
      return isSetAccountDepartment();
    case ORG_LOAN_DATE:
      return isSetOrgLoanDate();
    case QUERY_USER_SOURCE:
      return isSetQueryUserSource();
    case IS_NEED_FINANCIAL:
      return isSetIsNeedFinancial();
    case PRODUCT_NAME:
      return isSetProductName();
    case MAKE_APPLY_FINANCE_ID_TWO:
      return isSetMakeApplyFinanceIdTwo();
    case PRODUCT_NUMBER:
      return isSetProductNumber();
    case MAKE_APPLY_STATUS_TWO:
      return isSetMakeApplyStatusTwo();
    case PRODUCT_ID:
      return isSetProductId();
    case COLLECT_FEE_STATUS:
      return isSetCollectFeeStatus();
    case COLLECT_FEE_TYPE:
      return isSetCollectFeeType();
    case POUNDAGE:
      return isSetPoundage();
    case MORTGAGE_STATUS:
      return isSetMortgageStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceIndexDTO)
      return this.equals((FinanceIndexDTO)that);
    return false;
  }

  public boolean equals(FinanceIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_statusList = true && this.isSetStatusList();
    boolean that_present_statusList = true && that.isSetStatusList();
    if (this_present_statusList || that_present_statusList) {
      if (!(this_present_statusList && that_present_statusList))
        return false;
      if (!this.statusList.equals(that.statusList))
        return false;
    }

    boolean this_present_houseClerkId = true;
    boolean that_present_houseClerkId = true;
    if (this_present_houseClerkId || that_present_houseClerkId) {
      if (!(this_present_houseClerkId && that_present_houseClerkId))
        return false;
      if (this.houseClerkId != that.houseClerkId)
        return false;
    }

    boolean this_present_houseClerkName = true && this.isSetHouseClerkName();
    boolean that_present_houseClerkName = true && that.isSetHouseClerkName();
    if (this_present_houseClerkName || that_present_houseClerkName) {
      if (!(this_present_houseClerkName && that_present_houseClerkName))
        return false;
      if (!this.houseClerkName.equals(that.houseClerkName))
        return false;
    }

    boolean this_present_realLoan = true;
    boolean that_present_realLoan = true;
    if (this_present_realLoan || that_present_realLoan) {
      if (!(this_present_realLoan && that_present_realLoan))
        return false;
      if (this.realLoan != that.realLoan)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_projectStatus = true;
    boolean that_present_projectStatus = true;
    if (this_present_projectStatus || that_present_projectStatus) {
      if (!(this_present_projectStatus && that_present_projectStatus))
        return false;
      if (this.projectStatus != that.projectStatus)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_checkDocumentApprovalStatus = true;
    boolean that_present_checkDocumentApprovalStatus = true;
    if (this_present_checkDocumentApprovalStatus || that_present_checkDocumentApprovalStatus) {
      if (!(this_present_checkDocumentApprovalStatus && that_present_checkDocumentApprovalStatus))
        return false;
      if (this.checkDocumentApprovalStatus != that.checkDocumentApprovalStatus)
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_bizHandleId = true;
    boolean that_present_bizHandleId = true;
    if (this_present_bizHandleId || that_present_bizHandleId) {
      if (!(this_present_bizHandleId && that_present_bizHandleId))
        return false;
      if (this.bizHandleId != that.bizHandleId)
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_foreclosureTurnDownRemark = true && this.isSetForeclosureTurnDownRemark();
    boolean that_present_foreclosureTurnDownRemark = true && that.isSetForeclosureTurnDownRemark();
    if (this_present_foreclosureTurnDownRemark || that_present_foreclosureTurnDownRemark) {
      if (!(this_present_foreclosureTurnDownRemark && that_present_foreclosureTurnDownRemark))
        return false;
      if (!this.foreclosureTurnDownRemark.equals(that.foreclosureTurnDownRemark))
        return false;
    }

    boolean this_present_checkLitigationApprovalStatus = true;
    boolean that_present_checkLitigationApprovalStatus = true;
    if (this_present_checkLitigationApprovalStatus || that_present_checkLitigationApprovalStatus) {
      if (!(this_present_checkLitigationApprovalStatus && that_present_checkLitigationApprovalStatus))
        return false;
      if (this.checkLitigationApprovalStatus != that.checkLitigationApprovalStatus)
        return false;
    }

    boolean this_present_reCheckStatus = true;
    boolean that_present_reCheckStatus = true;
    if (this_present_reCheckStatus || that_present_reCheckStatus) {
      if (!(this_present_reCheckStatus && that_present_reCheckStatus))
        return false;
      if (this.reCheckStatus != that.reCheckStatus)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_makeLoansApplyFinanceId = true;
    boolean that_present_makeLoansApplyFinanceId = true;
    if (this_present_makeLoansApplyFinanceId || that_present_makeLoansApplyFinanceId) {
      if (!(this_present_makeLoansApplyFinanceId && that_present_makeLoansApplyFinanceId))
        return false;
      if (this.makeLoansApplyFinanceId != that.makeLoansApplyFinanceId)
        return false;
    }

    boolean this_present_makeLoansApplyFinanceApplyStatus = true;
    boolean that_present_makeLoansApplyFinanceApplyStatus = true;
    if (this_present_makeLoansApplyFinanceApplyStatus || that_present_makeLoansApplyFinanceApplyStatus) {
      if (!(this_present_makeLoansApplyFinanceApplyStatus && that_present_makeLoansApplyFinanceApplyStatus))
        return false;
      if (this.makeLoansApplyFinanceApplyStatus != that.makeLoansApplyFinanceApplyStatus)
        return false;
    }

    boolean this_present_isNeedHandle = true;
    boolean that_present_isNeedHandle = true;
    if (this_present_isNeedHandle || that_present_isNeedHandle) {
      if (!(this_present_isNeedHandle && that_present_isNeedHandle))
        return false;
      if (this.isNeedHandle != that.isNeedHandle)
        return false;
    }

    boolean this_present_accountManager = true && this.isSetAccountManager();
    boolean that_present_accountManager = true && that.isSetAccountManager();
    if (this_present_accountManager || that_present_accountManager) {
      if (!(this_present_accountManager && that_present_accountManager))
        return false;
      if (!this.accountManager.equals(that.accountManager))
        return false;
    }

    boolean this_present_accountDepartment = true && this.isSetAccountDepartment();
    boolean that_present_accountDepartment = true && that.isSetAccountDepartment();
    if (this_present_accountDepartment || that_present_accountDepartment) {
      if (!(this_present_accountDepartment && that_present_accountDepartment))
        return false;
      if (!this.accountDepartment.equals(that.accountDepartment))
        return false;
    }

    boolean this_present_orgLoanDate = true && this.isSetOrgLoanDate();
    boolean that_present_orgLoanDate = true && that.isSetOrgLoanDate();
    if (this_present_orgLoanDate || that_present_orgLoanDate) {
      if (!(this_present_orgLoanDate && that_present_orgLoanDate))
        return false;
      if (!this.orgLoanDate.equals(that.orgLoanDate))
        return false;
    }

    boolean this_present_queryUserSource = true;
    boolean that_present_queryUserSource = true;
    if (this_present_queryUserSource || that_present_queryUserSource) {
      if (!(this_present_queryUserSource && that_present_queryUserSource))
        return false;
      if (this.queryUserSource != that.queryUserSource)
        return false;
    }

    boolean this_present_isNeedFinancial = true;
    boolean that_present_isNeedFinancial = true;
    if (this_present_isNeedFinancial || that_present_isNeedFinancial) {
      if (!(this_present_isNeedFinancial && that_present_isNeedFinancial))
        return false;
      if (this.isNeedFinancial != that.isNeedFinancial)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_makeApplyFinanceIdTwo = true;
    boolean that_present_makeApplyFinanceIdTwo = true;
    if (this_present_makeApplyFinanceIdTwo || that_present_makeApplyFinanceIdTwo) {
      if (!(this_present_makeApplyFinanceIdTwo && that_present_makeApplyFinanceIdTwo))
        return false;
      if (this.makeApplyFinanceIdTwo != that.makeApplyFinanceIdTwo)
        return false;
    }

    boolean this_present_productNumber = true && this.isSetProductNumber();
    boolean that_present_productNumber = true && that.isSetProductNumber();
    if (this_present_productNumber || that_present_productNumber) {
      if (!(this_present_productNumber && that_present_productNumber))
        return false;
      if (!this.productNumber.equals(that.productNumber))
        return false;
    }

    boolean this_present_makeApplyStatusTwo = true;
    boolean that_present_makeApplyStatusTwo = true;
    if (this_present_makeApplyStatusTwo || that_present_makeApplyStatusTwo) {
      if (!(this_present_makeApplyStatusTwo && that_present_makeApplyStatusTwo))
        return false;
      if (this.makeApplyStatusTwo != that.makeApplyStatusTwo)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_collectFeeStatus = true;
    boolean that_present_collectFeeStatus = true;
    if (this_present_collectFeeStatus || that_present_collectFeeStatus) {
      if (!(this_present_collectFeeStatus && that_present_collectFeeStatus))
        return false;
      if (this.collectFeeStatus != that.collectFeeStatus)
        return false;
    }

    boolean this_present_collectFeeType = true;
    boolean that_present_collectFeeType = true;
    if (this_present_collectFeeType || that_present_collectFeeType) {
      if (!(this_present_collectFeeType && that_present_collectFeeType))
        return false;
      if (this.collectFeeType != that.collectFeeType)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_mortgageStatus = true;
    boolean that_present_mortgageStatus = true;
    if (this_present_mortgageStatus || that_present_mortgageStatus) {
      if (!(this_present_mortgageStatus && that_present_mortgageStatus))
        return false;
      if (this.mortgageStatus != that.mortgageStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_statusList = true && (isSetStatusList());
    list.add(present_statusList);
    if (present_statusList)
      list.add(statusList);

    boolean present_houseClerkId = true;
    list.add(present_houseClerkId);
    if (present_houseClerkId)
      list.add(houseClerkId);

    boolean present_houseClerkName = true && (isSetHouseClerkName());
    list.add(present_houseClerkName);
    if (present_houseClerkName)
      list.add(houseClerkName);

    boolean present_realLoan = true;
    list.add(present_realLoan);
    if (present_realLoan)
      list.add(realLoan);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_projectStatus = true;
    list.add(present_projectStatus);
    if (present_projectStatus)
      list.add(projectStatus);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_checkDocumentApprovalStatus = true;
    list.add(present_checkDocumentApprovalStatus);
    if (present_checkDocumentApprovalStatus)
      list.add(checkDocumentApprovalStatus);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_bizHandleId = true;
    list.add(present_bizHandleId);
    if (present_bizHandleId)
      list.add(bizHandleId);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_foreclosureTurnDownRemark = true && (isSetForeclosureTurnDownRemark());
    list.add(present_foreclosureTurnDownRemark);
    if (present_foreclosureTurnDownRemark)
      list.add(foreclosureTurnDownRemark);

    boolean present_checkLitigationApprovalStatus = true;
    list.add(present_checkLitigationApprovalStatus);
    if (present_checkLitigationApprovalStatus)
      list.add(checkLitigationApprovalStatus);

    boolean present_reCheckStatus = true;
    list.add(present_reCheckStatus);
    if (present_reCheckStatus)
      list.add(reCheckStatus);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_makeLoansApplyFinanceId = true;
    list.add(present_makeLoansApplyFinanceId);
    if (present_makeLoansApplyFinanceId)
      list.add(makeLoansApplyFinanceId);

    boolean present_makeLoansApplyFinanceApplyStatus = true;
    list.add(present_makeLoansApplyFinanceApplyStatus);
    if (present_makeLoansApplyFinanceApplyStatus)
      list.add(makeLoansApplyFinanceApplyStatus);

    boolean present_isNeedHandle = true;
    list.add(present_isNeedHandle);
    if (present_isNeedHandle)
      list.add(isNeedHandle);

    boolean present_accountManager = true && (isSetAccountManager());
    list.add(present_accountManager);
    if (present_accountManager)
      list.add(accountManager);

    boolean present_accountDepartment = true && (isSetAccountDepartment());
    list.add(present_accountDepartment);
    if (present_accountDepartment)
      list.add(accountDepartment);

    boolean present_orgLoanDate = true && (isSetOrgLoanDate());
    list.add(present_orgLoanDate);
    if (present_orgLoanDate)
      list.add(orgLoanDate);

    boolean present_queryUserSource = true;
    list.add(present_queryUserSource);
    if (present_queryUserSource)
      list.add(queryUserSource);

    boolean present_isNeedFinancial = true;
    list.add(present_isNeedFinancial);
    if (present_isNeedFinancial)
      list.add(isNeedFinancial);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_makeApplyFinanceIdTwo = true;
    list.add(present_makeApplyFinanceIdTwo);
    if (present_makeApplyFinanceIdTwo)
      list.add(makeApplyFinanceIdTwo);

    boolean present_productNumber = true && (isSetProductNumber());
    list.add(present_productNumber);
    if (present_productNumber)
      list.add(productNumber);

    boolean present_makeApplyStatusTwo = true;
    list.add(present_makeApplyStatusTwo);
    if (present_makeApplyStatusTwo)
      list.add(makeApplyStatusTwo);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_collectFeeStatus = true;
    list.add(present_collectFeeStatus);
    if (present_collectFeeStatus)
      list.add(collectFeeStatus);

    boolean present_collectFeeType = true;
    list.add(present_collectFeeType);
    if (present_collectFeeType)
      list.add(collectFeeType);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_mortgageStatus = true;
    list.add(present_mortgageStatus);
    if (present_mortgageStatus)
      list.add(mortgageStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusList()).compareTo(other.isSetStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusList, other.statusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseClerkId()).compareTo(other.isSetHouseClerkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseClerkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseClerkId, other.houseClerkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseClerkName()).compareTo(other.isSetHouseClerkName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseClerkName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseClerkName, other.houseClerkName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealLoan()).compareTo(other.isSetRealLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realLoan, other.realLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectStatus()).compareTo(other.isSetProjectStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectStatus, other.projectStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckDocumentApprovalStatus()).compareTo(other.isSetCheckDocumentApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDocumentApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentApprovalStatus, other.checkDocumentApprovalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizHandleId()).compareTo(other.isSetBizHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizHandleId, other.bizHandleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureTurnDownRemark()).compareTo(other.isSetForeclosureTurnDownRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureTurnDownRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureTurnDownRemark, other.foreclosureTurnDownRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckLitigationApprovalStatus()).compareTo(other.isSetCheckLitigationApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckLitigationApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationApprovalStatus, other.checkLitigationApprovalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReCheckStatus()).compareTo(other.isSetReCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reCheckStatus, other.reCheckStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMakeLoansApplyFinanceId()).compareTo(other.isSetMakeLoansApplyFinanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMakeLoansApplyFinanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.makeLoansApplyFinanceId, other.makeLoansApplyFinanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMakeLoansApplyFinanceApplyStatus()).compareTo(other.isSetMakeLoansApplyFinanceApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMakeLoansApplyFinanceApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.makeLoansApplyFinanceApplyStatus, other.makeLoansApplyFinanceApplyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedHandle()).compareTo(other.isSetIsNeedHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedHandle, other.isNeedHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountManager()).compareTo(other.isSetAccountManager());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountManager()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountManager, other.accountManager);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountDepartment()).compareTo(other.isSetAccountDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountDepartment, other.accountDepartment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgLoanDate()).compareTo(other.isSetOrgLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLoanDate, other.orgLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryUserSource()).compareTo(other.isSetQueryUserSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryUserSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryUserSource, other.queryUserSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedFinancial()).compareTo(other.isSetIsNeedFinancial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedFinancial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedFinancial, other.isNeedFinancial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMakeApplyFinanceIdTwo()).compareTo(other.isSetMakeApplyFinanceIdTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMakeApplyFinanceIdTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.makeApplyFinanceIdTwo, other.makeApplyFinanceIdTwo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductNumber()).compareTo(other.isSetProductNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productNumber, other.productNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMakeApplyStatusTwo()).compareTo(other.isSetMakeApplyStatusTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMakeApplyStatusTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.makeApplyStatusTwo, other.makeApplyStatusTwo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFeeStatus()).compareTo(other.isSetCollectFeeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFeeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFeeStatus, other.collectFeeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFeeType()).compareTo(other.isSetCollectFeeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFeeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFeeType, other.collectFeeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageStatus()).compareTo(other.isSetMortgageStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageStatus, other.mortgageStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceIndexDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusList:");
    if (this.statusList == null) {
      sb.append("null");
    } else {
      sb.append(this.statusList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseClerkId:");
    sb.append(this.houseClerkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseClerkName:");
    if (this.houseClerkName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseClerkName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realLoan:");
    sb.append(this.realLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectStatus:");
    sb.append(this.projectStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkDocumentApprovalStatus:");
    sb.append(this.checkDocumentApprovalStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizHandleId:");
    sb.append(this.bizHandleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureTurnDownRemark:");
    if (this.foreclosureTurnDownRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureTurnDownRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkLitigationApprovalStatus:");
    sb.append(this.checkLitigationApprovalStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reCheckStatus:");
    sb.append(this.reCheckStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("makeLoansApplyFinanceId:");
    sb.append(this.makeLoansApplyFinanceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("makeLoansApplyFinanceApplyStatus:");
    sb.append(this.makeLoansApplyFinanceApplyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedHandle:");
    sb.append(this.isNeedHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountManager:");
    if (this.accountManager == null) {
      sb.append("null");
    } else {
      sb.append(this.accountManager);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountDepartment:");
    if (this.accountDepartment == null) {
      sb.append("null");
    } else {
      sb.append(this.accountDepartment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgLoanDate:");
    if (this.orgLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.orgLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryUserSource:");
    sb.append(this.queryUserSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedFinancial:");
    sb.append(this.isNeedFinancial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("makeApplyFinanceIdTwo:");
    sb.append(this.makeApplyFinanceIdTwo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productNumber:");
    if (this.productNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.productNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("makeApplyStatusTwo:");
    sb.append(this.makeApplyStatusTwo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFeeStatus:");
    sb.append(this.collectFeeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFeeType:");
    sb.append(this.collectFeeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageStatus:");
    sb.append(this.mortgageStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceIndexDTOStandardSchemeFactory implements SchemeFactory {
    public FinanceIndexDTOStandardScheme getScheme() {
      return new FinanceIndexDTOStandardScheme();
    }
  }

  private static class FinanceIndexDTOStandardScheme extends StandardScheme<FinanceIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.statusList = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.statusList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HOUSE_CLERK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseClerkId = iprot.readI32();
              struct.setHouseClerkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HOUSE_CLERK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseClerkName = iprot.readString();
              struct.setHouseClerkNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REAL_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realLoan = iprot.readDouble();
              struct.setRealLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROJECT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectStatus = iprot.readI32();
              struct.setProjectStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHECK_DOCUMENT_APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkDocumentApprovalStatus = iprot.readI32();
              struct.setCheckDocumentApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BIZ_HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizHandleId = iprot.readI32();
              struct.setBizHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // FORECLOSURE_TURN_DOWN_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureTurnDownRemark = iprot.readString();
              struct.setForeclosureTurnDownRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CHECK_LITIGATION_APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkLitigationApprovalStatus = iprot.readI32();
              struct.setCheckLitigationApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // RE_CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reCheckStatus = iprot.readI32();
              struct.setReCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MAKE_LOANS_APPLY_FINANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.makeLoansApplyFinanceId = iprot.readI32();
              struct.setMakeLoansApplyFinanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.makeLoansApplyFinanceApplyStatus = iprot.readI32();
              struct.setMakeLoansApplyFinanceApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // IS_NEED_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedHandle = iprot.readI32();
              struct.setIsNeedHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // ACCOUNT_MANAGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountManager = iprot.readString();
              struct.setAccountManagerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // ACCOUNT_DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountDepartment = iprot.readString();
              struct.setAccountDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ORG_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgLoanDate = iprot.readString();
              struct.setOrgLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // QUERY_USER_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryUserSource = iprot.readI32();
              struct.setQueryUserSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // IS_NEED_FINANCIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedFinancial = iprot.readI32();
              struct.setIsNeedFinancialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // MAKE_APPLY_FINANCE_ID_TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.makeApplyFinanceIdTwo = iprot.readI32();
              struct.setMakeApplyFinanceIdTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // PRODUCT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productNumber = iprot.readString();
              struct.setProductNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // MAKE_APPLY_STATUS_TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.makeApplyStatusTwo = iprot.readI32();
              struct.setMakeApplyStatusTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // COLLECT_FEE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collectFeeStatus = iprot.readI32();
              struct.setCollectFeeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // COLLECT_FEE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collectFeeType = iprot.readI32();
              struct.setCollectFeeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // MORTGAGE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageStatus = iprot.readI32();
              struct.setMortgageStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter6 : struct.userIds)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      if (struct.statusList != null) {
        oprot.writeFieldBegin(STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.statusList.size()));
          for (int _iter7 : struct.statusList)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOUSE_CLERK_ID_FIELD_DESC);
      oprot.writeI32(struct.houseClerkId);
      oprot.writeFieldEnd();
      if (struct.houseClerkName != null) {
        oprot.writeFieldBegin(HOUSE_CLERK_NAME_FIELD_DESC);
        oprot.writeString(struct.houseClerkName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_LOAN_FIELD_DESC);
      oprot.writeDouble(struct.realLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.projectStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_DOCUMENT_APPROVAL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkDocumentApprovalStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIZ_HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.bizHandleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      if (struct.foreclosureTurnDownRemark != null) {
        oprot.writeFieldBegin(FORECLOSURE_TURN_DOWN_REMARK_FIELD_DESC);
        oprot.writeString(struct.foreclosureTurnDownRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_LITIGATION_APPROVAL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkLitigationApprovalStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RE_CHECK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.reCheckStatus);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAKE_LOANS_APPLY_FINANCE_ID_FIELD_DESC);
      oprot.writeI32(struct.makeLoansApplyFinanceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAKE_LOANS_APPLY_FINANCE_APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.makeLoansApplyFinanceApplyStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NEED_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.isNeedHandle);
      oprot.writeFieldEnd();
      if (struct.accountManager != null) {
        oprot.writeFieldBegin(ACCOUNT_MANAGER_FIELD_DESC);
        oprot.writeString(struct.accountManager);
        oprot.writeFieldEnd();
      }
      if (struct.accountDepartment != null) {
        oprot.writeFieldBegin(ACCOUNT_DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.accountDepartment);
        oprot.writeFieldEnd();
      }
      if (struct.orgLoanDate != null) {
        oprot.writeFieldBegin(ORG_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.orgLoanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUERY_USER_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.queryUserSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NEED_FINANCIAL_FIELD_DESC);
      oprot.writeI32(struct.isNeedFinancial);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAKE_APPLY_FINANCE_ID_TWO_FIELD_DESC);
      oprot.writeI32(struct.makeApplyFinanceIdTwo);
      oprot.writeFieldEnd();
      if (struct.productNumber != null) {
        oprot.writeFieldBegin(PRODUCT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.productNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAKE_APPLY_STATUS_TWO_FIELD_DESC);
      oprot.writeI32(struct.makeApplyStatusTwo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECT_FEE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.collectFeeStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECT_FEE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.collectFeeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.mortgageStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceIndexDTOTupleSchemeFactory implements SchemeFactory {
    public FinanceIndexDTOTupleScheme getScheme() {
      return new FinanceIndexDTOTupleScheme();
    }
  }

  private static class FinanceIndexDTOTupleScheme extends TupleScheme<FinanceIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(5);
      }
      if (struct.isSetUserIds()) {
        optionals.set(6);
      }
      if (struct.isSetPage()) {
        optionals.set(7);
      }
      if (struct.isSetRows()) {
        optionals.set(8);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(9);
      }
      if (struct.isSetStatusList()) {
        optionals.set(10);
      }
      if (struct.isSetHouseClerkId()) {
        optionals.set(11);
      }
      if (struct.isSetHouseClerkName()) {
        optionals.set(12);
      }
      if (struct.isSetRealLoan()) {
        optionals.set(13);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(14);
      }
      if (struct.isSetProjectStatus()) {
        optionals.set(15);
      }
      if (struct.isSetType()) {
        optionals.set(16);
      }
      if (struct.isSetCheckDocumentApprovalStatus()) {
        optionals.set(17);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(18);
      }
      if (struct.isSetProjectType()) {
        optionals.set(19);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(20);
      }
      if (struct.isSetBizHandleId()) {
        optionals.set(21);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(22);
      }
      if (struct.isSetForeclosureTurnDownRemark()) {
        optionals.set(23);
      }
      if (struct.isSetCheckLitigationApprovalStatus()) {
        optionals.set(24);
      }
      if (struct.isSetReCheckStatus()) {
        optionals.set(25);
      }
      if (struct.isSetHouseName()) {
        optionals.set(26);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(27);
      }
      if (struct.isSetSellerName()) {
        optionals.set(28);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(29);
      }
      if (struct.isSetMakeLoansApplyFinanceId()) {
        optionals.set(30);
      }
      if (struct.isSetMakeLoansApplyFinanceApplyStatus()) {
        optionals.set(31);
      }
      if (struct.isSetIsNeedHandle()) {
        optionals.set(32);
      }
      if (struct.isSetAccountManager()) {
        optionals.set(33);
      }
      if (struct.isSetAccountDepartment()) {
        optionals.set(34);
      }
      if (struct.isSetOrgLoanDate()) {
        optionals.set(35);
      }
      if (struct.isSetQueryUserSource()) {
        optionals.set(36);
      }
      if (struct.isSetIsNeedFinancial()) {
        optionals.set(37);
      }
      if (struct.isSetProductName()) {
        optionals.set(38);
      }
      if (struct.isSetMakeApplyFinanceIdTwo()) {
        optionals.set(39);
      }
      if (struct.isSetProductNumber()) {
        optionals.set(40);
      }
      if (struct.isSetMakeApplyStatusTwo()) {
        optionals.set(41);
      }
      if (struct.isSetProductId()) {
        optionals.set(42);
      }
      if (struct.isSetCollectFeeStatus()) {
        optionals.set(43);
      }
      if (struct.isSetCollectFeeType()) {
        optionals.set(44);
      }
      if (struct.isSetPoundage()) {
        optionals.set(45);
      }
      if (struct.isSetMortgageStatus()) {
        optionals.set(46);
      }
      oprot.writeBitSet(optionals, 47);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter8 : struct.userIds)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetStatusList()) {
        {
          oprot.writeI32(struct.statusList.size());
          for (int _iter9 : struct.statusList)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
      if (struct.isSetHouseClerkId()) {
        oprot.writeI32(struct.houseClerkId);
      }
      if (struct.isSetHouseClerkName()) {
        oprot.writeString(struct.houseClerkName);
      }
      if (struct.isSetRealLoan()) {
        oprot.writeDouble(struct.realLoan);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetProjectStatus()) {
        oprot.writeI32(struct.projectStatus);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetCheckDocumentApprovalStatus()) {
        oprot.writeI32(struct.checkDocumentApprovalStatus);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetBizHandleId()) {
        oprot.writeI32(struct.bizHandleId);
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetForeclosureTurnDownRemark()) {
        oprot.writeString(struct.foreclosureTurnDownRemark);
      }
      if (struct.isSetCheckLitigationApprovalStatus()) {
        oprot.writeI32(struct.checkLitigationApprovalStatus);
      }
      if (struct.isSetReCheckStatus()) {
        oprot.writeI32(struct.reCheckStatus);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetMakeLoansApplyFinanceId()) {
        oprot.writeI32(struct.makeLoansApplyFinanceId);
      }
      if (struct.isSetMakeLoansApplyFinanceApplyStatus()) {
        oprot.writeI32(struct.makeLoansApplyFinanceApplyStatus);
      }
      if (struct.isSetIsNeedHandle()) {
        oprot.writeI32(struct.isNeedHandle);
      }
      if (struct.isSetAccountManager()) {
        oprot.writeString(struct.accountManager);
      }
      if (struct.isSetAccountDepartment()) {
        oprot.writeString(struct.accountDepartment);
      }
      if (struct.isSetOrgLoanDate()) {
        oprot.writeString(struct.orgLoanDate);
      }
      if (struct.isSetQueryUserSource()) {
        oprot.writeI32(struct.queryUserSource);
      }
      if (struct.isSetIsNeedFinancial()) {
        oprot.writeI32(struct.isNeedFinancial);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetMakeApplyFinanceIdTwo()) {
        oprot.writeI32(struct.makeApplyFinanceIdTwo);
      }
      if (struct.isSetProductNumber()) {
        oprot.writeString(struct.productNumber);
      }
      if (struct.isSetMakeApplyStatusTwo()) {
        oprot.writeI32(struct.makeApplyStatusTwo);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetCollectFeeStatus()) {
        oprot.writeI32(struct.collectFeeStatus);
      }
      if (struct.isSetCollectFeeType()) {
        oprot.writeI32(struct.collectFeeType);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetMortgageStatus()) {
        oprot.writeI32(struct.mortgageStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(47);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.userIds.add(_elem11);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statusList = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.statusList.add(_elem14);
          }
        }
        struct.setStatusListIsSet(true);
      }
      if (incoming.get(11)) {
        struct.houseClerkId = iprot.readI32();
        struct.setHouseClerkIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.houseClerkName = iprot.readString();
        struct.setHouseClerkNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.realLoan = iprot.readDouble();
        struct.setRealLoanIsSet(true);
      }
      if (incoming.get(14)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.projectStatus = iprot.readI32();
        struct.setProjectStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.checkDocumentApprovalStatus = iprot.readI32();
        struct.setCheckDocumentApprovalStatusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.bizHandleId = iprot.readI32();
        struct.setBizHandleIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(23)) {
        struct.foreclosureTurnDownRemark = iprot.readString();
        struct.setForeclosureTurnDownRemarkIsSet(true);
      }
      if (incoming.get(24)) {
        struct.checkLitigationApprovalStatus = iprot.readI32();
        struct.setCheckLitigationApprovalStatusIsSet(true);
      }
      if (incoming.get(25)) {
        struct.reCheckStatus = iprot.readI32();
        struct.setReCheckStatusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(27)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(30)) {
        struct.makeLoansApplyFinanceId = iprot.readI32();
        struct.setMakeLoansApplyFinanceIdIsSet(true);
      }
      if (incoming.get(31)) {
        struct.makeLoansApplyFinanceApplyStatus = iprot.readI32();
        struct.setMakeLoansApplyFinanceApplyStatusIsSet(true);
      }
      if (incoming.get(32)) {
        struct.isNeedHandle = iprot.readI32();
        struct.setIsNeedHandleIsSet(true);
      }
      if (incoming.get(33)) {
        struct.accountManager = iprot.readString();
        struct.setAccountManagerIsSet(true);
      }
      if (incoming.get(34)) {
        struct.accountDepartment = iprot.readString();
        struct.setAccountDepartmentIsSet(true);
      }
      if (incoming.get(35)) {
        struct.orgLoanDate = iprot.readString();
        struct.setOrgLoanDateIsSet(true);
      }
      if (incoming.get(36)) {
        struct.queryUserSource = iprot.readI32();
        struct.setQueryUserSourceIsSet(true);
      }
      if (incoming.get(37)) {
        struct.isNeedFinancial = iprot.readI32();
        struct.setIsNeedFinancialIsSet(true);
      }
      if (incoming.get(38)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(39)) {
        struct.makeApplyFinanceIdTwo = iprot.readI32();
        struct.setMakeApplyFinanceIdTwoIsSet(true);
      }
      if (incoming.get(40)) {
        struct.productNumber = iprot.readString();
        struct.setProductNumberIsSet(true);
      }
      if (incoming.get(41)) {
        struct.makeApplyStatusTwo = iprot.readI32();
        struct.setMakeApplyStatusTwoIsSet(true);
      }
      if (incoming.get(42)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(43)) {
        struct.collectFeeStatus = iprot.readI32();
        struct.setCollectFeeStatusIsSet(true);
      }
      if (incoming.get(44)) {
        struct.collectFeeType = iprot.readI32();
        struct.setCollectFeeTypeIsSet(true);
      }
      if (incoming.get(45)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(46)) {
        struct.mortgageStatus = iprot.readI32();
        struct.setMortgageStatusIsSet(true);
      }
    }
  }

}


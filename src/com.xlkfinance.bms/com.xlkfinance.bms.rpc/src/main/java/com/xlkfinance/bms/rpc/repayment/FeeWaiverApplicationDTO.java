/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 费用减免申请书
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class FeeWaiverApplicationDTO implements org.apache.thrift.TBase<FeeWaiverApplicationDTO, FeeWaiverApplicationDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FeeWaiverApplicationDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeeWaiverApplicationDTO");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WAIVER_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("waiverDttm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PMUSER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmuserName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_RECEIVE_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastReceiveDt", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField WAIVER_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("waiverReason", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField LOOKUP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupVal", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField RETURN_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("returnPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField REC_ACCRUAL_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccrual", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField DER_ACCRUAL_FIELD_DESC = new org.apache.thrift.protocol.TField("derAccrual", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField DER_LAST_ACCRUAL_FIELD_DESC = new org.apache.thrift.protocol.TField("derLastAccrual", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField REC_MANAGE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("recManageFee", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField DER_MANAGE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("derManageFee", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField DER_LAST_MANAGE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("derLastManageFee", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField REC_ELSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("recElseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField DER_ELSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("derElseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField DER_LAST_ELSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("derLastElseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField REC_OVE_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField("recOveAcc", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField DER_OVE_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField("derOveAcc", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField DER_LAST_OVE_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField("derLastOveAcc", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField REC_LATE_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("recLateCharge", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField DER_LATE_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("derLateCharge", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField DER_LAST_LATE_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("derLastLateCharge", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField REC_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("recTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField DER_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("derTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField DER_LAST_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("derLastTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)40);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeeWaiverApplicationDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeeWaiverApplicationDTOTupleSchemeFactory());
  }

  public int projectId; // required
  public int repayId; // required
  public String projectNumber; // required
  public String projectName; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public String requestStatus; // required
  public String waiverDttm; // required
  public String pmuserName; // required
  public String cusName; // required
  public String planOutLoanDt; // required
  public String planRepayLoanDt; // required
  public double creditAmt; // required
  public String contractNo; // required
  public double monthLoanMgr; // required
  public String lastReceiveDt; // required
  public String waiverReason; // required
  public String repayCycle; // required
  public double monthLoanInterest; // required
  public String lookupVal; // required
  public double returnPrincipal; // required
  public double recAccrual; // required
  public double derAccrual; // required
  public double derLastAccrual; // required
  public double recManageFee; // required
  public double derManageFee; // required
  public double derLastManageFee; // required
  public double recElseFee; // required
  public double derElseFee; // required
  public double derLastElseFee; // required
  public double recOveAcc; // required
  public double derOveAcc; // required
  public double derLastOveAcc; // required
  public double recLateCharge; // required
  public double derLateCharge; // required
  public double derLastLateCharge; // required
  public double recTotal; // required
  public double derTotal; // required
  public double derLastTotal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    REPAY_ID((short)2, "repayId"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PROJECT_NAME((short)4, "projectName"),
    REQUEST_DTTM((short)5, "requestDttm"),
    COMPLETE_DTTM((short)6, "completeDttm"),
    REQUEST_STATUS((short)7, "requestStatus"),
    WAIVER_DTTM((short)8, "waiverDttm"),
    PMUSER_NAME((short)9, "pmuserName"),
    CUS_NAME((short)10, "cusName"),
    PLAN_OUT_LOAN_DT((short)11, "planOutLoanDt"),
    PLAN_REPAY_LOAN_DT((short)12, "planRepayLoanDt"),
    CREDIT_AMT((short)13, "creditAmt"),
    CONTRACT_NO((short)14, "contractNo"),
    MONTH_LOAN_MGR((short)15, "monthLoanMgr"),
    LAST_RECEIVE_DT((short)16, "lastReceiveDt"),
    WAIVER_REASON((short)17, "waiverReason"),
    REPAY_CYCLE((short)18, "repayCycle"),
    MONTH_LOAN_INTEREST((short)19, "monthLoanInterest"),
    LOOKUP_VAL((short)20, "lookupVal"),
    RETURN_PRINCIPAL((short)21, "returnPrincipal"),
    REC_ACCRUAL((short)23, "recAccrual"),
    DER_ACCRUAL((short)24, "derAccrual"),
    DER_LAST_ACCRUAL((short)25, "derLastAccrual"),
    REC_MANAGE_FEE((short)26, "recManageFee"),
    DER_MANAGE_FEE((short)27, "derManageFee"),
    DER_LAST_MANAGE_FEE((short)28, "derLastManageFee"),
    REC_ELSE_FEE((short)29, "recElseFee"),
    DER_ELSE_FEE((short)30, "derElseFee"),
    DER_LAST_ELSE_FEE((short)31, "derLastElseFee"),
    REC_OVE_ACC((short)32, "recOveAcc"),
    DER_OVE_ACC((short)33, "derOveAcc"),
    DER_LAST_OVE_ACC((short)34, "derLastOveAcc"),
    REC_LATE_CHARGE((short)35, "recLateCharge"),
    DER_LATE_CHARGE((short)36, "derLateCharge"),
    DER_LAST_LATE_CHARGE((short)37, "derLastLateCharge"),
    REC_TOTAL((short)38, "recTotal"),
    DER_TOTAL((short)39, "derTotal"),
    DER_LAST_TOTAL((short)40, "derLastTotal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // REPAY_ID
          return REPAY_ID;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 6: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 7: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 8: // WAIVER_DTTM
          return WAIVER_DTTM;
        case 9: // PMUSER_NAME
          return PMUSER_NAME;
        case 10: // CUS_NAME
          return CUS_NAME;
        case 11: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 12: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 13: // CREDIT_AMT
          return CREDIT_AMT;
        case 14: // CONTRACT_NO
          return CONTRACT_NO;
        case 15: // MONTH_LOAN_MGR
          return MONTH_LOAN_MGR;
        case 16: // LAST_RECEIVE_DT
          return LAST_RECEIVE_DT;
        case 17: // WAIVER_REASON
          return WAIVER_REASON;
        case 18: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 19: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 20: // LOOKUP_VAL
          return LOOKUP_VAL;
        case 21: // RETURN_PRINCIPAL
          return RETURN_PRINCIPAL;
        case 23: // REC_ACCRUAL
          return REC_ACCRUAL;
        case 24: // DER_ACCRUAL
          return DER_ACCRUAL;
        case 25: // DER_LAST_ACCRUAL
          return DER_LAST_ACCRUAL;
        case 26: // REC_MANAGE_FEE
          return REC_MANAGE_FEE;
        case 27: // DER_MANAGE_FEE
          return DER_MANAGE_FEE;
        case 28: // DER_LAST_MANAGE_FEE
          return DER_LAST_MANAGE_FEE;
        case 29: // REC_ELSE_FEE
          return REC_ELSE_FEE;
        case 30: // DER_ELSE_FEE
          return DER_ELSE_FEE;
        case 31: // DER_LAST_ELSE_FEE
          return DER_LAST_ELSE_FEE;
        case 32: // REC_OVE_ACC
          return REC_OVE_ACC;
        case 33: // DER_OVE_ACC
          return DER_OVE_ACC;
        case 34: // DER_LAST_OVE_ACC
          return DER_LAST_OVE_ACC;
        case 35: // REC_LATE_CHARGE
          return REC_LATE_CHARGE;
        case 36: // DER_LATE_CHARGE
          return DER_LATE_CHARGE;
        case 37: // DER_LAST_LATE_CHARGE
          return DER_LAST_LATE_CHARGE;
        case 38: // REC_TOTAL
          return REC_TOTAL;
        case 39: // DER_TOTAL
          return DER_TOTAL;
        case 40: // DER_LAST_TOTAL
          return DER_LAST_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __REPAYID_ISSET_ID = 1;
  private static final int __CREDITAMT_ISSET_ID = 2;
  private static final int __MONTHLOANMGR_ISSET_ID = 3;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 4;
  private static final int __RETURNPRINCIPAL_ISSET_ID = 5;
  private static final int __RECACCRUAL_ISSET_ID = 6;
  private static final int __DERACCRUAL_ISSET_ID = 7;
  private static final int __DERLASTACCRUAL_ISSET_ID = 8;
  private static final int __RECMANAGEFEE_ISSET_ID = 9;
  private static final int __DERMANAGEFEE_ISSET_ID = 10;
  private static final int __DERLASTMANAGEFEE_ISSET_ID = 11;
  private static final int __RECELSEFEE_ISSET_ID = 12;
  private static final int __DERELSEFEE_ISSET_ID = 13;
  private static final int __DERLASTELSEFEE_ISSET_ID = 14;
  private static final int __RECOVEACC_ISSET_ID = 15;
  private static final int __DEROVEACC_ISSET_ID = 16;
  private static final int __DERLASTOVEACC_ISSET_ID = 17;
  private static final int __RECLATECHARGE_ISSET_ID = 18;
  private static final int __DERLATECHARGE_ISSET_ID = 19;
  private static final int __DERLASTLATECHARGE_ISSET_ID = 20;
  private static final int __RECTOTAL_ISSET_ID = 21;
  private static final int __DERTOTAL_ISSET_ID = 22;
  private static final int __DERLASTTOTAL_ISSET_ID = 23;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAIVER_DTTM, new org.apache.thrift.meta_data.FieldMetaData("waiverDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PMUSER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmuserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("monthLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_RECEIVE_DT, new org.apache.thrift.meta_data.FieldMetaData("lastReceiveDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAIVER_REASON, new org.apache.thrift.meta_data.FieldMetaData("waiverReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOOKUP_VAL, new org.apache.thrift.meta_data.FieldMetaData("lookupVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("returnPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_ACCRUAL, new org.apache.thrift.meta_data.FieldMetaData("recAccrual", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_ACCRUAL, new org.apache.thrift.meta_data.FieldMetaData("derAccrual", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_LAST_ACCRUAL, new org.apache.thrift.meta_data.FieldMetaData("derLastAccrual", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_MANAGE_FEE, new org.apache.thrift.meta_data.FieldMetaData("recManageFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_MANAGE_FEE, new org.apache.thrift.meta_data.FieldMetaData("derManageFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_LAST_MANAGE_FEE, new org.apache.thrift.meta_data.FieldMetaData("derLastManageFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_ELSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("recElseFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_ELSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("derElseFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_LAST_ELSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("derLastElseFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_OVE_ACC, new org.apache.thrift.meta_data.FieldMetaData("recOveAcc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_OVE_ACC, new org.apache.thrift.meta_data.FieldMetaData("derOveAcc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_LAST_OVE_ACC, new org.apache.thrift.meta_data.FieldMetaData("derLastOveAcc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_LATE_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("recLateCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_LATE_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("derLateCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_LAST_LATE_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("derLastLateCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("recTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("derTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DER_LAST_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("derLastTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeeWaiverApplicationDTO.class, metaDataMap);
  }

  public FeeWaiverApplicationDTO() {
  }

  public FeeWaiverApplicationDTO(
    int projectId,
    int repayId,
    String projectNumber,
    String projectName,
    String requestDttm,
    String completeDttm,
    String requestStatus,
    String waiverDttm,
    String pmuserName,
    String cusName,
    String planOutLoanDt,
    String planRepayLoanDt,
    double creditAmt,
    String contractNo,
    double monthLoanMgr,
    String lastReceiveDt,
    String waiverReason,
    String repayCycle,
    double monthLoanInterest,
    String lookupVal,
    double returnPrincipal,
    double recAccrual,
    double derAccrual,
    double derLastAccrual,
    double recManageFee,
    double derManageFee,
    double derLastManageFee,
    double recElseFee,
    double derElseFee,
    double derLastElseFee,
    double recOveAcc,
    double derOveAcc,
    double derLastOveAcc,
    double recLateCharge,
    double derLateCharge,
    double derLastLateCharge,
    double recTotal,
    double derTotal,
    double derLastTotal)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.repayId = repayId;
    setRepayIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.requestStatus = requestStatus;
    this.waiverDttm = waiverDttm;
    this.pmuserName = pmuserName;
    this.cusName = cusName;
    this.planOutLoanDt = planOutLoanDt;
    this.planRepayLoanDt = planRepayLoanDt;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.contractNo = contractNo;
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    this.lastReceiveDt = lastReceiveDt;
    this.waiverReason = waiverReason;
    this.repayCycle = repayCycle;
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.lookupVal = lookupVal;
    this.returnPrincipal = returnPrincipal;
    setReturnPrincipalIsSet(true);
    this.recAccrual = recAccrual;
    setRecAccrualIsSet(true);
    this.derAccrual = derAccrual;
    setDerAccrualIsSet(true);
    this.derLastAccrual = derLastAccrual;
    setDerLastAccrualIsSet(true);
    this.recManageFee = recManageFee;
    setRecManageFeeIsSet(true);
    this.derManageFee = derManageFee;
    setDerManageFeeIsSet(true);
    this.derLastManageFee = derLastManageFee;
    setDerLastManageFeeIsSet(true);
    this.recElseFee = recElseFee;
    setRecElseFeeIsSet(true);
    this.derElseFee = derElseFee;
    setDerElseFeeIsSet(true);
    this.derLastElseFee = derLastElseFee;
    setDerLastElseFeeIsSet(true);
    this.recOveAcc = recOveAcc;
    setRecOveAccIsSet(true);
    this.derOveAcc = derOveAcc;
    setDerOveAccIsSet(true);
    this.derLastOveAcc = derLastOveAcc;
    setDerLastOveAccIsSet(true);
    this.recLateCharge = recLateCharge;
    setRecLateChargeIsSet(true);
    this.derLateCharge = derLateCharge;
    setDerLateChargeIsSet(true);
    this.derLastLateCharge = derLastLateCharge;
    setDerLastLateChargeIsSet(true);
    this.recTotal = recTotal;
    setRecTotalIsSet(true);
    this.derTotal = derTotal;
    setDerTotalIsSet(true);
    this.derLastTotal = derLastTotal;
    setDerLastTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeeWaiverApplicationDTO(FeeWaiverApplicationDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    this.repayId = other.repayId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    if (other.isSetRequestStatus()) {
      this.requestStatus = other.requestStatus;
    }
    if (other.isSetWaiverDttm()) {
      this.waiverDttm = other.waiverDttm;
    }
    if (other.isSetPmuserName()) {
      this.pmuserName = other.pmuserName;
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    this.creditAmt = other.creditAmt;
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    this.monthLoanMgr = other.monthLoanMgr;
    if (other.isSetLastReceiveDt()) {
      this.lastReceiveDt = other.lastReceiveDt;
    }
    if (other.isSetWaiverReason()) {
      this.waiverReason = other.waiverReason;
    }
    if (other.isSetRepayCycle()) {
      this.repayCycle = other.repayCycle;
    }
    this.monthLoanInterest = other.monthLoanInterest;
    if (other.isSetLookupVal()) {
      this.lookupVal = other.lookupVal;
    }
    this.returnPrincipal = other.returnPrincipal;
    this.recAccrual = other.recAccrual;
    this.derAccrual = other.derAccrual;
    this.derLastAccrual = other.derLastAccrual;
    this.recManageFee = other.recManageFee;
    this.derManageFee = other.derManageFee;
    this.derLastManageFee = other.derLastManageFee;
    this.recElseFee = other.recElseFee;
    this.derElseFee = other.derElseFee;
    this.derLastElseFee = other.derLastElseFee;
    this.recOveAcc = other.recOveAcc;
    this.derOveAcc = other.derOveAcc;
    this.derLastOveAcc = other.derLastOveAcc;
    this.recLateCharge = other.recLateCharge;
    this.derLateCharge = other.derLateCharge;
    this.derLastLateCharge = other.derLastLateCharge;
    this.recTotal = other.recTotal;
    this.derTotal = other.derTotal;
    this.derLastTotal = other.derLastTotal;
  }

  public FeeWaiverApplicationDTO deepCopy() {
    return new FeeWaiverApplicationDTO(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    setRepayIdIsSet(false);
    this.repayId = 0;
    this.projectNumber = null;
    this.projectName = null;
    this.requestDttm = null;
    this.completeDttm = null;
    this.requestStatus = null;
    this.waiverDttm = null;
    this.pmuserName = null;
    this.cusName = null;
    this.planOutLoanDt = null;
    this.planRepayLoanDt = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    this.contractNo = null;
    setMonthLoanMgrIsSet(false);
    this.monthLoanMgr = 0.0;
    this.lastReceiveDt = null;
    this.waiverReason = null;
    this.repayCycle = null;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
    this.lookupVal = null;
    setReturnPrincipalIsSet(false);
    this.returnPrincipal = 0.0;
    setRecAccrualIsSet(false);
    this.recAccrual = 0.0;
    setDerAccrualIsSet(false);
    this.derAccrual = 0.0;
    setDerLastAccrualIsSet(false);
    this.derLastAccrual = 0.0;
    setRecManageFeeIsSet(false);
    this.recManageFee = 0.0;
    setDerManageFeeIsSet(false);
    this.derManageFee = 0.0;
    setDerLastManageFeeIsSet(false);
    this.derLastManageFee = 0.0;
    setRecElseFeeIsSet(false);
    this.recElseFee = 0.0;
    setDerElseFeeIsSet(false);
    this.derElseFee = 0.0;
    setDerLastElseFeeIsSet(false);
    this.derLastElseFee = 0.0;
    setRecOveAccIsSet(false);
    this.recOveAcc = 0.0;
    setDerOveAccIsSet(false);
    this.derOveAcc = 0.0;
    setDerLastOveAccIsSet(false);
    this.derLastOveAcc = 0.0;
    setRecLateChargeIsSet(false);
    this.recLateCharge = 0.0;
    setDerLateChargeIsSet(false);
    this.derLateCharge = 0.0;
    setDerLastLateChargeIsSet(false);
    this.derLastLateCharge = 0.0;
    setRecTotalIsSet(false);
    this.recTotal = 0.0;
    setDerTotalIsSet(false);
    this.derTotal = 0.0;
    setDerLastTotalIsSet(false);
    this.derLastTotal = 0.0;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public FeeWaiverApplicationDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getRepayId() {
    return this.repayId;
  }

  public FeeWaiverApplicationDTO setRepayId(int repayId) {
    this.repayId = repayId;
    setRepayIdIsSet(true);
    return this;
  }

  public void unsetRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  public void setRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public FeeWaiverApplicationDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public FeeWaiverApplicationDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public FeeWaiverApplicationDTO setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public FeeWaiverApplicationDTO setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public String getRequestStatus() {
    return this.requestStatus;
  }

  public FeeWaiverApplicationDTO setRequestStatus(String requestStatus) {
    this.requestStatus = requestStatus;
    return this;
  }

  public void unsetRequestStatus() {
    this.requestStatus = null;
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return this.requestStatus != null;
  }

  public void setRequestStatusIsSet(boolean value) {
    if (!value) {
      this.requestStatus = null;
    }
  }

  public String getWaiverDttm() {
    return this.waiverDttm;
  }

  public FeeWaiverApplicationDTO setWaiverDttm(String waiverDttm) {
    this.waiverDttm = waiverDttm;
    return this;
  }

  public void unsetWaiverDttm() {
    this.waiverDttm = null;
  }

  /** Returns true if field waiverDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetWaiverDttm() {
    return this.waiverDttm != null;
  }

  public void setWaiverDttmIsSet(boolean value) {
    if (!value) {
      this.waiverDttm = null;
    }
  }

  public String getPmuserName() {
    return this.pmuserName;
  }

  public FeeWaiverApplicationDTO setPmuserName(String pmuserName) {
    this.pmuserName = pmuserName;
    return this;
  }

  public void unsetPmuserName() {
    this.pmuserName = null;
  }

  /** Returns true if field pmuserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmuserName() {
    return this.pmuserName != null;
  }

  public void setPmuserNameIsSet(boolean value) {
    if (!value) {
      this.pmuserName = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public FeeWaiverApplicationDTO setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public FeeWaiverApplicationDTO setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public FeeWaiverApplicationDTO setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public FeeWaiverApplicationDTO setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public FeeWaiverApplicationDTO setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public double getMonthLoanMgr() {
    return this.monthLoanMgr;
  }

  public FeeWaiverApplicationDTO setMonthLoanMgr(double monthLoanMgr) {
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    return this;
  }

  public void unsetMonthLoanMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  /** Returns true if field monthLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  public void setMonthLoanMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID, value);
  }

  public String getLastReceiveDt() {
    return this.lastReceiveDt;
  }

  public FeeWaiverApplicationDTO setLastReceiveDt(String lastReceiveDt) {
    this.lastReceiveDt = lastReceiveDt;
    return this;
  }

  public void unsetLastReceiveDt() {
    this.lastReceiveDt = null;
  }

  /** Returns true if field lastReceiveDt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastReceiveDt() {
    return this.lastReceiveDt != null;
  }

  public void setLastReceiveDtIsSet(boolean value) {
    if (!value) {
      this.lastReceiveDt = null;
    }
  }

  public String getWaiverReason() {
    return this.waiverReason;
  }

  public FeeWaiverApplicationDTO setWaiverReason(String waiverReason) {
    this.waiverReason = waiverReason;
    return this;
  }

  public void unsetWaiverReason() {
    this.waiverReason = null;
  }

  /** Returns true if field waiverReason is set (has been assigned a value) and false otherwise */
  public boolean isSetWaiverReason() {
    return this.waiverReason != null;
  }

  public void setWaiverReasonIsSet(boolean value) {
    if (!value) {
      this.waiverReason = null;
    }
  }

  public String getRepayCycle() {
    return this.repayCycle;
  }

  public FeeWaiverApplicationDTO setRepayCycle(String repayCycle) {
    this.repayCycle = repayCycle;
    return this;
  }

  public void unsetRepayCycle() {
    this.repayCycle = null;
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return this.repayCycle != null;
  }

  public void setRepayCycleIsSet(boolean value) {
    if (!value) {
      this.repayCycle = null;
    }
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public FeeWaiverApplicationDTO setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public String getLookupVal() {
    return this.lookupVal;
  }

  public FeeWaiverApplicationDTO setLookupVal(String lookupVal) {
    this.lookupVal = lookupVal;
    return this;
  }

  public void unsetLookupVal() {
    this.lookupVal = null;
  }

  /** Returns true if field lookupVal is set (has been assigned a value) and false otherwise */
  public boolean isSetLookupVal() {
    return this.lookupVal != null;
  }

  public void setLookupValIsSet(boolean value) {
    if (!value) {
      this.lookupVal = null;
    }
  }

  public double getReturnPrincipal() {
    return this.returnPrincipal;
  }

  public FeeWaiverApplicationDTO setReturnPrincipal(double returnPrincipal) {
    this.returnPrincipal = returnPrincipal;
    setReturnPrincipalIsSet(true);
    return this;
  }

  public void unsetReturnPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field returnPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNPRINCIPAL_ISSET_ID);
  }

  public void setReturnPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNPRINCIPAL_ISSET_ID, value);
  }

  public double getRecAccrual() {
    return this.recAccrual;
  }

  public FeeWaiverApplicationDTO setRecAccrual(double recAccrual) {
    this.recAccrual = recAccrual;
    setRecAccrualIsSet(true);
    return this;
  }

  public void unsetRecAccrual() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECACCRUAL_ISSET_ID);
  }

  /** Returns true if field recAccrual is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccrual() {
    return EncodingUtils.testBit(__isset_bitfield, __RECACCRUAL_ISSET_ID);
  }

  public void setRecAccrualIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECACCRUAL_ISSET_ID, value);
  }

  public double getDerAccrual() {
    return this.derAccrual;
  }

  public FeeWaiverApplicationDTO setDerAccrual(double derAccrual) {
    this.derAccrual = derAccrual;
    setDerAccrualIsSet(true);
    return this;
  }

  public void unsetDerAccrual() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERACCRUAL_ISSET_ID);
  }

  /** Returns true if field derAccrual is set (has been assigned a value) and false otherwise */
  public boolean isSetDerAccrual() {
    return EncodingUtils.testBit(__isset_bitfield, __DERACCRUAL_ISSET_ID);
  }

  public void setDerAccrualIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERACCRUAL_ISSET_ID, value);
  }

  public double getDerLastAccrual() {
    return this.derLastAccrual;
  }

  public FeeWaiverApplicationDTO setDerLastAccrual(double derLastAccrual) {
    this.derLastAccrual = derLastAccrual;
    setDerLastAccrualIsSet(true);
    return this;
  }

  public void unsetDerLastAccrual() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERLASTACCRUAL_ISSET_ID);
  }

  /** Returns true if field derLastAccrual is set (has been assigned a value) and false otherwise */
  public boolean isSetDerLastAccrual() {
    return EncodingUtils.testBit(__isset_bitfield, __DERLASTACCRUAL_ISSET_ID);
  }

  public void setDerLastAccrualIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERLASTACCRUAL_ISSET_ID, value);
  }

  public double getRecManageFee() {
    return this.recManageFee;
  }

  public FeeWaiverApplicationDTO setRecManageFee(double recManageFee) {
    this.recManageFee = recManageFee;
    setRecManageFeeIsSet(true);
    return this;
  }

  public void unsetRecManageFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECMANAGEFEE_ISSET_ID);
  }

  /** Returns true if field recManageFee is set (has been assigned a value) and false otherwise */
  public boolean isSetRecManageFee() {
    return EncodingUtils.testBit(__isset_bitfield, __RECMANAGEFEE_ISSET_ID);
  }

  public void setRecManageFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECMANAGEFEE_ISSET_ID, value);
  }

  public double getDerManageFee() {
    return this.derManageFee;
  }

  public FeeWaiverApplicationDTO setDerManageFee(double derManageFee) {
    this.derManageFee = derManageFee;
    setDerManageFeeIsSet(true);
    return this;
  }

  public void unsetDerManageFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERMANAGEFEE_ISSET_ID);
  }

  /** Returns true if field derManageFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDerManageFee() {
    return EncodingUtils.testBit(__isset_bitfield, __DERMANAGEFEE_ISSET_ID);
  }

  public void setDerManageFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERMANAGEFEE_ISSET_ID, value);
  }

  public double getDerLastManageFee() {
    return this.derLastManageFee;
  }

  public FeeWaiverApplicationDTO setDerLastManageFee(double derLastManageFee) {
    this.derLastManageFee = derLastManageFee;
    setDerLastManageFeeIsSet(true);
    return this;
  }

  public void unsetDerLastManageFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERLASTMANAGEFEE_ISSET_ID);
  }

  /** Returns true if field derLastManageFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDerLastManageFee() {
    return EncodingUtils.testBit(__isset_bitfield, __DERLASTMANAGEFEE_ISSET_ID);
  }

  public void setDerLastManageFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERLASTMANAGEFEE_ISSET_ID, value);
  }

  public double getRecElseFee() {
    return this.recElseFee;
  }

  public FeeWaiverApplicationDTO setRecElseFee(double recElseFee) {
    this.recElseFee = recElseFee;
    setRecElseFeeIsSet(true);
    return this;
  }

  public void unsetRecElseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECELSEFEE_ISSET_ID);
  }

  /** Returns true if field recElseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetRecElseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __RECELSEFEE_ISSET_ID);
  }

  public void setRecElseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECELSEFEE_ISSET_ID, value);
  }

  public double getDerElseFee() {
    return this.derElseFee;
  }

  public FeeWaiverApplicationDTO setDerElseFee(double derElseFee) {
    this.derElseFee = derElseFee;
    setDerElseFeeIsSet(true);
    return this;
  }

  public void unsetDerElseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERELSEFEE_ISSET_ID);
  }

  /** Returns true if field derElseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDerElseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __DERELSEFEE_ISSET_ID);
  }

  public void setDerElseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERELSEFEE_ISSET_ID, value);
  }

  public double getDerLastElseFee() {
    return this.derLastElseFee;
  }

  public FeeWaiverApplicationDTO setDerLastElseFee(double derLastElseFee) {
    this.derLastElseFee = derLastElseFee;
    setDerLastElseFeeIsSet(true);
    return this;
  }

  public void unsetDerLastElseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERLASTELSEFEE_ISSET_ID);
  }

  /** Returns true if field derLastElseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDerLastElseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __DERLASTELSEFEE_ISSET_ID);
  }

  public void setDerLastElseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERLASTELSEFEE_ISSET_ID, value);
  }

  public double getRecOveAcc() {
    return this.recOveAcc;
  }

  public FeeWaiverApplicationDTO setRecOveAcc(double recOveAcc) {
    this.recOveAcc = recOveAcc;
    setRecOveAccIsSet(true);
    return this;
  }

  public void unsetRecOveAcc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOVEACC_ISSET_ID);
  }

  /** Returns true if field recOveAcc is set (has been assigned a value) and false otherwise */
  public boolean isSetRecOveAcc() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOVEACC_ISSET_ID);
  }

  public void setRecOveAccIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOVEACC_ISSET_ID, value);
  }

  public double getDerOveAcc() {
    return this.derOveAcc;
  }

  public FeeWaiverApplicationDTO setDerOveAcc(double derOveAcc) {
    this.derOveAcc = derOveAcc;
    setDerOveAccIsSet(true);
    return this;
  }

  public void unsetDerOveAcc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEROVEACC_ISSET_ID);
  }

  /** Returns true if field derOveAcc is set (has been assigned a value) and false otherwise */
  public boolean isSetDerOveAcc() {
    return EncodingUtils.testBit(__isset_bitfield, __DEROVEACC_ISSET_ID);
  }

  public void setDerOveAccIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEROVEACC_ISSET_ID, value);
  }

  public double getDerLastOveAcc() {
    return this.derLastOveAcc;
  }

  public FeeWaiverApplicationDTO setDerLastOveAcc(double derLastOveAcc) {
    this.derLastOveAcc = derLastOveAcc;
    setDerLastOveAccIsSet(true);
    return this;
  }

  public void unsetDerLastOveAcc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERLASTOVEACC_ISSET_ID);
  }

  /** Returns true if field derLastOveAcc is set (has been assigned a value) and false otherwise */
  public boolean isSetDerLastOveAcc() {
    return EncodingUtils.testBit(__isset_bitfield, __DERLASTOVEACC_ISSET_ID);
  }

  public void setDerLastOveAccIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERLASTOVEACC_ISSET_ID, value);
  }

  public double getRecLateCharge() {
    return this.recLateCharge;
  }

  public FeeWaiverApplicationDTO setRecLateCharge(double recLateCharge) {
    this.recLateCharge = recLateCharge;
    setRecLateChargeIsSet(true);
    return this;
  }

  public void unsetRecLateCharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECLATECHARGE_ISSET_ID);
  }

  /** Returns true if field recLateCharge is set (has been assigned a value) and false otherwise */
  public boolean isSetRecLateCharge() {
    return EncodingUtils.testBit(__isset_bitfield, __RECLATECHARGE_ISSET_ID);
  }

  public void setRecLateChargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECLATECHARGE_ISSET_ID, value);
  }

  public double getDerLateCharge() {
    return this.derLateCharge;
  }

  public FeeWaiverApplicationDTO setDerLateCharge(double derLateCharge) {
    this.derLateCharge = derLateCharge;
    setDerLateChargeIsSet(true);
    return this;
  }

  public void unsetDerLateCharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERLATECHARGE_ISSET_ID);
  }

  /** Returns true if field derLateCharge is set (has been assigned a value) and false otherwise */
  public boolean isSetDerLateCharge() {
    return EncodingUtils.testBit(__isset_bitfield, __DERLATECHARGE_ISSET_ID);
  }

  public void setDerLateChargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERLATECHARGE_ISSET_ID, value);
  }

  public double getDerLastLateCharge() {
    return this.derLastLateCharge;
  }

  public FeeWaiverApplicationDTO setDerLastLateCharge(double derLastLateCharge) {
    this.derLastLateCharge = derLastLateCharge;
    setDerLastLateChargeIsSet(true);
    return this;
  }

  public void unsetDerLastLateCharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERLASTLATECHARGE_ISSET_ID);
  }

  /** Returns true if field derLastLateCharge is set (has been assigned a value) and false otherwise */
  public boolean isSetDerLastLateCharge() {
    return EncodingUtils.testBit(__isset_bitfield, __DERLASTLATECHARGE_ISSET_ID);
  }

  public void setDerLastLateChargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERLASTLATECHARGE_ISSET_ID, value);
  }

  public double getRecTotal() {
    return this.recTotal;
  }

  public FeeWaiverApplicationDTO setRecTotal(double recTotal) {
    this.recTotal = recTotal;
    setRecTotalIsSet(true);
    return this;
  }

  public void unsetRecTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECTOTAL_ISSET_ID);
  }

  /** Returns true if field recTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetRecTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __RECTOTAL_ISSET_ID);
  }

  public void setRecTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECTOTAL_ISSET_ID, value);
  }

  public double getDerTotal() {
    return this.derTotal;
  }

  public FeeWaiverApplicationDTO setDerTotal(double derTotal) {
    this.derTotal = derTotal;
    setDerTotalIsSet(true);
    return this;
  }

  public void unsetDerTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERTOTAL_ISSET_ID);
  }

  /** Returns true if field derTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetDerTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __DERTOTAL_ISSET_ID);
  }

  public void setDerTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERTOTAL_ISSET_ID, value);
  }

  public double getDerLastTotal() {
    return this.derLastTotal;
  }

  public FeeWaiverApplicationDTO setDerLastTotal(double derLastTotal) {
    this.derLastTotal = derLastTotal;
    setDerLastTotalIsSet(true);
    return this;
  }

  public void unsetDerLastTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DERLASTTOTAL_ISSET_ID);
  }

  /** Returns true if field derLastTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetDerLastTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __DERLASTTOTAL_ISSET_ID);
  }

  public void setDerLastTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DERLASTTOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case REPAY_ID:
      if (value == null) {
        unsetRepayId();
      } else {
        setRepayId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((String)value);
      }
      break;

    case WAIVER_DTTM:
      if (value == null) {
        unsetWaiverDttm();
      } else {
        setWaiverDttm((String)value);
      }
      break;

    case PMUSER_NAME:
      if (value == null) {
        unsetPmuserName();
      } else {
        setPmuserName((String)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case MONTH_LOAN_MGR:
      if (value == null) {
        unsetMonthLoanMgr();
      } else {
        setMonthLoanMgr((Double)value);
      }
      break;

    case LAST_RECEIVE_DT:
      if (value == null) {
        unsetLastReceiveDt();
      } else {
        setLastReceiveDt((String)value);
      }
      break;

    case WAIVER_REASON:
      if (value == null) {
        unsetWaiverReason();
      } else {
        setWaiverReason((String)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((String)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case LOOKUP_VAL:
      if (value == null) {
        unsetLookupVal();
      } else {
        setLookupVal((String)value);
      }
      break;

    case RETURN_PRINCIPAL:
      if (value == null) {
        unsetReturnPrincipal();
      } else {
        setReturnPrincipal((Double)value);
      }
      break;

    case REC_ACCRUAL:
      if (value == null) {
        unsetRecAccrual();
      } else {
        setRecAccrual((Double)value);
      }
      break;

    case DER_ACCRUAL:
      if (value == null) {
        unsetDerAccrual();
      } else {
        setDerAccrual((Double)value);
      }
      break;

    case DER_LAST_ACCRUAL:
      if (value == null) {
        unsetDerLastAccrual();
      } else {
        setDerLastAccrual((Double)value);
      }
      break;

    case REC_MANAGE_FEE:
      if (value == null) {
        unsetRecManageFee();
      } else {
        setRecManageFee((Double)value);
      }
      break;

    case DER_MANAGE_FEE:
      if (value == null) {
        unsetDerManageFee();
      } else {
        setDerManageFee((Double)value);
      }
      break;

    case DER_LAST_MANAGE_FEE:
      if (value == null) {
        unsetDerLastManageFee();
      } else {
        setDerLastManageFee((Double)value);
      }
      break;

    case REC_ELSE_FEE:
      if (value == null) {
        unsetRecElseFee();
      } else {
        setRecElseFee((Double)value);
      }
      break;

    case DER_ELSE_FEE:
      if (value == null) {
        unsetDerElseFee();
      } else {
        setDerElseFee((Double)value);
      }
      break;

    case DER_LAST_ELSE_FEE:
      if (value == null) {
        unsetDerLastElseFee();
      } else {
        setDerLastElseFee((Double)value);
      }
      break;

    case REC_OVE_ACC:
      if (value == null) {
        unsetRecOveAcc();
      } else {
        setRecOveAcc((Double)value);
      }
      break;

    case DER_OVE_ACC:
      if (value == null) {
        unsetDerOveAcc();
      } else {
        setDerOveAcc((Double)value);
      }
      break;

    case DER_LAST_OVE_ACC:
      if (value == null) {
        unsetDerLastOveAcc();
      } else {
        setDerLastOveAcc((Double)value);
      }
      break;

    case REC_LATE_CHARGE:
      if (value == null) {
        unsetRecLateCharge();
      } else {
        setRecLateCharge((Double)value);
      }
      break;

    case DER_LATE_CHARGE:
      if (value == null) {
        unsetDerLateCharge();
      } else {
        setDerLateCharge((Double)value);
      }
      break;

    case DER_LAST_LATE_CHARGE:
      if (value == null) {
        unsetDerLastLateCharge();
      } else {
        setDerLastLateCharge((Double)value);
      }
      break;

    case REC_TOTAL:
      if (value == null) {
        unsetRecTotal();
      } else {
        setRecTotal((Double)value);
      }
      break;

    case DER_TOTAL:
      if (value == null) {
        unsetDerTotal();
      } else {
        setDerTotal((Double)value);
      }
      break;

    case DER_LAST_TOTAL:
      if (value == null) {
        unsetDerLastTotal();
      } else {
        setDerLastTotal((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case REPAY_ID:
      return Integer.valueOf(getRepayId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case REQUEST_STATUS:
      return getRequestStatus();

    case WAIVER_DTTM:
      return getWaiverDttm();

    case PMUSER_NAME:
      return getPmuserName();

    case CUS_NAME:
      return getCusName();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case CONTRACT_NO:
      return getContractNo();

    case MONTH_LOAN_MGR:
      return Double.valueOf(getMonthLoanMgr());

    case LAST_RECEIVE_DT:
      return getLastReceiveDt();

    case WAIVER_REASON:
      return getWaiverReason();

    case REPAY_CYCLE:
      return getRepayCycle();

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case LOOKUP_VAL:
      return getLookupVal();

    case RETURN_PRINCIPAL:
      return Double.valueOf(getReturnPrincipal());

    case REC_ACCRUAL:
      return Double.valueOf(getRecAccrual());

    case DER_ACCRUAL:
      return Double.valueOf(getDerAccrual());

    case DER_LAST_ACCRUAL:
      return Double.valueOf(getDerLastAccrual());

    case REC_MANAGE_FEE:
      return Double.valueOf(getRecManageFee());

    case DER_MANAGE_FEE:
      return Double.valueOf(getDerManageFee());

    case DER_LAST_MANAGE_FEE:
      return Double.valueOf(getDerLastManageFee());

    case REC_ELSE_FEE:
      return Double.valueOf(getRecElseFee());

    case DER_ELSE_FEE:
      return Double.valueOf(getDerElseFee());

    case DER_LAST_ELSE_FEE:
      return Double.valueOf(getDerLastElseFee());

    case REC_OVE_ACC:
      return Double.valueOf(getRecOveAcc());

    case DER_OVE_ACC:
      return Double.valueOf(getDerOveAcc());

    case DER_LAST_OVE_ACC:
      return Double.valueOf(getDerLastOveAcc());

    case REC_LATE_CHARGE:
      return Double.valueOf(getRecLateCharge());

    case DER_LATE_CHARGE:
      return Double.valueOf(getDerLateCharge());

    case DER_LAST_LATE_CHARGE:
      return Double.valueOf(getDerLastLateCharge());

    case REC_TOTAL:
      return Double.valueOf(getRecTotal());

    case DER_TOTAL:
      return Double.valueOf(getDerTotal());

    case DER_LAST_TOTAL:
      return Double.valueOf(getDerLastTotal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case REPAY_ID:
      return isSetRepayId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case WAIVER_DTTM:
      return isSetWaiverDttm();
    case PMUSER_NAME:
      return isSetPmuserName();
    case CUS_NAME:
      return isSetCusName();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case CONTRACT_NO:
      return isSetContractNo();
    case MONTH_LOAN_MGR:
      return isSetMonthLoanMgr();
    case LAST_RECEIVE_DT:
      return isSetLastReceiveDt();
    case WAIVER_REASON:
      return isSetWaiverReason();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case LOOKUP_VAL:
      return isSetLookupVal();
    case RETURN_PRINCIPAL:
      return isSetReturnPrincipal();
    case REC_ACCRUAL:
      return isSetRecAccrual();
    case DER_ACCRUAL:
      return isSetDerAccrual();
    case DER_LAST_ACCRUAL:
      return isSetDerLastAccrual();
    case REC_MANAGE_FEE:
      return isSetRecManageFee();
    case DER_MANAGE_FEE:
      return isSetDerManageFee();
    case DER_LAST_MANAGE_FEE:
      return isSetDerLastManageFee();
    case REC_ELSE_FEE:
      return isSetRecElseFee();
    case DER_ELSE_FEE:
      return isSetDerElseFee();
    case DER_LAST_ELSE_FEE:
      return isSetDerLastElseFee();
    case REC_OVE_ACC:
      return isSetRecOveAcc();
    case DER_OVE_ACC:
      return isSetDerOveAcc();
    case DER_LAST_OVE_ACC:
      return isSetDerLastOveAcc();
    case REC_LATE_CHARGE:
      return isSetRecLateCharge();
    case DER_LATE_CHARGE:
      return isSetDerLateCharge();
    case DER_LAST_LATE_CHARGE:
      return isSetDerLastLateCharge();
    case REC_TOTAL:
      return isSetRecTotal();
    case DER_TOTAL:
      return isSetDerTotal();
    case DER_LAST_TOTAL:
      return isSetDerLastTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeeWaiverApplicationDTO)
      return this.equals((FeeWaiverApplicationDTO)that);
    return false;
  }

  public boolean equals(FeeWaiverApplicationDTO that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_repayId = true;
    boolean that_present_repayId = true;
    if (this_present_repayId || that_present_repayId) {
      if (!(this_present_repayId && that_present_repayId))
        return false;
      if (this.repayId != that.repayId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_requestStatus = true && this.isSetRequestStatus();
    boolean that_present_requestStatus = true && that.isSetRequestStatus();
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (!this.requestStatus.equals(that.requestStatus))
        return false;
    }

    boolean this_present_waiverDttm = true && this.isSetWaiverDttm();
    boolean that_present_waiverDttm = true && that.isSetWaiverDttm();
    if (this_present_waiverDttm || that_present_waiverDttm) {
      if (!(this_present_waiverDttm && that_present_waiverDttm))
        return false;
      if (!this.waiverDttm.equals(that.waiverDttm))
        return false;
    }

    boolean this_present_pmuserName = true && this.isSetPmuserName();
    boolean that_present_pmuserName = true && that.isSetPmuserName();
    if (this_present_pmuserName || that_present_pmuserName) {
      if (!(this_present_pmuserName && that_present_pmuserName))
        return false;
      if (!this.pmuserName.equals(that.pmuserName))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_monthLoanMgr = true;
    boolean that_present_monthLoanMgr = true;
    if (this_present_monthLoanMgr || that_present_monthLoanMgr) {
      if (!(this_present_monthLoanMgr && that_present_monthLoanMgr))
        return false;
      if (this.monthLoanMgr != that.monthLoanMgr)
        return false;
    }

    boolean this_present_lastReceiveDt = true && this.isSetLastReceiveDt();
    boolean that_present_lastReceiveDt = true && that.isSetLastReceiveDt();
    if (this_present_lastReceiveDt || that_present_lastReceiveDt) {
      if (!(this_present_lastReceiveDt && that_present_lastReceiveDt))
        return false;
      if (!this.lastReceiveDt.equals(that.lastReceiveDt))
        return false;
    }

    boolean this_present_waiverReason = true && this.isSetWaiverReason();
    boolean that_present_waiverReason = true && that.isSetWaiverReason();
    if (this_present_waiverReason || that_present_waiverReason) {
      if (!(this_present_waiverReason && that_present_waiverReason))
        return false;
      if (!this.waiverReason.equals(that.waiverReason))
        return false;
    }

    boolean this_present_repayCycle = true && this.isSetRepayCycle();
    boolean that_present_repayCycle = true && that.isSetRepayCycle();
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (!this.repayCycle.equals(that.repayCycle))
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_lookupVal = true && this.isSetLookupVal();
    boolean that_present_lookupVal = true && that.isSetLookupVal();
    if (this_present_lookupVal || that_present_lookupVal) {
      if (!(this_present_lookupVal && that_present_lookupVal))
        return false;
      if (!this.lookupVal.equals(that.lookupVal))
        return false;
    }

    boolean this_present_returnPrincipal = true;
    boolean that_present_returnPrincipal = true;
    if (this_present_returnPrincipal || that_present_returnPrincipal) {
      if (!(this_present_returnPrincipal && that_present_returnPrincipal))
        return false;
      if (this.returnPrincipal != that.returnPrincipal)
        return false;
    }

    boolean this_present_recAccrual = true;
    boolean that_present_recAccrual = true;
    if (this_present_recAccrual || that_present_recAccrual) {
      if (!(this_present_recAccrual && that_present_recAccrual))
        return false;
      if (this.recAccrual != that.recAccrual)
        return false;
    }

    boolean this_present_derAccrual = true;
    boolean that_present_derAccrual = true;
    if (this_present_derAccrual || that_present_derAccrual) {
      if (!(this_present_derAccrual && that_present_derAccrual))
        return false;
      if (this.derAccrual != that.derAccrual)
        return false;
    }

    boolean this_present_derLastAccrual = true;
    boolean that_present_derLastAccrual = true;
    if (this_present_derLastAccrual || that_present_derLastAccrual) {
      if (!(this_present_derLastAccrual && that_present_derLastAccrual))
        return false;
      if (this.derLastAccrual != that.derLastAccrual)
        return false;
    }

    boolean this_present_recManageFee = true;
    boolean that_present_recManageFee = true;
    if (this_present_recManageFee || that_present_recManageFee) {
      if (!(this_present_recManageFee && that_present_recManageFee))
        return false;
      if (this.recManageFee != that.recManageFee)
        return false;
    }

    boolean this_present_derManageFee = true;
    boolean that_present_derManageFee = true;
    if (this_present_derManageFee || that_present_derManageFee) {
      if (!(this_present_derManageFee && that_present_derManageFee))
        return false;
      if (this.derManageFee != that.derManageFee)
        return false;
    }

    boolean this_present_derLastManageFee = true;
    boolean that_present_derLastManageFee = true;
    if (this_present_derLastManageFee || that_present_derLastManageFee) {
      if (!(this_present_derLastManageFee && that_present_derLastManageFee))
        return false;
      if (this.derLastManageFee != that.derLastManageFee)
        return false;
    }

    boolean this_present_recElseFee = true;
    boolean that_present_recElseFee = true;
    if (this_present_recElseFee || that_present_recElseFee) {
      if (!(this_present_recElseFee && that_present_recElseFee))
        return false;
      if (this.recElseFee != that.recElseFee)
        return false;
    }

    boolean this_present_derElseFee = true;
    boolean that_present_derElseFee = true;
    if (this_present_derElseFee || that_present_derElseFee) {
      if (!(this_present_derElseFee && that_present_derElseFee))
        return false;
      if (this.derElseFee != that.derElseFee)
        return false;
    }

    boolean this_present_derLastElseFee = true;
    boolean that_present_derLastElseFee = true;
    if (this_present_derLastElseFee || that_present_derLastElseFee) {
      if (!(this_present_derLastElseFee && that_present_derLastElseFee))
        return false;
      if (this.derLastElseFee != that.derLastElseFee)
        return false;
    }

    boolean this_present_recOveAcc = true;
    boolean that_present_recOveAcc = true;
    if (this_present_recOveAcc || that_present_recOveAcc) {
      if (!(this_present_recOveAcc && that_present_recOveAcc))
        return false;
      if (this.recOveAcc != that.recOveAcc)
        return false;
    }

    boolean this_present_derOveAcc = true;
    boolean that_present_derOveAcc = true;
    if (this_present_derOveAcc || that_present_derOveAcc) {
      if (!(this_present_derOveAcc && that_present_derOveAcc))
        return false;
      if (this.derOveAcc != that.derOveAcc)
        return false;
    }

    boolean this_present_derLastOveAcc = true;
    boolean that_present_derLastOveAcc = true;
    if (this_present_derLastOveAcc || that_present_derLastOveAcc) {
      if (!(this_present_derLastOveAcc && that_present_derLastOveAcc))
        return false;
      if (this.derLastOveAcc != that.derLastOveAcc)
        return false;
    }

    boolean this_present_recLateCharge = true;
    boolean that_present_recLateCharge = true;
    if (this_present_recLateCharge || that_present_recLateCharge) {
      if (!(this_present_recLateCharge && that_present_recLateCharge))
        return false;
      if (this.recLateCharge != that.recLateCharge)
        return false;
    }

    boolean this_present_derLateCharge = true;
    boolean that_present_derLateCharge = true;
    if (this_present_derLateCharge || that_present_derLateCharge) {
      if (!(this_present_derLateCharge && that_present_derLateCharge))
        return false;
      if (this.derLateCharge != that.derLateCharge)
        return false;
    }

    boolean this_present_derLastLateCharge = true;
    boolean that_present_derLastLateCharge = true;
    if (this_present_derLastLateCharge || that_present_derLastLateCharge) {
      if (!(this_present_derLastLateCharge && that_present_derLastLateCharge))
        return false;
      if (this.derLastLateCharge != that.derLastLateCharge)
        return false;
    }

    boolean this_present_recTotal = true;
    boolean that_present_recTotal = true;
    if (this_present_recTotal || that_present_recTotal) {
      if (!(this_present_recTotal && that_present_recTotal))
        return false;
      if (this.recTotal != that.recTotal)
        return false;
    }

    boolean this_present_derTotal = true;
    boolean that_present_derTotal = true;
    if (this_present_derTotal || that_present_derTotal) {
      if (!(this_present_derTotal && that_present_derTotal))
        return false;
      if (this.derTotal != that.derTotal)
        return false;
    }

    boolean this_present_derLastTotal = true;
    boolean that_present_derLastTotal = true;
    if (this_present_derLastTotal || that_present_derLastTotal) {
      if (!(this_present_derLastTotal && that_present_derLastTotal))
        return false;
      if (this.derLastTotal != that.derLastTotal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_repayId = true;
    list.add(present_repayId);
    if (present_repayId)
      list.add(repayId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_requestStatus = true && (isSetRequestStatus());
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_waiverDttm = true && (isSetWaiverDttm());
    list.add(present_waiverDttm);
    if (present_waiverDttm)
      list.add(waiverDttm);

    boolean present_pmuserName = true && (isSetPmuserName());
    list.add(present_pmuserName);
    if (present_pmuserName)
      list.add(pmuserName);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_contractNo = true && (isSetContractNo());
    list.add(present_contractNo);
    if (present_contractNo)
      list.add(contractNo);

    boolean present_monthLoanMgr = true;
    list.add(present_monthLoanMgr);
    if (present_monthLoanMgr)
      list.add(monthLoanMgr);

    boolean present_lastReceiveDt = true && (isSetLastReceiveDt());
    list.add(present_lastReceiveDt);
    if (present_lastReceiveDt)
      list.add(lastReceiveDt);

    boolean present_waiverReason = true && (isSetWaiverReason());
    list.add(present_waiverReason);
    if (present_waiverReason)
      list.add(waiverReason);

    boolean present_repayCycle = true && (isSetRepayCycle());
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_lookupVal = true && (isSetLookupVal());
    list.add(present_lookupVal);
    if (present_lookupVal)
      list.add(lookupVal);

    boolean present_returnPrincipal = true;
    list.add(present_returnPrincipal);
    if (present_returnPrincipal)
      list.add(returnPrincipal);

    boolean present_recAccrual = true;
    list.add(present_recAccrual);
    if (present_recAccrual)
      list.add(recAccrual);

    boolean present_derAccrual = true;
    list.add(present_derAccrual);
    if (present_derAccrual)
      list.add(derAccrual);

    boolean present_derLastAccrual = true;
    list.add(present_derLastAccrual);
    if (present_derLastAccrual)
      list.add(derLastAccrual);

    boolean present_recManageFee = true;
    list.add(present_recManageFee);
    if (present_recManageFee)
      list.add(recManageFee);

    boolean present_derManageFee = true;
    list.add(present_derManageFee);
    if (present_derManageFee)
      list.add(derManageFee);

    boolean present_derLastManageFee = true;
    list.add(present_derLastManageFee);
    if (present_derLastManageFee)
      list.add(derLastManageFee);

    boolean present_recElseFee = true;
    list.add(present_recElseFee);
    if (present_recElseFee)
      list.add(recElseFee);

    boolean present_derElseFee = true;
    list.add(present_derElseFee);
    if (present_derElseFee)
      list.add(derElseFee);

    boolean present_derLastElseFee = true;
    list.add(present_derLastElseFee);
    if (present_derLastElseFee)
      list.add(derLastElseFee);

    boolean present_recOveAcc = true;
    list.add(present_recOveAcc);
    if (present_recOveAcc)
      list.add(recOveAcc);

    boolean present_derOveAcc = true;
    list.add(present_derOveAcc);
    if (present_derOveAcc)
      list.add(derOveAcc);

    boolean present_derLastOveAcc = true;
    list.add(present_derLastOveAcc);
    if (present_derLastOveAcc)
      list.add(derLastOveAcc);

    boolean present_recLateCharge = true;
    list.add(present_recLateCharge);
    if (present_recLateCharge)
      list.add(recLateCharge);

    boolean present_derLateCharge = true;
    list.add(present_derLateCharge);
    if (present_derLateCharge)
      list.add(derLateCharge);

    boolean present_derLastLateCharge = true;
    list.add(present_derLastLateCharge);
    if (present_derLastLateCharge)
      list.add(derLastLateCharge);

    boolean present_recTotal = true;
    list.add(present_recTotal);
    if (present_recTotal)
      list.add(recTotal);

    boolean present_derTotal = true;
    list.add(present_derTotal);
    if (present_derTotal)
      list.add(derTotal);

    boolean present_derLastTotal = true;
    list.add(present_derLastTotal);
    if (present_derLastTotal)
      list.add(derLastTotal);

    return list.hashCode();
  }

  @Override
  public int compareTo(FeeWaiverApplicationDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaiverDttm()).compareTo(other.isSetWaiverDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaiverDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waiverDttm, other.waiverDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmuserName()).compareTo(other.isSetPmuserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmuserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmuserName, other.pmuserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanMgr()).compareTo(other.isSetMonthLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanMgr, other.monthLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastReceiveDt()).compareTo(other.isSetLastReceiveDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReceiveDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastReceiveDt, other.lastReceiveDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaiverReason()).compareTo(other.isSetWaiverReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaiverReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waiverReason, other.waiverReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLookupVal()).compareTo(other.isSetLookupVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLookupVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupVal, other.lookupVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnPrincipal()).compareTo(other.isSetReturnPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnPrincipal, other.returnPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccrual()).compareTo(other.isSetRecAccrual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccrual()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccrual, other.recAccrual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerAccrual()).compareTo(other.isSetDerAccrual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerAccrual()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derAccrual, other.derAccrual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerLastAccrual()).compareTo(other.isSetDerLastAccrual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerLastAccrual()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derLastAccrual, other.derLastAccrual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecManageFee()).compareTo(other.isSetRecManageFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecManageFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recManageFee, other.recManageFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerManageFee()).compareTo(other.isSetDerManageFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerManageFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derManageFee, other.derManageFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerLastManageFee()).compareTo(other.isSetDerLastManageFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerLastManageFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derLastManageFee, other.derLastManageFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecElseFee()).compareTo(other.isSetRecElseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecElseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recElseFee, other.recElseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerElseFee()).compareTo(other.isSetDerElseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerElseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derElseFee, other.derElseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerLastElseFee()).compareTo(other.isSetDerLastElseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerLastElseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derLastElseFee, other.derLastElseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecOveAcc()).compareTo(other.isSetRecOveAcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecOveAcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recOveAcc, other.recOveAcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerOveAcc()).compareTo(other.isSetDerOveAcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerOveAcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derOveAcc, other.derOveAcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerLastOveAcc()).compareTo(other.isSetDerLastOveAcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerLastOveAcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derLastOveAcc, other.derLastOveAcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecLateCharge()).compareTo(other.isSetRecLateCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecLateCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recLateCharge, other.recLateCharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerLateCharge()).compareTo(other.isSetDerLateCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerLateCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derLateCharge, other.derLateCharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerLastLateCharge()).compareTo(other.isSetDerLastLateCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerLastLateCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derLastLateCharge, other.derLastLateCharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecTotal()).compareTo(other.isSetRecTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recTotal, other.recTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerTotal()).compareTo(other.isSetDerTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derTotal, other.derTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDerLastTotal()).compareTo(other.isSetDerLastTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerLastTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derLastTotal, other.derLastTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeeWaiverApplicationDTO(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayId:");
    sb.append(this.repayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    if (this.requestStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waiverDttm:");
    if (this.waiverDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.waiverDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmuserName:");
    if (this.pmuserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmuserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNo:");
    if (this.contractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanMgr:");
    sb.append(this.monthLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReceiveDt:");
    if (this.lastReceiveDt == null) {
      sb.append("null");
    } else {
      sb.append(this.lastReceiveDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waiverReason:");
    if (this.waiverReason == null) {
      sb.append("null");
    } else {
      sb.append(this.waiverReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    if (this.repayCycle == null) {
      sb.append("null");
    } else {
      sb.append(this.repayCycle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lookupVal:");
    if (this.lookupVal == null) {
      sb.append("null");
    } else {
      sb.append(this.lookupVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnPrincipal:");
    sb.append(this.returnPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccrual:");
    sb.append(this.recAccrual);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derAccrual:");
    sb.append(this.derAccrual);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derLastAccrual:");
    sb.append(this.derLastAccrual);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recManageFee:");
    sb.append(this.recManageFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derManageFee:");
    sb.append(this.derManageFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derLastManageFee:");
    sb.append(this.derLastManageFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recElseFee:");
    sb.append(this.recElseFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derElseFee:");
    sb.append(this.derElseFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derLastElseFee:");
    sb.append(this.derLastElseFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recOveAcc:");
    sb.append(this.recOveAcc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derOveAcc:");
    sb.append(this.derOveAcc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derLastOveAcc:");
    sb.append(this.derLastOveAcc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recLateCharge:");
    sb.append(this.recLateCharge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derLateCharge:");
    sb.append(this.derLateCharge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derLastLateCharge:");
    sb.append(this.derLastLateCharge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recTotal:");
    sb.append(this.recTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derTotal:");
    sb.append(this.derTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("derLastTotal:");
    sb.append(this.derLastTotal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeeWaiverApplicationDTOStandardSchemeFactory implements SchemeFactory {
    public FeeWaiverApplicationDTOStandardScheme getScheme() {
      return new FeeWaiverApplicationDTOStandardScheme();
    }
  }

  private static class FeeWaiverApplicationDTOStandardScheme extends StandardScheme<FeeWaiverApplicationDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FeeWaiverApplicationDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayId = iprot.readI32();
              struct.setRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestStatus = iprot.readString();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WAIVER_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.waiverDttm = iprot.readString();
              struct.setWaiverDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PMUSER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmuserName = iprot.readString();
              struct.setPmuserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MONTH_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanMgr = iprot.readDouble();
              struct.setMonthLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_RECEIVE_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastReceiveDt = iprot.readString();
              struct.setLastReceiveDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // WAIVER_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.waiverReason = iprot.readString();
              struct.setWaiverReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayCycle = iprot.readString();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOOKUP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lookupVal = iprot.readString();
              struct.setLookupValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RETURN_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.returnPrincipal = iprot.readDouble();
              struct.setReturnPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REC_ACCRUAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recAccrual = iprot.readDouble();
              struct.setRecAccrualIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DER_ACCRUAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derAccrual = iprot.readDouble();
              struct.setDerAccrualIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DER_LAST_ACCRUAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derLastAccrual = iprot.readDouble();
              struct.setDerLastAccrualIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REC_MANAGE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recManageFee = iprot.readDouble();
              struct.setRecManageFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DER_MANAGE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derManageFee = iprot.readDouble();
              struct.setDerManageFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DER_LAST_MANAGE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derLastManageFee = iprot.readDouble();
              struct.setDerLastManageFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // REC_ELSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recElseFee = iprot.readDouble();
              struct.setRecElseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DER_ELSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derElseFee = iprot.readDouble();
              struct.setDerElseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DER_LAST_ELSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derLastElseFee = iprot.readDouble();
              struct.setDerLastElseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // REC_OVE_ACC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recOveAcc = iprot.readDouble();
              struct.setRecOveAccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DER_OVE_ACC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derOveAcc = iprot.readDouble();
              struct.setDerOveAccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DER_LAST_OVE_ACC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derLastOveAcc = iprot.readDouble();
              struct.setDerLastOveAccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // REC_LATE_CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recLateCharge = iprot.readDouble();
              struct.setRecLateChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // DER_LATE_CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derLateCharge = iprot.readDouble();
              struct.setDerLateChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // DER_LAST_LATE_CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derLastLateCharge = iprot.readDouble();
              struct.setDerLastLateChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // REC_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recTotal = iprot.readDouble();
              struct.setRecTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // DER_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derTotal = iprot.readDouble();
              struct.setDerTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // DER_LAST_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.derLastTotal = iprot.readDouble();
              struct.setDerLastTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FeeWaiverApplicationDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.repayId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      if (struct.requestStatus != null) {
        oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
        oprot.writeString(struct.requestStatus);
        oprot.writeFieldEnd();
      }
      if (struct.waiverDttm != null) {
        oprot.writeFieldBegin(WAIVER_DTTM_FIELD_DESC);
        oprot.writeString(struct.waiverDttm);
        oprot.writeFieldEnd();
      }
      if (struct.pmuserName != null) {
        oprot.writeFieldBegin(PMUSER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmuserName);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      if (struct.contractNo != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTH_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanMgr);
      oprot.writeFieldEnd();
      if (struct.lastReceiveDt != null) {
        oprot.writeFieldBegin(LAST_RECEIVE_DT_FIELD_DESC);
        oprot.writeString(struct.lastReceiveDt);
        oprot.writeFieldEnd();
      }
      if (struct.waiverReason != null) {
        oprot.writeFieldBegin(WAIVER_REASON_FIELD_DESC);
        oprot.writeString(struct.waiverReason);
        oprot.writeFieldEnd();
      }
      if (struct.repayCycle != null) {
        oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
        oprot.writeString(struct.repayCycle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      if (struct.lookupVal != null) {
        oprot.writeFieldBegin(LOOKUP_VAL_FIELD_DESC);
        oprot.writeString(struct.lookupVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETURN_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.returnPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_ACCRUAL_FIELD_DESC);
      oprot.writeDouble(struct.recAccrual);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_ACCRUAL_FIELD_DESC);
      oprot.writeDouble(struct.derAccrual);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_LAST_ACCRUAL_FIELD_DESC);
      oprot.writeDouble(struct.derLastAccrual);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_MANAGE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.recManageFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_MANAGE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.derManageFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_LAST_MANAGE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.derLastManageFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_ELSE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.recElseFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_ELSE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.derElseFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_LAST_ELSE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.derLastElseFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_OVE_ACC_FIELD_DESC);
      oprot.writeDouble(struct.recOveAcc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_OVE_ACC_FIELD_DESC);
      oprot.writeDouble(struct.derOveAcc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_LAST_OVE_ACC_FIELD_DESC);
      oprot.writeDouble(struct.derLastOveAcc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_LATE_CHARGE_FIELD_DESC);
      oprot.writeDouble(struct.recLateCharge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_LATE_CHARGE_FIELD_DESC);
      oprot.writeDouble(struct.derLateCharge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_LAST_LATE_CHARGE_FIELD_DESC);
      oprot.writeDouble(struct.derLastLateCharge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.recTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.derTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DER_LAST_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.derLastTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeeWaiverApplicationDTOTupleSchemeFactory implements SchemeFactory {
    public FeeWaiverApplicationDTOTupleScheme getScheme() {
      return new FeeWaiverApplicationDTOTupleScheme();
    }
  }

  private static class FeeWaiverApplicationDTOTupleScheme extends TupleScheme<FeeWaiverApplicationDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeeWaiverApplicationDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetRepayId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(4);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(5);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(6);
      }
      if (struct.isSetWaiverDttm()) {
        optionals.set(7);
      }
      if (struct.isSetPmuserName()) {
        optionals.set(8);
      }
      if (struct.isSetCusName()) {
        optionals.set(9);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(10);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(11);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(12);
      }
      if (struct.isSetContractNo()) {
        optionals.set(13);
      }
      if (struct.isSetMonthLoanMgr()) {
        optionals.set(14);
      }
      if (struct.isSetLastReceiveDt()) {
        optionals.set(15);
      }
      if (struct.isSetWaiverReason()) {
        optionals.set(16);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(17);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(18);
      }
      if (struct.isSetLookupVal()) {
        optionals.set(19);
      }
      if (struct.isSetReturnPrincipal()) {
        optionals.set(20);
      }
      if (struct.isSetRecAccrual()) {
        optionals.set(21);
      }
      if (struct.isSetDerAccrual()) {
        optionals.set(22);
      }
      if (struct.isSetDerLastAccrual()) {
        optionals.set(23);
      }
      if (struct.isSetRecManageFee()) {
        optionals.set(24);
      }
      if (struct.isSetDerManageFee()) {
        optionals.set(25);
      }
      if (struct.isSetDerLastManageFee()) {
        optionals.set(26);
      }
      if (struct.isSetRecElseFee()) {
        optionals.set(27);
      }
      if (struct.isSetDerElseFee()) {
        optionals.set(28);
      }
      if (struct.isSetDerLastElseFee()) {
        optionals.set(29);
      }
      if (struct.isSetRecOveAcc()) {
        optionals.set(30);
      }
      if (struct.isSetDerOveAcc()) {
        optionals.set(31);
      }
      if (struct.isSetDerLastOveAcc()) {
        optionals.set(32);
      }
      if (struct.isSetRecLateCharge()) {
        optionals.set(33);
      }
      if (struct.isSetDerLateCharge()) {
        optionals.set(34);
      }
      if (struct.isSetDerLastLateCharge()) {
        optionals.set(35);
      }
      if (struct.isSetRecTotal()) {
        optionals.set(36);
      }
      if (struct.isSetDerTotal()) {
        optionals.set(37);
      }
      if (struct.isSetDerLastTotal()) {
        optionals.set(38);
      }
      oprot.writeBitSet(optionals, 39);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetRepayId()) {
        oprot.writeI32(struct.repayId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeString(struct.requestStatus);
      }
      if (struct.isSetWaiverDttm()) {
        oprot.writeString(struct.waiverDttm);
      }
      if (struct.isSetPmuserName()) {
        oprot.writeString(struct.pmuserName);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetMonthLoanMgr()) {
        oprot.writeDouble(struct.monthLoanMgr);
      }
      if (struct.isSetLastReceiveDt()) {
        oprot.writeString(struct.lastReceiveDt);
      }
      if (struct.isSetWaiverReason()) {
        oprot.writeString(struct.waiverReason);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeString(struct.repayCycle);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetLookupVal()) {
        oprot.writeString(struct.lookupVal);
      }
      if (struct.isSetReturnPrincipal()) {
        oprot.writeDouble(struct.returnPrincipal);
      }
      if (struct.isSetRecAccrual()) {
        oprot.writeDouble(struct.recAccrual);
      }
      if (struct.isSetDerAccrual()) {
        oprot.writeDouble(struct.derAccrual);
      }
      if (struct.isSetDerLastAccrual()) {
        oprot.writeDouble(struct.derLastAccrual);
      }
      if (struct.isSetRecManageFee()) {
        oprot.writeDouble(struct.recManageFee);
      }
      if (struct.isSetDerManageFee()) {
        oprot.writeDouble(struct.derManageFee);
      }
      if (struct.isSetDerLastManageFee()) {
        oprot.writeDouble(struct.derLastManageFee);
      }
      if (struct.isSetRecElseFee()) {
        oprot.writeDouble(struct.recElseFee);
      }
      if (struct.isSetDerElseFee()) {
        oprot.writeDouble(struct.derElseFee);
      }
      if (struct.isSetDerLastElseFee()) {
        oprot.writeDouble(struct.derLastElseFee);
      }
      if (struct.isSetRecOveAcc()) {
        oprot.writeDouble(struct.recOveAcc);
      }
      if (struct.isSetDerOveAcc()) {
        oprot.writeDouble(struct.derOveAcc);
      }
      if (struct.isSetDerLastOveAcc()) {
        oprot.writeDouble(struct.derLastOveAcc);
      }
      if (struct.isSetRecLateCharge()) {
        oprot.writeDouble(struct.recLateCharge);
      }
      if (struct.isSetDerLateCharge()) {
        oprot.writeDouble(struct.derLateCharge);
      }
      if (struct.isSetDerLastLateCharge()) {
        oprot.writeDouble(struct.derLastLateCharge);
      }
      if (struct.isSetRecTotal()) {
        oprot.writeDouble(struct.recTotal);
      }
      if (struct.isSetDerTotal()) {
        oprot.writeDouble(struct.derTotal);
      }
      if (struct.isSetDerLastTotal()) {
        oprot.writeDouble(struct.derLastTotal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeeWaiverApplicationDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(39);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.repayId = iprot.readI32();
        struct.setRepayIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestStatus = iprot.readString();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.waiverDttm = iprot.readString();
        struct.setWaiverDttmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pmuserName = iprot.readString();
        struct.setPmuserNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.monthLoanMgr = iprot.readDouble();
        struct.setMonthLoanMgrIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lastReceiveDt = iprot.readString();
        struct.setLastReceiveDtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.waiverReason = iprot.readString();
        struct.setWaiverReasonIsSet(true);
      }
      if (incoming.get(17)) {
        struct.repayCycle = iprot.readString();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(18)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(19)) {
        struct.lookupVal = iprot.readString();
        struct.setLookupValIsSet(true);
      }
      if (incoming.get(20)) {
        struct.returnPrincipal = iprot.readDouble();
        struct.setReturnPrincipalIsSet(true);
      }
      if (incoming.get(21)) {
        struct.recAccrual = iprot.readDouble();
        struct.setRecAccrualIsSet(true);
      }
      if (incoming.get(22)) {
        struct.derAccrual = iprot.readDouble();
        struct.setDerAccrualIsSet(true);
      }
      if (incoming.get(23)) {
        struct.derLastAccrual = iprot.readDouble();
        struct.setDerLastAccrualIsSet(true);
      }
      if (incoming.get(24)) {
        struct.recManageFee = iprot.readDouble();
        struct.setRecManageFeeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.derManageFee = iprot.readDouble();
        struct.setDerManageFeeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.derLastManageFee = iprot.readDouble();
        struct.setDerLastManageFeeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.recElseFee = iprot.readDouble();
        struct.setRecElseFeeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.derElseFee = iprot.readDouble();
        struct.setDerElseFeeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.derLastElseFee = iprot.readDouble();
        struct.setDerLastElseFeeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.recOveAcc = iprot.readDouble();
        struct.setRecOveAccIsSet(true);
      }
      if (incoming.get(31)) {
        struct.derOveAcc = iprot.readDouble();
        struct.setDerOveAccIsSet(true);
      }
      if (incoming.get(32)) {
        struct.derLastOveAcc = iprot.readDouble();
        struct.setDerLastOveAccIsSet(true);
      }
      if (incoming.get(33)) {
        struct.recLateCharge = iprot.readDouble();
        struct.setRecLateChargeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.derLateCharge = iprot.readDouble();
        struct.setDerLateChargeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.derLastLateCharge = iprot.readDouble();
        struct.setDerLastLateChargeIsSet(true);
      }
      if (incoming.get(36)) {
        struct.recTotal = iprot.readDouble();
        struct.setRecTotalIsSet(true);
      }
      if (incoming.get(37)) {
        struct.derTotal = iprot.readDouble();
        struct.setDerTotalIsSet(true);
      }
      if (incoming.get(38)) {
        struct.derLastTotal = iprot.readDouble();
        struct.setDerLastTotalIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-3")
public class CusCardInfo implements org.apache.thrift.TBase<CusCardInfo, CusCardInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CusCardInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusCardInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RECE_BANK_CARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("receBankCardName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RECE_BANK_CARD_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("receBankCardCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECE_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("receBankName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPAYMENT_BANK_CARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentBankCardName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REPAYMENT_BANK_CARD_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentBankCardCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REPAYMENT_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentBankName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusCardInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusCardInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int acctId; // required
  public String receBankCardName; // required
  public String receBankCardCode; // required
  public String receBankName; // required
  public String repaymentBankCardName; // required
  public String repaymentBankCardCode; // required
  public String repaymentBankName; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    ACCT_ID((short)3, "acctId"),
    RECE_BANK_CARD_NAME((short)4, "receBankCardName"),
    RECE_BANK_CARD_CODE((short)5, "receBankCardCode"),
    RECE_BANK_NAME((short)6, "receBankName"),
    REPAYMENT_BANK_CARD_NAME((short)7, "repaymentBankCardName"),
    REPAYMENT_BANK_CARD_CODE((short)8, "repaymentBankCardCode"),
    REPAYMENT_BANK_NAME((short)9, "repaymentBankName"),
    CREATE_DATE((short)10, "createDate"),
    CREATER_ID((short)11, "createrId"),
    UPDATE_ID((short)12, "updateId"),
    UPDATE_DATE((short)13, "updateDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // ACCT_ID
          return ACCT_ID;
        case 4: // RECE_BANK_CARD_NAME
          return RECE_BANK_CARD_NAME;
        case 5: // RECE_BANK_CARD_CODE
          return RECE_BANK_CARD_CODE;
        case 6: // RECE_BANK_NAME
          return RECE_BANK_NAME;
        case 7: // REPAYMENT_BANK_CARD_NAME
          return REPAYMENT_BANK_CARD_NAME;
        case 8: // REPAYMENT_BANK_CARD_CODE
          return REPAYMENT_BANK_CARD_CODE;
        case 9: // REPAYMENT_BANK_NAME
          return REPAYMENT_BANK_NAME;
        case 10: // CREATE_DATE
          return CREATE_DATE;
        case 11: // CREATER_ID
          return CREATER_ID;
        case 12: // UPDATE_ID
          return UPDATE_ID;
        case 13: // UPDATE_DATE
          return UPDATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __ACCTID_ISSET_ID = 2;
  private static final int __CREATERID_ISSET_ID = 3;
  private static final int __UPDATEID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECE_BANK_CARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("receBankCardName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_BANK_CARD_CODE, new org.apache.thrift.meta_data.FieldMetaData("receBankCardCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("receBankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_BANK_CARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("repaymentBankCardName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_BANK_CARD_CODE, new org.apache.thrift.meta_data.FieldMetaData("repaymentBankCardCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("repaymentBankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusCardInfo.class, metaDataMap);
  }

  public CusCardInfo() {
  }

  public CusCardInfo(
    int pid,
    int projectId,
    int acctId,
    String receBankCardName,
    String receBankCardCode,
    String receBankName,
    String repaymentBankCardName,
    String repaymentBankCardCode,
    String repaymentBankName,
    String createDate,
    int createrId,
    int updateId,
    String updateDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.receBankCardName = receBankCardName;
    this.receBankCardCode = receBankCardCode;
    this.receBankName = receBankName;
    this.repaymentBankCardName = repaymentBankCardName;
    this.repaymentBankCardCode = repaymentBankCardCode;
    this.repaymentBankName = repaymentBankName;
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusCardInfo(CusCardInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.acctId = other.acctId;
    if (other.isSetReceBankCardName()) {
      this.receBankCardName = other.receBankCardName;
    }
    if (other.isSetReceBankCardCode()) {
      this.receBankCardCode = other.receBankCardCode;
    }
    if (other.isSetReceBankName()) {
      this.receBankName = other.receBankName;
    }
    if (other.isSetRepaymentBankCardName()) {
      this.repaymentBankCardName = other.repaymentBankCardName;
    }
    if (other.isSetRepaymentBankCardCode()) {
      this.repaymentBankCardCode = other.repaymentBankCardCode;
    }
    if (other.isSetRepaymentBankName()) {
      this.repaymentBankName = other.repaymentBankName;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
  }

  public CusCardInfo deepCopy() {
    return new CusCardInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    this.receBankCardName = null;
    this.receBankCardCode = null;
    this.receBankName = null;
    this.repaymentBankCardName = null;
    this.repaymentBankCardCode = null;
    this.repaymentBankName = null;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusCardInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CusCardInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CusCardInfo setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public String getReceBankCardName() {
    return this.receBankCardName;
  }

  public CusCardInfo setReceBankCardName(String receBankCardName) {
    this.receBankCardName = receBankCardName;
    return this;
  }

  public void unsetReceBankCardName() {
    this.receBankCardName = null;
  }

  /** Returns true if field receBankCardName is set (has been assigned a value) and false otherwise */
  public boolean isSetReceBankCardName() {
    return this.receBankCardName != null;
  }

  public void setReceBankCardNameIsSet(boolean value) {
    if (!value) {
      this.receBankCardName = null;
    }
  }

  public String getReceBankCardCode() {
    return this.receBankCardCode;
  }

  public CusCardInfo setReceBankCardCode(String receBankCardCode) {
    this.receBankCardCode = receBankCardCode;
    return this;
  }

  public void unsetReceBankCardCode() {
    this.receBankCardCode = null;
  }

  /** Returns true if field receBankCardCode is set (has been assigned a value) and false otherwise */
  public boolean isSetReceBankCardCode() {
    return this.receBankCardCode != null;
  }

  public void setReceBankCardCodeIsSet(boolean value) {
    if (!value) {
      this.receBankCardCode = null;
    }
  }

  public String getReceBankName() {
    return this.receBankName;
  }

  public CusCardInfo setReceBankName(String receBankName) {
    this.receBankName = receBankName;
    return this;
  }

  public void unsetReceBankName() {
    this.receBankName = null;
  }

  /** Returns true if field receBankName is set (has been assigned a value) and false otherwise */
  public boolean isSetReceBankName() {
    return this.receBankName != null;
  }

  public void setReceBankNameIsSet(boolean value) {
    if (!value) {
      this.receBankName = null;
    }
  }

  public String getRepaymentBankCardName() {
    return this.repaymentBankCardName;
  }

  public CusCardInfo setRepaymentBankCardName(String repaymentBankCardName) {
    this.repaymentBankCardName = repaymentBankCardName;
    return this;
  }

  public void unsetRepaymentBankCardName() {
    this.repaymentBankCardName = null;
  }

  /** Returns true if field repaymentBankCardName is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentBankCardName() {
    return this.repaymentBankCardName != null;
  }

  public void setRepaymentBankCardNameIsSet(boolean value) {
    if (!value) {
      this.repaymentBankCardName = null;
    }
  }

  public String getRepaymentBankCardCode() {
    return this.repaymentBankCardCode;
  }

  public CusCardInfo setRepaymentBankCardCode(String repaymentBankCardCode) {
    this.repaymentBankCardCode = repaymentBankCardCode;
    return this;
  }

  public void unsetRepaymentBankCardCode() {
    this.repaymentBankCardCode = null;
  }

  /** Returns true if field repaymentBankCardCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentBankCardCode() {
    return this.repaymentBankCardCode != null;
  }

  public void setRepaymentBankCardCodeIsSet(boolean value) {
    if (!value) {
      this.repaymentBankCardCode = null;
    }
  }

  public String getRepaymentBankName() {
    return this.repaymentBankName;
  }

  public CusCardInfo setRepaymentBankName(String repaymentBankName) {
    this.repaymentBankName = repaymentBankName;
    return this;
  }

  public void unsetRepaymentBankName() {
    this.repaymentBankName = null;
  }

  /** Returns true if field repaymentBankName is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentBankName() {
    return this.repaymentBankName != null;
  }

  public void setRepaymentBankNameIsSet(boolean value) {
    if (!value) {
      this.repaymentBankName = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public CusCardInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public CusCardInfo setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public CusCardInfo setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public CusCardInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case RECE_BANK_CARD_NAME:
      if (value == null) {
        unsetReceBankCardName();
      } else {
        setReceBankCardName((String)value);
      }
      break;

    case RECE_BANK_CARD_CODE:
      if (value == null) {
        unsetReceBankCardCode();
      } else {
        setReceBankCardCode((String)value);
      }
      break;

    case RECE_BANK_NAME:
      if (value == null) {
        unsetReceBankName();
      } else {
        setReceBankName((String)value);
      }
      break;

    case REPAYMENT_BANK_CARD_NAME:
      if (value == null) {
        unsetRepaymentBankCardName();
      } else {
        setRepaymentBankCardName((String)value);
      }
      break;

    case REPAYMENT_BANK_CARD_CODE:
      if (value == null) {
        unsetRepaymentBankCardCode();
      } else {
        setRepaymentBankCardCode((String)value);
      }
      break;

    case REPAYMENT_BANK_NAME:
      if (value == null) {
        unsetRepaymentBankName();
      } else {
        setRepaymentBankName((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case RECE_BANK_CARD_NAME:
      return getReceBankCardName();

    case RECE_BANK_CARD_CODE:
      return getReceBankCardCode();

    case RECE_BANK_NAME:
      return getReceBankName();

    case REPAYMENT_BANK_CARD_NAME:
      return getRepaymentBankCardName();

    case REPAYMENT_BANK_CARD_CODE:
      return getRepaymentBankCardCode();

    case REPAYMENT_BANK_NAME:
      return getRepaymentBankName();

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_ID:
      return isSetAcctId();
    case RECE_BANK_CARD_NAME:
      return isSetReceBankCardName();
    case RECE_BANK_CARD_CODE:
      return isSetReceBankCardCode();
    case RECE_BANK_NAME:
      return isSetReceBankName();
    case REPAYMENT_BANK_CARD_NAME:
      return isSetRepaymentBankCardName();
    case REPAYMENT_BANK_CARD_CODE:
      return isSetRepaymentBankCardCode();
    case REPAYMENT_BANK_NAME:
      return isSetRepaymentBankName();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusCardInfo)
      return this.equals((CusCardInfo)that);
    return false;
  }

  public boolean equals(CusCardInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_receBankCardName = true && this.isSetReceBankCardName();
    boolean that_present_receBankCardName = true && that.isSetReceBankCardName();
    if (this_present_receBankCardName || that_present_receBankCardName) {
      if (!(this_present_receBankCardName && that_present_receBankCardName))
        return false;
      if (!this.receBankCardName.equals(that.receBankCardName))
        return false;
    }

    boolean this_present_receBankCardCode = true && this.isSetReceBankCardCode();
    boolean that_present_receBankCardCode = true && that.isSetReceBankCardCode();
    if (this_present_receBankCardCode || that_present_receBankCardCode) {
      if (!(this_present_receBankCardCode && that_present_receBankCardCode))
        return false;
      if (!this.receBankCardCode.equals(that.receBankCardCode))
        return false;
    }

    boolean this_present_receBankName = true && this.isSetReceBankName();
    boolean that_present_receBankName = true && that.isSetReceBankName();
    if (this_present_receBankName || that_present_receBankName) {
      if (!(this_present_receBankName && that_present_receBankName))
        return false;
      if (!this.receBankName.equals(that.receBankName))
        return false;
    }

    boolean this_present_repaymentBankCardName = true && this.isSetRepaymentBankCardName();
    boolean that_present_repaymentBankCardName = true && that.isSetRepaymentBankCardName();
    if (this_present_repaymentBankCardName || that_present_repaymentBankCardName) {
      if (!(this_present_repaymentBankCardName && that_present_repaymentBankCardName))
        return false;
      if (!this.repaymentBankCardName.equals(that.repaymentBankCardName))
        return false;
    }

    boolean this_present_repaymentBankCardCode = true && this.isSetRepaymentBankCardCode();
    boolean that_present_repaymentBankCardCode = true && that.isSetRepaymentBankCardCode();
    if (this_present_repaymentBankCardCode || that_present_repaymentBankCardCode) {
      if (!(this_present_repaymentBankCardCode && that_present_repaymentBankCardCode))
        return false;
      if (!this.repaymentBankCardCode.equals(that.repaymentBankCardCode))
        return false;
    }

    boolean this_present_repaymentBankName = true && this.isSetRepaymentBankName();
    boolean that_present_repaymentBankName = true && that.isSetRepaymentBankName();
    if (this_present_repaymentBankName || that_present_repaymentBankName) {
      if (!(this_present_repaymentBankName && that_present_repaymentBankName))
        return false;
      if (!this.repaymentBankName.equals(that.repaymentBankName))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_receBankCardName = true && (isSetReceBankCardName());
    list.add(present_receBankCardName);
    if (present_receBankCardName)
      list.add(receBankCardName);

    boolean present_receBankCardCode = true && (isSetReceBankCardCode());
    list.add(present_receBankCardCode);
    if (present_receBankCardCode)
      list.add(receBankCardCode);

    boolean present_receBankName = true && (isSetReceBankName());
    list.add(present_receBankName);
    if (present_receBankName)
      list.add(receBankName);

    boolean present_repaymentBankCardName = true && (isSetRepaymentBankCardName());
    list.add(present_repaymentBankCardName);
    if (present_repaymentBankCardName)
      list.add(repaymentBankCardName);

    boolean present_repaymentBankCardCode = true && (isSetRepaymentBankCardCode());
    list.add(present_repaymentBankCardCode);
    if (present_repaymentBankCardCode)
      list.add(repaymentBankCardCode);

    boolean present_repaymentBankName = true && (isSetRepaymentBankName());
    list.add(present_repaymentBankName);
    if (present_repaymentBankName)
      list.add(repaymentBankName);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusCardInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceBankCardName()).compareTo(other.isSetReceBankCardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceBankCardName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receBankCardName, other.receBankCardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceBankCardCode()).compareTo(other.isSetReceBankCardCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceBankCardCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receBankCardCode, other.receBankCardCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceBankName()).compareTo(other.isSetReceBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receBankName, other.receBankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentBankCardName()).compareTo(other.isSetRepaymentBankCardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentBankCardName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentBankCardName, other.repaymentBankCardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentBankCardCode()).compareTo(other.isSetRepaymentBankCardCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentBankCardCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentBankCardCode, other.repaymentBankCardCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentBankName()).compareTo(other.isSetRepaymentBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentBankName, other.repaymentBankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusCardInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receBankCardName:");
    if (this.receBankCardName == null) {
      sb.append("null");
    } else {
      sb.append(this.receBankCardName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receBankCardCode:");
    if (this.receBankCardCode == null) {
      sb.append("null");
    } else {
      sb.append(this.receBankCardCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receBankName:");
    if (this.receBankName == null) {
      sb.append("null");
    } else {
      sb.append(this.receBankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentBankCardName:");
    if (this.repaymentBankCardName == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentBankCardName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentBankCardCode:");
    if (this.repaymentBankCardCode == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentBankCardCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentBankName:");
    if (this.repaymentBankName == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentBankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusCardInfoStandardSchemeFactory implements SchemeFactory {
    public CusCardInfoStandardScheme getScheme() {
      return new CusCardInfoStandardScheme();
    }
  }

  private static class CusCardInfoStandardScheme extends StandardScheme<CusCardInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusCardInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECE_BANK_CARD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receBankCardName = iprot.readString();
              struct.setReceBankCardNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECE_BANK_CARD_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receBankCardCode = iprot.readString();
              struct.setReceBankCardCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECE_BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receBankName = iprot.readString();
              struct.setReceBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPAYMENT_BANK_CARD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentBankCardName = iprot.readString();
              struct.setRepaymentBankCardNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPAYMENT_BANK_CARD_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentBankCardCode = iprot.readString();
              struct.setRepaymentBankCardCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REPAYMENT_BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentBankName = iprot.readString();
              struct.setRepaymentBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusCardInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      if (struct.receBankCardName != null) {
        oprot.writeFieldBegin(RECE_BANK_CARD_NAME_FIELD_DESC);
        oprot.writeString(struct.receBankCardName);
        oprot.writeFieldEnd();
      }
      if (struct.receBankCardCode != null) {
        oprot.writeFieldBegin(RECE_BANK_CARD_CODE_FIELD_DESC);
        oprot.writeString(struct.receBankCardCode);
        oprot.writeFieldEnd();
      }
      if (struct.receBankName != null) {
        oprot.writeFieldBegin(RECE_BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.receBankName);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentBankCardName != null) {
        oprot.writeFieldBegin(REPAYMENT_BANK_CARD_NAME_FIELD_DESC);
        oprot.writeString(struct.repaymentBankCardName);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentBankCardCode != null) {
        oprot.writeFieldBegin(REPAYMENT_BANK_CARD_CODE_FIELD_DESC);
        oprot.writeString(struct.repaymentBankCardCode);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentBankName != null) {
        oprot.writeFieldBegin(REPAYMENT_BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.repaymentBankName);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusCardInfoTupleSchemeFactory implements SchemeFactory {
    public CusCardInfoTupleScheme getScheme() {
      return new CusCardInfoTupleScheme();
    }
  }

  private static class CusCardInfoTupleScheme extends TupleScheme<CusCardInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetAcctId()) {
        optionals.set(2);
      }
      if (struct.isSetReceBankCardName()) {
        optionals.set(3);
      }
      if (struct.isSetReceBankCardCode()) {
        optionals.set(4);
      }
      if (struct.isSetReceBankName()) {
        optionals.set(5);
      }
      if (struct.isSetRepaymentBankCardName()) {
        optionals.set(6);
      }
      if (struct.isSetRepaymentBankCardCode()) {
        optionals.set(7);
      }
      if (struct.isSetRepaymentBankName()) {
        optionals.set(8);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(9);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetReceBankCardName()) {
        oprot.writeString(struct.receBankCardName);
      }
      if (struct.isSetReceBankCardCode()) {
        oprot.writeString(struct.receBankCardCode);
      }
      if (struct.isSetReceBankName()) {
        oprot.writeString(struct.receBankName);
      }
      if (struct.isSetRepaymentBankCardName()) {
        oprot.writeString(struct.repaymentBankCardName);
      }
      if (struct.isSetRepaymentBankCardCode()) {
        oprot.writeString(struct.repaymentBankCardCode);
      }
      if (struct.isSetRepaymentBankName()) {
        oprot.writeString(struct.repaymentBankName);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.receBankCardName = iprot.readString();
        struct.setReceBankCardNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.receBankCardCode = iprot.readString();
        struct.setReceBankCardCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.receBankName = iprot.readString();
        struct.setReceBankNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repaymentBankCardName = iprot.readString();
        struct.setRepaymentBankCardNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repaymentBankCardCode = iprot.readString();
        struct.setRepaymentBankCardCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.repaymentBankName = iprot.readString();
        struct.setRepaymentBankNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
    }
  }

}


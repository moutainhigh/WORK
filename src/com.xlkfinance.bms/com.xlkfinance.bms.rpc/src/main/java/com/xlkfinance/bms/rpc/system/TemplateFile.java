/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class TemplateFile implements org.apache.thrift.TBase<TemplateFile, TemplateFile._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateFile");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPLOAD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UPLOAD_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadUser", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filePropertyName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FILE_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("fileProperty", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FILE_LOOKUP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileLookupVal", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TemplateFileTupleSchemeFactory());
  }

  public int pid; // required
  public String fileName; // required
  public int fileType; // required
  public int fileSize; // required
  public String uploadDttm; // required
  public String uploadUser; // required
  public String fileUrl; // required
  public int status; // required
  public String filePropertyName; // required
  public int fileProperty; // required
  public String fileLookupVal; // required
  public int fileId; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    FILE_NAME((short)2, "fileName"),
    FILE_TYPE((short)3, "fileType"),
    FILE_SIZE((short)4, "fileSize"),
    UPLOAD_DTTM((short)5, "uploadDttm"),
    UPLOAD_USER((short)6, "uploadUser"),
    FILE_URL((short)7, "fileUrl"),
    STATUS((short)8, "status"),
    FILE_PROPERTY_NAME((short)9, "filePropertyName"),
    FILE_PROPERTY((short)10, "fileProperty"),
    FILE_LOOKUP_VAL((short)11, "fileLookupVal"),
    FILE_ID((short)12, "fileId"),
    PAGE((short)13, "page"),
    ROWS((short)14, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // FILE_NAME
          return FILE_NAME;
        case 3: // FILE_TYPE
          return FILE_TYPE;
        case 4: // FILE_SIZE
          return FILE_SIZE;
        case 5: // UPLOAD_DTTM
          return UPLOAD_DTTM;
        case 6: // UPLOAD_USER
          return UPLOAD_USER;
        case 7: // FILE_URL
          return FILE_URL;
        case 8: // STATUS
          return STATUS;
        case 9: // FILE_PROPERTY_NAME
          return FILE_PROPERTY_NAME;
        case 10: // FILE_PROPERTY
          return FILE_PROPERTY;
        case 11: // FILE_LOOKUP_VAL
          return FILE_LOOKUP_VAL;
        case 12: // FILE_ID
          return FILE_ID;
        case 13: // PAGE
          return PAGE;
        case 14: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __FILETYPE_ISSET_ID = 1;
  private static final int __FILESIZE_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __FILEPROPERTY_ISSET_ID = 4;
  private static final int __FILEID_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("uploadDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPLOAD_USER, new org.apache.thrift.meta_data.FieldMetaData("uploadUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("fileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("filePropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("fileProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_LOOKUP_VAL, new org.apache.thrift.meta_data.FieldMetaData("fileLookupVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateFile.class, metaDataMap);
  }

  public TemplateFile() {
  }

  public TemplateFile(
    int pid,
    String fileName,
    int fileType,
    int fileSize,
    String uploadDttm,
    String uploadUser,
    String fileUrl,
    int status,
    String filePropertyName,
    int fileProperty,
    String fileLookupVal,
    int fileId,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.fileName = fileName;
    this.fileType = fileType;
    setFileTypeIsSet(true);
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.uploadDttm = uploadDttm;
    this.uploadUser = uploadUser;
    this.fileUrl = fileUrl;
    this.status = status;
    setStatusIsSet(true);
    this.filePropertyName = filePropertyName;
    this.fileProperty = fileProperty;
    setFilePropertyIsSet(true);
    this.fileLookupVal = fileLookupVal;
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateFile(TemplateFile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    this.fileType = other.fileType;
    this.fileSize = other.fileSize;
    if (other.isSetUploadDttm()) {
      this.uploadDttm = other.uploadDttm;
    }
    if (other.isSetUploadUser()) {
      this.uploadUser = other.uploadUser;
    }
    if (other.isSetFileUrl()) {
      this.fileUrl = other.fileUrl;
    }
    this.status = other.status;
    if (other.isSetFilePropertyName()) {
      this.filePropertyName = other.filePropertyName;
    }
    this.fileProperty = other.fileProperty;
    if (other.isSetFileLookupVal()) {
      this.fileLookupVal = other.fileLookupVal;
    }
    this.fileId = other.fileId;
    this.page = other.page;
    this.rows = other.rows;
  }

  public TemplateFile deepCopy() {
    return new TemplateFile(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.fileName = null;
    setFileTypeIsSet(false);
    this.fileType = 0;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    this.uploadDttm = null;
    this.uploadUser = null;
    this.fileUrl = null;
    setStatusIsSet(false);
    this.status = 0;
    this.filePropertyName = null;
    setFilePropertyIsSet(false);
    this.fileProperty = 0;
    this.fileLookupVal = null;
    setFileIdIsSet(false);
    this.fileId = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public TemplateFile setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getFileName() {
    return this.fileName;
  }

  public TemplateFile setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getFileType() {
    return this.fileType;
  }

  public TemplateFile setFileType(int fileType) {
    this.fileType = fileType;
    setFileTypeIsSet(true);
    return this;
  }

  public void unsetFileType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return EncodingUtils.testBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  public void setFileTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILETYPE_ISSET_ID, value);
  }

  public int getFileSize() {
    return this.fileSize;
  }

  public TemplateFile setFileSize(int fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public String getUploadDttm() {
    return this.uploadDttm;
  }

  public TemplateFile setUploadDttm(String uploadDttm) {
    this.uploadDttm = uploadDttm;
    return this;
  }

  public void unsetUploadDttm() {
    this.uploadDttm = null;
  }

  /** Returns true if field uploadDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadDttm() {
    return this.uploadDttm != null;
  }

  public void setUploadDttmIsSet(boolean value) {
    if (!value) {
      this.uploadDttm = null;
    }
  }

  public String getUploadUser() {
    return this.uploadUser;
  }

  public TemplateFile setUploadUser(String uploadUser) {
    this.uploadUser = uploadUser;
    return this;
  }

  public void unsetUploadUser() {
    this.uploadUser = null;
  }

  /** Returns true if field uploadUser is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadUser() {
    return this.uploadUser != null;
  }

  public void setUploadUserIsSet(boolean value) {
    if (!value) {
      this.uploadUser = null;
    }
  }

  public String getFileUrl() {
    return this.fileUrl;
  }

  public TemplateFile setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  public void unsetFileUrl() {
    this.fileUrl = null;
  }

  /** Returns true if field fileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFileUrl() {
    return this.fileUrl != null;
  }

  public void setFileUrlIsSet(boolean value) {
    if (!value) {
      this.fileUrl = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TemplateFile setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getFilePropertyName() {
    return this.filePropertyName;
  }

  public TemplateFile setFilePropertyName(String filePropertyName) {
    this.filePropertyName = filePropertyName;
    return this;
  }

  public void unsetFilePropertyName() {
    this.filePropertyName = null;
  }

  /** Returns true if field filePropertyName is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePropertyName() {
    return this.filePropertyName != null;
  }

  public void setFilePropertyNameIsSet(boolean value) {
    if (!value) {
      this.filePropertyName = null;
    }
  }

  public int getFileProperty() {
    return this.fileProperty;
  }

  public TemplateFile setFileProperty(int fileProperty) {
    this.fileProperty = fileProperty;
    setFilePropertyIsSet(true);
    return this;
  }

  public void unsetFileProperty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEPROPERTY_ISSET_ID);
  }

  /** Returns true if field fileProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetFileProperty() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEPROPERTY_ISSET_ID);
  }

  public void setFilePropertyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEPROPERTY_ISSET_ID, value);
  }

  public String getFileLookupVal() {
    return this.fileLookupVal;
  }

  public TemplateFile setFileLookupVal(String fileLookupVal) {
    this.fileLookupVal = fileLookupVal;
    return this;
  }

  public void unsetFileLookupVal() {
    this.fileLookupVal = null;
  }

  /** Returns true if field fileLookupVal is set (has been assigned a value) and false otherwise */
  public boolean isSetFileLookupVal() {
    return this.fileLookupVal != null;
  }

  public void setFileLookupValIsSet(boolean value) {
    if (!value) {
      this.fileLookupVal = null;
    }
  }

  public int getFileId() {
    return this.fileId;
  }

  public TemplateFile setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public TemplateFile setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public TemplateFile setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((Integer)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Integer)value);
      }
      break;

    case UPLOAD_DTTM:
      if (value == null) {
        unsetUploadDttm();
      } else {
        setUploadDttm((String)value);
      }
      break;

    case UPLOAD_USER:
      if (value == null) {
        unsetUploadUser();
      } else {
        setUploadUser((String)value);
      }
      break;

    case FILE_URL:
      if (value == null) {
        unsetFileUrl();
      } else {
        setFileUrl((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case FILE_PROPERTY_NAME:
      if (value == null) {
        unsetFilePropertyName();
      } else {
        setFilePropertyName((String)value);
      }
      break;

    case FILE_PROPERTY:
      if (value == null) {
        unsetFileProperty();
      } else {
        setFileProperty((Integer)value);
      }
      break;

    case FILE_LOOKUP_VAL:
      if (value == null) {
        unsetFileLookupVal();
      } else {
        setFileLookupVal((String)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case FILE_NAME:
      return getFileName();

    case FILE_TYPE:
      return Integer.valueOf(getFileType());

    case FILE_SIZE:
      return Integer.valueOf(getFileSize());

    case UPLOAD_DTTM:
      return getUploadDttm();

    case UPLOAD_USER:
      return getUploadUser();

    case FILE_URL:
      return getFileUrl();

    case STATUS:
      return Integer.valueOf(getStatus());

    case FILE_PROPERTY_NAME:
      return getFilePropertyName();

    case FILE_PROPERTY:
      return Integer.valueOf(getFileProperty());

    case FILE_LOOKUP_VAL:
      return getFileLookupVal();

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case FILE_NAME:
      return isSetFileName();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_SIZE:
      return isSetFileSize();
    case UPLOAD_DTTM:
      return isSetUploadDttm();
    case UPLOAD_USER:
      return isSetUploadUser();
    case FILE_URL:
      return isSetFileUrl();
    case STATUS:
      return isSetStatus();
    case FILE_PROPERTY_NAME:
      return isSetFilePropertyName();
    case FILE_PROPERTY:
      return isSetFileProperty();
    case FILE_LOOKUP_VAL:
      return isSetFileLookupVal();
    case FILE_ID:
      return isSetFileId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateFile)
      return this.equals((TemplateFile)that);
    return false;
  }

  public boolean equals(TemplateFile that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileType = true;
    boolean that_present_fileType = true;
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (this.fileType != that.fileType)
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_uploadDttm = true && this.isSetUploadDttm();
    boolean that_present_uploadDttm = true && that.isSetUploadDttm();
    if (this_present_uploadDttm || that_present_uploadDttm) {
      if (!(this_present_uploadDttm && that_present_uploadDttm))
        return false;
      if (!this.uploadDttm.equals(that.uploadDttm))
        return false;
    }

    boolean this_present_uploadUser = true && this.isSetUploadUser();
    boolean that_present_uploadUser = true && that.isSetUploadUser();
    if (this_present_uploadUser || that_present_uploadUser) {
      if (!(this_present_uploadUser && that_present_uploadUser))
        return false;
      if (!this.uploadUser.equals(that.uploadUser))
        return false;
    }

    boolean this_present_fileUrl = true && this.isSetFileUrl();
    boolean that_present_fileUrl = true && that.isSetFileUrl();
    if (this_present_fileUrl || that_present_fileUrl) {
      if (!(this_present_fileUrl && that_present_fileUrl))
        return false;
      if (!this.fileUrl.equals(that.fileUrl))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_filePropertyName = true && this.isSetFilePropertyName();
    boolean that_present_filePropertyName = true && that.isSetFilePropertyName();
    if (this_present_filePropertyName || that_present_filePropertyName) {
      if (!(this_present_filePropertyName && that_present_filePropertyName))
        return false;
      if (!this.filePropertyName.equals(that.filePropertyName))
        return false;
    }

    boolean this_present_fileProperty = true;
    boolean that_present_fileProperty = true;
    if (this_present_fileProperty || that_present_fileProperty) {
      if (!(this_present_fileProperty && that_present_fileProperty))
        return false;
      if (this.fileProperty != that.fileProperty)
        return false;
    }

    boolean this_present_fileLookupVal = true && this.isSetFileLookupVal();
    boolean that_present_fileLookupVal = true && that.isSetFileLookupVal();
    if (this_present_fileLookupVal || that_present_fileLookupVal) {
      if (!(this_present_fileLookupVal && that_present_fileLookupVal))
        return false;
      if (!this.fileLookupVal.equals(that.fileLookupVal))
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileType = true;
    list.add(present_fileType);
    if (present_fileType)
      list.add(fileType);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_uploadDttm = true && (isSetUploadDttm());
    list.add(present_uploadDttm);
    if (present_uploadDttm)
      list.add(uploadDttm);

    boolean present_uploadUser = true && (isSetUploadUser());
    list.add(present_uploadUser);
    if (present_uploadUser)
      list.add(uploadUser);

    boolean present_fileUrl = true && (isSetFileUrl());
    list.add(present_fileUrl);
    if (present_fileUrl)
      list.add(fileUrl);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_filePropertyName = true && (isSetFilePropertyName());
    list.add(present_filePropertyName);
    if (present_filePropertyName)
      list.add(filePropertyName);

    boolean present_fileProperty = true;
    list.add(present_fileProperty);
    if (present_fileProperty)
      list.add(fileProperty);

    boolean present_fileLookupVal = true && (isSetFileLookupVal());
    list.add(present_fileLookupVal);
    if (present_fileLookupVal)
      list.add(fileLookupVal);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(TemplateFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadDttm()).compareTo(other.isSetUploadDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadDttm, other.uploadDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadUser()).compareTo(other.isSetUploadUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadUser, other.uploadUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileUrl()).compareTo(other.isSetFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUrl, other.fileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePropertyName()).compareTo(other.isSetFilePropertyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePropertyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePropertyName, other.filePropertyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileProperty()).compareTo(other.isSetFileProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileProperty, other.fileProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileLookupVal()).compareTo(other.isSetFileLookupVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileLookupVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileLookupVal, other.fileLookupVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateFile(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    sb.append(this.fileType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadDttm:");
    if (this.uploadDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadUser:");
    if (this.uploadUser == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileUrl:");
    if (this.fileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filePropertyName:");
    if (this.filePropertyName == null) {
      sb.append("null");
    } else {
      sb.append(this.filePropertyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileProperty:");
    sb.append(this.fileProperty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileLookupVal:");
    if (this.fileLookupVal == null) {
      sb.append("null");
    } else {
      sb.append(this.fileLookupVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateFileStandardSchemeFactory implements SchemeFactory {
    public TemplateFileStandardScheme getScheme() {
      return new TemplateFileStandardScheme();
    }
  }

  private static class TemplateFileStandardScheme extends StandardScheme<TemplateFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = iprot.readI32();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSize = iprot.readI32();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPLOAD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadDttm = iprot.readString();
              struct.setUploadDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPLOAD_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadUser = iprot.readString();
              struct.setUploadUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileUrl = iprot.readString();
              struct.setFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_PROPERTY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePropertyName = iprot.readString();
              struct.setFilePropertyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileProperty = iprot.readI32();
              struct.setFilePropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILE_LOOKUP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileLookupVal = iprot.readString();
              struct.setFileLookupValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.fileType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fileSize);
      oprot.writeFieldEnd();
      if (struct.uploadDttm != null) {
        oprot.writeFieldBegin(UPLOAD_DTTM_FIELD_DESC);
        oprot.writeString(struct.uploadDttm);
        oprot.writeFieldEnd();
      }
      if (struct.uploadUser != null) {
        oprot.writeFieldBegin(UPLOAD_USER_FIELD_DESC);
        oprot.writeString(struct.uploadUser);
        oprot.writeFieldEnd();
      }
      if (struct.fileUrl != null) {
        oprot.writeFieldBegin(FILE_URL_FIELD_DESC);
        oprot.writeString(struct.fileUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.filePropertyName != null) {
        oprot.writeFieldBegin(FILE_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(struct.filePropertyName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_PROPERTY_FIELD_DESC);
      oprot.writeI32(struct.fileProperty);
      oprot.writeFieldEnd();
      if (struct.fileLookupVal != null) {
        oprot.writeFieldBegin(FILE_LOOKUP_VAL_FIELD_DESC);
        oprot.writeString(struct.fileLookupVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TemplateFileTupleSchemeFactory implements SchemeFactory {
    public TemplateFileTupleScheme getScheme() {
      return new TemplateFileTupleScheme();
    }
  }

  private static class TemplateFileTupleScheme extends TupleScheme<TemplateFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TemplateFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetFileName()) {
        optionals.set(1);
      }
      if (struct.isSetFileType()) {
        optionals.set(2);
      }
      if (struct.isSetFileSize()) {
        optionals.set(3);
      }
      if (struct.isSetUploadDttm()) {
        optionals.set(4);
      }
      if (struct.isSetUploadUser()) {
        optionals.set(5);
      }
      if (struct.isSetFileUrl()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetFilePropertyName()) {
        optionals.set(8);
      }
      if (struct.isSetFileProperty()) {
        optionals.set(9);
      }
      if (struct.isSetFileLookupVal()) {
        optionals.set(10);
      }
      if (struct.isSetFileId()) {
        optionals.set(11);
      }
      if (struct.isSetPage()) {
        optionals.set(12);
      }
      if (struct.isSetRows()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFileType()) {
        oprot.writeI32(struct.fileType);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI32(struct.fileSize);
      }
      if (struct.isSetUploadDttm()) {
        oprot.writeString(struct.uploadDttm);
      }
      if (struct.isSetUploadUser()) {
        oprot.writeString(struct.uploadUser);
      }
      if (struct.isSetFileUrl()) {
        oprot.writeString(struct.fileUrl);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetFilePropertyName()) {
        oprot.writeString(struct.filePropertyName);
      }
      if (struct.isSetFileProperty()) {
        oprot.writeI32(struct.fileProperty);
      }
      if (struct.isSetFileLookupVal()) {
        oprot.writeString(struct.fileLookupVal);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TemplateFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileType = iprot.readI32();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileSize = iprot.readI32();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uploadDttm = iprot.readString();
        struct.setUploadDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.uploadUser = iprot.readString();
        struct.setUploadUserIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fileUrl = iprot.readString();
        struct.setFileUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.filePropertyName = iprot.readString();
        struct.setFilePropertyNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fileProperty = iprot.readI32();
        struct.setFilePropertyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fileLookupVal = iprot.readString();
        struct.setFileLookupValIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


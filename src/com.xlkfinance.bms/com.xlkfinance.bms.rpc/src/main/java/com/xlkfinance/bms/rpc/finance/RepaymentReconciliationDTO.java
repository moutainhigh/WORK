/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class RepaymentReconciliationDTO implements org.apache.thrift.TBase<RepaymentReconciliationDTO, RepaymentReconciliationDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentReconciliationDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentReconciliationDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REALTIME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("realtimeId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationDt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RECEIVABLES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablesId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentReconciliationDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentReconciliationDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public int type; // required
  public int cycleNum; // required
  public int realtimeId; // required
  public double reconciliationAmt; // required
  public String reconciliationDt; // required
  public int userId; // required
  public int status; // required
  public int receivablesId; // required
  public String createUser; // required
  public String createDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    TYPE((short)3, "type"),
    CYCLE_NUM((short)4, "cycleNum"),
    REALTIME_ID((short)5, "realtimeId"),
    RECONCILIATION_AMT((short)6, "reconciliationAmt"),
    RECONCILIATION_DT((short)7, "reconciliationDt"),
    USER_ID((short)8, "userId"),
    STATUS((short)9, "status"),
    RECEIVABLES_ID((short)10, "receivablesId"),
    CREATE_USER((short)11, "createUser"),
    CREATE_DATE((short)12, "createDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // CYCLE_NUM
          return CYCLE_NUM;
        case 5: // REALTIME_ID
          return REALTIME_ID;
        case 6: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 7: // RECONCILIATION_DT
          return RECONCILIATION_DT;
        case 8: // USER_ID
          return USER_ID;
        case 9: // STATUS
          return STATUS;
        case 10: // RECEIVABLES_ID
          return RECEIVABLES_ID;
        case 11: // CREATE_USER
          return CREATE_USER;
        case 12: // CREATE_DATE
          return CREATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private static final int __CYCLENUM_ISSET_ID = 3;
  private static final int __REALTIMEID_ISSET_ID = 4;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 5;
  private static final int __USERID_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __RECEIVABLESID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("cycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REALTIME_ID, new org.apache.thrift.meta_data.FieldMetaData("realtimeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCILIATION_DT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVABLES_ID, new org.apache.thrift.meta_data.FieldMetaData("receivablesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentReconciliationDTO.class, metaDataMap);
  }

  public RepaymentReconciliationDTO() {
  }

  public RepaymentReconciliationDTO(
    int pid,
    int loanId,
    int type,
    int cycleNum,
    int realtimeId,
    double reconciliationAmt,
    String reconciliationDt,
    int userId,
    int status,
    int receivablesId,
    String createUser,
    String createDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    this.realtimeId = realtimeId;
    setRealtimeIdIsSet(true);
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.reconciliationDt = reconciliationDt;
    this.userId = userId;
    setUserIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.receivablesId = receivablesId;
    setReceivablesIdIsSet(true);
    this.createUser = createUser;
    this.createDate = createDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentReconciliationDTO(RepaymentReconciliationDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    this.type = other.type;
    this.cycleNum = other.cycleNum;
    this.realtimeId = other.realtimeId;
    this.reconciliationAmt = other.reconciliationAmt;
    if (other.isSetReconciliationDt()) {
      this.reconciliationDt = other.reconciliationDt;
    }
    this.userId = other.userId;
    this.status = other.status;
    this.receivablesId = other.receivablesId;
    if (other.isSetCreateUser()) {
      this.createUser = other.createUser;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
  }

  public RepaymentReconciliationDTO deepCopy() {
    return new RepaymentReconciliationDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setTypeIsSet(false);
    this.type = 0;
    setCycleNumIsSet(false);
    this.cycleNum = 0;
    setRealtimeIdIsSet(false);
    this.realtimeId = 0;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    this.reconciliationDt = null;
    setUserIdIsSet(false);
    this.userId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setReceivablesIdIsSet(false);
    this.receivablesId = 0;
    this.createUser = null;
    this.createDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public RepaymentReconciliationDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public RepaymentReconciliationDTO setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public RepaymentReconciliationDTO setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getCycleNum() {
    return this.cycleNum;
  }

  public RepaymentReconciliationDTO setCycleNum(int cycleNum) {
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    return this;
  }

  public void unsetCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  /** Returns true if field cycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  public void setCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLENUM_ISSET_ID, value);
  }

  public int getRealtimeId() {
    return this.realtimeId;
  }

  public RepaymentReconciliationDTO setRealtimeId(int realtimeId) {
    this.realtimeId = realtimeId;
    setRealtimeIdIsSet(true);
    return this;
  }

  public void unsetRealtimeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTIMEID_ISSET_ID);
  }

  /** Returns true if field realtimeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRealtimeId() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTIMEID_ISSET_ID);
  }

  public void setRealtimeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTIMEID_ISSET_ID, value);
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public RepaymentReconciliationDTO setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public String getReconciliationDt() {
    return this.reconciliationDt;
  }

  public RepaymentReconciliationDTO setReconciliationDt(String reconciliationDt) {
    this.reconciliationDt = reconciliationDt;
    return this;
  }

  public void unsetReconciliationDt() {
    this.reconciliationDt = null;
  }

  /** Returns true if field reconciliationDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationDt() {
    return this.reconciliationDt != null;
  }

  public void setReconciliationDtIsSet(boolean value) {
    if (!value) {
      this.reconciliationDt = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public RepaymentReconciliationDTO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public RepaymentReconciliationDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getReceivablesId() {
    return this.receivablesId;
  }

  public RepaymentReconciliationDTO setReceivablesId(int receivablesId) {
    this.receivablesId = receivablesId;
    setReceivablesIdIsSet(true);
    return this;
  }

  public void unsetReceivablesId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID);
  }

  /** Returns true if field receivablesId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivablesId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID);
  }

  public void setReceivablesIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID, value);
  }

  public String getCreateUser() {
    return this.createUser;
  }

  public RepaymentReconciliationDTO setCreateUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

  public void unsetCreateUser() {
    this.createUser = null;
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return this.createUser != null;
  }

  public void setCreateUserIsSet(boolean value) {
    if (!value) {
      this.createUser = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public RepaymentReconciliationDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case CYCLE_NUM:
      if (value == null) {
        unsetCycleNum();
      } else {
        setCycleNum((Integer)value);
      }
      break;

    case REALTIME_ID:
      if (value == null) {
        unsetRealtimeId();
      } else {
        setRealtimeId((Integer)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case RECONCILIATION_DT:
      if (value == null) {
        unsetReconciliationDt();
      } else {
        setReconciliationDt((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case RECEIVABLES_ID:
      if (value == null) {
        unsetReceivablesId();
      } else {
        setReceivablesId((Integer)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case TYPE:
      return Integer.valueOf(getType());

    case CYCLE_NUM:
      return Integer.valueOf(getCycleNum());

    case REALTIME_ID:
      return Integer.valueOf(getRealtimeId());

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case RECONCILIATION_DT:
      return getReconciliationDt();

    case USER_ID:
      return Integer.valueOf(getUserId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case RECEIVABLES_ID:
      return Integer.valueOf(getReceivablesId());

    case CREATE_USER:
      return getCreateUser();

    case CREATE_DATE:
      return getCreateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case TYPE:
      return isSetType();
    case CYCLE_NUM:
      return isSetCycleNum();
    case REALTIME_ID:
      return isSetRealtimeId();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case RECONCILIATION_DT:
      return isSetReconciliationDt();
    case USER_ID:
      return isSetUserId();
    case STATUS:
      return isSetStatus();
    case RECEIVABLES_ID:
      return isSetReceivablesId();
    case CREATE_USER:
      return isSetCreateUser();
    case CREATE_DATE:
      return isSetCreateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentReconciliationDTO)
      return this.equals((RepaymentReconciliationDTO)that);
    return false;
  }

  public boolean equals(RepaymentReconciliationDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_cycleNum = true;
    boolean that_present_cycleNum = true;
    if (this_present_cycleNum || that_present_cycleNum) {
      if (!(this_present_cycleNum && that_present_cycleNum))
        return false;
      if (this.cycleNum != that.cycleNum)
        return false;
    }

    boolean this_present_realtimeId = true;
    boolean that_present_realtimeId = true;
    if (this_present_realtimeId || that_present_realtimeId) {
      if (!(this_present_realtimeId && that_present_realtimeId))
        return false;
      if (this.realtimeId != that.realtimeId)
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_reconciliationDt = true && this.isSetReconciliationDt();
    boolean that_present_reconciliationDt = true && that.isSetReconciliationDt();
    if (this_present_reconciliationDt || that_present_reconciliationDt) {
      if (!(this_present_reconciliationDt && that_present_reconciliationDt))
        return false;
      if (!this.reconciliationDt.equals(that.reconciliationDt))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_receivablesId = true;
    boolean that_present_receivablesId = true;
    if (this_present_receivablesId || that_present_receivablesId) {
      if (!(this_present_receivablesId && that_present_receivablesId))
        return false;
      if (this.receivablesId != that.receivablesId)
        return false;
    }

    boolean this_present_createUser = true && this.isSetCreateUser();
    boolean that_present_createUser = true && that.isSetCreateUser();
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (!this.createUser.equals(that.createUser))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_cycleNum = true;
    list.add(present_cycleNum);
    if (present_cycleNum)
      list.add(cycleNum);

    boolean present_realtimeId = true;
    list.add(present_realtimeId);
    if (present_realtimeId)
      list.add(realtimeId);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_reconciliationDt = true && (isSetReconciliationDt());
    list.add(present_reconciliationDt);
    if (present_reconciliationDt)
      list.add(reconciliationDt);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_receivablesId = true;
    list.add(present_receivablesId);
    if (present_receivablesId)
      list.add(receivablesId);

    boolean present_createUser = true && (isSetCreateUser());
    list.add(present_createUser);
    if (present_createUser)
      list.add(createUser);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentReconciliationDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleNum()).compareTo(other.isSetCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleNum, other.cycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtimeId()).compareTo(other.isSetRealtimeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtimeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtimeId, other.realtimeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationDt()).compareTo(other.isSetReconciliationDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationDt, other.reconciliationDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivablesId()).compareTo(other.isSetReceivablesId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivablesId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablesId, other.receivablesId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentReconciliationDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleNum:");
    sb.append(this.cycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realtimeId:");
    sb.append(this.realtimeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationDt:");
    if (this.reconciliationDt == null) {
      sb.append("null");
    } else {
      sb.append(this.reconciliationDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivablesId:");
    sb.append(this.receivablesId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    if (this.createUser == null) {
      sb.append("null");
    } else {
      sb.append(this.createUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentReconciliationDTOStandardSchemeFactory implements SchemeFactory {
    public RepaymentReconciliationDTOStandardScheme getScheme() {
      return new RepaymentReconciliationDTOStandardScheme();
    }
  }

  private static class RepaymentReconciliationDTOStandardScheme extends StandardScheme<RepaymentReconciliationDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentReconciliationDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycleNum = iprot.readI32();
              struct.setCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REALTIME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.realtimeId = iprot.readI32();
              struct.setRealtimeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECONCILIATION_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reconciliationDt = iprot.readString();
              struct.setReconciliationDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECEIVABLES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receivablesId = iprot.readI32();
              struct.setReceivablesIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createUser = iprot.readString();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentReconciliationDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.cycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REALTIME_ID_FIELD_DESC);
      oprot.writeI32(struct.realtimeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      if (struct.reconciliationDt != null) {
        oprot.writeFieldBegin(RECONCILIATION_DT_FIELD_DESC);
        oprot.writeString(struct.reconciliationDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVABLES_ID_FIELD_DESC);
      oprot.writeI32(struct.receivablesId);
      oprot.writeFieldEnd();
      if (struct.createUser != null) {
        oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
        oprot.writeString(struct.createUser);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentReconciliationDTOTupleSchemeFactory implements SchemeFactory {
    public RepaymentReconciliationDTOTupleScheme getScheme() {
      return new RepaymentReconciliationDTOTupleScheme();
    }
  }

  private static class RepaymentReconciliationDTOTupleScheme extends TupleScheme<RepaymentReconciliationDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentReconciliationDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetCycleNum()) {
        optionals.set(3);
      }
      if (struct.isSetRealtimeId()) {
        optionals.set(4);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(5);
      }
      if (struct.isSetReconciliationDt()) {
        optionals.set(6);
      }
      if (struct.isSetUserId()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetReceivablesId()) {
        optionals.set(9);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(10);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetCycleNum()) {
        oprot.writeI32(struct.cycleNum);
      }
      if (struct.isSetRealtimeId()) {
        oprot.writeI32(struct.realtimeId);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetReconciliationDt()) {
        oprot.writeString(struct.reconciliationDt);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetReceivablesId()) {
        oprot.writeI32(struct.receivablesId);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeString(struct.createUser);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentReconciliationDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cycleNum = iprot.readI32();
        struct.setCycleNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.realtimeId = iprot.readI32();
        struct.setRealtimeIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reconciliationDt = iprot.readString();
        struct.setReconciliationDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.receivablesId = iprot.readI32();
        struct.setReceivablesIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createUser = iprot.readString();
        struct.setCreateUserIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
    }
  }

}


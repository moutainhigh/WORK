/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class LoanFeew implements org.apache.thrift.TBase<LoanFeew, LoanFeew._Fields>, java.io.Serializable, Cloneable, Comparable<LoanFeew> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanFeew");

  private static final org.apache.thrift.protocol.TField MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("mgr", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("other", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField OVERDUINTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overduinterest", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FINEINTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("fineinterest", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanFeewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanFeewTupleSchemeFactory());
  }

  public double mgr; // required
  public double other; // required
  public double interest; // required
  public double overduinterest; // required
  public double fineinterest; // required
  public double totalAmt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MGR((short)1, "mgr"),
    OTHER((short)2, "other"),
    INTEREST((short)3, "interest"),
    OVERDUINTEREST((short)4, "overduinterest"),
    FINEINTEREST((short)5, "fineinterest"),
    TOTAL_AMT((short)6, "totalAmt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MGR
          return MGR;
        case 2: // OTHER
          return OTHER;
        case 3: // INTEREST
          return INTEREST;
        case 4: // OVERDUINTEREST
          return OVERDUINTEREST;
        case 5: // FINEINTEREST
          return FINEINTEREST;
        case 6: // TOTAL_AMT
          return TOTAL_AMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MGR_ISSET_ID = 0;
  private static final int __OTHER_ISSET_ID = 1;
  private static final int __INTEREST_ISSET_ID = 2;
  private static final int __OVERDUINTEREST_ISSET_ID = 3;
  private static final int __FINEINTEREST_ISSET_ID = 4;
  private static final int __TOTALAMT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MGR, new org.apache.thrift.meta_data.FieldMetaData("mgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OTHER, new org.apache.thrift.meta_data.FieldMetaData("other", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUINTEREST, new org.apache.thrift.meta_data.FieldMetaData("overduinterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINEINTEREST, new org.apache.thrift.meta_data.FieldMetaData("fineinterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("totalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanFeew.class, metaDataMap);
  }

  public LoanFeew() {
  }

  public LoanFeew(
    double mgr,
    double other,
    double interest,
    double overduinterest,
    double fineinterest,
    double totalAmt)
  {
    this();
    this.mgr = mgr;
    setMgrIsSet(true);
    this.other = other;
    setOtherIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.overduinterest = overduinterest;
    setOverduinterestIsSet(true);
    this.fineinterest = fineinterest;
    setFineinterestIsSet(true);
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanFeew(LoanFeew other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mgr = other.mgr;
    this.other = other.other;
    this.interest = other.interest;
    this.overduinterest = other.overduinterest;
    this.fineinterest = other.fineinterest;
    this.totalAmt = other.totalAmt;
  }

  public LoanFeew deepCopy() {
    return new LoanFeew(this);
  }

  @Override
  public void clear() {
    setMgrIsSet(false);
    this.mgr = 0.0;
    setOtherIsSet(false);
    this.other = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    setOverduinterestIsSet(false);
    this.overduinterest = 0.0;
    setFineinterestIsSet(false);
    this.fineinterest = 0.0;
    setTotalAmtIsSet(false);
    this.totalAmt = 0.0;
  }

  public double getMgr() {
    return this.mgr;
  }

  public LoanFeew setMgr(double mgr) {
    this.mgr = mgr;
    setMgrIsSet(true);
    return this;
  }

  public void unsetMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MGR_ISSET_ID);
  }

  /** Returns true if field mgr is set (has been assigned a value) and false otherwise */
  public boolean isSetMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __MGR_ISSET_ID);
  }

  public void setMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MGR_ISSET_ID, value);
  }

  public double getOther() {
    return this.other;
  }

  public LoanFeew setOther(double other) {
    this.other = other;
    setOtherIsSet(true);
    return this;
  }

  public void unsetOther() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHER_ISSET_ID);
  }

  /** Returns true if field other is set (has been assigned a value) and false otherwise */
  public boolean isSetOther() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHER_ISSET_ID);
  }

  public void setOtherIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHER_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public LoanFeew setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public double getOverduinterest() {
    return this.overduinterest;
  }

  public LoanFeew setOverduinterest(double overduinterest) {
    this.overduinterest = overduinterest;
    setOverduinterestIsSet(true);
    return this;
  }

  public void unsetOverduinterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUINTEREST_ISSET_ID);
  }

  /** Returns true if field overduinterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverduinterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUINTEREST_ISSET_ID);
  }

  public void setOverduinterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUINTEREST_ISSET_ID, value);
  }

  public double getFineinterest() {
    return this.fineinterest;
  }

  public LoanFeew setFineinterest(double fineinterest) {
    this.fineinterest = fineinterest;
    setFineinterestIsSet(true);
    return this;
  }

  public void unsetFineinterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINEINTEREST_ISSET_ID);
  }

  /** Returns true if field fineinterest is set (has been assigned a value) and false otherwise */
  public boolean isSetFineinterest() {
    return EncodingUtils.testBit(__isset_bitfield, __FINEINTEREST_ISSET_ID);
  }

  public void setFineinterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINEINTEREST_ISSET_ID, value);
  }

  public double getTotalAmt() {
    return this.totalAmt;
  }

  public LoanFeew setTotalAmt(double totalAmt) {
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    return this;
  }

  public void unsetTotalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  /** Returns true if field totalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  public void setTotalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MGR:
      if (value == null) {
        unsetMgr();
      } else {
        setMgr((Double)value);
      }
      break;

    case OTHER:
      if (value == null) {
        unsetOther();
      } else {
        setOther((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case OVERDUINTEREST:
      if (value == null) {
        unsetOverduinterest();
      } else {
        setOverduinterest((Double)value);
      }
      break;

    case FINEINTEREST:
      if (value == null) {
        unsetFineinterest();
      } else {
        setFineinterest((Double)value);
      }
      break;

    case TOTAL_AMT:
      if (value == null) {
        unsetTotalAmt();
      } else {
        setTotalAmt((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MGR:
      return Double.valueOf(getMgr());

    case OTHER:
      return Double.valueOf(getOther());

    case INTEREST:
      return Double.valueOf(getInterest());

    case OVERDUINTEREST:
      return Double.valueOf(getOverduinterest());

    case FINEINTEREST:
      return Double.valueOf(getFineinterest());

    case TOTAL_AMT:
      return Double.valueOf(getTotalAmt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MGR:
      return isSetMgr();
    case OTHER:
      return isSetOther();
    case INTEREST:
      return isSetInterest();
    case OVERDUINTEREST:
      return isSetOverduinterest();
    case FINEINTEREST:
      return isSetFineinterest();
    case TOTAL_AMT:
      return isSetTotalAmt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanFeew)
      return this.equals((LoanFeew)that);
    return false;
  }

  public boolean equals(LoanFeew that) {
    if (that == null)
      return false;

    boolean this_present_mgr = true;
    boolean that_present_mgr = true;
    if (this_present_mgr || that_present_mgr) {
      if (!(this_present_mgr && that_present_mgr))
        return false;
      if (this.mgr != that.mgr)
        return false;
    }

    boolean this_present_other = true;
    boolean that_present_other = true;
    if (this_present_other || that_present_other) {
      if (!(this_present_other && that_present_other))
        return false;
      if (this.other != that.other)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_overduinterest = true;
    boolean that_present_overduinterest = true;
    if (this_present_overduinterest || that_present_overduinterest) {
      if (!(this_present_overduinterest && that_present_overduinterest))
        return false;
      if (this.overduinterest != that.overduinterest)
        return false;
    }

    boolean this_present_fineinterest = true;
    boolean that_present_fineinterest = true;
    if (this_present_fineinterest || that_present_fineinterest) {
      if (!(this_present_fineinterest && that_present_fineinterest))
        return false;
      if (this.fineinterest != that.fineinterest)
        return false;
    }

    boolean this_present_totalAmt = true;
    boolean that_present_totalAmt = true;
    if (this_present_totalAmt || that_present_totalAmt) {
      if (!(this_present_totalAmt && that_present_totalAmt))
        return false;
      if (this.totalAmt != that.totalAmt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mgr = true;
    list.add(present_mgr);
    if (present_mgr)
      list.add(mgr);

    boolean present_other = true;
    list.add(present_other);
    if (present_other)
      list.add(other);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_overduinterest = true;
    list.add(present_overduinterest);
    if (present_overduinterest)
      list.add(overduinterest);

    boolean present_fineinterest = true;
    list.add(present_fineinterest);
    if (present_fineinterest)
      list.add(fineinterest);

    boolean present_totalAmt = true;
    list.add(present_totalAmt);
    if (present_totalAmt)
      list.add(totalAmt);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanFeew other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMgr()).compareTo(other.isSetMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mgr, other.mgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther()).compareTo(other.isSetOther());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other, other.other);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverduinterest()).compareTo(other.isSetOverduinterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverduinterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overduinterest, other.overduinterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFineinterest()).compareTo(other.isSetFineinterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFineinterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fineinterest, other.fineinterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmt()).compareTo(other.isSetTotalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmt, other.totalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanFeew(");
    boolean first = true;

    sb.append("mgr:");
    sb.append(this.mgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("other:");
    sb.append(this.other);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overduinterest:");
    sb.append(this.overduinterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fineinterest:");
    sb.append(this.fineinterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmt:");
    sb.append(this.totalAmt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanFeewStandardSchemeFactory implements SchemeFactory {
    public LoanFeewStandardScheme getScheme() {
      return new LoanFeewStandardScheme();
    }
  }

  private static class LoanFeewStandardScheme extends StandardScheme<LoanFeew> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanFeew struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mgr = iprot.readDouble();
              struct.setMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OTHER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.other = iprot.readDouble();
              struct.setOtherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OVERDUINTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overduinterest = iprot.readDouble();
              struct.setOverduinterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FINEINTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fineinterest = iprot.readDouble();
              struct.setFineinterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmt = iprot.readDouble();
              struct.setTotalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanFeew struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MGR_FIELD_DESC);
      oprot.writeDouble(struct.mgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_FIELD_DESC);
      oprot.writeDouble(struct.other);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUINTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overduinterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINEINTEREST_FIELD_DESC);
      oprot.writeDouble(struct.fineinterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.totalAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanFeewTupleSchemeFactory implements SchemeFactory {
    public LoanFeewTupleScheme getScheme() {
      return new LoanFeewTupleScheme();
    }
  }

  private static class LoanFeewTupleScheme extends TupleScheme<LoanFeew> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanFeew struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMgr()) {
        optionals.set(0);
      }
      if (struct.isSetOther()) {
        optionals.set(1);
      }
      if (struct.isSetInterest()) {
        optionals.set(2);
      }
      if (struct.isSetOverduinterest()) {
        optionals.set(3);
      }
      if (struct.isSetFineinterest()) {
        optionals.set(4);
      }
      if (struct.isSetTotalAmt()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMgr()) {
        oprot.writeDouble(struct.mgr);
      }
      if (struct.isSetOther()) {
        oprot.writeDouble(struct.other);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetOverduinterest()) {
        oprot.writeDouble(struct.overduinterest);
      }
      if (struct.isSetFineinterest()) {
        oprot.writeDouble(struct.fineinterest);
      }
      if (struct.isSetTotalAmt()) {
        oprot.writeDouble(struct.totalAmt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanFeew struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.mgr = iprot.readDouble();
        struct.setMgrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.other = iprot.readDouble();
        struct.setOtherIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(3)) {
        struct.overduinterest = iprot.readDouble();
        struct.setOverduinterestIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fineinterest = iprot.readDouble();
        struct.setFineinterestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalAmt = iprot.readDouble();
        struct.setTotalAmtIsSet(true);
      }
    }
  }

}


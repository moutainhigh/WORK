/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepayOverdueDTO implements org.apache.thrift.TBase<RepayOverdueDTO, RepayOverdueDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RepayOverdueDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepayOverdueDTO");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_LOAD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractLoadNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SHOULD_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField HASHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("hashouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField HASSHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("hasshouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField HASSHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("hasshouldMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField HASSHOULD_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("hasshouldOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField NOSHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("noshouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField NOSHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("noshouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField NOSHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("noshouldMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField NOSHOULD_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("noshouldOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField NOVERDUE_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("noverdueFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField NOVERDUE_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("noverdueLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("principalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField NO_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("noTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField IS_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconciliation", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ROW_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rowNum", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField OVERDUE_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDt", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField LOAN_INFO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInfoId", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField P_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pCount", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepayOverdueDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepayOverdueDTOTupleSchemeFactory());
  }

  public int pId; // required
  public String cusName; // required
  public String contractLoadNo; // required
  public double shouldPrincipal; // required
  public double shouldInterest; // required
  public double shouldMangCost; // required
  public double shouldOtherCost; // required
  public double hashouldPrincipal; // required
  public double hasshouldInterest; // required
  public double hasshouldMangCost; // required
  public double hasshouldOtherCost; // required
  public double noshouldPrincipal; // required
  public double noshouldInterest; // required
  public double noshouldMangCost; // required
  public double noshouldOtherCost; // required
  public String projectName; // required
  public String projectNumber; // required
  public double noverdueFineInterest; // required
  public double noverdueLoanInterest; // required
  public double principalBalance; // required
  public double noTotal; // required
  public int isReconciliation; // required
  public int planCycleNum; // required
  public int rowNum; // required
  public double overdueFineInterest; // required
  public double overdueLoanInterest; // required
  public String planRepayDt; // required
  public int loanInfoId; // required
  public int projectId; // required
  public int page; // required
  public int pCount; // required
  public List<RepayOverdueDTO> results; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    CUS_NAME((short)2, "cusName"),
    CONTRACT_LOAD_NO((short)3, "contractLoadNo"),
    SHOULD_PRINCIPAL((short)4, "shouldPrincipal"),
    SHOULD_INTEREST((short)5, "shouldInterest"),
    SHOULD_MANG_COST((short)6, "shouldMangCost"),
    SHOULD_OTHER_COST((short)7, "shouldOtherCost"),
    HASHOULD_PRINCIPAL((short)8, "hashouldPrincipal"),
    HASSHOULD_INTEREST((short)9, "hasshouldInterest"),
    HASSHOULD_MANG_COST((short)10, "hasshouldMangCost"),
    HASSHOULD_OTHER_COST((short)11, "hasshouldOtherCost"),
    NOSHOULD_PRINCIPAL((short)12, "noshouldPrincipal"),
    NOSHOULD_INTEREST((short)13, "noshouldInterest"),
    NOSHOULD_MANG_COST((short)14, "noshouldMangCost"),
    NOSHOULD_OTHER_COST((short)15, "noshouldOtherCost"),
    PROJECT_NAME((short)16, "projectName"),
    PROJECT_NUMBER((short)17, "projectNumber"),
    NOVERDUE_FINE_INTEREST((short)18, "noverdueFineInterest"),
    NOVERDUE_LOAN_INTEREST((short)19, "noverdueLoanInterest"),
    PRINCIPAL_BALANCE((short)20, "principalBalance"),
    NO_TOTAL((short)21, "noTotal"),
    IS_RECONCILIATION((short)22, "isReconciliation"),
    PLAN_CYCLE_NUM((short)23, "planCycleNum"),
    ROW_NUM((short)24, "rowNum"),
    OVERDUE_FINE_INTEREST((short)25, "overdueFineInterest"),
    OVERDUE_LOAN_INTEREST((short)26, "overdueLoanInterest"),
    PLAN_REPAY_DT((short)27, "planRepayDt"),
    LOAN_INFO_ID((short)28, "loanInfoId"),
    PROJECT_ID((short)29, "projectId"),
    PAGE((short)30, "page"),
    P_COUNT((short)31, "pCount"),
    RESULTS((short)32, "results");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // CUS_NAME
          return CUS_NAME;
        case 3: // CONTRACT_LOAD_NO
          return CONTRACT_LOAD_NO;
        case 4: // SHOULD_PRINCIPAL
          return SHOULD_PRINCIPAL;
        case 5: // SHOULD_INTEREST
          return SHOULD_INTEREST;
        case 6: // SHOULD_MANG_COST
          return SHOULD_MANG_COST;
        case 7: // SHOULD_OTHER_COST
          return SHOULD_OTHER_COST;
        case 8: // HASHOULD_PRINCIPAL
          return HASHOULD_PRINCIPAL;
        case 9: // HASSHOULD_INTEREST
          return HASSHOULD_INTEREST;
        case 10: // HASSHOULD_MANG_COST
          return HASSHOULD_MANG_COST;
        case 11: // HASSHOULD_OTHER_COST
          return HASSHOULD_OTHER_COST;
        case 12: // NOSHOULD_PRINCIPAL
          return NOSHOULD_PRINCIPAL;
        case 13: // NOSHOULD_INTEREST
          return NOSHOULD_INTEREST;
        case 14: // NOSHOULD_MANG_COST
          return NOSHOULD_MANG_COST;
        case 15: // NOSHOULD_OTHER_COST
          return NOSHOULD_OTHER_COST;
        case 16: // PROJECT_NAME
          return PROJECT_NAME;
        case 17: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 18: // NOVERDUE_FINE_INTEREST
          return NOVERDUE_FINE_INTEREST;
        case 19: // NOVERDUE_LOAN_INTEREST
          return NOVERDUE_LOAN_INTEREST;
        case 20: // PRINCIPAL_BALANCE
          return PRINCIPAL_BALANCE;
        case 21: // NO_TOTAL
          return NO_TOTAL;
        case 22: // IS_RECONCILIATION
          return IS_RECONCILIATION;
        case 23: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 24: // ROW_NUM
          return ROW_NUM;
        case 25: // OVERDUE_FINE_INTEREST
          return OVERDUE_FINE_INTEREST;
        case 26: // OVERDUE_LOAN_INTEREST
          return OVERDUE_LOAN_INTEREST;
        case 27: // PLAN_REPAY_DT
          return PLAN_REPAY_DT;
        case 28: // LOAN_INFO_ID
          return LOAN_INFO_ID;
        case 29: // PROJECT_ID
          return PROJECT_ID;
        case 30: // PAGE
          return PAGE;
        case 31: // P_COUNT
          return P_COUNT;
        case 32: // RESULTS
          return RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __SHOULDPRINCIPAL_ISSET_ID = 1;
  private static final int __SHOULDINTEREST_ISSET_ID = 2;
  private static final int __SHOULDMANGCOST_ISSET_ID = 3;
  private static final int __SHOULDOTHERCOST_ISSET_ID = 4;
  private static final int __HASHOULDPRINCIPAL_ISSET_ID = 5;
  private static final int __HASSHOULDINTEREST_ISSET_ID = 6;
  private static final int __HASSHOULDMANGCOST_ISSET_ID = 7;
  private static final int __HASSHOULDOTHERCOST_ISSET_ID = 8;
  private static final int __NOSHOULDPRINCIPAL_ISSET_ID = 9;
  private static final int __NOSHOULDINTEREST_ISSET_ID = 10;
  private static final int __NOSHOULDMANGCOST_ISSET_ID = 11;
  private static final int __NOSHOULDOTHERCOST_ISSET_ID = 12;
  private static final int __NOVERDUEFINEINTEREST_ISSET_ID = 13;
  private static final int __NOVERDUELOANINTEREST_ISSET_ID = 14;
  private static final int __PRINCIPALBALANCE_ISSET_ID = 15;
  private static final int __NOTOTAL_ISSET_ID = 16;
  private static final int __ISRECONCILIATION_ISSET_ID = 17;
  private static final int __PLANCYCLENUM_ISSET_ID = 18;
  private static final int __ROWNUM_ISSET_ID = 19;
  private static final int __OVERDUEFINEINTEREST_ISSET_ID = 20;
  private static final int __OVERDUELOANINTEREST_ISSET_ID = 21;
  private static final int __LOANINFOID_ISSET_ID = 22;
  private static final int __PROJECTID_ISSET_ID = 23;
  private static final int __PAGE_ISSET_ID = 24;
  private static final int __PCOUNT_ISSET_ID = 25;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_LOAD_NO, new org.apache.thrift.meta_data.FieldMetaData("contractLoadNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("shouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HASHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("hashouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HASSHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("hasshouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HASSHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("hasshouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HASSHOULD_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("hasshouldOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOSHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("noshouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOSHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("noshouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOSHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("noshouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOSHOULD_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("noshouldOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOVERDUE_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("noverdueFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOVERDUE_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("noverdueLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("principalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NO_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("noTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("isReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROW_NUM, new org.apache.thrift.meta_data.FieldMetaData("rowNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_INFO_ID, new org.apache.thrift.meta_data.FieldMetaData("loanInfoId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "RepayOverdueDTO"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepayOverdueDTO.class, metaDataMap);
  }

  public RepayOverdueDTO() {
  }

  public RepayOverdueDTO(
    int pId,
    String cusName,
    String contractLoadNo,
    double shouldPrincipal,
    double shouldInterest,
    double shouldMangCost,
    double shouldOtherCost,
    double hashouldPrincipal,
    double hasshouldInterest,
    double hasshouldMangCost,
    double hasshouldOtherCost,
    double noshouldPrincipal,
    double noshouldInterest,
    double noshouldMangCost,
    double noshouldOtherCost,
    String projectName,
    String projectNumber,
    double noverdueFineInterest,
    double noverdueLoanInterest,
    double principalBalance,
    double noTotal,
    int isReconciliation,
    int planCycleNum,
    int rowNum,
    double overdueFineInterest,
    double overdueLoanInterest,
    String planRepayDt,
    int loanInfoId,
    int projectId,
    int page,
    int pCount,
    List<RepayOverdueDTO> results)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.cusName = cusName;
    this.contractLoadNo = contractLoadNo;
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    this.hashouldPrincipal = hashouldPrincipal;
    setHashouldPrincipalIsSet(true);
    this.hasshouldInterest = hasshouldInterest;
    setHasshouldInterestIsSet(true);
    this.hasshouldMangCost = hasshouldMangCost;
    setHasshouldMangCostIsSet(true);
    this.hasshouldOtherCost = hasshouldOtherCost;
    setHasshouldOtherCostIsSet(true);
    this.noshouldPrincipal = noshouldPrincipal;
    setNoshouldPrincipalIsSet(true);
    this.noshouldInterest = noshouldInterest;
    setNoshouldInterestIsSet(true);
    this.noshouldMangCost = noshouldMangCost;
    setNoshouldMangCostIsSet(true);
    this.noshouldOtherCost = noshouldOtherCost;
    setNoshouldOtherCostIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.noverdueFineInterest = noverdueFineInterest;
    setNoverdueFineInterestIsSet(true);
    this.noverdueLoanInterest = noverdueLoanInterest;
    setNoverdueLoanInterestIsSet(true);
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    this.noTotal = noTotal;
    setNoTotalIsSet(true);
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.rowNum = rowNum;
    setRowNumIsSet(true);
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    this.planRepayDt = planRepayDt;
    this.loanInfoId = loanInfoId;
    setLoanInfoIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.pCount = pCount;
    setPCountIsSet(true);
    this.results = results;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepayOverdueDTO(RepayOverdueDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    if (other.isSetContractLoadNo()) {
      this.contractLoadNo = other.contractLoadNo;
    }
    this.shouldPrincipal = other.shouldPrincipal;
    this.shouldInterest = other.shouldInterest;
    this.shouldMangCost = other.shouldMangCost;
    this.shouldOtherCost = other.shouldOtherCost;
    this.hashouldPrincipal = other.hashouldPrincipal;
    this.hasshouldInterest = other.hasshouldInterest;
    this.hasshouldMangCost = other.hasshouldMangCost;
    this.hasshouldOtherCost = other.hasshouldOtherCost;
    this.noshouldPrincipal = other.noshouldPrincipal;
    this.noshouldInterest = other.noshouldInterest;
    this.noshouldMangCost = other.noshouldMangCost;
    this.noshouldOtherCost = other.noshouldOtherCost;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.noverdueFineInterest = other.noverdueFineInterest;
    this.noverdueLoanInterest = other.noverdueLoanInterest;
    this.principalBalance = other.principalBalance;
    this.noTotal = other.noTotal;
    this.isReconciliation = other.isReconciliation;
    this.planCycleNum = other.planCycleNum;
    this.rowNum = other.rowNum;
    this.overdueFineInterest = other.overdueFineInterest;
    this.overdueLoanInterest = other.overdueLoanInterest;
    if (other.isSetPlanRepayDt()) {
      this.planRepayDt = other.planRepayDt;
    }
    this.loanInfoId = other.loanInfoId;
    this.projectId = other.projectId;
    this.page = other.page;
    this.pCount = other.pCount;
    if (other.isSetResults()) {
      List<RepayOverdueDTO> __this__results = new ArrayList<RepayOverdueDTO>(other.results.size());
      for (RepayOverdueDTO other_element : other.results) {
        __this__results.add(other_element);
      }
      this.results = __this__results;
    }
  }

  public RepayOverdueDTO deepCopy() {
    return new RepayOverdueDTO(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    this.cusName = null;
    this.contractLoadNo = null;
    setShouldPrincipalIsSet(false);
    this.shouldPrincipal = 0.0;
    setShouldInterestIsSet(false);
    this.shouldInterest = 0.0;
    setShouldMangCostIsSet(false);
    this.shouldMangCost = 0.0;
    setShouldOtherCostIsSet(false);
    this.shouldOtherCost = 0.0;
    setHashouldPrincipalIsSet(false);
    this.hashouldPrincipal = 0.0;
    setHasshouldInterestIsSet(false);
    this.hasshouldInterest = 0.0;
    setHasshouldMangCostIsSet(false);
    this.hasshouldMangCost = 0.0;
    setHasshouldOtherCostIsSet(false);
    this.hasshouldOtherCost = 0.0;
    setNoshouldPrincipalIsSet(false);
    this.noshouldPrincipal = 0.0;
    setNoshouldInterestIsSet(false);
    this.noshouldInterest = 0.0;
    setNoshouldMangCostIsSet(false);
    this.noshouldMangCost = 0.0;
    setNoshouldOtherCostIsSet(false);
    this.noshouldOtherCost = 0.0;
    this.projectName = null;
    this.projectNumber = null;
    setNoverdueFineInterestIsSet(false);
    this.noverdueFineInterest = 0.0;
    setNoverdueLoanInterestIsSet(false);
    this.noverdueLoanInterest = 0.0;
    setPrincipalBalanceIsSet(false);
    this.principalBalance = 0.0;
    setNoTotalIsSet(false);
    this.noTotal = 0.0;
    setIsReconciliationIsSet(false);
    this.isReconciliation = 0;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    setRowNumIsSet(false);
    this.rowNum = 0;
    setOverdueFineInterestIsSet(false);
    this.overdueFineInterest = 0.0;
    setOverdueLoanInterestIsSet(false);
    this.overdueLoanInterest = 0.0;
    this.planRepayDt = null;
    setLoanInfoIdIsSet(false);
    this.loanInfoId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setPageIsSet(false);
    this.page = 0;
    setPCountIsSet(false);
    this.pCount = 0;
    this.results = null;
  }

  public int getPId() {
    return this.pId;
  }

  public RepayOverdueDTO setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getCusName() {
    return this.cusName;
  }

  public RepayOverdueDTO setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public String getContractLoadNo() {
    return this.contractLoadNo;
  }

  public RepayOverdueDTO setContractLoadNo(String contractLoadNo) {
    this.contractLoadNo = contractLoadNo;
    return this;
  }

  public void unsetContractLoadNo() {
    this.contractLoadNo = null;
  }

  /** Returns true if field contractLoadNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractLoadNo() {
    return this.contractLoadNo != null;
  }

  public void setContractLoadNoIsSet(boolean value) {
    if (!value) {
      this.contractLoadNo = null;
    }
  }

  public double getShouldPrincipal() {
    return this.shouldPrincipal;
  }

  public RepayOverdueDTO setShouldPrincipal(double shouldPrincipal) {
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    return this;
  }

  public void unsetShouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field shouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  public void setShouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getShouldInterest() {
    return this.shouldInterest;
  }

  public RepayOverdueDTO setShouldInterest(double shouldInterest) {
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    return this;
  }

  public void unsetShouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field shouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  public void setShouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID, value);
  }

  public double getShouldMangCost() {
    return this.shouldMangCost;
  }

  public RepayOverdueDTO setShouldMangCost(double shouldMangCost) {
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    return this;
  }

  public void unsetShouldMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  /** Returns true if field shouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  public void setShouldMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID, value);
  }

  public double getShouldOtherCost() {
    return this.shouldOtherCost;
  }

  public RepayOverdueDTO setShouldOtherCost(double shouldOtherCost) {
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    return this;
  }

  public void unsetShouldOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field shouldOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  public void setShouldOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID, value);
  }

  public double getHashouldPrincipal() {
    return this.hashouldPrincipal;
  }

  public RepayOverdueDTO setHashouldPrincipal(double hashouldPrincipal) {
    this.hashouldPrincipal = hashouldPrincipal;
    setHashouldPrincipalIsSet(true);
    return this;
  }

  public void unsetHashouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field hashouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetHashouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __HASHOULDPRINCIPAL_ISSET_ID);
  }

  public void setHashouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getHasshouldInterest() {
    return this.hasshouldInterest;
  }

  public RepayOverdueDTO setHasshouldInterest(double hasshouldInterest) {
    this.hasshouldInterest = hasshouldInterest;
    setHasshouldInterestIsSet(true);
    return this;
  }

  public void unsetHasshouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field hasshouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetHasshouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSHOULDINTEREST_ISSET_ID);
  }

  public void setHasshouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSHOULDINTEREST_ISSET_ID, value);
  }

  public double getHasshouldMangCost() {
    return this.hasshouldMangCost;
  }

  public RepayOverdueDTO setHasshouldMangCost(double hasshouldMangCost) {
    this.hasshouldMangCost = hasshouldMangCost;
    setHasshouldMangCostIsSet(true);
    return this;
  }

  public void unsetHasshouldMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSHOULDMANGCOST_ISSET_ID);
  }

  /** Returns true if field hasshouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetHasshouldMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSHOULDMANGCOST_ISSET_ID);
  }

  public void setHasshouldMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSHOULDMANGCOST_ISSET_ID, value);
  }

  public double getHasshouldOtherCost() {
    return this.hasshouldOtherCost;
  }

  public RepayOverdueDTO setHasshouldOtherCost(double hasshouldOtherCost) {
    this.hasshouldOtherCost = hasshouldOtherCost;
    setHasshouldOtherCostIsSet(true);
    return this;
  }

  public void unsetHasshouldOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSHOULDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field hasshouldOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetHasshouldOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSHOULDOTHERCOST_ISSET_ID);
  }

  public void setHasshouldOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSHOULDOTHERCOST_ISSET_ID, value);
  }

  public double getNoshouldPrincipal() {
    return this.noshouldPrincipal;
  }

  public RepayOverdueDTO setNoshouldPrincipal(double noshouldPrincipal) {
    this.noshouldPrincipal = noshouldPrincipal;
    setNoshouldPrincipalIsSet(true);
    return this;
  }

  public void unsetNoshouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOSHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field noshouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetNoshouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __NOSHOULDPRINCIPAL_ISSET_ID);
  }

  public void setNoshouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOSHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getNoshouldInterest() {
    return this.noshouldInterest;
  }

  public RepayOverdueDTO setNoshouldInterest(double noshouldInterest) {
    this.noshouldInterest = noshouldInterest;
    setNoshouldInterestIsSet(true);
    return this;
  }

  public void unsetNoshouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOSHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field noshouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetNoshouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __NOSHOULDINTEREST_ISSET_ID);
  }

  public void setNoshouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOSHOULDINTEREST_ISSET_ID, value);
  }

  public double getNoshouldMangCost() {
    return this.noshouldMangCost;
  }

  public RepayOverdueDTO setNoshouldMangCost(double noshouldMangCost) {
    this.noshouldMangCost = noshouldMangCost;
    setNoshouldMangCostIsSet(true);
    return this;
  }

  public void unsetNoshouldMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOSHOULDMANGCOST_ISSET_ID);
  }

  /** Returns true if field noshouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetNoshouldMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __NOSHOULDMANGCOST_ISSET_ID);
  }

  public void setNoshouldMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOSHOULDMANGCOST_ISSET_ID, value);
  }

  public double getNoshouldOtherCost() {
    return this.noshouldOtherCost;
  }

  public RepayOverdueDTO setNoshouldOtherCost(double noshouldOtherCost) {
    this.noshouldOtherCost = noshouldOtherCost;
    setNoshouldOtherCostIsSet(true);
    return this;
  }

  public void unsetNoshouldOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOSHOULDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field noshouldOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetNoshouldOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __NOSHOULDOTHERCOST_ISSET_ID);
  }

  public void setNoshouldOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOSHOULDOTHERCOST_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RepayOverdueDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public RepayOverdueDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public double getNoverdueFineInterest() {
    return this.noverdueFineInterest;
  }

  public RepayOverdueDTO setNoverdueFineInterest(double noverdueFineInterest) {
    this.noverdueFineInterest = noverdueFineInterest;
    setNoverdueFineInterestIsSet(true);
    return this;
  }

  public void unsetNoverdueFineInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOVERDUEFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field noverdueFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetNoverdueFineInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __NOVERDUEFINEINTEREST_ISSET_ID);
  }

  public void setNoverdueFineInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOVERDUEFINEINTEREST_ISSET_ID, value);
  }

  public double getNoverdueLoanInterest() {
    return this.noverdueLoanInterest;
  }

  public RepayOverdueDTO setNoverdueLoanInterest(double noverdueLoanInterest) {
    this.noverdueLoanInterest = noverdueLoanInterest;
    setNoverdueLoanInterestIsSet(true);
    return this;
  }

  public void unsetNoverdueLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOVERDUELOANINTEREST_ISSET_ID);
  }

  /** Returns true if field noverdueLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetNoverdueLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __NOVERDUELOANINTEREST_ISSET_ID);
  }

  public void setNoverdueLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOVERDUELOANINTEREST_ISSET_ID, value);
  }

  public double getPrincipalBalance() {
    return this.principalBalance;
  }

  public RepayOverdueDTO setPrincipalBalance(double principalBalance) {
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    return this;
  }

  public void unsetPrincipalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  /** Returns true if field principalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  public void setPrincipalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID, value);
  }

  public double getNoTotal() {
    return this.noTotal;
  }

  public RepayOverdueDTO setNoTotal(double noTotal) {
    this.noTotal = noTotal;
    setNoTotalIsSet(true);
    return this;
  }

  public void unsetNoTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTOTAL_ISSET_ID);
  }

  /** Returns true if field noTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetNoTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTOTAL_ISSET_ID);
  }

  public void setNoTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTOTAL_ISSET_ID, value);
  }

  public int getIsReconciliation() {
    return this.isReconciliation;
  }

  public RepayOverdueDTO setIsReconciliation(int isReconciliation) {
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    return this;
  }

  public void unsetIsReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  /** Returns true if field isReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  public void setIsReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID, value);
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public RepayOverdueDTO setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public int getRowNum() {
    return this.rowNum;
  }

  public RepayOverdueDTO setRowNum(int rowNum) {
    this.rowNum = rowNum;
    setRowNumIsSet(true);
    return this;
  }

  public void unsetRowNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWNUM_ISSET_ID);
  }

  /** Returns true if field rowNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRowNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWNUM_ISSET_ID);
  }

  public void setRowNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWNUM_ISSET_ID, value);
  }

  public double getOverdueFineInterest() {
    return this.overdueFineInterest;
  }

  public RepayOverdueDTO setOverdueFineInterest(double overdueFineInterest) {
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    return this;
  }

  public void unsetOverdueFineInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFineInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  public void setOverdueFineInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID, value);
  }

  public double getOverdueLoanInterest() {
    return this.overdueLoanInterest;
  }

  public RepayOverdueDTO setOverdueLoanInterest(double overdueLoanInterest) {
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    return this;
  }

  public void unsetOverdueLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  public void setOverdueLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID, value);
  }

  public String getPlanRepayDt() {
    return this.planRepayDt;
  }

  public RepayOverdueDTO setPlanRepayDt(String planRepayDt) {
    this.planRepayDt = planRepayDt;
    return this;
  }

  public void unsetPlanRepayDt() {
    this.planRepayDt = null;
  }

  /** Returns true if field planRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDt() {
    return this.planRepayDt != null;
  }

  public void setPlanRepayDtIsSet(boolean value) {
    if (!value) {
      this.planRepayDt = null;
    }
  }

  public int getLoanInfoId() {
    return this.loanInfoId;
  }

  public RepayOverdueDTO setLoanInfoId(int loanInfoId) {
    this.loanInfoId = loanInfoId;
    setLoanInfoIdIsSet(true);
    return this;
  }

  public void unsetLoanInfoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANINFOID_ISSET_ID);
  }

  /** Returns true if field loanInfoId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInfoId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANINFOID_ISSET_ID);
  }

  public void setLoanInfoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANINFOID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepayOverdueDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public RepayOverdueDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPCount() {
    return this.pCount;
  }

  public RepayOverdueDTO setPCount(int pCount) {
    this.pCount = pCount;
    setPCountIsSet(true);
    return this;
  }

  public void unsetPCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PCOUNT_ISSET_ID);
  }

  /** Returns true if field pCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PCOUNT_ISSET_ID);
  }

  public void setPCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PCOUNT_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<RepayOverdueDTO> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(RepayOverdueDTO elem) {
    if (this.results == null) {
      this.results = new ArrayList<RepayOverdueDTO>();
    }
    this.results.add(elem);
  }

  public List<RepayOverdueDTO> getResults() {
    return this.results;
  }

  public RepayOverdueDTO setResults(List<RepayOverdueDTO> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case CONTRACT_LOAD_NO:
      if (value == null) {
        unsetContractLoadNo();
      } else {
        setContractLoadNo((String)value);
      }
      break;

    case SHOULD_PRINCIPAL:
      if (value == null) {
        unsetShouldPrincipal();
      } else {
        setShouldPrincipal((Double)value);
      }
      break;

    case SHOULD_INTEREST:
      if (value == null) {
        unsetShouldInterest();
      } else {
        setShouldInterest((Double)value);
      }
      break;

    case SHOULD_MANG_COST:
      if (value == null) {
        unsetShouldMangCost();
      } else {
        setShouldMangCost((Double)value);
      }
      break;

    case SHOULD_OTHER_COST:
      if (value == null) {
        unsetShouldOtherCost();
      } else {
        setShouldOtherCost((Double)value);
      }
      break;

    case HASHOULD_PRINCIPAL:
      if (value == null) {
        unsetHashouldPrincipal();
      } else {
        setHashouldPrincipal((Double)value);
      }
      break;

    case HASSHOULD_INTEREST:
      if (value == null) {
        unsetHasshouldInterest();
      } else {
        setHasshouldInterest((Double)value);
      }
      break;

    case HASSHOULD_MANG_COST:
      if (value == null) {
        unsetHasshouldMangCost();
      } else {
        setHasshouldMangCost((Double)value);
      }
      break;

    case HASSHOULD_OTHER_COST:
      if (value == null) {
        unsetHasshouldOtherCost();
      } else {
        setHasshouldOtherCost((Double)value);
      }
      break;

    case NOSHOULD_PRINCIPAL:
      if (value == null) {
        unsetNoshouldPrincipal();
      } else {
        setNoshouldPrincipal((Double)value);
      }
      break;

    case NOSHOULD_INTEREST:
      if (value == null) {
        unsetNoshouldInterest();
      } else {
        setNoshouldInterest((Double)value);
      }
      break;

    case NOSHOULD_MANG_COST:
      if (value == null) {
        unsetNoshouldMangCost();
      } else {
        setNoshouldMangCost((Double)value);
      }
      break;

    case NOSHOULD_OTHER_COST:
      if (value == null) {
        unsetNoshouldOtherCost();
      } else {
        setNoshouldOtherCost((Double)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case NOVERDUE_FINE_INTEREST:
      if (value == null) {
        unsetNoverdueFineInterest();
      } else {
        setNoverdueFineInterest((Double)value);
      }
      break;

    case NOVERDUE_LOAN_INTEREST:
      if (value == null) {
        unsetNoverdueLoanInterest();
      } else {
        setNoverdueLoanInterest((Double)value);
      }
      break;

    case PRINCIPAL_BALANCE:
      if (value == null) {
        unsetPrincipalBalance();
      } else {
        setPrincipalBalance((Double)value);
      }
      break;

    case NO_TOTAL:
      if (value == null) {
        unsetNoTotal();
      } else {
        setNoTotal((Double)value);
      }
      break;

    case IS_RECONCILIATION:
      if (value == null) {
        unsetIsReconciliation();
      } else {
        setIsReconciliation((Integer)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case ROW_NUM:
      if (value == null) {
        unsetRowNum();
      } else {
        setRowNum((Integer)value);
      }
      break;

    case OVERDUE_FINE_INTEREST:
      if (value == null) {
        unsetOverdueFineInterest();
      } else {
        setOverdueFineInterest((Double)value);
      }
      break;

    case OVERDUE_LOAN_INTEREST:
      if (value == null) {
        unsetOverdueLoanInterest();
      } else {
        setOverdueLoanInterest((Double)value);
      }
      break;

    case PLAN_REPAY_DT:
      if (value == null) {
        unsetPlanRepayDt();
      } else {
        setPlanRepayDt((String)value);
      }
      break;

    case LOAN_INFO_ID:
      if (value == null) {
        unsetLoanInfoId();
      } else {
        setLoanInfoId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case P_COUNT:
      if (value == null) {
        unsetPCount();
      } else {
        setPCount((Integer)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<RepayOverdueDTO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case CUS_NAME:
      return getCusName();

    case CONTRACT_LOAD_NO:
      return getContractLoadNo();

    case SHOULD_PRINCIPAL:
      return Double.valueOf(getShouldPrincipal());

    case SHOULD_INTEREST:
      return Double.valueOf(getShouldInterest());

    case SHOULD_MANG_COST:
      return Double.valueOf(getShouldMangCost());

    case SHOULD_OTHER_COST:
      return Double.valueOf(getShouldOtherCost());

    case HASHOULD_PRINCIPAL:
      return Double.valueOf(getHashouldPrincipal());

    case HASSHOULD_INTEREST:
      return Double.valueOf(getHasshouldInterest());

    case HASSHOULD_MANG_COST:
      return Double.valueOf(getHasshouldMangCost());

    case HASSHOULD_OTHER_COST:
      return Double.valueOf(getHasshouldOtherCost());

    case NOSHOULD_PRINCIPAL:
      return Double.valueOf(getNoshouldPrincipal());

    case NOSHOULD_INTEREST:
      return Double.valueOf(getNoshouldInterest());

    case NOSHOULD_MANG_COST:
      return Double.valueOf(getNoshouldMangCost());

    case NOSHOULD_OTHER_COST:
      return Double.valueOf(getNoshouldOtherCost());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case NOVERDUE_FINE_INTEREST:
      return Double.valueOf(getNoverdueFineInterest());

    case NOVERDUE_LOAN_INTEREST:
      return Double.valueOf(getNoverdueLoanInterest());

    case PRINCIPAL_BALANCE:
      return Double.valueOf(getPrincipalBalance());

    case NO_TOTAL:
      return Double.valueOf(getNoTotal());

    case IS_RECONCILIATION:
      return Integer.valueOf(getIsReconciliation());

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case ROW_NUM:
      return Integer.valueOf(getRowNum());

    case OVERDUE_FINE_INTEREST:
      return Double.valueOf(getOverdueFineInterest());

    case OVERDUE_LOAN_INTEREST:
      return Double.valueOf(getOverdueLoanInterest());

    case PLAN_REPAY_DT:
      return getPlanRepayDt();

    case LOAN_INFO_ID:
      return Integer.valueOf(getLoanInfoId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PAGE:
      return Integer.valueOf(getPage());

    case P_COUNT:
      return Integer.valueOf(getPCount());

    case RESULTS:
      return getResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case CUS_NAME:
      return isSetCusName();
    case CONTRACT_LOAD_NO:
      return isSetContractLoadNo();
    case SHOULD_PRINCIPAL:
      return isSetShouldPrincipal();
    case SHOULD_INTEREST:
      return isSetShouldInterest();
    case SHOULD_MANG_COST:
      return isSetShouldMangCost();
    case SHOULD_OTHER_COST:
      return isSetShouldOtherCost();
    case HASHOULD_PRINCIPAL:
      return isSetHashouldPrincipal();
    case HASSHOULD_INTEREST:
      return isSetHasshouldInterest();
    case HASSHOULD_MANG_COST:
      return isSetHasshouldMangCost();
    case HASSHOULD_OTHER_COST:
      return isSetHasshouldOtherCost();
    case NOSHOULD_PRINCIPAL:
      return isSetNoshouldPrincipal();
    case NOSHOULD_INTEREST:
      return isSetNoshouldInterest();
    case NOSHOULD_MANG_COST:
      return isSetNoshouldMangCost();
    case NOSHOULD_OTHER_COST:
      return isSetNoshouldOtherCost();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case NOVERDUE_FINE_INTEREST:
      return isSetNoverdueFineInterest();
    case NOVERDUE_LOAN_INTEREST:
      return isSetNoverdueLoanInterest();
    case PRINCIPAL_BALANCE:
      return isSetPrincipalBalance();
    case NO_TOTAL:
      return isSetNoTotal();
    case IS_RECONCILIATION:
      return isSetIsReconciliation();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case ROW_NUM:
      return isSetRowNum();
    case OVERDUE_FINE_INTEREST:
      return isSetOverdueFineInterest();
    case OVERDUE_LOAN_INTEREST:
      return isSetOverdueLoanInterest();
    case PLAN_REPAY_DT:
      return isSetPlanRepayDt();
    case LOAN_INFO_ID:
      return isSetLoanInfoId();
    case PROJECT_ID:
      return isSetProjectId();
    case PAGE:
      return isSetPage();
    case P_COUNT:
      return isSetPCount();
    case RESULTS:
      return isSetResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepayOverdueDTO)
      return this.equals((RepayOverdueDTO)that);
    return false;
  }

  public boolean equals(RepayOverdueDTO that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_contractLoadNo = true && this.isSetContractLoadNo();
    boolean that_present_contractLoadNo = true && that.isSetContractLoadNo();
    if (this_present_contractLoadNo || that_present_contractLoadNo) {
      if (!(this_present_contractLoadNo && that_present_contractLoadNo))
        return false;
      if (!this.contractLoadNo.equals(that.contractLoadNo))
        return false;
    }

    boolean this_present_shouldPrincipal = true;
    boolean that_present_shouldPrincipal = true;
    if (this_present_shouldPrincipal || that_present_shouldPrincipal) {
      if (!(this_present_shouldPrincipal && that_present_shouldPrincipal))
        return false;
      if (this.shouldPrincipal != that.shouldPrincipal)
        return false;
    }

    boolean this_present_shouldInterest = true;
    boolean that_present_shouldInterest = true;
    if (this_present_shouldInterest || that_present_shouldInterest) {
      if (!(this_present_shouldInterest && that_present_shouldInterest))
        return false;
      if (this.shouldInterest != that.shouldInterest)
        return false;
    }

    boolean this_present_shouldMangCost = true;
    boolean that_present_shouldMangCost = true;
    if (this_present_shouldMangCost || that_present_shouldMangCost) {
      if (!(this_present_shouldMangCost && that_present_shouldMangCost))
        return false;
      if (this.shouldMangCost != that.shouldMangCost)
        return false;
    }

    boolean this_present_shouldOtherCost = true;
    boolean that_present_shouldOtherCost = true;
    if (this_present_shouldOtherCost || that_present_shouldOtherCost) {
      if (!(this_present_shouldOtherCost && that_present_shouldOtherCost))
        return false;
      if (this.shouldOtherCost != that.shouldOtherCost)
        return false;
    }

    boolean this_present_hashouldPrincipal = true;
    boolean that_present_hashouldPrincipal = true;
    if (this_present_hashouldPrincipal || that_present_hashouldPrincipal) {
      if (!(this_present_hashouldPrincipal && that_present_hashouldPrincipal))
        return false;
      if (this.hashouldPrincipal != that.hashouldPrincipal)
        return false;
    }

    boolean this_present_hasshouldInterest = true;
    boolean that_present_hasshouldInterest = true;
    if (this_present_hasshouldInterest || that_present_hasshouldInterest) {
      if (!(this_present_hasshouldInterest && that_present_hasshouldInterest))
        return false;
      if (this.hasshouldInterest != that.hasshouldInterest)
        return false;
    }

    boolean this_present_hasshouldMangCost = true;
    boolean that_present_hasshouldMangCost = true;
    if (this_present_hasshouldMangCost || that_present_hasshouldMangCost) {
      if (!(this_present_hasshouldMangCost && that_present_hasshouldMangCost))
        return false;
      if (this.hasshouldMangCost != that.hasshouldMangCost)
        return false;
    }

    boolean this_present_hasshouldOtherCost = true;
    boolean that_present_hasshouldOtherCost = true;
    if (this_present_hasshouldOtherCost || that_present_hasshouldOtherCost) {
      if (!(this_present_hasshouldOtherCost && that_present_hasshouldOtherCost))
        return false;
      if (this.hasshouldOtherCost != that.hasshouldOtherCost)
        return false;
    }

    boolean this_present_noshouldPrincipal = true;
    boolean that_present_noshouldPrincipal = true;
    if (this_present_noshouldPrincipal || that_present_noshouldPrincipal) {
      if (!(this_present_noshouldPrincipal && that_present_noshouldPrincipal))
        return false;
      if (this.noshouldPrincipal != that.noshouldPrincipal)
        return false;
    }

    boolean this_present_noshouldInterest = true;
    boolean that_present_noshouldInterest = true;
    if (this_present_noshouldInterest || that_present_noshouldInterest) {
      if (!(this_present_noshouldInterest && that_present_noshouldInterest))
        return false;
      if (this.noshouldInterest != that.noshouldInterest)
        return false;
    }

    boolean this_present_noshouldMangCost = true;
    boolean that_present_noshouldMangCost = true;
    if (this_present_noshouldMangCost || that_present_noshouldMangCost) {
      if (!(this_present_noshouldMangCost && that_present_noshouldMangCost))
        return false;
      if (this.noshouldMangCost != that.noshouldMangCost)
        return false;
    }

    boolean this_present_noshouldOtherCost = true;
    boolean that_present_noshouldOtherCost = true;
    if (this_present_noshouldOtherCost || that_present_noshouldOtherCost) {
      if (!(this_present_noshouldOtherCost && that_present_noshouldOtherCost))
        return false;
      if (this.noshouldOtherCost != that.noshouldOtherCost)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_noverdueFineInterest = true;
    boolean that_present_noverdueFineInterest = true;
    if (this_present_noverdueFineInterest || that_present_noverdueFineInterest) {
      if (!(this_present_noverdueFineInterest && that_present_noverdueFineInterest))
        return false;
      if (this.noverdueFineInterest != that.noverdueFineInterest)
        return false;
    }

    boolean this_present_noverdueLoanInterest = true;
    boolean that_present_noverdueLoanInterest = true;
    if (this_present_noverdueLoanInterest || that_present_noverdueLoanInterest) {
      if (!(this_present_noverdueLoanInterest && that_present_noverdueLoanInterest))
        return false;
      if (this.noverdueLoanInterest != that.noverdueLoanInterest)
        return false;
    }

    boolean this_present_principalBalance = true;
    boolean that_present_principalBalance = true;
    if (this_present_principalBalance || that_present_principalBalance) {
      if (!(this_present_principalBalance && that_present_principalBalance))
        return false;
      if (this.principalBalance != that.principalBalance)
        return false;
    }

    boolean this_present_noTotal = true;
    boolean that_present_noTotal = true;
    if (this_present_noTotal || that_present_noTotal) {
      if (!(this_present_noTotal && that_present_noTotal))
        return false;
      if (this.noTotal != that.noTotal)
        return false;
    }

    boolean this_present_isReconciliation = true;
    boolean that_present_isReconciliation = true;
    if (this_present_isReconciliation || that_present_isReconciliation) {
      if (!(this_present_isReconciliation && that_present_isReconciliation))
        return false;
      if (this.isReconciliation != that.isReconciliation)
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_rowNum = true;
    boolean that_present_rowNum = true;
    if (this_present_rowNum || that_present_rowNum) {
      if (!(this_present_rowNum && that_present_rowNum))
        return false;
      if (this.rowNum != that.rowNum)
        return false;
    }

    boolean this_present_overdueFineInterest = true;
    boolean that_present_overdueFineInterest = true;
    if (this_present_overdueFineInterest || that_present_overdueFineInterest) {
      if (!(this_present_overdueFineInterest && that_present_overdueFineInterest))
        return false;
      if (this.overdueFineInterest != that.overdueFineInterest)
        return false;
    }

    boolean this_present_overdueLoanInterest = true;
    boolean that_present_overdueLoanInterest = true;
    if (this_present_overdueLoanInterest || that_present_overdueLoanInterest) {
      if (!(this_present_overdueLoanInterest && that_present_overdueLoanInterest))
        return false;
      if (this.overdueLoanInterest != that.overdueLoanInterest)
        return false;
    }

    boolean this_present_planRepayDt = true && this.isSetPlanRepayDt();
    boolean that_present_planRepayDt = true && that.isSetPlanRepayDt();
    if (this_present_planRepayDt || that_present_planRepayDt) {
      if (!(this_present_planRepayDt && that_present_planRepayDt))
        return false;
      if (!this.planRepayDt.equals(that.planRepayDt))
        return false;
    }

    boolean this_present_loanInfoId = true;
    boolean that_present_loanInfoId = true;
    if (this_present_loanInfoId || that_present_loanInfoId) {
      if (!(this_present_loanInfoId && that_present_loanInfoId))
        return false;
      if (this.loanInfoId != that.loanInfoId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_pCount = true;
    boolean that_present_pCount = true;
    if (this_present_pCount || that_present_pCount) {
      if (!(this_present_pCount && that_present_pCount))
        return false;
      if (this.pCount != that.pCount)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_contractLoadNo = true && (isSetContractLoadNo());
    list.add(present_contractLoadNo);
    if (present_contractLoadNo)
      list.add(contractLoadNo);

    boolean present_shouldPrincipal = true;
    list.add(present_shouldPrincipal);
    if (present_shouldPrincipal)
      list.add(shouldPrincipal);

    boolean present_shouldInterest = true;
    list.add(present_shouldInterest);
    if (present_shouldInterest)
      list.add(shouldInterest);

    boolean present_shouldMangCost = true;
    list.add(present_shouldMangCost);
    if (present_shouldMangCost)
      list.add(shouldMangCost);

    boolean present_shouldOtherCost = true;
    list.add(present_shouldOtherCost);
    if (present_shouldOtherCost)
      list.add(shouldOtherCost);

    boolean present_hashouldPrincipal = true;
    list.add(present_hashouldPrincipal);
    if (present_hashouldPrincipal)
      list.add(hashouldPrincipal);

    boolean present_hasshouldInterest = true;
    list.add(present_hasshouldInterest);
    if (present_hasshouldInterest)
      list.add(hasshouldInterest);

    boolean present_hasshouldMangCost = true;
    list.add(present_hasshouldMangCost);
    if (present_hasshouldMangCost)
      list.add(hasshouldMangCost);

    boolean present_hasshouldOtherCost = true;
    list.add(present_hasshouldOtherCost);
    if (present_hasshouldOtherCost)
      list.add(hasshouldOtherCost);

    boolean present_noshouldPrincipal = true;
    list.add(present_noshouldPrincipal);
    if (present_noshouldPrincipal)
      list.add(noshouldPrincipal);

    boolean present_noshouldInterest = true;
    list.add(present_noshouldInterest);
    if (present_noshouldInterest)
      list.add(noshouldInterest);

    boolean present_noshouldMangCost = true;
    list.add(present_noshouldMangCost);
    if (present_noshouldMangCost)
      list.add(noshouldMangCost);

    boolean present_noshouldOtherCost = true;
    list.add(present_noshouldOtherCost);
    if (present_noshouldOtherCost)
      list.add(noshouldOtherCost);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_noverdueFineInterest = true;
    list.add(present_noverdueFineInterest);
    if (present_noverdueFineInterest)
      list.add(noverdueFineInterest);

    boolean present_noverdueLoanInterest = true;
    list.add(present_noverdueLoanInterest);
    if (present_noverdueLoanInterest)
      list.add(noverdueLoanInterest);

    boolean present_principalBalance = true;
    list.add(present_principalBalance);
    if (present_principalBalance)
      list.add(principalBalance);

    boolean present_noTotal = true;
    list.add(present_noTotal);
    if (present_noTotal)
      list.add(noTotal);

    boolean present_isReconciliation = true;
    list.add(present_isReconciliation);
    if (present_isReconciliation)
      list.add(isReconciliation);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_rowNum = true;
    list.add(present_rowNum);
    if (present_rowNum)
      list.add(rowNum);

    boolean present_overdueFineInterest = true;
    list.add(present_overdueFineInterest);
    if (present_overdueFineInterest)
      list.add(overdueFineInterest);

    boolean present_overdueLoanInterest = true;
    list.add(present_overdueLoanInterest);
    if (present_overdueLoanInterest)
      list.add(overdueLoanInterest);

    boolean present_planRepayDt = true && (isSetPlanRepayDt());
    list.add(present_planRepayDt);
    if (present_planRepayDt)
      list.add(planRepayDt);

    boolean present_loanInfoId = true;
    list.add(present_loanInfoId);
    if (present_loanInfoId)
      list.add(loanInfoId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_pCount = true;
    list.add(present_pCount);
    if (present_pCount)
      list.add(pCount);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepayOverdueDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractLoadNo()).compareTo(other.isSetContractLoadNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractLoadNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractLoadNo, other.contractLoadNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrincipal()).compareTo(other.isSetShouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrincipal, other.shouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldInterest()).compareTo(other.isSetShouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldInterest, other.shouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldMangCost()).compareTo(other.isSetShouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldMangCost, other.shouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOtherCost()).compareTo(other.isSetShouldOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOtherCost, other.shouldOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashouldPrincipal()).compareTo(other.isSetHashouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashouldPrincipal, other.hashouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasshouldInterest()).compareTo(other.isSetHasshouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasshouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasshouldInterest, other.hasshouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasshouldMangCost()).compareTo(other.isSetHasshouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasshouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasshouldMangCost, other.hasshouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasshouldOtherCost()).compareTo(other.isSetHasshouldOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasshouldOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasshouldOtherCost, other.hasshouldOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoshouldPrincipal()).compareTo(other.isSetNoshouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoshouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noshouldPrincipal, other.noshouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoshouldInterest()).compareTo(other.isSetNoshouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoshouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noshouldInterest, other.noshouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoshouldMangCost()).compareTo(other.isSetNoshouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoshouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noshouldMangCost, other.noshouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoshouldOtherCost()).compareTo(other.isSetNoshouldOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoshouldOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noshouldOtherCost, other.noshouldOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoverdueFineInterest()).compareTo(other.isSetNoverdueFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoverdueFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noverdueFineInterest, other.noverdueFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoverdueLoanInterest()).compareTo(other.isSetNoverdueLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoverdueLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noverdueLoanInterest, other.noverdueLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalBalance()).compareTo(other.isSetPrincipalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalBalance, other.principalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoTotal()).compareTo(other.isSetNoTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noTotal, other.noTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconciliation()).compareTo(other.isSetIsReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconciliation, other.isReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowNum()).compareTo(other.isSetRowNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowNum, other.rowNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFineInterest()).compareTo(other.isSetOverdueFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFineInterest, other.overdueFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueLoanInterest()).compareTo(other.isSetOverdueLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueLoanInterest, other.overdueLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDt()).compareTo(other.isSetPlanRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDt, other.planRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInfoId()).compareTo(other.isSetLoanInfoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInfoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInfoId, other.loanInfoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPCount()).compareTo(other.isSetPCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pCount, other.pCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepayOverdueDTO(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractLoadNo:");
    if (this.contractLoadNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractLoadNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrincipal:");
    sb.append(this.shouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldInterest:");
    sb.append(this.shouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldMangCost:");
    sb.append(this.shouldMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOtherCost:");
    sb.append(this.shouldOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hashouldPrincipal:");
    sb.append(this.hashouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasshouldInterest:");
    sb.append(this.hasshouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasshouldMangCost:");
    sb.append(this.hasshouldMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasshouldOtherCost:");
    sb.append(this.hasshouldOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noshouldPrincipal:");
    sb.append(this.noshouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noshouldInterest:");
    sb.append(this.noshouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noshouldMangCost:");
    sb.append(this.noshouldMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noshouldOtherCost:");
    sb.append(this.noshouldOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noverdueFineInterest:");
    sb.append(this.noverdueFineInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noverdueLoanInterest:");
    sb.append(this.noverdueLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalBalance:");
    sb.append(this.principalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noTotal:");
    sb.append(this.noTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReconciliation:");
    sb.append(this.isReconciliation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowNum:");
    sb.append(this.rowNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFineInterest:");
    sb.append(this.overdueFineInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueLoanInterest:");
    sb.append(this.overdueLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDt:");
    if (this.planRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInfoId:");
    sb.append(this.loanInfoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pCount:");
    sb.append(this.pCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepayOverdueDTOStandardSchemeFactory implements SchemeFactory {
    public RepayOverdueDTOStandardScheme getScheme() {
      return new RepayOverdueDTOStandardScheme();
    }
  }

  private static class RepayOverdueDTOStandardScheme extends StandardScheme<RepayOverdueDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepayOverdueDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_LOAD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractLoadNo = iprot.readString();
              struct.setContractLoadNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrincipal = iprot.readDouble();
              struct.setShouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldInterest = iprot.readDouble();
              struct.setShouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldMangCost = iprot.readDouble();
              struct.setShouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOULD_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOtherCost = iprot.readDouble();
              struct.setShouldOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HASHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hashouldPrincipal = iprot.readDouble();
              struct.setHashouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HASSHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hasshouldInterest = iprot.readDouble();
              struct.setHasshouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HASSHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hasshouldMangCost = iprot.readDouble();
              struct.setHasshouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HASSHOULD_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hasshouldOtherCost = iprot.readDouble();
              struct.setHasshouldOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NOSHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noshouldPrincipal = iprot.readDouble();
              struct.setNoshouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NOSHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noshouldInterest = iprot.readDouble();
              struct.setNoshouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOSHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noshouldMangCost = iprot.readDouble();
              struct.setNoshouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOSHOULD_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noshouldOtherCost = iprot.readDouble();
              struct.setNoshouldOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NOVERDUE_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noverdueFineInterest = iprot.readDouble();
              struct.setNoverdueFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // NOVERDUE_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noverdueLoanInterest = iprot.readDouble();
              struct.setNoverdueLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRINCIPAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalBalance = iprot.readDouble();
              struct.setPrincipalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NO_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noTotal = iprot.readDouble();
              struct.setNoTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReconciliation = iprot.readI32();
              struct.setIsReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ROW_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowNum = iprot.readI32();
              struct.setRowNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // OVERDUE_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFineInterest = iprot.readDouble();
              struct.setOverdueFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // OVERDUE_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueLoanInterest = iprot.readDouble();
              struct.setOverdueLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PLAN_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDt = iprot.readString();
              struct.setPlanRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LOAN_INFO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanInfoId = iprot.readI32();
              struct.setLoanInfoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // P_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pCount = iprot.readI32();
              struct.setPCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.results = new ArrayList<RepayOverdueDTO>(_list24.size);
                RepayOverdueDTO _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new RepayOverdueDTO();
                  _elem25.read(iprot);
                  struct.results.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepayOverdueDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      if (struct.contractLoadNo != null) {
        oprot.writeFieldBegin(CONTRACT_LOAD_NO_FIELD_DESC);
        oprot.writeString(struct.contractLoadNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.shouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HASHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.hashouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HASSHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.hasshouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HASSHOULD_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.hasshouldMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HASSHOULD_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.hasshouldOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOSHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.noshouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOSHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.noshouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOSHOULD_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.noshouldMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOSHOULD_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.noshouldOtherCost);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOVERDUE_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.noverdueFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOVERDUE_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.noverdueLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.principalBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.noTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.isReconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROW_NUM_FIELD_DESC);
      oprot.writeI32(struct.rowNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueLoanInterest);
      oprot.writeFieldEnd();
      if (struct.planRepayDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_INFO_ID_FIELD_DESC);
      oprot.writeI32(struct.loanInfoId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P_COUNT_FIELD_DESC);
      oprot.writeI32(struct.pCount);
      oprot.writeFieldEnd();
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (RepayOverdueDTO _iter27 : struct.results)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepayOverdueDTOTupleSchemeFactory implements SchemeFactory {
    public RepayOverdueDTOTupleScheme getScheme() {
      return new RepayOverdueDTOTupleScheme();
    }
  }

  private static class RepayOverdueDTOTupleScheme extends TupleScheme<RepayOverdueDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepayOverdueDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetCusName()) {
        optionals.set(1);
      }
      if (struct.isSetContractLoadNo()) {
        optionals.set(2);
      }
      if (struct.isSetShouldPrincipal()) {
        optionals.set(3);
      }
      if (struct.isSetShouldInterest()) {
        optionals.set(4);
      }
      if (struct.isSetShouldMangCost()) {
        optionals.set(5);
      }
      if (struct.isSetShouldOtherCost()) {
        optionals.set(6);
      }
      if (struct.isSetHashouldPrincipal()) {
        optionals.set(7);
      }
      if (struct.isSetHasshouldInterest()) {
        optionals.set(8);
      }
      if (struct.isSetHasshouldMangCost()) {
        optionals.set(9);
      }
      if (struct.isSetHasshouldOtherCost()) {
        optionals.set(10);
      }
      if (struct.isSetNoshouldPrincipal()) {
        optionals.set(11);
      }
      if (struct.isSetNoshouldInterest()) {
        optionals.set(12);
      }
      if (struct.isSetNoshouldMangCost()) {
        optionals.set(13);
      }
      if (struct.isSetNoshouldOtherCost()) {
        optionals.set(14);
      }
      if (struct.isSetProjectName()) {
        optionals.set(15);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(16);
      }
      if (struct.isSetNoverdueFineInterest()) {
        optionals.set(17);
      }
      if (struct.isSetNoverdueLoanInterest()) {
        optionals.set(18);
      }
      if (struct.isSetPrincipalBalance()) {
        optionals.set(19);
      }
      if (struct.isSetNoTotal()) {
        optionals.set(20);
      }
      if (struct.isSetIsReconciliation()) {
        optionals.set(21);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(22);
      }
      if (struct.isSetRowNum()) {
        optionals.set(23);
      }
      if (struct.isSetOverdueFineInterest()) {
        optionals.set(24);
      }
      if (struct.isSetOverdueLoanInterest()) {
        optionals.set(25);
      }
      if (struct.isSetPlanRepayDt()) {
        optionals.set(26);
      }
      if (struct.isSetLoanInfoId()) {
        optionals.set(27);
      }
      if (struct.isSetProjectId()) {
        optionals.set(28);
      }
      if (struct.isSetPage()) {
        optionals.set(29);
      }
      if (struct.isSetPCount()) {
        optionals.set(30);
      }
      if (struct.isSetResults()) {
        optionals.set(31);
      }
      oprot.writeBitSet(optionals, 32);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetContractLoadNo()) {
        oprot.writeString(struct.contractLoadNo);
      }
      if (struct.isSetShouldPrincipal()) {
        oprot.writeDouble(struct.shouldPrincipal);
      }
      if (struct.isSetShouldInterest()) {
        oprot.writeDouble(struct.shouldInterest);
      }
      if (struct.isSetShouldMangCost()) {
        oprot.writeDouble(struct.shouldMangCost);
      }
      if (struct.isSetShouldOtherCost()) {
        oprot.writeDouble(struct.shouldOtherCost);
      }
      if (struct.isSetHashouldPrincipal()) {
        oprot.writeDouble(struct.hashouldPrincipal);
      }
      if (struct.isSetHasshouldInterest()) {
        oprot.writeDouble(struct.hasshouldInterest);
      }
      if (struct.isSetHasshouldMangCost()) {
        oprot.writeDouble(struct.hasshouldMangCost);
      }
      if (struct.isSetHasshouldOtherCost()) {
        oprot.writeDouble(struct.hasshouldOtherCost);
      }
      if (struct.isSetNoshouldPrincipal()) {
        oprot.writeDouble(struct.noshouldPrincipal);
      }
      if (struct.isSetNoshouldInterest()) {
        oprot.writeDouble(struct.noshouldInterest);
      }
      if (struct.isSetNoshouldMangCost()) {
        oprot.writeDouble(struct.noshouldMangCost);
      }
      if (struct.isSetNoshouldOtherCost()) {
        oprot.writeDouble(struct.noshouldOtherCost);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetNoverdueFineInterest()) {
        oprot.writeDouble(struct.noverdueFineInterest);
      }
      if (struct.isSetNoverdueLoanInterest()) {
        oprot.writeDouble(struct.noverdueLoanInterest);
      }
      if (struct.isSetPrincipalBalance()) {
        oprot.writeDouble(struct.principalBalance);
      }
      if (struct.isSetNoTotal()) {
        oprot.writeDouble(struct.noTotal);
      }
      if (struct.isSetIsReconciliation()) {
        oprot.writeI32(struct.isReconciliation);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetRowNum()) {
        oprot.writeI32(struct.rowNum);
      }
      if (struct.isSetOverdueFineInterest()) {
        oprot.writeDouble(struct.overdueFineInterest);
      }
      if (struct.isSetOverdueLoanInterest()) {
        oprot.writeDouble(struct.overdueLoanInterest);
      }
      if (struct.isSetPlanRepayDt()) {
        oprot.writeString(struct.planRepayDt);
      }
      if (struct.isSetLoanInfoId()) {
        oprot.writeI32(struct.loanInfoId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPCount()) {
        oprot.writeI32(struct.pCount);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (RepayOverdueDTO _iter28 : struct.results)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepayOverdueDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(32);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractLoadNo = iprot.readString();
        struct.setContractLoadNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shouldPrincipal = iprot.readDouble();
        struct.setShouldPrincipalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shouldInterest = iprot.readDouble();
        struct.setShouldInterestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shouldMangCost = iprot.readDouble();
        struct.setShouldMangCostIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shouldOtherCost = iprot.readDouble();
        struct.setShouldOtherCostIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hashouldPrincipal = iprot.readDouble();
        struct.setHashouldPrincipalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hasshouldInterest = iprot.readDouble();
        struct.setHasshouldInterestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hasshouldMangCost = iprot.readDouble();
        struct.setHasshouldMangCostIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hasshouldOtherCost = iprot.readDouble();
        struct.setHasshouldOtherCostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.noshouldPrincipal = iprot.readDouble();
        struct.setNoshouldPrincipalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.noshouldInterest = iprot.readDouble();
        struct.setNoshouldInterestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.noshouldMangCost = iprot.readDouble();
        struct.setNoshouldMangCostIsSet(true);
      }
      if (incoming.get(14)) {
        struct.noshouldOtherCost = iprot.readDouble();
        struct.setNoshouldOtherCostIsSet(true);
      }
      if (incoming.get(15)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(17)) {
        struct.noverdueFineInterest = iprot.readDouble();
        struct.setNoverdueFineInterestIsSet(true);
      }
      if (incoming.get(18)) {
        struct.noverdueLoanInterest = iprot.readDouble();
        struct.setNoverdueLoanInterestIsSet(true);
      }
      if (incoming.get(19)) {
        struct.principalBalance = iprot.readDouble();
        struct.setPrincipalBalanceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.noTotal = iprot.readDouble();
        struct.setNoTotalIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isReconciliation = iprot.readI32();
        struct.setIsReconciliationIsSet(true);
      }
      if (incoming.get(22)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(23)) {
        struct.rowNum = iprot.readI32();
        struct.setRowNumIsSet(true);
      }
      if (incoming.get(24)) {
        struct.overdueFineInterest = iprot.readDouble();
        struct.setOverdueFineInterestIsSet(true);
      }
      if (incoming.get(25)) {
        struct.overdueLoanInterest = iprot.readDouble();
        struct.setOverdueLoanInterestIsSet(true);
      }
      if (incoming.get(26)) {
        struct.planRepayDt = iprot.readString();
        struct.setPlanRepayDtIsSet(true);
      }
      if (incoming.get(27)) {
        struct.loanInfoId = iprot.readI32();
        struct.setLoanInfoIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(29)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(30)) {
        struct.pCount = iprot.readI32();
        struct.setPCountIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<RepayOverdueDTO>(_list29.size);
          RepayOverdueDTO _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new RepayOverdueDTO();
            _elem30.read(iprot);
            struct.results.add(_elem30);
          }
        }
        struct.setResultsIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class QueryOverdueReceivablesBean implements org.apache.thrift.TBase<QueryOverdueReceivablesBean, QueryOverdueReceivablesBean._Fields>, java.io.Serializable, Cloneable, Comparable<QueryOverdueReceivablesBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryOverdueReceivablesBean");

  private static final org.apache.thrift.protocol.TField SEARCH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LIMT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("limtDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECEIVABLE_OVERDUE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivableOverdueInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField RECEIVABLE_OVERDUE_PUNITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("receivableOverduePunitive", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryOverdueReceivablesBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryOverdueReceivablesBeanTupleSchemeFactory());
  }

  public int searchType; // required
  public int pid; // required
  public String limtDate; // required
  public double receivableOverdueInterest; // required
  public double receivableOverduePunitive; // required
  public List<QueryOverdueReceivablesBean> result; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEARCH_TYPE((short)1, "searchType"),
    PID((short)2, "pid"),
    LIMT_DATE((short)3, "limtDate"),
    RECEIVABLE_OVERDUE_INTEREST((short)4, "receivableOverdueInterest"),
    RECEIVABLE_OVERDUE_PUNITIVE((short)5, "receivableOverduePunitive"),
    RESULT((short)6, "result");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEARCH_TYPE
          return SEARCH_TYPE;
        case 2: // PID
          return PID;
        case 3: // LIMT_DATE
          return LIMT_DATE;
        case 4: // RECEIVABLE_OVERDUE_INTEREST
          return RECEIVABLE_OVERDUE_INTEREST;
        case 5: // RECEIVABLE_OVERDUE_PUNITIVE
          return RECEIVABLE_OVERDUE_PUNITIVE;
        case 6: // RESULT
          return RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEARCHTYPE_ISSET_ID = 0;
  private static final int __PID_ISSET_ID = 1;
  private static final int __RECEIVABLEOVERDUEINTEREST_ISSET_ID = 2;
  private static final int __RECEIVABLEOVERDUEPUNITIVE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEARCH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("searchType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMT_DATE, new org.apache.thrift.meta_data.FieldMetaData("limtDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVABLE_OVERDUE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("receivableOverdueInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVABLE_OVERDUE_PUNITIVE, new org.apache.thrift.meta_data.FieldMetaData("receivableOverduePunitive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "QueryOverdueReceivablesBean"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryOverdueReceivablesBean.class, metaDataMap);
  }

  public QueryOverdueReceivablesBean() {
  }

  public QueryOverdueReceivablesBean(
    int searchType,
    int pid,
    String limtDate,
    double receivableOverdueInterest,
    double receivableOverduePunitive,
    List<QueryOverdueReceivablesBean> result)
  {
    this();
    this.searchType = searchType;
    setSearchTypeIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.limtDate = limtDate;
    this.receivableOverdueInterest = receivableOverdueInterest;
    setReceivableOverdueInterestIsSet(true);
    this.receivableOverduePunitive = receivableOverduePunitive;
    setReceivableOverduePunitiveIsSet(true);
    this.result = result;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryOverdueReceivablesBean(QueryOverdueReceivablesBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.searchType = other.searchType;
    this.pid = other.pid;
    if (other.isSetLimtDate()) {
      this.limtDate = other.limtDate;
    }
    this.receivableOverdueInterest = other.receivableOverdueInterest;
    this.receivableOverduePunitive = other.receivableOverduePunitive;
    if (other.isSetResult()) {
      List<QueryOverdueReceivablesBean> __this__result = new ArrayList<QueryOverdueReceivablesBean>(other.result.size());
      for (QueryOverdueReceivablesBean other_element : other.result) {
        __this__result.add(other_element);
      }
      this.result = __this__result;
    }
  }

  public QueryOverdueReceivablesBean deepCopy() {
    return new QueryOverdueReceivablesBean(this);
  }

  @Override
  public void clear() {
    setSearchTypeIsSet(false);
    this.searchType = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.limtDate = null;
    setReceivableOverdueInterestIsSet(false);
    this.receivableOverdueInterest = 0.0;
    setReceivableOverduePunitiveIsSet(false);
    this.receivableOverduePunitive = 0.0;
    this.result = null;
  }

  public int getSearchType() {
    return this.searchType;
  }

  public QueryOverdueReceivablesBean setSearchType(int searchType) {
    this.searchType = searchType;
    setSearchTypeIsSet(true);
    return this;
  }

  public void unsetSearchType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHTYPE_ISSET_ID);
  }

  /** Returns true if field searchType is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchType() {
    return EncodingUtils.testBit(__isset_bitfield, __SEARCHTYPE_ISSET_ID);
  }

  public void setSearchTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHTYPE_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public QueryOverdueReceivablesBean setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getLimtDate() {
    return this.limtDate;
  }

  public QueryOverdueReceivablesBean setLimtDate(String limtDate) {
    this.limtDate = limtDate;
    return this;
  }

  public void unsetLimtDate() {
    this.limtDate = null;
  }

  /** Returns true if field limtDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLimtDate() {
    return this.limtDate != null;
  }

  public void setLimtDateIsSet(boolean value) {
    if (!value) {
      this.limtDate = null;
    }
  }

  public double getReceivableOverdueInterest() {
    return this.receivableOverdueInterest;
  }

  public QueryOverdueReceivablesBean setReceivableOverdueInterest(double receivableOverdueInterest) {
    this.receivableOverdueInterest = receivableOverdueInterest;
    setReceivableOverdueInterestIsSet(true);
    return this;
  }

  public void unsetReceivableOverdueInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLEOVERDUEINTEREST_ISSET_ID);
  }

  /** Returns true if field receivableOverdueInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivableOverdueInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLEOVERDUEINTEREST_ISSET_ID);
  }

  public void setReceivableOverdueInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLEOVERDUEINTEREST_ISSET_ID, value);
  }

  public double getReceivableOverduePunitive() {
    return this.receivableOverduePunitive;
  }

  public QueryOverdueReceivablesBean setReceivableOverduePunitive(double receivableOverduePunitive) {
    this.receivableOverduePunitive = receivableOverduePunitive;
    setReceivableOverduePunitiveIsSet(true);
    return this;
  }

  public void unsetReceivableOverduePunitive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLEOVERDUEPUNITIVE_ISSET_ID);
  }

  /** Returns true if field receivableOverduePunitive is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivableOverduePunitive() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLEOVERDUEPUNITIVE_ISSET_ID);
  }

  public void setReceivableOverduePunitiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLEOVERDUEPUNITIVE_ISSET_ID, value);
  }

  public int getResultSize() {
    return (this.result == null) ? 0 : this.result.size();
  }

  public java.util.Iterator<QueryOverdueReceivablesBean> getResultIterator() {
    return (this.result == null) ? null : this.result.iterator();
  }

  public void addToResult(QueryOverdueReceivablesBean elem) {
    if (this.result == null) {
      this.result = new ArrayList<QueryOverdueReceivablesBean>();
    }
    this.result.add(elem);
  }

  public List<QueryOverdueReceivablesBean> getResult() {
    return this.result;
  }

  public QueryOverdueReceivablesBean setResult(List<QueryOverdueReceivablesBean> result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEARCH_TYPE:
      if (value == null) {
        unsetSearchType();
      } else {
        setSearchType((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LIMT_DATE:
      if (value == null) {
        unsetLimtDate();
      } else {
        setLimtDate((String)value);
      }
      break;

    case RECEIVABLE_OVERDUE_INTEREST:
      if (value == null) {
        unsetReceivableOverdueInterest();
      } else {
        setReceivableOverdueInterest((Double)value);
      }
      break;

    case RECEIVABLE_OVERDUE_PUNITIVE:
      if (value == null) {
        unsetReceivableOverduePunitive();
      } else {
        setReceivableOverduePunitive((Double)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((List<QueryOverdueReceivablesBean>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEARCH_TYPE:
      return Integer.valueOf(getSearchType());

    case PID:
      return Integer.valueOf(getPid());

    case LIMT_DATE:
      return getLimtDate();

    case RECEIVABLE_OVERDUE_INTEREST:
      return Double.valueOf(getReceivableOverdueInterest());

    case RECEIVABLE_OVERDUE_PUNITIVE:
      return Double.valueOf(getReceivableOverduePunitive());

    case RESULT:
      return getResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEARCH_TYPE:
      return isSetSearchType();
    case PID:
      return isSetPid();
    case LIMT_DATE:
      return isSetLimtDate();
    case RECEIVABLE_OVERDUE_INTEREST:
      return isSetReceivableOverdueInterest();
    case RECEIVABLE_OVERDUE_PUNITIVE:
      return isSetReceivableOverduePunitive();
    case RESULT:
      return isSetResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryOverdueReceivablesBean)
      return this.equals((QueryOverdueReceivablesBean)that);
    return false;
  }

  public boolean equals(QueryOverdueReceivablesBean that) {
    if (that == null)
      return false;

    boolean this_present_searchType = true;
    boolean that_present_searchType = true;
    if (this_present_searchType || that_present_searchType) {
      if (!(this_present_searchType && that_present_searchType))
        return false;
      if (this.searchType != that.searchType)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_limtDate = true && this.isSetLimtDate();
    boolean that_present_limtDate = true && that.isSetLimtDate();
    if (this_present_limtDate || that_present_limtDate) {
      if (!(this_present_limtDate && that_present_limtDate))
        return false;
      if (!this.limtDate.equals(that.limtDate))
        return false;
    }

    boolean this_present_receivableOverdueInterest = true;
    boolean that_present_receivableOverdueInterest = true;
    if (this_present_receivableOverdueInterest || that_present_receivableOverdueInterest) {
      if (!(this_present_receivableOverdueInterest && that_present_receivableOverdueInterest))
        return false;
      if (this.receivableOverdueInterest != that.receivableOverdueInterest)
        return false;
    }

    boolean this_present_receivableOverduePunitive = true;
    boolean that_present_receivableOverduePunitive = true;
    if (this_present_receivableOverduePunitive || that_present_receivableOverduePunitive) {
      if (!(this_present_receivableOverduePunitive && that_present_receivableOverduePunitive))
        return false;
      if (this.receivableOverduePunitive != that.receivableOverduePunitive)
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_searchType = true;
    list.add(present_searchType);
    if (present_searchType)
      list.add(searchType);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_limtDate = true && (isSetLimtDate());
    list.add(present_limtDate);
    if (present_limtDate)
      list.add(limtDate);

    boolean present_receivableOverdueInterest = true;
    list.add(present_receivableOverdueInterest);
    if (present_receivableOverdueInterest)
      list.add(receivableOverdueInterest);

    boolean present_receivableOverduePunitive = true;
    list.add(present_receivableOverduePunitive);
    if (present_receivableOverduePunitive)
      list.add(receivableOverduePunitive);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryOverdueReceivablesBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSearchType()).compareTo(other.isSetSearchType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchType, other.searchType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimtDate()).compareTo(other.isSetLimtDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimtDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limtDate, other.limtDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivableOverdueInterest()).compareTo(other.isSetReceivableOverdueInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivableOverdueInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivableOverdueInterest, other.receivableOverdueInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivableOverduePunitive()).compareTo(other.isSetReceivableOverduePunitive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivableOverduePunitive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivableOverduePunitive, other.receivableOverduePunitive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryOverdueReceivablesBean(");
    boolean first = true;

    sb.append("searchType:");
    sb.append(this.searchType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limtDate:");
    if (this.limtDate == null) {
      sb.append("null");
    } else {
      sb.append(this.limtDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivableOverdueInterest:");
    sb.append(this.receivableOverdueInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivableOverduePunitive:");
    sb.append(this.receivableOverduePunitive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryOverdueReceivablesBeanStandardSchemeFactory implements SchemeFactory {
    public QueryOverdueReceivablesBeanStandardScheme getScheme() {
      return new QueryOverdueReceivablesBeanStandardScheme();
    }
  }

  private static class QueryOverdueReceivablesBeanStandardScheme extends StandardScheme<QueryOverdueReceivablesBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryOverdueReceivablesBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEARCH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.searchType = iprot.readI32();
              struct.setSearchTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIMT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.limtDate = iprot.readString();
              struct.setLimtDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECEIVABLE_OVERDUE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivableOverdueInterest = iprot.readDouble();
              struct.setReceivableOverdueInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECEIVABLE_OVERDUE_PUNITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivableOverduePunitive = iprot.readDouble();
              struct.setReceivableOverduePunitiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.result = new ArrayList<QueryOverdueReceivablesBean>(_list16.size);
                QueryOverdueReceivablesBean _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new QueryOverdueReceivablesBean();
                  _elem17.read(iprot);
                  struct.result.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryOverdueReceivablesBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEARCH_TYPE_FIELD_DESC);
      oprot.writeI32(struct.searchType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.limtDate != null) {
        oprot.writeFieldBegin(LIMT_DATE_FIELD_DESC);
        oprot.writeString(struct.limtDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECEIVABLE_OVERDUE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.receivableOverdueInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVABLE_OVERDUE_PUNITIVE_FIELD_DESC);
      oprot.writeDouble(struct.receivableOverduePunitive);
      oprot.writeFieldEnd();
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.result.size()));
          for (QueryOverdueReceivablesBean _iter19 : struct.result)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryOverdueReceivablesBeanTupleSchemeFactory implements SchemeFactory {
    public QueryOverdueReceivablesBeanTupleScheme getScheme() {
      return new QueryOverdueReceivablesBeanTupleScheme();
    }
  }

  private static class QueryOverdueReceivablesBeanTupleScheme extends TupleScheme<QueryOverdueReceivablesBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryOverdueReceivablesBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSearchType()) {
        optionals.set(0);
      }
      if (struct.isSetPid()) {
        optionals.set(1);
      }
      if (struct.isSetLimtDate()) {
        optionals.set(2);
      }
      if (struct.isSetReceivableOverdueInterest()) {
        optionals.set(3);
      }
      if (struct.isSetReceivableOverduePunitive()) {
        optionals.set(4);
      }
      if (struct.isSetResult()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSearchType()) {
        oprot.writeI32(struct.searchType);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLimtDate()) {
        oprot.writeString(struct.limtDate);
      }
      if (struct.isSetReceivableOverdueInterest()) {
        oprot.writeDouble(struct.receivableOverdueInterest);
      }
      if (struct.isSetReceivableOverduePunitive()) {
        oprot.writeDouble(struct.receivableOverduePunitive);
      }
      if (struct.isSetResult()) {
        {
          oprot.writeI32(struct.result.size());
          for (QueryOverdueReceivablesBean _iter20 : struct.result)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryOverdueReceivablesBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.searchType = iprot.readI32();
        struct.setSearchTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.limtDate = iprot.readString();
        struct.setLimtDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.receivableOverdueInterest = iprot.readDouble();
        struct.setReceivableOverdueInterestIsSet(true);
      }
      if (incoming.get(4)) {
        struct.receivableOverduePunitive = iprot.readDouble();
        struct.setReceivableOverduePunitiveIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.result = new ArrayList<QueryOverdueReceivablesBean>(_list21.size);
          QueryOverdueReceivablesBean _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new QueryOverdueReceivablesBean();
            _elem22.read(iprot);
            struct.result.add(_elem22);
          }
        }
        struct.setResultIsSet(true);
      }
    }
  }

}


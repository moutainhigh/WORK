/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class UserCommissionView implements org.apache.thrift.TBase<UserCommissionView, UserCommissionView._Fields>, java.io.Serializable, Cloneable, Comparable<UserCommissionView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserCommissionView");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMISSION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RECONCILTAION_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciltaionDt", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROJECT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField REAL_COMMISSION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("realCommissionAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SUPERIOR_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("superiorUserId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SUPERIOR_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("superiorUserName", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserCommissionViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserCommissionViewTupleSchemeFactory());
  }

  public int loanId; // required
  public int projectId; // required
  public int userId; // required
  public String memberId; // required
  public String realName; // required
  public double commissionAmt; // required
  public String projectName; // required
  public String reconciltaionDt; // required
  public double projectAmt; // required
  public double realCommissionAmt; // required
  public int superiorUserId; // required
  public String superiorUserName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    PROJECT_ID((short)2, "projectId"),
    USER_ID((short)3, "userId"),
    MEMBER_ID((short)4, "memberId"),
    REAL_NAME((short)5, "realName"),
    COMMISSION_AMT((short)6, "commissionAmt"),
    PROJECT_NAME((short)7, "projectName"),
    RECONCILTAION_DT((short)8, "reconciltaionDt"),
    PROJECT_AMT((short)9, "projectAmt"),
    REAL_COMMISSION_AMT((short)10, "realCommissionAmt"),
    SUPERIOR_USER_ID((short)11, "superiorUserId"),
    SUPERIOR_USER_NAME((short)12, "superiorUserName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // MEMBER_ID
          return MEMBER_ID;
        case 5: // REAL_NAME
          return REAL_NAME;
        case 6: // COMMISSION_AMT
          return COMMISSION_AMT;
        case 7: // PROJECT_NAME
          return PROJECT_NAME;
        case 8: // RECONCILTAION_DT
          return RECONCILTAION_DT;
        case 9: // PROJECT_AMT
          return PROJECT_AMT;
        case 10: // REAL_COMMISSION_AMT
          return REAL_COMMISSION_AMT;
        case 11: // SUPERIOR_USER_ID
          return SUPERIOR_USER_ID;
        case 12: // SUPERIOR_USER_NAME
          return SUPERIOR_USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __COMMISSIONAMT_ISSET_ID = 3;
  private static final int __PROJECTAMT_ISSET_ID = 4;
  private static final int __REALCOMMISSIONAMT_ISSET_ID = 5;
  private static final int __SUPERIORUSERID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMISSION_AMT, new org.apache.thrift.meta_data.FieldMetaData("commissionAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECONCILTAION_DT, new org.apache.thrift.meta_data.FieldMetaData("reconciltaionDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_AMT, new org.apache.thrift.meta_data.FieldMetaData("projectAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_COMMISSION_AMT, new org.apache.thrift.meta_data.FieldMetaData("realCommissionAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUPERIOR_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("superiorUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPERIOR_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("superiorUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserCommissionView.class, metaDataMap);
  }

  public UserCommissionView() {
  }

  public UserCommissionView(
    int loanId,
    int projectId,
    int userId,
    String memberId,
    String realName,
    double commissionAmt,
    String projectName,
    String reconciltaionDt,
    double projectAmt,
    double realCommissionAmt,
    int superiorUserId,
    String superiorUserName)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.memberId = memberId;
    this.realName = realName;
    this.commissionAmt = commissionAmt;
    setCommissionAmtIsSet(true);
    this.projectName = projectName;
    this.reconciltaionDt = reconciltaionDt;
    this.projectAmt = projectAmt;
    setProjectAmtIsSet(true);
    this.realCommissionAmt = realCommissionAmt;
    setRealCommissionAmtIsSet(true);
    this.superiorUserId = superiorUserId;
    setSuperiorUserIdIsSet(true);
    this.superiorUserName = superiorUserName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserCommissionView(UserCommissionView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    this.projectId = other.projectId;
    this.userId = other.userId;
    if (other.isSetMemberId()) {
      this.memberId = other.memberId;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    this.commissionAmt = other.commissionAmt;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetReconciltaionDt()) {
      this.reconciltaionDt = other.reconciltaionDt;
    }
    this.projectAmt = other.projectAmt;
    this.realCommissionAmt = other.realCommissionAmt;
    this.superiorUserId = other.superiorUserId;
    if (other.isSetSuperiorUserName()) {
      this.superiorUserName = other.superiorUserName;
    }
  }

  public UserCommissionView deepCopy() {
    return new UserCommissionView(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.memberId = null;
    this.realName = null;
    setCommissionAmtIsSet(false);
    this.commissionAmt = 0.0;
    this.projectName = null;
    this.reconciltaionDt = null;
    setProjectAmtIsSet(false);
    this.projectAmt = 0.0;
    setRealCommissionAmtIsSet(false);
    this.realCommissionAmt = 0.0;
    setSuperiorUserIdIsSet(false);
    this.superiorUserId = 0;
    this.superiorUserName = null;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public UserCommissionView setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public UserCommissionView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public UserCommissionView setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getMemberId() {
    return this.memberId;
  }

  public UserCommissionView setMemberId(String memberId) {
    this.memberId = memberId;
    return this;
  }

  public void unsetMemberId() {
    this.memberId = null;
  }

  /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberId() {
    return this.memberId != null;
  }

  public void setMemberIdIsSet(boolean value) {
    if (!value) {
      this.memberId = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public UserCommissionView setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public double getCommissionAmt() {
    return this.commissionAmt;
  }

  public UserCommissionView setCommissionAmt(double commissionAmt) {
    this.commissionAmt = commissionAmt;
    setCommissionAmtIsSet(true);
    return this;
  }

  public void unsetCommissionAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSIONAMT_ISSET_ID);
  }

  /** Returns true if field commissionAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSIONAMT_ISSET_ID);
  }

  public void setCommissionAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSIONAMT_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public UserCommissionView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getReconciltaionDt() {
    return this.reconciltaionDt;
  }

  public UserCommissionView setReconciltaionDt(String reconciltaionDt) {
    this.reconciltaionDt = reconciltaionDt;
    return this;
  }

  public void unsetReconciltaionDt() {
    this.reconciltaionDt = null;
  }

  /** Returns true if field reconciltaionDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciltaionDt() {
    return this.reconciltaionDt != null;
  }

  public void setReconciltaionDtIsSet(boolean value) {
    if (!value) {
      this.reconciltaionDt = null;
    }
  }

  public double getProjectAmt() {
    return this.projectAmt;
  }

  public UserCommissionView setProjectAmt(double projectAmt) {
    this.projectAmt = projectAmt;
    setProjectAmtIsSet(true);
    return this;
  }

  public void unsetProjectAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTAMT_ISSET_ID);
  }

  /** Returns true if field projectAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTAMT_ISSET_ID);
  }

  public void setProjectAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTAMT_ISSET_ID, value);
  }

  public double getRealCommissionAmt() {
    return this.realCommissionAmt;
  }

  public UserCommissionView setRealCommissionAmt(double realCommissionAmt) {
    this.realCommissionAmt = realCommissionAmt;
    setRealCommissionAmtIsSet(true);
    return this;
  }

  public void unsetRealCommissionAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALCOMMISSIONAMT_ISSET_ID);
  }

  /** Returns true if field realCommissionAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetRealCommissionAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __REALCOMMISSIONAMT_ISSET_ID);
  }

  public void setRealCommissionAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALCOMMISSIONAMT_ISSET_ID, value);
  }

  public int getSuperiorUserId() {
    return this.superiorUserId;
  }

  public UserCommissionView setSuperiorUserId(int superiorUserId) {
    this.superiorUserId = superiorUserId;
    setSuperiorUserIdIsSet(true);
    return this;
  }

  public void unsetSuperiorUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPERIORUSERID_ISSET_ID);
  }

  /** Returns true if field superiorUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperiorUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPERIORUSERID_ISSET_ID);
  }

  public void setSuperiorUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPERIORUSERID_ISSET_ID, value);
  }

  public String getSuperiorUserName() {
    return this.superiorUserName;
  }

  public UserCommissionView setSuperiorUserName(String superiorUserName) {
    this.superiorUserName = superiorUserName;
    return this;
  }

  public void unsetSuperiorUserName() {
    this.superiorUserName = null;
  }

  /** Returns true if field superiorUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperiorUserName() {
    return this.superiorUserName != null;
  }

  public void setSuperiorUserNameIsSet(boolean value) {
    if (!value) {
      this.superiorUserName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case MEMBER_ID:
      if (value == null) {
        unsetMemberId();
      } else {
        setMemberId((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case COMMISSION_AMT:
      if (value == null) {
        unsetCommissionAmt();
      } else {
        setCommissionAmt((Double)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case RECONCILTAION_DT:
      if (value == null) {
        unsetReconciltaionDt();
      } else {
        setReconciltaionDt((String)value);
      }
      break;

    case PROJECT_AMT:
      if (value == null) {
        unsetProjectAmt();
      } else {
        setProjectAmt((Double)value);
      }
      break;

    case REAL_COMMISSION_AMT:
      if (value == null) {
        unsetRealCommissionAmt();
      } else {
        setRealCommissionAmt((Double)value);
      }
      break;

    case SUPERIOR_USER_ID:
      if (value == null) {
        unsetSuperiorUserId();
      } else {
        setSuperiorUserId((Integer)value);
      }
      break;

    case SUPERIOR_USER_NAME:
      if (value == null) {
        unsetSuperiorUserName();
      } else {
        setSuperiorUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case MEMBER_ID:
      return getMemberId();

    case REAL_NAME:
      return getRealName();

    case COMMISSION_AMT:
      return Double.valueOf(getCommissionAmt());

    case PROJECT_NAME:
      return getProjectName();

    case RECONCILTAION_DT:
      return getReconciltaionDt();

    case PROJECT_AMT:
      return Double.valueOf(getProjectAmt());

    case REAL_COMMISSION_AMT:
      return Double.valueOf(getRealCommissionAmt());

    case SUPERIOR_USER_ID:
      return Integer.valueOf(getSuperiorUserId());

    case SUPERIOR_USER_NAME:
      return getSuperiorUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_ID:
      return isSetProjectId();
    case USER_ID:
      return isSetUserId();
    case MEMBER_ID:
      return isSetMemberId();
    case REAL_NAME:
      return isSetRealName();
    case COMMISSION_AMT:
      return isSetCommissionAmt();
    case PROJECT_NAME:
      return isSetProjectName();
    case RECONCILTAION_DT:
      return isSetReconciltaionDt();
    case PROJECT_AMT:
      return isSetProjectAmt();
    case REAL_COMMISSION_AMT:
      return isSetRealCommissionAmt();
    case SUPERIOR_USER_ID:
      return isSetSuperiorUserId();
    case SUPERIOR_USER_NAME:
      return isSetSuperiorUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserCommissionView)
      return this.equals((UserCommissionView)that);
    return false;
  }

  public boolean equals(UserCommissionView that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_memberId = true && this.isSetMemberId();
    boolean that_present_memberId = true && that.isSetMemberId();
    if (this_present_memberId || that_present_memberId) {
      if (!(this_present_memberId && that_present_memberId))
        return false;
      if (!this.memberId.equals(that.memberId))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_commissionAmt = true;
    boolean that_present_commissionAmt = true;
    if (this_present_commissionAmt || that_present_commissionAmt) {
      if (!(this_present_commissionAmt && that_present_commissionAmt))
        return false;
      if (this.commissionAmt != that.commissionAmt)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_reconciltaionDt = true && this.isSetReconciltaionDt();
    boolean that_present_reconciltaionDt = true && that.isSetReconciltaionDt();
    if (this_present_reconciltaionDt || that_present_reconciltaionDt) {
      if (!(this_present_reconciltaionDt && that_present_reconciltaionDt))
        return false;
      if (!this.reconciltaionDt.equals(that.reconciltaionDt))
        return false;
    }

    boolean this_present_projectAmt = true;
    boolean that_present_projectAmt = true;
    if (this_present_projectAmt || that_present_projectAmt) {
      if (!(this_present_projectAmt && that_present_projectAmt))
        return false;
      if (this.projectAmt != that.projectAmt)
        return false;
    }

    boolean this_present_realCommissionAmt = true;
    boolean that_present_realCommissionAmt = true;
    if (this_present_realCommissionAmt || that_present_realCommissionAmt) {
      if (!(this_present_realCommissionAmt && that_present_realCommissionAmt))
        return false;
      if (this.realCommissionAmt != that.realCommissionAmt)
        return false;
    }

    boolean this_present_superiorUserId = true;
    boolean that_present_superiorUserId = true;
    if (this_present_superiorUserId || that_present_superiorUserId) {
      if (!(this_present_superiorUserId && that_present_superiorUserId))
        return false;
      if (this.superiorUserId != that.superiorUserId)
        return false;
    }

    boolean this_present_superiorUserName = true && this.isSetSuperiorUserName();
    boolean that_present_superiorUserName = true && that.isSetSuperiorUserName();
    if (this_present_superiorUserName || that_present_superiorUserName) {
      if (!(this_present_superiorUserName && that_present_superiorUserName))
        return false;
      if (!this.superiorUserName.equals(that.superiorUserName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_memberId = true && (isSetMemberId());
    list.add(present_memberId);
    if (present_memberId)
      list.add(memberId);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_commissionAmt = true;
    list.add(present_commissionAmt);
    if (present_commissionAmt)
      list.add(commissionAmt);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_reconciltaionDt = true && (isSetReconciltaionDt());
    list.add(present_reconciltaionDt);
    if (present_reconciltaionDt)
      list.add(reconciltaionDt);

    boolean present_projectAmt = true;
    list.add(present_projectAmt);
    if (present_projectAmt)
      list.add(projectAmt);

    boolean present_realCommissionAmt = true;
    list.add(present_realCommissionAmt);
    if (present_realCommissionAmt)
      list.add(realCommissionAmt);

    boolean present_superiorUserId = true;
    list.add(present_superiorUserId);
    if (present_superiorUserId)
      list.add(superiorUserId);

    boolean present_superiorUserName = true && (isSetSuperiorUserName());
    list.add(present_superiorUserName);
    if (present_superiorUserName)
      list.add(superiorUserName);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserCommissionView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberId()).compareTo(other.isSetMemberId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionAmt()).compareTo(other.isSetCommissionAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionAmt, other.commissionAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciltaionDt()).compareTo(other.isSetReconciltaionDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciltaionDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciltaionDt, other.reconciltaionDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectAmt()).compareTo(other.isSetProjectAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAmt, other.projectAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealCommissionAmt()).compareTo(other.isSetRealCommissionAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealCommissionAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realCommissionAmt, other.realCommissionAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperiorUserId()).compareTo(other.isSetSuperiorUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperiorUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorUserId, other.superiorUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperiorUserName()).compareTo(other.isSetSuperiorUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperiorUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorUserName, other.superiorUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserCommissionView(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberId:");
    if (this.memberId == null) {
      sb.append("null");
    } else {
      sb.append(this.memberId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commissionAmt:");
    sb.append(this.commissionAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciltaionDt:");
    if (this.reconciltaionDt == null) {
      sb.append("null");
    } else {
      sb.append(this.reconciltaionDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectAmt:");
    sb.append(this.projectAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realCommissionAmt:");
    sb.append(this.realCommissionAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superiorUserId:");
    sb.append(this.superiorUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superiorUserName:");
    if (this.superiorUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.superiorUserName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserCommissionViewStandardSchemeFactory implements SchemeFactory {
    public UserCommissionViewStandardScheme getScheme() {
      return new UserCommissionViewStandardScheme();
    }
  }

  private static class UserCommissionViewStandardScheme extends StandardScheme<UserCommissionView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserCommissionView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEMBER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberId = iprot.readString();
              struct.setMemberIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMISSION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commissionAmt = iprot.readDouble();
              struct.setCommissionAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECONCILTAION_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reconciltaionDt = iprot.readString();
              struct.setReconciltaionDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROJECT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.projectAmt = iprot.readDouble();
              struct.setProjectAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REAL_COMMISSION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realCommissionAmt = iprot.readDouble();
              struct.setRealCommissionAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUPERIOR_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.superiorUserId = iprot.readI32();
              struct.setSuperiorUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SUPERIOR_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superiorUserName = iprot.readString();
              struct.setSuperiorUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserCommissionView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.memberId != null) {
        oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
        oprot.writeString(struct.memberId);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMMISSION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.commissionAmt);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.reconciltaionDt != null) {
        oprot.writeFieldBegin(RECONCILTAION_DT_FIELD_DESC);
        oprot.writeString(struct.reconciltaionDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.projectAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_COMMISSION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.realCommissionAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPERIOR_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.superiorUserId);
      oprot.writeFieldEnd();
      if (struct.superiorUserName != null) {
        oprot.writeFieldBegin(SUPERIOR_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.superiorUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserCommissionViewTupleSchemeFactory implements SchemeFactory {
    public UserCommissionViewTupleScheme getScheme() {
      return new UserCommissionViewTupleScheme();
    }
  }

  private static class UserCommissionViewTupleScheme extends TupleScheme<UserCommissionView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserCommissionView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetMemberId()) {
        optionals.set(3);
      }
      if (struct.isSetRealName()) {
        optionals.set(4);
      }
      if (struct.isSetCommissionAmt()) {
        optionals.set(5);
      }
      if (struct.isSetProjectName()) {
        optionals.set(6);
      }
      if (struct.isSetReconciltaionDt()) {
        optionals.set(7);
      }
      if (struct.isSetProjectAmt()) {
        optionals.set(8);
      }
      if (struct.isSetRealCommissionAmt()) {
        optionals.set(9);
      }
      if (struct.isSetSuperiorUserId()) {
        optionals.set(10);
      }
      if (struct.isSetSuperiorUserName()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetMemberId()) {
        oprot.writeString(struct.memberId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetCommissionAmt()) {
        oprot.writeDouble(struct.commissionAmt);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetReconciltaionDt()) {
        oprot.writeString(struct.reconciltaionDt);
      }
      if (struct.isSetProjectAmt()) {
        oprot.writeDouble(struct.projectAmt);
      }
      if (struct.isSetRealCommissionAmt()) {
        oprot.writeDouble(struct.realCommissionAmt);
      }
      if (struct.isSetSuperiorUserId()) {
        oprot.writeI32(struct.superiorUserId);
      }
      if (struct.isSetSuperiorUserName()) {
        oprot.writeString(struct.superiorUserName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserCommissionView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.memberId = iprot.readString();
        struct.setMemberIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commissionAmt = iprot.readDouble();
        struct.setCommissionAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reconciltaionDt = iprot.readString();
        struct.setReconciltaionDtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.projectAmt = iprot.readDouble();
        struct.setProjectAmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.realCommissionAmt = iprot.readDouble();
        struct.setRealCommissionAmtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.superiorUserId = iprot.readI32();
        struct.setSuperiorUserIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.superiorUserName = iprot.readString();
        struct.setSuperiorUserNameIsSet(true);
      }
    }
  }

}


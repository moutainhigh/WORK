/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ContractTempLateService {

  public interface Iface {

    public int addContractTempLate(ContractTempLate contractTempLate) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<ContractTempLate> pageTempLateList(ContractTempLate contractTempLate) throws org.apache.thrift.TException;

    public int pageTotalCount(ContractTempLate contractTempLate) throws org.apache.thrift.TException;

    public boolean updateTempLate(ContractTempLate contractTempLate) throws org.apache.thrift.TException;

    public boolean deleteTempLate(String pidArray) throws org.apache.thrift.TException;

    public boolean addTempLateParm(List<ContractTempLateParm> listCtp) throws org.apache.thrift.TException;

    public boolean updateTempLateParm(List<ContractTempLateParm> listCtp) throws org.apache.thrift.TException;

    public boolean delTempLateParm(int ContractTemplateId) throws org.apache.thrift.TException;

    public boolean delTempLateOneParm(int pid) throws org.apache.thrift.TException;

    public List<TempLateParmDto> getTempParmList(TempLateParmDto tempLateParmDto) throws org.apache.thrift.TException;

    public int getTempTotaleCount(TempLateParmDto tempLateParmDto) throws org.apache.thrift.TException;

    public boolean updateTempLateParmDto(List<TempLateParmDto> listCtp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addContractTempLate(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pageTempLateList(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pageTotalCount(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTempLate(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteTempLate(String pidArray, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTempLateParm(List<ContractTempLateParm> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTempLateParm(List<ContractTempLateParm> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delTempLateParm(int ContractTemplateId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delTempLateOneParm(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTempParmList(TempLateParmDto tempLateParmDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTempTotaleCount(TempLateParmDto tempLateParmDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTempLateParmDto(List<TempLateParmDto> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addContractTempLate(ContractTempLate contractTempLate) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addContractTempLate(contractTempLate);
      return recv_addContractTempLate();
    }

    public void send_addContractTempLate(ContractTempLate contractTempLate) throws org.apache.thrift.TException
    {
      addContractTempLate_args args = new addContractTempLate_args();
      args.setContractTempLate(contractTempLate);
      sendBase("addContractTempLate", args);
    }

    public int recv_addContractTempLate() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addContractTempLate_result result = new addContractTempLate_result();
      receiveBase(result, "addContractTempLate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addContractTempLate failed: unknown result");
    }

    public List<ContractTempLate> pageTempLateList(ContractTempLate contractTempLate) throws org.apache.thrift.TException
    {
      send_pageTempLateList(contractTempLate);
      return recv_pageTempLateList();
    }

    public void send_pageTempLateList(ContractTempLate contractTempLate) throws org.apache.thrift.TException
    {
      pageTempLateList_args args = new pageTempLateList_args();
      args.setContractTempLate(contractTempLate);
      sendBase("pageTempLateList", args);
    }

    public List<ContractTempLate> recv_pageTempLateList() throws org.apache.thrift.TException
    {
      pageTempLateList_result result = new pageTempLateList_result();
      receiveBase(result, "pageTempLateList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pageTempLateList failed: unknown result");
    }

    public int pageTotalCount(ContractTempLate contractTempLate) throws org.apache.thrift.TException
    {
      send_pageTotalCount(contractTempLate);
      return recv_pageTotalCount();
    }

    public void send_pageTotalCount(ContractTempLate contractTempLate) throws org.apache.thrift.TException
    {
      pageTotalCount_args args = new pageTotalCount_args();
      args.setContractTempLate(contractTempLate);
      sendBase("pageTotalCount", args);
    }

    public int recv_pageTotalCount() throws org.apache.thrift.TException
    {
      pageTotalCount_result result = new pageTotalCount_result();
      receiveBase(result, "pageTotalCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pageTotalCount failed: unknown result");
    }

    public boolean updateTempLate(ContractTempLate contractTempLate) throws org.apache.thrift.TException
    {
      send_updateTempLate(contractTempLate);
      return recv_updateTempLate();
    }

    public void send_updateTempLate(ContractTempLate contractTempLate) throws org.apache.thrift.TException
    {
      updateTempLate_args args = new updateTempLate_args();
      args.setContractTempLate(contractTempLate);
      sendBase("updateTempLate", args);
    }

    public boolean recv_updateTempLate() throws org.apache.thrift.TException
    {
      updateTempLate_result result = new updateTempLate_result();
      receiveBase(result, "updateTempLate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTempLate failed: unknown result");
    }

    public boolean deleteTempLate(String pidArray) throws org.apache.thrift.TException
    {
      send_deleteTempLate(pidArray);
      return recv_deleteTempLate();
    }

    public void send_deleteTempLate(String pidArray) throws org.apache.thrift.TException
    {
      deleteTempLate_args args = new deleteTempLate_args();
      args.setPidArray(pidArray);
      sendBase("deleteTempLate", args);
    }

    public boolean recv_deleteTempLate() throws org.apache.thrift.TException
    {
      deleteTempLate_result result = new deleteTempLate_result();
      receiveBase(result, "deleteTempLate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteTempLate failed: unknown result");
    }

    public boolean addTempLateParm(List<ContractTempLateParm> listCtp) throws org.apache.thrift.TException
    {
      send_addTempLateParm(listCtp);
      return recv_addTempLateParm();
    }

    public void send_addTempLateParm(List<ContractTempLateParm> listCtp) throws org.apache.thrift.TException
    {
      addTempLateParm_args args = new addTempLateParm_args();
      args.setListCtp(listCtp);
      sendBase("addTempLateParm", args);
    }

    public boolean recv_addTempLateParm() throws org.apache.thrift.TException
    {
      addTempLateParm_result result = new addTempLateParm_result();
      receiveBase(result, "addTempLateParm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTempLateParm failed: unknown result");
    }

    public boolean updateTempLateParm(List<ContractTempLateParm> listCtp) throws org.apache.thrift.TException
    {
      send_updateTempLateParm(listCtp);
      return recv_updateTempLateParm();
    }

    public void send_updateTempLateParm(List<ContractTempLateParm> listCtp) throws org.apache.thrift.TException
    {
      updateTempLateParm_args args = new updateTempLateParm_args();
      args.setListCtp(listCtp);
      sendBase("updateTempLateParm", args);
    }

    public boolean recv_updateTempLateParm() throws org.apache.thrift.TException
    {
      updateTempLateParm_result result = new updateTempLateParm_result();
      receiveBase(result, "updateTempLateParm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTempLateParm failed: unknown result");
    }

    public boolean delTempLateParm(int ContractTemplateId) throws org.apache.thrift.TException
    {
      send_delTempLateParm(ContractTemplateId);
      return recv_delTempLateParm();
    }

    public void send_delTempLateParm(int ContractTemplateId) throws org.apache.thrift.TException
    {
      delTempLateParm_args args = new delTempLateParm_args();
      args.setContractTemplateId(ContractTemplateId);
      sendBase("delTempLateParm", args);
    }

    public boolean recv_delTempLateParm() throws org.apache.thrift.TException
    {
      delTempLateParm_result result = new delTempLateParm_result();
      receiveBase(result, "delTempLateParm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delTempLateParm failed: unknown result");
    }

    public boolean delTempLateOneParm(int pid) throws org.apache.thrift.TException
    {
      send_delTempLateOneParm(pid);
      return recv_delTempLateOneParm();
    }

    public void send_delTempLateOneParm(int pid) throws org.apache.thrift.TException
    {
      delTempLateOneParm_args args = new delTempLateOneParm_args();
      args.setPid(pid);
      sendBase("delTempLateOneParm", args);
    }

    public boolean recv_delTempLateOneParm() throws org.apache.thrift.TException
    {
      delTempLateOneParm_result result = new delTempLateOneParm_result();
      receiveBase(result, "delTempLateOneParm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delTempLateOneParm failed: unknown result");
    }

    public List<TempLateParmDto> getTempParmList(TempLateParmDto tempLateParmDto) throws org.apache.thrift.TException
    {
      send_getTempParmList(tempLateParmDto);
      return recv_getTempParmList();
    }

    public void send_getTempParmList(TempLateParmDto tempLateParmDto) throws org.apache.thrift.TException
    {
      getTempParmList_args args = new getTempParmList_args();
      args.setTempLateParmDto(tempLateParmDto);
      sendBase("getTempParmList", args);
    }

    public List<TempLateParmDto> recv_getTempParmList() throws org.apache.thrift.TException
    {
      getTempParmList_result result = new getTempParmList_result();
      receiveBase(result, "getTempParmList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTempParmList failed: unknown result");
    }

    public int getTempTotaleCount(TempLateParmDto tempLateParmDto) throws org.apache.thrift.TException
    {
      send_getTempTotaleCount(tempLateParmDto);
      return recv_getTempTotaleCount();
    }

    public void send_getTempTotaleCount(TempLateParmDto tempLateParmDto) throws org.apache.thrift.TException
    {
      getTempTotaleCount_args args = new getTempTotaleCount_args();
      args.setTempLateParmDto(tempLateParmDto);
      sendBase("getTempTotaleCount", args);
    }

    public int recv_getTempTotaleCount() throws org.apache.thrift.TException
    {
      getTempTotaleCount_result result = new getTempTotaleCount_result();
      receiveBase(result, "getTempTotaleCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTempTotaleCount failed: unknown result");
    }

    public boolean updateTempLateParmDto(List<TempLateParmDto> listCtp) throws org.apache.thrift.TException
    {
      send_updateTempLateParmDto(listCtp);
      return recv_updateTempLateParmDto();
    }

    public void send_updateTempLateParmDto(List<TempLateParmDto> listCtp) throws org.apache.thrift.TException
    {
      updateTempLateParmDto_args args = new updateTempLateParmDto_args();
      args.setListCtp(listCtp);
      sendBase("updateTempLateParmDto", args);
    }

    public boolean recv_updateTempLateParmDto() throws org.apache.thrift.TException
    {
      updateTempLateParmDto_result result = new updateTempLateParmDto_result();
      receiveBase(result, "updateTempLateParmDto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTempLateParmDto failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addContractTempLate(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addContractTempLate_call method_call = new addContractTempLate_call(contractTempLate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addContractTempLate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ContractTempLate contractTempLate;
      public addContractTempLate_call(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractTempLate = contractTempLate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addContractTempLate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addContractTempLate_args args = new addContractTempLate_args();
        args.setContractTempLate(contractTempLate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addContractTempLate();
      }
    }

    public void pageTempLateList(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pageTempLateList_call method_call = new pageTempLateList_call(contractTempLate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pageTempLateList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ContractTempLate contractTempLate;
      public pageTempLateList_call(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractTempLate = contractTempLate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pageTempLateList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pageTempLateList_args args = new pageTempLateList_args();
        args.setContractTempLate(contractTempLate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ContractTempLate> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pageTempLateList();
      }
    }

    public void pageTotalCount(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pageTotalCount_call method_call = new pageTotalCount_call(contractTempLate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pageTotalCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ContractTempLate contractTempLate;
      public pageTotalCount_call(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractTempLate = contractTempLate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pageTotalCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pageTotalCount_args args = new pageTotalCount_args();
        args.setContractTempLate(contractTempLate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pageTotalCount();
      }
    }

    public void updateTempLate(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTempLate_call method_call = new updateTempLate_call(contractTempLate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTempLate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ContractTempLate contractTempLate;
      public updateTempLate_call(ContractTempLate contractTempLate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractTempLate = contractTempLate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTempLate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTempLate_args args = new updateTempLate_args();
        args.setContractTempLate(contractTempLate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTempLate();
      }
    }

    public void deleteTempLate(String pidArray, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTempLate_call method_call = new deleteTempLate_call(pidArray, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTempLate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pidArray;
      public deleteTempLate_call(String pidArray, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pidArray = pidArray;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTempLate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTempLate_args args = new deleteTempLate_args();
        args.setPidArray(pidArray);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteTempLate();
      }
    }

    public void addTempLateParm(List<ContractTempLateParm> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTempLateParm_call method_call = new addTempLateParm_call(listCtp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTempLateParm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ContractTempLateParm> listCtp;
      public addTempLateParm_call(List<ContractTempLateParm> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listCtp = listCtp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTempLateParm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTempLateParm_args args = new addTempLateParm_args();
        args.setListCtp(listCtp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTempLateParm();
      }
    }

    public void updateTempLateParm(List<ContractTempLateParm> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTempLateParm_call method_call = new updateTempLateParm_call(listCtp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTempLateParm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ContractTempLateParm> listCtp;
      public updateTempLateParm_call(List<ContractTempLateParm> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listCtp = listCtp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTempLateParm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTempLateParm_args args = new updateTempLateParm_args();
        args.setListCtp(listCtp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTempLateParm();
      }
    }

    public void delTempLateParm(int ContractTemplateId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delTempLateParm_call method_call = new delTempLateParm_call(ContractTemplateId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delTempLateParm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int ContractTemplateId;
      public delTempLateParm_call(int ContractTemplateId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ContractTemplateId = ContractTemplateId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delTempLateParm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delTempLateParm_args args = new delTempLateParm_args();
        args.setContractTemplateId(ContractTemplateId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delTempLateParm();
      }
    }

    public void delTempLateOneParm(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delTempLateOneParm_call method_call = new delTempLateOneParm_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delTempLateOneParm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public delTempLateOneParm_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delTempLateOneParm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delTempLateOneParm_args args = new delTempLateOneParm_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delTempLateOneParm();
      }
    }

    public void getTempParmList(TempLateParmDto tempLateParmDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTempParmList_call method_call = new getTempParmList_call(tempLateParmDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTempParmList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TempLateParmDto tempLateParmDto;
      public getTempParmList_call(TempLateParmDto tempLateParmDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tempLateParmDto = tempLateParmDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTempParmList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTempParmList_args args = new getTempParmList_args();
        args.setTempLateParmDto(tempLateParmDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TempLateParmDto> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTempParmList();
      }
    }

    public void getTempTotaleCount(TempLateParmDto tempLateParmDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTempTotaleCount_call method_call = new getTempTotaleCount_call(tempLateParmDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTempTotaleCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TempLateParmDto tempLateParmDto;
      public getTempTotaleCount_call(TempLateParmDto tempLateParmDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tempLateParmDto = tempLateParmDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTempTotaleCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTempTotaleCount_args args = new getTempTotaleCount_args();
        args.setTempLateParmDto(tempLateParmDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTempTotaleCount();
      }
    }

    public void updateTempLateParmDto(List<TempLateParmDto> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTempLateParmDto_call method_call = new updateTempLateParmDto_call(listCtp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTempLateParmDto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TempLateParmDto> listCtp;
      public updateTempLateParmDto_call(List<TempLateParmDto> listCtp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listCtp = listCtp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTempLateParmDto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTempLateParmDto_args args = new updateTempLateParmDto_args();
        args.setListCtp(listCtp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTempLateParmDto();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addContractTempLate", new addContractTempLate());
      processMap.put("pageTempLateList", new pageTempLateList());
      processMap.put("pageTotalCount", new pageTotalCount());
      processMap.put("updateTempLate", new updateTempLate());
      processMap.put("deleteTempLate", new deleteTempLate());
      processMap.put("addTempLateParm", new addTempLateParm());
      processMap.put("updateTempLateParm", new updateTempLateParm());
      processMap.put("delTempLateParm", new delTempLateParm());
      processMap.put("delTempLateOneParm", new delTempLateOneParm());
      processMap.put("getTempParmList", new getTempParmList());
      processMap.put("getTempTotaleCount", new getTempTotaleCount());
      processMap.put("updateTempLateParmDto", new updateTempLateParmDto());
      return processMap;
    }

    public static class addContractTempLate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addContractTempLate_args> {
      public addContractTempLate() {
        super("addContractTempLate");
      }

      public addContractTempLate_args getEmptyArgsInstance() {
        return new addContractTempLate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addContractTempLate_result getResult(I iface, addContractTempLate_args args) throws org.apache.thrift.TException {
        addContractTempLate_result result = new addContractTempLate_result();
        try {
          result.success = iface.addContractTempLate(args.contractTempLate);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class pageTempLateList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pageTempLateList_args> {
      public pageTempLateList() {
        super("pageTempLateList");
      }

      public pageTempLateList_args getEmptyArgsInstance() {
        return new pageTempLateList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pageTempLateList_result getResult(I iface, pageTempLateList_args args) throws org.apache.thrift.TException {
        pageTempLateList_result result = new pageTempLateList_result();
        result.success = iface.pageTempLateList(args.contractTempLate);
        return result;
      }
    }

    public static class pageTotalCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pageTotalCount_args> {
      public pageTotalCount() {
        super("pageTotalCount");
      }

      public pageTotalCount_args getEmptyArgsInstance() {
        return new pageTotalCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pageTotalCount_result getResult(I iface, pageTotalCount_args args) throws org.apache.thrift.TException {
        pageTotalCount_result result = new pageTotalCount_result();
        result.success = iface.pageTotalCount(args.contractTempLate);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTempLate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTempLate_args> {
      public updateTempLate() {
        super("updateTempLate");
      }

      public updateTempLate_args getEmptyArgsInstance() {
        return new updateTempLate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTempLate_result getResult(I iface, updateTempLate_args args) throws org.apache.thrift.TException {
        updateTempLate_result result = new updateTempLate_result();
        result.success = iface.updateTempLate(args.contractTempLate);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteTempLate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTempLate_args> {
      public deleteTempLate() {
        super("deleteTempLate");
      }

      public deleteTempLate_args getEmptyArgsInstance() {
        return new deleteTempLate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTempLate_result getResult(I iface, deleteTempLate_args args) throws org.apache.thrift.TException {
        deleteTempLate_result result = new deleteTempLate_result();
        result.success = iface.deleteTempLate(args.pidArray);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addTempLateParm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTempLateParm_args> {
      public addTempLateParm() {
        super("addTempLateParm");
      }

      public addTempLateParm_args getEmptyArgsInstance() {
        return new addTempLateParm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTempLateParm_result getResult(I iface, addTempLateParm_args args) throws org.apache.thrift.TException {
        addTempLateParm_result result = new addTempLateParm_result();
        result.success = iface.addTempLateParm(args.listCtp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTempLateParm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTempLateParm_args> {
      public updateTempLateParm() {
        super("updateTempLateParm");
      }

      public updateTempLateParm_args getEmptyArgsInstance() {
        return new updateTempLateParm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTempLateParm_result getResult(I iface, updateTempLateParm_args args) throws org.apache.thrift.TException {
        updateTempLateParm_result result = new updateTempLateParm_result();
        result.success = iface.updateTempLateParm(args.listCtp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delTempLateParm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delTempLateParm_args> {
      public delTempLateParm() {
        super("delTempLateParm");
      }

      public delTempLateParm_args getEmptyArgsInstance() {
        return new delTempLateParm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delTempLateParm_result getResult(I iface, delTempLateParm_args args) throws org.apache.thrift.TException {
        delTempLateParm_result result = new delTempLateParm_result();
        result.success = iface.delTempLateParm(args.ContractTemplateId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delTempLateOneParm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delTempLateOneParm_args> {
      public delTempLateOneParm() {
        super("delTempLateOneParm");
      }

      public delTempLateOneParm_args getEmptyArgsInstance() {
        return new delTempLateOneParm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delTempLateOneParm_result getResult(I iface, delTempLateOneParm_args args) throws org.apache.thrift.TException {
        delTempLateOneParm_result result = new delTempLateOneParm_result();
        result.success = iface.delTempLateOneParm(args.pid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTempParmList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTempParmList_args> {
      public getTempParmList() {
        super("getTempParmList");
      }

      public getTempParmList_args getEmptyArgsInstance() {
        return new getTempParmList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTempParmList_result getResult(I iface, getTempParmList_args args) throws org.apache.thrift.TException {
        getTempParmList_result result = new getTempParmList_result();
        result.success = iface.getTempParmList(args.tempLateParmDto);
        return result;
      }
    }

    public static class getTempTotaleCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTempTotaleCount_args> {
      public getTempTotaleCount() {
        super("getTempTotaleCount");
      }

      public getTempTotaleCount_args getEmptyArgsInstance() {
        return new getTempTotaleCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTempTotaleCount_result getResult(I iface, getTempTotaleCount_args args) throws org.apache.thrift.TException {
        getTempTotaleCount_result result = new getTempTotaleCount_result();
        result.success = iface.getTempTotaleCount(args.tempLateParmDto);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTempLateParmDto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTempLateParmDto_args> {
      public updateTempLateParmDto() {
        super("updateTempLateParmDto");
      }

      public updateTempLateParmDto_args getEmptyArgsInstance() {
        return new updateTempLateParmDto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTempLateParmDto_result getResult(I iface, updateTempLateParmDto_args args) throws org.apache.thrift.TException {
        updateTempLateParmDto_result result = new updateTempLateParmDto_result();
        result.success = iface.updateTempLateParmDto(args.listCtp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addContractTempLate", new addContractTempLate());
      processMap.put("pageTempLateList", new pageTempLateList());
      processMap.put("pageTotalCount", new pageTotalCount());
      processMap.put("updateTempLate", new updateTempLate());
      processMap.put("deleteTempLate", new deleteTempLate());
      processMap.put("addTempLateParm", new addTempLateParm());
      processMap.put("updateTempLateParm", new updateTempLateParm());
      processMap.put("delTempLateParm", new delTempLateParm());
      processMap.put("delTempLateOneParm", new delTempLateOneParm());
      processMap.put("getTempParmList", new getTempParmList());
      processMap.put("getTempTotaleCount", new getTempTotaleCount());
      processMap.put("updateTempLateParmDto", new updateTempLateParmDto());
      return processMap;
    }

    public static class addContractTempLate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addContractTempLate_args, Integer> {
      public addContractTempLate() {
        super("addContractTempLate");
      }

      public addContractTempLate_args getEmptyArgsInstance() {
        return new addContractTempLate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addContractTempLate_result result = new addContractTempLate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addContractTempLate_result result = new addContractTempLate_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addContractTempLate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addContractTempLate(args.contractTempLate,resultHandler);
      }
    }

    public static class pageTempLateList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pageTempLateList_args, List<ContractTempLate>> {
      public pageTempLateList() {
        super("pageTempLateList");
      }

      public pageTempLateList_args getEmptyArgsInstance() {
        return new pageTempLateList_args();
      }

      public AsyncMethodCallback<List<ContractTempLate>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ContractTempLate>>() { 
          public void onComplete(List<ContractTempLate> o) {
            pageTempLateList_result result = new pageTempLateList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pageTempLateList_result result = new pageTempLateList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pageTempLateList_args args, org.apache.thrift.async.AsyncMethodCallback<List<ContractTempLate>> resultHandler) throws TException {
        iface.pageTempLateList(args.contractTempLate,resultHandler);
      }
    }

    public static class pageTotalCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pageTotalCount_args, Integer> {
      public pageTotalCount() {
        super("pageTotalCount");
      }

      public pageTotalCount_args getEmptyArgsInstance() {
        return new pageTotalCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            pageTotalCount_result result = new pageTotalCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pageTotalCount_result result = new pageTotalCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pageTotalCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.pageTotalCount(args.contractTempLate,resultHandler);
      }
    }

    public static class updateTempLate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTempLate_args, Boolean> {
      public updateTempLate() {
        super("updateTempLate");
      }

      public updateTempLate_args getEmptyArgsInstance() {
        return new updateTempLate_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateTempLate_result result = new updateTempLate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTempLate_result result = new updateTempLate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTempLate_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateTempLate(args.contractTempLate,resultHandler);
      }
    }

    public static class deleteTempLate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTempLate_args, Boolean> {
      public deleteTempLate() {
        super("deleteTempLate");
      }

      public deleteTempLate_args getEmptyArgsInstance() {
        return new deleteTempLate_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteTempLate_result result = new deleteTempLate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteTempLate_result result = new deleteTempLate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTempLate_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteTempLate(args.pidArray,resultHandler);
      }
    }

    public static class addTempLateParm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTempLateParm_args, Boolean> {
      public addTempLateParm() {
        super("addTempLateParm");
      }

      public addTempLateParm_args getEmptyArgsInstance() {
        return new addTempLateParm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addTempLateParm_result result = new addTempLateParm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTempLateParm_result result = new addTempLateParm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTempLateParm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addTempLateParm(args.listCtp,resultHandler);
      }
    }

    public static class updateTempLateParm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTempLateParm_args, Boolean> {
      public updateTempLateParm() {
        super("updateTempLateParm");
      }

      public updateTempLateParm_args getEmptyArgsInstance() {
        return new updateTempLateParm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateTempLateParm_result result = new updateTempLateParm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTempLateParm_result result = new updateTempLateParm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTempLateParm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateTempLateParm(args.listCtp,resultHandler);
      }
    }

    public static class delTempLateParm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delTempLateParm_args, Boolean> {
      public delTempLateParm() {
        super("delTempLateParm");
      }

      public delTempLateParm_args getEmptyArgsInstance() {
        return new delTempLateParm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delTempLateParm_result result = new delTempLateParm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delTempLateParm_result result = new delTempLateParm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delTempLateParm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delTempLateParm(args.ContractTemplateId,resultHandler);
      }
    }

    public static class delTempLateOneParm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delTempLateOneParm_args, Boolean> {
      public delTempLateOneParm() {
        super("delTempLateOneParm");
      }

      public delTempLateOneParm_args getEmptyArgsInstance() {
        return new delTempLateOneParm_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delTempLateOneParm_result result = new delTempLateOneParm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delTempLateOneParm_result result = new delTempLateOneParm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delTempLateOneParm_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delTempLateOneParm(args.pid,resultHandler);
      }
    }

    public static class getTempParmList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTempParmList_args, List<TempLateParmDto>> {
      public getTempParmList() {
        super("getTempParmList");
      }

      public getTempParmList_args getEmptyArgsInstance() {
        return new getTempParmList_args();
      }

      public AsyncMethodCallback<List<TempLateParmDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TempLateParmDto>>() { 
          public void onComplete(List<TempLateParmDto> o) {
            getTempParmList_result result = new getTempParmList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTempParmList_result result = new getTempParmList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTempParmList_args args, org.apache.thrift.async.AsyncMethodCallback<List<TempLateParmDto>> resultHandler) throws TException {
        iface.getTempParmList(args.tempLateParmDto,resultHandler);
      }
    }

    public static class getTempTotaleCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTempTotaleCount_args, Integer> {
      public getTempTotaleCount() {
        super("getTempTotaleCount");
      }

      public getTempTotaleCount_args getEmptyArgsInstance() {
        return new getTempTotaleCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getTempTotaleCount_result result = new getTempTotaleCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTempTotaleCount_result result = new getTempTotaleCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTempTotaleCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getTempTotaleCount(args.tempLateParmDto,resultHandler);
      }
    }

    public static class updateTempLateParmDto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTempLateParmDto_args, Boolean> {
      public updateTempLateParmDto() {
        super("updateTempLateParmDto");
      }

      public updateTempLateParmDto_args getEmptyArgsInstance() {
        return new updateTempLateParmDto_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateTempLateParmDto_result result = new updateTempLateParmDto_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTempLateParmDto_result result = new updateTempLateParmDto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTempLateParmDto_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateTempLateParmDto(args.listCtp,resultHandler);
      }
    }

  }

  public static class addContractTempLate_args implements org.apache.thrift.TBase<addContractTempLate_args, addContractTempLate_args._Fields>, java.io.Serializable, Cloneable, Comparable<addContractTempLate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addContractTempLate_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_TEMP_LATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTempLate", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addContractTempLate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addContractTempLate_argsTupleSchemeFactory());
    }

    public ContractTempLate contractTempLate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_TEMP_LATE((short)1, "contractTempLate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_TEMP_LATE
            return CONTRACT_TEMP_LATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_TEMP_LATE, new org.apache.thrift.meta_data.FieldMetaData("contractTempLate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTempLate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContractTempLate_args.class, metaDataMap);
    }

    public addContractTempLate_args() {
    }

    public addContractTempLate_args(
      ContractTempLate contractTempLate)
    {
      this();
      this.contractTempLate = contractTempLate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addContractTempLate_args(addContractTempLate_args other) {
      if (other.isSetContractTempLate()) {
        this.contractTempLate = new ContractTempLate(other.contractTempLate);
      }
    }

    public addContractTempLate_args deepCopy() {
      return new addContractTempLate_args(this);
    }

    @Override
    public void clear() {
      this.contractTempLate = null;
    }

    public ContractTempLate getContractTempLate() {
      return this.contractTempLate;
    }

    public addContractTempLate_args setContractTempLate(ContractTempLate contractTempLate) {
      this.contractTempLate = contractTempLate;
      return this;
    }

    public void unsetContractTempLate() {
      this.contractTempLate = null;
    }

    /** Returns true if field contractTempLate is set (has been assigned a value) and false otherwise */
    public boolean isSetContractTempLate() {
      return this.contractTempLate != null;
    }

    public void setContractTempLateIsSet(boolean value) {
      if (!value) {
        this.contractTempLate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        if (value == null) {
          unsetContractTempLate();
        } else {
          setContractTempLate((ContractTempLate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        return getContractTempLate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_TEMP_LATE:
        return isSetContractTempLate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addContractTempLate_args)
        return this.equals((addContractTempLate_args)that);
      return false;
    }

    public boolean equals(addContractTempLate_args that) {
      if (that == null)
        return false;

      boolean this_present_contractTempLate = true && this.isSetContractTempLate();
      boolean that_present_contractTempLate = true && that.isSetContractTempLate();
      if (this_present_contractTempLate || that_present_contractTempLate) {
        if (!(this_present_contractTempLate && that_present_contractTempLate))
          return false;
        if (!this.contractTempLate.equals(that.contractTempLate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_contractTempLate = true && (isSetContractTempLate());
      list.add(present_contractTempLate);
      if (present_contractTempLate)
        list.add(contractTempLate);

      return list.hashCode();
    }

    @Override
    public int compareTo(addContractTempLate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContractTempLate()).compareTo(other.isSetContractTempLate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractTempLate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTempLate, other.contractTempLate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addContractTempLate_args(");
      boolean first = true;

      sb.append("contractTempLate:");
      if (this.contractTempLate == null) {
        sb.append("null");
      } else {
        sb.append(this.contractTempLate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (contractTempLate != null) {
        contractTempLate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addContractTempLate_argsStandardSchemeFactory implements SchemeFactory {
      public addContractTempLate_argsStandardScheme getScheme() {
        return new addContractTempLate_argsStandardScheme();
      }
    }

    private static class addContractTempLate_argsStandardScheme extends StandardScheme<addContractTempLate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addContractTempLate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_TEMP_LATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractTempLate = new ContractTempLate();
                struct.contractTempLate.read(iprot);
                struct.setContractTempLateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addContractTempLate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractTempLate != null) {
          oprot.writeFieldBegin(CONTRACT_TEMP_LATE_FIELD_DESC);
          struct.contractTempLate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addContractTempLate_argsTupleSchemeFactory implements SchemeFactory {
      public addContractTempLate_argsTupleScheme getScheme() {
        return new addContractTempLate_argsTupleScheme();
      }
    }

    private static class addContractTempLate_argsTupleScheme extends TupleScheme<addContractTempLate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addContractTempLate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractTempLate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractTempLate()) {
          struct.contractTempLate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addContractTempLate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.contractTempLate = new ContractTempLate();
          struct.contractTempLate.read(iprot);
          struct.setContractTempLateIsSet(true);
        }
      }
    }

  }

  public static class addContractTempLate_result implements org.apache.thrift.TBase<addContractTempLate_result, addContractTempLate_result._Fields>, java.io.Serializable, Cloneable, Comparable<addContractTempLate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addContractTempLate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addContractTempLate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addContractTempLate_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContractTempLate_result.class, metaDataMap);
    }

    public addContractTempLate_result() {
    }

    public addContractTempLate_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addContractTempLate_result(addContractTempLate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addContractTempLate_result deepCopy() {
      return new addContractTempLate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addContractTempLate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addContractTempLate_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addContractTempLate_result)
        return this.equals((addContractTempLate_result)that);
      return false;
    }

    public boolean equals(addContractTempLate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addContractTempLate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addContractTempLate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addContractTempLate_resultStandardSchemeFactory implements SchemeFactory {
      public addContractTempLate_resultStandardScheme getScheme() {
        return new addContractTempLate_resultStandardScheme();
      }
    }

    private static class addContractTempLate_resultStandardScheme extends StandardScheme<addContractTempLate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addContractTempLate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addContractTempLate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addContractTempLate_resultTupleSchemeFactory implements SchemeFactory {
      public addContractTempLate_resultTupleScheme getScheme() {
        return new addContractTempLate_resultTupleScheme();
      }
    }

    private static class addContractTempLate_resultTupleScheme extends TupleScheme<addContractTempLate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addContractTempLate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addContractTempLate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class pageTempLateList_args implements org.apache.thrift.TBase<pageTempLateList_args, pageTempLateList_args._Fields>, java.io.Serializable, Cloneable, Comparable<pageTempLateList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pageTempLateList_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_TEMP_LATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTempLate", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pageTempLateList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pageTempLateList_argsTupleSchemeFactory());
    }

    public ContractTempLate contractTempLate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_TEMP_LATE((short)1, "contractTempLate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_TEMP_LATE
            return CONTRACT_TEMP_LATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_TEMP_LATE, new org.apache.thrift.meta_data.FieldMetaData("contractTempLate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTempLate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pageTempLateList_args.class, metaDataMap);
    }

    public pageTempLateList_args() {
    }

    public pageTempLateList_args(
      ContractTempLate contractTempLate)
    {
      this();
      this.contractTempLate = contractTempLate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pageTempLateList_args(pageTempLateList_args other) {
      if (other.isSetContractTempLate()) {
        this.contractTempLate = new ContractTempLate(other.contractTempLate);
      }
    }

    public pageTempLateList_args deepCopy() {
      return new pageTempLateList_args(this);
    }

    @Override
    public void clear() {
      this.contractTempLate = null;
    }

    public ContractTempLate getContractTempLate() {
      return this.contractTempLate;
    }

    public pageTempLateList_args setContractTempLate(ContractTempLate contractTempLate) {
      this.contractTempLate = contractTempLate;
      return this;
    }

    public void unsetContractTempLate() {
      this.contractTempLate = null;
    }

    /** Returns true if field contractTempLate is set (has been assigned a value) and false otherwise */
    public boolean isSetContractTempLate() {
      return this.contractTempLate != null;
    }

    public void setContractTempLateIsSet(boolean value) {
      if (!value) {
        this.contractTempLate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        if (value == null) {
          unsetContractTempLate();
        } else {
          setContractTempLate((ContractTempLate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        return getContractTempLate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_TEMP_LATE:
        return isSetContractTempLate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pageTempLateList_args)
        return this.equals((pageTempLateList_args)that);
      return false;
    }

    public boolean equals(pageTempLateList_args that) {
      if (that == null)
        return false;

      boolean this_present_contractTempLate = true && this.isSetContractTempLate();
      boolean that_present_contractTempLate = true && that.isSetContractTempLate();
      if (this_present_contractTempLate || that_present_contractTempLate) {
        if (!(this_present_contractTempLate && that_present_contractTempLate))
          return false;
        if (!this.contractTempLate.equals(that.contractTempLate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_contractTempLate = true && (isSetContractTempLate());
      list.add(present_contractTempLate);
      if (present_contractTempLate)
        list.add(contractTempLate);

      return list.hashCode();
    }

    @Override
    public int compareTo(pageTempLateList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContractTempLate()).compareTo(other.isSetContractTempLate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractTempLate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTempLate, other.contractTempLate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pageTempLateList_args(");
      boolean first = true;

      sb.append("contractTempLate:");
      if (this.contractTempLate == null) {
        sb.append("null");
      } else {
        sb.append(this.contractTempLate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (contractTempLate != null) {
        contractTempLate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pageTempLateList_argsStandardSchemeFactory implements SchemeFactory {
      public pageTempLateList_argsStandardScheme getScheme() {
        return new pageTempLateList_argsStandardScheme();
      }
    }

    private static class pageTempLateList_argsStandardScheme extends StandardScheme<pageTempLateList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pageTempLateList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_TEMP_LATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractTempLate = new ContractTempLate();
                struct.contractTempLate.read(iprot);
                struct.setContractTempLateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pageTempLateList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractTempLate != null) {
          oprot.writeFieldBegin(CONTRACT_TEMP_LATE_FIELD_DESC);
          struct.contractTempLate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pageTempLateList_argsTupleSchemeFactory implements SchemeFactory {
      public pageTempLateList_argsTupleScheme getScheme() {
        return new pageTempLateList_argsTupleScheme();
      }
    }

    private static class pageTempLateList_argsTupleScheme extends TupleScheme<pageTempLateList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pageTempLateList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractTempLate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractTempLate()) {
          struct.contractTempLate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pageTempLateList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.contractTempLate = new ContractTempLate();
          struct.contractTempLate.read(iprot);
          struct.setContractTempLateIsSet(true);
        }
      }
    }

  }

  public static class pageTempLateList_result implements org.apache.thrift.TBase<pageTempLateList_result, pageTempLateList_result._Fields>, java.io.Serializable, Cloneable, Comparable<pageTempLateList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pageTempLateList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pageTempLateList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pageTempLateList_resultTupleSchemeFactory());
    }

    public List<ContractTempLate> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTempLate.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pageTempLateList_result.class, metaDataMap);
    }

    public pageTempLateList_result() {
    }

    public pageTempLateList_result(
      List<ContractTempLate> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pageTempLateList_result(pageTempLateList_result other) {
      if (other.isSetSuccess()) {
        List<ContractTempLate> __this__success = new ArrayList<ContractTempLate>(other.success.size());
        for (ContractTempLate other_element : other.success) {
          __this__success.add(new ContractTempLate(other_element));
        }
        this.success = __this__success;
      }
    }

    public pageTempLateList_result deepCopy() {
      return new pageTempLateList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ContractTempLate> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ContractTempLate elem) {
      if (this.success == null) {
        this.success = new ArrayList<ContractTempLate>();
      }
      this.success.add(elem);
    }

    public List<ContractTempLate> getSuccess() {
      return this.success;
    }

    public pageTempLateList_result setSuccess(List<ContractTempLate> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ContractTempLate>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pageTempLateList_result)
        return this.equals((pageTempLateList_result)that);
      return false;
    }

    public boolean equals(pageTempLateList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(pageTempLateList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pageTempLateList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pageTempLateList_resultStandardSchemeFactory implements SchemeFactory {
      public pageTempLateList_resultStandardScheme getScheme() {
        return new pageTempLateList_resultStandardScheme();
      }
    }

    private static class pageTempLateList_resultStandardScheme extends StandardScheme<pageTempLateList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pageTempLateList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<ContractTempLate>(_list0.size);
                  ContractTempLate _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ContractTempLate();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pageTempLateList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ContractTempLate _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pageTempLateList_resultTupleSchemeFactory implements SchemeFactory {
      public pageTempLateList_resultTupleScheme getScheme() {
        return new pageTempLateList_resultTupleScheme();
      }
    }

    private static class pageTempLateList_resultTupleScheme extends TupleScheme<pageTempLateList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pageTempLateList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ContractTempLate _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pageTempLateList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ContractTempLate>(_list5.size);
            ContractTempLate _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ContractTempLate();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pageTotalCount_args implements org.apache.thrift.TBase<pageTotalCount_args, pageTotalCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<pageTotalCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pageTotalCount_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_TEMP_LATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTempLate", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pageTotalCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pageTotalCount_argsTupleSchemeFactory());
    }

    public ContractTempLate contractTempLate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_TEMP_LATE((short)1, "contractTempLate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_TEMP_LATE
            return CONTRACT_TEMP_LATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_TEMP_LATE, new org.apache.thrift.meta_data.FieldMetaData("contractTempLate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTempLate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pageTotalCount_args.class, metaDataMap);
    }

    public pageTotalCount_args() {
    }

    public pageTotalCount_args(
      ContractTempLate contractTempLate)
    {
      this();
      this.contractTempLate = contractTempLate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pageTotalCount_args(pageTotalCount_args other) {
      if (other.isSetContractTempLate()) {
        this.contractTempLate = new ContractTempLate(other.contractTempLate);
      }
    }

    public pageTotalCount_args deepCopy() {
      return new pageTotalCount_args(this);
    }

    @Override
    public void clear() {
      this.contractTempLate = null;
    }

    public ContractTempLate getContractTempLate() {
      return this.contractTempLate;
    }

    public pageTotalCount_args setContractTempLate(ContractTempLate contractTempLate) {
      this.contractTempLate = contractTempLate;
      return this;
    }

    public void unsetContractTempLate() {
      this.contractTempLate = null;
    }

    /** Returns true if field contractTempLate is set (has been assigned a value) and false otherwise */
    public boolean isSetContractTempLate() {
      return this.contractTempLate != null;
    }

    public void setContractTempLateIsSet(boolean value) {
      if (!value) {
        this.contractTempLate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        if (value == null) {
          unsetContractTempLate();
        } else {
          setContractTempLate((ContractTempLate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        return getContractTempLate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_TEMP_LATE:
        return isSetContractTempLate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pageTotalCount_args)
        return this.equals((pageTotalCount_args)that);
      return false;
    }

    public boolean equals(pageTotalCount_args that) {
      if (that == null)
        return false;

      boolean this_present_contractTempLate = true && this.isSetContractTempLate();
      boolean that_present_contractTempLate = true && that.isSetContractTempLate();
      if (this_present_contractTempLate || that_present_contractTempLate) {
        if (!(this_present_contractTempLate && that_present_contractTempLate))
          return false;
        if (!this.contractTempLate.equals(that.contractTempLate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_contractTempLate = true && (isSetContractTempLate());
      list.add(present_contractTempLate);
      if (present_contractTempLate)
        list.add(contractTempLate);

      return list.hashCode();
    }

    @Override
    public int compareTo(pageTotalCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContractTempLate()).compareTo(other.isSetContractTempLate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractTempLate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTempLate, other.contractTempLate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pageTotalCount_args(");
      boolean first = true;

      sb.append("contractTempLate:");
      if (this.contractTempLate == null) {
        sb.append("null");
      } else {
        sb.append(this.contractTempLate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (contractTempLate != null) {
        contractTempLate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pageTotalCount_argsStandardSchemeFactory implements SchemeFactory {
      public pageTotalCount_argsStandardScheme getScheme() {
        return new pageTotalCount_argsStandardScheme();
      }
    }

    private static class pageTotalCount_argsStandardScheme extends StandardScheme<pageTotalCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pageTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_TEMP_LATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractTempLate = new ContractTempLate();
                struct.contractTempLate.read(iprot);
                struct.setContractTempLateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pageTotalCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractTempLate != null) {
          oprot.writeFieldBegin(CONTRACT_TEMP_LATE_FIELD_DESC);
          struct.contractTempLate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pageTotalCount_argsTupleSchemeFactory implements SchemeFactory {
      public pageTotalCount_argsTupleScheme getScheme() {
        return new pageTotalCount_argsTupleScheme();
      }
    }

    private static class pageTotalCount_argsTupleScheme extends TupleScheme<pageTotalCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pageTotalCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractTempLate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractTempLate()) {
          struct.contractTempLate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pageTotalCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.contractTempLate = new ContractTempLate();
          struct.contractTempLate.read(iprot);
          struct.setContractTempLateIsSet(true);
        }
      }
    }

  }

  public static class pageTotalCount_result implements org.apache.thrift.TBase<pageTotalCount_result, pageTotalCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<pageTotalCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pageTotalCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pageTotalCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pageTotalCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pageTotalCount_result.class, metaDataMap);
    }

    public pageTotalCount_result() {
    }

    public pageTotalCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pageTotalCount_result(pageTotalCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public pageTotalCount_result deepCopy() {
      return new pageTotalCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public pageTotalCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pageTotalCount_result)
        return this.equals((pageTotalCount_result)that);
      return false;
    }

    public boolean equals(pageTotalCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(pageTotalCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pageTotalCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pageTotalCount_resultStandardSchemeFactory implements SchemeFactory {
      public pageTotalCount_resultStandardScheme getScheme() {
        return new pageTotalCount_resultStandardScheme();
      }
    }

    private static class pageTotalCount_resultStandardScheme extends StandardScheme<pageTotalCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pageTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pageTotalCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pageTotalCount_resultTupleSchemeFactory implements SchemeFactory {
      public pageTotalCount_resultTupleScheme getScheme() {
        return new pageTotalCount_resultTupleScheme();
      }
    }

    private static class pageTotalCount_resultTupleScheme extends TupleScheme<pageTotalCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pageTotalCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pageTotalCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTempLate_args implements org.apache.thrift.TBase<updateTempLate_args, updateTempLate_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTempLate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTempLate_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_TEMP_LATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTempLate", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTempLate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTempLate_argsTupleSchemeFactory());
    }

    public ContractTempLate contractTempLate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_TEMP_LATE((short)1, "contractTempLate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_TEMP_LATE
            return CONTRACT_TEMP_LATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_TEMP_LATE, new org.apache.thrift.meta_data.FieldMetaData("contractTempLate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTempLate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTempLate_args.class, metaDataMap);
    }

    public updateTempLate_args() {
    }

    public updateTempLate_args(
      ContractTempLate contractTempLate)
    {
      this();
      this.contractTempLate = contractTempLate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTempLate_args(updateTempLate_args other) {
      if (other.isSetContractTempLate()) {
        this.contractTempLate = new ContractTempLate(other.contractTempLate);
      }
    }

    public updateTempLate_args deepCopy() {
      return new updateTempLate_args(this);
    }

    @Override
    public void clear() {
      this.contractTempLate = null;
    }

    public ContractTempLate getContractTempLate() {
      return this.contractTempLate;
    }

    public updateTempLate_args setContractTempLate(ContractTempLate contractTempLate) {
      this.contractTempLate = contractTempLate;
      return this;
    }

    public void unsetContractTempLate() {
      this.contractTempLate = null;
    }

    /** Returns true if field contractTempLate is set (has been assigned a value) and false otherwise */
    public boolean isSetContractTempLate() {
      return this.contractTempLate != null;
    }

    public void setContractTempLateIsSet(boolean value) {
      if (!value) {
        this.contractTempLate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        if (value == null) {
          unsetContractTempLate();
        } else {
          setContractTempLate((ContractTempLate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_TEMP_LATE:
        return getContractTempLate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_TEMP_LATE:
        return isSetContractTempLate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTempLate_args)
        return this.equals((updateTempLate_args)that);
      return false;
    }

    public boolean equals(updateTempLate_args that) {
      if (that == null)
        return false;

      boolean this_present_contractTempLate = true && this.isSetContractTempLate();
      boolean that_present_contractTempLate = true && that.isSetContractTempLate();
      if (this_present_contractTempLate || that_present_contractTempLate) {
        if (!(this_present_contractTempLate && that_present_contractTempLate))
          return false;
        if (!this.contractTempLate.equals(that.contractTempLate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_contractTempLate = true && (isSetContractTempLate());
      list.add(present_contractTempLate);
      if (present_contractTempLate)
        list.add(contractTempLate);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTempLate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContractTempLate()).compareTo(other.isSetContractTempLate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractTempLate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTempLate, other.contractTempLate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTempLate_args(");
      boolean first = true;

      sb.append("contractTempLate:");
      if (this.contractTempLate == null) {
        sb.append("null");
      } else {
        sb.append(this.contractTempLate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (contractTempLate != null) {
        contractTempLate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTempLate_argsStandardSchemeFactory implements SchemeFactory {
      public updateTempLate_argsStandardScheme getScheme() {
        return new updateTempLate_argsStandardScheme();
      }
    }

    private static class updateTempLate_argsStandardScheme extends StandardScheme<updateTempLate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTempLate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_TEMP_LATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractTempLate = new ContractTempLate();
                struct.contractTempLate.read(iprot);
                struct.setContractTempLateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTempLate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractTempLate != null) {
          oprot.writeFieldBegin(CONTRACT_TEMP_LATE_FIELD_DESC);
          struct.contractTempLate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTempLate_argsTupleSchemeFactory implements SchemeFactory {
      public updateTempLate_argsTupleScheme getScheme() {
        return new updateTempLate_argsTupleScheme();
      }
    }

    private static class updateTempLate_argsTupleScheme extends TupleScheme<updateTempLate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTempLate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractTempLate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractTempLate()) {
          struct.contractTempLate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTempLate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.contractTempLate = new ContractTempLate();
          struct.contractTempLate.read(iprot);
          struct.setContractTempLateIsSet(true);
        }
      }
    }

  }

  public static class updateTempLate_result implements org.apache.thrift.TBase<updateTempLate_result, updateTempLate_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTempLate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTempLate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTempLate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTempLate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTempLate_result.class, metaDataMap);
    }

    public updateTempLate_result() {
    }

    public updateTempLate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTempLate_result(updateTempLate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTempLate_result deepCopy() {
      return new updateTempLate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateTempLate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTempLate_result)
        return this.equals((updateTempLate_result)that);
      return false;
    }

    public boolean equals(updateTempLate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTempLate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTempLate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTempLate_resultStandardSchemeFactory implements SchemeFactory {
      public updateTempLate_resultStandardScheme getScheme() {
        return new updateTempLate_resultStandardScheme();
      }
    }

    private static class updateTempLate_resultStandardScheme extends StandardScheme<updateTempLate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTempLate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTempLate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTempLate_resultTupleSchemeFactory implements SchemeFactory {
      public updateTempLate_resultTupleScheme getScheme() {
        return new updateTempLate_resultTupleScheme();
      }
    }

    private static class updateTempLate_resultTupleScheme extends TupleScheme<updateTempLate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTempLate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTempLate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteTempLate_args implements org.apache.thrift.TBase<deleteTempLate_args, deleteTempLate_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTempLate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTempLate_args");

    private static final org.apache.thrift.protocol.TField PID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("pidArray", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTempLate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTempLate_argsTupleSchemeFactory());
    }

    public String pidArray; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID_ARRAY((short)1, "pidArray");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID_ARRAY
            return PID_ARRAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("pidArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTempLate_args.class, metaDataMap);
    }

    public deleteTempLate_args() {
    }

    public deleteTempLate_args(
      String pidArray)
    {
      this();
      this.pidArray = pidArray;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTempLate_args(deleteTempLate_args other) {
      if (other.isSetPidArray()) {
        this.pidArray = other.pidArray;
      }
    }

    public deleteTempLate_args deepCopy() {
      return new deleteTempLate_args(this);
    }

    @Override
    public void clear() {
      this.pidArray = null;
    }

    public String getPidArray() {
      return this.pidArray;
    }

    public deleteTempLate_args setPidArray(String pidArray) {
      this.pidArray = pidArray;
      return this;
    }

    public void unsetPidArray() {
      this.pidArray = null;
    }

    /** Returns true if field pidArray is set (has been assigned a value) and false otherwise */
    public boolean isSetPidArray() {
      return this.pidArray != null;
    }

    public void setPidArrayIsSet(boolean value) {
      if (!value) {
        this.pidArray = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID_ARRAY:
        if (value == null) {
          unsetPidArray();
        } else {
          setPidArray((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID_ARRAY:
        return getPidArray();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID_ARRAY:
        return isSetPidArray();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTempLate_args)
        return this.equals((deleteTempLate_args)that);
      return false;
    }

    public boolean equals(deleteTempLate_args that) {
      if (that == null)
        return false;

      boolean this_present_pidArray = true && this.isSetPidArray();
      boolean that_present_pidArray = true && that.isSetPidArray();
      if (this_present_pidArray || that_present_pidArray) {
        if (!(this_present_pidArray && that_present_pidArray))
          return false;
        if (!this.pidArray.equals(that.pidArray))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pidArray = true && (isSetPidArray());
      list.add(present_pidArray);
      if (present_pidArray)
        list.add(pidArray);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteTempLate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPidArray()).compareTo(other.isSetPidArray());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPidArray()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidArray, other.pidArray);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTempLate_args(");
      boolean first = true;

      sb.append("pidArray:");
      if (this.pidArray == null) {
        sb.append("null");
      } else {
        sb.append(this.pidArray);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTempLate_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTempLate_argsStandardScheme getScheme() {
        return new deleteTempLate_argsStandardScheme();
      }
    }

    private static class deleteTempLate_argsStandardScheme extends StandardScheme<deleteTempLate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTempLate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID_ARRAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pidArray = iprot.readString();
                struct.setPidArrayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTempLate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pidArray != null) {
          oprot.writeFieldBegin(PID_ARRAY_FIELD_DESC);
          oprot.writeString(struct.pidArray);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTempLate_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTempLate_argsTupleScheme getScheme() {
        return new deleteTempLate_argsTupleScheme();
      }
    }

    private static class deleteTempLate_argsTupleScheme extends TupleScheme<deleteTempLate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTempLate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPidArray()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPidArray()) {
          oprot.writeString(struct.pidArray);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTempLate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pidArray = iprot.readString();
          struct.setPidArrayIsSet(true);
        }
      }
    }

  }

  public static class deleteTempLate_result implements org.apache.thrift.TBase<deleteTempLate_result, deleteTempLate_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTempLate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTempLate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTempLate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTempLate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTempLate_result.class, metaDataMap);
    }

    public deleteTempLate_result() {
    }

    public deleteTempLate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTempLate_result(deleteTempLate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteTempLate_result deepCopy() {
      return new deleteTempLate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteTempLate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTempLate_result)
        return this.equals((deleteTempLate_result)that);
      return false;
    }

    public boolean equals(deleteTempLate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteTempLate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTempLate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTempLate_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTempLate_resultStandardScheme getScheme() {
        return new deleteTempLate_resultStandardScheme();
      }
    }

    private static class deleteTempLate_resultStandardScheme extends StandardScheme<deleteTempLate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTempLate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTempLate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTempLate_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTempLate_resultTupleScheme getScheme() {
        return new deleteTempLate_resultTupleScheme();
      }
    }

    private static class deleteTempLate_resultTupleScheme extends TupleScheme<deleteTempLate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTempLate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTempLate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addTempLateParm_args implements org.apache.thrift.TBase<addTempLateParm_args, addTempLateParm_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTempLateParm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTempLateParm_args");

    private static final org.apache.thrift.protocol.TField LIST_CTP_FIELD_DESC = new org.apache.thrift.protocol.TField("listCtp", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTempLateParm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTempLateParm_argsTupleSchemeFactory());
    }

    public List<ContractTempLateParm> listCtp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_CTP((short)1, "listCtp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_CTP
            return LIST_CTP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_CTP, new org.apache.thrift.meta_data.FieldMetaData("listCtp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTempLateParm.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTempLateParm_args.class, metaDataMap);
    }

    public addTempLateParm_args() {
    }

    public addTempLateParm_args(
      List<ContractTempLateParm> listCtp)
    {
      this();
      this.listCtp = listCtp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTempLateParm_args(addTempLateParm_args other) {
      if (other.isSetListCtp()) {
        List<ContractTempLateParm> __this__listCtp = new ArrayList<ContractTempLateParm>(other.listCtp.size());
        for (ContractTempLateParm other_element : other.listCtp) {
          __this__listCtp.add(new ContractTempLateParm(other_element));
        }
        this.listCtp = __this__listCtp;
      }
    }

    public addTempLateParm_args deepCopy() {
      return new addTempLateParm_args(this);
    }

    @Override
    public void clear() {
      this.listCtp = null;
    }

    public int getListCtpSize() {
      return (this.listCtp == null) ? 0 : this.listCtp.size();
    }

    public java.util.Iterator<ContractTempLateParm> getListCtpIterator() {
      return (this.listCtp == null) ? null : this.listCtp.iterator();
    }

    public void addToListCtp(ContractTempLateParm elem) {
      if (this.listCtp == null) {
        this.listCtp = new ArrayList<ContractTempLateParm>();
      }
      this.listCtp.add(elem);
    }

    public List<ContractTempLateParm> getListCtp() {
      return this.listCtp;
    }

    public addTempLateParm_args setListCtp(List<ContractTempLateParm> listCtp) {
      this.listCtp = listCtp;
      return this;
    }

    public void unsetListCtp() {
      this.listCtp = null;
    }

    /** Returns true if field listCtp is set (has been assigned a value) and false otherwise */
    public boolean isSetListCtp() {
      return this.listCtp != null;
    }

    public void setListCtpIsSet(boolean value) {
      if (!value) {
        this.listCtp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_CTP:
        if (value == null) {
          unsetListCtp();
        } else {
          setListCtp((List<ContractTempLateParm>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_CTP:
        return getListCtp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_CTP:
        return isSetListCtp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTempLateParm_args)
        return this.equals((addTempLateParm_args)that);
      return false;
    }

    public boolean equals(addTempLateParm_args that) {
      if (that == null)
        return false;

      boolean this_present_listCtp = true && this.isSetListCtp();
      boolean that_present_listCtp = true && that.isSetListCtp();
      if (this_present_listCtp || that_present_listCtp) {
        if (!(this_present_listCtp && that_present_listCtp))
          return false;
        if (!this.listCtp.equals(that.listCtp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listCtp = true && (isSetListCtp());
      list.add(present_listCtp);
      if (present_listCtp)
        list.add(listCtp);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTempLateParm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListCtp()).compareTo(other.isSetListCtp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListCtp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listCtp, other.listCtp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTempLateParm_args(");
      boolean first = true;

      sb.append("listCtp:");
      if (this.listCtp == null) {
        sb.append("null");
      } else {
        sb.append(this.listCtp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTempLateParm_argsStandardSchemeFactory implements SchemeFactory {
      public addTempLateParm_argsStandardScheme getScheme() {
        return new addTempLateParm_argsStandardScheme();
      }
    }

    private static class addTempLateParm_argsStandardScheme extends StandardScheme<addTempLateParm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTempLateParm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_CTP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.listCtp = new ArrayList<ContractTempLateParm>(_list8.size);
                  ContractTempLateParm _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new ContractTempLateParm();
                    _elem9.read(iprot);
                    struct.listCtp.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setListCtpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTempLateParm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listCtp != null) {
          oprot.writeFieldBegin(LIST_CTP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listCtp.size()));
            for (ContractTempLateParm _iter11 : struct.listCtp)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTempLateParm_argsTupleSchemeFactory implements SchemeFactory {
      public addTempLateParm_argsTupleScheme getScheme() {
        return new addTempLateParm_argsTupleScheme();
      }
    }

    private static class addTempLateParm_argsTupleScheme extends TupleScheme<addTempLateParm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTempLateParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListCtp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListCtp()) {
          {
            oprot.writeI32(struct.listCtp.size());
            for (ContractTempLateParm _iter12 : struct.listCtp)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTempLateParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.listCtp = new ArrayList<ContractTempLateParm>(_list13.size);
            ContractTempLateParm _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new ContractTempLateParm();
              _elem14.read(iprot);
              struct.listCtp.add(_elem14);
            }
          }
          struct.setListCtpIsSet(true);
        }
      }
    }

  }

  public static class addTempLateParm_result implements org.apache.thrift.TBase<addTempLateParm_result, addTempLateParm_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTempLateParm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTempLateParm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTempLateParm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTempLateParm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTempLateParm_result.class, metaDataMap);
    }

    public addTempLateParm_result() {
    }

    public addTempLateParm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTempLateParm_result(addTempLateParm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addTempLateParm_result deepCopy() {
      return new addTempLateParm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addTempLateParm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTempLateParm_result)
        return this.equals((addTempLateParm_result)that);
      return false;
    }

    public boolean equals(addTempLateParm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTempLateParm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTempLateParm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTempLateParm_resultStandardSchemeFactory implements SchemeFactory {
      public addTempLateParm_resultStandardScheme getScheme() {
        return new addTempLateParm_resultStandardScheme();
      }
    }

    private static class addTempLateParm_resultStandardScheme extends StandardScheme<addTempLateParm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTempLateParm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTempLateParm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTempLateParm_resultTupleSchemeFactory implements SchemeFactory {
      public addTempLateParm_resultTupleScheme getScheme() {
        return new addTempLateParm_resultTupleScheme();
      }
    }

    private static class addTempLateParm_resultTupleScheme extends TupleScheme<addTempLateParm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTempLateParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTempLateParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTempLateParm_args implements org.apache.thrift.TBase<updateTempLateParm_args, updateTempLateParm_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTempLateParm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTempLateParm_args");

    private static final org.apache.thrift.protocol.TField LIST_CTP_FIELD_DESC = new org.apache.thrift.protocol.TField("listCtp", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTempLateParm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTempLateParm_argsTupleSchemeFactory());
    }

    public List<ContractTempLateParm> listCtp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_CTP((short)1, "listCtp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_CTP
            return LIST_CTP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_CTP, new org.apache.thrift.meta_data.FieldMetaData("listCtp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTempLateParm.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTempLateParm_args.class, metaDataMap);
    }

    public updateTempLateParm_args() {
    }

    public updateTempLateParm_args(
      List<ContractTempLateParm> listCtp)
    {
      this();
      this.listCtp = listCtp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTempLateParm_args(updateTempLateParm_args other) {
      if (other.isSetListCtp()) {
        List<ContractTempLateParm> __this__listCtp = new ArrayList<ContractTempLateParm>(other.listCtp.size());
        for (ContractTempLateParm other_element : other.listCtp) {
          __this__listCtp.add(new ContractTempLateParm(other_element));
        }
        this.listCtp = __this__listCtp;
      }
    }

    public updateTempLateParm_args deepCopy() {
      return new updateTempLateParm_args(this);
    }

    @Override
    public void clear() {
      this.listCtp = null;
    }

    public int getListCtpSize() {
      return (this.listCtp == null) ? 0 : this.listCtp.size();
    }

    public java.util.Iterator<ContractTempLateParm> getListCtpIterator() {
      return (this.listCtp == null) ? null : this.listCtp.iterator();
    }

    public void addToListCtp(ContractTempLateParm elem) {
      if (this.listCtp == null) {
        this.listCtp = new ArrayList<ContractTempLateParm>();
      }
      this.listCtp.add(elem);
    }

    public List<ContractTempLateParm> getListCtp() {
      return this.listCtp;
    }

    public updateTempLateParm_args setListCtp(List<ContractTempLateParm> listCtp) {
      this.listCtp = listCtp;
      return this;
    }

    public void unsetListCtp() {
      this.listCtp = null;
    }

    /** Returns true if field listCtp is set (has been assigned a value) and false otherwise */
    public boolean isSetListCtp() {
      return this.listCtp != null;
    }

    public void setListCtpIsSet(boolean value) {
      if (!value) {
        this.listCtp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_CTP:
        if (value == null) {
          unsetListCtp();
        } else {
          setListCtp((List<ContractTempLateParm>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_CTP:
        return getListCtp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_CTP:
        return isSetListCtp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTempLateParm_args)
        return this.equals((updateTempLateParm_args)that);
      return false;
    }

    public boolean equals(updateTempLateParm_args that) {
      if (that == null)
        return false;

      boolean this_present_listCtp = true && this.isSetListCtp();
      boolean that_present_listCtp = true && that.isSetListCtp();
      if (this_present_listCtp || that_present_listCtp) {
        if (!(this_present_listCtp && that_present_listCtp))
          return false;
        if (!this.listCtp.equals(that.listCtp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listCtp = true && (isSetListCtp());
      list.add(present_listCtp);
      if (present_listCtp)
        list.add(listCtp);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTempLateParm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListCtp()).compareTo(other.isSetListCtp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListCtp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listCtp, other.listCtp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTempLateParm_args(");
      boolean first = true;

      sb.append("listCtp:");
      if (this.listCtp == null) {
        sb.append("null");
      } else {
        sb.append(this.listCtp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTempLateParm_argsStandardSchemeFactory implements SchemeFactory {
      public updateTempLateParm_argsStandardScheme getScheme() {
        return new updateTempLateParm_argsStandardScheme();
      }
    }

    private static class updateTempLateParm_argsStandardScheme extends StandardScheme<updateTempLateParm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTempLateParm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_CTP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.listCtp = new ArrayList<ContractTempLateParm>(_list16.size);
                  ContractTempLateParm _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new ContractTempLateParm();
                    _elem17.read(iprot);
                    struct.listCtp.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setListCtpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTempLateParm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listCtp != null) {
          oprot.writeFieldBegin(LIST_CTP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listCtp.size()));
            for (ContractTempLateParm _iter19 : struct.listCtp)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTempLateParm_argsTupleSchemeFactory implements SchemeFactory {
      public updateTempLateParm_argsTupleScheme getScheme() {
        return new updateTempLateParm_argsTupleScheme();
      }
    }

    private static class updateTempLateParm_argsTupleScheme extends TupleScheme<updateTempLateParm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTempLateParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListCtp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListCtp()) {
          {
            oprot.writeI32(struct.listCtp.size());
            for (ContractTempLateParm _iter20 : struct.listCtp)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTempLateParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.listCtp = new ArrayList<ContractTempLateParm>(_list21.size);
            ContractTempLateParm _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new ContractTempLateParm();
              _elem22.read(iprot);
              struct.listCtp.add(_elem22);
            }
          }
          struct.setListCtpIsSet(true);
        }
      }
    }

  }

  public static class updateTempLateParm_result implements org.apache.thrift.TBase<updateTempLateParm_result, updateTempLateParm_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTempLateParm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTempLateParm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTempLateParm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTempLateParm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTempLateParm_result.class, metaDataMap);
    }

    public updateTempLateParm_result() {
    }

    public updateTempLateParm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTempLateParm_result(updateTempLateParm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTempLateParm_result deepCopy() {
      return new updateTempLateParm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateTempLateParm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTempLateParm_result)
        return this.equals((updateTempLateParm_result)that);
      return false;
    }

    public boolean equals(updateTempLateParm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTempLateParm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTempLateParm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTempLateParm_resultStandardSchemeFactory implements SchemeFactory {
      public updateTempLateParm_resultStandardScheme getScheme() {
        return new updateTempLateParm_resultStandardScheme();
      }
    }

    private static class updateTempLateParm_resultStandardScheme extends StandardScheme<updateTempLateParm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTempLateParm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTempLateParm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTempLateParm_resultTupleSchemeFactory implements SchemeFactory {
      public updateTempLateParm_resultTupleScheme getScheme() {
        return new updateTempLateParm_resultTupleScheme();
      }
    }

    private static class updateTempLateParm_resultTupleScheme extends TupleScheme<updateTempLateParm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTempLateParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTempLateParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delTempLateParm_args implements org.apache.thrift.TBase<delTempLateParm_args, delTempLateParm_args._Fields>, java.io.Serializable, Cloneable, Comparable<delTempLateParm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delTempLateParm_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ContractTemplateId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delTempLateParm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delTempLateParm_argsTupleSchemeFactory());
    }

    public int ContractTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_TEMPLATE_ID((short)1, "ContractTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_TEMPLATE_ID
            return CONTRACT_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONTRACTTEMPLATEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("ContractTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delTempLateParm_args.class, metaDataMap);
    }

    public delTempLateParm_args() {
    }

    public delTempLateParm_args(
      int ContractTemplateId)
    {
      this();
      this.ContractTemplateId = ContractTemplateId;
      setContractTemplateIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delTempLateParm_args(delTempLateParm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ContractTemplateId = other.ContractTemplateId;
    }

    public delTempLateParm_args deepCopy() {
      return new delTempLateParm_args(this);
    }

    @Override
    public void clear() {
      setContractTemplateIdIsSet(false);
      this.ContractTemplateId = 0;
    }

    public int getContractTemplateId() {
      return this.ContractTemplateId;
    }

    public delTempLateParm_args setContractTemplateId(int ContractTemplateId) {
      this.ContractTemplateId = ContractTemplateId;
      setContractTemplateIdIsSet(true);
      return this;
    }

    public void unsetContractTemplateId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID);
    }

    /** Returns true if field ContractTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetContractTemplateId() {
      return EncodingUtils.testBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID);
    }

    public void setContractTemplateIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_TEMPLATE_ID:
        if (value == null) {
          unsetContractTemplateId();
        } else {
          setContractTemplateId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_TEMPLATE_ID:
        return Integer.valueOf(getContractTemplateId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_TEMPLATE_ID:
        return isSetContractTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delTempLateParm_args)
        return this.equals((delTempLateParm_args)that);
      return false;
    }

    public boolean equals(delTempLateParm_args that) {
      if (that == null)
        return false;

      boolean this_present_ContractTemplateId = true;
      boolean that_present_ContractTemplateId = true;
      if (this_present_ContractTemplateId || that_present_ContractTemplateId) {
        if (!(this_present_ContractTemplateId && that_present_ContractTemplateId))
          return false;
        if (this.ContractTemplateId != that.ContractTemplateId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ContractTemplateId = true;
      list.add(present_ContractTemplateId);
      if (present_ContractTemplateId)
        list.add(ContractTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(delTempLateParm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContractTemplateId()).compareTo(other.isSetContractTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ContractTemplateId, other.ContractTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delTempLateParm_args(");
      boolean first = true;

      sb.append("ContractTemplateId:");
      sb.append(this.ContractTemplateId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delTempLateParm_argsStandardSchemeFactory implements SchemeFactory {
      public delTempLateParm_argsStandardScheme getScheme() {
        return new delTempLateParm_argsStandardScheme();
      }
    }

    private static class delTempLateParm_argsStandardScheme extends StandardScheme<delTempLateParm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delTempLateParm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ContractTemplateId = iprot.readI32();
                struct.setContractTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delTempLateParm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CONTRACT_TEMPLATE_ID_FIELD_DESC);
        oprot.writeI32(struct.ContractTemplateId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delTempLateParm_argsTupleSchemeFactory implements SchemeFactory {
      public delTempLateParm_argsTupleScheme getScheme() {
        return new delTempLateParm_argsTupleScheme();
      }
    }

    private static class delTempLateParm_argsTupleScheme extends TupleScheme<delTempLateParm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delTempLateParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractTemplateId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractTemplateId()) {
          oprot.writeI32(struct.ContractTemplateId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delTempLateParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ContractTemplateId = iprot.readI32();
          struct.setContractTemplateIdIsSet(true);
        }
      }
    }

  }

  public static class delTempLateParm_result implements org.apache.thrift.TBase<delTempLateParm_result, delTempLateParm_result._Fields>, java.io.Serializable, Cloneable, Comparable<delTempLateParm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delTempLateParm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delTempLateParm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delTempLateParm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delTempLateParm_result.class, metaDataMap);
    }

    public delTempLateParm_result() {
    }

    public delTempLateParm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delTempLateParm_result(delTempLateParm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delTempLateParm_result deepCopy() {
      return new delTempLateParm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delTempLateParm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delTempLateParm_result)
        return this.equals((delTempLateParm_result)that);
      return false;
    }

    public boolean equals(delTempLateParm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delTempLateParm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delTempLateParm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delTempLateParm_resultStandardSchemeFactory implements SchemeFactory {
      public delTempLateParm_resultStandardScheme getScheme() {
        return new delTempLateParm_resultStandardScheme();
      }
    }

    private static class delTempLateParm_resultStandardScheme extends StandardScheme<delTempLateParm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delTempLateParm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delTempLateParm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delTempLateParm_resultTupleSchemeFactory implements SchemeFactory {
      public delTempLateParm_resultTupleScheme getScheme() {
        return new delTempLateParm_resultTupleScheme();
      }
    }

    private static class delTempLateParm_resultTupleScheme extends TupleScheme<delTempLateParm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delTempLateParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delTempLateParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delTempLateOneParm_args implements org.apache.thrift.TBase<delTempLateOneParm_args, delTempLateOneParm_args._Fields>, java.io.Serializable, Cloneable, Comparable<delTempLateOneParm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delTempLateOneParm_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delTempLateOneParm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delTempLateOneParm_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delTempLateOneParm_args.class, metaDataMap);
    }

    public delTempLateOneParm_args() {
    }

    public delTempLateOneParm_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delTempLateOneParm_args(delTempLateOneParm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public delTempLateOneParm_args deepCopy() {
      return new delTempLateOneParm_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public delTempLateOneParm_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delTempLateOneParm_args)
        return this.equals((delTempLateOneParm_args)that);
      return false;
    }

    public boolean equals(delTempLateOneParm_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(delTempLateOneParm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delTempLateOneParm_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delTempLateOneParm_argsStandardSchemeFactory implements SchemeFactory {
      public delTempLateOneParm_argsStandardScheme getScheme() {
        return new delTempLateOneParm_argsStandardScheme();
      }
    }

    private static class delTempLateOneParm_argsStandardScheme extends StandardScheme<delTempLateOneParm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delTempLateOneParm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delTempLateOneParm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delTempLateOneParm_argsTupleSchemeFactory implements SchemeFactory {
      public delTempLateOneParm_argsTupleScheme getScheme() {
        return new delTempLateOneParm_argsTupleScheme();
      }
    }

    private static class delTempLateOneParm_argsTupleScheme extends TupleScheme<delTempLateOneParm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delTempLateOneParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delTempLateOneParm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class delTempLateOneParm_result implements org.apache.thrift.TBase<delTempLateOneParm_result, delTempLateOneParm_result._Fields>, java.io.Serializable, Cloneable, Comparable<delTempLateOneParm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delTempLateOneParm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delTempLateOneParm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delTempLateOneParm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delTempLateOneParm_result.class, metaDataMap);
    }

    public delTempLateOneParm_result() {
    }

    public delTempLateOneParm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delTempLateOneParm_result(delTempLateOneParm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delTempLateOneParm_result deepCopy() {
      return new delTempLateOneParm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delTempLateOneParm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delTempLateOneParm_result)
        return this.equals((delTempLateOneParm_result)that);
      return false;
    }

    public boolean equals(delTempLateOneParm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delTempLateOneParm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delTempLateOneParm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delTempLateOneParm_resultStandardSchemeFactory implements SchemeFactory {
      public delTempLateOneParm_resultStandardScheme getScheme() {
        return new delTempLateOneParm_resultStandardScheme();
      }
    }

    private static class delTempLateOneParm_resultStandardScheme extends StandardScheme<delTempLateOneParm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delTempLateOneParm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delTempLateOneParm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delTempLateOneParm_resultTupleSchemeFactory implements SchemeFactory {
      public delTempLateOneParm_resultTupleScheme getScheme() {
        return new delTempLateOneParm_resultTupleScheme();
      }
    }

    private static class delTempLateOneParm_resultTupleScheme extends TupleScheme<delTempLateOneParm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delTempLateOneParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delTempLateOneParm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTempParmList_args implements org.apache.thrift.TBase<getTempParmList_args, getTempParmList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTempParmList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTempParmList_args");

    private static final org.apache.thrift.protocol.TField TEMP_LATE_PARM_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tempLateParmDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTempParmList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTempParmList_argsTupleSchemeFactory());
    }

    public TempLateParmDto tempLateParmDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMP_LATE_PARM_DTO((short)1, "tempLateParmDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMP_LATE_PARM_DTO
            return TEMP_LATE_PARM_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMP_LATE_PARM_DTO, new org.apache.thrift.meta_data.FieldMetaData("tempLateParmDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TempLateParmDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTempParmList_args.class, metaDataMap);
    }

    public getTempParmList_args() {
    }

    public getTempParmList_args(
      TempLateParmDto tempLateParmDto)
    {
      this();
      this.tempLateParmDto = tempLateParmDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTempParmList_args(getTempParmList_args other) {
      if (other.isSetTempLateParmDto()) {
        this.tempLateParmDto = new TempLateParmDto(other.tempLateParmDto);
      }
    }

    public getTempParmList_args deepCopy() {
      return new getTempParmList_args(this);
    }

    @Override
    public void clear() {
      this.tempLateParmDto = null;
    }

    public TempLateParmDto getTempLateParmDto() {
      return this.tempLateParmDto;
    }

    public getTempParmList_args setTempLateParmDto(TempLateParmDto tempLateParmDto) {
      this.tempLateParmDto = tempLateParmDto;
      return this;
    }

    public void unsetTempLateParmDto() {
      this.tempLateParmDto = null;
    }

    /** Returns true if field tempLateParmDto is set (has been assigned a value) and false otherwise */
    public boolean isSetTempLateParmDto() {
      return this.tempLateParmDto != null;
    }

    public void setTempLateParmDtoIsSet(boolean value) {
      if (!value) {
        this.tempLateParmDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMP_LATE_PARM_DTO:
        if (value == null) {
          unsetTempLateParmDto();
        } else {
          setTempLateParmDto((TempLateParmDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMP_LATE_PARM_DTO:
        return getTempLateParmDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMP_LATE_PARM_DTO:
        return isSetTempLateParmDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTempParmList_args)
        return this.equals((getTempParmList_args)that);
      return false;
    }

    public boolean equals(getTempParmList_args that) {
      if (that == null)
        return false;

      boolean this_present_tempLateParmDto = true && this.isSetTempLateParmDto();
      boolean that_present_tempLateParmDto = true && that.isSetTempLateParmDto();
      if (this_present_tempLateParmDto || that_present_tempLateParmDto) {
        if (!(this_present_tempLateParmDto && that_present_tempLateParmDto))
          return false;
        if (!this.tempLateParmDto.equals(that.tempLateParmDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tempLateParmDto = true && (isSetTempLateParmDto());
      list.add(present_tempLateParmDto);
      if (present_tempLateParmDto)
        list.add(tempLateParmDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTempParmList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTempLateParmDto()).compareTo(other.isSetTempLateParmDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTempLateParmDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempLateParmDto, other.tempLateParmDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTempParmList_args(");
      boolean first = true;

      sb.append("tempLateParmDto:");
      if (this.tempLateParmDto == null) {
        sb.append("null");
      } else {
        sb.append(this.tempLateParmDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tempLateParmDto != null) {
        tempLateParmDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTempParmList_argsStandardSchemeFactory implements SchemeFactory {
      public getTempParmList_argsStandardScheme getScheme() {
        return new getTempParmList_argsStandardScheme();
      }
    }

    private static class getTempParmList_argsStandardScheme extends StandardScheme<getTempParmList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTempParmList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMP_LATE_PARM_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tempLateParmDto = new TempLateParmDto();
                struct.tempLateParmDto.read(iprot);
                struct.setTempLateParmDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTempParmList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tempLateParmDto != null) {
          oprot.writeFieldBegin(TEMP_LATE_PARM_DTO_FIELD_DESC);
          struct.tempLateParmDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTempParmList_argsTupleSchemeFactory implements SchemeFactory {
      public getTempParmList_argsTupleScheme getScheme() {
        return new getTempParmList_argsTupleScheme();
      }
    }

    private static class getTempParmList_argsTupleScheme extends TupleScheme<getTempParmList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTempParmList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTempLateParmDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTempLateParmDto()) {
          struct.tempLateParmDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTempParmList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tempLateParmDto = new TempLateParmDto();
          struct.tempLateParmDto.read(iprot);
          struct.setTempLateParmDtoIsSet(true);
        }
      }
    }

  }

  public static class getTempParmList_result implements org.apache.thrift.TBase<getTempParmList_result, getTempParmList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTempParmList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTempParmList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTempParmList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTempParmList_resultTupleSchemeFactory());
    }

    public List<TempLateParmDto> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TempLateParmDto.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTempParmList_result.class, metaDataMap);
    }

    public getTempParmList_result() {
    }

    public getTempParmList_result(
      List<TempLateParmDto> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTempParmList_result(getTempParmList_result other) {
      if (other.isSetSuccess()) {
        List<TempLateParmDto> __this__success = new ArrayList<TempLateParmDto>(other.success.size());
        for (TempLateParmDto other_element : other.success) {
          __this__success.add(new TempLateParmDto(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTempParmList_result deepCopy() {
      return new getTempParmList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TempLateParmDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TempLateParmDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<TempLateParmDto>();
      }
      this.success.add(elem);
    }

    public List<TempLateParmDto> getSuccess() {
      return this.success;
    }

    public getTempParmList_result setSuccess(List<TempLateParmDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TempLateParmDto>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTempParmList_result)
        return this.equals((getTempParmList_result)that);
      return false;
    }

    public boolean equals(getTempParmList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTempParmList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTempParmList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTempParmList_resultStandardSchemeFactory implements SchemeFactory {
      public getTempParmList_resultStandardScheme getScheme() {
        return new getTempParmList_resultStandardScheme();
      }
    }

    private static class getTempParmList_resultStandardScheme extends StandardScheme<getTempParmList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTempParmList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<TempLateParmDto>(_list24.size);
                  TempLateParmDto _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new TempLateParmDto();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTempParmList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TempLateParmDto _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTempParmList_resultTupleSchemeFactory implements SchemeFactory {
      public getTempParmList_resultTupleScheme getScheme() {
        return new getTempParmList_resultTupleScheme();
      }
    }

    private static class getTempParmList_resultTupleScheme extends TupleScheme<getTempParmList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTempParmList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TempLateParmDto _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTempParmList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TempLateParmDto>(_list29.size);
            TempLateParmDto _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new TempLateParmDto();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTempTotaleCount_args implements org.apache.thrift.TBase<getTempTotaleCount_args, getTempTotaleCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTempTotaleCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTempTotaleCount_args");

    private static final org.apache.thrift.protocol.TField TEMP_LATE_PARM_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tempLateParmDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTempTotaleCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTempTotaleCount_argsTupleSchemeFactory());
    }

    public TempLateParmDto tempLateParmDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMP_LATE_PARM_DTO((short)1, "tempLateParmDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMP_LATE_PARM_DTO
            return TEMP_LATE_PARM_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMP_LATE_PARM_DTO, new org.apache.thrift.meta_data.FieldMetaData("tempLateParmDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TempLateParmDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTempTotaleCount_args.class, metaDataMap);
    }

    public getTempTotaleCount_args() {
    }

    public getTempTotaleCount_args(
      TempLateParmDto tempLateParmDto)
    {
      this();
      this.tempLateParmDto = tempLateParmDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTempTotaleCount_args(getTempTotaleCount_args other) {
      if (other.isSetTempLateParmDto()) {
        this.tempLateParmDto = new TempLateParmDto(other.tempLateParmDto);
      }
    }

    public getTempTotaleCount_args deepCopy() {
      return new getTempTotaleCount_args(this);
    }

    @Override
    public void clear() {
      this.tempLateParmDto = null;
    }

    public TempLateParmDto getTempLateParmDto() {
      return this.tempLateParmDto;
    }

    public getTempTotaleCount_args setTempLateParmDto(TempLateParmDto tempLateParmDto) {
      this.tempLateParmDto = tempLateParmDto;
      return this;
    }

    public void unsetTempLateParmDto() {
      this.tempLateParmDto = null;
    }

    /** Returns true if field tempLateParmDto is set (has been assigned a value) and false otherwise */
    public boolean isSetTempLateParmDto() {
      return this.tempLateParmDto != null;
    }

    public void setTempLateParmDtoIsSet(boolean value) {
      if (!value) {
        this.tempLateParmDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMP_LATE_PARM_DTO:
        if (value == null) {
          unsetTempLateParmDto();
        } else {
          setTempLateParmDto((TempLateParmDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMP_LATE_PARM_DTO:
        return getTempLateParmDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMP_LATE_PARM_DTO:
        return isSetTempLateParmDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTempTotaleCount_args)
        return this.equals((getTempTotaleCount_args)that);
      return false;
    }

    public boolean equals(getTempTotaleCount_args that) {
      if (that == null)
        return false;

      boolean this_present_tempLateParmDto = true && this.isSetTempLateParmDto();
      boolean that_present_tempLateParmDto = true && that.isSetTempLateParmDto();
      if (this_present_tempLateParmDto || that_present_tempLateParmDto) {
        if (!(this_present_tempLateParmDto && that_present_tempLateParmDto))
          return false;
        if (!this.tempLateParmDto.equals(that.tempLateParmDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tempLateParmDto = true && (isSetTempLateParmDto());
      list.add(present_tempLateParmDto);
      if (present_tempLateParmDto)
        list.add(tempLateParmDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTempTotaleCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTempLateParmDto()).compareTo(other.isSetTempLateParmDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTempLateParmDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempLateParmDto, other.tempLateParmDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTempTotaleCount_args(");
      boolean first = true;

      sb.append("tempLateParmDto:");
      if (this.tempLateParmDto == null) {
        sb.append("null");
      } else {
        sb.append(this.tempLateParmDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tempLateParmDto != null) {
        tempLateParmDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTempTotaleCount_argsStandardSchemeFactory implements SchemeFactory {
      public getTempTotaleCount_argsStandardScheme getScheme() {
        return new getTempTotaleCount_argsStandardScheme();
      }
    }

    private static class getTempTotaleCount_argsStandardScheme extends StandardScheme<getTempTotaleCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTempTotaleCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMP_LATE_PARM_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tempLateParmDto = new TempLateParmDto();
                struct.tempLateParmDto.read(iprot);
                struct.setTempLateParmDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTempTotaleCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tempLateParmDto != null) {
          oprot.writeFieldBegin(TEMP_LATE_PARM_DTO_FIELD_DESC);
          struct.tempLateParmDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTempTotaleCount_argsTupleSchemeFactory implements SchemeFactory {
      public getTempTotaleCount_argsTupleScheme getScheme() {
        return new getTempTotaleCount_argsTupleScheme();
      }
    }

    private static class getTempTotaleCount_argsTupleScheme extends TupleScheme<getTempTotaleCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTempTotaleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTempLateParmDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTempLateParmDto()) {
          struct.tempLateParmDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTempTotaleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tempLateParmDto = new TempLateParmDto();
          struct.tempLateParmDto.read(iprot);
          struct.setTempLateParmDtoIsSet(true);
        }
      }
    }

  }

  public static class getTempTotaleCount_result implements org.apache.thrift.TBase<getTempTotaleCount_result, getTempTotaleCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTempTotaleCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTempTotaleCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTempTotaleCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTempTotaleCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTempTotaleCount_result.class, metaDataMap);
    }

    public getTempTotaleCount_result() {
    }

    public getTempTotaleCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTempTotaleCount_result(getTempTotaleCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTempTotaleCount_result deepCopy() {
      return new getTempTotaleCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getTempTotaleCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTempTotaleCount_result)
        return this.equals((getTempTotaleCount_result)that);
      return false;
    }

    public boolean equals(getTempTotaleCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTempTotaleCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTempTotaleCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTempTotaleCount_resultStandardSchemeFactory implements SchemeFactory {
      public getTempTotaleCount_resultStandardScheme getScheme() {
        return new getTempTotaleCount_resultStandardScheme();
      }
    }

    private static class getTempTotaleCount_resultStandardScheme extends StandardScheme<getTempTotaleCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTempTotaleCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTempTotaleCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTempTotaleCount_resultTupleSchemeFactory implements SchemeFactory {
      public getTempTotaleCount_resultTupleScheme getScheme() {
        return new getTempTotaleCount_resultTupleScheme();
      }
    }

    private static class getTempTotaleCount_resultTupleScheme extends TupleScheme<getTempTotaleCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTempTotaleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTempTotaleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTempLateParmDto_args implements org.apache.thrift.TBase<updateTempLateParmDto_args, updateTempLateParmDto_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTempLateParmDto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTempLateParmDto_args");

    private static final org.apache.thrift.protocol.TField LIST_CTP_FIELD_DESC = new org.apache.thrift.protocol.TField("listCtp", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTempLateParmDto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTempLateParmDto_argsTupleSchemeFactory());
    }

    public List<TempLateParmDto> listCtp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_CTP((short)1, "listCtp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_CTP
            return LIST_CTP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_CTP, new org.apache.thrift.meta_data.FieldMetaData("listCtp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TempLateParmDto.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTempLateParmDto_args.class, metaDataMap);
    }

    public updateTempLateParmDto_args() {
    }

    public updateTempLateParmDto_args(
      List<TempLateParmDto> listCtp)
    {
      this();
      this.listCtp = listCtp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTempLateParmDto_args(updateTempLateParmDto_args other) {
      if (other.isSetListCtp()) {
        List<TempLateParmDto> __this__listCtp = new ArrayList<TempLateParmDto>(other.listCtp.size());
        for (TempLateParmDto other_element : other.listCtp) {
          __this__listCtp.add(new TempLateParmDto(other_element));
        }
        this.listCtp = __this__listCtp;
      }
    }

    public updateTempLateParmDto_args deepCopy() {
      return new updateTempLateParmDto_args(this);
    }

    @Override
    public void clear() {
      this.listCtp = null;
    }

    public int getListCtpSize() {
      return (this.listCtp == null) ? 0 : this.listCtp.size();
    }

    public java.util.Iterator<TempLateParmDto> getListCtpIterator() {
      return (this.listCtp == null) ? null : this.listCtp.iterator();
    }

    public void addToListCtp(TempLateParmDto elem) {
      if (this.listCtp == null) {
        this.listCtp = new ArrayList<TempLateParmDto>();
      }
      this.listCtp.add(elem);
    }

    public List<TempLateParmDto> getListCtp() {
      return this.listCtp;
    }

    public updateTempLateParmDto_args setListCtp(List<TempLateParmDto> listCtp) {
      this.listCtp = listCtp;
      return this;
    }

    public void unsetListCtp() {
      this.listCtp = null;
    }

    /** Returns true if field listCtp is set (has been assigned a value) and false otherwise */
    public boolean isSetListCtp() {
      return this.listCtp != null;
    }

    public void setListCtpIsSet(boolean value) {
      if (!value) {
        this.listCtp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_CTP:
        if (value == null) {
          unsetListCtp();
        } else {
          setListCtp((List<TempLateParmDto>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_CTP:
        return getListCtp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_CTP:
        return isSetListCtp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTempLateParmDto_args)
        return this.equals((updateTempLateParmDto_args)that);
      return false;
    }

    public boolean equals(updateTempLateParmDto_args that) {
      if (that == null)
        return false;

      boolean this_present_listCtp = true && this.isSetListCtp();
      boolean that_present_listCtp = true && that.isSetListCtp();
      if (this_present_listCtp || that_present_listCtp) {
        if (!(this_present_listCtp && that_present_listCtp))
          return false;
        if (!this.listCtp.equals(that.listCtp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listCtp = true && (isSetListCtp());
      list.add(present_listCtp);
      if (present_listCtp)
        list.add(listCtp);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTempLateParmDto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListCtp()).compareTo(other.isSetListCtp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListCtp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listCtp, other.listCtp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTempLateParmDto_args(");
      boolean first = true;

      sb.append("listCtp:");
      if (this.listCtp == null) {
        sb.append("null");
      } else {
        sb.append(this.listCtp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTempLateParmDto_argsStandardSchemeFactory implements SchemeFactory {
      public updateTempLateParmDto_argsStandardScheme getScheme() {
        return new updateTempLateParmDto_argsStandardScheme();
      }
    }

    private static class updateTempLateParmDto_argsStandardScheme extends StandardScheme<updateTempLateParmDto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTempLateParmDto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_CTP
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.listCtp = new ArrayList<TempLateParmDto>(_list32.size);
                  TempLateParmDto _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new TempLateParmDto();
                    _elem33.read(iprot);
                    struct.listCtp.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setListCtpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTempLateParmDto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listCtp != null) {
          oprot.writeFieldBegin(LIST_CTP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listCtp.size()));
            for (TempLateParmDto _iter35 : struct.listCtp)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTempLateParmDto_argsTupleSchemeFactory implements SchemeFactory {
      public updateTempLateParmDto_argsTupleScheme getScheme() {
        return new updateTempLateParmDto_argsTupleScheme();
      }
    }

    private static class updateTempLateParmDto_argsTupleScheme extends TupleScheme<updateTempLateParmDto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTempLateParmDto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListCtp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListCtp()) {
          {
            oprot.writeI32(struct.listCtp.size());
            for (TempLateParmDto _iter36 : struct.listCtp)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTempLateParmDto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.listCtp = new ArrayList<TempLateParmDto>(_list37.size);
            TempLateParmDto _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new TempLateParmDto();
              _elem38.read(iprot);
              struct.listCtp.add(_elem38);
            }
          }
          struct.setListCtpIsSet(true);
        }
      }
    }

  }

  public static class updateTempLateParmDto_result implements org.apache.thrift.TBase<updateTempLateParmDto_result, updateTempLateParmDto_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTempLateParmDto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTempLateParmDto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTempLateParmDto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTempLateParmDto_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTempLateParmDto_result.class, metaDataMap);
    }

    public updateTempLateParmDto_result() {
    }

    public updateTempLateParmDto_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTempLateParmDto_result(updateTempLateParmDto_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTempLateParmDto_result deepCopy() {
      return new updateTempLateParmDto_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateTempLateParmDto_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTempLateParmDto_result)
        return this.equals((updateTempLateParmDto_result)that);
      return false;
    }

    public boolean equals(updateTempLateParmDto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTempLateParmDto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTempLateParmDto_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTempLateParmDto_resultStandardSchemeFactory implements SchemeFactory {
      public updateTempLateParmDto_resultStandardScheme getScheme() {
        return new updateTempLateParmDto_resultStandardScheme();
      }
    }

    private static class updateTempLateParmDto_resultStandardScheme extends StandardScheme<updateTempLateParmDto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTempLateParmDto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTempLateParmDto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTempLateParmDto_resultTupleSchemeFactory implements SchemeFactory {
      public updateTempLateParmDto_resultTupleScheme getScheme() {
        return new updateTempLateParmDto_resultTupleScheme();
      }
    }

    private static class updateTempLateParmDto_resultTupleScheme extends TupleScheme<updateTempLateParmDto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTempLateParmDto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTempLateParmDto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

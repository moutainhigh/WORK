/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ProjectForeclosure implements org.apache.thrift.TBase<ProjectForeclosure, ProjectForeclosure._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectForeclosure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectForeclosure");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanBank", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanPerson", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanPhone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanBank", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanPerson", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanPhone", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FUNDS_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fundsMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SUPERVISE_DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("superviseDepartment", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NOTARIZATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizationDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SIGN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("signDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ACCUMULATION_FUND_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("accumulationFundBank", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ACCUMULATION_FUND_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accumulationFundMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDays", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField PAYMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PAYMENT_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAccount", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDays", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField OVERDUE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueRate", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFee", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField EXTENSION_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDays", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField EXTENSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionRate", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField PAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDate", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField RECE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receDate", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField OLD_OWED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("oldOwedAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanTime", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField SUPERVISE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("superviseAccount", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField THIRD_BORROWER_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdBorrower", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField THIRD_BORROWER_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdBorrowerCard", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField THIRD_BORROWER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdBorrowerPhone", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField THIRD_BORROWER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdBorrowerAddress", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField FORE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreAccount", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField NEW_RECE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("newReceAccount", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField NEW_RECE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newReceName", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField NEW_RECE_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("newReceBank", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField SUPERSION_RECE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("supersionReceAccount", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField SUPERSION_RECE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("supersionReceName", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField SUPERSION_RECE_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("supersionReceBank", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanBankBranch", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanBankBranch", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField SUPERVISE_DEPARTMENT_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("superviseDepartmentBranch", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField OLD_BANK_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("oldBankStr", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField OLD_BANK_BRANCH_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("oldBankBranchStr", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField NEW_BANK_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("newBankStr", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField NEW_BANK_BRANCH_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("newBankBranchStr", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField SUPERVISE_DEPARTMENT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("superviseDepartmentStr", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField SUPERVISE_DEPARTMENT_BRANCH_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("superviseDepartmentBranchStr", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField ACCUMULATION_FUND_BANK_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("accumulationFundBankStr", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField NEW_RECE_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("newRecePerson", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField ID_CARD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("idCardNumber", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField DOWN_PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("downPayment", org.apache.thrift.protocol.TType.DOUBLE, (short)56);
  private static final org.apache.thrift.protocol.TField TURNOVER_CAPITAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverCapitalName", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField TURNOVER_CAPITAL_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverCapitalAccount", org.apache.thrift.protocol.TType.STRING, (short)58);
  private static final org.apache.thrift.protocol.TField TURNOVER_CAPITAL_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("turnoverCapitalBank", org.apache.thrift.protocol.TType.STRING, (short)59);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectForeclosureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectForeclosureTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String oldLoanBank; // required
  public String oldLoanPerson; // required
  public double oldLoanMoney; // required
  public String oldLoanPhone; // required
  public String newLoanBank; // required
  public String newLoanPerson; // required
  public double newLoanMoney; // required
  public String newLoanPhone; // required
  public double fundsMoney; // required
  public String superviseDepartment; // required
  public String notarizationDate; // required
  public String signDate; // required
  public int paymentType; // required
  public String remark; // required
  public String accumulationFundBank; // required
  public double accumulationFundMoney; // required
  public int loanDays; // required
  public String paymentName; // required
  public String paymentAccount; // required
  public int overdueDays; // required
  public double overdueRate; // required
  public double overdueFee; // required
  public int extensionDays; // required
  public double extensionRate; // required
  public double extensionFee; // required
  public String paymentDate; // required
  public String receDate; // required
  public double oldOwedAmount; // required
  public String oldLoanTime; // required
  public String superviseAccount; // required
  public String thirdBorrower; // required
  public String thirdBorrowerCard; // required
  public String thirdBorrowerPhone; // required
  public String thirdBorrowerAddress; // required
  public String foreAccount; // required
  public String newReceAccount; // required
  public String newReceName; // required
  public String newReceBank; // required
  public String supersionReceAccount; // required
  public String supersionReceName; // required
  public String supersionReceBank; // required
  public String oldLoanBankBranch; // required
  public String newLoanBankBranch; // required
  public String superviseDepartmentBranch; // required
  public String oldBankStr; // required
  public String oldBankBranchStr; // required
  public String newBankStr; // required
  public String newBankBranchStr; // required
  public String superviseDepartmentStr; // required
  public String superviseDepartmentBranchStr; // required
  public String accumulationFundBankStr; // required
  public String newRecePerson; // required
  public String idCardNumber; // required
  public double downPayment; // required
  public String turnoverCapitalName; // required
  public String turnoverCapitalAccount; // required
  public String turnoverCapitalBank; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    OLD_LOAN_BANK((short)3, "oldLoanBank"),
    OLD_LOAN_PERSON((short)4, "oldLoanPerson"),
    OLD_LOAN_MONEY((short)5, "oldLoanMoney"),
    OLD_LOAN_PHONE((short)6, "oldLoanPhone"),
    NEW_LOAN_BANK((short)7, "newLoanBank"),
    NEW_LOAN_PERSON((short)8, "newLoanPerson"),
    NEW_LOAN_MONEY((short)9, "newLoanMoney"),
    NEW_LOAN_PHONE((short)10, "newLoanPhone"),
    FUNDS_MONEY((short)11, "fundsMoney"),
    SUPERVISE_DEPARTMENT((short)12, "superviseDepartment"),
    NOTARIZATION_DATE((short)13, "notarizationDate"),
    SIGN_DATE((short)14, "signDate"),
    PAYMENT_TYPE((short)15, "paymentType"),
    REMARK((short)16, "remark"),
    ACCUMULATION_FUND_BANK((short)17, "accumulationFundBank"),
    ACCUMULATION_FUND_MONEY((short)18, "accumulationFundMoney"),
    LOAN_DAYS((short)19, "loanDays"),
    PAYMENT_NAME((short)20, "paymentName"),
    PAYMENT_ACCOUNT((short)21, "paymentAccount"),
    OVERDUE_DAYS((short)22, "overdueDays"),
    OVERDUE_RATE((short)23, "overdueRate"),
    OVERDUE_FEE((short)24, "overdueFee"),
    EXTENSION_DAYS((short)25, "extensionDays"),
    EXTENSION_RATE((short)26, "extensionRate"),
    EXTENSION_FEE((short)27, "extensionFee"),
    PAYMENT_DATE((short)28, "paymentDate"),
    RECE_DATE((short)29, "receDate"),
    OLD_OWED_AMOUNT((short)30, "oldOwedAmount"),
    OLD_LOAN_TIME((short)31, "oldLoanTime"),
    SUPERVISE_ACCOUNT((short)32, "superviseAccount"),
    THIRD_BORROWER((short)33, "thirdBorrower"),
    THIRD_BORROWER_CARD((short)34, "thirdBorrowerCard"),
    THIRD_BORROWER_PHONE((short)35, "thirdBorrowerPhone"),
    THIRD_BORROWER_ADDRESS((short)36, "thirdBorrowerAddress"),
    FORE_ACCOUNT((short)37, "foreAccount"),
    NEW_RECE_ACCOUNT((short)38, "newReceAccount"),
    NEW_RECE_NAME((short)39, "newReceName"),
    NEW_RECE_BANK((short)40, "newReceBank"),
    SUPERSION_RECE_ACCOUNT((short)41, "supersionReceAccount"),
    SUPERSION_RECE_NAME((short)42, "supersionReceName"),
    SUPERSION_RECE_BANK((short)43, "supersionReceBank"),
    OLD_LOAN_BANK_BRANCH((short)44, "oldLoanBankBranch"),
    NEW_LOAN_BANK_BRANCH((short)45, "newLoanBankBranch"),
    SUPERVISE_DEPARTMENT_BRANCH((short)46, "superviseDepartmentBranch"),
    OLD_BANK_STR((short)47, "oldBankStr"),
    OLD_BANK_BRANCH_STR((short)48, "oldBankBranchStr"),
    NEW_BANK_STR((short)49, "newBankStr"),
    NEW_BANK_BRANCH_STR((short)50, "newBankBranchStr"),
    SUPERVISE_DEPARTMENT_STR((short)51, "superviseDepartmentStr"),
    SUPERVISE_DEPARTMENT_BRANCH_STR((short)52, "superviseDepartmentBranchStr"),
    ACCUMULATION_FUND_BANK_STR((short)53, "accumulationFundBankStr"),
    NEW_RECE_PERSON((short)54, "newRecePerson"),
    ID_CARD_NUMBER((short)55, "idCardNumber"),
    DOWN_PAYMENT((short)56, "downPayment"),
    TURNOVER_CAPITAL_NAME((short)57, "turnoverCapitalName"),
    TURNOVER_CAPITAL_ACCOUNT((short)58, "turnoverCapitalAccount"),
    TURNOVER_CAPITAL_BANK((short)59, "turnoverCapitalBank");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // OLD_LOAN_BANK
          return OLD_LOAN_BANK;
        case 4: // OLD_LOAN_PERSON
          return OLD_LOAN_PERSON;
        case 5: // OLD_LOAN_MONEY
          return OLD_LOAN_MONEY;
        case 6: // OLD_LOAN_PHONE
          return OLD_LOAN_PHONE;
        case 7: // NEW_LOAN_BANK
          return NEW_LOAN_BANK;
        case 8: // NEW_LOAN_PERSON
          return NEW_LOAN_PERSON;
        case 9: // NEW_LOAN_MONEY
          return NEW_LOAN_MONEY;
        case 10: // NEW_LOAN_PHONE
          return NEW_LOAN_PHONE;
        case 11: // FUNDS_MONEY
          return FUNDS_MONEY;
        case 12: // SUPERVISE_DEPARTMENT
          return SUPERVISE_DEPARTMENT;
        case 13: // NOTARIZATION_DATE
          return NOTARIZATION_DATE;
        case 14: // SIGN_DATE
          return SIGN_DATE;
        case 15: // PAYMENT_TYPE
          return PAYMENT_TYPE;
        case 16: // REMARK
          return REMARK;
        case 17: // ACCUMULATION_FUND_BANK
          return ACCUMULATION_FUND_BANK;
        case 18: // ACCUMULATION_FUND_MONEY
          return ACCUMULATION_FUND_MONEY;
        case 19: // LOAN_DAYS
          return LOAN_DAYS;
        case 20: // PAYMENT_NAME
          return PAYMENT_NAME;
        case 21: // PAYMENT_ACCOUNT
          return PAYMENT_ACCOUNT;
        case 22: // OVERDUE_DAYS
          return OVERDUE_DAYS;
        case 23: // OVERDUE_RATE
          return OVERDUE_RATE;
        case 24: // OVERDUE_FEE
          return OVERDUE_FEE;
        case 25: // EXTENSION_DAYS
          return EXTENSION_DAYS;
        case 26: // EXTENSION_RATE
          return EXTENSION_RATE;
        case 27: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 28: // PAYMENT_DATE
          return PAYMENT_DATE;
        case 29: // RECE_DATE
          return RECE_DATE;
        case 30: // OLD_OWED_AMOUNT
          return OLD_OWED_AMOUNT;
        case 31: // OLD_LOAN_TIME
          return OLD_LOAN_TIME;
        case 32: // SUPERVISE_ACCOUNT
          return SUPERVISE_ACCOUNT;
        case 33: // THIRD_BORROWER
          return THIRD_BORROWER;
        case 34: // THIRD_BORROWER_CARD
          return THIRD_BORROWER_CARD;
        case 35: // THIRD_BORROWER_PHONE
          return THIRD_BORROWER_PHONE;
        case 36: // THIRD_BORROWER_ADDRESS
          return THIRD_BORROWER_ADDRESS;
        case 37: // FORE_ACCOUNT
          return FORE_ACCOUNT;
        case 38: // NEW_RECE_ACCOUNT
          return NEW_RECE_ACCOUNT;
        case 39: // NEW_RECE_NAME
          return NEW_RECE_NAME;
        case 40: // NEW_RECE_BANK
          return NEW_RECE_BANK;
        case 41: // SUPERSION_RECE_ACCOUNT
          return SUPERSION_RECE_ACCOUNT;
        case 42: // SUPERSION_RECE_NAME
          return SUPERSION_RECE_NAME;
        case 43: // SUPERSION_RECE_BANK
          return SUPERSION_RECE_BANK;
        case 44: // OLD_LOAN_BANK_BRANCH
          return OLD_LOAN_BANK_BRANCH;
        case 45: // NEW_LOAN_BANK_BRANCH
          return NEW_LOAN_BANK_BRANCH;
        case 46: // SUPERVISE_DEPARTMENT_BRANCH
          return SUPERVISE_DEPARTMENT_BRANCH;
        case 47: // OLD_BANK_STR
          return OLD_BANK_STR;
        case 48: // OLD_BANK_BRANCH_STR
          return OLD_BANK_BRANCH_STR;
        case 49: // NEW_BANK_STR
          return NEW_BANK_STR;
        case 50: // NEW_BANK_BRANCH_STR
          return NEW_BANK_BRANCH_STR;
        case 51: // SUPERVISE_DEPARTMENT_STR
          return SUPERVISE_DEPARTMENT_STR;
        case 52: // SUPERVISE_DEPARTMENT_BRANCH_STR
          return SUPERVISE_DEPARTMENT_BRANCH_STR;
        case 53: // ACCUMULATION_FUND_BANK_STR
          return ACCUMULATION_FUND_BANK_STR;
        case 54: // NEW_RECE_PERSON
          return NEW_RECE_PERSON;
        case 55: // ID_CARD_NUMBER
          return ID_CARD_NUMBER;
        case 56: // DOWN_PAYMENT
          return DOWN_PAYMENT;
        case 57: // TURNOVER_CAPITAL_NAME
          return TURNOVER_CAPITAL_NAME;
        case 58: // TURNOVER_CAPITAL_ACCOUNT
          return TURNOVER_CAPITAL_ACCOUNT;
        case 59: // TURNOVER_CAPITAL_BANK
          return TURNOVER_CAPITAL_BANK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __OLDLOANMONEY_ISSET_ID = 2;
  private static final int __NEWLOANMONEY_ISSET_ID = 3;
  private static final int __FUNDSMONEY_ISSET_ID = 4;
  private static final int __PAYMENTTYPE_ISSET_ID = 5;
  private static final int __ACCUMULATIONFUNDMONEY_ISSET_ID = 6;
  private static final int __LOANDAYS_ISSET_ID = 7;
  private static final int __OVERDUEDAYS_ISSET_ID = 8;
  private static final int __OVERDUERATE_ISSET_ID = 9;
  private static final int __OVERDUEFEE_ISSET_ID = 10;
  private static final int __EXTENSIONDAYS_ISSET_ID = 11;
  private static final int __EXTENSIONRATE_ISSET_ID = 12;
  private static final int __EXTENSIONFEE_ISSET_ID = 13;
  private static final int __OLDOWEDAMOUNT_ISSET_ID = 14;
  private static final int __DOWNPAYMENT_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("oldLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_LOAN_PERSON, new org.apache.thrift.meta_data.FieldMetaData("oldLoanPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oldLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_LOAN_PHONE, new org.apache.thrift.meta_data.FieldMetaData("oldLoanPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("newLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_PERSON, new org.apache.thrift.meta_data.FieldMetaData("newLoanPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("newLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEW_LOAN_PHONE, new org.apache.thrift.meta_data.FieldMetaData("newLoanPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNDS_MONEY, new org.apache.thrift.meta_data.FieldMetaData("fundsMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUPERVISE_DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("superviseDepartment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTARIZATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("notarizationDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN_DATE, new org.apache.thrift.meta_data.FieldMetaData("signDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCUMULATION_FUND_BANK, new org.apache.thrift.meta_data.FieldMetaData("accumulationFundBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCUMULATION_FUND_MONEY, new org.apache.thrift.meta_data.FieldMetaData("accumulationFundMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("loanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("paymentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("paymentAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("overdueDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_RATE, new org.apache.thrift.meta_data.FieldMetaData("overdueRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FEE, new org.apache.thrift.meta_data.FieldMetaData("overdueFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_DAYS, new org.apache.thrift.meta_data.FieldMetaData("extensionDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("extensionRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("paymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECE_DATE, new org.apache.thrift.meta_data.FieldMetaData("receDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_OWED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("oldOwedAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_LOAN_TIME, new org.apache.thrift.meta_data.FieldMetaData("oldLoanTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERVISE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("superviseAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_BORROWER, new org.apache.thrift.meta_data.FieldMetaData("thirdBorrower", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_BORROWER_CARD, new org.apache.thrift.meta_data.FieldMetaData("thirdBorrowerCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_BORROWER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("thirdBorrowerPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_BORROWER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("thirdBorrowerAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("foreAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_RECE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("newReceAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_RECE_NAME, new org.apache.thrift.meta_data.FieldMetaData("newReceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_RECE_BANK, new org.apache.thrift.meta_data.FieldMetaData("newReceBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERSION_RECE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("supersionReceAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERSION_RECE_NAME, new org.apache.thrift.meta_data.FieldMetaData("supersionReceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERSION_RECE_BANK, new org.apache.thrift.meta_data.FieldMetaData("supersionReceBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_LOAN_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("oldLoanBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("newLoanBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERVISE_DEPARTMENT_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("superviseDepartmentBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_BANK_STR, new org.apache.thrift.meta_data.FieldMetaData("oldBankStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_BANK_BRANCH_STR, new org.apache.thrift.meta_data.FieldMetaData("oldBankBranchStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_BANK_STR, new org.apache.thrift.meta_data.FieldMetaData("newBankStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_BANK_BRANCH_STR, new org.apache.thrift.meta_data.FieldMetaData("newBankBranchStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERVISE_DEPARTMENT_STR, new org.apache.thrift.meta_data.FieldMetaData("superviseDepartmentStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERVISE_DEPARTMENT_BRANCH_STR, new org.apache.thrift.meta_data.FieldMetaData("superviseDepartmentBranchStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCUMULATION_FUND_BANK_STR, new org.apache.thrift.meta_data.FieldMetaData("accumulationFundBankStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_RECE_PERSON, new org.apache.thrift.meta_data.FieldMetaData("newRecePerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("idCardNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWN_PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("downPayment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TURNOVER_CAPITAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("turnoverCapitalName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TURNOVER_CAPITAL_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("turnoverCapitalAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TURNOVER_CAPITAL_BANK, new org.apache.thrift.meta_data.FieldMetaData("turnoverCapitalBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectForeclosure.class, metaDataMap);
  }

  public ProjectForeclosure() {
  }

  public ProjectForeclosure(
    int pid,
    int projectId,
    String oldLoanBank,
    String oldLoanPerson,
    double oldLoanMoney,
    String oldLoanPhone,
    String newLoanBank,
    String newLoanPerson,
    double newLoanMoney,
    String newLoanPhone,
    double fundsMoney,
    String superviseDepartment,
    String notarizationDate,
    String signDate,
    int paymentType,
    String remark,
    String accumulationFundBank,
    double accumulationFundMoney,
    int loanDays,
    String paymentName,
    String paymentAccount,
    int overdueDays,
    double overdueRate,
    double overdueFee,
    int extensionDays,
    double extensionRate,
    double extensionFee,
    String paymentDate,
    String receDate,
    double oldOwedAmount,
    String oldLoanTime,
    String superviseAccount,
    String thirdBorrower,
    String thirdBorrowerCard,
    String thirdBorrowerPhone,
    String thirdBorrowerAddress,
    String foreAccount,
    String newReceAccount,
    String newReceName,
    String newReceBank,
    String supersionReceAccount,
    String supersionReceName,
    String supersionReceBank,
    String oldLoanBankBranch,
    String newLoanBankBranch,
    String superviseDepartmentBranch,
    String oldBankStr,
    String oldBankBranchStr,
    String newBankStr,
    String newBankBranchStr,
    String superviseDepartmentStr,
    String superviseDepartmentBranchStr,
    String accumulationFundBankStr,
    String newRecePerson,
    String idCardNumber,
    double downPayment,
    String turnoverCapitalName,
    String turnoverCapitalAccount,
    String turnoverCapitalBank)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.oldLoanBank = oldLoanBank;
    this.oldLoanPerson = oldLoanPerson;
    this.oldLoanMoney = oldLoanMoney;
    setOldLoanMoneyIsSet(true);
    this.oldLoanPhone = oldLoanPhone;
    this.newLoanBank = newLoanBank;
    this.newLoanPerson = newLoanPerson;
    this.newLoanMoney = newLoanMoney;
    setNewLoanMoneyIsSet(true);
    this.newLoanPhone = newLoanPhone;
    this.fundsMoney = fundsMoney;
    setFundsMoneyIsSet(true);
    this.superviseDepartment = superviseDepartment;
    this.notarizationDate = notarizationDate;
    this.signDate = signDate;
    this.paymentType = paymentType;
    setPaymentTypeIsSet(true);
    this.remark = remark;
    this.accumulationFundBank = accumulationFundBank;
    this.accumulationFundMoney = accumulationFundMoney;
    setAccumulationFundMoneyIsSet(true);
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    this.paymentName = paymentName;
    this.paymentAccount = paymentAccount;
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    this.extensionRate = extensionRate;
    setExtensionRateIsSet(true);
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.paymentDate = paymentDate;
    this.receDate = receDate;
    this.oldOwedAmount = oldOwedAmount;
    setOldOwedAmountIsSet(true);
    this.oldLoanTime = oldLoanTime;
    this.superviseAccount = superviseAccount;
    this.thirdBorrower = thirdBorrower;
    this.thirdBorrowerCard = thirdBorrowerCard;
    this.thirdBorrowerPhone = thirdBorrowerPhone;
    this.thirdBorrowerAddress = thirdBorrowerAddress;
    this.foreAccount = foreAccount;
    this.newReceAccount = newReceAccount;
    this.newReceName = newReceName;
    this.newReceBank = newReceBank;
    this.supersionReceAccount = supersionReceAccount;
    this.supersionReceName = supersionReceName;
    this.supersionReceBank = supersionReceBank;
    this.oldLoanBankBranch = oldLoanBankBranch;
    this.newLoanBankBranch = newLoanBankBranch;
    this.superviseDepartmentBranch = superviseDepartmentBranch;
    this.oldBankStr = oldBankStr;
    this.oldBankBranchStr = oldBankBranchStr;
    this.newBankStr = newBankStr;
    this.newBankBranchStr = newBankBranchStr;
    this.superviseDepartmentStr = superviseDepartmentStr;
    this.superviseDepartmentBranchStr = superviseDepartmentBranchStr;
    this.accumulationFundBankStr = accumulationFundBankStr;
    this.newRecePerson = newRecePerson;
    this.idCardNumber = idCardNumber;
    this.downPayment = downPayment;
    setDownPaymentIsSet(true);
    this.turnoverCapitalName = turnoverCapitalName;
    this.turnoverCapitalAccount = turnoverCapitalAccount;
    this.turnoverCapitalBank = turnoverCapitalBank;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectForeclosure(ProjectForeclosure other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetOldLoanBank()) {
      this.oldLoanBank = other.oldLoanBank;
    }
    if (other.isSetOldLoanPerson()) {
      this.oldLoanPerson = other.oldLoanPerson;
    }
    this.oldLoanMoney = other.oldLoanMoney;
    if (other.isSetOldLoanPhone()) {
      this.oldLoanPhone = other.oldLoanPhone;
    }
    if (other.isSetNewLoanBank()) {
      this.newLoanBank = other.newLoanBank;
    }
    if (other.isSetNewLoanPerson()) {
      this.newLoanPerson = other.newLoanPerson;
    }
    this.newLoanMoney = other.newLoanMoney;
    if (other.isSetNewLoanPhone()) {
      this.newLoanPhone = other.newLoanPhone;
    }
    this.fundsMoney = other.fundsMoney;
    if (other.isSetSuperviseDepartment()) {
      this.superviseDepartment = other.superviseDepartment;
    }
    if (other.isSetNotarizationDate()) {
      this.notarizationDate = other.notarizationDate;
    }
    if (other.isSetSignDate()) {
      this.signDate = other.signDate;
    }
    this.paymentType = other.paymentType;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetAccumulationFundBank()) {
      this.accumulationFundBank = other.accumulationFundBank;
    }
    this.accumulationFundMoney = other.accumulationFundMoney;
    this.loanDays = other.loanDays;
    if (other.isSetPaymentName()) {
      this.paymentName = other.paymentName;
    }
    if (other.isSetPaymentAccount()) {
      this.paymentAccount = other.paymentAccount;
    }
    this.overdueDays = other.overdueDays;
    this.overdueRate = other.overdueRate;
    this.overdueFee = other.overdueFee;
    this.extensionDays = other.extensionDays;
    this.extensionRate = other.extensionRate;
    this.extensionFee = other.extensionFee;
    if (other.isSetPaymentDate()) {
      this.paymentDate = other.paymentDate;
    }
    if (other.isSetReceDate()) {
      this.receDate = other.receDate;
    }
    this.oldOwedAmount = other.oldOwedAmount;
    if (other.isSetOldLoanTime()) {
      this.oldLoanTime = other.oldLoanTime;
    }
    if (other.isSetSuperviseAccount()) {
      this.superviseAccount = other.superviseAccount;
    }
    if (other.isSetThirdBorrower()) {
      this.thirdBorrower = other.thirdBorrower;
    }
    if (other.isSetThirdBorrowerCard()) {
      this.thirdBorrowerCard = other.thirdBorrowerCard;
    }
    if (other.isSetThirdBorrowerPhone()) {
      this.thirdBorrowerPhone = other.thirdBorrowerPhone;
    }
    if (other.isSetThirdBorrowerAddress()) {
      this.thirdBorrowerAddress = other.thirdBorrowerAddress;
    }
    if (other.isSetForeAccount()) {
      this.foreAccount = other.foreAccount;
    }
    if (other.isSetNewReceAccount()) {
      this.newReceAccount = other.newReceAccount;
    }
    if (other.isSetNewReceName()) {
      this.newReceName = other.newReceName;
    }
    if (other.isSetNewReceBank()) {
      this.newReceBank = other.newReceBank;
    }
    if (other.isSetSupersionReceAccount()) {
      this.supersionReceAccount = other.supersionReceAccount;
    }
    if (other.isSetSupersionReceName()) {
      this.supersionReceName = other.supersionReceName;
    }
    if (other.isSetSupersionReceBank()) {
      this.supersionReceBank = other.supersionReceBank;
    }
    if (other.isSetOldLoanBankBranch()) {
      this.oldLoanBankBranch = other.oldLoanBankBranch;
    }
    if (other.isSetNewLoanBankBranch()) {
      this.newLoanBankBranch = other.newLoanBankBranch;
    }
    if (other.isSetSuperviseDepartmentBranch()) {
      this.superviseDepartmentBranch = other.superviseDepartmentBranch;
    }
    if (other.isSetOldBankStr()) {
      this.oldBankStr = other.oldBankStr;
    }
    if (other.isSetOldBankBranchStr()) {
      this.oldBankBranchStr = other.oldBankBranchStr;
    }
    if (other.isSetNewBankStr()) {
      this.newBankStr = other.newBankStr;
    }
    if (other.isSetNewBankBranchStr()) {
      this.newBankBranchStr = other.newBankBranchStr;
    }
    if (other.isSetSuperviseDepartmentStr()) {
      this.superviseDepartmentStr = other.superviseDepartmentStr;
    }
    if (other.isSetSuperviseDepartmentBranchStr()) {
      this.superviseDepartmentBranchStr = other.superviseDepartmentBranchStr;
    }
    if (other.isSetAccumulationFundBankStr()) {
      this.accumulationFundBankStr = other.accumulationFundBankStr;
    }
    if (other.isSetNewRecePerson()) {
      this.newRecePerson = other.newRecePerson;
    }
    if (other.isSetIdCardNumber()) {
      this.idCardNumber = other.idCardNumber;
    }
    this.downPayment = other.downPayment;
    if (other.isSetTurnoverCapitalName()) {
      this.turnoverCapitalName = other.turnoverCapitalName;
    }
    if (other.isSetTurnoverCapitalAccount()) {
      this.turnoverCapitalAccount = other.turnoverCapitalAccount;
    }
    if (other.isSetTurnoverCapitalBank()) {
      this.turnoverCapitalBank = other.turnoverCapitalBank;
    }
  }

  public ProjectForeclosure deepCopy() {
    return new ProjectForeclosure(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.oldLoanBank = null;
    this.oldLoanPerson = null;
    setOldLoanMoneyIsSet(false);
    this.oldLoanMoney = 0.0;
    this.oldLoanPhone = null;
    this.newLoanBank = null;
    this.newLoanPerson = null;
    setNewLoanMoneyIsSet(false);
    this.newLoanMoney = 0.0;
    this.newLoanPhone = null;
    setFundsMoneyIsSet(false);
    this.fundsMoney = 0.0;
    this.superviseDepartment = null;
    this.notarizationDate = null;
    this.signDate = null;
    setPaymentTypeIsSet(false);
    this.paymentType = 0;
    this.remark = null;
    this.accumulationFundBank = null;
    setAccumulationFundMoneyIsSet(false);
    this.accumulationFundMoney = 0.0;
    setLoanDaysIsSet(false);
    this.loanDays = 0;
    this.paymentName = null;
    this.paymentAccount = null;
    setOverdueDaysIsSet(false);
    this.overdueDays = 0;
    setOverdueRateIsSet(false);
    this.overdueRate = 0.0;
    setOverdueFeeIsSet(false);
    this.overdueFee = 0.0;
    setExtensionDaysIsSet(false);
    this.extensionDays = 0;
    setExtensionRateIsSet(false);
    this.extensionRate = 0.0;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    this.paymentDate = null;
    this.receDate = null;
    setOldOwedAmountIsSet(false);
    this.oldOwedAmount = 0.0;
    this.oldLoanTime = null;
    this.superviseAccount = null;
    this.thirdBorrower = null;
    this.thirdBorrowerCard = null;
    this.thirdBorrowerPhone = null;
    this.thirdBorrowerAddress = null;
    this.foreAccount = null;
    this.newReceAccount = null;
    this.newReceName = null;
    this.newReceBank = null;
    this.supersionReceAccount = null;
    this.supersionReceName = null;
    this.supersionReceBank = null;
    this.oldLoanBankBranch = null;
    this.newLoanBankBranch = null;
    this.superviseDepartmentBranch = null;
    this.oldBankStr = null;
    this.oldBankBranchStr = null;
    this.newBankStr = null;
    this.newBankBranchStr = null;
    this.superviseDepartmentStr = null;
    this.superviseDepartmentBranchStr = null;
    this.accumulationFundBankStr = null;
    this.newRecePerson = null;
    this.idCardNumber = null;
    setDownPaymentIsSet(false);
    this.downPayment = 0.0;
    this.turnoverCapitalName = null;
    this.turnoverCapitalAccount = null;
    this.turnoverCapitalBank = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectForeclosure setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectForeclosure setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getOldLoanBank() {
    return this.oldLoanBank;
  }

  public ProjectForeclosure setOldLoanBank(String oldLoanBank) {
    this.oldLoanBank = oldLoanBank;
    return this;
  }

  public void unsetOldLoanBank() {
    this.oldLoanBank = null;
  }

  /** Returns true if field oldLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanBank() {
    return this.oldLoanBank != null;
  }

  public void setOldLoanBankIsSet(boolean value) {
    if (!value) {
      this.oldLoanBank = null;
    }
  }

  public String getOldLoanPerson() {
    return this.oldLoanPerson;
  }

  public ProjectForeclosure setOldLoanPerson(String oldLoanPerson) {
    this.oldLoanPerson = oldLoanPerson;
    return this;
  }

  public void unsetOldLoanPerson() {
    this.oldLoanPerson = null;
  }

  /** Returns true if field oldLoanPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanPerson() {
    return this.oldLoanPerson != null;
  }

  public void setOldLoanPersonIsSet(boolean value) {
    if (!value) {
      this.oldLoanPerson = null;
    }
  }

  public double getOldLoanMoney() {
    return this.oldLoanMoney;
  }

  public ProjectForeclosure setOldLoanMoney(double oldLoanMoney) {
    this.oldLoanMoney = oldLoanMoney;
    setOldLoanMoneyIsSet(true);
    return this;
  }

  public void unsetOldLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDLOANMONEY_ISSET_ID);
  }

  /** Returns true if field oldLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDLOANMONEY_ISSET_ID);
  }

  public void setOldLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDLOANMONEY_ISSET_ID, value);
  }

  public String getOldLoanPhone() {
    return this.oldLoanPhone;
  }

  public ProjectForeclosure setOldLoanPhone(String oldLoanPhone) {
    this.oldLoanPhone = oldLoanPhone;
    return this;
  }

  public void unsetOldLoanPhone() {
    this.oldLoanPhone = null;
  }

  /** Returns true if field oldLoanPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanPhone() {
    return this.oldLoanPhone != null;
  }

  public void setOldLoanPhoneIsSet(boolean value) {
    if (!value) {
      this.oldLoanPhone = null;
    }
  }

  public String getNewLoanBank() {
    return this.newLoanBank;
  }

  public ProjectForeclosure setNewLoanBank(String newLoanBank) {
    this.newLoanBank = newLoanBank;
    return this;
  }

  public void unsetNewLoanBank() {
    this.newLoanBank = null;
  }

  /** Returns true if field newLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanBank() {
    return this.newLoanBank != null;
  }

  public void setNewLoanBankIsSet(boolean value) {
    if (!value) {
      this.newLoanBank = null;
    }
  }

  public String getNewLoanPerson() {
    return this.newLoanPerson;
  }

  public ProjectForeclosure setNewLoanPerson(String newLoanPerson) {
    this.newLoanPerson = newLoanPerson;
    return this;
  }

  public void unsetNewLoanPerson() {
    this.newLoanPerson = null;
  }

  /** Returns true if field newLoanPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanPerson() {
    return this.newLoanPerson != null;
  }

  public void setNewLoanPersonIsSet(boolean value) {
    if (!value) {
      this.newLoanPerson = null;
    }
  }

  public double getNewLoanMoney() {
    return this.newLoanMoney;
  }

  public ProjectForeclosure setNewLoanMoney(double newLoanMoney) {
    this.newLoanMoney = newLoanMoney;
    setNewLoanMoneyIsSet(true);
    return this;
  }

  public void unsetNewLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWLOANMONEY_ISSET_ID);
  }

  /** Returns true if field newLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWLOANMONEY_ISSET_ID);
  }

  public void setNewLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWLOANMONEY_ISSET_ID, value);
  }

  public String getNewLoanPhone() {
    return this.newLoanPhone;
  }

  public ProjectForeclosure setNewLoanPhone(String newLoanPhone) {
    this.newLoanPhone = newLoanPhone;
    return this;
  }

  public void unsetNewLoanPhone() {
    this.newLoanPhone = null;
  }

  /** Returns true if field newLoanPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanPhone() {
    return this.newLoanPhone != null;
  }

  public void setNewLoanPhoneIsSet(boolean value) {
    if (!value) {
      this.newLoanPhone = null;
    }
  }

  public double getFundsMoney() {
    return this.fundsMoney;
  }

  public ProjectForeclosure setFundsMoney(double fundsMoney) {
    this.fundsMoney = fundsMoney;
    setFundsMoneyIsSet(true);
    return this;
  }

  public void unsetFundsMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDSMONEY_ISSET_ID);
  }

  /** Returns true if field fundsMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFundsMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDSMONEY_ISSET_ID);
  }

  public void setFundsMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDSMONEY_ISSET_ID, value);
  }

  public String getSuperviseDepartment() {
    return this.superviseDepartment;
  }

  public ProjectForeclosure setSuperviseDepartment(String superviseDepartment) {
    this.superviseDepartment = superviseDepartment;
    return this;
  }

  public void unsetSuperviseDepartment() {
    this.superviseDepartment = null;
  }

  /** Returns true if field superviseDepartment is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperviseDepartment() {
    return this.superviseDepartment != null;
  }

  public void setSuperviseDepartmentIsSet(boolean value) {
    if (!value) {
      this.superviseDepartment = null;
    }
  }

  public String getNotarizationDate() {
    return this.notarizationDate;
  }

  public ProjectForeclosure setNotarizationDate(String notarizationDate) {
    this.notarizationDate = notarizationDate;
    return this;
  }

  public void unsetNotarizationDate() {
    this.notarizationDate = null;
  }

  /** Returns true if field notarizationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizationDate() {
    return this.notarizationDate != null;
  }

  public void setNotarizationDateIsSet(boolean value) {
    if (!value) {
      this.notarizationDate = null;
    }
  }

  public String getSignDate() {
    return this.signDate;
  }

  public ProjectForeclosure setSignDate(String signDate) {
    this.signDate = signDate;
    return this;
  }

  public void unsetSignDate() {
    this.signDate = null;
  }

  /** Returns true if field signDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSignDate() {
    return this.signDate != null;
  }

  public void setSignDateIsSet(boolean value) {
    if (!value) {
      this.signDate = null;
    }
  }

  public int getPaymentType() {
    return this.paymentType;
  }

  public ProjectForeclosure setPaymentType(int paymentType) {
    this.paymentType = paymentType;
    setPaymentTypeIsSet(true);
    return this;
  }

  public void unsetPaymentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID);
  }

  /** Returns true if field paymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID);
  }

  public void setPaymentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ProjectForeclosure setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getAccumulationFundBank() {
    return this.accumulationFundBank;
  }

  public ProjectForeclosure setAccumulationFundBank(String accumulationFundBank) {
    this.accumulationFundBank = accumulationFundBank;
    return this;
  }

  public void unsetAccumulationFundBank() {
    this.accumulationFundBank = null;
  }

  /** Returns true if field accumulationFundBank is set (has been assigned a value) and false otherwise */
  public boolean isSetAccumulationFundBank() {
    return this.accumulationFundBank != null;
  }

  public void setAccumulationFundBankIsSet(boolean value) {
    if (!value) {
      this.accumulationFundBank = null;
    }
  }

  public double getAccumulationFundMoney() {
    return this.accumulationFundMoney;
  }

  public ProjectForeclosure setAccumulationFundMoney(double accumulationFundMoney) {
    this.accumulationFundMoney = accumulationFundMoney;
    setAccumulationFundMoneyIsSet(true);
    return this;
  }

  public void unsetAccumulationFundMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCUMULATIONFUNDMONEY_ISSET_ID);
  }

  /** Returns true if field accumulationFundMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAccumulationFundMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCUMULATIONFUNDMONEY_ISSET_ID);
  }

  public void setAccumulationFundMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCUMULATIONFUNDMONEY_ISSET_ID, value);
  }

  public int getLoanDays() {
    return this.loanDays;
  }

  public ProjectForeclosure setLoanDays(int loanDays) {
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    return this;
  }

  public void unsetLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  /** Returns true if field loanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  public void setLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANDAYS_ISSET_ID, value);
  }

  public String getPaymentName() {
    return this.paymentName;
  }

  public ProjectForeclosure setPaymentName(String paymentName) {
    this.paymentName = paymentName;
    return this;
  }

  public void unsetPaymentName() {
    this.paymentName = null;
  }

  /** Returns true if field paymentName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentName() {
    return this.paymentName != null;
  }

  public void setPaymentNameIsSet(boolean value) {
    if (!value) {
      this.paymentName = null;
    }
  }

  public String getPaymentAccount() {
    return this.paymentAccount;
  }

  public ProjectForeclosure setPaymentAccount(String paymentAccount) {
    this.paymentAccount = paymentAccount;
    return this;
  }

  public void unsetPaymentAccount() {
    this.paymentAccount = null;
  }

  /** Returns true if field paymentAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAccount() {
    return this.paymentAccount != null;
  }

  public void setPaymentAccountIsSet(boolean value) {
    if (!value) {
      this.paymentAccount = null;
    }
  }

  public int getOverdueDays() {
    return this.overdueDays;
  }

  public ProjectForeclosure setOverdueDays(int overdueDays) {
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    return this;
  }

  public void unsetOverdueDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  /** Returns true if field overdueDays is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDays() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  public void setOverdueDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID, value);
  }

  public double getOverdueRate() {
    return this.overdueRate;
  }

  public ProjectForeclosure setOverdueRate(double overdueRate) {
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    return this;
  }

  public void unsetOverdueRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  /** Returns true if field overdueRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  public void setOverdueRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUERATE_ISSET_ID, value);
  }

  public double getOverdueFee() {
    return this.overdueFee;
  }

  public ProjectForeclosure setOverdueFee(double overdueFee) {
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    return this;
  }

  public void unsetOverdueFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  /** Returns true if field overdueFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  public void setOverdueFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID, value);
  }

  public int getExtensionDays() {
    return this.extensionDays;
  }

  public ProjectForeclosure setExtensionDays(int extensionDays) {
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    return this;
  }

  public void unsetExtensionDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  /** Returns true if field extensionDays is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDays() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  public void setExtensionDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID, value);
  }

  public double getExtensionRate() {
    return this.extensionRate;
  }

  public ProjectForeclosure setExtensionRate(double extensionRate) {
    this.extensionRate = extensionRate;
    setExtensionRateIsSet(true);
    return this;
  }

  public void unsetExtensionRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONRATE_ISSET_ID);
  }

  /** Returns true if field extensionRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionRate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONRATE_ISSET_ID);
  }

  public void setExtensionRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONRATE_ISSET_ID, value);
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public ProjectForeclosure setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public String getPaymentDate() {
    return this.paymentDate;
  }

  public ProjectForeclosure setPaymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  public void unsetPaymentDate() {
    this.paymentDate = null;
  }

  /** Returns true if field paymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentDate() {
    return this.paymentDate != null;
  }

  public void setPaymentDateIsSet(boolean value) {
    if (!value) {
      this.paymentDate = null;
    }
  }

  public String getReceDate() {
    return this.receDate;
  }

  public ProjectForeclosure setReceDate(String receDate) {
    this.receDate = receDate;
    return this;
  }

  public void unsetReceDate() {
    this.receDate = null;
  }

  /** Returns true if field receDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReceDate() {
    return this.receDate != null;
  }

  public void setReceDateIsSet(boolean value) {
    if (!value) {
      this.receDate = null;
    }
  }

  public double getOldOwedAmount() {
    return this.oldOwedAmount;
  }

  public ProjectForeclosure setOldOwedAmount(double oldOwedAmount) {
    this.oldOwedAmount = oldOwedAmount;
    setOldOwedAmountIsSet(true);
    return this;
  }

  public void unsetOldOwedAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDOWEDAMOUNT_ISSET_ID);
  }

  /** Returns true if field oldOwedAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOldOwedAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDOWEDAMOUNT_ISSET_ID);
  }

  public void setOldOwedAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDOWEDAMOUNT_ISSET_ID, value);
  }

  public String getOldLoanTime() {
    return this.oldLoanTime;
  }

  public ProjectForeclosure setOldLoanTime(String oldLoanTime) {
    this.oldLoanTime = oldLoanTime;
    return this;
  }

  public void unsetOldLoanTime() {
    this.oldLoanTime = null;
  }

  /** Returns true if field oldLoanTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanTime() {
    return this.oldLoanTime != null;
  }

  public void setOldLoanTimeIsSet(boolean value) {
    if (!value) {
      this.oldLoanTime = null;
    }
  }

  public String getSuperviseAccount() {
    return this.superviseAccount;
  }

  public ProjectForeclosure setSuperviseAccount(String superviseAccount) {
    this.superviseAccount = superviseAccount;
    return this;
  }

  public void unsetSuperviseAccount() {
    this.superviseAccount = null;
  }

  /** Returns true if field superviseAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperviseAccount() {
    return this.superviseAccount != null;
  }

  public void setSuperviseAccountIsSet(boolean value) {
    if (!value) {
      this.superviseAccount = null;
    }
  }

  public String getThirdBorrower() {
    return this.thirdBorrower;
  }

  public ProjectForeclosure setThirdBorrower(String thirdBorrower) {
    this.thirdBorrower = thirdBorrower;
    return this;
  }

  public void unsetThirdBorrower() {
    this.thirdBorrower = null;
  }

  /** Returns true if field thirdBorrower is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdBorrower() {
    return this.thirdBorrower != null;
  }

  public void setThirdBorrowerIsSet(boolean value) {
    if (!value) {
      this.thirdBorrower = null;
    }
  }

  public String getThirdBorrowerCard() {
    return this.thirdBorrowerCard;
  }

  public ProjectForeclosure setThirdBorrowerCard(String thirdBorrowerCard) {
    this.thirdBorrowerCard = thirdBorrowerCard;
    return this;
  }

  public void unsetThirdBorrowerCard() {
    this.thirdBorrowerCard = null;
  }

  /** Returns true if field thirdBorrowerCard is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdBorrowerCard() {
    return this.thirdBorrowerCard != null;
  }

  public void setThirdBorrowerCardIsSet(boolean value) {
    if (!value) {
      this.thirdBorrowerCard = null;
    }
  }

  public String getThirdBorrowerPhone() {
    return this.thirdBorrowerPhone;
  }

  public ProjectForeclosure setThirdBorrowerPhone(String thirdBorrowerPhone) {
    this.thirdBorrowerPhone = thirdBorrowerPhone;
    return this;
  }

  public void unsetThirdBorrowerPhone() {
    this.thirdBorrowerPhone = null;
  }

  /** Returns true if field thirdBorrowerPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdBorrowerPhone() {
    return this.thirdBorrowerPhone != null;
  }

  public void setThirdBorrowerPhoneIsSet(boolean value) {
    if (!value) {
      this.thirdBorrowerPhone = null;
    }
  }

  public String getThirdBorrowerAddress() {
    return this.thirdBorrowerAddress;
  }

  public ProjectForeclosure setThirdBorrowerAddress(String thirdBorrowerAddress) {
    this.thirdBorrowerAddress = thirdBorrowerAddress;
    return this;
  }

  public void unsetThirdBorrowerAddress() {
    this.thirdBorrowerAddress = null;
  }

  /** Returns true if field thirdBorrowerAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdBorrowerAddress() {
    return this.thirdBorrowerAddress != null;
  }

  public void setThirdBorrowerAddressIsSet(boolean value) {
    if (!value) {
      this.thirdBorrowerAddress = null;
    }
  }

  public String getForeAccount() {
    return this.foreAccount;
  }

  public ProjectForeclosure setForeAccount(String foreAccount) {
    this.foreAccount = foreAccount;
    return this;
  }

  public void unsetForeAccount() {
    this.foreAccount = null;
  }

  /** Returns true if field foreAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetForeAccount() {
    return this.foreAccount != null;
  }

  public void setForeAccountIsSet(boolean value) {
    if (!value) {
      this.foreAccount = null;
    }
  }

  public String getNewReceAccount() {
    return this.newReceAccount;
  }

  public ProjectForeclosure setNewReceAccount(String newReceAccount) {
    this.newReceAccount = newReceAccount;
    return this;
  }

  public void unsetNewReceAccount() {
    this.newReceAccount = null;
  }

  /** Returns true if field newReceAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetNewReceAccount() {
    return this.newReceAccount != null;
  }

  public void setNewReceAccountIsSet(boolean value) {
    if (!value) {
      this.newReceAccount = null;
    }
  }

  public String getNewReceName() {
    return this.newReceName;
  }

  public ProjectForeclosure setNewReceName(String newReceName) {
    this.newReceName = newReceName;
    return this;
  }

  public void unsetNewReceName() {
    this.newReceName = null;
  }

  /** Returns true if field newReceName is set (has been assigned a value) and false otherwise */
  public boolean isSetNewReceName() {
    return this.newReceName != null;
  }

  public void setNewReceNameIsSet(boolean value) {
    if (!value) {
      this.newReceName = null;
    }
  }

  public String getNewReceBank() {
    return this.newReceBank;
  }

  public ProjectForeclosure setNewReceBank(String newReceBank) {
    this.newReceBank = newReceBank;
    return this;
  }

  public void unsetNewReceBank() {
    this.newReceBank = null;
  }

  /** Returns true if field newReceBank is set (has been assigned a value) and false otherwise */
  public boolean isSetNewReceBank() {
    return this.newReceBank != null;
  }

  public void setNewReceBankIsSet(boolean value) {
    if (!value) {
      this.newReceBank = null;
    }
  }

  public String getSupersionReceAccount() {
    return this.supersionReceAccount;
  }

  public ProjectForeclosure setSupersionReceAccount(String supersionReceAccount) {
    this.supersionReceAccount = supersionReceAccount;
    return this;
  }

  public void unsetSupersionReceAccount() {
    this.supersionReceAccount = null;
  }

  /** Returns true if field supersionReceAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetSupersionReceAccount() {
    return this.supersionReceAccount != null;
  }

  public void setSupersionReceAccountIsSet(boolean value) {
    if (!value) {
      this.supersionReceAccount = null;
    }
  }

  public String getSupersionReceName() {
    return this.supersionReceName;
  }

  public ProjectForeclosure setSupersionReceName(String supersionReceName) {
    this.supersionReceName = supersionReceName;
    return this;
  }

  public void unsetSupersionReceName() {
    this.supersionReceName = null;
  }

  /** Returns true if field supersionReceName is set (has been assigned a value) and false otherwise */
  public boolean isSetSupersionReceName() {
    return this.supersionReceName != null;
  }

  public void setSupersionReceNameIsSet(boolean value) {
    if (!value) {
      this.supersionReceName = null;
    }
  }

  public String getSupersionReceBank() {
    return this.supersionReceBank;
  }

  public ProjectForeclosure setSupersionReceBank(String supersionReceBank) {
    this.supersionReceBank = supersionReceBank;
    return this;
  }

  public void unsetSupersionReceBank() {
    this.supersionReceBank = null;
  }

  /** Returns true if field supersionReceBank is set (has been assigned a value) and false otherwise */
  public boolean isSetSupersionReceBank() {
    return this.supersionReceBank != null;
  }

  public void setSupersionReceBankIsSet(boolean value) {
    if (!value) {
      this.supersionReceBank = null;
    }
  }

  public String getOldLoanBankBranch() {
    return this.oldLoanBankBranch;
  }

  public ProjectForeclosure setOldLoanBankBranch(String oldLoanBankBranch) {
    this.oldLoanBankBranch = oldLoanBankBranch;
    return this;
  }

  public void unsetOldLoanBankBranch() {
    this.oldLoanBankBranch = null;
  }

  /** Returns true if field oldLoanBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanBankBranch() {
    return this.oldLoanBankBranch != null;
  }

  public void setOldLoanBankBranchIsSet(boolean value) {
    if (!value) {
      this.oldLoanBankBranch = null;
    }
  }

  public String getNewLoanBankBranch() {
    return this.newLoanBankBranch;
  }

  public ProjectForeclosure setNewLoanBankBranch(String newLoanBankBranch) {
    this.newLoanBankBranch = newLoanBankBranch;
    return this;
  }

  public void unsetNewLoanBankBranch() {
    this.newLoanBankBranch = null;
  }

  /** Returns true if field newLoanBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanBankBranch() {
    return this.newLoanBankBranch != null;
  }

  public void setNewLoanBankBranchIsSet(boolean value) {
    if (!value) {
      this.newLoanBankBranch = null;
    }
  }

  public String getSuperviseDepartmentBranch() {
    return this.superviseDepartmentBranch;
  }

  public ProjectForeclosure setSuperviseDepartmentBranch(String superviseDepartmentBranch) {
    this.superviseDepartmentBranch = superviseDepartmentBranch;
    return this;
  }

  public void unsetSuperviseDepartmentBranch() {
    this.superviseDepartmentBranch = null;
  }

  /** Returns true if field superviseDepartmentBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperviseDepartmentBranch() {
    return this.superviseDepartmentBranch != null;
  }

  public void setSuperviseDepartmentBranchIsSet(boolean value) {
    if (!value) {
      this.superviseDepartmentBranch = null;
    }
  }

  public String getOldBankStr() {
    return this.oldBankStr;
  }

  public ProjectForeclosure setOldBankStr(String oldBankStr) {
    this.oldBankStr = oldBankStr;
    return this;
  }

  public void unsetOldBankStr() {
    this.oldBankStr = null;
  }

  /** Returns true if field oldBankStr is set (has been assigned a value) and false otherwise */
  public boolean isSetOldBankStr() {
    return this.oldBankStr != null;
  }

  public void setOldBankStrIsSet(boolean value) {
    if (!value) {
      this.oldBankStr = null;
    }
  }

  public String getOldBankBranchStr() {
    return this.oldBankBranchStr;
  }

  public ProjectForeclosure setOldBankBranchStr(String oldBankBranchStr) {
    this.oldBankBranchStr = oldBankBranchStr;
    return this;
  }

  public void unsetOldBankBranchStr() {
    this.oldBankBranchStr = null;
  }

  /** Returns true if field oldBankBranchStr is set (has been assigned a value) and false otherwise */
  public boolean isSetOldBankBranchStr() {
    return this.oldBankBranchStr != null;
  }

  public void setOldBankBranchStrIsSet(boolean value) {
    if (!value) {
      this.oldBankBranchStr = null;
    }
  }

  public String getNewBankStr() {
    return this.newBankStr;
  }

  public ProjectForeclosure setNewBankStr(String newBankStr) {
    this.newBankStr = newBankStr;
    return this;
  }

  public void unsetNewBankStr() {
    this.newBankStr = null;
  }

  /** Returns true if field newBankStr is set (has been assigned a value) and false otherwise */
  public boolean isSetNewBankStr() {
    return this.newBankStr != null;
  }

  public void setNewBankStrIsSet(boolean value) {
    if (!value) {
      this.newBankStr = null;
    }
  }

  public String getNewBankBranchStr() {
    return this.newBankBranchStr;
  }

  public ProjectForeclosure setNewBankBranchStr(String newBankBranchStr) {
    this.newBankBranchStr = newBankBranchStr;
    return this;
  }

  public void unsetNewBankBranchStr() {
    this.newBankBranchStr = null;
  }

  /** Returns true if field newBankBranchStr is set (has been assigned a value) and false otherwise */
  public boolean isSetNewBankBranchStr() {
    return this.newBankBranchStr != null;
  }

  public void setNewBankBranchStrIsSet(boolean value) {
    if (!value) {
      this.newBankBranchStr = null;
    }
  }

  public String getSuperviseDepartmentStr() {
    return this.superviseDepartmentStr;
  }

  public ProjectForeclosure setSuperviseDepartmentStr(String superviseDepartmentStr) {
    this.superviseDepartmentStr = superviseDepartmentStr;
    return this;
  }

  public void unsetSuperviseDepartmentStr() {
    this.superviseDepartmentStr = null;
  }

  /** Returns true if field superviseDepartmentStr is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperviseDepartmentStr() {
    return this.superviseDepartmentStr != null;
  }

  public void setSuperviseDepartmentStrIsSet(boolean value) {
    if (!value) {
      this.superviseDepartmentStr = null;
    }
  }

  public String getSuperviseDepartmentBranchStr() {
    return this.superviseDepartmentBranchStr;
  }

  public ProjectForeclosure setSuperviseDepartmentBranchStr(String superviseDepartmentBranchStr) {
    this.superviseDepartmentBranchStr = superviseDepartmentBranchStr;
    return this;
  }

  public void unsetSuperviseDepartmentBranchStr() {
    this.superviseDepartmentBranchStr = null;
  }

  /** Returns true if field superviseDepartmentBranchStr is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperviseDepartmentBranchStr() {
    return this.superviseDepartmentBranchStr != null;
  }

  public void setSuperviseDepartmentBranchStrIsSet(boolean value) {
    if (!value) {
      this.superviseDepartmentBranchStr = null;
    }
  }

  public String getAccumulationFundBankStr() {
    return this.accumulationFundBankStr;
  }

  public ProjectForeclosure setAccumulationFundBankStr(String accumulationFundBankStr) {
    this.accumulationFundBankStr = accumulationFundBankStr;
    return this;
  }

  public void unsetAccumulationFundBankStr() {
    this.accumulationFundBankStr = null;
  }

  /** Returns true if field accumulationFundBankStr is set (has been assigned a value) and false otherwise */
  public boolean isSetAccumulationFundBankStr() {
    return this.accumulationFundBankStr != null;
  }

  public void setAccumulationFundBankStrIsSet(boolean value) {
    if (!value) {
      this.accumulationFundBankStr = null;
    }
  }

  public String getNewRecePerson() {
    return this.newRecePerson;
  }

  public ProjectForeclosure setNewRecePerson(String newRecePerson) {
    this.newRecePerson = newRecePerson;
    return this;
  }

  public void unsetNewRecePerson() {
    this.newRecePerson = null;
  }

  /** Returns true if field newRecePerson is set (has been assigned a value) and false otherwise */
  public boolean isSetNewRecePerson() {
    return this.newRecePerson != null;
  }

  public void setNewRecePersonIsSet(boolean value) {
    if (!value) {
      this.newRecePerson = null;
    }
  }

  public String getIdCardNumber() {
    return this.idCardNumber;
  }

  public ProjectForeclosure setIdCardNumber(String idCardNumber) {
    this.idCardNumber = idCardNumber;
    return this;
  }

  public void unsetIdCardNumber() {
    this.idCardNumber = null;
  }

  /** Returns true if field idCardNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCardNumber() {
    return this.idCardNumber != null;
  }

  public void setIdCardNumberIsSet(boolean value) {
    if (!value) {
      this.idCardNumber = null;
    }
  }

  public double getDownPayment() {
    return this.downPayment;
  }

  public ProjectForeclosure setDownPayment(double downPayment) {
    this.downPayment = downPayment;
    setDownPaymentIsSet(true);
    return this;
  }

  public void unsetDownPayment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNPAYMENT_ISSET_ID);
  }

  /** Returns true if field downPayment is set (has been assigned a value) and false otherwise */
  public boolean isSetDownPayment() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNPAYMENT_ISSET_ID);
  }

  public void setDownPaymentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNPAYMENT_ISSET_ID, value);
  }

  public String getTurnoverCapitalName() {
    return this.turnoverCapitalName;
  }

  public ProjectForeclosure setTurnoverCapitalName(String turnoverCapitalName) {
    this.turnoverCapitalName = turnoverCapitalName;
    return this;
  }

  public void unsetTurnoverCapitalName() {
    this.turnoverCapitalName = null;
  }

  /** Returns true if field turnoverCapitalName is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnoverCapitalName() {
    return this.turnoverCapitalName != null;
  }

  public void setTurnoverCapitalNameIsSet(boolean value) {
    if (!value) {
      this.turnoverCapitalName = null;
    }
  }

  public String getTurnoverCapitalAccount() {
    return this.turnoverCapitalAccount;
  }

  public ProjectForeclosure setTurnoverCapitalAccount(String turnoverCapitalAccount) {
    this.turnoverCapitalAccount = turnoverCapitalAccount;
    return this;
  }

  public void unsetTurnoverCapitalAccount() {
    this.turnoverCapitalAccount = null;
  }

  /** Returns true if field turnoverCapitalAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnoverCapitalAccount() {
    return this.turnoverCapitalAccount != null;
  }

  public void setTurnoverCapitalAccountIsSet(boolean value) {
    if (!value) {
      this.turnoverCapitalAccount = null;
    }
  }

  public String getTurnoverCapitalBank() {
    return this.turnoverCapitalBank;
  }

  public ProjectForeclosure setTurnoverCapitalBank(String turnoverCapitalBank) {
    this.turnoverCapitalBank = turnoverCapitalBank;
    return this;
  }

  public void unsetTurnoverCapitalBank() {
    this.turnoverCapitalBank = null;
  }

  /** Returns true if field turnoverCapitalBank is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnoverCapitalBank() {
    return this.turnoverCapitalBank != null;
  }

  public void setTurnoverCapitalBankIsSet(boolean value) {
    if (!value) {
      this.turnoverCapitalBank = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case OLD_LOAN_BANK:
      if (value == null) {
        unsetOldLoanBank();
      } else {
        setOldLoanBank((String)value);
      }
      break;

    case OLD_LOAN_PERSON:
      if (value == null) {
        unsetOldLoanPerson();
      } else {
        setOldLoanPerson((String)value);
      }
      break;

    case OLD_LOAN_MONEY:
      if (value == null) {
        unsetOldLoanMoney();
      } else {
        setOldLoanMoney((Double)value);
      }
      break;

    case OLD_LOAN_PHONE:
      if (value == null) {
        unsetOldLoanPhone();
      } else {
        setOldLoanPhone((String)value);
      }
      break;

    case NEW_LOAN_BANK:
      if (value == null) {
        unsetNewLoanBank();
      } else {
        setNewLoanBank((String)value);
      }
      break;

    case NEW_LOAN_PERSON:
      if (value == null) {
        unsetNewLoanPerson();
      } else {
        setNewLoanPerson((String)value);
      }
      break;

    case NEW_LOAN_MONEY:
      if (value == null) {
        unsetNewLoanMoney();
      } else {
        setNewLoanMoney((Double)value);
      }
      break;

    case NEW_LOAN_PHONE:
      if (value == null) {
        unsetNewLoanPhone();
      } else {
        setNewLoanPhone((String)value);
      }
      break;

    case FUNDS_MONEY:
      if (value == null) {
        unsetFundsMoney();
      } else {
        setFundsMoney((Double)value);
      }
      break;

    case SUPERVISE_DEPARTMENT:
      if (value == null) {
        unsetSuperviseDepartment();
      } else {
        setSuperviseDepartment((String)value);
      }
      break;

    case NOTARIZATION_DATE:
      if (value == null) {
        unsetNotarizationDate();
      } else {
        setNotarizationDate((String)value);
      }
      break;

    case SIGN_DATE:
      if (value == null) {
        unsetSignDate();
      } else {
        setSignDate((String)value);
      }
      break;

    case PAYMENT_TYPE:
      if (value == null) {
        unsetPaymentType();
      } else {
        setPaymentType((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ACCUMULATION_FUND_BANK:
      if (value == null) {
        unsetAccumulationFundBank();
      } else {
        setAccumulationFundBank((String)value);
      }
      break;

    case ACCUMULATION_FUND_MONEY:
      if (value == null) {
        unsetAccumulationFundMoney();
      } else {
        setAccumulationFundMoney((Double)value);
      }
      break;

    case LOAN_DAYS:
      if (value == null) {
        unsetLoanDays();
      } else {
        setLoanDays((Integer)value);
      }
      break;

    case PAYMENT_NAME:
      if (value == null) {
        unsetPaymentName();
      } else {
        setPaymentName((String)value);
      }
      break;

    case PAYMENT_ACCOUNT:
      if (value == null) {
        unsetPaymentAccount();
      } else {
        setPaymentAccount((String)value);
      }
      break;

    case OVERDUE_DAYS:
      if (value == null) {
        unsetOverdueDays();
      } else {
        setOverdueDays((Integer)value);
      }
      break;

    case OVERDUE_RATE:
      if (value == null) {
        unsetOverdueRate();
      } else {
        setOverdueRate((Double)value);
      }
      break;

    case OVERDUE_FEE:
      if (value == null) {
        unsetOverdueFee();
      } else {
        setOverdueFee((Double)value);
      }
      break;

    case EXTENSION_DAYS:
      if (value == null) {
        unsetExtensionDays();
      } else {
        setExtensionDays((Integer)value);
      }
      break;

    case EXTENSION_RATE:
      if (value == null) {
        unsetExtensionRate();
      } else {
        setExtensionRate((Double)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case PAYMENT_DATE:
      if (value == null) {
        unsetPaymentDate();
      } else {
        setPaymentDate((String)value);
      }
      break;

    case RECE_DATE:
      if (value == null) {
        unsetReceDate();
      } else {
        setReceDate((String)value);
      }
      break;

    case OLD_OWED_AMOUNT:
      if (value == null) {
        unsetOldOwedAmount();
      } else {
        setOldOwedAmount((Double)value);
      }
      break;

    case OLD_LOAN_TIME:
      if (value == null) {
        unsetOldLoanTime();
      } else {
        setOldLoanTime((String)value);
      }
      break;

    case SUPERVISE_ACCOUNT:
      if (value == null) {
        unsetSuperviseAccount();
      } else {
        setSuperviseAccount((String)value);
      }
      break;

    case THIRD_BORROWER:
      if (value == null) {
        unsetThirdBorrower();
      } else {
        setThirdBorrower((String)value);
      }
      break;

    case THIRD_BORROWER_CARD:
      if (value == null) {
        unsetThirdBorrowerCard();
      } else {
        setThirdBorrowerCard((String)value);
      }
      break;

    case THIRD_BORROWER_PHONE:
      if (value == null) {
        unsetThirdBorrowerPhone();
      } else {
        setThirdBorrowerPhone((String)value);
      }
      break;

    case THIRD_BORROWER_ADDRESS:
      if (value == null) {
        unsetThirdBorrowerAddress();
      } else {
        setThirdBorrowerAddress((String)value);
      }
      break;

    case FORE_ACCOUNT:
      if (value == null) {
        unsetForeAccount();
      } else {
        setForeAccount((String)value);
      }
      break;

    case NEW_RECE_ACCOUNT:
      if (value == null) {
        unsetNewReceAccount();
      } else {
        setNewReceAccount((String)value);
      }
      break;

    case NEW_RECE_NAME:
      if (value == null) {
        unsetNewReceName();
      } else {
        setNewReceName((String)value);
      }
      break;

    case NEW_RECE_BANK:
      if (value == null) {
        unsetNewReceBank();
      } else {
        setNewReceBank((String)value);
      }
      break;

    case SUPERSION_RECE_ACCOUNT:
      if (value == null) {
        unsetSupersionReceAccount();
      } else {
        setSupersionReceAccount((String)value);
      }
      break;

    case SUPERSION_RECE_NAME:
      if (value == null) {
        unsetSupersionReceName();
      } else {
        setSupersionReceName((String)value);
      }
      break;

    case SUPERSION_RECE_BANK:
      if (value == null) {
        unsetSupersionReceBank();
      } else {
        setSupersionReceBank((String)value);
      }
      break;

    case OLD_LOAN_BANK_BRANCH:
      if (value == null) {
        unsetOldLoanBankBranch();
      } else {
        setOldLoanBankBranch((String)value);
      }
      break;

    case NEW_LOAN_BANK_BRANCH:
      if (value == null) {
        unsetNewLoanBankBranch();
      } else {
        setNewLoanBankBranch((String)value);
      }
      break;

    case SUPERVISE_DEPARTMENT_BRANCH:
      if (value == null) {
        unsetSuperviseDepartmentBranch();
      } else {
        setSuperviseDepartmentBranch((String)value);
      }
      break;

    case OLD_BANK_STR:
      if (value == null) {
        unsetOldBankStr();
      } else {
        setOldBankStr((String)value);
      }
      break;

    case OLD_BANK_BRANCH_STR:
      if (value == null) {
        unsetOldBankBranchStr();
      } else {
        setOldBankBranchStr((String)value);
      }
      break;

    case NEW_BANK_STR:
      if (value == null) {
        unsetNewBankStr();
      } else {
        setNewBankStr((String)value);
      }
      break;

    case NEW_BANK_BRANCH_STR:
      if (value == null) {
        unsetNewBankBranchStr();
      } else {
        setNewBankBranchStr((String)value);
      }
      break;

    case SUPERVISE_DEPARTMENT_STR:
      if (value == null) {
        unsetSuperviseDepartmentStr();
      } else {
        setSuperviseDepartmentStr((String)value);
      }
      break;

    case SUPERVISE_DEPARTMENT_BRANCH_STR:
      if (value == null) {
        unsetSuperviseDepartmentBranchStr();
      } else {
        setSuperviseDepartmentBranchStr((String)value);
      }
      break;

    case ACCUMULATION_FUND_BANK_STR:
      if (value == null) {
        unsetAccumulationFundBankStr();
      } else {
        setAccumulationFundBankStr((String)value);
      }
      break;

    case NEW_RECE_PERSON:
      if (value == null) {
        unsetNewRecePerson();
      } else {
        setNewRecePerson((String)value);
      }
      break;

    case ID_CARD_NUMBER:
      if (value == null) {
        unsetIdCardNumber();
      } else {
        setIdCardNumber((String)value);
      }
      break;

    case DOWN_PAYMENT:
      if (value == null) {
        unsetDownPayment();
      } else {
        setDownPayment((Double)value);
      }
      break;

    case TURNOVER_CAPITAL_NAME:
      if (value == null) {
        unsetTurnoverCapitalName();
      } else {
        setTurnoverCapitalName((String)value);
      }
      break;

    case TURNOVER_CAPITAL_ACCOUNT:
      if (value == null) {
        unsetTurnoverCapitalAccount();
      } else {
        setTurnoverCapitalAccount((String)value);
      }
      break;

    case TURNOVER_CAPITAL_BANK:
      if (value == null) {
        unsetTurnoverCapitalBank();
      } else {
        setTurnoverCapitalBank((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case OLD_LOAN_BANK:
      return getOldLoanBank();

    case OLD_LOAN_PERSON:
      return getOldLoanPerson();

    case OLD_LOAN_MONEY:
      return Double.valueOf(getOldLoanMoney());

    case OLD_LOAN_PHONE:
      return getOldLoanPhone();

    case NEW_LOAN_BANK:
      return getNewLoanBank();

    case NEW_LOAN_PERSON:
      return getNewLoanPerson();

    case NEW_LOAN_MONEY:
      return Double.valueOf(getNewLoanMoney());

    case NEW_LOAN_PHONE:
      return getNewLoanPhone();

    case FUNDS_MONEY:
      return Double.valueOf(getFundsMoney());

    case SUPERVISE_DEPARTMENT:
      return getSuperviseDepartment();

    case NOTARIZATION_DATE:
      return getNotarizationDate();

    case SIGN_DATE:
      return getSignDate();

    case PAYMENT_TYPE:
      return Integer.valueOf(getPaymentType());

    case REMARK:
      return getRemark();

    case ACCUMULATION_FUND_BANK:
      return getAccumulationFundBank();

    case ACCUMULATION_FUND_MONEY:
      return Double.valueOf(getAccumulationFundMoney());

    case LOAN_DAYS:
      return Integer.valueOf(getLoanDays());

    case PAYMENT_NAME:
      return getPaymentName();

    case PAYMENT_ACCOUNT:
      return getPaymentAccount();

    case OVERDUE_DAYS:
      return Integer.valueOf(getOverdueDays());

    case OVERDUE_RATE:
      return Double.valueOf(getOverdueRate());

    case OVERDUE_FEE:
      return Double.valueOf(getOverdueFee());

    case EXTENSION_DAYS:
      return Integer.valueOf(getExtensionDays());

    case EXTENSION_RATE:
      return Double.valueOf(getExtensionRate());

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case PAYMENT_DATE:
      return getPaymentDate();

    case RECE_DATE:
      return getReceDate();

    case OLD_OWED_AMOUNT:
      return Double.valueOf(getOldOwedAmount());

    case OLD_LOAN_TIME:
      return getOldLoanTime();

    case SUPERVISE_ACCOUNT:
      return getSuperviseAccount();

    case THIRD_BORROWER:
      return getThirdBorrower();

    case THIRD_BORROWER_CARD:
      return getThirdBorrowerCard();

    case THIRD_BORROWER_PHONE:
      return getThirdBorrowerPhone();

    case THIRD_BORROWER_ADDRESS:
      return getThirdBorrowerAddress();

    case FORE_ACCOUNT:
      return getForeAccount();

    case NEW_RECE_ACCOUNT:
      return getNewReceAccount();

    case NEW_RECE_NAME:
      return getNewReceName();

    case NEW_RECE_BANK:
      return getNewReceBank();

    case SUPERSION_RECE_ACCOUNT:
      return getSupersionReceAccount();

    case SUPERSION_RECE_NAME:
      return getSupersionReceName();

    case SUPERSION_RECE_BANK:
      return getSupersionReceBank();

    case OLD_LOAN_BANK_BRANCH:
      return getOldLoanBankBranch();

    case NEW_LOAN_BANK_BRANCH:
      return getNewLoanBankBranch();

    case SUPERVISE_DEPARTMENT_BRANCH:
      return getSuperviseDepartmentBranch();

    case OLD_BANK_STR:
      return getOldBankStr();

    case OLD_BANK_BRANCH_STR:
      return getOldBankBranchStr();

    case NEW_BANK_STR:
      return getNewBankStr();

    case NEW_BANK_BRANCH_STR:
      return getNewBankBranchStr();

    case SUPERVISE_DEPARTMENT_STR:
      return getSuperviseDepartmentStr();

    case SUPERVISE_DEPARTMENT_BRANCH_STR:
      return getSuperviseDepartmentBranchStr();

    case ACCUMULATION_FUND_BANK_STR:
      return getAccumulationFundBankStr();

    case NEW_RECE_PERSON:
      return getNewRecePerson();

    case ID_CARD_NUMBER:
      return getIdCardNumber();

    case DOWN_PAYMENT:
      return Double.valueOf(getDownPayment());

    case TURNOVER_CAPITAL_NAME:
      return getTurnoverCapitalName();

    case TURNOVER_CAPITAL_ACCOUNT:
      return getTurnoverCapitalAccount();

    case TURNOVER_CAPITAL_BANK:
      return getTurnoverCapitalBank();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case OLD_LOAN_BANK:
      return isSetOldLoanBank();
    case OLD_LOAN_PERSON:
      return isSetOldLoanPerson();
    case OLD_LOAN_MONEY:
      return isSetOldLoanMoney();
    case OLD_LOAN_PHONE:
      return isSetOldLoanPhone();
    case NEW_LOAN_BANK:
      return isSetNewLoanBank();
    case NEW_LOAN_PERSON:
      return isSetNewLoanPerson();
    case NEW_LOAN_MONEY:
      return isSetNewLoanMoney();
    case NEW_LOAN_PHONE:
      return isSetNewLoanPhone();
    case FUNDS_MONEY:
      return isSetFundsMoney();
    case SUPERVISE_DEPARTMENT:
      return isSetSuperviseDepartment();
    case NOTARIZATION_DATE:
      return isSetNotarizationDate();
    case SIGN_DATE:
      return isSetSignDate();
    case PAYMENT_TYPE:
      return isSetPaymentType();
    case REMARK:
      return isSetRemark();
    case ACCUMULATION_FUND_BANK:
      return isSetAccumulationFundBank();
    case ACCUMULATION_FUND_MONEY:
      return isSetAccumulationFundMoney();
    case LOAN_DAYS:
      return isSetLoanDays();
    case PAYMENT_NAME:
      return isSetPaymentName();
    case PAYMENT_ACCOUNT:
      return isSetPaymentAccount();
    case OVERDUE_DAYS:
      return isSetOverdueDays();
    case OVERDUE_RATE:
      return isSetOverdueRate();
    case OVERDUE_FEE:
      return isSetOverdueFee();
    case EXTENSION_DAYS:
      return isSetExtensionDays();
    case EXTENSION_RATE:
      return isSetExtensionRate();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case PAYMENT_DATE:
      return isSetPaymentDate();
    case RECE_DATE:
      return isSetReceDate();
    case OLD_OWED_AMOUNT:
      return isSetOldOwedAmount();
    case OLD_LOAN_TIME:
      return isSetOldLoanTime();
    case SUPERVISE_ACCOUNT:
      return isSetSuperviseAccount();
    case THIRD_BORROWER:
      return isSetThirdBorrower();
    case THIRD_BORROWER_CARD:
      return isSetThirdBorrowerCard();
    case THIRD_BORROWER_PHONE:
      return isSetThirdBorrowerPhone();
    case THIRD_BORROWER_ADDRESS:
      return isSetThirdBorrowerAddress();
    case FORE_ACCOUNT:
      return isSetForeAccount();
    case NEW_RECE_ACCOUNT:
      return isSetNewReceAccount();
    case NEW_RECE_NAME:
      return isSetNewReceName();
    case NEW_RECE_BANK:
      return isSetNewReceBank();
    case SUPERSION_RECE_ACCOUNT:
      return isSetSupersionReceAccount();
    case SUPERSION_RECE_NAME:
      return isSetSupersionReceName();
    case SUPERSION_RECE_BANK:
      return isSetSupersionReceBank();
    case OLD_LOAN_BANK_BRANCH:
      return isSetOldLoanBankBranch();
    case NEW_LOAN_BANK_BRANCH:
      return isSetNewLoanBankBranch();
    case SUPERVISE_DEPARTMENT_BRANCH:
      return isSetSuperviseDepartmentBranch();
    case OLD_BANK_STR:
      return isSetOldBankStr();
    case OLD_BANK_BRANCH_STR:
      return isSetOldBankBranchStr();
    case NEW_BANK_STR:
      return isSetNewBankStr();
    case NEW_BANK_BRANCH_STR:
      return isSetNewBankBranchStr();
    case SUPERVISE_DEPARTMENT_STR:
      return isSetSuperviseDepartmentStr();
    case SUPERVISE_DEPARTMENT_BRANCH_STR:
      return isSetSuperviseDepartmentBranchStr();
    case ACCUMULATION_FUND_BANK_STR:
      return isSetAccumulationFundBankStr();
    case NEW_RECE_PERSON:
      return isSetNewRecePerson();
    case ID_CARD_NUMBER:
      return isSetIdCardNumber();
    case DOWN_PAYMENT:
      return isSetDownPayment();
    case TURNOVER_CAPITAL_NAME:
      return isSetTurnoverCapitalName();
    case TURNOVER_CAPITAL_ACCOUNT:
      return isSetTurnoverCapitalAccount();
    case TURNOVER_CAPITAL_BANK:
      return isSetTurnoverCapitalBank();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectForeclosure)
      return this.equals((ProjectForeclosure)that);
    return false;
  }

  public boolean equals(ProjectForeclosure that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_oldLoanBank = true && this.isSetOldLoanBank();
    boolean that_present_oldLoanBank = true && that.isSetOldLoanBank();
    if (this_present_oldLoanBank || that_present_oldLoanBank) {
      if (!(this_present_oldLoanBank && that_present_oldLoanBank))
        return false;
      if (!this.oldLoanBank.equals(that.oldLoanBank))
        return false;
    }

    boolean this_present_oldLoanPerson = true && this.isSetOldLoanPerson();
    boolean that_present_oldLoanPerson = true && that.isSetOldLoanPerson();
    if (this_present_oldLoanPerson || that_present_oldLoanPerson) {
      if (!(this_present_oldLoanPerson && that_present_oldLoanPerson))
        return false;
      if (!this.oldLoanPerson.equals(that.oldLoanPerson))
        return false;
    }

    boolean this_present_oldLoanMoney = true;
    boolean that_present_oldLoanMoney = true;
    if (this_present_oldLoanMoney || that_present_oldLoanMoney) {
      if (!(this_present_oldLoanMoney && that_present_oldLoanMoney))
        return false;
      if (this.oldLoanMoney != that.oldLoanMoney)
        return false;
    }

    boolean this_present_oldLoanPhone = true && this.isSetOldLoanPhone();
    boolean that_present_oldLoanPhone = true && that.isSetOldLoanPhone();
    if (this_present_oldLoanPhone || that_present_oldLoanPhone) {
      if (!(this_present_oldLoanPhone && that_present_oldLoanPhone))
        return false;
      if (!this.oldLoanPhone.equals(that.oldLoanPhone))
        return false;
    }

    boolean this_present_newLoanBank = true && this.isSetNewLoanBank();
    boolean that_present_newLoanBank = true && that.isSetNewLoanBank();
    if (this_present_newLoanBank || that_present_newLoanBank) {
      if (!(this_present_newLoanBank && that_present_newLoanBank))
        return false;
      if (!this.newLoanBank.equals(that.newLoanBank))
        return false;
    }

    boolean this_present_newLoanPerson = true && this.isSetNewLoanPerson();
    boolean that_present_newLoanPerson = true && that.isSetNewLoanPerson();
    if (this_present_newLoanPerson || that_present_newLoanPerson) {
      if (!(this_present_newLoanPerson && that_present_newLoanPerson))
        return false;
      if (!this.newLoanPerson.equals(that.newLoanPerson))
        return false;
    }

    boolean this_present_newLoanMoney = true;
    boolean that_present_newLoanMoney = true;
    if (this_present_newLoanMoney || that_present_newLoanMoney) {
      if (!(this_present_newLoanMoney && that_present_newLoanMoney))
        return false;
      if (this.newLoanMoney != that.newLoanMoney)
        return false;
    }

    boolean this_present_newLoanPhone = true && this.isSetNewLoanPhone();
    boolean that_present_newLoanPhone = true && that.isSetNewLoanPhone();
    if (this_present_newLoanPhone || that_present_newLoanPhone) {
      if (!(this_present_newLoanPhone && that_present_newLoanPhone))
        return false;
      if (!this.newLoanPhone.equals(that.newLoanPhone))
        return false;
    }

    boolean this_present_fundsMoney = true;
    boolean that_present_fundsMoney = true;
    if (this_present_fundsMoney || that_present_fundsMoney) {
      if (!(this_present_fundsMoney && that_present_fundsMoney))
        return false;
      if (this.fundsMoney != that.fundsMoney)
        return false;
    }

    boolean this_present_superviseDepartment = true && this.isSetSuperviseDepartment();
    boolean that_present_superviseDepartment = true && that.isSetSuperviseDepartment();
    if (this_present_superviseDepartment || that_present_superviseDepartment) {
      if (!(this_present_superviseDepartment && that_present_superviseDepartment))
        return false;
      if (!this.superviseDepartment.equals(that.superviseDepartment))
        return false;
    }

    boolean this_present_notarizationDate = true && this.isSetNotarizationDate();
    boolean that_present_notarizationDate = true && that.isSetNotarizationDate();
    if (this_present_notarizationDate || that_present_notarizationDate) {
      if (!(this_present_notarizationDate && that_present_notarizationDate))
        return false;
      if (!this.notarizationDate.equals(that.notarizationDate))
        return false;
    }

    boolean this_present_signDate = true && this.isSetSignDate();
    boolean that_present_signDate = true && that.isSetSignDate();
    if (this_present_signDate || that_present_signDate) {
      if (!(this_present_signDate && that_present_signDate))
        return false;
      if (!this.signDate.equals(that.signDate))
        return false;
    }

    boolean this_present_paymentType = true;
    boolean that_present_paymentType = true;
    if (this_present_paymentType || that_present_paymentType) {
      if (!(this_present_paymentType && that_present_paymentType))
        return false;
      if (this.paymentType != that.paymentType)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_accumulationFundBank = true && this.isSetAccumulationFundBank();
    boolean that_present_accumulationFundBank = true && that.isSetAccumulationFundBank();
    if (this_present_accumulationFundBank || that_present_accumulationFundBank) {
      if (!(this_present_accumulationFundBank && that_present_accumulationFundBank))
        return false;
      if (!this.accumulationFundBank.equals(that.accumulationFundBank))
        return false;
    }

    boolean this_present_accumulationFundMoney = true;
    boolean that_present_accumulationFundMoney = true;
    if (this_present_accumulationFundMoney || that_present_accumulationFundMoney) {
      if (!(this_present_accumulationFundMoney && that_present_accumulationFundMoney))
        return false;
      if (this.accumulationFundMoney != that.accumulationFundMoney)
        return false;
    }

    boolean this_present_loanDays = true;
    boolean that_present_loanDays = true;
    if (this_present_loanDays || that_present_loanDays) {
      if (!(this_present_loanDays && that_present_loanDays))
        return false;
      if (this.loanDays != that.loanDays)
        return false;
    }

    boolean this_present_paymentName = true && this.isSetPaymentName();
    boolean that_present_paymentName = true && that.isSetPaymentName();
    if (this_present_paymentName || that_present_paymentName) {
      if (!(this_present_paymentName && that_present_paymentName))
        return false;
      if (!this.paymentName.equals(that.paymentName))
        return false;
    }

    boolean this_present_paymentAccount = true && this.isSetPaymentAccount();
    boolean that_present_paymentAccount = true && that.isSetPaymentAccount();
    if (this_present_paymentAccount || that_present_paymentAccount) {
      if (!(this_present_paymentAccount && that_present_paymentAccount))
        return false;
      if (!this.paymentAccount.equals(that.paymentAccount))
        return false;
    }

    boolean this_present_overdueDays = true;
    boolean that_present_overdueDays = true;
    if (this_present_overdueDays || that_present_overdueDays) {
      if (!(this_present_overdueDays && that_present_overdueDays))
        return false;
      if (this.overdueDays != that.overdueDays)
        return false;
    }

    boolean this_present_overdueRate = true;
    boolean that_present_overdueRate = true;
    if (this_present_overdueRate || that_present_overdueRate) {
      if (!(this_present_overdueRate && that_present_overdueRate))
        return false;
      if (this.overdueRate != that.overdueRate)
        return false;
    }

    boolean this_present_overdueFee = true;
    boolean that_present_overdueFee = true;
    if (this_present_overdueFee || that_present_overdueFee) {
      if (!(this_present_overdueFee && that_present_overdueFee))
        return false;
      if (this.overdueFee != that.overdueFee)
        return false;
    }

    boolean this_present_extensionDays = true;
    boolean that_present_extensionDays = true;
    if (this_present_extensionDays || that_present_extensionDays) {
      if (!(this_present_extensionDays && that_present_extensionDays))
        return false;
      if (this.extensionDays != that.extensionDays)
        return false;
    }

    boolean this_present_extensionRate = true;
    boolean that_present_extensionRate = true;
    if (this_present_extensionRate || that_present_extensionRate) {
      if (!(this_present_extensionRate && that_present_extensionRate))
        return false;
      if (this.extensionRate != that.extensionRate)
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_paymentDate = true && this.isSetPaymentDate();
    boolean that_present_paymentDate = true && that.isSetPaymentDate();
    if (this_present_paymentDate || that_present_paymentDate) {
      if (!(this_present_paymentDate && that_present_paymentDate))
        return false;
      if (!this.paymentDate.equals(that.paymentDate))
        return false;
    }

    boolean this_present_receDate = true && this.isSetReceDate();
    boolean that_present_receDate = true && that.isSetReceDate();
    if (this_present_receDate || that_present_receDate) {
      if (!(this_present_receDate && that_present_receDate))
        return false;
      if (!this.receDate.equals(that.receDate))
        return false;
    }

    boolean this_present_oldOwedAmount = true;
    boolean that_present_oldOwedAmount = true;
    if (this_present_oldOwedAmount || that_present_oldOwedAmount) {
      if (!(this_present_oldOwedAmount && that_present_oldOwedAmount))
        return false;
      if (this.oldOwedAmount != that.oldOwedAmount)
        return false;
    }

    boolean this_present_oldLoanTime = true && this.isSetOldLoanTime();
    boolean that_present_oldLoanTime = true && that.isSetOldLoanTime();
    if (this_present_oldLoanTime || that_present_oldLoanTime) {
      if (!(this_present_oldLoanTime && that_present_oldLoanTime))
        return false;
      if (!this.oldLoanTime.equals(that.oldLoanTime))
        return false;
    }

    boolean this_present_superviseAccount = true && this.isSetSuperviseAccount();
    boolean that_present_superviseAccount = true && that.isSetSuperviseAccount();
    if (this_present_superviseAccount || that_present_superviseAccount) {
      if (!(this_present_superviseAccount && that_present_superviseAccount))
        return false;
      if (!this.superviseAccount.equals(that.superviseAccount))
        return false;
    }

    boolean this_present_thirdBorrower = true && this.isSetThirdBorrower();
    boolean that_present_thirdBorrower = true && that.isSetThirdBorrower();
    if (this_present_thirdBorrower || that_present_thirdBorrower) {
      if (!(this_present_thirdBorrower && that_present_thirdBorrower))
        return false;
      if (!this.thirdBorrower.equals(that.thirdBorrower))
        return false;
    }

    boolean this_present_thirdBorrowerCard = true && this.isSetThirdBorrowerCard();
    boolean that_present_thirdBorrowerCard = true && that.isSetThirdBorrowerCard();
    if (this_present_thirdBorrowerCard || that_present_thirdBorrowerCard) {
      if (!(this_present_thirdBorrowerCard && that_present_thirdBorrowerCard))
        return false;
      if (!this.thirdBorrowerCard.equals(that.thirdBorrowerCard))
        return false;
    }

    boolean this_present_thirdBorrowerPhone = true && this.isSetThirdBorrowerPhone();
    boolean that_present_thirdBorrowerPhone = true && that.isSetThirdBorrowerPhone();
    if (this_present_thirdBorrowerPhone || that_present_thirdBorrowerPhone) {
      if (!(this_present_thirdBorrowerPhone && that_present_thirdBorrowerPhone))
        return false;
      if (!this.thirdBorrowerPhone.equals(that.thirdBorrowerPhone))
        return false;
    }

    boolean this_present_thirdBorrowerAddress = true && this.isSetThirdBorrowerAddress();
    boolean that_present_thirdBorrowerAddress = true && that.isSetThirdBorrowerAddress();
    if (this_present_thirdBorrowerAddress || that_present_thirdBorrowerAddress) {
      if (!(this_present_thirdBorrowerAddress && that_present_thirdBorrowerAddress))
        return false;
      if (!this.thirdBorrowerAddress.equals(that.thirdBorrowerAddress))
        return false;
    }

    boolean this_present_foreAccount = true && this.isSetForeAccount();
    boolean that_present_foreAccount = true && that.isSetForeAccount();
    if (this_present_foreAccount || that_present_foreAccount) {
      if (!(this_present_foreAccount && that_present_foreAccount))
        return false;
      if (!this.foreAccount.equals(that.foreAccount))
        return false;
    }

    boolean this_present_newReceAccount = true && this.isSetNewReceAccount();
    boolean that_present_newReceAccount = true && that.isSetNewReceAccount();
    if (this_present_newReceAccount || that_present_newReceAccount) {
      if (!(this_present_newReceAccount && that_present_newReceAccount))
        return false;
      if (!this.newReceAccount.equals(that.newReceAccount))
        return false;
    }

    boolean this_present_newReceName = true && this.isSetNewReceName();
    boolean that_present_newReceName = true && that.isSetNewReceName();
    if (this_present_newReceName || that_present_newReceName) {
      if (!(this_present_newReceName && that_present_newReceName))
        return false;
      if (!this.newReceName.equals(that.newReceName))
        return false;
    }

    boolean this_present_newReceBank = true && this.isSetNewReceBank();
    boolean that_present_newReceBank = true && that.isSetNewReceBank();
    if (this_present_newReceBank || that_present_newReceBank) {
      if (!(this_present_newReceBank && that_present_newReceBank))
        return false;
      if (!this.newReceBank.equals(that.newReceBank))
        return false;
    }

    boolean this_present_supersionReceAccount = true && this.isSetSupersionReceAccount();
    boolean that_present_supersionReceAccount = true && that.isSetSupersionReceAccount();
    if (this_present_supersionReceAccount || that_present_supersionReceAccount) {
      if (!(this_present_supersionReceAccount && that_present_supersionReceAccount))
        return false;
      if (!this.supersionReceAccount.equals(that.supersionReceAccount))
        return false;
    }

    boolean this_present_supersionReceName = true && this.isSetSupersionReceName();
    boolean that_present_supersionReceName = true && that.isSetSupersionReceName();
    if (this_present_supersionReceName || that_present_supersionReceName) {
      if (!(this_present_supersionReceName && that_present_supersionReceName))
        return false;
      if (!this.supersionReceName.equals(that.supersionReceName))
        return false;
    }

    boolean this_present_supersionReceBank = true && this.isSetSupersionReceBank();
    boolean that_present_supersionReceBank = true && that.isSetSupersionReceBank();
    if (this_present_supersionReceBank || that_present_supersionReceBank) {
      if (!(this_present_supersionReceBank && that_present_supersionReceBank))
        return false;
      if (!this.supersionReceBank.equals(that.supersionReceBank))
        return false;
    }

    boolean this_present_oldLoanBankBranch = true && this.isSetOldLoanBankBranch();
    boolean that_present_oldLoanBankBranch = true && that.isSetOldLoanBankBranch();
    if (this_present_oldLoanBankBranch || that_present_oldLoanBankBranch) {
      if (!(this_present_oldLoanBankBranch && that_present_oldLoanBankBranch))
        return false;
      if (!this.oldLoanBankBranch.equals(that.oldLoanBankBranch))
        return false;
    }

    boolean this_present_newLoanBankBranch = true && this.isSetNewLoanBankBranch();
    boolean that_present_newLoanBankBranch = true && that.isSetNewLoanBankBranch();
    if (this_present_newLoanBankBranch || that_present_newLoanBankBranch) {
      if (!(this_present_newLoanBankBranch && that_present_newLoanBankBranch))
        return false;
      if (!this.newLoanBankBranch.equals(that.newLoanBankBranch))
        return false;
    }

    boolean this_present_superviseDepartmentBranch = true && this.isSetSuperviseDepartmentBranch();
    boolean that_present_superviseDepartmentBranch = true && that.isSetSuperviseDepartmentBranch();
    if (this_present_superviseDepartmentBranch || that_present_superviseDepartmentBranch) {
      if (!(this_present_superviseDepartmentBranch && that_present_superviseDepartmentBranch))
        return false;
      if (!this.superviseDepartmentBranch.equals(that.superviseDepartmentBranch))
        return false;
    }

    boolean this_present_oldBankStr = true && this.isSetOldBankStr();
    boolean that_present_oldBankStr = true && that.isSetOldBankStr();
    if (this_present_oldBankStr || that_present_oldBankStr) {
      if (!(this_present_oldBankStr && that_present_oldBankStr))
        return false;
      if (!this.oldBankStr.equals(that.oldBankStr))
        return false;
    }

    boolean this_present_oldBankBranchStr = true && this.isSetOldBankBranchStr();
    boolean that_present_oldBankBranchStr = true && that.isSetOldBankBranchStr();
    if (this_present_oldBankBranchStr || that_present_oldBankBranchStr) {
      if (!(this_present_oldBankBranchStr && that_present_oldBankBranchStr))
        return false;
      if (!this.oldBankBranchStr.equals(that.oldBankBranchStr))
        return false;
    }

    boolean this_present_newBankStr = true && this.isSetNewBankStr();
    boolean that_present_newBankStr = true && that.isSetNewBankStr();
    if (this_present_newBankStr || that_present_newBankStr) {
      if (!(this_present_newBankStr && that_present_newBankStr))
        return false;
      if (!this.newBankStr.equals(that.newBankStr))
        return false;
    }

    boolean this_present_newBankBranchStr = true && this.isSetNewBankBranchStr();
    boolean that_present_newBankBranchStr = true && that.isSetNewBankBranchStr();
    if (this_present_newBankBranchStr || that_present_newBankBranchStr) {
      if (!(this_present_newBankBranchStr && that_present_newBankBranchStr))
        return false;
      if (!this.newBankBranchStr.equals(that.newBankBranchStr))
        return false;
    }

    boolean this_present_superviseDepartmentStr = true && this.isSetSuperviseDepartmentStr();
    boolean that_present_superviseDepartmentStr = true && that.isSetSuperviseDepartmentStr();
    if (this_present_superviseDepartmentStr || that_present_superviseDepartmentStr) {
      if (!(this_present_superviseDepartmentStr && that_present_superviseDepartmentStr))
        return false;
      if (!this.superviseDepartmentStr.equals(that.superviseDepartmentStr))
        return false;
    }

    boolean this_present_superviseDepartmentBranchStr = true && this.isSetSuperviseDepartmentBranchStr();
    boolean that_present_superviseDepartmentBranchStr = true && that.isSetSuperviseDepartmentBranchStr();
    if (this_present_superviseDepartmentBranchStr || that_present_superviseDepartmentBranchStr) {
      if (!(this_present_superviseDepartmentBranchStr && that_present_superviseDepartmentBranchStr))
        return false;
      if (!this.superviseDepartmentBranchStr.equals(that.superviseDepartmentBranchStr))
        return false;
    }

    boolean this_present_accumulationFundBankStr = true && this.isSetAccumulationFundBankStr();
    boolean that_present_accumulationFundBankStr = true && that.isSetAccumulationFundBankStr();
    if (this_present_accumulationFundBankStr || that_present_accumulationFundBankStr) {
      if (!(this_present_accumulationFundBankStr && that_present_accumulationFundBankStr))
        return false;
      if (!this.accumulationFundBankStr.equals(that.accumulationFundBankStr))
        return false;
    }

    boolean this_present_newRecePerson = true && this.isSetNewRecePerson();
    boolean that_present_newRecePerson = true && that.isSetNewRecePerson();
    if (this_present_newRecePerson || that_present_newRecePerson) {
      if (!(this_present_newRecePerson && that_present_newRecePerson))
        return false;
      if (!this.newRecePerson.equals(that.newRecePerson))
        return false;
    }

    boolean this_present_idCardNumber = true && this.isSetIdCardNumber();
    boolean that_present_idCardNumber = true && that.isSetIdCardNumber();
    if (this_present_idCardNumber || that_present_idCardNumber) {
      if (!(this_present_idCardNumber && that_present_idCardNumber))
        return false;
      if (!this.idCardNumber.equals(that.idCardNumber))
        return false;
    }

    boolean this_present_downPayment = true;
    boolean that_present_downPayment = true;
    if (this_present_downPayment || that_present_downPayment) {
      if (!(this_present_downPayment && that_present_downPayment))
        return false;
      if (this.downPayment != that.downPayment)
        return false;
    }

    boolean this_present_turnoverCapitalName = true && this.isSetTurnoverCapitalName();
    boolean that_present_turnoverCapitalName = true && that.isSetTurnoverCapitalName();
    if (this_present_turnoverCapitalName || that_present_turnoverCapitalName) {
      if (!(this_present_turnoverCapitalName && that_present_turnoverCapitalName))
        return false;
      if (!this.turnoverCapitalName.equals(that.turnoverCapitalName))
        return false;
    }

    boolean this_present_turnoverCapitalAccount = true && this.isSetTurnoverCapitalAccount();
    boolean that_present_turnoverCapitalAccount = true && that.isSetTurnoverCapitalAccount();
    if (this_present_turnoverCapitalAccount || that_present_turnoverCapitalAccount) {
      if (!(this_present_turnoverCapitalAccount && that_present_turnoverCapitalAccount))
        return false;
      if (!this.turnoverCapitalAccount.equals(that.turnoverCapitalAccount))
        return false;
    }

    boolean this_present_turnoverCapitalBank = true && this.isSetTurnoverCapitalBank();
    boolean that_present_turnoverCapitalBank = true && that.isSetTurnoverCapitalBank();
    if (this_present_turnoverCapitalBank || that_present_turnoverCapitalBank) {
      if (!(this_present_turnoverCapitalBank && that_present_turnoverCapitalBank))
        return false;
      if (!this.turnoverCapitalBank.equals(that.turnoverCapitalBank))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_oldLoanBank = true && (isSetOldLoanBank());
    list.add(present_oldLoanBank);
    if (present_oldLoanBank)
      list.add(oldLoanBank);

    boolean present_oldLoanPerson = true && (isSetOldLoanPerson());
    list.add(present_oldLoanPerson);
    if (present_oldLoanPerson)
      list.add(oldLoanPerson);

    boolean present_oldLoanMoney = true;
    list.add(present_oldLoanMoney);
    if (present_oldLoanMoney)
      list.add(oldLoanMoney);

    boolean present_oldLoanPhone = true && (isSetOldLoanPhone());
    list.add(present_oldLoanPhone);
    if (present_oldLoanPhone)
      list.add(oldLoanPhone);

    boolean present_newLoanBank = true && (isSetNewLoanBank());
    list.add(present_newLoanBank);
    if (present_newLoanBank)
      list.add(newLoanBank);

    boolean present_newLoanPerson = true && (isSetNewLoanPerson());
    list.add(present_newLoanPerson);
    if (present_newLoanPerson)
      list.add(newLoanPerson);

    boolean present_newLoanMoney = true;
    list.add(present_newLoanMoney);
    if (present_newLoanMoney)
      list.add(newLoanMoney);

    boolean present_newLoanPhone = true && (isSetNewLoanPhone());
    list.add(present_newLoanPhone);
    if (present_newLoanPhone)
      list.add(newLoanPhone);

    boolean present_fundsMoney = true;
    list.add(present_fundsMoney);
    if (present_fundsMoney)
      list.add(fundsMoney);

    boolean present_superviseDepartment = true && (isSetSuperviseDepartment());
    list.add(present_superviseDepartment);
    if (present_superviseDepartment)
      list.add(superviseDepartment);

    boolean present_notarizationDate = true && (isSetNotarizationDate());
    list.add(present_notarizationDate);
    if (present_notarizationDate)
      list.add(notarizationDate);

    boolean present_signDate = true && (isSetSignDate());
    list.add(present_signDate);
    if (present_signDate)
      list.add(signDate);

    boolean present_paymentType = true;
    list.add(present_paymentType);
    if (present_paymentType)
      list.add(paymentType);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_accumulationFundBank = true && (isSetAccumulationFundBank());
    list.add(present_accumulationFundBank);
    if (present_accumulationFundBank)
      list.add(accumulationFundBank);

    boolean present_accumulationFundMoney = true;
    list.add(present_accumulationFundMoney);
    if (present_accumulationFundMoney)
      list.add(accumulationFundMoney);

    boolean present_loanDays = true;
    list.add(present_loanDays);
    if (present_loanDays)
      list.add(loanDays);

    boolean present_paymentName = true && (isSetPaymentName());
    list.add(present_paymentName);
    if (present_paymentName)
      list.add(paymentName);

    boolean present_paymentAccount = true && (isSetPaymentAccount());
    list.add(present_paymentAccount);
    if (present_paymentAccount)
      list.add(paymentAccount);

    boolean present_overdueDays = true;
    list.add(present_overdueDays);
    if (present_overdueDays)
      list.add(overdueDays);

    boolean present_overdueRate = true;
    list.add(present_overdueRate);
    if (present_overdueRate)
      list.add(overdueRate);

    boolean present_overdueFee = true;
    list.add(present_overdueFee);
    if (present_overdueFee)
      list.add(overdueFee);

    boolean present_extensionDays = true;
    list.add(present_extensionDays);
    if (present_extensionDays)
      list.add(extensionDays);

    boolean present_extensionRate = true;
    list.add(present_extensionRate);
    if (present_extensionRate)
      list.add(extensionRate);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_paymentDate = true && (isSetPaymentDate());
    list.add(present_paymentDate);
    if (present_paymentDate)
      list.add(paymentDate);

    boolean present_receDate = true && (isSetReceDate());
    list.add(present_receDate);
    if (present_receDate)
      list.add(receDate);

    boolean present_oldOwedAmount = true;
    list.add(present_oldOwedAmount);
    if (present_oldOwedAmount)
      list.add(oldOwedAmount);

    boolean present_oldLoanTime = true && (isSetOldLoanTime());
    list.add(present_oldLoanTime);
    if (present_oldLoanTime)
      list.add(oldLoanTime);

    boolean present_superviseAccount = true && (isSetSuperviseAccount());
    list.add(present_superviseAccount);
    if (present_superviseAccount)
      list.add(superviseAccount);

    boolean present_thirdBorrower = true && (isSetThirdBorrower());
    list.add(present_thirdBorrower);
    if (present_thirdBorrower)
      list.add(thirdBorrower);

    boolean present_thirdBorrowerCard = true && (isSetThirdBorrowerCard());
    list.add(present_thirdBorrowerCard);
    if (present_thirdBorrowerCard)
      list.add(thirdBorrowerCard);

    boolean present_thirdBorrowerPhone = true && (isSetThirdBorrowerPhone());
    list.add(present_thirdBorrowerPhone);
    if (present_thirdBorrowerPhone)
      list.add(thirdBorrowerPhone);

    boolean present_thirdBorrowerAddress = true && (isSetThirdBorrowerAddress());
    list.add(present_thirdBorrowerAddress);
    if (present_thirdBorrowerAddress)
      list.add(thirdBorrowerAddress);

    boolean present_foreAccount = true && (isSetForeAccount());
    list.add(present_foreAccount);
    if (present_foreAccount)
      list.add(foreAccount);

    boolean present_newReceAccount = true && (isSetNewReceAccount());
    list.add(present_newReceAccount);
    if (present_newReceAccount)
      list.add(newReceAccount);

    boolean present_newReceName = true && (isSetNewReceName());
    list.add(present_newReceName);
    if (present_newReceName)
      list.add(newReceName);

    boolean present_newReceBank = true && (isSetNewReceBank());
    list.add(present_newReceBank);
    if (present_newReceBank)
      list.add(newReceBank);

    boolean present_supersionReceAccount = true && (isSetSupersionReceAccount());
    list.add(present_supersionReceAccount);
    if (present_supersionReceAccount)
      list.add(supersionReceAccount);

    boolean present_supersionReceName = true && (isSetSupersionReceName());
    list.add(present_supersionReceName);
    if (present_supersionReceName)
      list.add(supersionReceName);

    boolean present_supersionReceBank = true && (isSetSupersionReceBank());
    list.add(present_supersionReceBank);
    if (present_supersionReceBank)
      list.add(supersionReceBank);

    boolean present_oldLoanBankBranch = true && (isSetOldLoanBankBranch());
    list.add(present_oldLoanBankBranch);
    if (present_oldLoanBankBranch)
      list.add(oldLoanBankBranch);

    boolean present_newLoanBankBranch = true && (isSetNewLoanBankBranch());
    list.add(present_newLoanBankBranch);
    if (present_newLoanBankBranch)
      list.add(newLoanBankBranch);

    boolean present_superviseDepartmentBranch = true && (isSetSuperviseDepartmentBranch());
    list.add(present_superviseDepartmentBranch);
    if (present_superviseDepartmentBranch)
      list.add(superviseDepartmentBranch);

    boolean present_oldBankStr = true && (isSetOldBankStr());
    list.add(present_oldBankStr);
    if (present_oldBankStr)
      list.add(oldBankStr);

    boolean present_oldBankBranchStr = true && (isSetOldBankBranchStr());
    list.add(present_oldBankBranchStr);
    if (present_oldBankBranchStr)
      list.add(oldBankBranchStr);

    boolean present_newBankStr = true && (isSetNewBankStr());
    list.add(present_newBankStr);
    if (present_newBankStr)
      list.add(newBankStr);

    boolean present_newBankBranchStr = true && (isSetNewBankBranchStr());
    list.add(present_newBankBranchStr);
    if (present_newBankBranchStr)
      list.add(newBankBranchStr);

    boolean present_superviseDepartmentStr = true && (isSetSuperviseDepartmentStr());
    list.add(present_superviseDepartmentStr);
    if (present_superviseDepartmentStr)
      list.add(superviseDepartmentStr);

    boolean present_superviseDepartmentBranchStr = true && (isSetSuperviseDepartmentBranchStr());
    list.add(present_superviseDepartmentBranchStr);
    if (present_superviseDepartmentBranchStr)
      list.add(superviseDepartmentBranchStr);

    boolean present_accumulationFundBankStr = true && (isSetAccumulationFundBankStr());
    list.add(present_accumulationFundBankStr);
    if (present_accumulationFundBankStr)
      list.add(accumulationFundBankStr);

    boolean present_newRecePerson = true && (isSetNewRecePerson());
    list.add(present_newRecePerson);
    if (present_newRecePerson)
      list.add(newRecePerson);

    boolean present_idCardNumber = true && (isSetIdCardNumber());
    list.add(present_idCardNumber);
    if (present_idCardNumber)
      list.add(idCardNumber);

    boolean present_downPayment = true;
    list.add(present_downPayment);
    if (present_downPayment)
      list.add(downPayment);

    boolean present_turnoverCapitalName = true && (isSetTurnoverCapitalName());
    list.add(present_turnoverCapitalName);
    if (present_turnoverCapitalName)
      list.add(turnoverCapitalName);

    boolean present_turnoverCapitalAccount = true && (isSetTurnoverCapitalAccount());
    list.add(present_turnoverCapitalAccount);
    if (present_turnoverCapitalAccount)
      list.add(turnoverCapitalAccount);

    boolean present_turnoverCapitalBank = true && (isSetTurnoverCapitalBank());
    list.add(present_turnoverCapitalBank);
    if (present_turnoverCapitalBank)
      list.add(turnoverCapitalBank);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectForeclosure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanBank()).compareTo(other.isSetOldLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanBank, other.oldLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanPerson()).compareTo(other.isSetOldLoanPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanPerson, other.oldLoanPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanMoney()).compareTo(other.isSetOldLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanMoney, other.oldLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanPhone()).compareTo(other.isSetOldLoanPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanPhone, other.oldLoanPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanBank()).compareTo(other.isSetNewLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanBank, other.newLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanPerson()).compareTo(other.isSetNewLoanPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanPerson, other.newLoanPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanMoney()).compareTo(other.isSetNewLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanMoney, other.newLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanPhone()).compareTo(other.isSetNewLoanPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanPhone, other.newLoanPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundsMoney()).compareTo(other.isSetFundsMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundsMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundsMoney, other.fundsMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperviseDepartment()).compareTo(other.isSetSuperviseDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperviseDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superviseDepartment, other.superviseDepartment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizationDate()).compareTo(other.isSetNotarizationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizationDate, other.notarizationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignDate()).compareTo(other.isSetSignDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signDate, other.signDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentType()).compareTo(other.isSetPaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentType, other.paymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccumulationFundBank()).compareTo(other.isSetAccumulationFundBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccumulationFundBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accumulationFundBank, other.accumulationFundBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccumulationFundMoney()).compareTo(other.isSetAccumulationFundMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccumulationFundMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accumulationFundMoney, other.accumulationFundMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDays()).compareTo(other.isSetLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDays, other.loanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentName()).compareTo(other.isSetPaymentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentName, other.paymentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAccount()).compareTo(other.isSetPaymentAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAccount, other.paymentAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDays()).compareTo(other.isSetOverdueDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDays, other.overdueDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueRate()).compareTo(other.isSetOverdueRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueRate, other.overdueRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFee()).compareTo(other.isSetOverdueFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFee, other.overdueFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDays()).compareTo(other.isSetExtensionDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDays, other.extensionDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionRate()).compareTo(other.isSetExtensionRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionRate, other.extensionRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentDate()).compareTo(other.isSetPaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDate, other.paymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceDate()).compareTo(other.isSetReceDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receDate, other.receDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldOwedAmount()).compareTo(other.isSetOldOwedAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldOwedAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldOwedAmount, other.oldOwedAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanTime()).compareTo(other.isSetOldLoanTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanTime, other.oldLoanTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperviseAccount()).compareTo(other.isSetSuperviseAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperviseAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superviseAccount, other.superviseAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdBorrower()).compareTo(other.isSetThirdBorrower());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdBorrower()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdBorrower, other.thirdBorrower);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdBorrowerCard()).compareTo(other.isSetThirdBorrowerCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdBorrowerCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdBorrowerCard, other.thirdBorrowerCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdBorrowerPhone()).compareTo(other.isSetThirdBorrowerPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdBorrowerPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdBorrowerPhone, other.thirdBorrowerPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdBorrowerAddress()).compareTo(other.isSetThirdBorrowerAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdBorrowerAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdBorrowerAddress, other.thirdBorrowerAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeAccount()).compareTo(other.isSetForeAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreAccount, other.foreAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewReceAccount()).compareTo(other.isSetNewReceAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewReceAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newReceAccount, other.newReceAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewReceName()).compareTo(other.isSetNewReceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewReceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newReceName, other.newReceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewReceBank()).compareTo(other.isSetNewReceBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewReceBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newReceBank, other.newReceBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupersionReceAccount()).compareTo(other.isSetSupersionReceAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupersionReceAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supersionReceAccount, other.supersionReceAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupersionReceName()).compareTo(other.isSetSupersionReceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupersionReceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supersionReceName, other.supersionReceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupersionReceBank()).compareTo(other.isSetSupersionReceBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupersionReceBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supersionReceBank, other.supersionReceBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanBankBranch()).compareTo(other.isSetOldLoanBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanBankBranch, other.oldLoanBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanBankBranch()).compareTo(other.isSetNewLoanBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanBankBranch, other.newLoanBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperviseDepartmentBranch()).compareTo(other.isSetSuperviseDepartmentBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperviseDepartmentBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superviseDepartmentBranch, other.superviseDepartmentBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldBankStr()).compareTo(other.isSetOldBankStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldBankStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldBankStr, other.oldBankStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldBankBranchStr()).compareTo(other.isSetOldBankBranchStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldBankBranchStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldBankBranchStr, other.oldBankBranchStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewBankStr()).compareTo(other.isSetNewBankStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewBankStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newBankStr, other.newBankStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewBankBranchStr()).compareTo(other.isSetNewBankBranchStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewBankBranchStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newBankBranchStr, other.newBankBranchStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperviseDepartmentStr()).compareTo(other.isSetSuperviseDepartmentStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperviseDepartmentStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superviseDepartmentStr, other.superviseDepartmentStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperviseDepartmentBranchStr()).compareTo(other.isSetSuperviseDepartmentBranchStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperviseDepartmentBranchStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superviseDepartmentBranchStr, other.superviseDepartmentBranchStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccumulationFundBankStr()).compareTo(other.isSetAccumulationFundBankStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccumulationFundBankStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accumulationFundBankStr, other.accumulationFundBankStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewRecePerson()).compareTo(other.isSetNewRecePerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewRecePerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newRecePerson, other.newRecePerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCardNumber()).compareTo(other.isSetIdCardNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCardNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCardNumber, other.idCardNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownPayment()).compareTo(other.isSetDownPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downPayment, other.downPayment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnoverCapitalName()).compareTo(other.isSetTurnoverCapitalName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnoverCapitalName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverCapitalName, other.turnoverCapitalName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnoverCapitalAccount()).compareTo(other.isSetTurnoverCapitalAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnoverCapitalAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverCapitalAccount, other.turnoverCapitalAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnoverCapitalBank()).compareTo(other.isSetTurnoverCapitalBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnoverCapitalBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnoverCapitalBank, other.turnoverCapitalBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectForeclosure(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanBank:");
    if (this.oldLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanPerson:");
    if (this.oldLoanPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanMoney:");
    sb.append(this.oldLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanPhone:");
    if (this.oldLoanPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanBank:");
    if (this.newLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanPerson:");
    if (this.newLoanPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanMoney:");
    sb.append(this.newLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanPhone:");
    if (this.newLoanPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundsMoney:");
    sb.append(this.fundsMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superviseDepartment:");
    if (this.superviseDepartment == null) {
      sb.append("null");
    } else {
      sb.append(this.superviseDepartment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizationDate:");
    if (this.notarizationDate == null) {
      sb.append("null");
    } else {
      sb.append(this.notarizationDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signDate:");
    if (this.signDate == null) {
      sb.append("null");
    } else {
      sb.append(this.signDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentType:");
    sb.append(this.paymentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accumulationFundBank:");
    if (this.accumulationFundBank == null) {
      sb.append("null");
    } else {
      sb.append(this.accumulationFundBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accumulationFundMoney:");
    sb.append(this.accumulationFundMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDays:");
    sb.append(this.loanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentName:");
    if (this.paymentName == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAccount:");
    if (this.paymentAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDays:");
    sb.append(this.overdueDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueRate:");
    sb.append(this.overdueRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFee:");
    sb.append(this.overdueFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDays:");
    sb.append(this.extensionDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionRate:");
    sb.append(this.extensionRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentDate:");
    if (this.paymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receDate:");
    if (this.receDate == null) {
      sb.append("null");
    } else {
      sb.append(this.receDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldOwedAmount:");
    sb.append(this.oldOwedAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanTime:");
    if (this.oldLoanTime == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superviseAccount:");
    if (this.superviseAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.superviseAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdBorrower:");
    if (this.thirdBorrower == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdBorrower);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdBorrowerCard:");
    if (this.thirdBorrowerCard == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdBorrowerCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdBorrowerPhone:");
    if (this.thirdBorrowerPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdBorrowerPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdBorrowerAddress:");
    if (this.thirdBorrowerAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdBorrowerAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreAccount:");
    if (this.foreAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.foreAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newReceAccount:");
    if (this.newReceAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.newReceAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newReceName:");
    if (this.newReceName == null) {
      sb.append("null");
    } else {
      sb.append(this.newReceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newReceBank:");
    if (this.newReceBank == null) {
      sb.append("null");
    } else {
      sb.append(this.newReceBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supersionReceAccount:");
    if (this.supersionReceAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.supersionReceAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supersionReceName:");
    if (this.supersionReceName == null) {
      sb.append("null");
    } else {
      sb.append(this.supersionReceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supersionReceBank:");
    if (this.supersionReceBank == null) {
      sb.append("null");
    } else {
      sb.append(this.supersionReceBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanBankBranch:");
    if (this.oldLoanBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanBankBranch:");
    if (this.newLoanBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superviseDepartmentBranch:");
    if (this.superviseDepartmentBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.superviseDepartmentBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldBankStr:");
    if (this.oldBankStr == null) {
      sb.append("null");
    } else {
      sb.append(this.oldBankStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldBankBranchStr:");
    if (this.oldBankBranchStr == null) {
      sb.append("null");
    } else {
      sb.append(this.oldBankBranchStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newBankStr:");
    if (this.newBankStr == null) {
      sb.append("null");
    } else {
      sb.append(this.newBankStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newBankBranchStr:");
    if (this.newBankBranchStr == null) {
      sb.append("null");
    } else {
      sb.append(this.newBankBranchStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superviseDepartmentStr:");
    if (this.superviseDepartmentStr == null) {
      sb.append("null");
    } else {
      sb.append(this.superviseDepartmentStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superviseDepartmentBranchStr:");
    if (this.superviseDepartmentBranchStr == null) {
      sb.append("null");
    } else {
      sb.append(this.superviseDepartmentBranchStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accumulationFundBankStr:");
    if (this.accumulationFundBankStr == null) {
      sb.append("null");
    } else {
      sb.append(this.accumulationFundBankStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newRecePerson:");
    if (this.newRecePerson == null) {
      sb.append("null");
    } else {
      sb.append(this.newRecePerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCardNumber:");
    if (this.idCardNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.idCardNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downPayment:");
    sb.append(this.downPayment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnoverCapitalName:");
    if (this.turnoverCapitalName == null) {
      sb.append("null");
    } else {
      sb.append(this.turnoverCapitalName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnoverCapitalAccount:");
    if (this.turnoverCapitalAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.turnoverCapitalAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnoverCapitalBank:");
    if (this.turnoverCapitalBank == null) {
      sb.append("null");
    } else {
      sb.append(this.turnoverCapitalBank);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectForeclosureStandardSchemeFactory implements SchemeFactory {
    public ProjectForeclosureStandardScheme getScheme() {
      return new ProjectForeclosureStandardScheme();
    }
  }

  private static class ProjectForeclosureStandardScheme extends StandardScheme<ProjectForeclosure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectForeclosure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OLD_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanBank = iprot.readString();
              struct.setOldLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OLD_LOAN_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanPerson = iprot.readString();
              struct.setOldLoanPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OLD_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldLoanMoney = iprot.readDouble();
              struct.setOldLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OLD_LOAN_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanPhone = iprot.readString();
              struct.setOldLoanPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEW_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanBank = iprot.readString();
              struct.setNewLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEW_LOAN_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanPerson = iprot.readString();
              struct.setNewLoanPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NEW_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.newLoanMoney = iprot.readDouble();
              struct.setNewLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NEW_LOAN_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanPhone = iprot.readString();
              struct.setNewLoanPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FUNDS_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundsMoney = iprot.readDouble();
              struct.setFundsMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SUPERVISE_DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superviseDepartment = iprot.readString();
              struct.setSuperviseDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NOTARIZATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notarizationDate = iprot.readString();
              struct.setNotarizationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SIGN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signDate = iprot.readString();
              struct.setSignDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentType = iprot.readI32();
              struct.setPaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ACCUMULATION_FUND_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accumulationFundBank = iprot.readString();
              struct.setAccumulationFundBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACCUMULATION_FUND_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accumulationFundMoney = iprot.readDouble();
              struct.setAccumulationFundMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanDays = iprot.readI32();
              struct.setLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAYMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentName = iprot.readString();
              struct.setPaymentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PAYMENT_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAccount = iprot.readString();
              struct.setPaymentAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // OVERDUE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDays = iprot.readI32();
              struct.setOverdueDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OVERDUE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueRate = iprot.readDouble();
              struct.setOverdueRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // OVERDUE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFee = iprot.readDouble();
              struct.setOverdueFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EXTENSION_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionDays = iprot.readI32();
              struct.setExtensionDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // EXTENSION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionRate = iprot.readDouble();
              struct.setExtensionRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentDate = iprot.readString();
              struct.setPaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // RECE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receDate = iprot.readString();
              struct.setReceDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OLD_OWED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldOwedAmount = iprot.readDouble();
              struct.setOldOwedAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // OLD_LOAN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanTime = iprot.readString();
              struct.setOldLoanTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // SUPERVISE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superviseAccount = iprot.readString();
              struct.setSuperviseAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // THIRD_BORROWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdBorrower = iprot.readString();
              struct.setThirdBorrowerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // THIRD_BORROWER_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdBorrowerCard = iprot.readString();
              struct.setThirdBorrowerCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // THIRD_BORROWER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdBorrowerPhone = iprot.readString();
              struct.setThirdBorrowerPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // THIRD_BORROWER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdBorrowerAddress = iprot.readString();
              struct.setThirdBorrowerAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // FORE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreAccount = iprot.readString();
              struct.setForeAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // NEW_RECE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newReceAccount = iprot.readString();
              struct.setNewReceAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // NEW_RECE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newReceName = iprot.readString();
              struct.setNewReceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // NEW_RECE_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newReceBank = iprot.readString();
              struct.setNewReceBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // SUPERSION_RECE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supersionReceAccount = iprot.readString();
              struct.setSupersionReceAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SUPERSION_RECE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supersionReceName = iprot.readString();
              struct.setSupersionReceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // SUPERSION_RECE_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supersionReceBank = iprot.readString();
              struct.setSupersionReceBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // OLD_LOAN_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanBankBranch = iprot.readString();
              struct.setOldLoanBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // NEW_LOAN_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanBankBranch = iprot.readString();
              struct.setNewLoanBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // SUPERVISE_DEPARTMENT_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superviseDepartmentBranch = iprot.readString();
              struct.setSuperviseDepartmentBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // OLD_BANK_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldBankStr = iprot.readString();
              struct.setOldBankStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // OLD_BANK_BRANCH_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldBankBranchStr = iprot.readString();
              struct.setOldBankBranchStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // NEW_BANK_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newBankStr = iprot.readString();
              struct.setNewBankStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // NEW_BANK_BRANCH_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newBankBranchStr = iprot.readString();
              struct.setNewBankBranchStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // SUPERVISE_DEPARTMENT_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superviseDepartmentStr = iprot.readString();
              struct.setSuperviseDepartmentStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // SUPERVISE_DEPARTMENT_BRANCH_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superviseDepartmentBranchStr = iprot.readString();
              struct.setSuperviseDepartmentBranchStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // ACCUMULATION_FUND_BANK_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accumulationFundBankStr = iprot.readString();
              struct.setAccumulationFundBankStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // NEW_RECE_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newRecePerson = iprot.readString();
              struct.setNewRecePersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // ID_CARD_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCardNumber = iprot.readString();
              struct.setIdCardNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // DOWN_PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.downPayment = iprot.readDouble();
              struct.setDownPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // TURNOVER_CAPITAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.turnoverCapitalName = iprot.readString();
              struct.setTurnoverCapitalNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // TURNOVER_CAPITAL_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.turnoverCapitalAccount = iprot.readString();
              struct.setTurnoverCapitalAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // TURNOVER_CAPITAL_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.turnoverCapitalBank = iprot.readString();
              struct.setTurnoverCapitalBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectForeclosure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.oldLoanBank != null) {
        oprot.writeFieldBegin(OLD_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.oldLoanBank);
        oprot.writeFieldEnd();
      }
      if (struct.oldLoanPerson != null) {
        oprot.writeFieldBegin(OLD_LOAN_PERSON_FIELD_DESC);
        oprot.writeString(struct.oldLoanPerson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OLD_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oldLoanMoney);
      oprot.writeFieldEnd();
      if (struct.oldLoanPhone != null) {
        oprot.writeFieldBegin(OLD_LOAN_PHONE_FIELD_DESC);
        oprot.writeString(struct.oldLoanPhone);
        oprot.writeFieldEnd();
      }
      if (struct.newLoanBank != null) {
        oprot.writeFieldBegin(NEW_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.newLoanBank);
        oprot.writeFieldEnd();
      }
      if (struct.newLoanPerson != null) {
        oprot.writeFieldBegin(NEW_LOAN_PERSON_FIELD_DESC);
        oprot.writeString(struct.newLoanPerson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEW_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.newLoanMoney);
      oprot.writeFieldEnd();
      if (struct.newLoanPhone != null) {
        oprot.writeFieldBegin(NEW_LOAN_PHONE_FIELD_DESC);
        oprot.writeString(struct.newLoanPhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUNDS_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.fundsMoney);
      oprot.writeFieldEnd();
      if (struct.superviseDepartment != null) {
        oprot.writeFieldBegin(SUPERVISE_DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.superviseDepartment);
        oprot.writeFieldEnd();
      }
      if (struct.notarizationDate != null) {
        oprot.writeFieldBegin(NOTARIZATION_DATE_FIELD_DESC);
        oprot.writeString(struct.notarizationDate);
        oprot.writeFieldEnd();
      }
      if (struct.signDate != null) {
        oprot.writeFieldBegin(SIGN_DATE_FIELD_DESC);
        oprot.writeString(struct.signDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.paymentType);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.accumulationFundBank != null) {
        oprot.writeFieldBegin(ACCUMULATION_FUND_BANK_FIELD_DESC);
        oprot.writeString(struct.accumulationFundBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCUMULATION_FUND_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.accumulationFundMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.loanDays);
      oprot.writeFieldEnd();
      if (struct.paymentName != null) {
        oprot.writeFieldBegin(PAYMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.paymentName);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAccount != null) {
        oprot.writeFieldBegin(PAYMENT_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.paymentAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.overdueDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.overdueRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_DAYS_FIELD_DESC);
      oprot.writeI32(struct.extensionDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_RATE_FIELD_DESC);
      oprot.writeDouble(struct.extensionRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      if (struct.paymentDate != null) {
        oprot.writeFieldBegin(PAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.paymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.receDate != null) {
        oprot.writeFieldBegin(RECE_DATE_FIELD_DESC);
        oprot.writeString(struct.receDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OLD_OWED_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.oldOwedAmount);
      oprot.writeFieldEnd();
      if (struct.oldLoanTime != null) {
        oprot.writeFieldBegin(OLD_LOAN_TIME_FIELD_DESC);
        oprot.writeString(struct.oldLoanTime);
        oprot.writeFieldEnd();
      }
      if (struct.superviseAccount != null) {
        oprot.writeFieldBegin(SUPERVISE_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.superviseAccount);
        oprot.writeFieldEnd();
      }
      if (struct.thirdBorrower != null) {
        oprot.writeFieldBegin(THIRD_BORROWER_FIELD_DESC);
        oprot.writeString(struct.thirdBorrower);
        oprot.writeFieldEnd();
      }
      if (struct.thirdBorrowerCard != null) {
        oprot.writeFieldBegin(THIRD_BORROWER_CARD_FIELD_DESC);
        oprot.writeString(struct.thirdBorrowerCard);
        oprot.writeFieldEnd();
      }
      if (struct.thirdBorrowerPhone != null) {
        oprot.writeFieldBegin(THIRD_BORROWER_PHONE_FIELD_DESC);
        oprot.writeString(struct.thirdBorrowerPhone);
        oprot.writeFieldEnd();
      }
      if (struct.thirdBorrowerAddress != null) {
        oprot.writeFieldBegin(THIRD_BORROWER_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.thirdBorrowerAddress);
        oprot.writeFieldEnd();
      }
      if (struct.foreAccount != null) {
        oprot.writeFieldBegin(FORE_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.foreAccount);
        oprot.writeFieldEnd();
      }
      if (struct.newReceAccount != null) {
        oprot.writeFieldBegin(NEW_RECE_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.newReceAccount);
        oprot.writeFieldEnd();
      }
      if (struct.newReceName != null) {
        oprot.writeFieldBegin(NEW_RECE_NAME_FIELD_DESC);
        oprot.writeString(struct.newReceName);
        oprot.writeFieldEnd();
      }
      if (struct.newReceBank != null) {
        oprot.writeFieldBegin(NEW_RECE_BANK_FIELD_DESC);
        oprot.writeString(struct.newReceBank);
        oprot.writeFieldEnd();
      }
      if (struct.supersionReceAccount != null) {
        oprot.writeFieldBegin(SUPERSION_RECE_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.supersionReceAccount);
        oprot.writeFieldEnd();
      }
      if (struct.supersionReceName != null) {
        oprot.writeFieldBegin(SUPERSION_RECE_NAME_FIELD_DESC);
        oprot.writeString(struct.supersionReceName);
        oprot.writeFieldEnd();
      }
      if (struct.supersionReceBank != null) {
        oprot.writeFieldBegin(SUPERSION_RECE_BANK_FIELD_DESC);
        oprot.writeString(struct.supersionReceBank);
        oprot.writeFieldEnd();
      }
      if (struct.oldLoanBankBranch != null) {
        oprot.writeFieldBegin(OLD_LOAN_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.oldLoanBankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.newLoanBankBranch != null) {
        oprot.writeFieldBegin(NEW_LOAN_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.newLoanBankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.superviseDepartmentBranch != null) {
        oprot.writeFieldBegin(SUPERVISE_DEPARTMENT_BRANCH_FIELD_DESC);
        oprot.writeString(struct.superviseDepartmentBranch);
        oprot.writeFieldEnd();
      }
      if (struct.oldBankStr != null) {
        oprot.writeFieldBegin(OLD_BANK_STR_FIELD_DESC);
        oprot.writeString(struct.oldBankStr);
        oprot.writeFieldEnd();
      }
      if (struct.oldBankBranchStr != null) {
        oprot.writeFieldBegin(OLD_BANK_BRANCH_STR_FIELD_DESC);
        oprot.writeString(struct.oldBankBranchStr);
        oprot.writeFieldEnd();
      }
      if (struct.newBankStr != null) {
        oprot.writeFieldBegin(NEW_BANK_STR_FIELD_DESC);
        oprot.writeString(struct.newBankStr);
        oprot.writeFieldEnd();
      }
      if (struct.newBankBranchStr != null) {
        oprot.writeFieldBegin(NEW_BANK_BRANCH_STR_FIELD_DESC);
        oprot.writeString(struct.newBankBranchStr);
        oprot.writeFieldEnd();
      }
      if (struct.superviseDepartmentStr != null) {
        oprot.writeFieldBegin(SUPERVISE_DEPARTMENT_STR_FIELD_DESC);
        oprot.writeString(struct.superviseDepartmentStr);
        oprot.writeFieldEnd();
      }
      if (struct.superviseDepartmentBranchStr != null) {
        oprot.writeFieldBegin(SUPERVISE_DEPARTMENT_BRANCH_STR_FIELD_DESC);
        oprot.writeString(struct.superviseDepartmentBranchStr);
        oprot.writeFieldEnd();
      }
      if (struct.accumulationFundBankStr != null) {
        oprot.writeFieldBegin(ACCUMULATION_FUND_BANK_STR_FIELD_DESC);
        oprot.writeString(struct.accumulationFundBankStr);
        oprot.writeFieldEnd();
      }
      if (struct.newRecePerson != null) {
        oprot.writeFieldBegin(NEW_RECE_PERSON_FIELD_DESC);
        oprot.writeString(struct.newRecePerson);
        oprot.writeFieldEnd();
      }
      if (struct.idCardNumber != null) {
        oprot.writeFieldBegin(ID_CARD_NUMBER_FIELD_DESC);
        oprot.writeString(struct.idCardNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOWN_PAYMENT_FIELD_DESC);
      oprot.writeDouble(struct.downPayment);
      oprot.writeFieldEnd();
      if (struct.turnoverCapitalName != null) {
        oprot.writeFieldBegin(TURNOVER_CAPITAL_NAME_FIELD_DESC);
        oprot.writeString(struct.turnoverCapitalName);
        oprot.writeFieldEnd();
      }
      if (struct.turnoverCapitalAccount != null) {
        oprot.writeFieldBegin(TURNOVER_CAPITAL_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.turnoverCapitalAccount);
        oprot.writeFieldEnd();
      }
      if (struct.turnoverCapitalBank != null) {
        oprot.writeFieldBegin(TURNOVER_CAPITAL_BANK_FIELD_DESC);
        oprot.writeString(struct.turnoverCapitalBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectForeclosureTupleSchemeFactory implements SchemeFactory {
    public ProjectForeclosureTupleScheme getScheme() {
      return new ProjectForeclosureTupleScheme();
    }
  }

  private static class ProjectForeclosureTupleScheme extends TupleScheme<ProjectForeclosure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectForeclosure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetOldLoanBank()) {
        optionals.set(2);
      }
      if (struct.isSetOldLoanPerson()) {
        optionals.set(3);
      }
      if (struct.isSetOldLoanMoney()) {
        optionals.set(4);
      }
      if (struct.isSetOldLoanPhone()) {
        optionals.set(5);
      }
      if (struct.isSetNewLoanBank()) {
        optionals.set(6);
      }
      if (struct.isSetNewLoanPerson()) {
        optionals.set(7);
      }
      if (struct.isSetNewLoanMoney()) {
        optionals.set(8);
      }
      if (struct.isSetNewLoanPhone()) {
        optionals.set(9);
      }
      if (struct.isSetFundsMoney()) {
        optionals.set(10);
      }
      if (struct.isSetSuperviseDepartment()) {
        optionals.set(11);
      }
      if (struct.isSetNotarizationDate()) {
        optionals.set(12);
      }
      if (struct.isSetSignDate()) {
        optionals.set(13);
      }
      if (struct.isSetPaymentType()) {
        optionals.set(14);
      }
      if (struct.isSetRemark()) {
        optionals.set(15);
      }
      if (struct.isSetAccumulationFundBank()) {
        optionals.set(16);
      }
      if (struct.isSetAccumulationFundMoney()) {
        optionals.set(17);
      }
      if (struct.isSetLoanDays()) {
        optionals.set(18);
      }
      if (struct.isSetPaymentName()) {
        optionals.set(19);
      }
      if (struct.isSetPaymentAccount()) {
        optionals.set(20);
      }
      if (struct.isSetOverdueDays()) {
        optionals.set(21);
      }
      if (struct.isSetOverdueRate()) {
        optionals.set(22);
      }
      if (struct.isSetOverdueFee()) {
        optionals.set(23);
      }
      if (struct.isSetExtensionDays()) {
        optionals.set(24);
      }
      if (struct.isSetExtensionRate()) {
        optionals.set(25);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(26);
      }
      if (struct.isSetPaymentDate()) {
        optionals.set(27);
      }
      if (struct.isSetReceDate()) {
        optionals.set(28);
      }
      if (struct.isSetOldOwedAmount()) {
        optionals.set(29);
      }
      if (struct.isSetOldLoanTime()) {
        optionals.set(30);
      }
      if (struct.isSetSuperviseAccount()) {
        optionals.set(31);
      }
      if (struct.isSetThirdBorrower()) {
        optionals.set(32);
      }
      if (struct.isSetThirdBorrowerCard()) {
        optionals.set(33);
      }
      if (struct.isSetThirdBorrowerPhone()) {
        optionals.set(34);
      }
      if (struct.isSetThirdBorrowerAddress()) {
        optionals.set(35);
      }
      if (struct.isSetForeAccount()) {
        optionals.set(36);
      }
      if (struct.isSetNewReceAccount()) {
        optionals.set(37);
      }
      if (struct.isSetNewReceName()) {
        optionals.set(38);
      }
      if (struct.isSetNewReceBank()) {
        optionals.set(39);
      }
      if (struct.isSetSupersionReceAccount()) {
        optionals.set(40);
      }
      if (struct.isSetSupersionReceName()) {
        optionals.set(41);
      }
      if (struct.isSetSupersionReceBank()) {
        optionals.set(42);
      }
      if (struct.isSetOldLoanBankBranch()) {
        optionals.set(43);
      }
      if (struct.isSetNewLoanBankBranch()) {
        optionals.set(44);
      }
      if (struct.isSetSuperviseDepartmentBranch()) {
        optionals.set(45);
      }
      if (struct.isSetOldBankStr()) {
        optionals.set(46);
      }
      if (struct.isSetOldBankBranchStr()) {
        optionals.set(47);
      }
      if (struct.isSetNewBankStr()) {
        optionals.set(48);
      }
      if (struct.isSetNewBankBranchStr()) {
        optionals.set(49);
      }
      if (struct.isSetSuperviseDepartmentStr()) {
        optionals.set(50);
      }
      if (struct.isSetSuperviseDepartmentBranchStr()) {
        optionals.set(51);
      }
      if (struct.isSetAccumulationFundBankStr()) {
        optionals.set(52);
      }
      if (struct.isSetNewRecePerson()) {
        optionals.set(53);
      }
      if (struct.isSetIdCardNumber()) {
        optionals.set(54);
      }
      if (struct.isSetDownPayment()) {
        optionals.set(55);
      }
      if (struct.isSetTurnoverCapitalName()) {
        optionals.set(56);
      }
      if (struct.isSetTurnoverCapitalAccount()) {
        optionals.set(57);
      }
      if (struct.isSetTurnoverCapitalBank()) {
        optionals.set(58);
      }
      oprot.writeBitSet(optionals, 59);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetOldLoanBank()) {
        oprot.writeString(struct.oldLoanBank);
      }
      if (struct.isSetOldLoanPerson()) {
        oprot.writeString(struct.oldLoanPerson);
      }
      if (struct.isSetOldLoanMoney()) {
        oprot.writeDouble(struct.oldLoanMoney);
      }
      if (struct.isSetOldLoanPhone()) {
        oprot.writeString(struct.oldLoanPhone);
      }
      if (struct.isSetNewLoanBank()) {
        oprot.writeString(struct.newLoanBank);
      }
      if (struct.isSetNewLoanPerson()) {
        oprot.writeString(struct.newLoanPerson);
      }
      if (struct.isSetNewLoanMoney()) {
        oprot.writeDouble(struct.newLoanMoney);
      }
      if (struct.isSetNewLoanPhone()) {
        oprot.writeString(struct.newLoanPhone);
      }
      if (struct.isSetFundsMoney()) {
        oprot.writeDouble(struct.fundsMoney);
      }
      if (struct.isSetSuperviseDepartment()) {
        oprot.writeString(struct.superviseDepartment);
      }
      if (struct.isSetNotarizationDate()) {
        oprot.writeString(struct.notarizationDate);
      }
      if (struct.isSetSignDate()) {
        oprot.writeString(struct.signDate);
      }
      if (struct.isSetPaymentType()) {
        oprot.writeI32(struct.paymentType);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetAccumulationFundBank()) {
        oprot.writeString(struct.accumulationFundBank);
      }
      if (struct.isSetAccumulationFundMoney()) {
        oprot.writeDouble(struct.accumulationFundMoney);
      }
      if (struct.isSetLoanDays()) {
        oprot.writeI32(struct.loanDays);
      }
      if (struct.isSetPaymentName()) {
        oprot.writeString(struct.paymentName);
      }
      if (struct.isSetPaymentAccount()) {
        oprot.writeString(struct.paymentAccount);
      }
      if (struct.isSetOverdueDays()) {
        oprot.writeI32(struct.overdueDays);
      }
      if (struct.isSetOverdueRate()) {
        oprot.writeDouble(struct.overdueRate);
      }
      if (struct.isSetOverdueFee()) {
        oprot.writeDouble(struct.overdueFee);
      }
      if (struct.isSetExtensionDays()) {
        oprot.writeI32(struct.extensionDays);
      }
      if (struct.isSetExtensionRate()) {
        oprot.writeDouble(struct.extensionRate);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetPaymentDate()) {
        oprot.writeString(struct.paymentDate);
      }
      if (struct.isSetReceDate()) {
        oprot.writeString(struct.receDate);
      }
      if (struct.isSetOldOwedAmount()) {
        oprot.writeDouble(struct.oldOwedAmount);
      }
      if (struct.isSetOldLoanTime()) {
        oprot.writeString(struct.oldLoanTime);
      }
      if (struct.isSetSuperviseAccount()) {
        oprot.writeString(struct.superviseAccount);
      }
      if (struct.isSetThirdBorrower()) {
        oprot.writeString(struct.thirdBorrower);
      }
      if (struct.isSetThirdBorrowerCard()) {
        oprot.writeString(struct.thirdBorrowerCard);
      }
      if (struct.isSetThirdBorrowerPhone()) {
        oprot.writeString(struct.thirdBorrowerPhone);
      }
      if (struct.isSetThirdBorrowerAddress()) {
        oprot.writeString(struct.thirdBorrowerAddress);
      }
      if (struct.isSetForeAccount()) {
        oprot.writeString(struct.foreAccount);
      }
      if (struct.isSetNewReceAccount()) {
        oprot.writeString(struct.newReceAccount);
      }
      if (struct.isSetNewReceName()) {
        oprot.writeString(struct.newReceName);
      }
      if (struct.isSetNewReceBank()) {
        oprot.writeString(struct.newReceBank);
      }
      if (struct.isSetSupersionReceAccount()) {
        oprot.writeString(struct.supersionReceAccount);
      }
      if (struct.isSetSupersionReceName()) {
        oprot.writeString(struct.supersionReceName);
      }
      if (struct.isSetSupersionReceBank()) {
        oprot.writeString(struct.supersionReceBank);
      }
      if (struct.isSetOldLoanBankBranch()) {
        oprot.writeString(struct.oldLoanBankBranch);
      }
      if (struct.isSetNewLoanBankBranch()) {
        oprot.writeString(struct.newLoanBankBranch);
      }
      if (struct.isSetSuperviseDepartmentBranch()) {
        oprot.writeString(struct.superviseDepartmentBranch);
      }
      if (struct.isSetOldBankStr()) {
        oprot.writeString(struct.oldBankStr);
      }
      if (struct.isSetOldBankBranchStr()) {
        oprot.writeString(struct.oldBankBranchStr);
      }
      if (struct.isSetNewBankStr()) {
        oprot.writeString(struct.newBankStr);
      }
      if (struct.isSetNewBankBranchStr()) {
        oprot.writeString(struct.newBankBranchStr);
      }
      if (struct.isSetSuperviseDepartmentStr()) {
        oprot.writeString(struct.superviseDepartmentStr);
      }
      if (struct.isSetSuperviseDepartmentBranchStr()) {
        oprot.writeString(struct.superviseDepartmentBranchStr);
      }
      if (struct.isSetAccumulationFundBankStr()) {
        oprot.writeString(struct.accumulationFundBankStr);
      }
      if (struct.isSetNewRecePerson()) {
        oprot.writeString(struct.newRecePerson);
      }
      if (struct.isSetIdCardNumber()) {
        oprot.writeString(struct.idCardNumber);
      }
      if (struct.isSetDownPayment()) {
        oprot.writeDouble(struct.downPayment);
      }
      if (struct.isSetTurnoverCapitalName()) {
        oprot.writeString(struct.turnoverCapitalName);
      }
      if (struct.isSetTurnoverCapitalAccount()) {
        oprot.writeString(struct.turnoverCapitalAccount);
      }
      if (struct.isSetTurnoverCapitalBank()) {
        oprot.writeString(struct.turnoverCapitalBank);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectForeclosure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(59);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.oldLoanBank = iprot.readString();
        struct.setOldLoanBankIsSet(true);
      }
      if (incoming.get(3)) {
        struct.oldLoanPerson = iprot.readString();
        struct.setOldLoanPersonIsSet(true);
      }
      if (incoming.get(4)) {
        struct.oldLoanMoney = iprot.readDouble();
        struct.setOldLoanMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.oldLoanPhone = iprot.readString();
        struct.setOldLoanPhoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.newLoanBank = iprot.readString();
        struct.setNewLoanBankIsSet(true);
      }
      if (incoming.get(7)) {
        struct.newLoanPerson = iprot.readString();
        struct.setNewLoanPersonIsSet(true);
      }
      if (incoming.get(8)) {
        struct.newLoanMoney = iprot.readDouble();
        struct.setNewLoanMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.newLoanPhone = iprot.readString();
        struct.setNewLoanPhoneIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fundsMoney = iprot.readDouble();
        struct.setFundsMoneyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.superviseDepartment = iprot.readString();
        struct.setSuperviseDepartmentIsSet(true);
      }
      if (incoming.get(12)) {
        struct.notarizationDate = iprot.readString();
        struct.setNotarizationDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.signDate = iprot.readString();
        struct.setSignDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.paymentType = iprot.readI32();
        struct.setPaymentTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(16)) {
        struct.accumulationFundBank = iprot.readString();
        struct.setAccumulationFundBankIsSet(true);
      }
      if (incoming.get(17)) {
        struct.accumulationFundMoney = iprot.readDouble();
        struct.setAccumulationFundMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.loanDays = iprot.readI32();
        struct.setLoanDaysIsSet(true);
      }
      if (incoming.get(19)) {
        struct.paymentName = iprot.readString();
        struct.setPaymentNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.paymentAccount = iprot.readString();
        struct.setPaymentAccountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.overdueDays = iprot.readI32();
        struct.setOverdueDaysIsSet(true);
      }
      if (incoming.get(22)) {
        struct.overdueRate = iprot.readDouble();
        struct.setOverdueRateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.overdueFee = iprot.readDouble();
        struct.setOverdueFeeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.extensionDays = iprot.readI32();
        struct.setExtensionDaysIsSet(true);
      }
      if (incoming.get(25)) {
        struct.extensionRate = iprot.readDouble();
        struct.setExtensionRateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.paymentDate = iprot.readString();
        struct.setPaymentDateIsSet(true);
      }
      if (incoming.get(28)) {
        struct.receDate = iprot.readString();
        struct.setReceDateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.oldOwedAmount = iprot.readDouble();
        struct.setOldOwedAmountIsSet(true);
      }
      if (incoming.get(30)) {
        struct.oldLoanTime = iprot.readString();
        struct.setOldLoanTimeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.superviseAccount = iprot.readString();
        struct.setSuperviseAccountIsSet(true);
      }
      if (incoming.get(32)) {
        struct.thirdBorrower = iprot.readString();
        struct.setThirdBorrowerIsSet(true);
      }
      if (incoming.get(33)) {
        struct.thirdBorrowerCard = iprot.readString();
        struct.setThirdBorrowerCardIsSet(true);
      }
      if (incoming.get(34)) {
        struct.thirdBorrowerPhone = iprot.readString();
        struct.setThirdBorrowerPhoneIsSet(true);
      }
      if (incoming.get(35)) {
        struct.thirdBorrowerAddress = iprot.readString();
        struct.setThirdBorrowerAddressIsSet(true);
      }
      if (incoming.get(36)) {
        struct.foreAccount = iprot.readString();
        struct.setForeAccountIsSet(true);
      }
      if (incoming.get(37)) {
        struct.newReceAccount = iprot.readString();
        struct.setNewReceAccountIsSet(true);
      }
      if (incoming.get(38)) {
        struct.newReceName = iprot.readString();
        struct.setNewReceNameIsSet(true);
      }
      if (incoming.get(39)) {
        struct.newReceBank = iprot.readString();
        struct.setNewReceBankIsSet(true);
      }
      if (incoming.get(40)) {
        struct.supersionReceAccount = iprot.readString();
        struct.setSupersionReceAccountIsSet(true);
      }
      if (incoming.get(41)) {
        struct.supersionReceName = iprot.readString();
        struct.setSupersionReceNameIsSet(true);
      }
      if (incoming.get(42)) {
        struct.supersionReceBank = iprot.readString();
        struct.setSupersionReceBankIsSet(true);
      }
      if (incoming.get(43)) {
        struct.oldLoanBankBranch = iprot.readString();
        struct.setOldLoanBankBranchIsSet(true);
      }
      if (incoming.get(44)) {
        struct.newLoanBankBranch = iprot.readString();
        struct.setNewLoanBankBranchIsSet(true);
      }
      if (incoming.get(45)) {
        struct.superviseDepartmentBranch = iprot.readString();
        struct.setSuperviseDepartmentBranchIsSet(true);
      }
      if (incoming.get(46)) {
        struct.oldBankStr = iprot.readString();
        struct.setOldBankStrIsSet(true);
      }
      if (incoming.get(47)) {
        struct.oldBankBranchStr = iprot.readString();
        struct.setOldBankBranchStrIsSet(true);
      }
      if (incoming.get(48)) {
        struct.newBankStr = iprot.readString();
        struct.setNewBankStrIsSet(true);
      }
      if (incoming.get(49)) {
        struct.newBankBranchStr = iprot.readString();
        struct.setNewBankBranchStrIsSet(true);
      }
      if (incoming.get(50)) {
        struct.superviseDepartmentStr = iprot.readString();
        struct.setSuperviseDepartmentStrIsSet(true);
      }
      if (incoming.get(51)) {
        struct.superviseDepartmentBranchStr = iprot.readString();
        struct.setSuperviseDepartmentBranchStrIsSet(true);
      }
      if (incoming.get(52)) {
        struct.accumulationFundBankStr = iprot.readString();
        struct.setAccumulationFundBankStrIsSet(true);
      }
      if (incoming.get(53)) {
        struct.newRecePerson = iprot.readString();
        struct.setNewRecePersonIsSet(true);
      }
      if (incoming.get(54)) {
        struct.idCardNumber = iprot.readString();
        struct.setIdCardNumberIsSet(true);
      }
      if (incoming.get(55)) {
        struct.downPayment = iprot.readDouble();
        struct.setDownPaymentIsSet(true);
      }
      if (incoming.get(56)) {
        struct.turnoverCapitalName = iprot.readString();
        struct.setTurnoverCapitalNameIsSet(true);
      }
      if (incoming.get(57)) {
        struct.turnoverCapitalAccount = iprot.readString();
        struct.setTurnoverCapitalAccountIsSet(true);
      }
      if (incoming.get(58)) {
        struct.turnoverCapitalBank = iprot.readString();
        struct.setTurnoverCapitalBankIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerFamily implements org.apache.thrift.TBase<CusPerFamily, CusPerFamily._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerFamily> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerFamily");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_PER_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField HOUSE_MAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("houseMain", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHILD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("childNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LIVE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("liveStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MONTH_RENT_FIELD_DESC = new org.apache.thrift.protocol.TField("monthRent", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HOUSE_SHAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseShape", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HOUSE_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("houseArea", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerFamilyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerFamilyTupleSchemeFactory());
  }

  public int pid; // required
  public CusPerBase cusPerBase; // required
  public int houseMain; // required
  public int childNum; // required
  public int liveStatus; // required
  public int monthRent; // required
  public int houseShape; // required
  public double houseArea; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_PER_BASE((short)2, "cusPerBase"),
    HOUSE_MAIN((short)3, "houseMain"),
    CHILD_NUM((short)4, "childNum"),
    LIVE_STATUS((short)5, "liveStatus"),
    MONTH_RENT((short)6, "monthRent"),
    HOUSE_SHAPE((short)7, "houseShape"),
    HOUSE_AREA((short)8, "houseArea"),
    STATUS((short)9, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_PER_BASE
          return CUS_PER_BASE;
        case 3: // HOUSE_MAIN
          return HOUSE_MAIN;
        case 4: // CHILD_NUM
          return CHILD_NUM;
        case 5: // LIVE_STATUS
          return LIVE_STATUS;
        case 6: // MONTH_RENT
          return MONTH_RENT;
        case 7: // HOUSE_SHAPE
          return HOUSE_SHAPE;
        case 8: // HOUSE_AREA
          return HOUSE_AREA;
        case 9: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __HOUSEMAIN_ISSET_ID = 1;
  private static final int __CHILDNUM_ISSET_ID = 2;
  private static final int __LIVESTATUS_ISSET_ID = 3;
  private static final int __MONTHRENT_ISSET_ID = 4;
  private static final int __HOUSESHAPE_ISSET_ID = 5;
  private static final int __HOUSEAREA_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_PER_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusPerBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerBase.class)));
    tmpMap.put(_Fields.HOUSE_MAIN, new org.apache.thrift.meta_data.FieldMetaData("houseMain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHILD_NUM, new org.apache.thrift.meta_data.FieldMetaData("childNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIVE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("liveStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_RENT, new org.apache.thrift.meta_data.FieldMetaData("monthRent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_SHAPE, new org.apache.thrift.meta_data.FieldMetaData("houseShape", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_AREA, new org.apache.thrift.meta_data.FieldMetaData("houseArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerFamily.class, metaDataMap);
  }

  public CusPerFamily() {
  }

  public CusPerFamily(
    int pid,
    CusPerBase cusPerBase,
    int houseMain,
    int childNum,
    int liveStatus,
    int monthRent,
    int houseShape,
    double houseArea,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusPerBase = cusPerBase;
    this.houseMain = houseMain;
    setHouseMainIsSet(true);
    this.childNum = childNum;
    setChildNumIsSet(true);
    this.liveStatus = liveStatus;
    setLiveStatusIsSet(true);
    this.monthRent = monthRent;
    setMonthRentIsSet(true);
    this.houseShape = houseShape;
    setHouseShapeIsSet(true);
    this.houseArea = houseArea;
    setHouseAreaIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerFamily(CusPerFamily other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusPerBase()) {
      this.cusPerBase = new CusPerBase(other.cusPerBase);
    }
    this.houseMain = other.houseMain;
    this.childNum = other.childNum;
    this.liveStatus = other.liveStatus;
    this.monthRent = other.monthRent;
    this.houseShape = other.houseShape;
    this.houseArea = other.houseArea;
    this.status = other.status;
  }

  public CusPerFamily deepCopy() {
    return new CusPerFamily(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusPerBase = null;
    setHouseMainIsSet(false);
    this.houseMain = 0;
    setChildNumIsSet(false);
    this.childNum = 0;
    setLiveStatusIsSet(false);
    this.liveStatus = 0;
    setMonthRentIsSet(false);
    this.monthRent = 0;
    setHouseShapeIsSet(false);
    this.houseShape = 0;
    setHouseAreaIsSet(false);
    this.houseArea = 0.0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusPerFamily setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusPerBase getCusPerBase() {
    return this.cusPerBase;
  }

  public CusPerFamily setCusPerBase(CusPerBase cusPerBase) {
    this.cusPerBase = cusPerBase;
    return this;
  }

  public void unsetCusPerBase() {
    this.cusPerBase = null;
  }

  /** Returns true if field cusPerBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerBase() {
    return this.cusPerBase != null;
  }

  public void setCusPerBaseIsSet(boolean value) {
    if (!value) {
      this.cusPerBase = null;
    }
  }

  public int getHouseMain() {
    return this.houseMain;
  }

  public CusPerFamily setHouseMain(int houseMain) {
    this.houseMain = houseMain;
    setHouseMainIsSet(true);
    return this;
  }

  public void unsetHouseMain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEMAIN_ISSET_ID);
  }

  /** Returns true if field houseMain is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseMain() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEMAIN_ISSET_ID);
  }

  public void setHouseMainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEMAIN_ISSET_ID, value);
  }

  public int getChildNum() {
    return this.childNum;
  }

  public CusPerFamily setChildNum(int childNum) {
    this.childNum = childNum;
    setChildNumIsSet(true);
    return this;
  }

  public void unsetChildNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHILDNUM_ISSET_ID);
  }

  /** Returns true if field childNum is set (has been assigned a value) and false otherwise */
  public boolean isSetChildNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHILDNUM_ISSET_ID);
  }

  public void setChildNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHILDNUM_ISSET_ID, value);
  }

  public int getLiveStatus() {
    return this.liveStatus;
  }

  public CusPerFamily setLiveStatus(int liveStatus) {
    this.liveStatus = liveStatus;
    setLiveStatusIsSet(true);
    return this;
  }

  public void unsetLiveStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVESTATUS_ISSET_ID);
  }

  /** Returns true if field liveStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVESTATUS_ISSET_ID);
  }

  public void setLiveStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVESTATUS_ISSET_ID, value);
  }

  public int getMonthRent() {
    return this.monthRent;
  }

  public CusPerFamily setMonthRent(int monthRent) {
    this.monthRent = monthRent;
    setMonthRentIsSet(true);
    return this;
  }

  public void unsetMonthRent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHRENT_ISSET_ID);
  }

  /** Returns true if field monthRent is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthRent() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHRENT_ISSET_ID);
  }

  public void setMonthRentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHRENT_ISSET_ID, value);
  }

  public int getHouseShape() {
    return this.houseShape;
  }

  public CusPerFamily setHouseShape(int houseShape) {
    this.houseShape = houseShape;
    setHouseShapeIsSet(true);
    return this;
  }

  public void unsetHouseShape() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSESHAPE_ISSET_ID);
  }

  /** Returns true if field houseShape is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseShape() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSESHAPE_ISSET_ID);
  }

  public void setHouseShapeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSESHAPE_ISSET_ID, value);
  }

  public double getHouseArea() {
    return this.houseArea;
  }

  public CusPerFamily setHouseArea(double houseArea) {
    this.houseArea = houseArea;
    setHouseAreaIsSet(true);
    return this;
  }

  public void unsetHouseArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEAREA_ISSET_ID);
  }

  /** Returns true if field houseArea is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseArea() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEAREA_ISSET_ID);
  }

  public void setHouseAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEAREA_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusPerFamily setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_PER_BASE:
      if (value == null) {
        unsetCusPerBase();
      } else {
        setCusPerBase((CusPerBase)value);
      }
      break;

    case HOUSE_MAIN:
      if (value == null) {
        unsetHouseMain();
      } else {
        setHouseMain((Integer)value);
      }
      break;

    case CHILD_NUM:
      if (value == null) {
        unsetChildNum();
      } else {
        setChildNum((Integer)value);
      }
      break;

    case LIVE_STATUS:
      if (value == null) {
        unsetLiveStatus();
      } else {
        setLiveStatus((Integer)value);
      }
      break;

    case MONTH_RENT:
      if (value == null) {
        unsetMonthRent();
      } else {
        setMonthRent((Integer)value);
      }
      break;

    case HOUSE_SHAPE:
      if (value == null) {
        unsetHouseShape();
      } else {
        setHouseShape((Integer)value);
      }
      break;

    case HOUSE_AREA:
      if (value == null) {
        unsetHouseArea();
      } else {
        setHouseArea((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_PER_BASE:
      return getCusPerBase();

    case HOUSE_MAIN:
      return Integer.valueOf(getHouseMain());

    case CHILD_NUM:
      return Integer.valueOf(getChildNum());

    case LIVE_STATUS:
      return Integer.valueOf(getLiveStatus());

    case MONTH_RENT:
      return Integer.valueOf(getMonthRent());

    case HOUSE_SHAPE:
      return Integer.valueOf(getHouseShape());

    case HOUSE_AREA:
      return Double.valueOf(getHouseArea());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_PER_BASE:
      return isSetCusPerBase();
    case HOUSE_MAIN:
      return isSetHouseMain();
    case CHILD_NUM:
      return isSetChildNum();
    case LIVE_STATUS:
      return isSetLiveStatus();
    case MONTH_RENT:
      return isSetMonthRent();
    case HOUSE_SHAPE:
      return isSetHouseShape();
    case HOUSE_AREA:
      return isSetHouseArea();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerFamily)
      return this.equals((CusPerFamily)that);
    return false;
  }

  public boolean equals(CusPerFamily that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusPerBase = true && this.isSetCusPerBase();
    boolean that_present_cusPerBase = true && that.isSetCusPerBase();
    if (this_present_cusPerBase || that_present_cusPerBase) {
      if (!(this_present_cusPerBase && that_present_cusPerBase))
        return false;
      if (!this.cusPerBase.equals(that.cusPerBase))
        return false;
    }

    boolean this_present_houseMain = true;
    boolean that_present_houseMain = true;
    if (this_present_houseMain || that_present_houseMain) {
      if (!(this_present_houseMain && that_present_houseMain))
        return false;
      if (this.houseMain != that.houseMain)
        return false;
    }

    boolean this_present_childNum = true;
    boolean that_present_childNum = true;
    if (this_present_childNum || that_present_childNum) {
      if (!(this_present_childNum && that_present_childNum))
        return false;
      if (this.childNum != that.childNum)
        return false;
    }

    boolean this_present_liveStatus = true;
    boolean that_present_liveStatus = true;
    if (this_present_liveStatus || that_present_liveStatus) {
      if (!(this_present_liveStatus && that_present_liveStatus))
        return false;
      if (this.liveStatus != that.liveStatus)
        return false;
    }

    boolean this_present_monthRent = true;
    boolean that_present_monthRent = true;
    if (this_present_monthRent || that_present_monthRent) {
      if (!(this_present_monthRent && that_present_monthRent))
        return false;
      if (this.monthRent != that.monthRent)
        return false;
    }

    boolean this_present_houseShape = true;
    boolean that_present_houseShape = true;
    if (this_present_houseShape || that_present_houseShape) {
      if (!(this_present_houseShape && that_present_houseShape))
        return false;
      if (this.houseShape != that.houseShape)
        return false;
    }

    boolean this_present_houseArea = true;
    boolean that_present_houseArea = true;
    if (this_present_houseArea || that_present_houseArea) {
      if (!(this_present_houseArea && that_present_houseArea))
        return false;
      if (this.houseArea != that.houseArea)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusPerBase = true && (isSetCusPerBase());
    list.add(present_cusPerBase);
    if (present_cusPerBase)
      list.add(cusPerBase);

    boolean present_houseMain = true;
    list.add(present_houseMain);
    if (present_houseMain)
      list.add(houseMain);

    boolean present_childNum = true;
    list.add(present_childNum);
    if (present_childNum)
      list.add(childNum);

    boolean present_liveStatus = true;
    list.add(present_liveStatus);
    if (present_liveStatus)
      list.add(liveStatus);

    boolean present_monthRent = true;
    list.add(present_monthRent);
    if (present_monthRent)
      list.add(monthRent);

    boolean present_houseShape = true;
    list.add(present_houseShape);
    if (present_houseShape)
      list.add(houseShape);

    boolean present_houseArea = true;
    list.add(present_houseArea);
    if (present_houseArea)
      list.add(houseArea);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerFamily other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerBase()).compareTo(other.isSetCusPerBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerBase, other.cusPerBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseMain()).compareTo(other.isSetHouseMain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseMain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseMain, other.houseMain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildNum()).compareTo(other.isSetChildNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childNum, other.childNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveStatus()).compareTo(other.isSetLiveStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveStatus, other.liveStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthRent()).compareTo(other.isSetMonthRent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthRent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthRent, other.monthRent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseShape()).compareTo(other.isSetHouseShape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseShape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseShape, other.houseShape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseArea()).compareTo(other.isSetHouseArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseArea, other.houseArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerFamily(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerBase:");
    if (this.cusPerBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseMain:");
    sb.append(this.houseMain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("childNum:");
    sb.append(this.childNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveStatus:");
    sb.append(this.liveStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthRent:");
    sb.append(this.monthRent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseShape:");
    sb.append(this.houseShape);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseArea:");
    sb.append(this.houseArea);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerBase != null) {
      cusPerBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerFamilyStandardSchemeFactory implements SchemeFactory {
    public CusPerFamilyStandardScheme getScheme() {
      return new CusPerFamilyStandardScheme();
    }
  }

  private static class CusPerFamilyStandardScheme extends StandardScheme<CusPerFamily> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerFamily struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_PER_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerBase = new CusPerBase();
              struct.cusPerBase.read(iprot);
              struct.setCusPerBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOUSE_MAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseMain = iprot.readI32();
              struct.setHouseMainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHILD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.childNum = iprot.readI32();
              struct.setChildNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIVE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveStatus = iprot.readI32();
              struct.setLiveStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONTH_RENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monthRent = iprot.readI32();
              struct.setMonthRentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOUSE_SHAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseShape = iprot.readI32();
              struct.setHouseShapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOUSE_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.houseArea = iprot.readDouble();
              struct.setHouseAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerFamily struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusPerBase != null) {
        oprot.writeFieldBegin(CUS_PER_BASE_FIELD_DESC);
        struct.cusPerBase.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOUSE_MAIN_FIELD_DESC);
      oprot.writeI32(struct.houseMain);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHILD_NUM_FIELD_DESC);
      oprot.writeI32(struct.childNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIVE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.liveStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_RENT_FIELD_DESC);
      oprot.writeI32(struct.monthRent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSE_SHAPE_FIELD_DESC);
      oprot.writeI32(struct.houseShape);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSE_AREA_FIELD_DESC);
      oprot.writeDouble(struct.houseArea);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerFamilyTupleSchemeFactory implements SchemeFactory {
    public CusPerFamilyTupleScheme getScheme() {
      return new CusPerFamilyTupleScheme();
    }
  }

  private static class CusPerFamilyTupleScheme extends TupleScheme<CusPerFamily> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerFamily struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusPerBase()) {
        optionals.set(1);
      }
      if (struct.isSetHouseMain()) {
        optionals.set(2);
      }
      if (struct.isSetChildNum()) {
        optionals.set(3);
      }
      if (struct.isSetLiveStatus()) {
        optionals.set(4);
      }
      if (struct.isSetMonthRent()) {
        optionals.set(5);
      }
      if (struct.isSetHouseShape()) {
        optionals.set(6);
      }
      if (struct.isSetHouseArea()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusPerBase()) {
        struct.cusPerBase.write(oprot);
      }
      if (struct.isSetHouseMain()) {
        oprot.writeI32(struct.houseMain);
      }
      if (struct.isSetChildNum()) {
        oprot.writeI32(struct.childNum);
      }
      if (struct.isSetLiveStatus()) {
        oprot.writeI32(struct.liveStatus);
      }
      if (struct.isSetMonthRent()) {
        oprot.writeI32(struct.monthRent);
      }
      if (struct.isSetHouseShape()) {
        oprot.writeI32(struct.houseShape);
      }
      if (struct.isSetHouseArea()) {
        oprot.writeDouble(struct.houseArea);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerFamily struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusPerBase = new CusPerBase();
        struct.cusPerBase.read(iprot);
        struct.setCusPerBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.houseMain = iprot.readI32();
        struct.setHouseMainIsSet(true);
      }
      if (incoming.get(3)) {
        struct.childNum = iprot.readI32();
        struct.setChildNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.liveStatus = iprot.readI32();
        struct.setLiveStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.monthRent = iprot.readI32();
        struct.setMonthRentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.houseShape = iprot.readI32();
        struct.setHouseShapeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.houseArea = iprot.readDouble();
        struct.setHouseAreaIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


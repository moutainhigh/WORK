/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.workflow;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 流程与项目映射表*
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-18")
public class WorkflowProjectVo implements org.apache.thrift.TBase<WorkflowProjectVo, WorkflowProjectVo._Fields>, java.io.Serializable, Cloneable, Comparable<WorkflowProjectVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkflowProjectVo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WORKFLOW_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowInstanceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROCESS_DEFINITION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("processDefinitionKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WORKFLOW_TASK_DEF_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowTaskDefKey", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkflowProjectVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkflowProjectVoTupleSchemeFactory());
  }

  public int pid; // required
  public String workflowInstanceId; // required
  public int refId; // required
  public String processDefinitionKey; // required
  public int projectId; // required
  public String workflowTaskDefKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    WORKFLOW_INSTANCE_ID((short)2, "workflowInstanceId"),
    REF_ID((short)3, "refId"),
    PROCESS_DEFINITION_KEY((short)4, "processDefinitionKey"),
    PROJECT_ID((short)5, "projectId"),
    WORKFLOW_TASK_DEF_KEY((short)6, "workflowTaskDefKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // WORKFLOW_INSTANCE_ID
          return WORKFLOW_INSTANCE_ID;
        case 3: // REF_ID
          return REF_ID;
        case 4: // PROCESS_DEFINITION_KEY
          return PROCESS_DEFINITION_KEY;
        case 5: // PROJECT_ID
          return PROJECT_ID;
        case 6: // WORKFLOW_TASK_DEF_KEY
          return WORKFLOW_TASK_DEF_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REFID_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESS_DEFINITION_KEY, new org.apache.thrift.meta_data.FieldMetaData("processDefinitionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_TASK_DEF_KEY, new org.apache.thrift.meta_data.FieldMetaData("workflowTaskDefKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkflowProjectVo.class, metaDataMap);
  }

  public WorkflowProjectVo() {
  }

  public WorkflowProjectVo(
    int pid,
    String workflowInstanceId,
    int refId,
    String processDefinitionKey,
    int projectId,
    String workflowTaskDefKey)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.workflowInstanceId = workflowInstanceId;
    this.refId = refId;
    setRefIdIsSet(true);
    this.processDefinitionKey = processDefinitionKey;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.workflowTaskDefKey = workflowTaskDefKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkflowProjectVo(WorkflowProjectVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetWorkflowInstanceId()) {
      this.workflowInstanceId = other.workflowInstanceId;
    }
    this.refId = other.refId;
    if (other.isSetProcessDefinitionKey()) {
      this.processDefinitionKey = other.processDefinitionKey;
    }
    this.projectId = other.projectId;
    if (other.isSetWorkflowTaskDefKey()) {
      this.workflowTaskDefKey = other.workflowTaskDefKey;
    }
  }

  public WorkflowProjectVo deepCopy() {
    return new WorkflowProjectVo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.workflowInstanceId = null;
    setRefIdIsSet(false);
    this.refId = 0;
    this.processDefinitionKey = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.workflowTaskDefKey = null;
  }

  public int getPid() {
    return this.pid;
  }

  public WorkflowProjectVo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getWorkflowInstanceId() {
    return this.workflowInstanceId;
  }

  public WorkflowProjectVo setWorkflowInstanceId(String workflowInstanceId) {
    this.workflowInstanceId = workflowInstanceId;
    return this;
  }

  public void unsetWorkflowInstanceId() {
    this.workflowInstanceId = null;
  }

  /** Returns true if field workflowInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowInstanceId() {
    return this.workflowInstanceId != null;
  }

  public void setWorkflowInstanceIdIsSet(boolean value) {
    if (!value) {
      this.workflowInstanceId = null;
    }
  }

  public int getRefId() {
    return this.refId;
  }

  public WorkflowProjectVo setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public String getProcessDefinitionKey() {
    return this.processDefinitionKey;
  }

  public WorkflowProjectVo setProcessDefinitionKey(String processDefinitionKey) {
    this.processDefinitionKey = processDefinitionKey;
    return this;
  }

  public void unsetProcessDefinitionKey() {
    this.processDefinitionKey = null;
  }

  /** Returns true if field processDefinitionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessDefinitionKey() {
    return this.processDefinitionKey != null;
  }

  public void setProcessDefinitionKeyIsSet(boolean value) {
    if (!value) {
      this.processDefinitionKey = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public WorkflowProjectVo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getWorkflowTaskDefKey() {
    return this.workflowTaskDefKey;
  }

  public WorkflowProjectVo setWorkflowTaskDefKey(String workflowTaskDefKey) {
    this.workflowTaskDefKey = workflowTaskDefKey;
    return this;
  }

  public void unsetWorkflowTaskDefKey() {
    this.workflowTaskDefKey = null;
  }

  /** Returns true if field workflowTaskDefKey is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowTaskDefKey() {
    return this.workflowTaskDefKey != null;
  }

  public void setWorkflowTaskDefKeyIsSet(boolean value) {
    if (!value) {
      this.workflowTaskDefKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case WORKFLOW_INSTANCE_ID:
      if (value == null) {
        unsetWorkflowInstanceId();
      } else {
        setWorkflowInstanceId((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case PROCESS_DEFINITION_KEY:
      if (value == null) {
        unsetProcessDefinitionKey();
      } else {
        setProcessDefinitionKey((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case WORKFLOW_TASK_DEF_KEY:
      if (value == null) {
        unsetWorkflowTaskDefKey();
      } else {
        setWorkflowTaskDefKey((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case WORKFLOW_INSTANCE_ID:
      return getWorkflowInstanceId();

    case REF_ID:
      return Integer.valueOf(getRefId());

    case PROCESS_DEFINITION_KEY:
      return getProcessDefinitionKey();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case WORKFLOW_TASK_DEF_KEY:
      return getWorkflowTaskDefKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case WORKFLOW_INSTANCE_ID:
      return isSetWorkflowInstanceId();
    case REF_ID:
      return isSetRefId();
    case PROCESS_DEFINITION_KEY:
      return isSetProcessDefinitionKey();
    case PROJECT_ID:
      return isSetProjectId();
    case WORKFLOW_TASK_DEF_KEY:
      return isSetWorkflowTaskDefKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkflowProjectVo)
      return this.equals((WorkflowProjectVo)that);
    return false;
  }

  public boolean equals(WorkflowProjectVo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_workflowInstanceId = true && this.isSetWorkflowInstanceId();
    boolean that_present_workflowInstanceId = true && that.isSetWorkflowInstanceId();
    if (this_present_workflowInstanceId || that_present_workflowInstanceId) {
      if (!(this_present_workflowInstanceId && that_present_workflowInstanceId))
        return false;
      if (!this.workflowInstanceId.equals(that.workflowInstanceId))
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_processDefinitionKey = true && this.isSetProcessDefinitionKey();
    boolean that_present_processDefinitionKey = true && that.isSetProcessDefinitionKey();
    if (this_present_processDefinitionKey || that_present_processDefinitionKey) {
      if (!(this_present_processDefinitionKey && that_present_processDefinitionKey))
        return false;
      if (!this.processDefinitionKey.equals(that.processDefinitionKey))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_workflowTaskDefKey = true && this.isSetWorkflowTaskDefKey();
    boolean that_present_workflowTaskDefKey = true && that.isSetWorkflowTaskDefKey();
    if (this_present_workflowTaskDefKey || that_present_workflowTaskDefKey) {
      if (!(this_present_workflowTaskDefKey && that_present_workflowTaskDefKey))
        return false;
      if (!this.workflowTaskDefKey.equals(that.workflowTaskDefKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_workflowInstanceId = true && (isSetWorkflowInstanceId());
    list.add(present_workflowInstanceId);
    if (present_workflowInstanceId)
      list.add(workflowInstanceId);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_processDefinitionKey = true && (isSetProcessDefinitionKey());
    list.add(present_processDefinitionKey);
    if (present_processDefinitionKey)
      list.add(processDefinitionKey);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_workflowTaskDefKey = true && (isSetWorkflowTaskDefKey());
    list.add(present_workflowTaskDefKey);
    if (present_workflowTaskDefKey)
      list.add(workflowTaskDefKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkflowProjectVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowInstanceId()).compareTo(other.isSetWorkflowInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowInstanceId, other.workflowInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessDefinitionKey()).compareTo(other.isSetProcessDefinitionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessDefinitionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processDefinitionKey, other.processDefinitionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowTaskDefKey()).compareTo(other.isSetWorkflowTaskDefKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowTaskDefKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowTaskDefKey, other.workflowTaskDefKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkflowProjectVo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowInstanceId:");
    if (this.workflowInstanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowInstanceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processDefinitionKey:");
    if (this.processDefinitionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.processDefinitionKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowTaskDefKey:");
    if (this.workflowTaskDefKey == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowTaskDefKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkflowProjectVoStandardSchemeFactory implements SchemeFactory {
    public WorkflowProjectVoStandardScheme getScheme() {
      return new WorkflowProjectVoStandardScheme();
    }
  }

  private static class WorkflowProjectVoStandardScheme extends StandardScheme<WorkflowProjectVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkflowProjectVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORKFLOW_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowInstanceId = iprot.readString();
              struct.setWorkflowInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROCESS_DEFINITION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processDefinitionKey = iprot.readString();
              struct.setProcessDefinitionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WORKFLOW_TASK_DEF_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowTaskDefKey = iprot.readString();
              struct.setWorkflowTaskDefKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkflowProjectVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.workflowInstanceId != null) {
        oprot.writeFieldBegin(WORKFLOW_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.workflowInstanceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      if (struct.processDefinitionKey != null) {
        oprot.writeFieldBegin(PROCESS_DEFINITION_KEY_FIELD_DESC);
        oprot.writeString(struct.processDefinitionKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.workflowTaskDefKey != null) {
        oprot.writeFieldBegin(WORKFLOW_TASK_DEF_KEY_FIELD_DESC);
        oprot.writeString(struct.workflowTaskDefKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkflowProjectVoTupleSchemeFactory implements SchemeFactory {
    public WorkflowProjectVoTupleScheme getScheme() {
      return new WorkflowProjectVoTupleScheme();
    }
  }

  private static class WorkflowProjectVoTupleScheme extends TupleScheme<WorkflowProjectVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkflowProjectVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetWorkflowInstanceId()) {
        optionals.set(1);
      }
      if (struct.isSetRefId()) {
        optionals.set(2);
      }
      if (struct.isSetProcessDefinitionKey()) {
        optionals.set(3);
      }
      if (struct.isSetProjectId()) {
        optionals.set(4);
      }
      if (struct.isSetWorkflowTaskDefKey()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetWorkflowInstanceId()) {
        oprot.writeString(struct.workflowInstanceId);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetProcessDefinitionKey()) {
        oprot.writeString(struct.processDefinitionKey);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetWorkflowTaskDefKey()) {
        oprot.writeString(struct.workflowTaskDefKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkflowProjectVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.workflowInstanceId = iprot.readString();
        struct.setWorkflowInstanceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.processDefinitionKey = iprot.readString();
        struct.setProcessDefinitionKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.workflowTaskDefKey = iprot.readString();
        struct.setWorkflowTaskDefKeyIsSet(true);
      }
    }
  }

}


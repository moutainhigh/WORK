/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class ExportCusComBase implements org.apache.thrift.TBase<ExportCusComBase, ExportCusComBase._Fields>, java.io.Serializable, Cloneable, Comparable<ExportCusComBase> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExportCusComBase");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CPY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpyName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REG_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("regMoney", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FOUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foundDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BUS_LIC_CERT_FIELD_DESC = new org.apache.thrift.protocol.TField("busLicCert", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOAN_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanCardId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHINA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ChinaName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhone", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CERT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certNumber", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LIVE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("liveAddr", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REG_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("regAddr", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ACT_BIZ_ADD_FIELD_DESC = new org.apache.thrift.protocol.TField("actBizAdd", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PERSON_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("personTotal", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField AVERAGE_WAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("averageWage", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField ECOTRADE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ecotradeText", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PERSON_MONEY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("personMoneyTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField BANK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MGE_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("mgeCity", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExportCusComBaseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExportCusComBaseTupleSchemeFactory());
  }

  public int pid; // required
  public String cpyName; // required
  public String regMoney; // required
  public String foundDate; // required
  public String telephone; // required
  public String busLicCert; // required
  public String orgCode; // required
  public String bankName; // required
  public String loanCardId; // required
  public String ChinaName; // required
  public String mobilePhone; // required
  public String certNumber; // required
  public String liveAddr; // required
  public String regAddr; // required
  public String actBizAdd; // required
  public int personTotal; // required
  public double averageWage; // required
  public String ecotradeText; // required
  public double personMoneyTotal; // required
  public String bankType; // required
  public String mgeCity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CPY_NAME((short)2, "cpyName"),
    REG_MONEY((short)3, "regMoney"),
    FOUND_DATE((short)4, "foundDate"),
    TELEPHONE((short)5, "telephone"),
    BUS_LIC_CERT((short)6, "busLicCert"),
    ORG_CODE((short)7, "orgCode"),
    BANK_NAME((short)8, "bankName"),
    LOAN_CARD_ID((short)9, "loanCardId"),
    CHINA_NAME((short)10, "ChinaName"),
    MOBILE_PHONE((short)11, "mobilePhone"),
    CERT_NUMBER((short)12, "certNumber"),
    LIVE_ADDR((short)13, "liveAddr"),
    REG_ADDR((short)14, "regAddr"),
    ACT_BIZ_ADD((short)15, "actBizAdd"),
    PERSON_TOTAL((short)16, "personTotal"),
    AVERAGE_WAGE((short)17, "averageWage"),
    ECOTRADE_TEXT((short)18, "ecotradeText"),
    PERSON_MONEY_TOTAL((short)19, "personMoneyTotal"),
    BANK_TYPE((short)20, "bankType"),
    MGE_CITY((short)21, "mgeCity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CPY_NAME
          return CPY_NAME;
        case 3: // REG_MONEY
          return REG_MONEY;
        case 4: // FOUND_DATE
          return FOUND_DATE;
        case 5: // TELEPHONE
          return TELEPHONE;
        case 6: // BUS_LIC_CERT
          return BUS_LIC_CERT;
        case 7: // ORG_CODE
          return ORG_CODE;
        case 8: // BANK_NAME
          return BANK_NAME;
        case 9: // LOAN_CARD_ID
          return LOAN_CARD_ID;
        case 10: // CHINA_NAME
          return CHINA_NAME;
        case 11: // MOBILE_PHONE
          return MOBILE_PHONE;
        case 12: // CERT_NUMBER
          return CERT_NUMBER;
        case 13: // LIVE_ADDR
          return LIVE_ADDR;
        case 14: // REG_ADDR
          return REG_ADDR;
        case 15: // ACT_BIZ_ADD
          return ACT_BIZ_ADD;
        case 16: // PERSON_TOTAL
          return PERSON_TOTAL;
        case 17: // AVERAGE_WAGE
          return AVERAGE_WAGE;
        case 18: // ECOTRADE_TEXT
          return ECOTRADE_TEXT;
        case 19: // PERSON_MONEY_TOTAL
          return PERSON_MONEY_TOTAL;
        case 20: // BANK_TYPE
          return BANK_TYPE;
        case 21: // MGE_CITY
          return MGE_CITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PERSONTOTAL_ISSET_ID = 1;
  private static final int __AVERAGEWAGE_ISSET_ID = 2;
  private static final int __PERSONMONEYTOTAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_MONEY, new org.apache.thrift.meta_data.FieldMetaData("regMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("foundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_LIC_CERT, new org.apache.thrift.meta_data.FieldMetaData("busLicCert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("loanCardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHINA_NAME, new org.apache.thrift.meta_data.FieldMetaData("ChinaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("mobilePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("liveAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_ADDR, new org.apache.thrift.meta_data.FieldMetaData("regAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACT_BIZ_ADD, new org.apache.thrift.meta_data.FieldMetaData("actBizAdd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("personTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVERAGE_WAGE, new org.apache.thrift.meta_data.FieldMetaData("averageWage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ECOTRADE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("ecotradeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON_MONEY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("personMoneyTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MGE_CITY, new org.apache.thrift.meta_data.FieldMetaData("mgeCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExportCusComBase.class, metaDataMap);
  }

  public ExportCusComBase() {
  }

  public ExportCusComBase(
    int pid,
    String cpyName,
    String regMoney,
    String foundDate,
    String telephone,
    String busLicCert,
    String orgCode,
    String bankName,
    String loanCardId,
    String ChinaName,
    String mobilePhone,
    String certNumber,
    String liveAddr,
    String regAddr,
    String actBizAdd,
    int personTotal,
    double averageWage,
    String ecotradeText,
    double personMoneyTotal,
    String bankType,
    String mgeCity)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cpyName = cpyName;
    this.regMoney = regMoney;
    this.foundDate = foundDate;
    this.telephone = telephone;
    this.busLicCert = busLicCert;
    this.orgCode = orgCode;
    this.bankName = bankName;
    this.loanCardId = loanCardId;
    this.ChinaName = ChinaName;
    this.mobilePhone = mobilePhone;
    this.certNumber = certNumber;
    this.liveAddr = liveAddr;
    this.regAddr = regAddr;
    this.actBizAdd = actBizAdd;
    this.personTotal = personTotal;
    setPersonTotalIsSet(true);
    this.averageWage = averageWage;
    setAverageWageIsSet(true);
    this.ecotradeText = ecotradeText;
    this.personMoneyTotal = personMoneyTotal;
    setPersonMoneyTotalIsSet(true);
    this.bankType = bankType;
    this.mgeCity = mgeCity;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExportCusComBase(ExportCusComBase other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCpyName()) {
      this.cpyName = other.cpyName;
    }
    if (other.isSetRegMoney()) {
      this.regMoney = other.regMoney;
    }
    if (other.isSetFoundDate()) {
      this.foundDate = other.foundDate;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetBusLicCert()) {
      this.busLicCert = other.busLicCert;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetLoanCardId()) {
      this.loanCardId = other.loanCardId;
    }
    if (other.isSetChinaName()) {
      this.ChinaName = other.ChinaName;
    }
    if (other.isSetMobilePhone()) {
      this.mobilePhone = other.mobilePhone;
    }
    if (other.isSetCertNumber()) {
      this.certNumber = other.certNumber;
    }
    if (other.isSetLiveAddr()) {
      this.liveAddr = other.liveAddr;
    }
    if (other.isSetRegAddr()) {
      this.regAddr = other.regAddr;
    }
    if (other.isSetActBizAdd()) {
      this.actBizAdd = other.actBizAdd;
    }
    this.personTotal = other.personTotal;
    this.averageWage = other.averageWage;
    if (other.isSetEcotradeText()) {
      this.ecotradeText = other.ecotradeText;
    }
    this.personMoneyTotal = other.personMoneyTotal;
    if (other.isSetBankType()) {
      this.bankType = other.bankType;
    }
    if (other.isSetMgeCity()) {
      this.mgeCity = other.mgeCity;
    }
  }

  public ExportCusComBase deepCopy() {
    return new ExportCusComBase(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cpyName = null;
    this.regMoney = null;
    this.foundDate = null;
    this.telephone = null;
    this.busLicCert = null;
    this.orgCode = null;
    this.bankName = null;
    this.loanCardId = null;
    this.ChinaName = null;
    this.mobilePhone = null;
    this.certNumber = null;
    this.liveAddr = null;
    this.regAddr = null;
    this.actBizAdd = null;
    setPersonTotalIsSet(false);
    this.personTotal = 0;
    setAverageWageIsSet(false);
    this.averageWage = 0.0;
    this.ecotradeText = null;
    setPersonMoneyTotalIsSet(false);
    this.personMoneyTotal = 0.0;
    this.bankType = null;
    this.mgeCity = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ExportCusComBase setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getCpyName() {
    return this.cpyName;
  }

  public ExportCusComBase setCpyName(String cpyName) {
    this.cpyName = cpyName;
    return this;
  }

  public void unsetCpyName() {
    this.cpyName = null;
  }

  /** Returns true if field cpyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpyName() {
    return this.cpyName != null;
  }

  public void setCpyNameIsSet(boolean value) {
    if (!value) {
      this.cpyName = null;
    }
  }

  public String getRegMoney() {
    return this.regMoney;
  }

  public ExportCusComBase setRegMoney(String regMoney) {
    this.regMoney = regMoney;
    return this;
  }

  public void unsetRegMoney() {
    this.regMoney = null;
  }

  /** Returns true if field regMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRegMoney() {
    return this.regMoney != null;
  }

  public void setRegMoneyIsSet(boolean value) {
    if (!value) {
      this.regMoney = null;
    }
  }

  public String getFoundDate() {
    return this.foundDate;
  }

  public ExportCusComBase setFoundDate(String foundDate) {
    this.foundDate = foundDate;
    return this;
  }

  public void unsetFoundDate() {
    this.foundDate = null;
  }

  /** Returns true if field foundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFoundDate() {
    return this.foundDate != null;
  }

  public void setFoundDateIsSet(boolean value) {
    if (!value) {
      this.foundDate = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public ExportCusComBase setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getBusLicCert() {
    return this.busLicCert;
  }

  public ExportCusComBase setBusLicCert(String busLicCert) {
    this.busLicCert = busLicCert;
    return this;
  }

  public void unsetBusLicCert() {
    this.busLicCert = null;
  }

  /** Returns true if field busLicCert is set (has been assigned a value) and false otherwise */
  public boolean isSetBusLicCert() {
    return this.busLicCert != null;
  }

  public void setBusLicCertIsSet(boolean value) {
    if (!value) {
      this.busLicCert = null;
    }
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public ExportCusComBase setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public ExportCusComBase setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getLoanCardId() {
    return this.loanCardId;
  }

  public ExportCusComBase setLoanCardId(String loanCardId) {
    this.loanCardId = loanCardId;
    return this;
  }

  public void unsetLoanCardId() {
    this.loanCardId = null;
  }

  /** Returns true if field loanCardId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanCardId() {
    return this.loanCardId != null;
  }

  public void setLoanCardIdIsSet(boolean value) {
    if (!value) {
      this.loanCardId = null;
    }
  }

  public String getChinaName() {
    return this.ChinaName;
  }

  public ExportCusComBase setChinaName(String ChinaName) {
    this.ChinaName = ChinaName;
    return this;
  }

  public void unsetChinaName() {
    this.ChinaName = null;
  }

  /** Returns true if field ChinaName is set (has been assigned a value) and false otherwise */
  public boolean isSetChinaName() {
    return this.ChinaName != null;
  }

  public void setChinaNameIsSet(boolean value) {
    if (!value) {
      this.ChinaName = null;
    }
  }

  public String getMobilePhone() {
    return this.mobilePhone;
  }

  public ExportCusComBase setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
    return this;
  }

  public void unsetMobilePhone() {
    this.mobilePhone = null;
  }

  /** Returns true if field mobilePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhone() {
    return this.mobilePhone != null;
  }

  public void setMobilePhoneIsSet(boolean value) {
    if (!value) {
      this.mobilePhone = null;
    }
  }

  public String getCertNumber() {
    return this.certNumber;
  }

  public ExportCusComBase setCertNumber(String certNumber) {
    this.certNumber = certNumber;
    return this;
  }

  public void unsetCertNumber() {
    this.certNumber = null;
  }

  /** Returns true if field certNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNumber() {
    return this.certNumber != null;
  }

  public void setCertNumberIsSet(boolean value) {
    if (!value) {
      this.certNumber = null;
    }
  }

  public String getLiveAddr() {
    return this.liveAddr;
  }

  public ExportCusComBase setLiveAddr(String liveAddr) {
    this.liveAddr = liveAddr;
    return this;
  }

  public void unsetLiveAddr() {
    this.liveAddr = null;
  }

  /** Returns true if field liveAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveAddr() {
    return this.liveAddr != null;
  }

  public void setLiveAddrIsSet(boolean value) {
    if (!value) {
      this.liveAddr = null;
    }
  }

  public String getRegAddr() {
    return this.regAddr;
  }

  public ExportCusComBase setRegAddr(String regAddr) {
    this.regAddr = regAddr;
    return this;
  }

  public void unsetRegAddr() {
    this.regAddr = null;
  }

  /** Returns true if field regAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetRegAddr() {
    return this.regAddr != null;
  }

  public void setRegAddrIsSet(boolean value) {
    if (!value) {
      this.regAddr = null;
    }
  }

  public String getActBizAdd() {
    return this.actBizAdd;
  }

  public ExportCusComBase setActBizAdd(String actBizAdd) {
    this.actBizAdd = actBizAdd;
    return this;
  }

  public void unsetActBizAdd() {
    this.actBizAdd = null;
  }

  /** Returns true if field actBizAdd is set (has been assigned a value) and false otherwise */
  public boolean isSetActBizAdd() {
    return this.actBizAdd != null;
  }

  public void setActBizAddIsSet(boolean value) {
    if (!value) {
      this.actBizAdd = null;
    }
  }

  public int getPersonTotal() {
    return this.personTotal;
  }

  public ExportCusComBase setPersonTotal(int personTotal) {
    this.personTotal = personTotal;
    setPersonTotalIsSet(true);
    return this;
  }

  public void unsetPersonTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSONTOTAL_ISSET_ID);
  }

  /** Returns true if field personTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSONTOTAL_ISSET_ID);
  }

  public void setPersonTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSONTOTAL_ISSET_ID, value);
  }

  public double getAverageWage() {
    return this.averageWage;
  }

  public ExportCusComBase setAverageWage(double averageWage) {
    this.averageWage = averageWage;
    setAverageWageIsSet(true);
    return this;
  }

  public void unsetAverageWage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGEWAGE_ISSET_ID);
  }

  /** Returns true if field averageWage is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageWage() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGEWAGE_ISSET_ID);
  }

  public void setAverageWageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGEWAGE_ISSET_ID, value);
  }

  public String getEcotradeText() {
    return this.ecotradeText;
  }

  public ExportCusComBase setEcotradeText(String ecotradeText) {
    this.ecotradeText = ecotradeText;
    return this;
  }

  public void unsetEcotradeText() {
    this.ecotradeText = null;
  }

  /** Returns true if field ecotradeText is set (has been assigned a value) and false otherwise */
  public boolean isSetEcotradeText() {
    return this.ecotradeText != null;
  }

  public void setEcotradeTextIsSet(boolean value) {
    if (!value) {
      this.ecotradeText = null;
    }
  }

  public double getPersonMoneyTotal() {
    return this.personMoneyTotal;
  }

  public ExportCusComBase setPersonMoneyTotal(double personMoneyTotal) {
    this.personMoneyTotal = personMoneyTotal;
    setPersonMoneyTotalIsSet(true);
    return this;
  }

  public void unsetPersonMoneyTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSONMONEYTOTAL_ISSET_ID);
  }

  /** Returns true if field personMoneyTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonMoneyTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSONMONEYTOTAL_ISSET_ID);
  }

  public void setPersonMoneyTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSONMONEYTOTAL_ISSET_ID, value);
  }

  public String getBankType() {
    return this.bankType;
  }

  public ExportCusComBase setBankType(String bankType) {
    this.bankType = bankType;
    return this;
  }

  public void unsetBankType() {
    this.bankType = null;
  }

  /** Returns true if field bankType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankType() {
    return this.bankType != null;
  }

  public void setBankTypeIsSet(boolean value) {
    if (!value) {
      this.bankType = null;
    }
  }

  public String getMgeCity() {
    return this.mgeCity;
  }

  public ExportCusComBase setMgeCity(String mgeCity) {
    this.mgeCity = mgeCity;
    return this;
  }

  public void unsetMgeCity() {
    this.mgeCity = null;
  }

  /** Returns true if field mgeCity is set (has been assigned a value) and false otherwise */
  public boolean isSetMgeCity() {
    return this.mgeCity != null;
  }

  public void setMgeCityIsSet(boolean value) {
    if (!value) {
      this.mgeCity = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CPY_NAME:
      if (value == null) {
        unsetCpyName();
      } else {
        setCpyName((String)value);
      }
      break;

    case REG_MONEY:
      if (value == null) {
        unsetRegMoney();
      } else {
        setRegMoney((String)value);
      }
      break;

    case FOUND_DATE:
      if (value == null) {
        unsetFoundDate();
      } else {
        setFoundDate((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case BUS_LIC_CERT:
      if (value == null) {
        unsetBusLicCert();
      } else {
        setBusLicCert((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case LOAN_CARD_ID:
      if (value == null) {
        unsetLoanCardId();
      } else {
        setLoanCardId((String)value);
      }
      break;

    case CHINA_NAME:
      if (value == null) {
        unsetChinaName();
      } else {
        setChinaName((String)value);
      }
      break;

    case MOBILE_PHONE:
      if (value == null) {
        unsetMobilePhone();
      } else {
        setMobilePhone((String)value);
      }
      break;

    case CERT_NUMBER:
      if (value == null) {
        unsetCertNumber();
      } else {
        setCertNumber((String)value);
      }
      break;

    case LIVE_ADDR:
      if (value == null) {
        unsetLiveAddr();
      } else {
        setLiveAddr((String)value);
      }
      break;

    case REG_ADDR:
      if (value == null) {
        unsetRegAddr();
      } else {
        setRegAddr((String)value);
      }
      break;

    case ACT_BIZ_ADD:
      if (value == null) {
        unsetActBizAdd();
      } else {
        setActBizAdd((String)value);
      }
      break;

    case PERSON_TOTAL:
      if (value == null) {
        unsetPersonTotal();
      } else {
        setPersonTotal((Integer)value);
      }
      break;

    case AVERAGE_WAGE:
      if (value == null) {
        unsetAverageWage();
      } else {
        setAverageWage((Double)value);
      }
      break;

    case ECOTRADE_TEXT:
      if (value == null) {
        unsetEcotradeText();
      } else {
        setEcotradeText((String)value);
      }
      break;

    case PERSON_MONEY_TOTAL:
      if (value == null) {
        unsetPersonMoneyTotal();
      } else {
        setPersonMoneyTotal((Double)value);
      }
      break;

    case BANK_TYPE:
      if (value == null) {
        unsetBankType();
      } else {
        setBankType((String)value);
      }
      break;

    case MGE_CITY:
      if (value == null) {
        unsetMgeCity();
      } else {
        setMgeCity((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CPY_NAME:
      return getCpyName();

    case REG_MONEY:
      return getRegMoney();

    case FOUND_DATE:
      return getFoundDate();

    case TELEPHONE:
      return getTelephone();

    case BUS_LIC_CERT:
      return getBusLicCert();

    case ORG_CODE:
      return getOrgCode();

    case BANK_NAME:
      return getBankName();

    case LOAN_CARD_ID:
      return getLoanCardId();

    case CHINA_NAME:
      return getChinaName();

    case MOBILE_PHONE:
      return getMobilePhone();

    case CERT_NUMBER:
      return getCertNumber();

    case LIVE_ADDR:
      return getLiveAddr();

    case REG_ADDR:
      return getRegAddr();

    case ACT_BIZ_ADD:
      return getActBizAdd();

    case PERSON_TOTAL:
      return Integer.valueOf(getPersonTotal());

    case AVERAGE_WAGE:
      return Double.valueOf(getAverageWage());

    case ECOTRADE_TEXT:
      return getEcotradeText();

    case PERSON_MONEY_TOTAL:
      return Double.valueOf(getPersonMoneyTotal());

    case BANK_TYPE:
      return getBankType();

    case MGE_CITY:
      return getMgeCity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CPY_NAME:
      return isSetCpyName();
    case REG_MONEY:
      return isSetRegMoney();
    case FOUND_DATE:
      return isSetFoundDate();
    case TELEPHONE:
      return isSetTelephone();
    case BUS_LIC_CERT:
      return isSetBusLicCert();
    case ORG_CODE:
      return isSetOrgCode();
    case BANK_NAME:
      return isSetBankName();
    case LOAN_CARD_ID:
      return isSetLoanCardId();
    case CHINA_NAME:
      return isSetChinaName();
    case MOBILE_PHONE:
      return isSetMobilePhone();
    case CERT_NUMBER:
      return isSetCertNumber();
    case LIVE_ADDR:
      return isSetLiveAddr();
    case REG_ADDR:
      return isSetRegAddr();
    case ACT_BIZ_ADD:
      return isSetActBizAdd();
    case PERSON_TOTAL:
      return isSetPersonTotal();
    case AVERAGE_WAGE:
      return isSetAverageWage();
    case ECOTRADE_TEXT:
      return isSetEcotradeText();
    case PERSON_MONEY_TOTAL:
      return isSetPersonMoneyTotal();
    case BANK_TYPE:
      return isSetBankType();
    case MGE_CITY:
      return isSetMgeCity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExportCusComBase)
      return this.equals((ExportCusComBase)that);
    return false;
  }

  public boolean equals(ExportCusComBase that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cpyName = true && this.isSetCpyName();
    boolean that_present_cpyName = true && that.isSetCpyName();
    if (this_present_cpyName || that_present_cpyName) {
      if (!(this_present_cpyName && that_present_cpyName))
        return false;
      if (!this.cpyName.equals(that.cpyName))
        return false;
    }

    boolean this_present_regMoney = true && this.isSetRegMoney();
    boolean that_present_regMoney = true && that.isSetRegMoney();
    if (this_present_regMoney || that_present_regMoney) {
      if (!(this_present_regMoney && that_present_regMoney))
        return false;
      if (!this.regMoney.equals(that.regMoney))
        return false;
    }

    boolean this_present_foundDate = true && this.isSetFoundDate();
    boolean that_present_foundDate = true && that.isSetFoundDate();
    if (this_present_foundDate || that_present_foundDate) {
      if (!(this_present_foundDate && that_present_foundDate))
        return false;
      if (!this.foundDate.equals(that.foundDate))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_busLicCert = true && this.isSetBusLicCert();
    boolean that_present_busLicCert = true && that.isSetBusLicCert();
    if (this_present_busLicCert || that_present_busLicCert) {
      if (!(this_present_busLicCert && that_present_busLicCert))
        return false;
      if (!this.busLicCert.equals(that.busLicCert))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_loanCardId = true && this.isSetLoanCardId();
    boolean that_present_loanCardId = true && that.isSetLoanCardId();
    if (this_present_loanCardId || that_present_loanCardId) {
      if (!(this_present_loanCardId && that_present_loanCardId))
        return false;
      if (!this.loanCardId.equals(that.loanCardId))
        return false;
    }

    boolean this_present_ChinaName = true && this.isSetChinaName();
    boolean that_present_ChinaName = true && that.isSetChinaName();
    if (this_present_ChinaName || that_present_ChinaName) {
      if (!(this_present_ChinaName && that_present_ChinaName))
        return false;
      if (!this.ChinaName.equals(that.ChinaName))
        return false;
    }

    boolean this_present_mobilePhone = true && this.isSetMobilePhone();
    boolean that_present_mobilePhone = true && that.isSetMobilePhone();
    if (this_present_mobilePhone || that_present_mobilePhone) {
      if (!(this_present_mobilePhone && that_present_mobilePhone))
        return false;
      if (!this.mobilePhone.equals(that.mobilePhone))
        return false;
    }

    boolean this_present_certNumber = true && this.isSetCertNumber();
    boolean that_present_certNumber = true && that.isSetCertNumber();
    if (this_present_certNumber || that_present_certNumber) {
      if (!(this_present_certNumber && that_present_certNumber))
        return false;
      if (!this.certNumber.equals(that.certNumber))
        return false;
    }

    boolean this_present_liveAddr = true && this.isSetLiveAddr();
    boolean that_present_liveAddr = true && that.isSetLiveAddr();
    if (this_present_liveAddr || that_present_liveAddr) {
      if (!(this_present_liveAddr && that_present_liveAddr))
        return false;
      if (!this.liveAddr.equals(that.liveAddr))
        return false;
    }

    boolean this_present_regAddr = true && this.isSetRegAddr();
    boolean that_present_regAddr = true && that.isSetRegAddr();
    if (this_present_regAddr || that_present_regAddr) {
      if (!(this_present_regAddr && that_present_regAddr))
        return false;
      if (!this.regAddr.equals(that.regAddr))
        return false;
    }

    boolean this_present_actBizAdd = true && this.isSetActBizAdd();
    boolean that_present_actBizAdd = true && that.isSetActBizAdd();
    if (this_present_actBizAdd || that_present_actBizAdd) {
      if (!(this_present_actBizAdd && that_present_actBizAdd))
        return false;
      if (!this.actBizAdd.equals(that.actBizAdd))
        return false;
    }

    boolean this_present_personTotal = true;
    boolean that_present_personTotal = true;
    if (this_present_personTotal || that_present_personTotal) {
      if (!(this_present_personTotal && that_present_personTotal))
        return false;
      if (this.personTotal != that.personTotal)
        return false;
    }

    boolean this_present_averageWage = true;
    boolean that_present_averageWage = true;
    if (this_present_averageWage || that_present_averageWage) {
      if (!(this_present_averageWage && that_present_averageWage))
        return false;
      if (this.averageWage != that.averageWage)
        return false;
    }

    boolean this_present_ecotradeText = true && this.isSetEcotradeText();
    boolean that_present_ecotradeText = true && that.isSetEcotradeText();
    if (this_present_ecotradeText || that_present_ecotradeText) {
      if (!(this_present_ecotradeText && that_present_ecotradeText))
        return false;
      if (!this.ecotradeText.equals(that.ecotradeText))
        return false;
    }

    boolean this_present_personMoneyTotal = true;
    boolean that_present_personMoneyTotal = true;
    if (this_present_personMoneyTotal || that_present_personMoneyTotal) {
      if (!(this_present_personMoneyTotal && that_present_personMoneyTotal))
        return false;
      if (this.personMoneyTotal != that.personMoneyTotal)
        return false;
    }

    boolean this_present_bankType = true && this.isSetBankType();
    boolean that_present_bankType = true && that.isSetBankType();
    if (this_present_bankType || that_present_bankType) {
      if (!(this_present_bankType && that_present_bankType))
        return false;
      if (!this.bankType.equals(that.bankType))
        return false;
    }

    boolean this_present_mgeCity = true && this.isSetMgeCity();
    boolean that_present_mgeCity = true && that.isSetMgeCity();
    if (this_present_mgeCity || that_present_mgeCity) {
      if (!(this_present_mgeCity && that_present_mgeCity))
        return false;
      if (!this.mgeCity.equals(that.mgeCity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cpyName = true && (isSetCpyName());
    list.add(present_cpyName);
    if (present_cpyName)
      list.add(cpyName);

    boolean present_regMoney = true && (isSetRegMoney());
    list.add(present_regMoney);
    if (present_regMoney)
      list.add(regMoney);

    boolean present_foundDate = true && (isSetFoundDate());
    list.add(present_foundDate);
    if (present_foundDate)
      list.add(foundDate);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_busLicCert = true && (isSetBusLicCert());
    list.add(present_busLicCert);
    if (present_busLicCert)
      list.add(busLicCert);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_loanCardId = true && (isSetLoanCardId());
    list.add(present_loanCardId);
    if (present_loanCardId)
      list.add(loanCardId);

    boolean present_ChinaName = true && (isSetChinaName());
    list.add(present_ChinaName);
    if (present_ChinaName)
      list.add(ChinaName);

    boolean present_mobilePhone = true && (isSetMobilePhone());
    list.add(present_mobilePhone);
    if (present_mobilePhone)
      list.add(mobilePhone);

    boolean present_certNumber = true && (isSetCertNumber());
    list.add(present_certNumber);
    if (present_certNumber)
      list.add(certNumber);

    boolean present_liveAddr = true && (isSetLiveAddr());
    list.add(present_liveAddr);
    if (present_liveAddr)
      list.add(liveAddr);

    boolean present_regAddr = true && (isSetRegAddr());
    list.add(present_regAddr);
    if (present_regAddr)
      list.add(regAddr);

    boolean present_actBizAdd = true && (isSetActBizAdd());
    list.add(present_actBizAdd);
    if (present_actBizAdd)
      list.add(actBizAdd);

    boolean present_personTotal = true;
    list.add(present_personTotal);
    if (present_personTotal)
      list.add(personTotal);

    boolean present_averageWage = true;
    list.add(present_averageWage);
    if (present_averageWage)
      list.add(averageWage);

    boolean present_ecotradeText = true && (isSetEcotradeText());
    list.add(present_ecotradeText);
    if (present_ecotradeText)
      list.add(ecotradeText);

    boolean present_personMoneyTotal = true;
    list.add(present_personMoneyTotal);
    if (present_personMoneyTotal)
      list.add(personMoneyTotal);

    boolean present_bankType = true && (isSetBankType());
    list.add(present_bankType);
    if (present_bankType)
      list.add(bankType);

    boolean present_mgeCity = true && (isSetMgeCity());
    list.add(present_mgeCity);
    if (present_mgeCity)
      list.add(mgeCity);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExportCusComBase other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpyName()).compareTo(other.isSetCpyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpyName, other.cpyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegMoney()).compareTo(other.isSetRegMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regMoney, other.regMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoundDate()).compareTo(other.isSetFoundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foundDate, other.foundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusLicCert()).compareTo(other.isSetBusLicCert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusLicCert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busLicCert, other.busLicCert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanCardId()).compareTo(other.isSetLoanCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanCardId, other.loanCardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChinaName()).compareTo(other.isSetChinaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ChinaName, other.ChinaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhone()).compareTo(other.isSetMobilePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhone, other.mobilePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNumber()).compareTo(other.isSetCertNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNumber, other.certNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveAddr()).compareTo(other.isSetLiveAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveAddr, other.liveAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegAddr()).compareTo(other.isSetRegAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regAddr, other.regAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActBizAdd()).compareTo(other.isSetActBizAdd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActBizAdd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actBizAdd, other.actBizAdd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonTotal()).compareTo(other.isSetPersonTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personTotal, other.personTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageWage()).compareTo(other.isSetAverageWage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageWage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageWage, other.averageWage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcotradeText()).compareTo(other.isSetEcotradeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcotradeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecotradeText, other.ecotradeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonMoneyTotal()).compareTo(other.isSetPersonMoneyTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonMoneyTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personMoneyTotal, other.personMoneyTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankType()).compareTo(other.isSetBankType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankType, other.bankType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMgeCity()).compareTo(other.isSetMgeCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMgeCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mgeCity, other.mgeCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExportCusComBase(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpyName:");
    if (this.cpyName == null) {
      sb.append("null");
    } else {
      sb.append(this.cpyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regMoney:");
    if (this.regMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.regMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foundDate:");
    if (this.foundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.foundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busLicCert:");
    if (this.busLicCert == null) {
      sb.append("null");
    } else {
      sb.append(this.busLicCert);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanCardId:");
    if (this.loanCardId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanCardId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ChinaName:");
    if (this.ChinaName == null) {
      sb.append("null");
    } else {
      sb.append(this.ChinaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhone:");
    if (this.mobilePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNumber:");
    if (this.certNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveAddr:");
    if (this.liveAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.liveAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regAddr:");
    if (this.regAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.regAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actBizAdd:");
    if (this.actBizAdd == null) {
      sb.append("null");
    } else {
      sb.append(this.actBizAdd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personTotal:");
    sb.append(this.personTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageWage:");
    sb.append(this.averageWage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecotradeText:");
    if (this.ecotradeText == null) {
      sb.append("null");
    } else {
      sb.append(this.ecotradeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personMoneyTotal:");
    sb.append(this.personMoneyTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankType:");
    if (this.bankType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mgeCity:");
    if (this.mgeCity == null) {
      sb.append("null");
    } else {
      sb.append(this.mgeCity);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExportCusComBaseStandardSchemeFactory implements SchemeFactory {
    public ExportCusComBaseStandardScheme getScheme() {
      return new ExportCusComBaseStandardScheme();
    }
  }

  private static class ExportCusComBaseStandardScheme extends StandardScheme<ExportCusComBase> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExportCusComBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpyName = iprot.readString();
              struct.setCpyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REG_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regMoney = iprot.readString();
              struct.setRegMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foundDate = iprot.readString();
              struct.setFoundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUS_LIC_CERT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busLicCert = iprot.readString();
              struct.setBusLicCertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAN_CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanCardId = iprot.readString();
              struct.setLoanCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHINA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ChinaName = iprot.readString();
              struct.setChinaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOBILE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhone = iprot.readString();
              struct.setMobilePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CERT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNumber = iprot.readString();
              struct.setCertNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LIVE_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveAddr = iprot.readString();
              struct.setLiveAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REG_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regAddr = iprot.readString();
              struct.setRegAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACT_BIZ_ADD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actBizAdd = iprot.readString();
              struct.setActBizAddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PERSON_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.personTotal = iprot.readI32();
              struct.setPersonTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // AVERAGE_WAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averageWage = iprot.readDouble();
              struct.setAverageWageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ECOTRADE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecotradeText = iprot.readString();
              struct.setEcotradeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PERSON_MONEY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.personMoneyTotal = iprot.readDouble();
              struct.setPersonMoneyTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BANK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankType = iprot.readString();
              struct.setBankTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MGE_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mgeCity = iprot.readString();
              struct.setMgeCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExportCusComBase struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cpyName != null) {
        oprot.writeFieldBegin(CPY_NAME_FIELD_DESC);
        oprot.writeString(struct.cpyName);
        oprot.writeFieldEnd();
      }
      if (struct.regMoney != null) {
        oprot.writeFieldBegin(REG_MONEY_FIELD_DESC);
        oprot.writeString(struct.regMoney);
        oprot.writeFieldEnd();
      }
      if (struct.foundDate != null) {
        oprot.writeFieldBegin(FOUND_DATE_FIELD_DESC);
        oprot.writeString(struct.foundDate);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      if (struct.busLicCert != null) {
        oprot.writeFieldBegin(BUS_LIC_CERT_FIELD_DESC);
        oprot.writeString(struct.busLicCert);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.loanCardId != null) {
        oprot.writeFieldBegin(LOAN_CARD_ID_FIELD_DESC);
        oprot.writeString(struct.loanCardId);
        oprot.writeFieldEnd();
      }
      if (struct.ChinaName != null) {
        oprot.writeFieldBegin(CHINA_NAME_FIELD_DESC);
        oprot.writeString(struct.ChinaName);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhone != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_FIELD_DESC);
        oprot.writeString(struct.mobilePhone);
        oprot.writeFieldEnd();
      }
      if (struct.certNumber != null) {
        oprot.writeFieldBegin(CERT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certNumber);
        oprot.writeFieldEnd();
      }
      if (struct.liveAddr != null) {
        oprot.writeFieldBegin(LIVE_ADDR_FIELD_DESC);
        oprot.writeString(struct.liveAddr);
        oprot.writeFieldEnd();
      }
      if (struct.regAddr != null) {
        oprot.writeFieldBegin(REG_ADDR_FIELD_DESC);
        oprot.writeString(struct.regAddr);
        oprot.writeFieldEnd();
      }
      if (struct.actBizAdd != null) {
        oprot.writeFieldBegin(ACT_BIZ_ADD_FIELD_DESC);
        oprot.writeString(struct.actBizAdd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERSON_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.personTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_WAGE_FIELD_DESC);
      oprot.writeDouble(struct.averageWage);
      oprot.writeFieldEnd();
      if (struct.ecotradeText != null) {
        oprot.writeFieldBegin(ECOTRADE_TEXT_FIELD_DESC);
        oprot.writeString(struct.ecotradeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERSON_MONEY_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.personMoneyTotal);
      oprot.writeFieldEnd();
      if (struct.bankType != null) {
        oprot.writeFieldBegin(BANK_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankType);
        oprot.writeFieldEnd();
      }
      if (struct.mgeCity != null) {
        oprot.writeFieldBegin(MGE_CITY_FIELD_DESC);
        oprot.writeString(struct.mgeCity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExportCusComBaseTupleSchemeFactory implements SchemeFactory {
    public ExportCusComBaseTupleScheme getScheme() {
      return new ExportCusComBaseTupleScheme();
    }
  }

  private static class ExportCusComBaseTupleScheme extends TupleScheme<ExportCusComBase> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExportCusComBase struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCpyName()) {
        optionals.set(1);
      }
      if (struct.isSetRegMoney()) {
        optionals.set(2);
      }
      if (struct.isSetFoundDate()) {
        optionals.set(3);
      }
      if (struct.isSetTelephone()) {
        optionals.set(4);
      }
      if (struct.isSetBusLicCert()) {
        optionals.set(5);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(6);
      }
      if (struct.isSetBankName()) {
        optionals.set(7);
      }
      if (struct.isSetLoanCardId()) {
        optionals.set(8);
      }
      if (struct.isSetChinaName()) {
        optionals.set(9);
      }
      if (struct.isSetMobilePhone()) {
        optionals.set(10);
      }
      if (struct.isSetCertNumber()) {
        optionals.set(11);
      }
      if (struct.isSetLiveAddr()) {
        optionals.set(12);
      }
      if (struct.isSetRegAddr()) {
        optionals.set(13);
      }
      if (struct.isSetActBizAdd()) {
        optionals.set(14);
      }
      if (struct.isSetPersonTotal()) {
        optionals.set(15);
      }
      if (struct.isSetAverageWage()) {
        optionals.set(16);
      }
      if (struct.isSetEcotradeText()) {
        optionals.set(17);
      }
      if (struct.isSetPersonMoneyTotal()) {
        optionals.set(18);
      }
      if (struct.isSetBankType()) {
        optionals.set(19);
      }
      if (struct.isSetMgeCity()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCpyName()) {
        oprot.writeString(struct.cpyName);
      }
      if (struct.isSetRegMoney()) {
        oprot.writeString(struct.regMoney);
      }
      if (struct.isSetFoundDate()) {
        oprot.writeString(struct.foundDate);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetBusLicCert()) {
        oprot.writeString(struct.busLicCert);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetLoanCardId()) {
        oprot.writeString(struct.loanCardId);
      }
      if (struct.isSetChinaName()) {
        oprot.writeString(struct.ChinaName);
      }
      if (struct.isSetMobilePhone()) {
        oprot.writeString(struct.mobilePhone);
      }
      if (struct.isSetCertNumber()) {
        oprot.writeString(struct.certNumber);
      }
      if (struct.isSetLiveAddr()) {
        oprot.writeString(struct.liveAddr);
      }
      if (struct.isSetRegAddr()) {
        oprot.writeString(struct.regAddr);
      }
      if (struct.isSetActBizAdd()) {
        oprot.writeString(struct.actBizAdd);
      }
      if (struct.isSetPersonTotal()) {
        oprot.writeI32(struct.personTotal);
      }
      if (struct.isSetAverageWage()) {
        oprot.writeDouble(struct.averageWage);
      }
      if (struct.isSetEcotradeText()) {
        oprot.writeString(struct.ecotradeText);
      }
      if (struct.isSetPersonMoneyTotal()) {
        oprot.writeDouble(struct.personMoneyTotal);
      }
      if (struct.isSetBankType()) {
        oprot.writeString(struct.bankType);
      }
      if (struct.isSetMgeCity()) {
        oprot.writeString(struct.mgeCity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExportCusComBase struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cpyName = iprot.readString();
        struct.setCpyNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.regMoney = iprot.readString();
        struct.setRegMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.foundDate = iprot.readString();
        struct.setFoundDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.busLicCert = iprot.readString();
        struct.setBusLicCertIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loanCardId = iprot.readString();
        struct.setLoanCardIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ChinaName = iprot.readString();
        struct.setChinaNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mobilePhone = iprot.readString();
        struct.setMobilePhoneIsSet(true);
      }
      if (incoming.get(11)) {
        struct.certNumber = iprot.readString();
        struct.setCertNumberIsSet(true);
      }
      if (incoming.get(12)) {
        struct.liveAddr = iprot.readString();
        struct.setLiveAddrIsSet(true);
      }
      if (incoming.get(13)) {
        struct.regAddr = iprot.readString();
        struct.setRegAddrIsSet(true);
      }
      if (incoming.get(14)) {
        struct.actBizAdd = iprot.readString();
        struct.setActBizAddIsSet(true);
      }
      if (incoming.get(15)) {
        struct.personTotal = iprot.readI32();
        struct.setPersonTotalIsSet(true);
      }
      if (incoming.get(16)) {
        struct.averageWage = iprot.readDouble();
        struct.setAverageWageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ecotradeText = iprot.readString();
        struct.setEcotradeTextIsSet(true);
      }
      if (incoming.get(18)) {
        struct.personMoneyTotal = iprot.readDouble();
        struct.setPersonMoneyTotalIsSet(true);
      }
      if (incoming.get(19)) {
        struct.bankType = iprot.readString();
        struct.setBankTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.mgeCity = iprot.readString();
        struct.setMgeCityIsSet(true);
      }
    }
  }

}


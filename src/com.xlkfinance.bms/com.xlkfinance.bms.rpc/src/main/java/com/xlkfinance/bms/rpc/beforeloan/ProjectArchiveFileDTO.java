/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ProjectArchiveFileDTO implements org.apache.thrift.TBase<ProjectArchiveFileDTO, ProjectArchiveFileDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectArchiveFileDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectArchiveFileDTO");

  private static final org.apache.thrift.protocol.TField BIZ_FILE_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("bizFilePid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPLOAD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_BUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileBusType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_BUS_TYPE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileBusTypeValue", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("fileRemark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROJECT_ARCHIVE_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectArchiveFileName", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectArchiveFileDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectArchiveFileDTOTupleSchemeFactory());
  }

  public int bizFilePid; // required
  public String fileName; // required
  public String fileType; // required
  public int fileSize; // required
  public String uploadDttm; // required
  public String fileUrl; // required
  public int fileBusType; // required
  public String fileBusTypeValue; // required
  public String fileRemark; // required
  public String projectArchiveFileName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIZ_FILE_PID((short)1, "bizFilePid"),
    FILE_NAME((short)2, "fileName"),
    FILE_TYPE((short)3, "fileType"),
    FILE_SIZE((short)4, "fileSize"),
    UPLOAD_DTTM((short)5, "uploadDttm"),
    FILE_URL((short)6, "fileUrl"),
    FILE_BUS_TYPE((short)7, "fileBusType"),
    FILE_BUS_TYPE_VALUE((short)8, "fileBusTypeValue"),
    FILE_REMARK((short)9, "fileRemark"),
    PROJECT_ARCHIVE_FILE_NAME((short)10, "projectArchiveFileName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIZ_FILE_PID
          return BIZ_FILE_PID;
        case 2: // FILE_NAME
          return FILE_NAME;
        case 3: // FILE_TYPE
          return FILE_TYPE;
        case 4: // FILE_SIZE
          return FILE_SIZE;
        case 5: // UPLOAD_DTTM
          return UPLOAD_DTTM;
        case 6: // FILE_URL
          return FILE_URL;
        case 7: // FILE_BUS_TYPE
          return FILE_BUS_TYPE;
        case 8: // FILE_BUS_TYPE_VALUE
          return FILE_BUS_TYPE_VALUE;
        case 9: // FILE_REMARK
          return FILE_REMARK;
        case 10: // PROJECT_ARCHIVE_FILE_NAME
          return PROJECT_ARCHIVE_FILE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIZFILEPID_ISSET_ID = 0;
  private static final int __FILESIZE_ISSET_ID = 1;
  private static final int __FILEBUSTYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIZ_FILE_PID, new org.apache.thrift.meta_data.FieldMetaData("bizFilePid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("uploadDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("fileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_BUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileBusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_BUS_TYPE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fileBusTypeValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("fileRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ARCHIVE_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectArchiveFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectArchiveFileDTO.class, metaDataMap);
  }

  public ProjectArchiveFileDTO() {
  }

  public ProjectArchiveFileDTO(
    int bizFilePid,
    String fileName,
    String fileType,
    int fileSize,
    String uploadDttm,
    String fileUrl,
    int fileBusType,
    String fileBusTypeValue,
    String fileRemark,
    String projectArchiveFileName)
  {
    this();
    this.bizFilePid = bizFilePid;
    setBizFilePidIsSet(true);
    this.fileName = fileName;
    this.fileType = fileType;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.uploadDttm = uploadDttm;
    this.fileUrl = fileUrl;
    this.fileBusType = fileBusType;
    setFileBusTypeIsSet(true);
    this.fileBusTypeValue = fileBusTypeValue;
    this.fileRemark = fileRemark;
    this.projectArchiveFileName = projectArchiveFileName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectArchiveFileDTO(ProjectArchiveFileDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bizFilePid = other.bizFilePid;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    this.fileSize = other.fileSize;
    if (other.isSetUploadDttm()) {
      this.uploadDttm = other.uploadDttm;
    }
    if (other.isSetFileUrl()) {
      this.fileUrl = other.fileUrl;
    }
    this.fileBusType = other.fileBusType;
    if (other.isSetFileBusTypeValue()) {
      this.fileBusTypeValue = other.fileBusTypeValue;
    }
    if (other.isSetFileRemark()) {
      this.fileRemark = other.fileRemark;
    }
    if (other.isSetProjectArchiveFileName()) {
      this.projectArchiveFileName = other.projectArchiveFileName;
    }
  }

  public ProjectArchiveFileDTO deepCopy() {
    return new ProjectArchiveFileDTO(this);
  }

  @Override
  public void clear() {
    setBizFilePidIsSet(false);
    this.bizFilePid = 0;
    this.fileName = null;
    this.fileType = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    this.uploadDttm = null;
    this.fileUrl = null;
    setFileBusTypeIsSet(false);
    this.fileBusType = 0;
    this.fileBusTypeValue = null;
    this.fileRemark = null;
    this.projectArchiveFileName = null;
  }

  public int getBizFilePid() {
    return this.bizFilePid;
  }

  public ProjectArchiveFileDTO setBizFilePid(int bizFilePid) {
    this.bizFilePid = bizFilePid;
    setBizFilePidIsSet(true);
    return this;
  }

  public void unsetBizFilePid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZFILEPID_ISSET_ID);
  }

  /** Returns true if field bizFilePid is set (has been assigned a value) and false otherwise */
  public boolean isSetBizFilePid() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZFILEPID_ISSET_ID);
  }

  public void setBizFilePidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZFILEPID_ISSET_ID, value);
  }

  public String getFileName() {
    return this.fileName;
  }

  public ProjectArchiveFileDTO setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getFileType() {
    return this.fileType;
  }

  public ProjectArchiveFileDTO setFileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  public int getFileSize() {
    return this.fileSize;
  }

  public ProjectArchiveFileDTO setFileSize(int fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public String getUploadDttm() {
    return this.uploadDttm;
  }

  public ProjectArchiveFileDTO setUploadDttm(String uploadDttm) {
    this.uploadDttm = uploadDttm;
    return this;
  }

  public void unsetUploadDttm() {
    this.uploadDttm = null;
  }

  /** Returns true if field uploadDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadDttm() {
    return this.uploadDttm != null;
  }

  public void setUploadDttmIsSet(boolean value) {
    if (!value) {
      this.uploadDttm = null;
    }
  }

  public String getFileUrl() {
    return this.fileUrl;
  }

  public ProjectArchiveFileDTO setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  public void unsetFileUrl() {
    this.fileUrl = null;
  }

  /** Returns true if field fileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFileUrl() {
    return this.fileUrl != null;
  }

  public void setFileUrlIsSet(boolean value) {
    if (!value) {
      this.fileUrl = null;
    }
  }

  public int getFileBusType() {
    return this.fileBusType;
  }

  public ProjectArchiveFileDTO setFileBusType(int fileBusType) {
    this.fileBusType = fileBusType;
    setFileBusTypeIsSet(true);
    return this;
  }

  public void unsetFileBusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEBUSTYPE_ISSET_ID);
  }

  /** Returns true if field fileBusType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileBusType() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEBUSTYPE_ISSET_ID);
  }

  public void setFileBusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEBUSTYPE_ISSET_ID, value);
  }

  public String getFileBusTypeValue() {
    return this.fileBusTypeValue;
  }

  public ProjectArchiveFileDTO setFileBusTypeValue(String fileBusTypeValue) {
    this.fileBusTypeValue = fileBusTypeValue;
    return this;
  }

  public void unsetFileBusTypeValue() {
    this.fileBusTypeValue = null;
  }

  /** Returns true if field fileBusTypeValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFileBusTypeValue() {
    return this.fileBusTypeValue != null;
  }

  public void setFileBusTypeValueIsSet(boolean value) {
    if (!value) {
      this.fileBusTypeValue = null;
    }
  }

  public String getFileRemark() {
    return this.fileRemark;
  }

  public ProjectArchiveFileDTO setFileRemark(String fileRemark) {
    this.fileRemark = fileRemark;
    return this;
  }

  public void unsetFileRemark() {
    this.fileRemark = null;
  }

  /** Returns true if field fileRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetFileRemark() {
    return this.fileRemark != null;
  }

  public void setFileRemarkIsSet(boolean value) {
    if (!value) {
      this.fileRemark = null;
    }
  }

  public String getProjectArchiveFileName() {
    return this.projectArchiveFileName;
  }

  public ProjectArchiveFileDTO setProjectArchiveFileName(String projectArchiveFileName) {
    this.projectArchiveFileName = projectArchiveFileName;
    return this;
  }

  public void unsetProjectArchiveFileName() {
    this.projectArchiveFileName = null;
  }

  /** Returns true if field projectArchiveFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectArchiveFileName() {
    return this.projectArchiveFileName != null;
  }

  public void setProjectArchiveFileNameIsSet(boolean value) {
    if (!value) {
      this.projectArchiveFileName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BIZ_FILE_PID:
      if (value == null) {
        unsetBizFilePid();
      } else {
        setBizFilePid((Integer)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Integer)value);
      }
      break;

    case UPLOAD_DTTM:
      if (value == null) {
        unsetUploadDttm();
      } else {
        setUploadDttm((String)value);
      }
      break;

    case FILE_URL:
      if (value == null) {
        unsetFileUrl();
      } else {
        setFileUrl((String)value);
      }
      break;

    case FILE_BUS_TYPE:
      if (value == null) {
        unsetFileBusType();
      } else {
        setFileBusType((Integer)value);
      }
      break;

    case FILE_BUS_TYPE_VALUE:
      if (value == null) {
        unsetFileBusTypeValue();
      } else {
        setFileBusTypeValue((String)value);
      }
      break;

    case FILE_REMARK:
      if (value == null) {
        unsetFileRemark();
      } else {
        setFileRemark((String)value);
      }
      break;

    case PROJECT_ARCHIVE_FILE_NAME:
      if (value == null) {
        unsetProjectArchiveFileName();
      } else {
        setProjectArchiveFileName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIZ_FILE_PID:
      return Integer.valueOf(getBizFilePid());

    case FILE_NAME:
      return getFileName();

    case FILE_TYPE:
      return getFileType();

    case FILE_SIZE:
      return Integer.valueOf(getFileSize());

    case UPLOAD_DTTM:
      return getUploadDttm();

    case FILE_URL:
      return getFileUrl();

    case FILE_BUS_TYPE:
      return Integer.valueOf(getFileBusType());

    case FILE_BUS_TYPE_VALUE:
      return getFileBusTypeValue();

    case FILE_REMARK:
      return getFileRemark();

    case PROJECT_ARCHIVE_FILE_NAME:
      return getProjectArchiveFileName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIZ_FILE_PID:
      return isSetBizFilePid();
    case FILE_NAME:
      return isSetFileName();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_SIZE:
      return isSetFileSize();
    case UPLOAD_DTTM:
      return isSetUploadDttm();
    case FILE_URL:
      return isSetFileUrl();
    case FILE_BUS_TYPE:
      return isSetFileBusType();
    case FILE_BUS_TYPE_VALUE:
      return isSetFileBusTypeValue();
    case FILE_REMARK:
      return isSetFileRemark();
    case PROJECT_ARCHIVE_FILE_NAME:
      return isSetProjectArchiveFileName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectArchiveFileDTO)
      return this.equals((ProjectArchiveFileDTO)that);
    return false;
  }

  public boolean equals(ProjectArchiveFileDTO that) {
    if (that == null)
      return false;

    boolean this_present_bizFilePid = true;
    boolean that_present_bizFilePid = true;
    if (this_present_bizFilePid || that_present_bizFilePid) {
      if (!(this_present_bizFilePid && that_present_bizFilePid))
        return false;
      if (this.bizFilePid != that.bizFilePid)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_uploadDttm = true && this.isSetUploadDttm();
    boolean that_present_uploadDttm = true && that.isSetUploadDttm();
    if (this_present_uploadDttm || that_present_uploadDttm) {
      if (!(this_present_uploadDttm && that_present_uploadDttm))
        return false;
      if (!this.uploadDttm.equals(that.uploadDttm))
        return false;
    }

    boolean this_present_fileUrl = true && this.isSetFileUrl();
    boolean that_present_fileUrl = true && that.isSetFileUrl();
    if (this_present_fileUrl || that_present_fileUrl) {
      if (!(this_present_fileUrl && that_present_fileUrl))
        return false;
      if (!this.fileUrl.equals(that.fileUrl))
        return false;
    }

    boolean this_present_fileBusType = true;
    boolean that_present_fileBusType = true;
    if (this_present_fileBusType || that_present_fileBusType) {
      if (!(this_present_fileBusType && that_present_fileBusType))
        return false;
      if (this.fileBusType != that.fileBusType)
        return false;
    }

    boolean this_present_fileBusTypeValue = true && this.isSetFileBusTypeValue();
    boolean that_present_fileBusTypeValue = true && that.isSetFileBusTypeValue();
    if (this_present_fileBusTypeValue || that_present_fileBusTypeValue) {
      if (!(this_present_fileBusTypeValue && that_present_fileBusTypeValue))
        return false;
      if (!this.fileBusTypeValue.equals(that.fileBusTypeValue))
        return false;
    }

    boolean this_present_fileRemark = true && this.isSetFileRemark();
    boolean that_present_fileRemark = true && that.isSetFileRemark();
    if (this_present_fileRemark || that_present_fileRemark) {
      if (!(this_present_fileRemark && that_present_fileRemark))
        return false;
      if (!this.fileRemark.equals(that.fileRemark))
        return false;
    }

    boolean this_present_projectArchiveFileName = true && this.isSetProjectArchiveFileName();
    boolean that_present_projectArchiveFileName = true && that.isSetProjectArchiveFileName();
    if (this_present_projectArchiveFileName || that_present_projectArchiveFileName) {
      if (!(this_present_projectArchiveFileName && that_present_projectArchiveFileName))
        return false;
      if (!this.projectArchiveFileName.equals(that.projectArchiveFileName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bizFilePid = true;
    list.add(present_bizFilePid);
    if (present_bizFilePid)
      list.add(bizFilePid);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileType = true && (isSetFileType());
    list.add(present_fileType);
    if (present_fileType)
      list.add(fileType);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_uploadDttm = true && (isSetUploadDttm());
    list.add(present_uploadDttm);
    if (present_uploadDttm)
      list.add(uploadDttm);

    boolean present_fileUrl = true && (isSetFileUrl());
    list.add(present_fileUrl);
    if (present_fileUrl)
      list.add(fileUrl);

    boolean present_fileBusType = true;
    list.add(present_fileBusType);
    if (present_fileBusType)
      list.add(fileBusType);

    boolean present_fileBusTypeValue = true && (isSetFileBusTypeValue());
    list.add(present_fileBusTypeValue);
    if (present_fileBusTypeValue)
      list.add(fileBusTypeValue);

    boolean present_fileRemark = true && (isSetFileRemark());
    list.add(present_fileRemark);
    if (present_fileRemark)
      list.add(fileRemark);

    boolean present_projectArchiveFileName = true && (isSetProjectArchiveFileName());
    list.add(present_projectArchiveFileName);
    if (present_projectArchiveFileName)
      list.add(projectArchiveFileName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectArchiveFileDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBizFilePid()).compareTo(other.isSetBizFilePid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizFilePid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizFilePid, other.bizFilePid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadDttm()).compareTo(other.isSetUploadDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadDttm, other.uploadDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileUrl()).compareTo(other.isSetFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUrl, other.fileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileBusType()).compareTo(other.isSetFileBusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileBusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileBusType, other.fileBusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileBusTypeValue()).compareTo(other.isSetFileBusTypeValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileBusTypeValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileBusTypeValue, other.fileBusTypeValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileRemark()).compareTo(other.isSetFileRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileRemark, other.fileRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectArchiveFileName()).compareTo(other.isSetProjectArchiveFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectArchiveFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectArchiveFileName, other.projectArchiveFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectArchiveFileDTO(");
    boolean first = true;

    sb.append("bizFilePid:");
    sb.append(this.bizFilePid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadDttm:");
    if (this.uploadDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileUrl:");
    if (this.fileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileBusType:");
    sb.append(this.fileBusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileBusTypeValue:");
    if (this.fileBusTypeValue == null) {
      sb.append("null");
    } else {
      sb.append(this.fileBusTypeValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileRemark:");
    if (this.fileRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.fileRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectArchiveFileName:");
    if (this.projectArchiveFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectArchiveFileName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectArchiveFileDTOStandardSchemeFactory implements SchemeFactory {
    public ProjectArchiveFileDTOStandardScheme getScheme() {
      return new ProjectArchiveFileDTOStandardScheme();
    }
  }

  private static class ProjectArchiveFileDTOStandardScheme extends StandardScheme<ProjectArchiveFileDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectArchiveFileDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIZ_FILE_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizFilePid = iprot.readI32();
              struct.setBizFilePidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileType = iprot.readString();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSize = iprot.readI32();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPLOAD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadDttm = iprot.readString();
              struct.setUploadDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileUrl = iprot.readString();
              struct.setFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_BUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileBusType = iprot.readI32();
              struct.setFileBusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_BUS_TYPE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileBusTypeValue = iprot.readString();
              struct.setFileBusTypeValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileRemark = iprot.readString();
              struct.setFileRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROJECT_ARCHIVE_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectArchiveFileName = iprot.readString();
              struct.setProjectArchiveFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectArchiveFileDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BIZ_FILE_PID_FIELD_DESC);
      oprot.writeI32(struct.bizFilePid);
      oprot.writeFieldEnd();
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fileSize);
      oprot.writeFieldEnd();
      if (struct.uploadDttm != null) {
        oprot.writeFieldBegin(UPLOAD_DTTM_FIELD_DESC);
        oprot.writeString(struct.uploadDttm);
        oprot.writeFieldEnd();
      }
      if (struct.fileUrl != null) {
        oprot.writeFieldBegin(FILE_URL_FIELD_DESC);
        oprot.writeString(struct.fileUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_BUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.fileBusType);
      oprot.writeFieldEnd();
      if (struct.fileBusTypeValue != null) {
        oprot.writeFieldBegin(FILE_BUS_TYPE_VALUE_FIELD_DESC);
        oprot.writeString(struct.fileBusTypeValue);
        oprot.writeFieldEnd();
      }
      if (struct.fileRemark != null) {
        oprot.writeFieldBegin(FILE_REMARK_FIELD_DESC);
        oprot.writeString(struct.fileRemark);
        oprot.writeFieldEnd();
      }
      if (struct.projectArchiveFileName != null) {
        oprot.writeFieldBegin(PROJECT_ARCHIVE_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.projectArchiveFileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectArchiveFileDTOTupleSchemeFactory implements SchemeFactory {
    public ProjectArchiveFileDTOTupleScheme getScheme() {
      return new ProjectArchiveFileDTOTupleScheme();
    }
  }

  private static class ProjectArchiveFileDTOTupleScheme extends TupleScheme<ProjectArchiveFileDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectArchiveFileDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBizFilePid()) {
        optionals.set(0);
      }
      if (struct.isSetFileName()) {
        optionals.set(1);
      }
      if (struct.isSetFileType()) {
        optionals.set(2);
      }
      if (struct.isSetFileSize()) {
        optionals.set(3);
      }
      if (struct.isSetUploadDttm()) {
        optionals.set(4);
      }
      if (struct.isSetFileUrl()) {
        optionals.set(5);
      }
      if (struct.isSetFileBusType()) {
        optionals.set(6);
      }
      if (struct.isSetFileBusTypeValue()) {
        optionals.set(7);
      }
      if (struct.isSetFileRemark()) {
        optionals.set(8);
      }
      if (struct.isSetProjectArchiveFileName()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBizFilePid()) {
        oprot.writeI32(struct.bizFilePid);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFileType()) {
        oprot.writeString(struct.fileType);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI32(struct.fileSize);
      }
      if (struct.isSetUploadDttm()) {
        oprot.writeString(struct.uploadDttm);
      }
      if (struct.isSetFileUrl()) {
        oprot.writeString(struct.fileUrl);
      }
      if (struct.isSetFileBusType()) {
        oprot.writeI32(struct.fileBusType);
      }
      if (struct.isSetFileBusTypeValue()) {
        oprot.writeString(struct.fileBusTypeValue);
      }
      if (struct.isSetFileRemark()) {
        oprot.writeString(struct.fileRemark);
      }
      if (struct.isSetProjectArchiveFileName()) {
        oprot.writeString(struct.projectArchiveFileName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectArchiveFileDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.bizFilePid = iprot.readI32();
        struct.setBizFilePidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileType = iprot.readString();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileSize = iprot.readI32();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uploadDttm = iprot.readString();
        struct.setUploadDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileUrl = iprot.readString();
        struct.setFileUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fileBusType = iprot.readI32();
        struct.setFileBusTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fileBusTypeValue = iprot.readString();
        struct.setFileBusTypeValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fileRemark = iprot.readString();
        struct.setFileRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.projectArchiveFileName = iprot.readString();
        struct.setProjectArchiveFileNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.foreafterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-1")
public class TransitApplyReportIndex implements org.apache.thrift.TBase<TransitApplyReportIndex, TransitApplyReportIndex._Fields>, java.io.Serializable, Cloneable, Comparable<TransitApplyReportIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransitApplyReportIndex");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCEPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPORT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("reportDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UN_ASSURE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("unAssureCondition", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("houseProperyCondition", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LEGAL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("legalList", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransitApplyReportIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransitApplyReportIndexTupleSchemeFactory());
  }

  public int pid; // required
  public int exceptionId; // required
  public int userId; // required
  public String reportDate; // required
  public String unAssureCondition; // required
  public String houseProperyCondition; // required
  public String remark; // required
  public String createDate; // required
  public String createId; // required
  public String updateDate; // required
  public String updateId; // required
  public int projectId; // required
  public List<LegalIndex> legalList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    EXCEPTION_ID((short)2, "exceptionId"),
    USER_ID((short)3, "userId"),
    REPORT_DATE((short)4, "reportDate"),
    UN_ASSURE_CONDITION((short)5, "unAssureCondition"),
    HOUSE_PROPERY_CONDITION((short)6, "houseProperyCondition"),
    REMARK((short)7, "remark"),
    CREATE_DATE((short)8, "createDate"),
    CREATE_ID((short)9, "createId"),
    UPDATE_DATE((short)10, "updateDate"),
    UPDATE_ID((short)11, "updateId"),
    PROJECT_ID((short)12, "projectId"),
    LEGAL_LIST((short)13, "legalList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // EXCEPTION_ID
          return EXCEPTION_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // REPORT_DATE
          return REPORT_DATE;
        case 5: // UN_ASSURE_CONDITION
          return UN_ASSURE_CONDITION;
        case 6: // HOUSE_PROPERY_CONDITION
          return HOUSE_PROPERY_CONDITION;
        case 7: // REMARK
          return REMARK;
        case 8: // CREATE_DATE
          return CREATE_DATE;
        case 9: // CREATE_ID
          return CREATE_ID;
        case 10: // UPDATE_DATE
          return UPDATE_DATE;
        case 11: // UPDATE_ID
          return UPDATE_ID;
        case 12: // PROJECT_ID
          return PROJECT_ID;
        case 13: // LEGAL_LIST
          return LEGAL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __EXCEPTIONID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCEPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("exceptionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_DATE, new org.apache.thrift.meta_data.FieldMetaData("reportDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UN_ASSURE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("unAssureCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_PROPERY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("houseProperyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_ID, new org.apache.thrift.meta_data.FieldMetaData("createId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEGAL_LIST, new org.apache.thrift.meta_data.FieldMetaData("legalList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "LegalIndex"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransitApplyReportIndex.class, metaDataMap);
  }

  public TransitApplyReportIndex() {
  }

  public TransitApplyReportIndex(
    int pid,
    int exceptionId,
    int userId,
    String reportDate,
    String unAssureCondition,
    String houseProperyCondition,
    String remark,
    String createDate,
    String createId,
    String updateDate,
    String updateId,
    int projectId,
    List<LegalIndex> legalList)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.exceptionId = exceptionId;
    setExceptionIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.reportDate = reportDate;
    this.unAssureCondition = unAssureCondition;
    this.houseProperyCondition = houseProperyCondition;
    this.remark = remark;
    this.createDate = createDate;
    this.createId = createId;
    this.updateDate = updateDate;
    this.updateId = updateId;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.legalList = legalList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransitApplyReportIndex(TransitApplyReportIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.exceptionId = other.exceptionId;
    this.userId = other.userId;
    if (other.isSetReportDate()) {
      this.reportDate = other.reportDate;
    }
    if (other.isSetUnAssureCondition()) {
      this.unAssureCondition = other.unAssureCondition;
    }
    if (other.isSetHouseProperyCondition()) {
      this.houseProperyCondition = other.houseProperyCondition;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetCreateId()) {
      this.createId = other.createId;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetUpdateId()) {
      this.updateId = other.updateId;
    }
    this.projectId = other.projectId;
    if (other.isSetLegalList()) {
      List<LegalIndex> __this__legalList = new ArrayList<LegalIndex>(other.legalList.size());
      for (LegalIndex other_element : other.legalList) {
        __this__legalList.add(other_element);
      }
      this.legalList = __this__legalList;
    }
  }

  public TransitApplyReportIndex deepCopy() {
    return new TransitApplyReportIndex(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setExceptionIdIsSet(false);
    this.exceptionId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.reportDate = null;
    this.unAssureCondition = null;
    this.houseProperyCondition = null;
    this.remark = null;
    this.createDate = null;
    this.createId = null;
    this.updateDate = null;
    this.updateId = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.legalList = null;
  }

  public int getPid() {
    return this.pid;
  }

  public TransitApplyReportIndex setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getExceptionId() {
    return this.exceptionId;
  }

  public TransitApplyReportIndex setExceptionId(int exceptionId) {
    this.exceptionId = exceptionId;
    setExceptionIdIsSet(true);
    return this;
  }

  public void unsetExceptionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONID_ISSET_ID);
  }

  /** Returns true if field exceptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONID_ISSET_ID);
  }

  public void setExceptionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public TransitApplyReportIndex setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getReportDate() {
    return this.reportDate;
  }

  public TransitApplyReportIndex setReportDate(String reportDate) {
    this.reportDate = reportDate;
    return this;
  }

  public void unsetReportDate() {
    this.reportDate = null;
  }

  /** Returns true if field reportDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReportDate() {
    return this.reportDate != null;
  }

  public void setReportDateIsSet(boolean value) {
    if (!value) {
      this.reportDate = null;
    }
  }

  public String getUnAssureCondition() {
    return this.unAssureCondition;
  }

  public TransitApplyReportIndex setUnAssureCondition(String unAssureCondition) {
    this.unAssureCondition = unAssureCondition;
    return this;
  }

  public void unsetUnAssureCondition() {
    this.unAssureCondition = null;
  }

  /** Returns true if field unAssureCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetUnAssureCondition() {
    return this.unAssureCondition != null;
  }

  public void setUnAssureConditionIsSet(boolean value) {
    if (!value) {
      this.unAssureCondition = null;
    }
  }

  public String getHouseProperyCondition() {
    return this.houseProperyCondition;
  }

  public TransitApplyReportIndex setHouseProperyCondition(String houseProperyCondition) {
    this.houseProperyCondition = houseProperyCondition;
    return this;
  }

  public void unsetHouseProperyCondition() {
    this.houseProperyCondition = null;
  }

  /** Returns true if field houseProperyCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseProperyCondition() {
    return this.houseProperyCondition != null;
  }

  public void setHouseProperyConditionIsSet(boolean value) {
    if (!value) {
      this.houseProperyCondition = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public TransitApplyReportIndex setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public TransitApplyReportIndex setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getCreateId() {
    return this.createId;
  }

  public TransitApplyReportIndex setCreateId(String createId) {
    this.createId = createId;
    return this;
  }

  public void unsetCreateId() {
    this.createId = null;
  }

  /** Returns true if field createId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateId() {
    return this.createId != null;
  }

  public void setCreateIdIsSet(boolean value) {
    if (!value) {
      this.createId = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public TransitApplyReportIndex setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getUpdateId() {
    return this.updateId;
  }

  public TransitApplyReportIndex setUpdateId(String updateId) {
    this.updateId = updateId;
    return this;
  }

  public void unsetUpdateId() {
    this.updateId = null;
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return this.updateId != null;
  }

  public void setUpdateIdIsSet(boolean value) {
    if (!value) {
      this.updateId = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public TransitApplyReportIndex setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getLegalListSize() {
    return (this.legalList == null) ? 0 : this.legalList.size();
  }

  public java.util.Iterator<LegalIndex> getLegalListIterator() {
    return (this.legalList == null) ? null : this.legalList.iterator();
  }

  public void addToLegalList(LegalIndex elem) {
    if (this.legalList == null) {
      this.legalList = new ArrayList<LegalIndex>();
    }
    this.legalList.add(elem);
  }

  public List<LegalIndex> getLegalList() {
    return this.legalList;
  }

  public TransitApplyReportIndex setLegalList(List<LegalIndex> legalList) {
    this.legalList = legalList;
    return this;
  }

  public void unsetLegalList() {
    this.legalList = null;
  }

  /** Returns true if field legalList is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalList() {
    return this.legalList != null;
  }

  public void setLegalListIsSet(boolean value) {
    if (!value) {
      this.legalList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case EXCEPTION_ID:
      if (value == null) {
        unsetExceptionId();
      } else {
        setExceptionId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case REPORT_DATE:
      if (value == null) {
        unsetReportDate();
      } else {
        setReportDate((String)value);
      }
      break;

    case UN_ASSURE_CONDITION:
      if (value == null) {
        unsetUnAssureCondition();
      } else {
        setUnAssureCondition((String)value);
      }
      break;

    case HOUSE_PROPERY_CONDITION:
      if (value == null) {
        unsetHouseProperyCondition();
      } else {
        setHouseProperyCondition((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATE_ID:
      if (value == null) {
        unsetCreateId();
      } else {
        setCreateId((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LEGAL_LIST:
      if (value == null) {
        unsetLegalList();
      } else {
        setLegalList((List<LegalIndex>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case EXCEPTION_ID:
      return Integer.valueOf(getExceptionId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case REPORT_DATE:
      return getReportDate();

    case UN_ASSURE_CONDITION:
      return getUnAssureCondition();

    case HOUSE_PROPERY_CONDITION:
      return getHouseProperyCondition();

    case REMARK:
      return getRemark();

    case CREATE_DATE:
      return getCreateDate();

    case CREATE_ID:
      return getCreateId();

    case UPDATE_DATE:
      return getUpdateDate();

    case UPDATE_ID:
      return getUpdateId();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LEGAL_LIST:
      return getLegalList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case EXCEPTION_ID:
      return isSetExceptionId();
    case USER_ID:
      return isSetUserId();
    case REPORT_DATE:
      return isSetReportDate();
    case UN_ASSURE_CONDITION:
      return isSetUnAssureCondition();
    case HOUSE_PROPERY_CONDITION:
      return isSetHouseProperyCondition();
    case REMARK:
      return isSetRemark();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATE_ID:
      return isSetCreateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case UPDATE_ID:
      return isSetUpdateId();
    case PROJECT_ID:
      return isSetProjectId();
    case LEGAL_LIST:
      return isSetLegalList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransitApplyReportIndex)
      return this.equals((TransitApplyReportIndex)that);
    return false;
  }

  public boolean equals(TransitApplyReportIndex that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_exceptionId = true;
    boolean that_present_exceptionId = true;
    if (this_present_exceptionId || that_present_exceptionId) {
      if (!(this_present_exceptionId && that_present_exceptionId))
        return false;
      if (this.exceptionId != that.exceptionId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_reportDate = true && this.isSetReportDate();
    boolean that_present_reportDate = true && that.isSetReportDate();
    if (this_present_reportDate || that_present_reportDate) {
      if (!(this_present_reportDate && that_present_reportDate))
        return false;
      if (!this.reportDate.equals(that.reportDate))
        return false;
    }

    boolean this_present_unAssureCondition = true && this.isSetUnAssureCondition();
    boolean that_present_unAssureCondition = true && that.isSetUnAssureCondition();
    if (this_present_unAssureCondition || that_present_unAssureCondition) {
      if (!(this_present_unAssureCondition && that_present_unAssureCondition))
        return false;
      if (!this.unAssureCondition.equals(that.unAssureCondition))
        return false;
    }

    boolean this_present_houseProperyCondition = true && this.isSetHouseProperyCondition();
    boolean that_present_houseProperyCondition = true && that.isSetHouseProperyCondition();
    if (this_present_houseProperyCondition || that_present_houseProperyCondition) {
      if (!(this_present_houseProperyCondition && that_present_houseProperyCondition))
        return false;
      if (!this.houseProperyCondition.equals(that.houseProperyCondition))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createId = true && this.isSetCreateId();
    boolean that_present_createId = true && that.isSetCreateId();
    if (this_present_createId || that_present_createId) {
      if (!(this_present_createId && that_present_createId))
        return false;
      if (!this.createId.equals(that.createId))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_updateId = true && this.isSetUpdateId();
    boolean that_present_updateId = true && that.isSetUpdateId();
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (!this.updateId.equals(that.updateId))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_legalList = true && this.isSetLegalList();
    boolean that_present_legalList = true && that.isSetLegalList();
    if (this_present_legalList || that_present_legalList) {
      if (!(this_present_legalList && that_present_legalList))
        return false;
      if (!this.legalList.equals(that.legalList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_exceptionId = true;
    list.add(present_exceptionId);
    if (present_exceptionId)
      list.add(exceptionId);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_reportDate = true && (isSetReportDate());
    list.add(present_reportDate);
    if (present_reportDate)
      list.add(reportDate);

    boolean present_unAssureCondition = true && (isSetUnAssureCondition());
    list.add(present_unAssureCondition);
    if (present_unAssureCondition)
      list.add(unAssureCondition);

    boolean present_houseProperyCondition = true && (isSetHouseProperyCondition());
    list.add(present_houseProperyCondition);
    if (present_houseProperyCondition)
      list.add(houseProperyCondition);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createId = true && (isSetCreateId());
    list.add(present_createId);
    if (present_createId)
      list.add(createId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_updateId = true && (isSetUpdateId());
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_legalList = true && (isSetLegalList());
    list.add(present_legalList);
    if (present_legalList)
      list.add(legalList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransitApplyReportIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionId()).compareTo(other.isSetExceptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionId, other.exceptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportDate()).compareTo(other.isSetReportDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportDate, other.reportDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnAssureCondition()).compareTo(other.isSetUnAssureCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnAssureCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unAssureCondition, other.unAssureCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseProperyCondition()).compareTo(other.isSetHouseProperyCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseProperyCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseProperyCondition, other.houseProperyCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateId()).compareTo(other.isSetCreateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createId, other.createId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalList()).compareTo(other.isSetLegalList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalList, other.legalList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransitApplyReportIndex(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionId:");
    sb.append(this.exceptionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportDate:");
    if (this.reportDate == null) {
      sb.append("null");
    } else {
      sb.append(this.reportDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unAssureCondition:");
    if (this.unAssureCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.unAssureCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseProperyCondition:");
    if (this.houseProperyCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.houseProperyCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createId:");
    if (this.createId == null) {
      sb.append("null");
    } else {
      sb.append(this.createId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    if (this.updateId == null) {
      sb.append("null");
    } else {
      sb.append(this.updateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalList:");
    if (this.legalList == null) {
      sb.append("null");
    } else {
      sb.append(this.legalList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransitApplyReportIndexStandardSchemeFactory implements SchemeFactory {
    public TransitApplyReportIndexStandardScheme getScheme() {
      return new TransitApplyReportIndexStandardScheme();
    }
  }

  private static class TransitApplyReportIndexStandardScheme extends StandardScheme<TransitApplyReportIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransitApplyReportIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCEPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exceptionId = iprot.readI32();
              struct.setExceptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPORT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportDate = iprot.readString();
              struct.setReportDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UN_ASSURE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unAssureCondition = iprot.readString();
              struct.setUnAssureConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOUSE_PROPERY_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseProperyCondition = iprot.readString();
              struct.setHouseProperyConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createId = iprot.readString();
              struct.setCreateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateId = iprot.readString();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LEGAL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.legalList = new ArrayList<LegalIndex>(_list24.size);
                LegalIndex _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new LegalIndex();
                  _elem25.read(iprot);
                  struct.legalList.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setLegalListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransitApplyReportIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_ID_FIELD_DESC);
      oprot.writeI32(struct.exceptionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.reportDate != null) {
        oprot.writeFieldBegin(REPORT_DATE_FIELD_DESC);
        oprot.writeString(struct.reportDate);
        oprot.writeFieldEnd();
      }
      if (struct.unAssureCondition != null) {
        oprot.writeFieldBegin(UN_ASSURE_CONDITION_FIELD_DESC);
        oprot.writeString(struct.unAssureCondition);
        oprot.writeFieldEnd();
      }
      if (struct.houseProperyCondition != null) {
        oprot.writeFieldBegin(HOUSE_PROPERY_CONDITION_FIELD_DESC);
        oprot.writeString(struct.houseProperyCondition);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.createId != null) {
        oprot.writeFieldBegin(CREATE_ID_FIELD_DESC);
        oprot.writeString(struct.createId);
        oprot.writeFieldEnd();
      }
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.updateId != null) {
        oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
        oprot.writeString(struct.updateId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.legalList != null) {
        oprot.writeFieldBegin(LEGAL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.legalList.size()));
          for (LegalIndex _iter27 : struct.legalList)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransitApplyReportIndexTupleSchemeFactory implements SchemeFactory {
    public TransitApplyReportIndexTupleScheme getScheme() {
      return new TransitApplyReportIndexTupleScheme();
    }
  }

  private static class TransitApplyReportIndexTupleScheme extends TupleScheme<TransitApplyReportIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransitApplyReportIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetExceptionId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetReportDate()) {
        optionals.set(3);
      }
      if (struct.isSetUnAssureCondition()) {
        optionals.set(4);
      }
      if (struct.isSetHouseProperyCondition()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(7);
      }
      if (struct.isSetCreateId()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(9);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(10);
      }
      if (struct.isSetProjectId()) {
        optionals.set(11);
      }
      if (struct.isSetLegalList()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetExceptionId()) {
        oprot.writeI32(struct.exceptionId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetReportDate()) {
        oprot.writeString(struct.reportDate);
      }
      if (struct.isSetUnAssureCondition()) {
        oprot.writeString(struct.unAssureCondition);
      }
      if (struct.isSetHouseProperyCondition()) {
        oprot.writeString(struct.houseProperyCondition);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreateId()) {
        oprot.writeString(struct.createId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeString(struct.updateId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLegalList()) {
        {
          oprot.writeI32(struct.legalList.size());
          for (LegalIndex _iter28 : struct.legalList)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransitApplyReportIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exceptionId = iprot.readI32();
        struct.setExceptionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reportDate = iprot.readString();
        struct.setReportDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.unAssureCondition = iprot.readString();
        struct.setUnAssureConditionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.houseProperyCondition = iprot.readString();
        struct.setHouseProperyConditionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createId = iprot.readString();
        struct.setCreateIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updateId = iprot.readString();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.legalList = new ArrayList<LegalIndex>(_list29.size);
          LegalIndex _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new LegalIndex();
            _elem30.read(iprot);
            struct.legalList.add(_elem30);
          }
        }
        struct.setLegalListIsSet(true);
      }
    }
  }

}


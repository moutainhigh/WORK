/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class RefundDetailsDTO implements org.apache.thrift.TBase<RefundDetailsDTO, RefundDetailsDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RefundDetailsDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundDetailsDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REFUND_PRO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundPro", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REFUND_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("refundMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccount", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundDetailsDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundDetailsDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int handleId; // required
  public int refundPro; // required
  public double refundMoney; // required
  public String recAccount; // required
  public String recName; // required
  public String payDate; // required
  public String operator; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    HANDLE_ID((short)2, "handleId"),
    REFUND_PRO((short)3, "refundPro"),
    REFUND_MONEY((short)4, "refundMoney"),
    REC_ACCOUNT((short)5, "recAccount"),
    REC_NAME((short)6, "recName"),
    PAY_DATE((short)7, "payDate"),
    OPERATOR((short)8, "operator"),
    CREATER_ID((short)9, "createrId"),
    USER_IDS((short)10, "userIds"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // HANDLE_ID
          return HANDLE_ID;
        case 3: // REFUND_PRO
          return REFUND_PRO;
        case 4: // REFUND_MONEY
          return REFUND_MONEY;
        case 5: // REC_ACCOUNT
          return REC_ACCOUNT;
        case 6: // REC_NAME
          return REC_NAME;
        case 7: // PAY_DATE
          return PAY_DATE;
        case 8: // OPERATOR
          return OPERATOR;
        case 9: // CREATER_ID
          return CREATER_ID;
        case 10: // USER_IDS
          return USER_IDS;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __HANDLEID_ISSET_ID = 1;
  private static final int __REFUNDPRO_ISSET_ID = 2;
  private static final int __REFUNDMONEY_ISSET_ID = 3;
  private static final int __CREATERID_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_PRO, new org.apache.thrift.meta_data.FieldMetaData("refundPro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_MONEY, new org.apache.thrift.meta_data.FieldMetaData("refundMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("recAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_NAME, new org.apache.thrift.meta_data.FieldMetaData("recName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("payDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundDetailsDTO.class, metaDataMap);
  }

  public RefundDetailsDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public RefundDetailsDTO(
    int pid,
    int handleId,
    int refundPro,
    double refundMoney,
    String recAccount,
    String recName,
    String payDate,
    String operator,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.handleId = handleId;
    setHandleIdIsSet(true);
    this.refundPro = refundPro;
    setRefundProIsSet(true);
    this.refundMoney = refundMoney;
    setRefundMoneyIsSet(true);
    this.recAccount = recAccount;
    this.recName = recName;
    this.payDate = payDate;
    this.operator = operator;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundDetailsDTO(RefundDetailsDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.handleId = other.handleId;
    this.refundPro = other.refundPro;
    this.refundMoney = other.refundMoney;
    if (other.isSetRecAccount()) {
      this.recAccount = other.recAccount;
    }
    if (other.isSetRecName()) {
      this.recName = other.recName;
    }
    if (other.isSetPayDate()) {
      this.payDate = other.payDate;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
  }

  public RefundDetailsDTO deepCopy() {
    return new RefundDetailsDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setHandleIdIsSet(false);
    this.handleId = 0;
    setRefundProIsSet(false);
    this.refundPro = 0;
    setRefundMoneyIsSet(false);
    this.refundMoney = 0.0;
    this.recAccount = null;
    this.recName = null;
    this.payDate = null;
    this.operator = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

  }

  public int getPid() {
    return this.pid;
  }

  public RefundDetailsDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getHandleId() {
    return this.handleId;
  }

  public RefundDetailsDTO setHandleId(int handleId) {
    this.handleId = handleId;
    setHandleIdIsSet(true);
    return this;
  }

  public void unsetHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  public void setHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
  }

  public int getRefundPro() {
    return this.refundPro;
  }

  public RefundDetailsDTO setRefundPro(int refundPro) {
    this.refundPro = refundPro;
    setRefundProIsSet(true);
    return this;
  }

  public void unsetRefundPro() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDPRO_ISSET_ID);
  }

  /** Returns true if field refundPro is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundPro() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDPRO_ISSET_ID);
  }

  public void setRefundProIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDPRO_ISSET_ID, value);
  }

  public double getRefundMoney() {
    return this.refundMoney;
  }

  public RefundDetailsDTO setRefundMoney(double refundMoney) {
    this.refundMoney = refundMoney;
    setRefundMoneyIsSet(true);
    return this;
  }

  public void unsetRefundMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDMONEY_ISSET_ID);
  }

  /** Returns true if field refundMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDMONEY_ISSET_ID);
  }

  public void setRefundMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDMONEY_ISSET_ID, value);
  }

  public String getRecAccount() {
    return this.recAccount;
  }

  public RefundDetailsDTO setRecAccount(String recAccount) {
    this.recAccount = recAccount;
    return this;
  }

  public void unsetRecAccount() {
    this.recAccount = null;
  }

  /** Returns true if field recAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccount() {
    return this.recAccount != null;
  }

  public void setRecAccountIsSet(boolean value) {
    if (!value) {
      this.recAccount = null;
    }
  }

  public String getRecName() {
    return this.recName;
  }

  public RefundDetailsDTO setRecName(String recName) {
    this.recName = recName;
    return this;
  }

  public void unsetRecName() {
    this.recName = null;
  }

  /** Returns true if field recName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecName() {
    return this.recName != null;
  }

  public void setRecNameIsSet(boolean value) {
    if (!value) {
      this.recName = null;
    }
  }

  public String getPayDate() {
    return this.payDate;
  }

  public RefundDetailsDTO setPayDate(String payDate) {
    this.payDate = payDate;
    return this;
  }

  public void unsetPayDate() {
    this.payDate = null;
  }

  /** Returns true if field payDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPayDate() {
    return this.payDate != null;
  }

  public void setPayDateIsSet(boolean value) {
    if (!value) {
      this.payDate = null;
    }
  }

  public String getOperator() {
    return this.operator;
  }

  public RefundDetailsDTO setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public RefundDetailsDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public RefundDetailsDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public RefundDetailsDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RefundDetailsDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case HANDLE_ID:
      if (value == null) {
        unsetHandleId();
      } else {
        setHandleId((Integer)value);
      }
      break;

    case REFUND_PRO:
      if (value == null) {
        unsetRefundPro();
      } else {
        setRefundPro((Integer)value);
      }
      break;

    case REFUND_MONEY:
      if (value == null) {
        unsetRefundMoney();
      } else {
        setRefundMoney((Double)value);
      }
      break;

    case REC_ACCOUNT:
      if (value == null) {
        unsetRecAccount();
      } else {
        setRecAccount((String)value);
      }
      break;

    case REC_NAME:
      if (value == null) {
        unsetRecName();
      } else {
        setRecName((String)value);
      }
      break;

    case PAY_DATE:
      if (value == null) {
        unsetPayDate();
      } else {
        setPayDate((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case HANDLE_ID:
      return Integer.valueOf(getHandleId());

    case REFUND_PRO:
      return Integer.valueOf(getRefundPro());

    case REFUND_MONEY:
      return Double.valueOf(getRefundMoney());

    case REC_ACCOUNT:
      return getRecAccount();

    case REC_NAME:
      return getRecName();

    case PAY_DATE:
      return getPayDate();

    case OPERATOR:
      return getOperator();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case HANDLE_ID:
      return isSetHandleId();
    case REFUND_PRO:
      return isSetRefundPro();
    case REFUND_MONEY:
      return isSetRefundMoney();
    case REC_ACCOUNT:
      return isSetRecAccount();
    case REC_NAME:
      return isSetRecName();
    case PAY_DATE:
      return isSetPayDate();
    case OPERATOR:
      return isSetOperator();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundDetailsDTO)
      return this.equals((RefundDetailsDTO)that);
    return false;
  }

  public boolean equals(RefundDetailsDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_handleId = true;
    boolean that_present_handleId = true;
    if (this_present_handleId || that_present_handleId) {
      if (!(this_present_handleId && that_present_handleId))
        return false;
      if (this.handleId != that.handleId)
        return false;
    }

    boolean this_present_refundPro = true;
    boolean that_present_refundPro = true;
    if (this_present_refundPro || that_present_refundPro) {
      if (!(this_present_refundPro && that_present_refundPro))
        return false;
      if (this.refundPro != that.refundPro)
        return false;
    }

    boolean this_present_refundMoney = true;
    boolean that_present_refundMoney = true;
    if (this_present_refundMoney || that_present_refundMoney) {
      if (!(this_present_refundMoney && that_present_refundMoney))
        return false;
      if (this.refundMoney != that.refundMoney)
        return false;
    }

    boolean this_present_recAccount = true && this.isSetRecAccount();
    boolean that_present_recAccount = true && that.isSetRecAccount();
    if (this_present_recAccount || that_present_recAccount) {
      if (!(this_present_recAccount && that_present_recAccount))
        return false;
      if (!this.recAccount.equals(that.recAccount))
        return false;
    }

    boolean this_present_recName = true && this.isSetRecName();
    boolean that_present_recName = true && that.isSetRecName();
    if (this_present_recName || that_present_recName) {
      if (!(this_present_recName && that_present_recName))
        return false;
      if (!this.recName.equals(that.recName))
        return false;
    }

    boolean this_present_payDate = true && this.isSetPayDate();
    boolean that_present_payDate = true && that.isSetPayDate();
    if (this_present_payDate || that_present_payDate) {
      if (!(this_present_payDate && that_present_payDate))
        return false;
      if (!this.payDate.equals(that.payDate))
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_handleId = true;
    list.add(present_handleId);
    if (present_handleId)
      list.add(handleId);

    boolean present_refundPro = true;
    list.add(present_refundPro);
    if (present_refundPro)
      list.add(refundPro);

    boolean present_refundMoney = true;
    list.add(present_refundMoney);
    if (present_refundMoney)
      list.add(refundMoney);

    boolean present_recAccount = true && (isSetRecAccount());
    list.add(present_recAccount);
    if (present_recAccount)
      list.add(recAccount);

    boolean present_recName = true && (isSetRecName());
    list.add(present_recName);
    if (present_recName)
      list.add(recName);

    boolean present_payDate = true && (isSetPayDate());
    list.add(present_payDate);
    if (present_payDate)
      list.add(payDate);

    boolean present_operator = true && (isSetOperator());
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(RefundDetailsDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundPro()).compareTo(other.isSetRefundPro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundPro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundPro, other.refundPro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundMoney()).compareTo(other.isSetRefundMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundMoney, other.refundMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccount()).compareTo(other.isSetRecAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccount, other.recAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecName()).compareTo(other.isSetRecName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recName, other.recName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayDate()).compareTo(other.isSetPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payDate, other.payDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundDetailsDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleId:");
    sb.append(this.handleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundPro:");
    sb.append(this.refundPro);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundMoney:");
    sb.append(this.refundMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccount:");
    if (this.recAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recName:");
    if (this.recName == null) {
      sb.append("null");
    } else {
      sb.append(this.recName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payDate:");
    if (this.payDate == null) {
      sb.append("null");
    } else {
      sb.append(this.payDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundDetailsDTOStandardSchemeFactory implements SchemeFactory {
    public RefundDetailsDTOStandardScheme getScheme() {
      return new RefundDetailsDTOStandardScheme();
    }
  }

  private static class RefundDetailsDTOStandardScheme extends StandardScheme<RefundDetailsDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundDetailsDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleId = iprot.readI32();
              struct.setHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REFUND_PRO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundPro = iprot.readI32();
              struct.setRefundProIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFUND_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundMoney = iprot.readDouble();
              struct.setRefundMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REC_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccount = iprot.readString();
              struct.setRecAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recName = iprot.readString();
              struct.setRecNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payDate = iprot.readString();
              struct.setPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list80.size);
                int _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = iprot.readI32();
                  struct.userIds.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundDetailsDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.handleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_PRO_FIELD_DESC);
      oprot.writeI32(struct.refundPro);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.refundMoney);
      oprot.writeFieldEnd();
      if (struct.recAccount != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.recAccount);
        oprot.writeFieldEnd();
      }
      if (struct.recName != null) {
        oprot.writeFieldBegin(REC_NAME_FIELD_DESC);
        oprot.writeString(struct.recName);
        oprot.writeFieldEnd();
      }
      if (struct.payDate != null) {
        oprot.writeFieldBegin(PAY_DATE_FIELD_DESC);
        oprot.writeString(struct.payDate);
        oprot.writeFieldEnd();
      }
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeString(struct.operator);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter83 : struct.userIds)
          {
            oprot.writeI32(_iter83);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundDetailsDTOTupleSchemeFactory implements SchemeFactory {
    public RefundDetailsDTOTupleScheme getScheme() {
      return new RefundDetailsDTOTupleScheme();
    }
  }

  private static class RefundDetailsDTOTupleScheme extends TupleScheme<RefundDetailsDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundDetailsDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetHandleId()) {
        optionals.set(1);
      }
      if (struct.isSetRefundPro()) {
        optionals.set(2);
      }
      if (struct.isSetRefundMoney()) {
        optionals.set(3);
      }
      if (struct.isSetRecAccount()) {
        optionals.set(4);
      }
      if (struct.isSetRecName()) {
        optionals.set(5);
      }
      if (struct.isSetPayDate()) {
        optionals.set(6);
      }
      if (struct.isSetOperator()) {
        optionals.set(7);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(8);
      }
      if (struct.isSetUserIds()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetHandleId()) {
        oprot.writeI32(struct.handleId);
      }
      if (struct.isSetRefundPro()) {
        oprot.writeI32(struct.refundPro);
      }
      if (struct.isSetRefundMoney()) {
        oprot.writeDouble(struct.refundMoney);
      }
      if (struct.isSetRecAccount()) {
        oprot.writeString(struct.recAccount);
      }
      if (struct.isSetRecName()) {
        oprot.writeString(struct.recName);
      }
      if (struct.isSetPayDate()) {
        oprot.writeString(struct.payDate);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter84 : struct.userIds)
          {
            oprot.writeI32(_iter84);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundDetailsDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.handleId = iprot.readI32();
        struct.setHandleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refundPro = iprot.readI32();
        struct.setRefundProIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refundMoney = iprot.readDouble();
        struct.setRefundMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recAccount = iprot.readString();
        struct.setRecAccountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recName = iprot.readString();
        struct.setRecNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.payDate = iprot.readString();
        struct.setPayDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list85.size);
          int _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = iprot.readI32();
            struct.userIds.add(_elem86);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


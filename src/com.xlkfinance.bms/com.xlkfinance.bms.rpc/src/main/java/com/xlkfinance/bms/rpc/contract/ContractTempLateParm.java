/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ContractTempLateParm implements org.apache.thrift.TBase<ContractTempLateParm, ContractTempLateParm._Fields>, java.io.Serializable, Cloneable, Comparable<ContractTempLateParm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractTempLateParm");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTemplateId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MATCH_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("matchFlag", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MATCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SHOW_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("showIndex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isTable", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField VAL_CONVERT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("valConvertFlag", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractTempLateParmStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractTempLateParmTupleSchemeFactory());
  }

  public int pid; // required
  public int contractTemplateId; // required
  public String matchFlag; // required
  public String matchName; // required
  public int showIndex; // required
  public int outputType; // required
  public int isTable; // required
  public int valConvertFlag; // required
  public int page; // required
  public int rows; // required
  public int total; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CONTRACT_TEMPLATE_ID((short)2, "contractTemplateId"),
    MATCH_FLAG((short)3, "matchFlag"),
    MATCH_NAME((short)4, "matchName"),
    SHOW_INDEX((short)5, "showIndex"),
    OUTPUT_TYPE((short)6, "outputType"),
    IS_TABLE((short)7, "isTable"),
    VAL_CONVERT_FLAG((short)8, "valConvertFlag"),
    PAGE((short)9, "page"),
    ROWS((short)10, "rows"),
    TOTAL((short)11, "total"),
    STATUS((short)12, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CONTRACT_TEMPLATE_ID
          return CONTRACT_TEMPLATE_ID;
        case 3: // MATCH_FLAG
          return MATCH_FLAG;
        case 4: // MATCH_NAME
          return MATCH_NAME;
        case 5: // SHOW_INDEX
          return SHOW_INDEX;
        case 6: // OUTPUT_TYPE
          return OUTPUT_TYPE;
        case 7: // IS_TABLE
          return IS_TABLE;
        case 8: // VAL_CONVERT_FLAG
          return VAL_CONVERT_FLAG;
        case 9: // PAGE
          return PAGE;
        case 10: // ROWS
          return ROWS;
        case 11: // TOTAL
          return TOTAL;
        case 12: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CONTRACTTEMPLATEID_ISSET_ID = 1;
  private static final int __SHOWINDEX_ISSET_ID = 2;
  private static final int __OUTPUTTYPE_ISSET_ID = 3;
  private static final int __ISTABLE_ISSET_ID = 4;
  private static final int __VALCONVERTFLAG_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private static final int __TOTAL_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("contractTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_FLAG, new org.apache.thrift.meta_data.FieldMetaData("matchFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("matchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOW_INDEX, new org.apache.thrift.meta_data.FieldMetaData("showIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("outputType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TABLE, new org.apache.thrift.meta_data.FieldMetaData("isTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VAL_CONVERT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("valConvertFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractTempLateParm.class, metaDataMap);
  }

  public ContractTempLateParm() {
  }

  public ContractTempLateParm(
    int pid,
    int contractTemplateId,
    String matchFlag,
    String matchName,
    int showIndex,
    int outputType,
    int isTable,
    int valConvertFlag,
    int page,
    int rows,
    int total,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.contractTemplateId = contractTemplateId;
    setContractTemplateIdIsSet(true);
    this.matchFlag = matchFlag;
    this.matchName = matchName;
    this.showIndex = showIndex;
    setShowIndexIsSet(true);
    this.outputType = outputType;
    setOutputTypeIsSet(true);
    this.isTable = isTable;
    setIsTableIsSet(true);
    this.valConvertFlag = valConvertFlag;
    setValConvertFlagIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractTempLateParm(ContractTempLateParm other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.contractTemplateId = other.contractTemplateId;
    if (other.isSetMatchFlag()) {
      this.matchFlag = other.matchFlag;
    }
    if (other.isSetMatchName()) {
      this.matchName = other.matchName;
    }
    this.showIndex = other.showIndex;
    this.outputType = other.outputType;
    this.isTable = other.isTable;
    this.valConvertFlag = other.valConvertFlag;
    this.page = other.page;
    this.rows = other.rows;
    this.total = other.total;
    this.status = other.status;
  }

  public ContractTempLateParm deepCopy() {
    return new ContractTempLateParm(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setContractTemplateIdIsSet(false);
    this.contractTemplateId = 0;
    this.matchFlag = null;
    this.matchName = null;
    setShowIndexIsSet(false);
    this.showIndex = 0;
    setOutputTypeIsSet(false);
    this.outputType = 0;
    setIsTableIsSet(false);
    this.isTable = 0;
    setValConvertFlagIsSet(false);
    this.valConvertFlag = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setTotalIsSet(false);
    this.total = 0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ContractTempLateParm setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getContractTemplateId() {
    return this.contractTemplateId;
  }

  public ContractTempLateParm setContractTemplateId(int contractTemplateId) {
    this.contractTemplateId = contractTemplateId;
    setContractTemplateIdIsSet(true);
    return this;
  }

  public void unsetContractTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID);
  }

  /** Returns true if field contractTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID);
  }

  public void setContractTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID, value);
  }

  public String getMatchFlag() {
    return this.matchFlag;
  }

  public ContractTempLateParm setMatchFlag(String matchFlag) {
    this.matchFlag = matchFlag;
    return this;
  }

  public void unsetMatchFlag() {
    this.matchFlag = null;
  }

  /** Returns true if field matchFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchFlag() {
    return this.matchFlag != null;
  }

  public void setMatchFlagIsSet(boolean value) {
    if (!value) {
      this.matchFlag = null;
    }
  }

  public String getMatchName() {
    return this.matchName;
  }

  public ContractTempLateParm setMatchName(String matchName) {
    this.matchName = matchName;
    return this;
  }

  public void unsetMatchName() {
    this.matchName = null;
  }

  /** Returns true if field matchName is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchName() {
    return this.matchName != null;
  }

  public void setMatchNameIsSet(boolean value) {
    if (!value) {
      this.matchName = null;
    }
  }

  public int getShowIndex() {
    return this.showIndex;
  }

  public ContractTempLateParm setShowIndex(int showIndex) {
    this.showIndex = showIndex;
    setShowIndexIsSet(true);
    return this;
  }

  public void unsetShowIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWINDEX_ISSET_ID);
  }

  /** Returns true if field showIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetShowIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWINDEX_ISSET_ID);
  }

  public void setShowIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWINDEX_ISSET_ID, value);
  }

  public int getOutputType() {
    return this.outputType;
  }

  public ContractTempLateParm setOutputType(int outputType) {
    this.outputType = outputType;
    setOutputTypeIsSet(true);
    return this;
  }

  public void unsetOutputType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUTTYPE_ISSET_ID);
  }

  /** Returns true if field outputType is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputType() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUTTYPE_ISSET_ID);
  }

  public void setOutputTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUTTYPE_ISSET_ID, value);
  }

  public int getIsTable() {
    return this.isTable;
  }

  public ContractTempLateParm setIsTable(int isTable) {
    this.isTable = isTable;
    setIsTableIsSet(true);
    return this;
  }

  public void unsetIsTable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTABLE_ISSET_ID);
  }

  /** Returns true if field isTable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTABLE_ISSET_ID);
  }

  public void setIsTableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTABLE_ISSET_ID, value);
  }

  public int getValConvertFlag() {
    return this.valConvertFlag;
  }

  public ContractTempLateParm setValConvertFlag(int valConvertFlag) {
    this.valConvertFlag = valConvertFlag;
    setValConvertFlagIsSet(true);
    return this;
  }

  public void unsetValConvertFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALCONVERTFLAG_ISSET_ID);
  }

  /** Returns true if field valConvertFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetValConvertFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __VALCONVERTFLAG_ISSET_ID);
  }

  public void setValConvertFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALCONVERTFLAG_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ContractTempLateParm setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ContractTempLateParm setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public ContractTempLateParm setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ContractTempLateParm setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CONTRACT_TEMPLATE_ID:
      if (value == null) {
        unsetContractTemplateId();
      } else {
        setContractTemplateId((Integer)value);
      }
      break;

    case MATCH_FLAG:
      if (value == null) {
        unsetMatchFlag();
      } else {
        setMatchFlag((String)value);
      }
      break;

    case MATCH_NAME:
      if (value == null) {
        unsetMatchName();
      } else {
        setMatchName((String)value);
      }
      break;

    case SHOW_INDEX:
      if (value == null) {
        unsetShowIndex();
      } else {
        setShowIndex((Integer)value);
      }
      break;

    case OUTPUT_TYPE:
      if (value == null) {
        unsetOutputType();
      } else {
        setOutputType((Integer)value);
      }
      break;

    case IS_TABLE:
      if (value == null) {
        unsetIsTable();
      } else {
        setIsTable((Integer)value);
      }
      break;

    case VAL_CONVERT_FLAG:
      if (value == null) {
        unsetValConvertFlag();
      } else {
        setValConvertFlag((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CONTRACT_TEMPLATE_ID:
      return Integer.valueOf(getContractTemplateId());

    case MATCH_FLAG:
      return getMatchFlag();

    case MATCH_NAME:
      return getMatchName();

    case SHOW_INDEX:
      return Integer.valueOf(getShowIndex());

    case OUTPUT_TYPE:
      return Integer.valueOf(getOutputType());

    case IS_TABLE:
      return Integer.valueOf(getIsTable());

    case VAL_CONVERT_FLAG:
      return Integer.valueOf(getValConvertFlag());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case TOTAL:
      return Integer.valueOf(getTotal());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CONTRACT_TEMPLATE_ID:
      return isSetContractTemplateId();
    case MATCH_FLAG:
      return isSetMatchFlag();
    case MATCH_NAME:
      return isSetMatchName();
    case SHOW_INDEX:
      return isSetShowIndex();
    case OUTPUT_TYPE:
      return isSetOutputType();
    case IS_TABLE:
      return isSetIsTable();
    case VAL_CONVERT_FLAG:
      return isSetValConvertFlag();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case TOTAL:
      return isSetTotal();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractTempLateParm)
      return this.equals((ContractTempLateParm)that);
    return false;
  }

  public boolean equals(ContractTempLateParm that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_contractTemplateId = true;
    boolean that_present_contractTemplateId = true;
    if (this_present_contractTemplateId || that_present_contractTemplateId) {
      if (!(this_present_contractTemplateId && that_present_contractTemplateId))
        return false;
      if (this.contractTemplateId != that.contractTemplateId)
        return false;
    }

    boolean this_present_matchFlag = true && this.isSetMatchFlag();
    boolean that_present_matchFlag = true && that.isSetMatchFlag();
    if (this_present_matchFlag || that_present_matchFlag) {
      if (!(this_present_matchFlag && that_present_matchFlag))
        return false;
      if (!this.matchFlag.equals(that.matchFlag))
        return false;
    }

    boolean this_present_matchName = true && this.isSetMatchName();
    boolean that_present_matchName = true && that.isSetMatchName();
    if (this_present_matchName || that_present_matchName) {
      if (!(this_present_matchName && that_present_matchName))
        return false;
      if (!this.matchName.equals(that.matchName))
        return false;
    }

    boolean this_present_showIndex = true;
    boolean that_present_showIndex = true;
    if (this_present_showIndex || that_present_showIndex) {
      if (!(this_present_showIndex && that_present_showIndex))
        return false;
      if (this.showIndex != that.showIndex)
        return false;
    }

    boolean this_present_outputType = true;
    boolean that_present_outputType = true;
    if (this_present_outputType || that_present_outputType) {
      if (!(this_present_outputType && that_present_outputType))
        return false;
      if (this.outputType != that.outputType)
        return false;
    }

    boolean this_present_isTable = true;
    boolean that_present_isTable = true;
    if (this_present_isTable || that_present_isTable) {
      if (!(this_present_isTable && that_present_isTable))
        return false;
      if (this.isTable != that.isTable)
        return false;
    }

    boolean this_present_valConvertFlag = true;
    boolean that_present_valConvertFlag = true;
    if (this_present_valConvertFlag || that_present_valConvertFlag) {
      if (!(this_present_valConvertFlag && that_present_valConvertFlag))
        return false;
      if (this.valConvertFlag != that.valConvertFlag)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_contractTemplateId = true;
    list.add(present_contractTemplateId);
    if (present_contractTemplateId)
      list.add(contractTemplateId);

    boolean present_matchFlag = true && (isSetMatchFlag());
    list.add(present_matchFlag);
    if (present_matchFlag)
      list.add(matchFlag);

    boolean present_matchName = true && (isSetMatchName());
    list.add(present_matchName);
    if (present_matchName)
      list.add(matchName);

    boolean present_showIndex = true;
    list.add(present_showIndex);
    if (present_showIndex)
      list.add(showIndex);

    boolean present_outputType = true;
    list.add(present_outputType);
    if (present_outputType)
      list.add(outputType);

    boolean present_isTable = true;
    list.add(present_isTable);
    if (present_isTable)
      list.add(isTable);

    boolean present_valConvertFlag = true;
    list.add(present_valConvertFlag);
    if (present_valConvertFlag)
      list.add(valConvertFlag);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContractTempLateParm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTemplateId()).compareTo(other.isSetContractTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTemplateId, other.contractTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchFlag()).compareTo(other.isSetMatchFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchFlag, other.matchFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchName()).compareTo(other.isSetMatchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchName, other.matchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowIndex()).compareTo(other.isSetShowIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showIndex, other.showIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputType()).compareTo(other.isSetOutputType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputType, other.outputType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTable()).compareTo(other.isSetIsTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTable, other.isTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValConvertFlag()).compareTo(other.isSetValConvertFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValConvertFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valConvertFlag, other.valConvertFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractTempLateParm(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractTemplateId:");
    sb.append(this.contractTemplateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchFlag:");
    if (this.matchFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.matchFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchName:");
    if (this.matchName == null) {
      sb.append("null");
    } else {
      sb.append(this.matchName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("showIndex:");
    sb.append(this.showIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputType:");
    sb.append(this.outputType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTable:");
    sb.append(this.isTable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("valConvertFlag:");
    sb.append(this.valConvertFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractTempLateParmStandardSchemeFactory implements SchemeFactory {
    public ContractTempLateParmStandardScheme getScheme() {
      return new ContractTempLateParmStandardScheme();
    }
  }

  private static class ContractTempLateParmStandardScheme extends StandardScheme<ContractTempLateParm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractTempLateParm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractTemplateId = iprot.readI32();
              struct.setContractTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MATCH_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchFlag = iprot.readString();
              struct.setMatchFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MATCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchName = iprot.readString();
              struct.setMatchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOW_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showIndex = iprot.readI32();
              struct.setShowIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outputType = iprot.readI32();
              struct.setOutputTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isTable = iprot.readI32();
              struct.setIsTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VAL_CONVERT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valConvertFlag = iprot.readI32();
              struct.setValConvertFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractTempLateParm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.contractTemplateId);
      oprot.writeFieldEnd();
      if (struct.matchFlag != null) {
        oprot.writeFieldBegin(MATCH_FLAG_FIELD_DESC);
        oprot.writeString(struct.matchFlag);
        oprot.writeFieldEnd();
      }
      if (struct.matchName != null) {
        oprot.writeFieldBegin(MATCH_NAME_FIELD_DESC);
        oprot.writeString(struct.matchName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOW_INDEX_FIELD_DESC);
      oprot.writeI32(struct.showIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.outputType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TABLE_FIELD_DESC);
      oprot.writeI32(struct.isTable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VAL_CONVERT_FLAG_FIELD_DESC);
      oprot.writeI32(struct.valConvertFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractTempLateParmTupleSchemeFactory implements SchemeFactory {
    public ContractTempLateParmTupleScheme getScheme() {
      return new ContractTempLateParmTupleScheme();
    }
  }

  private static class ContractTempLateParmTupleScheme extends TupleScheme<ContractTempLateParm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractTempLateParm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetContractTemplateId()) {
        optionals.set(1);
      }
      if (struct.isSetMatchFlag()) {
        optionals.set(2);
      }
      if (struct.isSetMatchName()) {
        optionals.set(3);
      }
      if (struct.isSetShowIndex()) {
        optionals.set(4);
      }
      if (struct.isSetOutputType()) {
        optionals.set(5);
      }
      if (struct.isSetIsTable()) {
        optionals.set(6);
      }
      if (struct.isSetValConvertFlag()) {
        optionals.set(7);
      }
      if (struct.isSetPage()) {
        optionals.set(8);
      }
      if (struct.isSetRows()) {
        optionals.set(9);
      }
      if (struct.isSetTotal()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetContractTemplateId()) {
        oprot.writeI32(struct.contractTemplateId);
      }
      if (struct.isSetMatchFlag()) {
        oprot.writeString(struct.matchFlag);
      }
      if (struct.isSetMatchName()) {
        oprot.writeString(struct.matchName);
      }
      if (struct.isSetShowIndex()) {
        oprot.writeI32(struct.showIndex);
      }
      if (struct.isSetOutputType()) {
        oprot.writeI32(struct.outputType);
      }
      if (struct.isSetIsTable()) {
        oprot.writeI32(struct.isTable);
      }
      if (struct.isSetValConvertFlag()) {
        oprot.writeI32(struct.valConvertFlag);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractTempLateParm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractTemplateId = iprot.readI32();
        struct.setContractTemplateIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.matchFlag = iprot.readString();
        struct.setMatchFlagIsSet(true);
      }
      if (incoming.get(3)) {
        struct.matchName = iprot.readString();
        struct.setMatchNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.showIndex = iprot.readI32();
        struct.setShowIndexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.outputType = iprot.readI32();
        struct.setOutputTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isTable = iprot.readI32();
        struct.setIsTableIsSet(true);
      }
      if (incoming.get(7)) {
        struct.valConvertFlag = iprot.readI32();
        struct.setValConvertFlagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


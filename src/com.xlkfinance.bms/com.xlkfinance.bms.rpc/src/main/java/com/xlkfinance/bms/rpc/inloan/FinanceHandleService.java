/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class FinanceHandleService {

  public interface Iface {

    public List<FinanceIndexDTO> queryFinanceIndex(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException;

    public int getFinanceIndexTotal(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException;

    public List<FinanceIndexDTO> queryFinanceCollectFeeIndex(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException;

    public int getFinanceCollectFeeIndexTotal(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException;

    public List<FinanceHandleDTO> findAllFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException;

    public int getFinanceHandleTotal(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException;

    public boolean addFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException;

    public FinanceHandleDTO getFinanceHandleById(int pid) throws org.apache.thrift.TException;

    public boolean updateFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException;

    public List<ApplyFinanceHandleDTO> findAllApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException;

    public int getApplyFinanceHandleTotal(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException;

    public boolean addApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException;

    public ApplyFinanceHandleDTO getApplyFinanceHandleById(int pid) throws org.apache.thrift.TException;

    public FinanceHandleDTO getFinanceHandleByProjectId(int projectId) throws org.apache.thrift.TException;

    public ApplyFinanceHandleDTO getByProjectIdAndRecPro(int projectId, int recPro) throws org.apache.thrift.TException;

    public boolean makeLoans(ApplyFinanceHandleDTO applyFinanceHandleDTO, int userId, int isLoanFinish, int houseClerkId) throws org.apache.thrift.TException;

    public boolean updateApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException;

    public ApplyFinanceHandleDTO getNewRecApplyFinance(int projectId) throws org.apache.thrift.TException;

    public double getRecMoney(int projectId, List<Integer> recPros) throws org.apache.thrift.TException;

    public int addFinanceHandleByExtension(int projectId) throws org.apache.thrift.TException;

    public int collectExtensionFee(FinanceHandleDTO financeHandleDTO, ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException;

    public boolean collectFee(List<ApplyFinanceHandleDTO> applyFinanceHandleList) throws org.apache.thrift.TException;

    public boolean collectFddFee(ApplyFinanceHandleDTO applyFinanceHandle) throws org.apache.thrift.TException;

    public List<ApplyFinanceHandleDTO> getLoanHisByProjectId(int projectId, String productNum) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryFinanceIndex(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceIndexTotal(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryFinanceCollectFeeIndex(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceCollectFeeIndexTotal(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllFinanceHandle(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceHandleTotal(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addFinanceHandle(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceHandleById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFinanceHandle(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplyFinanceHandleTotal(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplyFinanceHandleById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceHandleByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getByProjectIdAndRecPro(int projectId, int recPro, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void makeLoans(ApplyFinanceHandleDTO applyFinanceHandleDTO, int userId, int isLoanFinish, int houseClerkId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewRecApplyFinance(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecMoney(int projectId, List<Integer> recPros, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addFinanceHandleByExtension(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void collectExtensionFee(FinanceHandleDTO financeHandleDTO, ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void collectFee(List<ApplyFinanceHandleDTO> applyFinanceHandleList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void collectFddFee(ApplyFinanceHandleDTO applyFinanceHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoanHisByProjectId(int projectId, String productNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<FinanceIndexDTO> queryFinanceIndex(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      send_queryFinanceIndex(financeIndexDTO);
      return recv_queryFinanceIndex();
    }

    public void send_queryFinanceIndex(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      queryFinanceIndex_args args = new queryFinanceIndex_args();
      args.setFinanceIndexDTO(financeIndexDTO);
      sendBase("queryFinanceIndex", args);
    }

    public List<FinanceIndexDTO> recv_queryFinanceIndex() throws org.apache.thrift.TException
    {
      queryFinanceIndex_result result = new queryFinanceIndex_result();
      receiveBase(result, "queryFinanceIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryFinanceIndex failed: unknown result");
    }

    public int getFinanceIndexTotal(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      send_getFinanceIndexTotal(financeIndexDTO);
      return recv_getFinanceIndexTotal();
    }

    public void send_getFinanceIndexTotal(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      getFinanceIndexTotal_args args = new getFinanceIndexTotal_args();
      args.setFinanceIndexDTO(financeIndexDTO);
      sendBase("getFinanceIndexTotal", args);
    }

    public int recv_getFinanceIndexTotal() throws org.apache.thrift.TException
    {
      getFinanceIndexTotal_result result = new getFinanceIndexTotal_result();
      receiveBase(result, "getFinanceIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceIndexTotal failed: unknown result");
    }

    public List<FinanceIndexDTO> queryFinanceCollectFeeIndex(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      send_queryFinanceCollectFeeIndex(financeIndexDTO);
      return recv_queryFinanceCollectFeeIndex();
    }

    public void send_queryFinanceCollectFeeIndex(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      queryFinanceCollectFeeIndex_args args = new queryFinanceCollectFeeIndex_args();
      args.setFinanceIndexDTO(financeIndexDTO);
      sendBase("queryFinanceCollectFeeIndex", args);
    }

    public List<FinanceIndexDTO> recv_queryFinanceCollectFeeIndex() throws org.apache.thrift.TException
    {
      queryFinanceCollectFeeIndex_result result = new queryFinanceCollectFeeIndex_result();
      receiveBase(result, "queryFinanceCollectFeeIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryFinanceCollectFeeIndex failed: unknown result");
    }

    public int getFinanceCollectFeeIndexTotal(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      send_getFinanceCollectFeeIndexTotal(financeIndexDTO);
      return recv_getFinanceCollectFeeIndexTotal();
    }

    public void send_getFinanceCollectFeeIndexTotal(FinanceIndexDTO financeIndexDTO) throws org.apache.thrift.TException
    {
      getFinanceCollectFeeIndexTotal_args args = new getFinanceCollectFeeIndexTotal_args();
      args.setFinanceIndexDTO(financeIndexDTO);
      sendBase("getFinanceCollectFeeIndexTotal", args);
    }

    public int recv_getFinanceCollectFeeIndexTotal() throws org.apache.thrift.TException
    {
      getFinanceCollectFeeIndexTotal_result result = new getFinanceCollectFeeIndexTotal_result();
      receiveBase(result, "getFinanceCollectFeeIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceCollectFeeIndexTotal failed: unknown result");
    }

    public List<FinanceHandleDTO> findAllFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      send_findAllFinanceHandle(financeHandleDTO);
      return recv_findAllFinanceHandle();
    }

    public void send_findAllFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      findAllFinanceHandle_args args = new findAllFinanceHandle_args();
      args.setFinanceHandleDTO(financeHandleDTO);
      sendBase("findAllFinanceHandle", args);
    }

    public List<FinanceHandleDTO> recv_findAllFinanceHandle() throws org.apache.thrift.TException
    {
      findAllFinanceHandle_result result = new findAllFinanceHandle_result();
      receiveBase(result, "findAllFinanceHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllFinanceHandle failed: unknown result");
    }

    public int getFinanceHandleTotal(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      send_getFinanceHandleTotal(financeHandleDTO);
      return recv_getFinanceHandleTotal();
    }

    public void send_getFinanceHandleTotal(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      getFinanceHandleTotal_args args = new getFinanceHandleTotal_args();
      args.setFinanceHandleDTO(financeHandleDTO);
      sendBase("getFinanceHandleTotal", args);
    }

    public int recv_getFinanceHandleTotal() throws org.apache.thrift.TException
    {
      getFinanceHandleTotal_result result = new getFinanceHandleTotal_result();
      receiveBase(result, "getFinanceHandleTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceHandleTotal failed: unknown result");
    }

    public boolean addFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      send_addFinanceHandle(financeHandleDTO);
      return recv_addFinanceHandle();
    }

    public void send_addFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      addFinanceHandle_args args = new addFinanceHandle_args();
      args.setFinanceHandleDTO(financeHandleDTO);
      sendBase("addFinanceHandle", args);
    }

    public boolean recv_addFinanceHandle() throws org.apache.thrift.TException
    {
      addFinanceHandle_result result = new addFinanceHandle_result();
      receiveBase(result, "addFinanceHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addFinanceHandle failed: unknown result");
    }

    public FinanceHandleDTO getFinanceHandleById(int pid) throws org.apache.thrift.TException
    {
      send_getFinanceHandleById(pid);
      return recv_getFinanceHandleById();
    }

    public void send_getFinanceHandleById(int pid) throws org.apache.thrift.TException
    {
      getFinanceHandleById_args args = new getFinanceHandleById_args();
      args.setPid(pid);
      sendBase("getFinanceHandleById", args);
    }

    public FinanceHandleDTO recv_getFinanceHandleById() throws org.apache.thrift.TException
    {
      getFinanceHandleById_result result = new getFinanceHandleById_result();
      receiveBase(result, "getFinanceHandleById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceHandleById failed: unknown result");
    }

    public boolean updateFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      send_updateFinanceHandle(financeHandleDTO);
      return recv_updateFinanceHandle();
    }

    public void send_updateFinanceHandle(FinanceHandleDTO financeHandleDTO) throws org.apache.thrift.TException
    {
      updateFinanceHandle_args args = new updateFinanceHandle_args();
      args.setFinanceHandleDTO(financeHandleDTO);
      sendBase("updateFinanceHandle", args);
    }

    public boolean recv_updateFinanceHandle() throws org.apache.thrift.TException
    {
      updateFinanceHandle_result result = new updateFinanceHandle_result();
      receiveBase(result, "updateFinanceHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFinanceHandle failed: unknown result");
    }

    public List<ApplyFinanceHandleDTO> findAllApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      send_findAllApplyFinanceHandle(applyFinanceHandleDTO);
      return recv_findAllApplyFinanceHandle();
    }

    public void send_findAllApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      findAllApplyFinanceHandle_args args = new findAllApplyFinanceHandle_args();
      args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
      sendBase("findAllApplyFinanceHandle", args);
    }

    public List<ApplyFinanceHandleDTO> recv_findAllApplyFinanceHandle() throws org.apache.thrift.TException
    {
      findAllApplyFinanceHandle_result result = new findAllApplyFinanceHandle_result();
      receiveBase(result, "findAllApplyFinanceHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllApplyFinanceHandle failed: unknown result");
    }

    public int getApplyFinanceHandleTotal(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      send_getApplyFinanceHandleTotal(applyFinanceHandleDTO);
      return recv_getApplyFinanceHandleTotal();
    }

    public void send_getApplyFinanceHandleTotal(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      getApplyFinanceHandleTotal_args args = new getApplyFinanceHandleTotal_args();
      args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
      sendBase("getApplyFinanceHandleTotal", args);
    }

    public int recv_getApplyFinanceHandleTotal() throws org.apache.thrift.TException
    {
      getApplyFinanceHandleTotal_result result = new getApplyFinanceHandleTotal_result();
      receiveBase(result, "getApplyFinanceHandleTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplyFinanceHandleTotal failed: unknown result");
    }

    public boolean addApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      send_addApplyFinanceHandle(applyFinanceHandleDTO);
      return recv_addApplyFinanceHandle();
    }

    public void send_addApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      addApplyFinanceHandle_args args = new addApplyFinanceHandle_args();
      args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
      sendBase("addApplyFinanceHandle", args);
    }

    public boolean recv_addApplyFinanceHandle() throws org.apache.thrift.TException
    {
      addApplyFinanceHandle_result result = new addApplyFinanceHandle_result();
      receiveBase(result, "addApplyFinanceHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addApplyFinanceHandle failed: unknown result");
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandleById(int pid) throws org.apache.thrift.TException
    {
      send_getApplyFinanceHandleById(pid);
      return recv_getApplyFinanceHandleById();
    }

    public void send_getApplyFinanceHandleById(int pid) throws org.apache.thrift.TException
    {
      getApplyFinanceHandleById_args args = new getApplyFinanceHandleById_args();
      args.setPid(pid);
      sendBase("getApplyFinanceHandleById", args);
    }

    public ApplyFinanceHandleDTO recv_getApplyFinanceHandleById() throws org.apache.thrift.TException
    {
      getApplyFinanceHandleById_result result = new getApplyFinanceHandleById_result();
      receiveBase(result, "getApplyFinanceHandleById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplyFinanceHandleById failed: unknown result");
    }

    public FinanceHandleDTO getFinanceHandleByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getFinanceHandleByProjectId(projectId);
      return recv_getFinanceHandleByProjectId();
    }

    public void send_getFinanceHandleByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getFinanceHandleByProjectId_args args = new getFinanceHandleByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getFinanceHandleByProjectId", args);
    }

    public FinanceHandleDTO recv_getFinanceHandleByProjectId() throws org.apache.thrift.TException
    {
      getFinanceHandleByProjectId_result result = new getFinanceHandleByProjectId_result();
      receiveBase(result, "getFinanceHandleByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceHandleByProjectId failed: unknown result");
    }

    public ApplyFinanceHandleDTO getByProjectIdAndRecPro(int projectId, int recPro) throws org.apache.thrift.TException
    {
      send_getByProjectIdAndRecPro(projectId, recPro);
      return recv_getByProjectIdAndRecPro();
    }

    public void send_getByProjectIdAndRecPro(int projectId, int recPro) throws org.apache.thrift.TException
    {
      getByProjectIdAndRecPro_args args = new getByProjectIdAndRecPro_args();
      args.setProjectId(projectId);
      args.setRecPro(recPro);
      sendBase("getByProjectIdAndRecPro", args);
    }

    public ApplyFinanceHandleDTO recv_getByProjectIdAndRecPro() throws org.apache.thrift.TException
    {
      getByProjectIdAndRecPro_result result = new getByProjectIdAndRecPro_result();
      receiveBase(result, "getByProjectIdAndRecPro");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getByProjectIdAndRecPro failed: unknown result");
    }

    public boolean makeLoans(ApplyFinanceHandleDTO applyFinanceHandleDTO, int userId, int isLoanFinish, int houseClerkId) throws org.apache.thrift.TException
    {
      send_makeLoans(applyFinanceHandleDTO, userId, isLoanFinish, houseClerkId);
      return recv_makeLoans();
    }

    public void send_makeLoans(ApplyFinanceHandleDTO applyFinanceHandleDTO, int userId, int isLoanFinish, int houseClerkId) throws org.apache.thrift.TException
    {
      makeLoans_args args = new makeLoans_args();
      args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
      args.setUserId(userId);
      args.setIsLoanFinish(isLoanFinish);
      args.setHouseClerkId(houseClerkId);
      sendBase("makeLoans", args);
    }

    public boolean recv_makeLoans() throws org.apache.thrift.TException
    {
      makeLoans_result result = new makeLoans_result();
      receiveBase(result, "makeLoans");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeLoans failed: unknown result");
    }

    public boolean updateApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      send_updateApplyFinanceHandle(applyFinanceHandleDTO);
      return recv_updateApplyFinanceHandle();
    }

    public void send_updateApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      updateApplyFinanceHandle_args args = new updateApplyFinanceHandle_args();
      args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
      sendBase("updateApplyFinanceHandle", args);
    }

    public boolean recv_updateApplyFinanceHandle() throws org.apache.thrift.TException
    {
      updateApplyFinanceHandle_result result = new updateApplyFinanceHandle_result();
      receiveBase(result, "updateApplyFinanceHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateApplyFinanceHandle failed: unknown result");
    }

    public ApplyFinanceHandleDTO getNewRecApplyFinance(int projectId) throws org.apache.thrift.TException
    {
      send_getNewRecApplyFinance(projectId);
      return recv_getNewRecApplyFinance();
    }

    public void send_getNewRecApplyFinance(int projectId) throws org.apache.thrift.TException
    {
      getNewRecApplyFinance_args args = new getNewRecApplyFinance_args();
      args.setProjectId(projectId);
      sendBase("getNewRecApplyFinance", args);
    }

    public ApplyFinanceHandleDTO recv_getNewRecApplyFinance() throws org.apache.thrift.TException
    {
      getNewRecApplyFinance_result result = new getNewRecApplyFinance_result();
      receiveBase(result, "getNewRecApplyFinance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewRecApplyFinance failed: unknown result");
    }

    public double getRecMoney(int projectId, List<Integer> recPros) throws org.apache.thrift.TException
    {
      send_getRecMoney(projectId, recPros);
      return recv_getRecMoney();
    }

    public void send_getRecMoney(int projectId, List<Integer> recPros) throws org.apache.thrift.TException
    {
      getRecMoney_args args = new getRecMoney_args();
      args.setProjectId(projectId);
      args.setRecPros(recPros);
      sendBase("getRecMoney", args);
    }

    public double recv_getRecMoney() throws org.apache.thrift.TException
    {
      getRecMoney_result result = new getRecMoney_result();
      receiveBase(result, "getRecMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecMoney failed: unknown result");
    }

    public int addFinanceHandleByExtension(int projectId) throws org.apache.thrift.TException
    {
      send_addFinanceHandleByExtension(projectId);
      return recv_addFinanceHandleByExtension();
    }

    public void send_addFinanceHandleByExtension(int projectId) throws org.apache.thrift.TException
    {
      addFinanceHandleByExtension_args args = new addFinanceHandleByExtension_args();
      args.setProjectId(projectId);
      sendBase("addFinanceHandleByExtension", args);
    }

    public int recv_addFinanceHandleByExtension() throws org.apache.thrift.TException
    {
      addFinanceHandleByExtension_result result = new addFinanceHandleByExtension_result();
      receiveBase(result, "addFinanceHandleByExtension");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addFinanceHandleByExtension failed: unknown result");
    }

    public int collectExtensionFee(FinanceHandleDTO financeHandleDTO, ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      send_collectExtensionFee(financeHandleDTO, applyFinanceHandleDTO);
      return recv_collectExtensionFee();
    }

    public void send_collectExtensionFee(FinanceHandleDTO financeHandleDTO, ApplyFinanceHandleDTO applyFinanceHandleDTO) throws org.apache.thrift.TException
    {
      collectExtensionFee_args args = new collectExtensionFee_args();
      args.setFinanceHandleDTO(financeHandleDTO);
      args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
      sendBase("collectExtensionFee", args);
    }

    public int recv_collectExtensionFee() throws org.apache.thrift.TException
    {
      collectExtensionFee_result result = new collectExtensionFee_result();
      receiveBase(result, "collectExtensionFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "collectExtensionFee failed: unknown result");
    }

    public boolean collectFee(List<ApplyFinanceHandleDTO> applyFinanceHandleList) throws org.apache.thrift.TException
    {
      send_collectFee(applyFinanceHandleList);
      return recv_collectFee();
    }

    public void send_collectFee(List<ApplyFinanceHandleDTO> applyFinanceHandleList) throws org.apache.thrift.TException
    {
      collectFee_args args = new collectFee_args();
      args.setApplyFinanceHandleList(applyFinanceHandleList);
      sendBase("collectFee", args);
    }

    public boolean recv_collectFee() throws org.apache.thrift.TException
    {
      collectFee_result result = new collectFee_result();
      receiveBase(result, "collectFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "collectFee failed: unknown result");
    }

    public boolean collectFddFee(ApplyFinanceHandleDTO applyFinanceHandle) throws org.apache.thrift.TException
    {
      send_collectFddFee(applyFinanceHandle);
      return recv_collectFddFee();
    }

    public void send_collectFddFee(ApplyFinanceHandleDTO applyFinanceHandle) throws org.apache.thrift.TException
    {
      collectFddFee_args args = new collectFddFee_args();
      args.setApplyFinanceHandle(applyFinanceHandle);
      sendBase("collectFddFee", args);
    }

    public boolean recv_collectFddFee() throws org.apache.thrift.TException
    {
      collectFddFee_result result = new collectFddFee_result();
      receiveBase(result, "collectFddFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "collectFddFee failed: unknown result");
    }

    public List<ApplyFinanceHandleDTO> getLoanHisByProjectId(int projectId, String productNum) throws org.apache.thrift.TException
    {
      send_getLoanHisByProjectId(projectId, productNum);
      return recv_getLoanHisByProjectId();
    }

    public void send_getLoanHisByProjectId(int projectId, String productNum) throws org.apache.thrift.TException
    {
      getLoanHisByProjectId_args args = new getLoanHisByProjectId_args();
      args.setProjectId(projectId);
      args.setProductNum(productNum);
      sendBase("getLoanHisByProjectId", args);
    }

    public List<ApplyFinanceHandleDTO> recv_getLoanHisByProjectId() throws org.apache.thrift.TException
    {
      getLoanHisByProjectId_result result = new getLoanHisByProjectId_result();
      receiveBase(result, "getLoanHisByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoanHisByProjectId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryFinanceIndex(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryFinanceIndex_call method_call = new queryFinanceIndex_call(financeIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryFinanceIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceIndexDTO financeIndexDTO;
      public queryFinanceIndex_call(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeIndexDTO = financeIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryFinanceIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryFinanceIndex_args args = new queryFinanceIndex_args();
        args.setFinanceIndexDTO(financeIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinanceIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryFinanceIndex();
      }
    }

    public void getFinanceIndexTotal(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceIndexTotal_call method_call = new getFinanceIndexTotal_call(financeIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceIndexDTO financeIndexDTO;
      public getFinanceIndexTotal_call(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeIndexDTO = financeIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceIndexTotal_args args = new getFinanceIndexTotal_args();
        args.setFinanceIndexDTO(financeIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceIndexTotal();
      }
    }

    public void queryFinanceCollectFeeIndex(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryFinanceCollectFeeIndex_call method_call = new queryFinanceCollectFeeIndex_call(financeIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryFinanceCollectFeeIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceIndexDTO financeIndexDTO;
      public queryFinanceCollectFeeIndex_call(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeIndexDTO = financeIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryFinanceCollectFeeIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryFinanceCollectFeeIndex_args args = new queryFinanceCollectFeeIndex_args();
        args.setFinanceIndexDTO(financeIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinanceIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryFinanceCollectFeeIndex();
      }
    }

    public void getFinanceCollectFeeIndexTotal(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceCollectFeeIndexTotal_call method_call = new getFinanceCollectFeeIndexTotal_call(financeIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceCollectFeeIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceIndexDTO financeIndexDTO;
      public getFinanceCollectFeeIndexTotal_call(FinanceIndexDTO financeIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeIndexDTO = financeIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceCollectFeeIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceCollectFeeIndexTotal_args args = new getFinanceCollectFeeIndexTotal_args();
        args.setFinanceIndexDTO(financeIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceCollectFeeIndexTotal();
      }
    }

    public void findAllFinanceHandle(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllFinanceHandle_call method_call = new findAllFinanceHandle_call(financeHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllFinanceHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceHandleDTO financeHandleDTO;
      public findAllFinanceHandle_call(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeHandleDTO = financeHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllFinanceHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllFinanceHandle_args args = new findAllFinanceHandle_args();
        args.setFinanceHandleDTO(financeHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinanceHandleDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllFinanceHandle();
      }
    }

    public void getFinanceHandleTotal(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceHandleTotal_call method_call = new getFinanceHandleTotal_call(financeHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceHandleTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceHandleDTO financeHandleDTO;
      public getFinanceHandleTotal_call(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeHandleDTO = financeHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceHandleTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceHandleTotal_args args = new getFinanceHandleTotal_args();
        args.setFinanceHandleDTO(financeHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceHandleTotal();
      }
    }

    public void addFinanceHandle(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFinanceHandle_call method_call = new addFinanceHandle_call(financeHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFinanceHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceHandleDTO financeHandleDTO;
      public addFinanceHandle_call(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeHandleDTO = financeHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFinanceHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFinanceHandle_args args = new addFinanceHandle_args();
        args.setFinanceHandleDTO(financeHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addFinanceHandle();
      }
    }

    public void getFinanceHandleById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceHandleById_call method_call = new getFinanceHandleById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceHandleById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getFinanceHandleById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceHandleById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceHandleById_args args = new getFinanceHandleById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceHandleDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceHandleById();
      }
    }

    public void updateFinanceHandle(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFinanceHandle_call method_call = new updateFinanceHandle_call(financeHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFinanceHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceHandleDTO financeHandleDTO;
      public updateFinanceHandle_call(FinanceHandleDTO financeHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeHandleDTO = financeHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFinanceHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFinanceHandle_args args = new updateFinanceHandle_args();
        args.setFinanceHandleDTO(financeHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateFinanceHandle();
      }
    }

    public void findAllApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllApplyFinanceHandle_call method_call = new findAllApplyFinanceHandle_call(applyFinanceHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllApplyFinanceHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyFinanceHandleDTO applyFinanceHandleDTO;
      public findAllApplyFinanceHandle_call(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllApplyFinanceHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllApplyFinanceHandle_args args = new findAllApplyFinanceHandle_args();
        args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ApplyFinanceHandleDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllApplyFinanceHandle();
      }
    }

    public void getApplyFinanceHandleTotal(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplyFinanceHandleTotal_call method_call = new getApplyFinanceHandleTotal_call(applyFinanceHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplyFinanceHandleTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyFinanceHandleDTO applyFinanceHandleDTO;
      public getApplyFinanceHandleTotal_call(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplyFinanceHandleTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplyFinanceHandleTotal_args args = new getApplyFinanceHandleTotal_args();
        args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplyFinanceHandleTotal();
      }
    }

    public void addApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addApplyFinanceHandle_call method_call = new addApplyFinanceHandle_call(applyFinanceHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addApplyFinanceHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyFinanceHandleDTO applyFinanceHandleDTO;
      public addApplyFinanceHandle_call(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addApplyFinanceHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addApplyFinanceHandle_args args = new addApplyFinanceHandle_args();
        args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addApplyFinanceHandle();
      }
    }

    public void getApplyFinanceHandleById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplyFinanceHandleById_call method_call = new getApplyFinanceHandleById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplyFinanceHandleById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getApplyFinanceHandleById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplyFinanceHandleById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplyFinanceHandleById_args args = new getApplyFinanceHandleById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApplyFinanceHandleDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplyFinanceHandleById();
      }
    }

    public void getFinanceHandleByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceHandleByProjectId_call method_call = new getFinanceHandleByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceHandleByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getFinanceHandleByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceHandleByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceHandleByProjectId_args args = new getFinanceHandleByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceHandleDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceHandleByProjectId();
      }
    }

    public void getByProjectIdAndRecPro(int projectId, int recPro, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getByProjectIdAndRecPro_call method_call = new getByProjectIdAndRecPro_call(projectId, recPro, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getByProjectIdAndRecPro_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private int recPro;
      public getByProjectIdAndRecPro_call(int projectId, int recPro, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.recPro = recPro;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getByProjectIdAndRecPro", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getByProjectIdAndRecPro_args args = new getByProjectIdAndRecPro_args();
        args.setProjectId(projectId);
        args.setRecPro(recPro);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApplyFinanceHandleDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getByProjectIdAndRecPro();
      }
    }

    public void makeLoans(ApplyFinanceHandleDTO applyFinanceHandleDTO, int userId, int isLoanFinish, int houseClerkId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeLoans_call method_call = new makeLoans_call(applyFinanceHandleDTO, userId, isLoanFinish, houseClerkId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeLoans_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyFinanceHandleDTO applyFinanceHandleDTO;
      private int userId;
      private int isLoanFinish;
      private int houseClerkId;
      public makeLoans_call(ApplyFinanceHandleDTO applyFinanceHandleDTO, int userId, int isLoanFinish, int houseClerkId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyFinanceHandleDTO = applyFinanceHandleDTO;
        this.userId = userId;
        this.isLoanFinish = isLoanFinish;
        this.houseClerkId = houseClerkId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeLoans", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeLoans_args args = new makeLoans_args();
        args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
        args.setUserId(userId);
        args.setIsLoanFinish(isLoanFinish);
        args.setHouseClerkId(houseClerkId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeLoans();
      }
    }

    public void updateApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateApplyFinanceHandle_call method_call = new updateApplyFinanceHandle_call(applyFinanceHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateApplyFinanceHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyFinanceHandleDTO applyFinanceHandleDTO;
      public updateApplyFinanceHandle_call(ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateApplyFinanceHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateApplyFinanceHandle_args args = new updateApplyFinanceHandle_args();
        args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateApplyFinanceHandle();
      }
    }

    public void getNewRecApplyFinance(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewRecApplyFinance_call method_call = new getNewRecApplyFinance_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewRecApplyFinance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getNewRecApplyFinance_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewRecApplyFinance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewRecApplyFinance_args args = new getNewRecApplyFinance_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApplyFinanceHandleDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNewRecApplyFinance();
      }
    }

    public void getRecMoney(int projectId, List<Integer> recPros, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecMoney_call method_call = new getRecMoney_call(projectId, recPros, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private List<Integer> recPros;
      public getRecMoney_call(int projectId, List<Integer> recPros, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.recPros = recPros;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecMoney_args args = new getRecMoney_args();
        args.setProjectId(projectId);
        args.setRecPros(recPros);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecMoney();
      }
    }

    public void addFinanceHandleByExtension(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFinanceHandleByExtension_call method_call = new addFinanceHandleByExtension_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFinanceHandleByExtension_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public addFinanceHandleByExtension_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFinanceHandleByExtension", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFinanceHandleByExtension_args args = new addFinanceHandleByExtension_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addFinanceHandleByExtension();
      }
    }

    public void collectExtensionFee(FinanceHandleDTO financeHandleDTO, ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      collectExtensionFee_call method_call = new collectExtensionFee_call(financeHandleDTO, applyFinanceHandleDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class collectExtensionFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceHandleDTO financeHandleDTO;
      private ApplyFinanceHandleDTO applyFinanceHandleDTO;
      public collectExtensionFee_call(FinanceHandleDTO financeHandleDTO, ApplyFinanceHandleDTO applyFinanceHandleDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeHandleDTO = financeHandleDTO;
        this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("collectExtensionFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        collectExtensionFee_args args = new collectExtensionFee_args();
        args.setFinanceHandleDTO(financeHandleDTO);
        args.setApplyFinanceHandleDTO(applyFinanceHandleDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_collectExtensionFee();
      }
    }

    public void collectFee(List<ApplyFinanceHandleDTO> applyFinanceHandleList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      collectFee_call method_call = new collectFee_call(applyFinanceHandleList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class collectFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ApplyFinanceHandleDTO> applyFinanceHandleList;
      public collectFee_call(List<ApplyFinanceHandleDTO> applyFinanceHandleList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyFinanceHandleList = applyFinanceHandleList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("collectFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        collectFee_args args = new collectFee_args();
        args.setApplyFinanceHandleList(applyFinanceHandleList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_collectFee();
      }
    }

    public void collectFddFee(ApplyFinanceHandleDTO applyFinanceHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      collectFddFee_call method_call = new collectFddFee_call(applyFinanceHandle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class collectFddFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplyFinanceHandleDTO applyFinanceHandle;
      public collectFddFee_call(ApplyFinanceHandleDTO applyFinanceHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyFinanceHandle = applyFinanceHandle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("collectFddFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        collectFddFee_args args = new collectFddFee_args();
        args.setApplyFinanceHandle(applyFinanceHandle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_collectFddFee();
      }
    }

    public void getLoanHisByProjectId(int projectId, String productNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoanHisByProjectId_call method_call = new getLoanHisByProjectId_call(projectId, productNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoanHisByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private String productNum;
      public getLoanHisByProjectId_call(int projectId, String productNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.productNum = productNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoanHisByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoanHisByProjectId_args args = new getLoanHisByProjectId_args();
        args.setProjectId(projectId);
        args.setProductNum(productNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ApplyFinanceHandleDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoanHisByProjectId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryFinanceIndex", new queryFinanceIndex());
      processMap.put("getFinanceIndexTotal", new getFinanceIndexTotal());
      processMap.put("queryFinanceCollectFeeIndex", new queryFinanceCollectFeeIndex());
      processMap.put("getFinanceCollectFeeIndexTotal", new getFinanceCollectFeeIndexTotal());
      processMap.put("findAllFinanceHandle", new findAllFinanceHandle());
      processMap.put("getFinanceHandleTotal", new getFinanceHandleTotal());
      processMap.put("addFinanceHandle", new addFinanceHandle());
      processMap.put("getFinanceHandleById", new getFinanceHandleById());
      processMap.put("updateFinanceHandle", new updateFinanceHandle());
      processMap.put("findAllApplyFinanceHandle", new findAllApplyFinanceHandle());
      processMap.put("getApplyFinanceHandleTotal", new getApplyFinanceHandleTotal());
      processMap.put("addApplyFinanceHandle", new addApplyFinanceHandle());
      processMap.put("getApplyFinanceHandleById", new getApplyFinanceHandleById());
      processMap.put("getFinanceHandleByProjectId", new getFinanceHandleByProjectId());
      processMap.put("getByProjectIdAndRecPro", new getByProjectIdAndRecPro());
      processMap.put("makeLoans", new makeLoans());
      processMap.put("updateApplyFinanceHandle", new updateApplyFinanceHandle());
      processMap.put("getNewRecApplyFinance", new getNewRecApplyFinance());
      processMap.put("getRecMoney", new getRecMoney());
      processMap.put("addFinanceHandleByExtension", new addFinanceHandleByExtension());
      processMap.put("collectExtensionFee", new collectExtensionFee());
      processMap.put("collectFee", new collectFee());
      processMap.put("collectFddFee", new collectFddFee());
      processMap.put("getLoanHisByProjectId", new getLoanHisByProjectId());
      return processMap;
    }

    public static class queryFinanceIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryFinanceIndex_args> {
      public queryFinanceIndex() {
        super("queryFinanceIndex");
      }

      public queryFinanceIndex_args getEmptyArgsInstance() {
        return new queryFinanceIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryFinanceIndex_result getResult(I iface, queryFinanceIndex_args args) throws org.apache.thrift.TException {
        queryFinanceIndex_result result = new queryFinanceIndex_result();
        result.success = iface.queryFinanceIndex(args.financeIndexDTO);
        return result;
      }
    }

    public static class getFinanceIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceIndexTotal_args> {
      public getFinanceIndexTotal() {
        super("getFinanceIndexTotal");
      }

      public getFinanceIndexTotal_args getEmptyArgsInstance() {
        return new getFinanceIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceIndexTotal_result getResult(I iface, getFinanceIndexTotal_args args) throws org.apache.thrift.TException {
        getFinanceIndexTotal_result result = new getFinanceIndexTotal_result();
        result.success = iface.getFinanceIndexTotal(args.financeIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryFinanceCollectFeeIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryFinanceCollectFeeIndex_args> {
      public queryFinanceCollectFeeIndex() {
        super("queryFinanceCollectFeeIndex");
      }

      public queryFinanceCollectFeeIndex_args getEmptyArgsInstance() {
        return new queryFinanceCollectFeeIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryFinanceCollectFeeIndex_result getResult(I iface, queryFinanceCollectFeeIndex_args args) throws org.apache.thrift.TException {
        queryFinanceCollectFeeIndex_result result = new queryFinanceCollectFeeIndex_result();
        result.success = iface.queryFinanceCollectFeeIndex(args.financeIndexDTO);
        return result;
      }
    }

    public static class getFinanceCollectFeeIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceCollectFeeIndexTotal_args> {
      public getFinanceCollectFeeIndexTotal() {
        super("getFinanceCollectFeeIndexTotal");
      }

      public getFinanceCollectFeeIndexTotal_args getEmptyArgsInstance() {
        return new getFinanceCollectFeeIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceCollectFeeIndexTotal_result getResult(I iface, getFinanceCollectFeeIndexTotal_args args) throws org.apache.thrift.TException {
        getFinanceCollectFeeIndexTotal_result result = new getFinanceCollectFeeIndexTotal_result();
        result.success = iface.getFinanceCollectFeeIndexTotal(args.financeIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllFinanceHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllFinanceHandle_args> {
      public findAllFinanceHandle() {
        super("findAllFinanceHandle");
      }

      public findAllFinanceHandle_args getEmptyArgsInstance() {
        return new findAllFinanceHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllFinanceHandle_result getResult(I iface, findAllFinanceHandle_args args) throws org.apache.thrift.TException {
        findAllFinanceHandle_result result = new findAllFinanceHandle_result();
        result.success = iface.findAllFinanceHandle(args.financeHandleDTO);
        return result;
      }
    }

    public static class getFinanceHandleTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceHandleTotal_args> {
      public getFinanceHandleTotal() {
        super("getFinanceHandleTotal");
      }

      public getFinanceHandleTotal_args getEmptyArgsInstance() {
        return new getFinanceHandleTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceHandleTotal_result getResult(I iface, getFinanceHandleTotal_args args) throws org.apache.thrift.TException {
        getFinanceHandleTotal_result result = new getFinanceHandleTotal_result();
        result.success = iface.getFinanceHandleTotal(args.financeHandleDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addFinanceHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFinanceHandle_args> {
      public addFinanceHandle() {
        super("addFinanceHandle");
      }

      public addFinanceHandle_args getEmptyArgsInstance() {
        return new addFinanceHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFinanceHandle_result getResult(I iface, addFinanceHandle_args args) throws org.apache.thrift.TException {
        addFinanceHandle_result result = new addFinanceHandle_result();
        result.success = iface.addFinanceHandle(args.financeHandleDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getFinanceHandleById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceHandleById_args> {
      public getFinanceHandleById() {
        super("getFinanceHandleById");
      }

      public getFinanceHandleById_args getEmptyArgsInstance() {
        return new getFinanceHandleById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceHandleById_result getResult(I iface, getFinanceHandleById_args args) throws org.apache.thrift.TException {
        getFinanceHandleById_result result = new getFinanceHandleById_result();
        result.success = iface.getFinanceHandleById(args.pid);
        return result;
      }
    }

    public static class updateFinanceHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFinanceHandle_args> {
      public updateFinanceHandle() {
        super("updateFinanceHandle");
      }

      public updateFinanceHandle_args getEmptyArgsInstance() {
        return new updateFinanceHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFinanceHandle_result getResult(I iface, updateFinanceHandle_args args) throws org.apache.thrift.TException {
        updateFinanceHandle_result result = new updateFinanceHandle_result();
        result.success = iface.updateFinanceHandle(args.financeHandleDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllApplyFinanceHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllApplyFinanceHandle_args> {
      public findAllApplyFinanceHandle() {
        super("findAllApplyFinanceHandle");
      }

      public findAllApplyFinanceHandle_args getEmptyArgsInstance() {
        return new findAllApplyFinanceHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllApplyFinanceHandle_result getResult(I iface, findAllApplyFinanceHandle_args args) throws org.apache.thrift.TException {
        findAllApplyFinanceHandle_result result = new findAllApplyFinanceHandle_result();
        result.success = iface.findAllApplyFinanceHandle(args.applyFinanceHandleDTO);
        return result;
      }
    }

    public static class getApplyFinanceHandleTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplyFinanceHandleTotal_args> {
      public getApplyFinanceHandleTotal() {
        super("getApplyFinanceHandleTotal");
      }

      public getApplyFinanceHandleTotal_args getEmptyArgsInstance() {
        return new getApplyFinanceHandleTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplyFinanceHandleTotal_result getResult(I iface, getApplyFinanceHandleTotal_args args) throws org.apache.thrift.TException {
        getApplyFinanceHandleTotal_result result = new getApplyFinanceHandleTotal_result();
        result.success = iface.getApplyFinanceHandleTotal(args.applyFinanceHandleDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addApplyFinanceHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addApplyFinanceHandle_args> {
      public addApplyFinanceHandle() {
        super("addApplyFinanceHandle");
      }

      public addApplyFinanceHandle_args getEmptyArgsInstance() {
        return new addApplyFinanceHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addApplyFinanceHandle_result getResult(I iface, addApplyFinanceHandle_args args) throws org.apache.thrift.TException {
        addApplyFinanceHandle_result result = new addApplyFinanceHandle_result();
        result.success = iface.addApplyFinanceHandle(args.applyFinanceHandleDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getApplyFinanceHandleById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplyFinanceHandleById_args> {
      public getApplyFinanceHandleById() {
        super("getApplyFinanceHandleById");
      }

      public getApplyFinanceHandleById_args getEmptyArgsInstance() {
        return new getApplyFinanceHandleById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplyFinanceHandleById_result getResult(I iface, getApplyFinanceHandleById_args args) throws org.apache.thrift.TException {
        getApplyFinanceHandleById_result result = new getApplyFinanceHandleById_result();
        result.success = iface.getApplyFinanceHandleById(args.pid);
        return result;
      }
    }

    public static class getFinanceHandleByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceHandleByProjectId_args> {
      public getFinanceHandleByProjectId() {
        super("getFinanceHandleByProjectId");
      }

      public getFinanceHandleByProjectId_args getEmptyArgsInstance() {
        return new getFinanceHandleByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceHandleByProjectId_result getResult(I iface, getFinanceHandleByProjectId_args args) throws org.apache.thrift.TException {
        getFinanceHandleByProjectId_result result = new getFinanceHandleByProjectId_result();
        result.success = iface.getFinanceHandleByProjectId(args.projectId);
        return result;
      }
    }

    public static class getByProjectIdAndRecPro<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getByProjectIdAndRecPro_args> {
      public getByProjectIdAndRecPro() {
        super("getByProjectIdAndRecPro");
      }

      public getByProjectIdAndRecPro_args getEmptyArgsInstance() {
        return new getByProjectIdAndRecPro_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getByProjectIdAndRecPro_result getResult(I iface, getByProjectIdAndRecPro_args args) throws org.apache.thrift.TException {
        getByProjectIdAndRecPro_result result = new getByProjectIdAndRecPro_result();
        result.success = iface.getByProjectIdAndRecPro(args.projectId, args.recPro);
        return result;
      }
    }

    public static class makeLoans<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeLoans_args> {
      public makeLoans() {
        super("makeLoans");
      }

      public makeLoans_args getEmptyArgsInstance() {
        return new makeLoans_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeLoans_result getResult(I iface, makeLoans_args args) throws org.apache.thrift.TException {
        makeLoans_result result = new makeLoans_result();
        result.success = iface.makeLoans(args.applyFinanceHandleDTO, args.userId, args.isLoanFinish, args.houseClerkId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateApplyFinanceHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateApplyFinanceHandle_args> {
      public updateApplyFinanceHandle() {
        super("updateApplyFinanceHandle");
      }

      public updateApplyFinanceHandle_args getEmptyArgsInstance() {
        return new updateApplyFinanceHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateApplyFinanceHandle_result getResult(I iface, updateApplyFinanceHandle_args args) throws org.apache.thrift.TException {
        updateApplyFinanceHandle_result result = new updateApplyFinanceHandle_result();
        result.success = iface.updateApplyFinanceHandle(args.applyFinanceHandleDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getNewRecApplyFinance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewRecApplyFinance_args> {
      public getNewRecApplyFinance() {
        super("getNewRecApplyFinance");
      }

      public getNewRecApplyFinance_args getEmptyArgsInstance() {
        return new getNewRecApplyFinance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewRecApplyFinance_result getResult(I iface, getNewRecApplyFinance_args args) throws org.apache.thrift.TException {
        getNewRecApplyFinance_result result = new getNewRecApplyFinance_result();
        result.success = iface.getNewRecApplyFinance(args.projectId);
        return result;
      }
    }

    public static class getRecMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecMoney_args> {
      public getRecMoney() {
        super("getRecMoney");
      }

      public getRecMoney_args getEmptyArgsInstance() {
        return new getRecMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecMoney_result getResult(I iface, getRecMoney_args args) throws org.apache.thrift.TException {
        getRecMoney_result result = new getRecMoney_result();
        result.success = iface.getRecMoney(args.projectId, args.recPros);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addFinanceHandleByExtension<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFinanceHandleByExtension_args> {
      public addFinanceHandleByExtension() {
        super("addFinanceHandleByExtension");
      }

      public addFinanceHandleByExtension_args getEmptyArgsInstance() {
        return new addFinanceHandleByExtension_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFinanceHandleByExtension_result getResult(I iface, addFinanceHandleByExtension_args args) throws org.apache.thrift.TException {
        addFinanceHandleByExtension_result result = new addFinanceHandleByExtension_result();
        result.success = iface.addFinanceHandleByExtension(args.projectId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class collectExtensionFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, collectExtensionFee_args> {
      public collectExtensionFee() {
        super("collectExtensionFee");
      }

      public collectExtensionFee_args getEmptyArgsInstance() {
        return new collectExtensionFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public collectExtensionFee_result getResult(I iface, collectExtensionFee_args args) throws org.apache.thrift.TException {
        collectExtensionFee_result result = new collectExtensionFee_result();
        result.success = iface.collectExtensionFee(args.financeHandleDTO, args.applyFinanceHandleDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class collectFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, collectFee_args> {
      public collectFee() {
        super("collectFee");
      }

      public collectFee_args getEmptyArgsInstance() {
        return new collectFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public collectFee_result getResult(I iface, collectFee_args args) throws org.apache.thrift.TException {
        collectFee_result result = new collectFee_result();
        result.success = iface.collectFee(args.applyFinanceHandleList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class collectFddFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, collectFddFee_args> {
      public collectFddFee() {
        super("collectFddFee");
      }

      public collectFddFee_args getEmptyArgsInstance() {
        return new collectFddFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public collectFddFee_result getResult(I iface, collectFddFee_args args) throws org.apache.thrift.TException {
        collectFddFee_result result = new collectFddFee_result();
        result.success = iface.collectFddFee(args.applyFinanceHandle);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLoanHisByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoanHisByProjectId_args> {
      public getLoanHisByProjectId() {
        super("getLoanHisByProjectId");
      }

      public getLoanHisByProjectId_args getEmptyArgsInstance() {
        return new getLoanHisByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoanHisByProjectId_result getResult(I iface, getLoanHisByProjectId_args args) throws org.apache.thrift.TException {
        getLoanHisByProjectId_result result = new getLoanHisByProjectId_result();
        result.success = iface.getLoanHisByProjectId(args.projectId, args.productNum);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryFinanceIndex", new queryFinanceIndex());
      processMap.put("getFinanceIndexTotal", new getFinanceIndexTotal());
      processMap.put("queryFinanceCollectFeeIndex", new queryFinanceCollectFeeIndex());
      processMap.put("getFinanceCollectFeeIndexTotal", new getFinanceCollectFeeIndexTotal());
      processMap.put("findAllFinanceHandle", new findAllFinanceHandle());
      processMap.put("getFinanceHandleTotal", new getFinanceHandleTotal());
      processMap.put("addFinanceHandle", new addFinanceHandle());
      processMap.put("getFinanceHandleById", new getFinanceHandleById());
      processMap.put("updateFinanceHandle", new updateFinanceHandle());
      processMap.put("findAllApplyFinanceHandle", new findAllApplyFinanceHandle());
      processMap.put("getApplyFinanceHandleTotal", new getApplyFinanceHandleTotal());
      processMap.put("addApplyFinanceHandle", new addApplyFinanceHandle());
      processMap.put("getApplyFinanceHandleById", new getApplyFinanceHandleById());
      processMap.put("getFinanceHandleByProjectId", new getFinanceHandleByProjectId());
      processMap.put("getByProjectIdAndRecPro", new getByProjectIdAndRecPro());
      processMap.put("makeLoans", new makeLoans());
      processMap.put("updateApplyFinanceHandle", new updateApplyFinanceHandle());
      processMap.put("getNewRecApplyFinance", new getNewRecApplyFinance());
      processMap.put("getRecMoney", new getRecMoney());
      processMap.put("addFinanceHandleByExtension", new addFinanceHandleByExtension());
      processMap.put("collectExtensionFee", new collectExtensionFee());
      processMap.put("collectFee", new collectFee());
      processMap.put("collectFddFee", new collectFddFee());
      processMap.put("getLoanHisByProjectId", new getLoanHisByProjectId());
      return processMap;
    }

    public static class queryFinanceIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryFinanceIndex_args, List<FinanceIndexDTO>> {
      public queryFinanceIndex() {
        super("queryFinanceIndex");
      }

      public queryFinanceIndex_args getEmptyArgsInstance() {
        return new queryFinanceIndex_args();
      }

      public AsyncMethodCallback<List<FinanceIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinanceIndexDTO>>() { 
          public void onComplete(List<FinanceIndexDTO> o) {
            queryFinanceIndex_result result = new queryFinanceIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryFinanceIndex_result result = new queryFinanceIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryFinanceIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinanceIndexDTO>> resultHandler) throws TException {
        iface.queryFinanceIndex(args.financeIndexDTO,resultHandler);
      }
    }

    public static class getFinanceIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceIndexTotal_args, Integer> {
      public getFinanceIndexTotal() {
        super("getFinanceIndexTotal");
      }

      public getFinanceIndexTotal_args getEmptyArgsInstance() {
        return new getFinanceIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getFinanceIndexTotal_result result = new getFinanceIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceIndexTotal_result result = new getFinanceIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getFinanceIndexTotal(args.financeIndexDTO,resultHandler);
      }
    }

    public static class queryFinanceCollectFeeIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryFinanceCollectFeeIndex_args, List<FinanceIndexDTO>> {
      public queryFinanceCollectFeeIndex() {
        super("queryFinanceCollectFeeIndex");
      }

      public queryFinanceCollectFeeIndex_args getEmptyArgsInstance() {
        return new queryFinanceCollectFeeIndex_args();
      }

      public AsyncMethodCallback<List<FinanceIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinanceIndexDTO>>() { 
          public void onComplete(List<FinanceIndexDTO> o) {
            queryFinanceCollectFeeIndex_result result = new queryFinanceCollectFeeIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryFinanceCollectFeeIndex_result result = new queryFinanceCollectFeeIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryFinanceCollectFeeIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinanceIndexDTO>> resultHandler) throws TException {
        iface.queryFinanceCollectFeeIndex(args.financeIndexDTO,resultHandler);
      }
    }

    public static class getFinanceCollectFeeIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceCollectFeeIndexTotal_args, Integer> {
      public getFinanceCollectFeeIndexTotal() {
        super("getFinanceCollectFeeIndexTotal");
      }

      public getFinanceCollectFeeIndexTotal_args getEmptyArgsInstance() {
        return new getFinanceCollectFeeIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getFinanceCollectFeeIndexTotal_result result = new getFinanceCollectFeeIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceCollectFeeIndexTotal_result result = new getFinanceCollectFeeIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceCollectFeeIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getFinanceCollectFeeIndexTotal(args.financeIndexDTO,resultHandler);
      }
    }

    public static class findAllFinanceHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllFinanceHandle_args, List<FinanceHandleDTO>> {
      public findAllFinanceHandle() {
        super("findAllFinanceHandle");
      }

      public findAllFinanceHandle_args getEmptyArgsInstance() {
        return new findAllFinanceHandle_args();
      }

      public AsyncMethodCallback<List<FinanceHandleDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinanceHandleDTO>>() { 
          public void onComplete(List<FinanceHandleDTO> o) {
            findAllFinanceHandle_result result = new findAllFinanceHandle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllFinanceHandle_result result = new findAllFinanceHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllFinanceHandle_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinanceHandleDTO>> resultHandler) throws TException {
        iface.findAllFinanceHandle(args.financeHandleDTO,resultHandler);
      }
    }

    public static class getFinanceHandleTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceHandleTotal_args, Integer> {
      public getFinanceHandleTotal() {
        super("getFinanceHandleTotal");
      }

      public getFinanceHandleTotal_args getEmptyArgsInstance() {
        return new getFinanceHandleTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getFinanceHandleTotal_result result = new getFinanceHandleTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceHandleTotal_result result = new getFinanceHandleTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceHandleTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getFinanceHandleTotal(args.financeHandleDTO,resultHandler);
      }
    }

    public static class addFinanceHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFinanceHandle_args, Boolean> {
      public addFinanceHandle() {
        super("addFinanceHandle");
      }

      public addFinanceHandle_args getEmptyArgsInstance() {
        return new addFinanceHandle_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addFinanceHandle_result result = new addFinanceHandle_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFinanceHandle_result result = new addFinanceHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFinanceHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addFinanceHandle(args.financeHandleDTO,resultHandler);
      }
    }

    public static class getFinanceHandleById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceHandleById_args, FinanceHandleDTO> {
      public getFinanceHandleById() {
        super("getFinanceHandleById");
      }

      public getFinanceHandleById_args getEmptyArgsInstance() {
        return new getFinanceHandleById_args();
      }

      public AsyncMethodCallback<FinanceHandleDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceHandleDTO>() { 
          public void onComplete(FinanceHandleDTO o) {
            getFinanceHandleById_result result = new getFinanceHandleById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceHandleById_result result = new getFinanceHandleById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceHandleById_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceHandleDTO> resultHandler) throws TException {
        iface.getFinanceHandleById(args.pid,resultHandler);
      }
    }

    public static class updateFinanceHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFinanceHandle_args, Boolean> {
      public updateFinanceHandle() {
        super("updateFinanceHandle");
      }

      public updateFinanceHandle_args getEmptyArgsInstance() {
        return new updateFinanceHandle_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateFinanceHandle_result result = new updateFinanceHandle_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFinanceHandle_result result = new updateFinanceHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFinanceHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateFinanceHandle(args.financeHandleDTO,resultHandler);
      }
    }

    public static class findAllApplyFinanceHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllApplyFinanceHandle_args, List<ApplyFinanceHandleDTO>> {
      public findAllApplyFinanceHandle() {
        super("findAllApplyFinanceHandle");
      }

      public findAllApplyFinanceHandle_args getEmptyArgsInstance() {
        return new findAllApplyFinanceHandle_args();
      }

      public AsyncMethodCallback<List<ApplyFinanceHandleDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ApplyFinanceHandleDTO>>() { 
          public void onComplete(List<ApplyFinanceHandleDTO> o) {
            findAllApplyFinanceHandle_result result = new findAllApplyFinanceHandle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllApplyFinanceHandle_result result = new findAllApplyFinanceHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllApplyFinanceHandle_args args, org.apache.thrift.async.AsyncMethodCallback<List<ApplyFinanceHandleDTO>> resultHandler) throws TException {
        iface.findAllApplyFinanceHandle(args.applyFinanceHandleDTO,resultHandler);
      }
    }

    public static class getApplyFinanceHandleTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplyFinanceHandleTotal_args, Integer> {
      public getApplyFinanceHandleTotal() {
        super("getApplyFinanceHandleTotal");
      }

      public getApplyFinanceHandleTotal_args getEmptyArgsInstance() {
        return new getApplyFinanceHandleTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getApplyFinanceHandleTotal_result result = new getApplyFinanceHandleTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplyFinanceHandleTotal_result result = new getApplyFinanceHandleTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplyFinanceHandleTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getApplyFinanceHandleTotal(args.applyFinanceHandleDTO,resultHandler);
      }
    }

    public static class addApplyFinanceHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addApplyFinanceHandle_args, Boolean> {
      public addApplyFinanceHandle() {
        super("addApplyFinanceHandle");
      }

      public addApplyFinanceHandle_args getEmptyArgsInstance() {
        return new addApplyFinanceHandle_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addApplyFinanceHandle_result result = new addApplyFinanceHandle_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addApplyFinanceHandle_result result = new addApplyFinanceHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addApplyFinanceHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addApplyFinanceHandle(args.applyFinanceHandleDTO,resultHandler);
      }
    }

    public static class getApplyFinanceHandleById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplyFinanceHandleById_args, ApplyFinanceHandleDTO> {
      public getApplyFinanceHandleById() {
        super("getApplyFinanceHandleById");
      }

      public getApplyFinanceHandleById_args getEmptyArgsInstance() {
        return new getApplyFinanceHandleById_args();
      }

      public AsyncMethodCallback<ApplyFinanceHandleDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApplyFinanceHandleDTO>() { 
          public void onComplete(ApplyFinanceHandleDTO o) {
            getApplyFinanceHandleById_result result = new getApplyFinanceHandleById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplyFinanceHandleById_result result = new getApplyFinanceHandleById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplyFinanceHandleById_args args, org.apache.thrift.async.AsyncMethodCallback<ApplyFinanceHandleDTO> resultHandler) throws TException {
        iface.getApplyFinanceHandleById(args.pid,resultHandler);
      }
    }

    public static class getFinanceHandleByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceHandleByProjectId_args, FinanceHandleDTO> {
      public getFinanceHandleByProjectId() {
        super("getFinanceHandleByProjectId");
      }

      public getFinanceHandleByProjectId_args getEmptyArgsInstance() {
        return new getFinanceHandleByProjectId_args();
      }

      public AsyncMethodCallback<FinanceHandleDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceHandleDTO>() { 
          public void onComplete(FinanceHandleDTO o) {
            getFinanceHandleByProjectId_result result = new getFinanceHandleByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceHandleByProjectId_result result = new getFinanceHandleByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceHandleByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceHandleDTO> resultHandler) throws TException {
        iface.getFinanceHandleByProjectId(args.projectId,resultHandler);
      }
    }

    public static class getByProjectIdAndRecPro<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getByProjectIdAndRecPro_args, ApplyFinanceHandleDTO> {
      public getByProjectIdAndRecPro() {
        super("getByProjectIdAndRecPro");
      }

      public getByProjectIdAndRecPro_args getEmptyArgsInstance() {
        return new getByProjectIdAndRecPro_args();
      }

      public AsyncMethodCallback<ApplyFinanceHandleDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApplyFinanceHandleDTO>() { 
          public void onComplete(ApplyFinanceHandleDTO o) {
            getByProjectIdAndRecPro_result result = new getByProjectIdAndRecPro_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getByProjectIdAndRecPro_result result = new getByProjectIdAndRecPro_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getByProjectIdAndRecPro_args args, org.apache.thrift.async.AsyncMethodCallback<ApplyFinanceHandleDTO> resultHandler) throws TException {
        iface.getByProjectIdAndRecPro(args.projectId, args.recPro,resultHandler);
      }
    }

    public static class makeLoans<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeLoans_args, Boolean> {
      public makeLoans() {
        super("makeLoans");
      }

      public makeLoans_args getEmptyArgsInstance() {
        return new makeLoans_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            makeLoans_result result = new makeLoans_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeLoans_result result = new makeLoans_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeLoans_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.makeLoans(args.applyFinanceHandleDTO, args.userId, args.isLoanFinish, args.houseClerkId,resultHandler);
      }
    }

    public static class updateApplyFinanceHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateApplyFinanceHandle_args, Boolean> {
      public updateApplyFinanceHandle() {
        super("updateApplyFinanceHandle");
      }

      public updateApplyFinanceHandle_args getEmptyArgsInstance() {
        return new updateApplyFinanceHandle_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateApplyFinanceHandle_result result = new updateApplyFinanceHandle_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateApplyFinanceHandle_result result = new updateApplyFinanceHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateApplyFinanceHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateApplyFinanceHandle(args.applyFinanceHandleDTO,resultHandler);
      }
    }

    public static class getNewRecApplyFinance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewRecApplyFinance_args, ApplyFinanceHandleDTO> {
      public getNewRecApplyFinance() {
        super("getNewRecApplyFinance");
      }

      public getNewRecApplyFinance_args getEmptyArgsInstance() {
        return new getNewRecApplyFinance_args();
      }

      public AsyncMethodCallback<ApplyFinanceHandleDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApplyFinanceHandleDTO>() { 
          public void onComplete(ApplyFinanceHandleDTO o) {
            getNewRecApplyFinance_result result = new getNewRecApplyFinance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewRecApplyFinance_result result = new getNewRecApplyFinance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewRecApplyFinance_args args, org.apache.thrift.async.AsyncMethodCallback<ApplyFinanceHandleDTO> resultHandler) throws TException {
        iface.getNewRecApplyFinance(args.projectId,resultHandler);
      }
    }

    public static class getRecMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecMoney_args, Double> {
      public getRecMoney() {
        super("getRecMoney");
      }

      public getRecMoney_args getEmptyArgsInstance() {
        return new getRecMoney_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getRecMoney_result result = new getRecMoney_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecMoney_result result = new getRecMoney_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecMoney_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getRecMoney(args.projectId, args.recPros,resultHandler);
      }
    }

    public static class addFinanceHandleByExtension<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFinanceHandleByExtension_args, Integer> {
      public addFinanceHandleByExtension() {
        super("addFinanceHandleByExtension");
      }

      public addFinanceHandleByExtension_args getEmptyArgsInstance() {
        return new addFinanceHandleByExtension_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addFinanceHandleByExtension_result result = new addFinanceHandleByExtension_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFinanceHandleByExtension_result result = new addFinanceHandleByExtension_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFinanceHandleByExtension_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addFinanceHandleByExtension(args.projectId,resultHandler);
      }
    }

    public static class collectExtensionFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, collectExtensionFee_args, Integer> {
      public collectExtensionFee() {
        super("collectExtensionFee");
      }

      public collectExtensionFee_args getEmptyArgsInstance() {
        return new collectExtensionFee_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            collectExtensionFee_result result = new collectExtensionFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            collectExtensionFee_result result = new collectExtensionFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, collectExtensionFee_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.collectExtensionFee(args.financeHandleDTO, args.applyFinanceHandleDTO,resultHandler);
      }
    }

    public static class collectFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, collectFee_args, Boolean> {
      public collectFee() {
        super("collectFee");
      }

      public collectFee_args getEmptyArgsInstance() {
        return new collectFee_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            collectFee_result result = new collectFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            collectFee_result result = new collectFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, collectFee_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.collectFee(args.applyFinanceHandleList,resultHandler);
      }
    }

    public static class collectFddFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, collectFddFee_args, Boolean> {
      public collectFddFee() {
        super("collectFddFee");
      }

      public collectFddFee_args getEmptyArgsInstance() {
        return new collectFddFee_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            collectFddFee_result result = new collectFddFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            collectFddFee_result result = new collectFddFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, collectFddFee_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.collectFddFee(args.applyFinanceHandle,resultHandler);
      }
    }

    public static class getLoanHisByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoanHisByProjectId_args, List<ApplyFinanceHandleDTO>> {
      public getLoanHisByProjectId() {
        super("getLoanHisByProjectId");
      }

      public getLoanHisByProjectId_args getEmptyArgsInstance() {
        return new getLoanHisByProjectId_args();
      }

      public AsyncMethodCallback<List<ApplyFinanceHandleDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ApplyFinanceHandleDTO>>() { 
          public void onComplete(List<ApplyFinanceHandleDTO> o) {
            getLoanHisByProjectId_result result = new getLoanHisByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoanHisByProjectId_result result = new getLoanHisByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoanHisByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<List<ApplyFinanceHandleDTO>> resultHandler) throws TException {
        iface.getLoanHisByProjectId(args.projectId, args.productNum,resultHandler);
      }
    }

  }

  public static class queryFinanceIndex_args implements org.apache.thrift.TBase<queryFinanceIndex_args, queryFinanceIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryFinanceIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFinanceIndex_args");

    private static final org.apache.thrift.protocol.TField FINANCE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFinanceIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFinanceIndex_argsTupleSchemeFactory());
    }

    public FinanceIndexDTO financeIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_INDEX_DTO((short)1, "financeIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_INDEX_DTO
            return FINANCE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFinanceIndex_args.class, metaDataMap);
    }

    public queryFinanceIndex_args() {
    }

    public queryFinanceIndex_args(
      FinanceIndexDTO financeIndexDTO)
    {
      this();
      this.financeIndexDTO = financeIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFinanceIndex_args(queryFinanceIndex_args other) {
      if (other.isSetFinanceIndexDTO()) {
        this.financeIndexDTO = new FinanceIndexDTO(other.financeIndexDTO);
      }
    }

    public queryFinanceIndex_args deepCopy() {
      return new queryFinanceIndex_args(this);
    }

    @Override
    public void clear() {
      this.financeIndexDTO = null;
    }

    public FinanceIndexDTO getFinanceIndexDTO() {
      return this.financeIndexDTO;
    }

    public queryFinanceIndex_args setFinanceIndexDTO(FinanceIndexDTO financeIndexDTO) {
      this.financeIndexDTO = financeIndexDTO;
      return this;
    }

    public void unsetFinanceIndexDTO() {
      this.financeIndexDTO = null;
    }

    /** Returns true if field financeIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceIndexDTO() {
      return this.financeIndexDTO != null;
    }

    public void setFinanceIndexDTOIsSet(boolean value) {
      if (!value) {
        this.financeIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        if (value == null) {
          unsetFinanceIndexDTO();
        } else {
          setFinanceIndexDTO((FinanceIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        return getFinanceIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_INDEX_DTO:
        return isSetFinanceIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFinanceIndex_args)
        return this.equals((queryFinanceIndex_args)that);
      return false;
    }

    public boolean equals(queryFinanceIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_financeIndexDTO = true && this.isSetFinanceIndexDTO();
      boolean that_present_financeIndexDTO = true && that.isSetFinanceIndexDTO();
      if (this_present_financeIndexDTO || that_present_financeIndexDTO) {
        if (!(this_present_financeIndexDTO && that_present_financeIndexDTO))
          return false;
        if (!this.financeIndexDTO.equals(that.financeIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeIndexDTO = true && (isSetFinanceIndexDTO());
      list.add(present_financeIndexDTO);
      if (present_financeIndexDTO)
        list.add(financeIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryFinanceIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceIndexDTO()).compareTo(other.isSetFinanceIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeIndexDTO, other.financeIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFinanceIndex_args(");
      boolean first = true;

      sb.append("financeIndexDTO:");
      if (this.financeIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeIndexDTO != null) {
        financeIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFinanceIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryFinanceIndex_argsStandardScheme getScheme() {
        return new queryFinanceIndex_argsStandardScheme();
      }
    }

    private static class queryFinanceIndex_argsStandardScheme extends StandardScheme<queryFinanceIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFinanceIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeIndexDTO = new FinanceIndexDTO();
                struct.financeIndexDTO.read(iprot);
                struct.setFinanceIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFinanceIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeIndexDTO != null) {
          oprot.writeFieldBegin(FINANCE_INDEX_DTO_FIELD_DESC);
          struct.financeIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFinanceIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryFinanceIndex_argsTupleScheme getScheme() {
        return new queryFinanceIndex_argsTupleScheme();
      }
    }

    private static class queryFinanceIndex_argsTupleScheme extends TupleScheme<queryFinanceIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFinanceIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceIndexDTO()) {
          struct.financeIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFinanceIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeIndexDTO = new FinanceIndexDTO();
          struct.financeIndexDTO.read(iprot);
          struct.setFinanceIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryFinanceIndex_result implements org.apache.thrift.TBase<queryFinanceIndex_result, queryFinanceIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryFinanceIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFinanceIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFinanceIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFinanceIndex_resultTupleSchemeFactory());
    }

    public List<FinanceIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFinanceIndex_result.class, metaDataMap);
    }

    public queryFinanceIndex_result() {
    }

    public queryFinanceIndex_result(
      List<FinanceIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFinanceIndex_result(queryFinanceIndex_result other) {
      if (other.isSetSuccess()) {
        List<FinanceIndexDTO> __this__success = new ArrayList<FinanceIndexDTO>(other.success.size());
        for (FinanceIndexDTO other_element : other.success) {
          __this__success.add(new FinanceIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryFinanceIndex_result deepCopy() {
      return new queryFinanceIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinanceIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinanceIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinanceIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<FinanceIndexDTO> getSuccess() {
      return this.success;
    }

    public queryFinanceIndex_result setSuccess(List<FinanceIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinanceIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFinanceIndex_result)
        return this.equals((queryFinanceIndex_result)that);
      return false;
    }

    public boolean equals(queryFinanceIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryFinanceIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFinanceIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFinanceIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryFinanceIndex_resultStandardScheme getScheme() {
        return new queryFinanceIndex_resultStandardScheme();
      }
    }

    private static class queryFinanceIndex_resultStandardScheme extends StandardScheme<queryFinanceIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFinanceIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list344 = iprot.readListBegin();
                  struct.success = new ArrayList<FinanceIndexDTO>(_list344.size);
                  FinanceIndexDTO _elem345;
                  for (int _i346 = 0; _i346 < _list344.size; ++_i346)
                  {
                    _elem345 = new FinanceIndexDTO();
                    _elem345.read(iprot);
                    struct.success.add(_elem345);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFinanceIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinanceIndexDTO _iter347 : struct.success)
            {
              _iter347.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFinanceIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryFinanceIndex_resultTupleScheme getScheme() {
        return new queryFinanceIndex_resultTupleScheme();
      }
    }

    private static class queryFinanceIndex_resultTupleScheme extends TupleScheme<queryFinanceIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFinanceIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinanceIndexDTO _iter348 : struct.success)
            {
              _iter348.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFinanceIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list349 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinanceIndexDTO>(_list349.size);
            FinanceIndexDTO _elem350;
            for (int _i351 = 0; _i351 < _list349.size; ++_i351)
            {
              _elem350 = new FinanceIndexDTO();
              _elem350.read(iprot);
              struct.success.add(_elem350);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinanceIndexTotal_args implements org.apache.thrift.TBase<getFinanceIndexTotal_args, getFinanceIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceIndexTotal_args");

    private static final org.apache.thrift.protocol.TField FINANCE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceIndexTotal_argsTupleSchemeFactory());
    }

    public FinanceIndexDTO financeIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_INDEX_DTO((short)1, "financeIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_INDEX_DTO
            return FINANCE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceIndexTotal_args.class, metaDataMap);
    }

    public getFinanceIndexTotal_args() {
    }

    public getFinanceIndexTotal_args(
      FinanceIndexDTO financeIndexDTO)
    {
      this();
      this.financeIndexDTO = financeIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceIndexTotal_args(getFinanceIndexTotal_args other) {
      if (other.isSetFinanceIndexDTO()) {
        this.financeIndexDTO = new FinanceIndexDTO(other.financeIndexDTO);
      }
    }

    public getFinanceIndexTotal_args deepCopy() {
      return new getFinanceIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.financeIndexDTO = null;
    }

    public FinanceIndexDTO getFinanceIndexDTO() {
      return this.financeIndexDTO;
    }

    public getFinanceIndexTotal_args setFinanceIndexDTO(FinanceIndexDTO financeIndexDTO) {
      this.financeIndexDTO = financeIndexDTO;
      return this;
    }

    public void unsetFinanceIndexDTO() {
      this.financeIndexDTO = null;
    }

    /** Returns true if field financeIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceIndexDTO() {
      return this.financeIndexDTO != null;
    }

    public void setFinanceIndexDTOIsSet(boolean value) {
      if (!value) {
        this.financeIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        if (value == null) {
          unsetFinanceIndexDTO();
        } else {
          setFinanceIndexDTO((FinanceIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        return getFinanceIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_INDEX_DTO:
        return isSetFinanceIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceIndexTotal_args)
        return this.equals((getFinanceIndexTotal_args)that);
      return false;
    }

    public boolean equals(getFinanceIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_financeIndexDTO = true && this.isSetFinanceIndexDTO();
      boolean that_present_financeIndexDTO = true && that.isSetFinanceIndexDTO();
      if (this_present_financeIndexDTO || that_present_financeIndexDTO) {
        if (!(this_present_financeIndexDTO && that_present_financeIndexDTO))
          return false;
        if (!this.financeIndexDTO.equals(that.financeIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeIndexDTO = true && (isSetFinanceIndexDTO());
      list.add(present_financeIndexDTO);
      if (present_financeIndexDTO)
        list.add(financeIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceIndexDTO()).compareTo(other.isSetFinanceIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeIndexDTO, other.financeIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceIndexTotal_args(");
      boolean first = true;

      sb.append("financeIndexDTO:");
      if (this.financeIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeIndexDTO != null) {
        financeIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceIndexTotal_argsStandardScheme getScheme() {
        return new getFinanceIndexTotal_argsStandardScheme();
      }
    }

    private static class getFinanceIndexTotal_argsStandardScheme extends StandardScheme<getFinanceIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeIndexDTO = new FinanceIndexDTO();
                struct.financeIndexDTO.read(iprot);
                struct.setFinanceIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeIndexDTO != null) {
          oprot.writeFieldBegin(FINANCE_INDEX_DTO_FIELD_DESC);
          struct.financeIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceIndexTotal_argsTupleScheme getScheme() {
        return new getFinanceIndexTotal_argsTupleScheme();
      }
    }

    private static class getFinanceIndexTotal_argsTupleScheme extends TupleScheme<getFinanceIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceIndexDTO()) {
          struct.financeIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeIndexDTO = new FinanceIndexDTO();
          struct.financeIndexDTO.read(iprot);
          struct.setFinanceIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getFinanceIndexTotal_result implements org.apache.thrift.TBase<getFinanceIndexTotal_result, getFinanceIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceIndexTotal_result.class, metaDataMap);
    }

    public getFinanceIndexTotal_result() {
    }

    public getFinanceIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceIndexTotal_result(getFinanceIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getFinanceIndexTotal_result deepCopy() {
      return new getFinanceIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getFinanceIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceIndexTotal_result)
        return this.equals((getFinanceIndexTotal_result)that);
      return false;
    }

    public boolean equals(getFinanceIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceIndexTotal_resultStandardScheme getScheme() {
        return new getFinanceIndexTotal_resultStandardScheme();
      }
    }

    private static class getFinanceIndexTotal_resultStandardScheme extends StandardScheme<getFinanceIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceIndexTotal_resultTupleScheme getScheme() {
        return new getFinanceIndexTotal_resultTupleScheme();
      }
    }

    private static class getFinanceIndexTotal_resultTupleScheme extends TupleScheme<getFinanceIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryFinanceCollectFeeIndex_args implements org.apache.thrift.TBase<queryFinanceCollectFeeIndex_args, queryFinanceCollectFeeIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryFinanceCollectFeeIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFinanceCollectFeeIndex_args");

    private static final org.apache.thrift.protocol.TField FINANCE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFinanceCollectFeeIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFinanceCollectFeeIndex_argsTupleSchemeFactory());
    }

    public FinanceIndexDTO financeIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_INDEX_DTO((short)1, "financeIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_INDEX_DTO
            return FINANCE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFinanceCollectFeeIndex_args.class, metaDataMap);
    }

    public queryFinanceCollectFeeIndex_args() {
    }

    public queryFinanceCollectFeeIndex_args(
      FinanceIndexDTO financeIndexDTO)
    {
      this();
      this.financeIndexDTO = financeIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFinanceCollectFeeIndex_args(queryFinanceCollectFeeIndex_args other) {
      if (other.isSetFinanceIndexDTO()) {
        this.financeIndexDTO = new FinanceIndexDTO(other.financeIndexDTO);
      }
    }

    public queryFinanceCollectFeeIndex_args deepCopy() {
      return new queryFinanceCollectFeeIndex_args(this);
    }

    @Override
    public void clear() {
      this.financeIndexDTO = null;
    }

    public FinanceIndexDTO getFinanceIndexDTO() {
      return this.financeIndexDTO;
    }

    public queryFinanceCollectFeeIndex_args setFinanceIndexDTO(FinanceIndexDTO financeIndexDTO) {
      this.financeIndexDTO = financeIndexDTO;
      return this;
    }

    public void unsetFinanceIndexDTO() {
      this.financeIndexDTO = null;
    }

    /** Returns true if field financeIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceIndexDTO() {
      return this.financeIndexDTO != null;
    }

    public void setFinanceIndexDTOIsSet(boolean value) {
      if (!value) {
        this.financeIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        if (value == null) {
          unsetFinanceIndexDTO();
        } else {
          setFinanceIndexDTO((FinanceIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        return getFinanceIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_INDEX_DTO:
        return isSetFinanceIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFinanceCollectFeeIndex_args)
        return this.equals((queryFinanceCollectFeeIndex_args)that);
      return false;
    }

    public boolean equals(queryFinanceCollectFeeIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_financeIndexDTO = true && this.isSetFinanceIndexDTO();
      boolean that_present_financeIndexDTO = true && that.isSetFinanceIndexDTO();
      if (this_present_financeIndexDTO || that_present_financeIndexDTO) {
        if (!(this_present_financeIndexDTO && that_present_financeIndexDTO))
          return false;
        if (!this.financeIndexDTO.equals(that.financeIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeIndexDTO = true && (isSetFinanceIndexDTO());
      list.add(present_financeIndexDTO);
      if (present_financeIndexDTO)
        list.add(financeIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryFinanceCollectFeeIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceIndexDTO()).compareTo(other.isSetFinanceIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeIndexDTO, other.financeIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFinanceCollectFeeIndex_args(");
      boolean first = true;

      sb.append("financeIndexDTO:");
      if (this.financeIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeIndexDTO != null) {
        financeIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFinanceCollectFeeIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryFinanceCollectFeeIndex_argsStandardScheme getScheme() {
        return new queryFinanceCollectFeeIndex_argsStandardScheme();
      }
    }

    private static class queryFinanceCollectFeeIndex_argsStandardScheme extends StandardScheme<queryFinanceCollectFeeIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFinanceCollectFeeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeIndexDTO = new FinanceIndexDTO();
                struct.financeIndexDTO.read(iprot);
                struct.setFinanceIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFinanceCollectFeeIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeIndexDTO != null) {
          oprot.writeFieldBegin(FINANCE_INDEX_DTO_FIELD_DESC);
          struct.financeIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFinanceCollectFeeIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryFinanceCollectFeeIndex_argsTupleScheme getScheme() {
        return new queryFinanceCollectFeeIndex_argsTupleScheme();
      }
    }

    private static class queryFinanceCollectFeeIndex_argsTupleScheme extends TupleScheme<queryFinanceCollectFeeIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFinanceCollectFeeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceIndexDTO()) {
          struct.financeIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFinanceCollectFeeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeIndexDTO = new FinanceIndexDTO();
          struct.financeIndexDTO.read(iprot);
          struct.setFinanceIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryFinanceCollectFeeIndex_result implements org.apache.thrift.TBase<queryFinanceCollectFeeIndex_result, queryFinanceCollectFeeIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryFinanceCollectFeeIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFinanceCollectFeeIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFinanceCollectFeeIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFinanceCollectFeeIndex_resultTupleSchemeFactory());
    }

    public List<FinanceIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFinanceCollectFeeIndex_result.class, metaDataMap);
    }

    public queryFinanceCollectFeeIndex_result() {
    }

    public queryFinanceCollectFeeIndex_result(
      List<FinanceIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFinanceCollectFeeIndex_result(queryFinanceCollectFeeIndex_result other) {
      if (other.isSetSuccess()) {
        List<FinanceIndexDTO> __this__success = new ArrayList<FinanceIndexDTO>(other.success.size());
        for (FinanceIndexDTO other_element : other.success) {
          __this__success.add(new FinanceIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryFinanceCollectFeeIndex_result deepCopy() {
      return new queryFinanceCollectFeeIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinanceIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinanceIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinanceIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<FinanceIndexDTO> getSuccess() {
      return this.success;
    }

    public queryFinanceCollectFeeIndex_result setSuccess(List<FinanceIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinanceIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFinanceCollectFeeIndex_result)
        return this.equals((queryFinanceCollectFeeIndex_result)that);
      return false;
    }

    public boolean equals(queryFinanceCollectFeeIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryFinanceCollectFeeIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFinanceCollectFeeIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFinanceCollectFeeIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryFinanceCollectFeeIndex_resultStandardScheme getScheme() {
        return new queryFinanceCollectFeeIndex_resultStandardScheme();
      }
    }

    private static class queryFinanceCollectFeeIndex_resultStandardScheme extends StandardScheme<queryFinanceCollectFeeIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFinanceCollectFeeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list352 = iprot.readListBegin();
                  struct.success = new ArrayList<FinanceIndexDTO>(_list352.size);
                  FinanceIndexDTO _elem353;
                  for (int _i354 = 0; _i354 < _list352.size; ++_i354)
                  {
                    _elem353 = new FinanceIndexDTO();
                    _elem353.read(iprot);
                    struct.success.add(_elem353);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFinanceCollectFeeIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinanceIndexDTO _iter355 : struct.success)
            {
              _iter355.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFinanceCollectFeeIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryFinanceCollectFeeIndex_resultTupleScheme getScheme() {
        return new queryFinanceCollectFeeIndex_resultTupleScheme();
      }
    }

    private static class queryFinanceCollectFeeIndex_resultTupleScheme extends TupleScheme<queryFinanceCollectFeeIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFinanceCollectFeeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinanceIndexDTO _iter356 : struct.success)
            {
              _iter356.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFinanceCollectFeeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list357 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinanceIndexDTO>(_list357.size);
            FinanceIndexDTO _elem358;
            for (int _i359 = 0; _i359 < _list357.size; ++_i359)
            {
              _elem358 = new FinanceIndexDTO();
              _elem358.read(iprot);
              struct.success.add(_elem358);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinanceCollectFeeIndexTotal_args implements org.apache.thrift.TBase<getFinanceCollectFeeIndexTotal_args, getFinanceCollectFeeIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceCollectFeeIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceCollectFeeIndexTotal_args");

    private static final org.apache.thrift.protocol.TField FINANCE_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceCollectFeeIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceCollectFeeIndexTotal_argsTupleSchemeFactory());
    }

    public FinanceIndexDTO financeIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_INDEX_DTO((short)1, "financeIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_INDEX_DTO
            return FINANCE_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceCollectFeeIndexTotal_args.class, metaDataMap);
    }

    public getFinanceCollectFeeIndexTotal_args() {
    }

    public getFinanceCollectFeeIndexTotal_args(
      FinanceIndexDTO financeIndexDTO)
    {
      this();
      this.financeIndexDTO = financeIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceCollectFeeIndexTotal_args(getFinanceCollectFeeIndexTotal_args other) {
      if (other.isSetFinanceIndexDTO()) {
        this.financeIndexDTO = new FinanceIndexDTO(other.financeIndexDTO);
      }
    }

    public getFinanceCollectFeeIndexTotal_args deepCopy() {
      return new getFinanceCollectFeeIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.financeIndexDTO = null;
    }

    public FinanceIndexDTO getFinanceIndexDTO() {
      return this.financeIndexDTO;
    }

    public getFinanceCollectFeeIndexTotal_args setFinanceIndexDTO(FinanceIndexDTO financeIndexDTO) {
      this.financeIndexDTO = financeIndexDTO;
      return this;
    }

    public void unsetFinanceIndexDTO() {
      this.financeIndexDTO = null;
    }

    /** Returns true if field financeIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceIndexDTO() {
      return this.financeIndexDTO != null;
    }

    public void setFinanceIndexDTOIsSet(boolean value) {
      if (!value) {
        this.financeIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        if (value == null) {
          unsetFinanceIndexDTO();
        } else {
          setFinanceIndexDTO((FinanceIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_INDEX_DTO:
        return getFinanceIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_INDEX_DTO:
        return isSetFinanceIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceCollectFeeIndexTotal_args)
        return this.equals((getFinanceCollectFeeIndexTotal_args)that);
      return false;
    }

    public boolean equals(getFinanceCollectFeeIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_financeIndexDTO = true && this.isSetFinanceIndexDTO();
      boolean that_present_financeIndexDTO = true && that.isSetFinanceIndexDTO();
      if (this_present_financeIndexDTO || that_present_financeIndexDTO) {
        if (!(this_present_financeIndexDTO && that_present_financeIndexDTO))
          return false;
        if (!this.financeIndexDTO.equals(that.financeIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeIndexDTO = true && (isSetFinanceIndexDTO());
      list.add(present_financeIndexDTO);
      if (present_financeIndexDTO)
        list.add(financeIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceCollectFeeIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceIndexDTO()).compareTo(other.isSetFinanceIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeIndexDTO, other.financeIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceCollectFeeIndexTotal_args(");
      boolean first = true;

      sb.append("financeIndexDTO:");
      if (this.financeIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeIndexDTO != null) {
        financeIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceCollectFeeIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceCollectFeeIndexTotal_argsStandardScheme getScheme() {
        return new getFinanceCollectFeeIndexTotal_argsStandardScheme();
      }
    }

    private static class getFinanceCollectFeeIndexTotal_argsStandardScheme extends StandardScheme<getFinanceCollectFeeIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceCollectFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeIndexDTO = new FinanceIndexDTO();
                struct.financeIndexDTO.read(iprot);
                struct.setFinanceIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceCollectFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeIndexDTO != null) {
          oprot.writeFieldBegin(FINANCE_INDEX_DTO_FIELD_DESC);
          struct.financeIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceCollectFeeIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceCollectFeeIndexTotal_argsTupleScheme getScheme() {
        return new getFinanceCollectFeeIndexTotal_argsTupleScheme();
      }
    }

    private static class getFinanceCollectFeeIndexTotal_argsTupleScheme extends TupleScheme<getFinanceCollectFeeIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceCollectFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceIndexDTO()) {
          struct.financeIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceCollectFeeIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeIndexDTO = new FinanceIndexDTO();
          struct.financeIndexDTO.read(iprot);
          struct.setFinanceIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getFinanceCollectFeeIndexTotal_result implements org.apache.thrift.TBase<getFinanceCollectFeeIndexTotal_result, getFinanceCollectFeeIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceCollectFeeIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceCollectFeeIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceCollectFeeIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceCollectFeeIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceCollectFeeIndexTotal_result.class, metaDataMap);
    }

    public getFinanceCollectFeeIndexTotal_result() {
    }

    public getFinanceCollectFeeIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceCollectFeeIndexTotal_result(getFinanceCollectFeeIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getFinanceCollectFeeIndexTotal_result deepCopy() {
      return new getFinanceCollectFeeIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getFinanceCollectFeeIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceCollectFeeIndexTotal_result)
        return this.equals((getFinanceCollectFeeIndexTotal_result)that);
      return false;
    }

    public boolean equals(getFinanceCollectFeeIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceCollectFeeIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceCollectFeeIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceCollectFeeIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceCollectFeeIndexTotal_resultStandardScheme getScheme() {
        return new getFinanceCollectFeeIndexTotal_resultStandardScheme();
      }
    }

    private static class getFinanceCollectFeeIndexTotal_resultStandardScheme extends StandardScheme<getFinanceCollectFeeIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceCollectFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceCollectFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceCollectFeeIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceCollectFeeIndexTotal_resultTupleScheme getScheme() {
        return new getFinanceCollectFeeIndexTotal_resultTupleScheme();
      }
    }

    private static class getFinanceCollectFeeIndexTotal_resultTupleScheme extends TupleScheme<getFinanceCollectFeeIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceCollectFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceCollectFeeIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllFinanceHandle_args implements org.apache.thrift.TBase<findAllFinanceHandle_args, findAllFinanceHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllFinanceHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllFinanceHandle_args");

    private static final org.apache.thrift.protocol.TField FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllFinanceHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllFinanceHandle_argsTupleSchemeFactory());
    }

    public FinanceHandleDTO financeHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_HANDLE_DTO((short)1, "financeHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_HANDLE_DTO
            return FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllFinanceHandle_args.class, metaDataMap);
    }

    public findAllFinanceHandle_args() {
    }

    public findAllFinanceHandle_args(
      FinanceHandleDTO financeHandleDTO)
    {
      this();
      this.financeHandleDTO = financeHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllFinanceHandle_args(findAllFinanceHandle_args other) {
      if (other.isSetFinanceHandleDTO()) {
        this.financeHandleDTO = new FinanceHandleDTO(other.financeHandleDTO);
      }
    }

    public findAllFinanceHandle_args deepCopy() {
      return new findAllFinanceHandle_args(this);
    }

    @Override
    public void clear() {
      this.financeHandleDTO = null;
    }

    public FinanceHandleDTO getFinanceHandleDTO() {
      return this.financeHandleDTO;
    }

    public findAllFinanceHandle_args setFinanceHandleDTO(FinanceHandleDTO financeHandleDTO) {
      this.financeHandleDTO = financeHandleDTO;
      return this;
    }

    public void unsetFinanceHandleDTO() {
      this.financeHandleDTO = null;
    }

    /** Returns true if field financeHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceHandleDTO() {
      return this.financeHandleDTO != null;
    }

    public void setFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.financeHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetFinanceHandleDTO();
        } else {
          setFinanceHandleDTO((FinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        return getFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_HANDLE_DTO:
        return isSetFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllFinanceHandle_args)
        return this.equals((findAllFinanceHandle_args)that);
      return false;
    }

    public boolean equals(findAllFinanceHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_financeHandleDTO = true && this.isSetFinanceHandleDTO();
      boolean that_present_financeHandleDTO = true && that.isSetFinanceHandleDTO();
      if (this_present_financeHandleDTO || that_present_financeHandleDTO) {
        if (!(this_present_financeHandleDTO && that_present_financeHandleDTO))
          return false;
        if (!this.financeHandleDTO.equals(that.financeHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeHandleDTO = true && (isSetFinanceHandleDTO());
      list.add(present_financeHandleDTO);
      if (present_financeHandleDTO)
        list.add(financeHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllFinanceHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceHandleDTO()).compareTo(other.isSetFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeHandleDTO, other.financeHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllFinanceHandle_args(");
      boolean first = true;

      sb.append("financeHandleDTO:");
      if (this.financeHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeHandleDTO != null) {
        financeHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllFinanceHandle_argsStandardSchemeFactory implements SchemeFactory {
      public findAllFinanceHandle_argsStandardScheme getScheme() {
        return new findAllFinanceHandle_argsStandardScheme();
      }
    }

    private static class findAllFinanceHandle_argsStandardScheme extends StandardScheme<findAllFinanceHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllFinanceHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeHandleDTO = new FinanceHandleDTO();
                struct.financeHandleDTO.read(iprot);
                struct.setFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllFinanceHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeHandleDTO != null) {
          oprot.writeFieldBegin(FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.financeHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllFinanceHandle_argsTupleSchemeFactory implements SchemeFactory {
      public findAllFinanceHandle_argsTupleScheme getScheme() {
        return new findAllFinanceHandle_argsTupleScheme();
      }
    }

    private static class findAllFinanceHandle_argsTupleScheme extends TupleScheme<findAllFinanceHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceHandleDTO()) {
          struct.financeHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeHandleDTO = new FinanceHandleDTO();
          struct.financeHandleDTO.read(iprot);
          struct.setFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllFinanceHandle_result implements org.apache.thrift.TBase<findAllFinanceHandle_result, findAllFinanceHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllFinanceHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllFinanceHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllFinanceHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllFinanceHandle_resultTupleSchemeFactory());
    }

    public List<FinanceHandleDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllFinanceHandle_result.class, metaDataMap);
    }

    public findAllFinanceHandle_result() {
    }

    public findAllFinanceHandle_result(
      List<FinanceHandleDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllFinanceHandle_result(findAllFinanceHandle_result other) {
      if (other.isSetSuccess()) {
        List<FinanceHandleDTO> __this__success = new ArrayList<FinanceHandleDTO>(other.success.size());
        for (FinanceHandleDTO other_element : other.success) {
          __this__success.add(new FinanceHandleDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllFinanceHandle_result deepCopy() {
      return new findAllFinanceHandle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinanceHandleDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinanceHandleDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinanceHandleDTO>();
      }
      this.success.add(elem);
    }

    public List<FinanceHandleDTO> getSuccess() {
      return this.success;
    }

    public findAllFinanceHandle_result setSuccess(List<FinanceHandleDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinanceHandleDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllFinanceHandle_result)
        return this.equals((findAllFinanceHandle_result)that);
      return false;
    }

    public boolean equals(findAllFinanceHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllFinanceHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllFinanceHandle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllFinanceHandle_resultStandardSchemeFactory implements SchemeFactory {
      public findAllFinanceHandle_resultStandardScheme getScheme() {
        return new findAllFinanceHandle_resultStandardScheme();
      }
    }

    private static class findAllFinanceHandle_resultStandardScheme extends StandardScheme<findAllFinanceHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllFinanceHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list360 = iprot.readListBegin();
                  struct.success = new ArrayList<FinanceHandleDTO>(_list360.size);
                  FinanceHandleDTO _elem361;
                  for (int _i362 = 0; _i362 < _list360.size; ++_i362)
                  {
                    _elem361 = new FinanceHandleDTO();
                    _elem361.read(iprot);
                    struct.success.add(_elem361);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllFinanceHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinanceHandleDTO _iter363 : struct.success)
            {
              _iter363.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllFinanceHandle_resultTupleSchemeFactory implements SchemeFactory {
      public findAllFinanceHandle_resultTupleScheme getScheme() {
        return new findAllFinanceHandle_resultTupleScheme();
      }
    }

    private static class findAllFinanceHandle_resultTupleScheme extends TupleScheme<findAllFinanceHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinanceHandleDTO _iter364 : struct.success)
            {
              _iter364.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list365 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinanceHandleDTO>(_list365.size);
            FinanceHandleDTO _elem366;
            for (int _i367 = 0; _i367 < _list365.size; ++_i367)
            {
              _elem366 = new FinanceHandleDTO();
              _elem366.read(iprot);
              struct.success.add(_elem366);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinanceHandleTotal_args implements org.apache.thrift.TBase<getFinanceHandleTotal_args, getFinanceHandleTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceHandleTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceHandleTotal_args");

    private static final org.apache.thrift.protocol.TField FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceHandleTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceHandleTotal_argsTupleSchemeFactory());
    }

    public FinanceHandleDTO financeHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_HANDLE_DTO((short)1, "financeHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_HANDLE_DTO
            return FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceHandleTotal_args.class, metaDataMap);
    }

    public getFinanceHandleTotal_args() {
    }

    public getFinanceHandleTotal_args(
      FinanceHandleDTO financeHandleDTO)
    {
      this();
      this.financeHandleDTO = financeHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceHandleTotal_args(getFinanceHandleTotal_args other) {
      if (other.isSetFinanceHandleDTO()) {
        this.financeHandleDTO = new FinanceHandleDTO(other.financeHandleDTO);
      }
    }

    public getFinanceHandleTotal_args deepCopy() {
      return new getFinanceHandleTotal_args(this);
    }

    @Override
    public void clear() {
      this.financeHandleDTO = null;
    }

    public FinanceHandleDTO getFinanceHandleDTO() {
      return this.financeHandleDTO;
    }

    public getFinanceHandleTotal_args setFinanceHandleDTO(FinanceHandleDTO financeHandleDTO) {
      this.financeHandleDTO = financeHandleDTO;
      return this;
    }

    public void unsetFinanceHandleDTO() {
      this.financeHandleDTO = null;
    }

    /** Returns true if field financeHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceHandleDTO() {
      return this.financeHandleDTO != null;
    }

    public void setFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.financeHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetFinanceHandleDTO();
        } else {
          setFinanceHandleDTO((FinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        return getFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_HANDLE_DTO:
        return isSetFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceHandleTotal_args)
        return this.equals((getFinanceHandleTotal_args)that);
      return false;
    }

    public boolean equals(getFinanceHandleTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_financeHandleDTO = true && this.isSetFinanceHandleDTO();
      boolean that_present_financeHandleDTO = true && that.isSetFinanceHandleDTO();
      if (this_present_financeHandleDTO || that_present_financeHandleDTO) {
        if (!(this_present_financeHandleDTO && that_present_financeHandleDTO))
          return false;
        if (!this.financeHandleDTO.equals(that.financeHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeHandleDTO = true && (isSetFinanceHandleDTO());
      list.add(present_financeHandleDTO);
      if (present_financeHandleDTO)
        list.add(financeHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceHandleTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceHandleDTO()).compareTo(other.isSetFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeHandleDTO, other.financeHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceHandleTotal_args(");
      boolean first = true;

      sb.append("financeHandleDTO:");
      if (this.financeHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeHandleDTO != null) {
        financeHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceHandleTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceHandleTotal_argsStandardScheme getScheme() {
        return new getFinanceHandleTotal_argsStandardScheme();
      }
    }

    private static class getFinanceHandleTotal_argsStandardScheme extends StandardScheme<getFinanceHandleTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeHandleDTO = new FinanceHandleDTO();
                struct.financeHandleDTO.read(iprot);
                struct.setFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeHandleDTO != null) {
          oprot.writeFieldBegin(FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.financeHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceHandleTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceHandleTotal_argsTupleScheme getScheme() {
        return new getFinanceHandleTotal_argsTupleScheme();
      }
    }

    private static class getFinanceHandleTotal_argsTupleScheme extends TupleScheme<getFinanceHandleTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceHandleDTO()) {
          struct.financeHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeHandleDTO = new FinanceHandleDTO();
          struct.financeHandleDTO.read(iprot);
          struct.setFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class getFinanceHandleTotal_result implements org.apache.thrift.TBase<getFinanceHandleTotal_result, getFinanceHandleTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceHandleTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceHandleTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceHandleTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceHandleTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceHandleTotal_result.class, metaDataMap);
    }

    public getFinanceHandleTotal_result() {
    }

    public getFinanceHandleTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceHandleTotal_result(getFinanceHandleTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getFinanceHandleTotal_result deepCopy() {
      return new getFinanceHandleTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getFinanceHandleTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceHandleTotal_result)
        return this.equals((getFinanceHandleTotal_result)that);
      return false;
    }

    public boolean equals(getFinanceHandleTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceHandleTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceHandleTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceHandleTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceHandleTotal_resultStandardScheme getScheme() {
        return new getFinanceHandleTotal_resultStandardScheme();
      }
    }

    private static class getFinanceHandleTotal_resultStandardScheme extends StandardScheme<getFinanceHandleTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceHandleTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceHandleTotal_resultTupleScheme getScheme() {
        return new getFinanceHandleTotal_resultTupleScheme();
      }
    }

    private static class getFinanceHandleTotal_resultTupleScheme extends TupleScheme<getFinanceHandleTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addFinanceHandle_args implements org.apache.thrift.TBase<addFinanceHandle_args, addFinanceHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceHandle_args");

    private static final org.apache.thrift.protocol.TField FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceHandle_argsTupleSchemeFactory());
    }

    public FinanceHandleDTO financeHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_HANDLE_DTO((short)1, "financeHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_HANDLE_DTO
            return FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceHandle_args.class, metaDataMap);
    }

    public addFinanceHandle_args() {
    }

    public addFinanceHandle_args(
      FinanceHandleDTO financeHandleDTO)
    {
      this();
      this.financeHandleDTO = financeHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceHandle_args(addFinanceHandle_args other) {
      if (other.isSetFinanceHandleDTO()) {
        this.financeHandleDTO = new FinanceHandleDTO(other.financeHandleDTO);
      }
    }

    public addFinanceHandle_args deepCopy() {
      return new addFinanceHandle_args(this);
    }

    @Override
    public void clear() {
      this.financeHandleDTO = null;
    }

    public FinanceHandleDTO getFinanceHandleDTO() {
      return this.financeHandleDTO;
    }

    public addFinanceHandle_args setFinanceHandleDTO(FinanceHandleDTO financeHandleDTO) {
      this.financeHandleDTO = financeHandleDTO;
      return this;
    }

    public void unsetFinanceHandleDTO() {
      this.financeHandleDTO = null;
    }

    /** Returns true if field financeHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceHandleDTO() {
      return this.financeHandleDTO != null;
    }

    public void setFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.financeHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetFinanceHandleDTO();
        } else {
          setFinanceHandleDTO((FinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        return getFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_HANDLE_DTO:
        return isSetFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceHandle_args)
        return this.equals((addFinanceHandle_args)that);
      return false;
    }

    public boolean equals(addFinanceHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_financeHandleDTO = true && this.isSetFinanceHandleDTO();
      boolean that_present_financeHandleDTO = true && that.isSetFinanceHandleDTO();
      if (this_present_financeHandleDTO || that_present_financeHandleDTO) {
        if (!(this_present_financeHandleDTO && that_present_financeHandleDTO))
          return false;
        if (!this.financeHandleDTO.equals(that.financeHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeHandleDTO = true && (isSetFinanceHandleDTO());
      list.add(present_financeHandleDTO);
      if (present_financeHandleDTO)
        list.add(financeHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceHandleDTO()).compareTo(other.isSetFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeHandleDTO, other.financeHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceHandle_args(");
      boolean first = true;

      sb.append("financeHandleDTO:");
      if (this.financeHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeHandleDTO != null) {
        financeHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceHandle_argsStandardSchemeFactory implements SchemeFactory {
      public addFinanceHandle_argsStandardScheme getScheme() {
        return new addFinanceHandle_argsStandardScheme();
      }
    }

    private static class addFinanceHandle_argsStandardScheme extends StandardScheme<addFinanceHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeHandleDTO = new FinanceHandleDTO();
                struct.financeHandleDTO.read(iprot);
                struct.setFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeHandleDTO != null) {
          oprot.writeFieldBegin(FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.financeHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceHandle_argsTupleSchemeFactory implements SchemeFactory {
      public addFinanceHandle_argsTupleScheme getScheme() {
        return new addFinanceHandle_argsTupleScheme();
      }
    }

    private static class addFinanceHandle_argsTupleScheme extends TupleScheme<addFinanceHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceHandleDTO()) {
          struct.financeHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeHandleDTO = new FinanceHandleDTO();
          struct.financeHandleDTO.read(iprot);
          struct.setFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class addFinanceHandle_result implements org.apache.thrift.TBase<addFinanceHandle_result, addFinanceHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceHandle_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceHandle_result.class, metaDataMap);
    }

    public addFinanceHandle_result() {
    }

    public addFinanceHandle_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceHandle_result(addFinanceHandle_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addFinanceHandle_result deepCopy() {
      return new addFinanceHandle_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addFinanceHandle_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceHandle_result)
        return this.equals((addFinanceHandle_result)that);
      return false;
    }

    public boolean equals(addFinanceHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceHandle_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceHandle_resultStandardSchemeFactory implements SchemeFactory {
      public addFinanceHandle_resultStandardScheme getScheme() {
        return new addFinanceHandle_resultStandardScheme();
      }
    }

    private static class addFinanceHandle_resultStandardScheme extends StandardScheme<addFinanceHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceHandle_resultTupleSchemeFactory implements SchemeFactory {
      public addFinanceHandle_resultTupleScheme getScheme() {
        return new addFinanceHandle_resultTupleScheme();
      }
    }

    private static class addFinanceHandle_resultTupleScheme extends TupleScheme<addFinanceHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinanceHandleById_args implements org.apache.thrift.TBase<getFinanceHandleById_args, getFinanceHandleById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceHandleById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceHandleById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceHandleById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceHandleById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceHandleById_args.class, metaDataMap);
    }

    public getFinanceHandleById_args() {
    }

    public getFinanceHandleById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceHandleById_args(getFinanceHandleById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getFinanceHandleById_args deepCopy() {
      return new getFinanceHandleById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getFinanceHandleById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceHandleById_args)
        return this.equals((getFinanceHandleById_args)that);
      return false;
    }

    public boolean equals(getFinanceHandleById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceHandleById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceHandleById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceHandleById_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceHandleById_argsStandardScheme getScheme() {
        return new getFinanceHandleById_argsStandardScheme();
      }
    }

    private static class getFinanceHandleById_argsStandardScheme extends StandardScheme<getFinanceHandleById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceHandleById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceHandleById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceHandleById_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceHandleById_argsTupleScheme getScheme() {
        return new getFinanceHandleById_argsTupleScheme();
      }
    }

    private static class getFinanceHandleById_argsTupleScheme extends TupleScheme<getFinanceHandleById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getFinanceHandleById_result implements org.apache.thrift.TBase<getFinanceHandleById_result, getFinanceHandleById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceHandleById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceHandleById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceHandleById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceHandleById_resultTupleSchemeFactory());
    }

    public FinanceHandleDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceHandleById_result.class, metaDataMap);
    }

    public getFinanceHandleById_result() {
    }

    public getFinanceHandleById_result(
      FinanceHandleDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceHandleById_result(getFinanceHandleById_result other) {
      if (other.isSetSuccess()) {
        this.success = new FinanceHandleDTO(other.success);
      }
    }

    public getFinanceHandleById_result deepCopy() {
      return new getFinanceHandleById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FinanceHandleDTO getSuccess() {
      return this.success;
    }

    public getFinanceHandleById_result setSuccess(FinanceHandleDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceHandleById_result)
        return this.equals((getFinanceHandleById_result)that);
      return false;
    }

    public boolean equals(getFinanceHandleById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceHandleById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceHandleById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceHandleById_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceHandleById_resultStandardScheme getScheme() {
        return new getFinanceHandleById_resultStandardScheme();
      }
    }

    private static class getFinanceHandleById_resultStandardScheme extends StandardScheme<getFinanceHandleById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceHandleById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FinanceHandleDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceHandleById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceHandleById_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceHandleById_resultTupleScheme getScheme() {
        return new getFinanceHandleById_resultTupleScheme();
      }
    }

    private static class getFinanceHandleById_resultTupleScheme extends TupleScheme<getFinanceHandleById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FinanceHandleDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFinanceHandle_args implements org.apache.thrift.TBase<updateFinanceHandle_args, updateFinanceHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFinanceHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFinanceHandle_args");

    private static final org.apache.thrift.protocol.TField FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFinanceHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFinanceHandle_argsTupleSchemeFactory());
    }

    public FinanceHandleDTO financeHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_HANDLE_DTO((short)1, "financeHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_HANDLE_DTO
            return FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFinanceHandle_args.class, metaDataMap);
    }

    public updateFinanceHandle_args() {
    }

    public updateFinanceHandle_args(
      FinanceHandleDTO financeHandleDTO)
    {
      this();
      this.financeHandleDTO = financeHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFinanceHandle_args(updateFinanceHandle_args other) {
      if (other.isSetFinanceHandleDTO()) {
        this.financeHandleDTO = new FinanceHandleDTO(other.financeHandleDTO);
      }
    }

    public updateFinanceHandle_args deepCopy() {
      return new updateFinanceHandle_args(this);
    }

    @Override
    public void clear() {
      this.financeHandleDTO = null;
    }

    public FinanceHandleDTO getFinanceHandleDTO() {
      return this.financeHandleDTO;
    }

    public updateFinanceHandle_args setFinanceHandleDTO(FinanceHandleDTO financeHandleDTO) {
      this.financeHandleDTO = financeHandleDTO;
      return this;
    }

    public void unsetFinanceHandleDTO() {
      this.financeHandleDTO = null;
    }

    /** Returns true if field financeHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceHandleDTO() {
      return this.financeHandleDTO != null;
    }

    public void setFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.financeHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetFinanceHandleDTO();
        } else {
          setFinanceHandleDTO((FinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        return getFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_HANDLE_DTO:
        return isSetFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFinanceHandle_args)
        return this.equals((updateFinanceHandle_args)that);
      return false;
    }

    public boolean equals(updateFinanceHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_financeHandleDTO = true && this.isSetFinanceHandleDTO();
      boolean that_present_financeHandleDTO = true && that.isSetFinanceHandleDTO();
      if (this_present_financeHandleDTO || that_present_financeHandleDTO) {
        if (!(this_present_financeHandleDTO && that_present_financeHandleDTO))
          return false;
        if (!this.financeHandleDTO.equals(that.financeHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeHandleDTO = true && (isSetFinanceHandleDTO());
      list.add(present_financeHandleDTO);
      if (present_financeHandleDTO)
        list.add(financeHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFinanceHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceHandleDTO()).compareTo(other.isSetFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeHandleDTO, other.financeHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFinanceHandle_args(");
      boolean first = true;

      sb.append("financeHandleDTO:");
      if (this.financeHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeHandleDTO != null) {
        financeHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFinanceHandle_argsStandardSchemeFactory implements SchemeFactory {
      public updateFinanceHandle_argsStandardScheme getScheme() {
        return new updateFinanceHandle_argsStandardScheme();
      }
    }

    private static class updateFinanceHandle_argsStandardScheme extends StandardScheme<updateFinanceHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFinanceHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeHandleDTO = new FinanceHandleDTO();
                struct.financeHandleDTO.read(iprot);
                struct.setFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFinanceHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeHandleDTO != null) {
          oprot.writeFieldBegin(FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.financeHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFinanceHandle_argsTupleSchemeFactory implements SchemeFactory {
      public updateFinanceHandle_argsTupleScheme getScheme() {
        return new updateFinanceHandle_argsTupleScheme();
      }
    }

    private static class updateFinanceHandle_argsTupleScheme extends TupleScheme<updateFinanceHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceHandleDTO()) {
          struct.financeHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeHandleDTO = new FinanceHandleDTO();
          struct.financeHandleDTO.read(iprot);
          struct.setFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class updateFinanceHandle_result implements org.apache.thrift.TBase<updateFinanceHandle_result, updateFinanceHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFinanceHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFinanceHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFinanceHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFinanceHandle_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFinanceHandle_result.class, metaDataMap);
    }

    public updateFinanceHandle_result() {
    }

    public updateFinanceHandle_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFinanceHandle_result(updateFinanceHandle_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateFinanceHandle_result deepCopy() {
      return new updateFinanceHandle_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateFinanceHandle_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFinanceHandle_result)
        return this.equals((updateFinanceHandle_result)that);
      return false;
    }

    public boolean equals(updateFinanceHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFinanceHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFinanceHandle_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFinanceHandle_resultStandardSchemeFactory implements SchemeFactory {
      public updateFinanceHandle_resultStandardScheme getScheme() {
        return new updateFinanceHandle_resultStandardScheme();
      }
    }

    private static class updateFinanceHandle_resultStandardScheme extends StandardScheme<updateFinanceHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFinanceHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFinanceHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFinanceHandle_resultTupleSchemeFactory implements SchemeFactory {
      public updateFinanceHandle_resultTupleScheme getScheme() {
        return new updateFinanceHandle_resultTupleScheme();
      }
    }

    private static class updateFinanceHandle_resultTupleScheme extends TupleScheme<updateFinanceHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllApplyFinanceHandle_args implements org.apache.thrift.TBase<findAllApplyFinanceHandle_args, findAllApplyFinanceHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllApplyFinanceHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllApplyFinanceHandle_args");

    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllApplyFinanceHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllApplyFinanceHandle_argsTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO applyFinanceHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_FINANCE_HANDLE_DTO((short)1, "applyFinanceHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_FINANCE_HANDLE_DTO
            return APPLY_FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllApplyFinanceHandle_args.class, metaDataMap);
    }

    public findAllApplyFinanceHandle_args() {
    }

    public findAllApplyFinanceHandle_args(
      ApplyFinanceHandleDTO applyFinanceHandleDTO)
    {
      this();
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllApplyFinanceHandle_args(findAllApplyFinanceHandle_args other) {
      if (other.isSetApplyFinanceHandleDTO()) {
        this.applyFinanceHandleDTO = new ApplyFinanceHandleDTO(other.applyFinanceHandleDTO);
      }
    }

    public findAllApplyFinanceHandle_args deepCopy() {
      return new findAllApplyFinanceHandle_args(this);
    }

    @Override
    public void clear() {
      this.applyFinanceHandleDTO = null;
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO;
    }

    public findAllApplyFinanceHandle_args setApplyFinanceHandleDTO(ApplyFinanceHandleDTO applyFinanceHandleDTO) {
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      return this;
    }

    public void unsetApplyFinanceHandleDTO() {
      this.applyFinanceHandleDTO = null;
    }

    /** Returns true if field applyFinanceHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO != null;
    }

    public void setApplyFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetApplyFinanceHandleDTO();
        } else {
          setApplyFinanceHandleDTO((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return getApplyFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return isSetApplyFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllApplyFinanceHandle_args)
        return this.equals((findAllApplyFinanceHandle_args)that);
      return false;
    }

    public boolean equals(findAllApplyFinanceHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_applyFinanceHandleDTO = true && this.isSetApplyFinanceHandleDTO();
      boolean that_present_applyFinanceHandleDTO = true && that.isSetApplyFinanceHandleDTO();
      if (this_present_applyFinanceHandleDTO || that_present_applyFinanceHandleDTO) {
        if (!(this_present_applyFinanceHandleDTO && that_present_applyFinanceHandleDTO))
          return false;
        if (!this.applyFinanceHandleDTO.equals(that.applyFinanceHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyFinanceHandleDTO = true && (isSetApplyFinanceHandleDTO());
      list.add(present_applyFinanceHandleDTO);
      if (present_applyFinanceHandleDTO)
        list.add(applyFinanceHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllApplyFinanceHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyFinanceHandleDTO()).compareTo(other.isSetApplyFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandleDTO, other.applyFinanceHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllApplyFinanceHandle_args(");
      boolean first = true;

      sb.append("applyFinanceHandleDTO:");
      if (this.applyFinanceHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyFinanceHandleDTO != null) {
        applyFinanceHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllApplyFinanceHandle_argsStandardSchemeFactory implements SchemeFactory {
      public findAllApplyFinanceHandle_argsStandardScheme getScheme() {
        return new findAllApplyFinanceHandle_argsStandardScheme();
      }
    }

    private static class findAllApplyFinanceHandle_argsStandardScheme extends StandardScheme<findAllApplyFinanceHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
                struct.applyFinanceHandleDTO.read(iprot);
                struct.setApplyFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyFinanceHandleDTO != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.applyFinanceHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllApplyFinanceHandle_argsTupleSchemeFactory implements SchemeFactory {
      public findAllApplyFinanceHandle_argsTupleScheme getScheme() {
        return new findAllApplyFinanceHandle_argsTupleScheme();
      }
    }

    private static class findAllApplyFinanceHandle_argsTupleScheme extends TupleScheme<findAllApplyFinanceHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyFinanceHandleDTO()) {
          struct.applyFinanceHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
          struct.applyFinanceHandleDTO.read(iprot);
          struct.setApplyFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class findAllApplyFinanceHandle_result implements org.apache.thrift.TBase<findAllApplyFinanceHandle_result, findAllApplyFinanceHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllApplyFinanceHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllApplyFinanceHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllApplyFinanceHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllApplyFinanceHandle_resultTupleSchemeFactory());
    }

    public List<ApplyFinanceHandleDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllApplyFinanceHandle_result.class, metaDataMap);
    }

    public findAllApplyFinanceHandle_result() {
    }

    public findAllApplyFinanceHandle_result(
      List<ApplyFinanceHandleDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllApplyFinanceHandle_result(findAllApplyFinanceHandle_result other) {
      if (other.isSetSuccess()) {
        List<ApplyFinanceHandleDTO> __this__success = new ArrayList<ApplyFinanceHandleDTO>(other.success.size());
        for (ApplyFinanceHandleDTO other_element : other.success) {
          __this__success.add(new ApplyFinanceHandleDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllApplyFinanceHandle_result deepCopy() {
      return new findAllApplyFinanceHandle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ApplyFinanceHandleDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ApplyFinanceHandleDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<ApplyFinanceHandleDTO>();
      }
      this.success.add(elem);
    }

    public List<ApplyFinanceHandleDTO> getSuccess() {
      return this.success;
    }

    public findAllApplyFinanceHandle_result setSuccess(List<ApplyFinanceHandleDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ApplyFinanceHandleDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllApplyFinanceHandle_result)
        return this.equals((findAllApplyFinanceHandle_result)that);
      return false;
    }

    public boolean equals(findAllApplyFinanceHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllApplyFinanceHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllApplyFinanceHandle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllApplyFinanceHandle_resultStandardSchemeFactory implements SchemeFactory {
      public findAllApplyFinanceHandle_resultStandardScheme getScheme() {
        return new findAllApplyFinanceHandle_resultStandardScheme();
      }
    }

    private static class findAllApplyFinanceHandle_resultStandardScheme extends StandardScheme<findAllApplyFinanceHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list368 = iprot.readListBegin();
                  struct.success = new ArrayList<ApplyFinanceHandleDTO>(_list368.size);
                  ApplyFinanceHandleDTO _elem369;
                  for (int _i370 = 0; _i370 < _list368.size; ++_i370)
                  {
                    _elem369 = new ApplyFinanceHandleDTO();
                    _elem369.read(iprot);
                    struct.success.add(_elem369);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ApplyFinanceHandleDTO _iter371 : struct.success)
            {
              _iter371.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllApplyFinanceHandle_resultTupleSchemeFactory implements SchemeFactory {
      public findAllApplyFinanceHandle_resultTupleScheme getScheme() {
        return new findAllApplyFinanceHandle_resultTupleScheme();
      }
    }

    private static class findAllApplyFinanceHandle_resultTupleScheme extends TupleScheme<findAllApplyFinanceHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ApplyFinanceHandleDTO _iter372 : struct.success)
            {
              _iter372.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list373 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ApplyFinanceHandleDTO>(_list373.size);
            ApplyFinanceHandleDTO _elem374;
            for (int _i375 = 0; _i375 < _list373.size; ++_i375)
            {
              _elem374 = new ApplyFinanceHandleDTO();
              _elem374.read(iprot);
              struct.success.add(_elem374);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplyFinanceHandleTotal_args implements org.apache.thrift.TBase<getApplyFinanceHandleTotal_args, getApplyFinanceHandleTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyFinanceHandleTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyFinanceHandleTotal_args");

    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyFinanceHandleTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyFinanceHandleTotal_argsTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO applyFinanceHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_FINANCE_HANDLE_DTO((short)1, "applyFinanceHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_FINANCE_HANDLE_DTO
            return APPLY_FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyFinanceHandleTotal_args.class, metaDataMap);
    }

    public getApplyFinanceHandleTotal_args() {
    }

    public getApplyFinanceHandleTotal_args(
      ApplyFinanceHandleDTO applyFinanceHandleDTO)
    {
      this();
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyFinanceHandleTotal_args(getApplyFinanceHandleTotal_args other) {
      if (other.isSetApplyFinanceHandleDTO()) {
        this.applyFinanceHandleDTO = new ApplyFinanceHandleDTO(other.applyFinanceHandleDTO);
      }
    }

    public getApplyFinanceHandleTotal_args deepCopy() {
      return new getApplyFinanceHandleTotal_args(this);
    }

    @Override
    public void clear() {
      this.applyFinanceHandleDTO = null;
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO;
    }

    public getApplyFinanceHandleTotal_args setApplyFinanceHandleDTO(ApplyFinanceHandleDTO applyFinanceHandleDTO) {
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      return this;
    }

    public void unsetApplyFinanceHandleDTO() {
      this.applyFinanceHandleDTO = null;
    }

    /** Returns true if field applyFinanceHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO != null;
    }

    public void setApplyFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetApplyFinanceHandleDTO();
        } else {
          setApplyFinanceHandleDTO((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return getApplyFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return isSetApplyFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyFinanceHandleTotal_args)
        return this.equals((getApplyFinanceHandleTotal_args)that);
      return false;
    }

    public boolean equals(getApplyFinanceHandleTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_applyFinanceHandleDTO = true && this.isSetApplyFinanceHandleDTO();
      boolean that_present_applyFinanceHandleDTO = true && that.isSetApplyFinanceHandleDTO();
      if (this_present_applyFinanceHandleDTO || that_present_applyFinanceHandleDTO) {
        if (!(this_present_applyFinanceHandleDTO && that_present_applyFinanceHandleDTO))
          return false;
        if (!this.applyFinanceHandleDTO.equals(that.applyFinanceHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyFinanceHandleDTO = true && (isSetApplyFinanceHandleDTO());
      list.add(present_applyFinanceHandleDTO);
      if (present_applyFinanceHandleDTO)
        list.add(applyFinanceHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyFinanceHandleTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyFinanceHandleDTO()).compareTo(other.isSetApplyFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandleDTO, other.applyFinanceHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyFinanceHandleTotal_args(");
      boolean first = true;

      sb.append("applyFinanceHandleDTO:");
      if (this.applyFinanceHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyFinanceHandleDTO != null) {
        applyFinanceHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyFinanceHandleTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleTotal_argsStandardScheme getScheme() {
        return new getApplyFinanceHandleTotal_argsStandardScheme();
      }
    }

    private static class getApplyFinanceHandleTotal_argsStandardScheme extends StandardScheme<getApplyFinanceHandleTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
                struct.applyFinanceHandleDTO.read(iprot);
                struct.setApplyFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyFinanceHandleDTO != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.applyFinanceHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyFinanceHandleTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleTotal_argsTupleScheme getScheme() {
        return new getApplyFinanceHandleTotal_argsTupleScheme();
      }
    }

    private static class getApplyFinanceHandleTotal_argsTupleScheme extends TupleScheme<getApplyFinanceHandleTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyFinanceHandleDTO()) {
          struct.applyFinanceHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
          struct.applyFinanceHandleDTO.read(iprot);
          struct.setApplyFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class getApplyFinanceHandleTotal_result implements org.apache.thrift.TBase<getApplyFinanceHandleTotal_result, getApplyFinanceHandleTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyFinanceHandleTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyFinanceHandleTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyFinanceHandleTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyFinanceHandleTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyFinanceHandleTotal_result.class, metaDataMap);
    }

    public getApplyFinanceHandleTotal_result() {
    }

    public getApplyFinanceHandleTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyFinanceHandleTotal_result(getApplyFinanceHandleTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getApplyFinanceHandleTotal_result deepCopy() {
      return new getApplyFinanceHandleTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getApplyFinanceHandleTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyFinanceHandleTotal_result)
        return this.equals((getApplyFinanceHandleTotal_result)that);
      return false;
    }

    public boolean equals(getApplyFinanceHandleTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyFinanceHandleTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyFinanceHandleTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyFinanceHandleTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleTotal_resultStandardScheme getScheme() {
        return new getApplyFinanceHandleTotal_resultStandardScheme();
      }
    }

    private static class getApplyFinanceHandleTotal_resultStandardScheme extends StandardScheme<getApplyFinanceHandleTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyFinanceHandleTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleTotal_resultTupleScheme getScheme() {
        return new getApplyFinanceHandleTotal_resultTupleScheme();
      }
    }

    private static class getApplyFinanceHandleTotal_resultTupleScheme extends TupleScheme<getApplyFinanceHandleTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addApplyFinanceHandle_args implements org.apache.thrift.TBase<addApplyFinanceHandle_args, addApplyFinanceHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<addApplyFinanceHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplyFinanceHandle_args");

    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplyFinanceHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplyFinanceHandle_argsTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO applyFinanceHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_FINANCE_HANDLE_DTO((short)1, "applyFinanceHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_FINANCE_HANDLE_DTO
            return APPLY_FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplyFinanceHandle_args.class, metaDataMap);
    }

    public addApplyFinanceHandle_args() {
    }

    public addApplyFinanceHandle_args(
      ApplyFinanceHandleDTO applyFinanceHandleDTO)
    {
      this();
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplyFinanceHandle_args(addApplyFinanceHandle_args other) {
      if (other.isSetApplyFinanceHandleDTO()) {
        this.applyFinanceHandleDTO = new ApplyFinanceHandleDTO(other.applyFinanceHandleDTO);
      }
    }

    public addApplyFinanceHandle_args deepCopy() {
      return new addApplyFinanceHandle_args(this);
    }

    @Override
    public void clear() {
      this.applyFinanceHandleDTO = null;
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO;
    }

    public addApplyFinanceHandle_args setApplyFinanceHandleDTO(ApplyFinanceHandleDTO applyFinanceHandleDTO) {
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      return this;
    }

    public void unsetApplyFinanceHandleDTO() {
      this.applyFinanceHandleDTO = null;
    }

    /** Returns true if field applyFinanceHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO != null;
    }

    public void setApplyFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetApplyFinanceHandleDTO();
        } else {
          setApplyFinanceHandleDTO((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return getApplyFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return isSetApplyFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplyFinanceHandle_args)
        return this.equals((addApplyFinanceHandle_args)that);
      return false;
    }

    public boolean equals(addApplyFinanceHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_applyFinanceHandleDTO = true && this.isSetApplyFinanceHandleDTO();
      boolean that_present_applyFinanceHandleDTO = true && that.isSetApplyFinanceHandleDTO();
      if (this_present_applyFinanceHandleDTO || that_present_applyFinanceHandleDTO) {
        if (!(this_present_applyFinanceHandleDTO && that_present_applyFinanceHandleDTO))
          return false;
        if (!this.applyFinanceHandleDTO.equals(that.applyFinanceHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyFinanceHandleDTO = true && (isSetApplyFinanceHandleDTO());
      list.add(present_applyFinanceHandleDTO);
      if (present_applyFinanceHandleDTO)
        list.add(applyFinanceHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addApplyFinanceHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyFinanceHandleDTO()).compareTo(other.isSetApplyFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandleDTO, other.applyFinanceHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplyFinanceHandle_args(");
      boolean first = true;

      sb.append("applyFinanceHandleDTO:");
      if (this.applyFinanceHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyFinanceHandleDTO != null) {
        applyFinanceHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplyFinanceHandle_argsStandardSchemeFactory implements SchemeFactory {
      public addApplyFinanceHandle_argsStandardScheme getScheme() {
        return new addApplyFinanceHandle_argsStandardScheme();
      }
    }

    private static class addApplyFinanceHandle_argsStandardScheme extends StandardScheme<addApplyFinanceHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
                struct.applyFinanceHandleDTO.read(iprot);
                struct.setApplyFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyFinanceHandleDTO != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.applyFinanceHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplyFinanceHandle_argsTupleSchemeFactory implements SchemeFactory {
      public addApplyFinanceHandle_argsTupleScheme getScheme() {
        return new addApplyFinanceHandle_argsTupleScheme();
      }
    }

    private static class addApplyFinanceHandle_argsTupleScheme extends TupleScheme<addApplyFinanceHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyFinanceHandleDTO()) {
          struct.applyFinanceHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
          struct.applyFinanceHandleDTO.read(iprot);
          struct.setApplyFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class addApplyFinanceHandle_result implements org.apache.thrift.TBase<addApplyFinanceHandle_result, addApplyFinanceHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<addApplyFinanceHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplyFinanceHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplyFinanceHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplyFinanceHandle_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplyFinanceHandle_result.class, metaDataMap);
    }

    public addApplyFinanceHandle_result() {
    }

    public addApplyFinanceHandle_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplyFinanceHandle_result(addApplyFinanceHandle_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addApplyFinanceHandle_result deepCopy() {
      return new addApplyFinanceHandle_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addApplyFinanceHandle_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplyFinanceHandle_result)
        return this.equals((addApplyFinanceHandle_result)that);
      return false;
    }

    public boolean equals(addApplyFinanceHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addApplyFinanceHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplyFinanceHandle_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplyFinanceHandle_resultStandardSchemeFactory implements SchemeFactory {
      public addApplyFinanceHandle_resultStandardScheme getScheme() {
        return new addApplyFinanceHandle_resultStandardScheme();
      }
    }

    private static class addApplyFinanceHandle_resultStandardScheme extends StandardScheme<addApplyFinanceHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplyFinanceHandle_resultTupleSchemeFactory implements SchemeFactory {
      public addApplyFinanceHandle_resultTupleScheme getScheme() {
        return new addApplyFinanceHandle_resultTupleScheme();
      }
    }

    private static class addApplyFinanceHandle_resultTupleScheme extends TupleScheme<addApplyFinanceHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplyFinanceHandleById_args implements org.apache.thrift.TBase<getApplyFinanceHandleById_args, getApplyFinanceHandleById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyFinanceHandleById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyFinanceHandleById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyFinanceHandleById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyFinanceHandleById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyFinanceHandleById_args.class, metaDataMap);
    }

    public getApplyFinanceHandleById_args() {
    }

    public getApplyFinanceHandleById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyFinanceHandleById_args(getApplyFinanceHandleById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getApplyFinanceHandleById_args deepCopy() {
      return new getApplyFinanceHandleById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getApplyFinanceHandleById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyFinanceHandleById_args)
        return this.equals((getApplyFinanceHandleById_args)that);
      return false;
    }

    public boolean equals(getApplyFinanceHandleById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyFinanceHandleById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyFinanceHandleById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyFinanceHandleById_argsStandardSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleById_argsStandardScheme getScheme() {
        return new getApplyFinanceHandleById_argsStandardScheme();
      }
    }

    private static class getApplyFinanceHandleById_argsStandardScheme extends StandardScheme<getApplyFinanceHandleById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyFinanceHandleById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyFinanceHandleById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyFinanceHandleById_argsTupleSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleById_argsTupleScheme getScheme() {
        return new getApplyFinanceHandleById_argsTupleScheme();
      }
    }

    private static class getApplyFinanceHandleById_argsTupleScheme extends TupleScheme<getApplyFinanceHandleById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getApplyFinanceHandleById_result implements org.apache.thrift.TBase<getApplyFinanceHandleById_result, getApplyFinanceHandleById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyFinanceHandleById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyFinanceHandleById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyFinanceHandleById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyFinanceHandleById_resultTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyFinanceHandleById_result.class, metaDataMap);
    }

    public getApplyFinanceHandleById_result() {
    }

    public getApplyFinanceHandleById_result(
      ApplyFinanceHandleDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyFinanceHandleById_result(getApplyFinanceHandleById_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApplyFinanceHandleDTO(other.success);
      }
    }

    public getApplyFinanceHandleById_result deepCopy() {
      return new getApplyFinanceHandleById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApplyFinanceHandleDTO getSuccess() {
      return this.success;
    }

    public getApplyFinanceHandleById_result setSuccess(ApplyFinanceHandleDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyFinanceHandleById_result)
        return this.equals((getApplyFinanceHandleById_result)that);
      return false;
    }

    public boolean equals(getApplyFinanceHandleById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyFinanceHandleById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyFinanceHandleById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyFinanceHandleById_resultStandardSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleById_resultStandardScheme getScheme() {
        return new getApplyFinanceHandleById_resultStandardScheme();
      }
    }

    private static class getApplyFinanceHandleById_resultStandardScheme extends StandardScheme<getApplyFinanceHandleById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyFinanceHandleById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApplyFinanceHandleDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyFinanceHandleById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyFinanceHandleById_resultTupleSchemeFactory implements SchemeFactory {
      public getApplyFinanceHandleById_resultTupleScheme getScheme() {
        return new getApplyFinanceHandleById_resultTupleScheme();
      }
    }

    private static class getApplyFinanceHandleById_resultTupleScheme extends TupleScheme<getApplyFinanceHandleById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyFinanceHandleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApplyFinanceHandleDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinanceHandleByProjectId_args implements org.apache.thrift.TBase<getFinanceHandleByProjectId_args, getFinanceHandleByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceHandleByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceHandleByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceHandleByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceHandleByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceHandleByProjectId_args.class, metaDataMap);
    }

    public getFinanceHandleByProjectId_args() {
    }

    public getFinanceHandleByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceHandleByProjectId_args(getFinanceHandleByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getFinanceHandleByProjectId_args deepCopy() {
      return new getFinanceHandleByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getFinanceHandleByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceHandleByProjectId_args)
        return this.equals((getFinanceHandleByProjectId_args)that);
      return false;
    }

    public boolean equals(getFinanceHandleByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceHandleByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceHandleByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceHandleByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceHandleByProjectId_argsStandardScheme getScheme() {
        return new getFinanceHandleByProjectId_argsStandardScheme();
      }
    }

    private static class getFinanceHandleByProjectId_argsStandardScheme extends StandardScheme<getFinanceHandleByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceHandleByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceHandleByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceHandleByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceHandleByProjectId_argsTupleScheme getScheme() {
        return new getFinanceHandleByProjectId_argsTupleScheme();
      }
    }

    private static class getFinanceHandleByProjectId_argsTupleScheme extends TupleScheme<getFinanceHandleByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getFinanceHandleByProjectId_result implements org.apache.thrift.TBase<getFinanceHandleByProjectId_result, getFinanceHandleByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceHandleByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceHandleByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceHandleByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceHandleByProjectId_resultTupleSchemeFactory());
    }

    public FinanceHandleDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceHandleByProjectId_result.class, metaDataMap);
    }

    public getFinanceHandleByProjectId_result() {
    }

    public getFinanceHandleByProjectId_result(
      FinanceHandleDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceHandleByProjectId_result(getFinanceHandleByProjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new FinanceHandleDTO(other.success);
      }
    }

    public getFinanceHandleByProjectId_result deepCopy() {
      return new getFinanceHandleByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FinanceHandleDTO getSuccess() {
      return this.success;
    }

    public getFinanceHandleByProjectId_result setSuccess(FinanceHandleDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceHandleByProjectId_result)
        return this.equals((getFinanceHandleByProjectId_result)that);
      return false;
    }

    public boolean equals(getFinanceHandleByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceHandleByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceHandleByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceHandleByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceHandleByProjectId_resultStandardScheme getScheme() {
        return new getFinanceHandleByProjectId_resultStandardScheme();
      }
    }

    private static class getFinanceHandleByProjectId_resultStandardScheme extends StandardScheme<getFinanceHandleByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceHandleByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FinanceHandleDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceHandleByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceHandleByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceHandleByProjectId_resultTupleScheme getScheme() {
        return new getFinanceHandleByProjectId_resultTupleScheme();
      }
    }

    private static class getFinanceHandleByProjectId_resultTupleScheme extends TupleScheme<getFinanceHandleByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceHandleByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FinanceHandleDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getByProjectIdAndRecPro_args implements org.apache.thrift.TBase<getByProjectIdAndRecPro_args, getByProjectIdAndRecPro_args._Fields>, java.io.Serializable, Cloneable, Comparable<getByProjectIdAndRecPro_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByProjectIdAndRecPro_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REC_PRO_FIELD_DESC = new org.apache.thrift.protocol.TField("recPro", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getByProjectIdAndRecPro_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getByProjectIdAndRecPro_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public int recPro; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      REC_PRO((short)2, "recPro");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // REC_PRO
            return REC_PRO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __RECPRO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REC_PRO, new org.apache.thrift.meta_data.FieldMetaData("recPro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByProjectIdAndRecPro_args.class, metaDataMap);
    }

    public getByProjectIdAndRecPro_args() {
    }

    public getByProjectIdAndRecPro_args(
      int projectId,
      int recPro)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.recPro = recPro;
      setRecProIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByProjectIdAndRecPro_args(getByProjectIdAndRecPro_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      this.recPro = other.recPro;
    }

    public getByProjectIdAndRecPro_args deepCopy() {
      return new getByProjectIdAndRecPro_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      setRecProIsSet(false);
      this.recPro = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getByProjectIdAndRecPro_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getRecPro() {
      return this.recPro;
    }

    public getByProjectIdAndRecPro_args setRecPro(int recPro) {
      this.recPro = recPro;
      setRecProIsSet(true);
      return this;
    }

    public void unsetRecPro() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECPRO_ISSET_ID);
    }

    /** Returns true if field recPro is set (has been assigned a value) and false otherwise */
    public boolean isSetRecPro() {
      return EncodingUtils.testBit(__isset_bitfield, __RECPRO_ISSET_ID);
    }

    public void setRecProIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECPRO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case REC_PRO:
        if (value == null) {
          unsetRecPro();
        } else {
          setRecPro((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case REC_PRO:
        return Integer.valueOf(getRecPro());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case REC_PRO:
        return isSetRecPro();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByProjectIdAndRecPro_args)
        return this.equals((getByProjectIdAndRecPro_args)that);
      return false;
    }

    public boolean equals(getByProjectIdAndRecPro_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_recPro = true;
      boolean that_present_recPro = true;
      if (this_present_recPro || that_present_recPro) {
        if (!(this_present_recPro && that_present_recPro))
          return false;
        if (this.recPro != that.recPro)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_recPro = true;
      list.add(present_recPro);
      if (present_recPro)
        list.add(recPro);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByProjectIdAndRecPro_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecPro()).compareTo(other.isSetRecPro());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecPro()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recPro, other.recPro);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByProjectIdAndRecPro_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recPro:");
      sb.append(this.recPro);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByProjectIdAndRecPro_argsStandardSchemeFactory implements SchemeFactory {
      public getByProjectIdAndRecPro_argsStandardScheme getScheme() {
        return new getByProjectIdAndRecPro_argsStandardScheme();
      }
    }

    private static class getByProjectIdAndRecPro_argsStandardScheme extends StandardScheme<getByProjectIdAndRecPro_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByProjectIdAndRecPro_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REC_PRO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.recPro = iprot.readI32();
                struct.setRecProIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByProjectIdAndRecPro_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REC_PRO_FIELD_DESC);
        oprot.writeI32(struct.recPro);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByProjectIdAndRecPro_argsTupleSchemeFactory implements SchemeFactory {
      public getByProjectIdAndRecPro_argsTupleScheme getScheme() {
        return new getByProjectIdAndRecPro_argsTupleScheme();
      }
    }

    private static class getByProjectIdAndRecPro_argsTupleScheme extends TupleScheme<getByProjectIdAndRecPro_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByProjectIdAndRecPro_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetRecPro()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetRecPro()) {
          oprot.writeI32(struct.recPro);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByProjectIdAndRecPro_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recPro = iprot.readI32();
          struct.setRecProIsSet(true);
        }
      }
    }

  }

  public static class getByProjectIdAndRecPro_result implements org.apache.thrift.TBase<getByProjectIdAndRecPro_result, getByProjectIdAndRecPro_result._Fields>, java.io.Serializable, Cloneable, Comparable<getByProjectIdAndRecPro_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByProjectIdAndRecPro_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getByProjectIdAndRecPro_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getByProjectIdAndRecPro_resultTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByProjectIdAndRecPro_result.class, metaDataMap);
    }

    public getByProjectIdAndRecPro_result() {
    }

    public getByProjectIdAndRecPro_result(
      ApplyFinanceHandleDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByProjectIdAndRecPro_result(getByProjectIdAndRecPro_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApplyFinanceHandleDTO(other.success);
      }
    }

    public getByProjectIdAndRecPro_result deepCopy() {
      return new getByProjectIdAndRecPro_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApplyFinanceHandleDTO getSuccess() {
      return this.success;
    }

    public getByProjectIdAndRecPro_result setSuccess(ApplyFinanceHandleDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByProjectIdAndRecPro_result)
        return this.equals((getByProjectIdAndRecPro_result)that);
      return false;
    }

    public boolean equals(getByProjectIdAndRecPro_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByProjectIdAndRecPro_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByProjectIdAndRecPro_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByProjectIdAndRecPro_resultStandardSchemeFactory implements SchemeFactory {
      public getByProjectIdAndRecPro_resultStandardScheme getScheme() {
        return new getByProjectIdAndRecPro_resultStandardScheme();
      }
    }

    private static class getByProjectIdAndRecPro_resultStandardScheme extends StandardScheme<getByProjectIdAndRecPro_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByProjectIdAndRecPro_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApplyFinanceHandleDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByProjectIdAndRecPro_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByProjectIdAndRecPro_resultTupleSchemeFactory implements SchemeFactory {
      public getByProjectIdAndRecPro_resultTupleScheme getScheme() {
        return new getByProjectIdAndRecPro_resultTupleScheme();
      }
    }

    private static class getByProjectIdAndRecPro_resultTupleScheme extends TupleScheme<getByProjectIdAndRecPro_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByProjectIdAndRecPro_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByProjectIdAndRecPro_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApplyFinanceHandleDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class makeLoans_args implements org.apache.thrift.TBase<makeLoans_args, makeLoans_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeLoans_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeLoans_args");

    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField IS_LOAN_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("isLoanFinish", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField HOUSE_CLERK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("houseClerkId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeLoans_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeLoans_argsTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO applyFinanceHandleDTO; // required
    public int userId; // required
    public int isLoanFinish; // required
    public int houseClerkId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_FINANCE_HANDLE_DTO((short)1, "applyFinanceHandleDTO"),
      USER_ID((short)2, "userId"),
      IS_LOAN_FINISH((short)3, "isLoanFinish"),
      HOUSE_CLERK_ID((short)4, "houseClerkId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_FINANCE_HANDLE_DTO
            return APPLY_FINANCE_HANDLE_DTO;
          case 2: // USER_ID
            return USER_ID;
          case 3: // IS_LOAN_FINISH
            return IS_LOAN_FINISH;
          case 4: // HOUSE_CLERK_ID
            return HOUSE_CLERK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ISLOANFINISH_ISSET_ID = 1;
    private static final int __HOUSECLERKID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_LOAN_FINISH, new org.apache.thrift.meta_data.FieldMetaData("isLoanFinish", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HOUSE_CLERK_ID, new org.apache.thrift.meta_data.FieldMetaData("houseClerkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeLoans_args.class, metaDataMap);
    }

    public makeLoans_args() {
    }

    public makeLoans_args(
      ApplyFinanceHandleDTO applyFinanceHandleDTO,
      int userId,
      int isLoanFinish,
      int houseClerkId)
    {
      this();
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      this.userId = userId;
      setUserIdIsSet(true);
      this.isLoanFinish = isLoanFinish;
      setIsLoanFinishIsSet(true);
      this.houseClerkId = houseClerkId;
      setHouseClerkIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeLoans_args(makeLoans_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplyFinanceHandleDTO()) {
        this.applyFinanceHandleDTO = new ApplyFinanceHandleDTO(other.applyFinanceHandleDTO);
      }
      this.userId = other.userId;
      this.isLoanFinish = other.isLoanFinish;
      this.houseClerkId = other.houseClerkId;
    }

    public makeLoans_args deepCopy() {
      return new makeLoans_args(this);
    }

    @Override
    public void clear() {
      this.applyFinanceHandleDTO = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setIsLoanFinishIsSet(false);
      this.isLoanFinish = 0;
      setHouseClerkIdIsSet(false);
      this.houseClerkId = 0;
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO;
    }

    public makeLoans_args setApplyFinanceHandleDTO(ApplyFinanceHandleDTO applyFinanceHandleDTO) {
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      return this;
    }

    public void unsetApplyFinanceHandleDTO() {
      this.applyFinanceHandleDTO = null;
    }

    /** Returns true if field applyFinanceHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO != null;
    }

    public void setApplyFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandleDTO = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public makeLoans_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getIsLoanFinish() {
      return this.isLoanFinish;
    }

    public makeLoans_args setIsLoanFinish(int isLoanFinish) {
      this.isLoanFinish = isLoanFinish;
      setIsLoanFinishIsSet(true);
      return this;
    }

    public void unsetIsLoanFinish() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLOANFINISH_ISSET_ID);
    }

    /** Returns true if field isLoanFinish is set (has been assigned a value) and false otherwise */
    public boolean isSetIsLoanFinish() {
      return EncodingUtils.testBit(__isset_bitfield, __ISLOANFINISH_ISSET_ID);
    }

    public void setIsLoanFinishIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLOANFINISH_ISSET_ID, value);
    }

    public int getHouseClerkId() {
      return this.houseClerkId;
    }

    public makeLoans_args setHouseClerkId(int houseClerkId) {
      this.houseClerkId = houseClerkId;
      setHouseClerkIdIsSet(true);
      return this;
    }

    public void unsetHouseClerkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID);
    }

    /** Returns true if field houseClerkId is set (has been assigned a value) and false otherwise */
    public boolean isSetHouseClerkId() {
      return EncodingUtils.testBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID);
    }

    public void setHouseClerkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetApplyFinanceHandleDTO();
        } else {
          setApplyFinanceHandleDTO((ApplyFinanceHandleDTO)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case IS_LOAN_FINISH:
        if (value == null) {
          unsetIsLoanFinish();
        } else {
          setIsLoanFinish((Integer)value);
        }
        break;

      case HOUSE_CLERK_ID:
        if (value == null) {
          unsetHouseClerkId();
        } else {
          setHouseClerkId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return getApplyFinanceHandleDTO();

      case USER_ID:
        return Integer.valueOf(getUserId());

      case IS_LOAN_FINISH:
        return Integer.valueOf(getIsLoanFinish());

      case HOUSE_CLERK_ID:
        return Integer.valueOf(getHouseClerkId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return isSetApplyFinanceHandleDTO();
      case USER_ID:
        return isSetUserId();
      case IS_LOAN_FINISH:
        return isSetIsLoanFinish();
      case HOUSE_CLERK_ID:
        return isSetHouseClerkId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeLoans_args)
        return this.equals((makeLoans_args)that);
      return false;
    }

    public boolean equals(makeLoans_args that) {
      if (that == null)
        return false;

      boolean this_present_applyFinanceHandleDTO = true && this.isSetApplyFinanceHandleDTO();
      boolean that_present_applyFinanceHandleDTO = true && that.isSetApplyFinanceHandleDTO();
      if (this_present_applyFinanceHandleDTO || that_present_applyFinanceHandleDTO) {
        if (!(this_present_applyFinanceHandleDTO && that_present_applyFinanceHandleDTO))
          return false;
        if (!this.applyFinanceHandleDTO.equals(that.applyFinanceHandleDTO))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_isLoanFinish = true;
      boolean that_present_isLoanFinish = true;
      if (this_present_isLoanFinish || that_present_isLoanFinish) {
        if (!(this_present_isLoanFinish && that_present_isLoanFinish))
          return false;
        if (this.isLoanFinish != that.isLoanFinish)
          return false;
      }

      boolean this_present_houseClerkId = true;
      boolean that_present_houseClerkId = true;
      if (this_present_houseClerkId || that_present_houseClerkId) {
        if (!(this_present_houseClerkId && that_present_houseClerkId))
          return false;
        if (this.houseClerkId != that.houseClerkId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyFinanceHandleDTO = true && (isSetApplyFinanceHandleDTO());
      list.add(present_applyFinanceHandleDTO);
      if (present_applyFinanceHandleDTO)
        list.add(applyFinanceHandleDTO);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_isLoanFinish = true;
      list.add(present_isLoanFinish);
      if (present_isLoanFinish)
        list.add(isLoanFinish);

      boolean present_houseClerkId = true;
      list.add(present_houseClerkId);
      if (present_houseClerkId)
        list.add(houseClerkId);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeLoans_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyFinanceHandleDTO()).compareTo(other.isSetApplyFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandleDTO, other.applyFinanceHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsLoanFinish()).compareTo(other.isSetIsLoanFinish());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsLoanFinish()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLoanFinish, other.isLoanFinish);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHouseClerkId()).compareTo(other.isSetHouseClerkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHouseClerkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseClerkId, other.houseClerkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeLoans_args(");
      boolean first = true;

      sb.append("applyFinanceHandleDTO:");
      if (this.applyFinanceHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandleDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isLoanFinish:");
      sb.append(this.isLoanFinish);
      first = false;
      if (!first) sb.append(", ");
      sb.append("houseClerkId:");
      sb.append(this.houseClerkId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyFinanceHandleDTO != null) {
        applyFinanceHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeLoans_argsStandardSchemeFactory implements SchemeFactory {
      public makeLoans_argsStandardScheme getScheme() {
        return new makeLoans_argsStandardScheme();
      }
    }

    private static class makeLoans_argsStandardScheme extends StandardScheme<makeLoans_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeLoans_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
                struct.applyFinanceHandleDTO.read(iprot);
                struct.setApplyFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_LOAN_FINISH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.isLoanFinish = iprot.readI32();
                struct.setIsLoanFinishIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOUSE_CLERK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.houseClerkId = iprot.readI32();
                struct.setHouseClerkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeLoans_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyFinanceHandleDTO != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.applyFinanceHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_LOAN_FINISH_FIELD_DESC);
        oprot.writeI32(struct.isLoanFinish);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HOUSE_CLERK_ID_FIELD_DESC);
        oprot.writeI32(struct.houseClerkId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeLoans_argsTupleSchemeFactory implements SchemeFactory {
      public makeLoans_argsTupleScheme getScheme() {
        return new makeLoans_argsTupleScheme();
      }
    }

    private static class makeLoans_argsTupleScheme extends TupleScheme<makeLoans_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeLoans_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyFinanceHandleDTO()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetIsLoanFinish()) {
          optionals.set(2);
        }
        if (struct.isSetHouseClerkId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetApplyFinanceHandleDTO()) {
          struct.applyFinanceHandleDTO.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetIsLoanFinish()) {
          oprot.writeI32(struct.isLoanFinish);
        }
        if (struct.isSetHouseClerkId()) {
          oprot.writeI32(struct.houseClerkId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeLoans_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
          struct.applyFinanceHandleDTO.read(iprot);
          struct.setApplyFinanceHandleDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isLoanFinish = iprot.readI32();
          struct.setIsLoanFinishIsSet(true);
        }
        if (incoming.get(3)) {
          struct.houseClerkId = iprot.readI32();
          struct.setHouseClerkIdIsSet(true);
        }
      }
    }

  }

  public static class makeLoans_result implements org.apache.thrift.TBase<makeLoans_result, makeLoans_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeLoans_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeLoans_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeLoans_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeLoans_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeLoans_result.class, metaDataMap);
    }

    public makeLoans_result() {
    }

    public makeLoans_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeLoans_result(makeLoans_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public makeLoans_result deepCopy() {
      return new makeLoans_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public makeLoans_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeLoans_result)
        return this.equals((makeLoans_result)that);
      return false;
    }

    public boolean equals(makeLoans_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeLoans_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeLoans_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeLoans_resultStandardSchemeFactory implements SchemeFactory {
      public makeLoans_resultStandardScheme getScheme() {
        return new makeLoans_resultStandardScheme();
      }
    }

    private static class makeLoans_resultStandardScheme extends StandardScheme<makeLoans_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeLoans_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeLoans_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeLoans_resultTupleSchemeFactory implements SchemeFactory {
      public makeLoans_resultTupleScheme getScheme() {
        return new makeLoans_resultTupleScheme();
      }
    }

    private static class makeLoans_resultTupleScheme extends TupleScheme<makeLoans_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeLoans_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeLoans_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateApplyFinanceHandle_args implements org.apache.thrift.TBase<updateApplyFinanceHandle_args, updateApplyFinanceHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplyFinanceHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplyFinanceHandle_args");

    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplyFinanceHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplyFinanceHandle_argsTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO applyFinanceHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_FINANCE_HANDLE_DTO((short)1, "applyFinanceHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_FINANCE_HANDLE_DTO
            return APPLY_FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplyFinanceHandle_args.class, metaDataMap);
    }

    public updateApplyFinanceHandle_args() {
    }

    public updateApplyFinanceHandle_args(
      ApplyFinanceHandleDTO applyFinanceHandleDTO)
    {
      this();
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplyFinanceHandle_args(updateApplyFinanceHandle_args other) {
      if (other.isSetApplyFinanceHandleDTO()) {
        this.applyFinanceHandleDTO = new ApplyFinanceHandleDTO(other.applyFinanceHandleDTO);
      }
    }

    public updateApplyFinanceHandle_args deepCopy() {
      return new updateApplyFinanceHandle_args(this);
    }

    @Override
    public void clear() {
      this.applyFinanceHandleDTO = null;
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO;
    }

    public updateApplyFinanceHandle_args setApplyFinanceHandleDTO(ApplyFinanceHandleDTO applyFinanceHandleDTO) {
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      return this;
    }

    public void unsetApplyFinanceHandleDTO() {
      this.applyFinanceHandleDTO = null;
    }

    /** Returns true if field applyFinanceHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO != null;
    }

    public void setApplyFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetApplyFinanceHandleDTO();
        } else {
          setApplyFinanceHandleDTO((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return getApplyFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_FINANCE_HANDLE_DTO:
        return isSetApplyFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplyFinanceHandle_args)
        return this.equals((updateApplyFinanceHandle_args)that);
      return false;
    }

    public boolean equals(updateApplyFinanceHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_applyFinanceHandleDTO = true && this.isSetApplyFinanceHandleDTO();
      boolean that_present_applyFinanceHandleDTO = true && that.isSetApplyFinanceHandleDTO();
      if (this_present_applyFinanceHandleDTO || that_present_applyFinanceHandleDTO) {
        if (!(this_present_applyFinanceHandleDTO && that_present_applyFinanceHandleDTO))
          return false;
        if (!this.applyFinanceHandleDTO.equals(that.applyFinanceHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyFinanceHandleDTO = true && (isSetApplyFinanceHandleDTO());
      list.add(present_applyFinanceHandleDTO);
      if (present_applyFinanceHandleDTO)
        list.add(applyFinanceHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateApplyFinanceHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyFinanceHandleDTO()).compareTo(other.isSetApplyFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandleDTO, other.applyFinanceHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplyFinanceHandle_args(");
      boolean first = true;

      sb.append("applyFinanceHandleDTO:");
      if (this.applyFinanceHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyFinanceHandleDTO != null) {
        applyFinanceHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplyFinanceHandle_argsStandardSchemeFactory implements SchemeFactory {
      public updateApplyFinanceHandle_argsStandardScheme getScheme() {
        return new updateApplyFinanceHandle_argsStandardScheme();
      }
    }

    private static class updateApplyFinanceHandle_argsStandardScheme extends StandardScheme<updateApplyFinanceHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
                struct.applyFinanceHandleDTO.read(iprot);
                struct.setApplyFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyFinanceHandleDTO != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.applyFinanceHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplyFinanceHandle_argsTupleSchemeFactory implements SchemeFactory {
      public updateApplyFinanceHandle_argsTupleScheme getScheme() {
        return new updateApplyFinanceHandle_argsTupleScheme();
      }
    }

    private static class updateApplyFinanceHandle_argsTupleScheme extends TupleScheme<updateApplyFinanceHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyFinanceHandleDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyFinanceHandleDTO()) {
          struct.applyFinanceHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplyFinanceHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
          struct.applyFinanceHandleDTO.read(iprot);
          struct.setApplyFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class updateApplyFinanceHandle_result implements org.apache.thrift.TBase<updateApplyFinanceHandle_result, updateApplyFinanceHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplyFinanceHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplyFinanceHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplyFinanceHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplyFinanceHandle_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplyFinanceHandle_result.class, metaDataMap);
    }

    public updateApplyFinanceHandle_result() {
    }

    public updateApplyFinanceHandle_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplyFinanceHandle_result(updateApplyFinanceHandle_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateApplyFinanceHandle_result deepCopy() {
      return new updateApplyFinanceHandle_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateApplyFinanceHandle_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplyFinanceHandle_result)
        return this.equals((updateApplyFinanceHandle_result)that);
      return false;
    }

    public boolean equals(updateApplyFinanceHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateApplyFinanceHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplyFinanceHandle_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplyFinanceHandle_resultStandardSchemeFactory implements SchemeFactory {
      public updateApplyFinanceHandle_resultStandardScheme getScheme() {
        return new updateApplyFinanceHandle_resultStandardScheme();
      }
    }

    private static class updateApplyFinanceHandle_resultStandardScheme extends StandardScheme<updateApplyFinanceHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplyFinanceHandle_resultTupleSchemeFactory implements SchemeFactory {
      public updateApplyFinanceHandle_resultTupleScheme getScheme() {
        return new updateApplyFinanceHandle_resultTupleScheme();
      }
    }

    private static class updateApplyFinanceHandle_resultTupleScheme extends TupleScheme<updateApplyFinanceHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplyFinanceHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNewRecApplyFinance_args implements org.apache.thrift.TBase<getNewRecApplyFinance_args, getNewRecApplyFinance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewRecApplyFinance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewRecApplyFinance_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewRecApplyFinance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewRecApplyFinance_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewRecApplyFinance_args.class, metaDataMap);
    }

    public getNewRecApplyFinance_args() {
    }

    public getNewRecApplyFinance_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewRecApplyFinance_args(getNewRecApplyFinance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getNewRecApplyFinance_args deepCopy() {
      return new getNewRecApplyFinance_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getNewRecApplyFinance_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewRecApplyFinance_args)
        return this.equals((getNewRecApplyFinance_args)that);
      return false;
    }

    public boolean equals(getNewRecApplyFinance_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewRecApplyFinance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewRecApplyFinance_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewRecApplyFinance_argsStandardSchemeFactory implements SchemeFactory {
      public getNewRecApplyFinance_argsStandardScheme getScheme() {
        return new getNewRecApplyFinance_argsStandardScheme();
      }
    }

    private static class getNewRecApplyFinance_argsStandardScheme extends StandardScheme<getNewRecApplyFinance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewRecApplyFinance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewRecApplyFinance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewRecApplyFinance_argsTupleSchemeFactory implements SchemeFactory {
      public getNewRecApplyFinance_argsTupleScheme getScheme() {
        return new getNewRecApplyFinance_argsTupleScheme();
      }
    }

    private static class getNewRecApplyFinance_argsTupleScheme extends TupleScheme<getNewRecApplyFinance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewRecApplyFinance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewRecApplyFinance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getNewRecApplyFinance_result implements org.apache.thrift.TBase<getNewRecApplyFinance_result, getNewRecApplyFinance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewRecApplyFinance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewRecApplyFinance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewRecApplyFinance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewRecApplyFinance_resultTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewRecApplyFinance_result.class, metaDataMap);
    }

    public getNewRecApplyFinance_result() {
    }

    public getNewRecApplyFinance_result(
      ApplyFinanceHandleDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewRecApplyFinance_result(getNewRecApplyFinance_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApplyFinanceHandleDTO(other.success);
      }
    }

    public getNewRecApplyFinance_result deepCopy() {
      return new getNewRecApplyFinance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApplyFinanceHandleDTO getSuccess() {
      return this.success;
    }

    public getNewRecApplyFinance_result setSuccess(ApplyFinanceHandleDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewRecApplyFinance_result)
        return this.equals((getNewRecApplyFinance_result)that);
      return false;
    }

    public boolean equals(getNewRecApplyFinance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewRecApplyFinance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewRecApplyFinance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewRecApplyFinance_resultStandardSchemeFactory implements SchemeFactory {
      public getNewRecApplyFinance_resultStandardScheme getScheme() {
        return new getNewRecApplyFinance_resultStandardScheme();
      }
    }

    private static class getNewRecApplyFinance_resultStandardScheme extends StandardScheme<getNewRecApplyFinance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewRecApplyFinance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApplyFinanceHandleDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewRecApplyFinance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewRecApplyFinance_resultTupleSchemeFactory implements SchemeFactory {
      public getNewRecApplyFinance_resultTupleScheme getScheme() {
        return new getNewRecApplyFinance_resultTupleScheme();
      }
    }

    private static class getNewRecApplyFinance_resultTupleScheme extends TupleScheme<getNewRecApplyFinance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewRecApplyFinance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewRecApplyFinance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApplyFinanceHandleDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecMoney_args implements org.apache.thrift.TBase<getRecMoney_args, getRecMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecMoney_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REC_PROS_FIELD_DESC = new org.apache.thrift.protocol.TField("recPros", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecMoney_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public List<Integer> recPros; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      REC_PROS((short)2, "recPros");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // REC_PROS
            return REC_PROS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REC_PROS, new org.apache.thrift.meta_data.FieldMetaData("recPros", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecMoney_args.class, metaDataMap);
    }

    public getRecMoney_args() {
    }

    public getRecMoney_args(
      int projectId,
      List<Integer> recPros)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.recPros = recPros;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecMoney_args(getRecMoney_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      if (other.isSetRecPros()) {
        List<Integer> __this__recPros = new ArrayList<Integer>(other.recPros);
        this.recPros = __this__recPros;
      }
    }

    public getRecMoney_args deepCopy() {
      return new getRecMoney_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.recPros = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getRecMoney_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getRecProsSize() {
      return (this.recPros == null) ? 0 : this.recPros.size();
    }

    public java.util.Iterator<Integer> getRecProsIterator() {
      return (this.recPros == null) ? null : this.recPros.iterator();
    }

    public void addToRecPros(int elem) {
      if (this.recPros == null) {
        this.recPros = new ArrayList<Integer>();
      }
      this.recPros.add(elem);
    }

    public List<Integer> getRecPros() {
      return this.recPros;
    }

    public getRecMoney_args setRecPros(List<Integer> recPros) {
      this.recPros = recPros;
      return this;
    }

    public void unsetRecPros() {
      this.recPros = null;
    }

    /** Returns true if field recPros is set (has been assigned a value) and false otherwise */
    public boolean isSetRecPros() {
      return this.recPros != null;
    }

    public void setRecProsIsSet(boolean value) {
      if (!value) {
        this.recPros = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case REC_PROS:
        if (value == null) {
          unsetRecPros();
        } else {
          setRecPros((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case REC_PROS:
        return getRecPros();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case REC_PROS:
        return isSetRecPros();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecMoney_args)
        return this.equals((getRecMoney_args)that);
      return false;
    }

    public boolean equals(getRecMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_recPros = true && this.isSetRecPros();
      boolean that_present_recPros = true && that.isSetRecPros();
      if (this_present_recPros || that_present_recPros) {
        if (!(this_present_recPros && that_present_recPros))
          return false;
        if (!this.recPros.equals(that.recPros))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_recPros = true && (isSetRecPros());
      list.add(present_recPros);
      if (present_recPros)
        list.add(recPros);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecPros()).compareTo(other.isSetRecPros());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecPros()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recPros, other.recPros);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecMoney_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recPros:");
      if (this.recPros == null) {
        sb.append("null");
      } else {
        sb.append(this.recPros);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecMoney_argsStandardSchemeFactory implements SchemeFactory {
      public getRecMoney_argsStandardScheme getScheme() {
        return new getRecMoney_argsStandardScheme();
      }
    }

    private static class getRecMoney_argsStandardScheme extends StandardScheme<getRecMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REC_PROS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list376 = iprot.readListBegin();
                  struct.recPros = new ArrayList<Integer>(_list376.size);
                  int _elem377;
                  for (int _i378 = 0; _i378 < _list376.size; ++_i378)
                  {
                    _elem377 = iprot.readI32();
                    struct.recPros.add(_elem377);
                  }
                  iprot.readListEnd();
                }
                struct.setRecProsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.recPros != null) {
          oprot.writeFieldBegin(REC_PROS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.recPros.size()));
            for (int _iter379 : struct.recPros)
            {
              oprot.writeI32(_iter379);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecMoney_argsTupleSchemeFactory implements SchemeFactory {
      public getRecMoney_argsTupleScheme getScheme() {
        return new getRecMoney_argsTupleScheme();
      }
    }

    private static class getRecMoney_argsTupleScheme extends TupleScheme<getRecMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetRecPros()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetRecPros()) {
          {
            oprot.writeI32(struct.recPros.size());
            for (int _iter380 : struct.recPros)
            {
              oprot.writeI32(_iter380);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list381 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.recPros = new ArrayList<Integer>(_list381.size);
            int _elem382;
            for (int _i383 = 0; _i383 < _list381.size; ++_i383)
            {
              _elem382 = iprot.readI32();
              struct.recPros.add(_elem382);
            }
          }
          struct.setRecProsIsSet(true);
        }
      }
    }

  }

  public static class getRecMoney_result implements org.apache.thrift.TBase<getRecMoney_result, getRecMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecMoney_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecMoney_result.class, metaDataMap);
    }

    public getRecMoney_result() {
    }

    public getRecMoney_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecMoney_result(getRecMoney_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRecMoney_result deepCopy() {
      return new getRecMoney_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getRecMoney_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecMoney_result)
        return this.equals((getRecMoney_result)that);
      return false;
    }

    public boolean equals(getRecMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecMoney_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecMoney_resultStandardSchemeFactory implements SchemeFactory {
      public getRecMoney_resultStandardScheme getScheme() {
        return new getRecMoney_resultStandardScheme();
      }
    }

    private static class getRecMoney_resultStandardScheme extends StandardScheme<getRecMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecMoney_resultTupleSchemeFactory implements SchemeFactory {
      public getRecMoney_resultTupleScheme getScheme() {
        return new getRecMoney_resultTupleScheme();
      }
    }

    private static class getRecMoney_resultTupleScheme extends TupleScheme<getRecMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addFinanceHandleByExtension_args implements org.apache.thrift.TBase<addFinanceHandleByExtension_args, addFinanceHandleByExtension_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceHandleByExtension_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceHandleByExtension_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceHandleByExtension_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceHandleByExtension_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceHandleByExtension_args.class, metaDataMap);
    }

    public addFinanceHandleByExtension_args() {
    }

    public addFinanceHandleByExtension_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceHandleByExtension_args(addFinanceHandleByExtension_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public addFinanceHandleByExtension_args deepCopy() {
      return new addFinanceHandleByExtension_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public addFinanceHandleByExtension_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceHandleByExtension_args)
        return this.equals((addFinanceHandleByExtension_args)that);
      return false;
    }

    public boolean equals(addFinanceHandleByExtension_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceHandleByExtension_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceHandleByExtension_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceHandleByExtension_argsStandardSchemeFactory implements SchemeFactory {
      public addFinanceHandleByExtension_argsStandardScheme getScheme() {
        return new addFinanceHandleByExtension_argsStandardScheme();
      }
    }

    private static class addFinanceHandleByExtension_argsStandardScheme extends StandardScheme<addFinanceHandleByExtension_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceHandleByExtension_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceHandleByExtension_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceHandleByExtension_argsTupleSchemeFactory implements SchemeFactory {
      public addFinanceHandleByExtension_argsTupleScheme getScheme() {
        return new addFinanceHandleByExtension_argsTupleScheme();
      }
    }

    private static class addFinanceHandleByExtension_argsTupleScheme extends TupleScheme<addFinanceHandleByExtension_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceHandleByExtension_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceHandleByExtension_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class addFinanceHandleByExtension_result implements org.apache.thrift.TBase<addFinanceHandleByExtension_result, addFinanceHandleByExtension_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceHandleByExtension_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceHandleByExtension_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceHandleByExtension_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceHandleByExtension_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceHandleByExtension_result.class, metaDataMap);
    }

    public addFinanceHandleByExtension_result() {
    }

    public addFinanceHandleByExtension_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceHandleByExtension_result(addFinanceHandleByExtension_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addFinanceHandleByExtension_result deepCopy() {
      return new addFinanceHandleByExtension_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addFinanceHandleByExtension_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceHandleByExtension_result)
        return this.equals((addFinanceHandleByExtension_result)that);
      return false;
    }

    public boolean equals(addFinanceHandleByExtension_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceHandleByExtension_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceHandleByExtension_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceHandleByExtension_resultStandardSchemeFactory implements SchemeFactory {
      public addFinanceHandleByExtension_resultStandardScheme getScheme() {
        return new addFinanceHandleByExtension_resultStandardScheme();
      }
    }

    private static class addFinanceHandleByExtension_resultStandardScheme extends StandardScheme<addFinanceHandleByExtension_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceHandleByExtension_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceHandleByExtension_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceHandleByExtension_resultTupleSchemeFactory implements SchemeFactory {
      public addFinanceHandleByExtension_resultTupleScheme getScheme() {
        return new addFinanceHandleByExtension_resultTupleScheme();
      }
    }

    private static class addFinanceHandleByExtension_resultTupleScheme extends TupleScheme<addFinanceHandleByExtension_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceHandleByExtension_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceHandleByExtension_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class collectExtensionFee_args implements org.apache.thrift.TBase<collectExtensionFee_args, collectExtensionFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<collectExtensionFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectExtensionFee_args");

    private static final org.apache.thrift.protocol.TField FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("financeHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandleDTO", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectExtensionFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectExtensionFee_argsTupleSchemeFactory());
    }

    public FinanceHandleDTO financeHandleDTO; // required
    public ApplyFinanceHandleDTO applyFinanceHandleDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_HANDLE_DTO((short)1, "financeHandleDTO"),
      APPLY_FINANCE_HANDLE_DTO((short)2, "applyFinanceHandleDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_HANDLE_DTO
            return FINANCE_HANDLE_DTO;
          case 2: // APPLY_FINANCE_HANDLE_DTO
            return APPLY_FINANCE_HANDLE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("financeHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceHandleDTO.class)));
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE_DTO, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandleDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectExtensionFee_args.class, metaDataMap);
    }

    public collectExtensionFee_args() {
    }

    public collectExtensionFee_args(
      FinanceHandleDTO financeHandleDTO,
      ApplyFinanceHandleDTO applyFinanceHandleDTO)
    {
      this();
      this.financeHandleDTO = financeHandleDTO;
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectExtensionFee_args(collectExtensionFee_args other) {
      if (other.isSetFinanceHandleDTO()) {
        this.financeHandleDTO = new FinanceHandleDTO(other.financeHandleDTO);
      }
      if (other.isSetApplyFinanceHandleDTO()) {
        this.applyFinanceHandleDTO = new ApplyFinanceHandleDTO(other.applyFinanceHandleDTO);
      }
    }

    public collectExtensionFee_args deepCopy() {
      return new collectExtensionFee_args(this);
    }

    @Override
    public void clear() {
      this.financeHandleDTO = null;
      this.applyFinanceHandleDTO = null;
    }

    public FinanceHandleDTO getFinanceHandleDTO() {
      return this.financeHandleDTO;
    }

    public collectExtensionFee_args setFinanceHandleDTO(FinanceHandleDTO financeHandleDTO) {
      this.financeHandleDTO = financeHandleDTO;
      return this;
    }

    public void unsetFinanceHandleDTO() {
      this.financeHandleDTO = null;
    }

    /** Returns true if field financeHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceHandleDTO() {
      return this.financeHandleDTO != null;
    }

    public void setFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.financeHandleDTO = null;
      }
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO;
    }

    public collectExtensionFee_args setApplyFinanceHandleDTO(ApplyFinanceHandleDTO applyFinanceHandleDTO) {
      this.applyFinanceHandleDTO = applyFinanceHandleDTO;
      return this;
    }

    public void unsetApplyFinanceHandleDTO() {
      this.applyFinanceHandleDTO = null;
    }

    /** Returns true if field applyFinanceHandleDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandleDTO() {
      return this.applyFinanceHandleDTO != null;
    }

    public void setApplyFinanceHandleDTOIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandleDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetFinanceHandleDTO();
        } else {
          setFinanceHandleDTO((FinanceHandleDTO)value);
        }
        break;

      case APPLY_FINANCE_HANDLE_DTO:
        if (value == null) {
          unsetApplyFinanceHandleDTO();
        } else {
          setApplyFinanceHandleDTO((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_HANDLE_DTO:
        return getFinanceHandleDTO();

      case APPLY_FINANCE_HANDLE_DTO:
        return getApplyFinanceHandleDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_HANDLE_DTO:
        return isSetFinanceHandleDTO();
      case APPLY_FINANCE_HANDLE_DTO:
        return isSetApplyFinanceHandleDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectExtensionFee_args)
        return this.equals((collectExtensionFee_args)that);
      return false;
    }

    public boolean equals(collectExtensionFee_args that) {
      if (that == null)
        return false;

      boolean this_present_financeHandleDTO = true && this.isSetFinanceHandleDTO();
      boolean that_present_financeHandleDTO = true && that.isSetFinanceHandleDTO();
      if (this_present_financeHandleDTO || that_present_financeHandleDTO) {
        if (!(this_present_financeHandleDTO && that_present_financeHandleDTO))
          return false;
        if (!this.financeHandleDTO.equals(that.financeHandleDTO))
          return false;
      }

      boolean this_present_applyFinanceHandleDTO = true && this.isSetApplyFinanceHandleDTO();
      boolean that_present_applyFinanceHandleDTO = true && that.isSetApplyFinanceHandleDTO();
      if (this_present_applyFinanceHandleDTO || that_present_applyFinanceHandleDTO) {
        if (!(this_present_applyFinanceHandleDTO && that_present_applyFinanceHandleDTO))
          return false;
        if (!this.applyFinanceHandleDTO.equals(that.applyFinanceHandleDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeHandleDTO = true && (isSetFinanceHandleDTO());
      list.add(present_financeHandleDTO);
      if (present_financeHandleDTO)
        list.add(financeHandleDTO);

      boolean present_applyFinanceHandleDTO = true && (isSetApplyFinanceHandleDTO());
      list.add(present_applyFinanceHandleDTO);
      if (present_applyFinanceHandleDTO)
        list.add(applyFinanceHandleDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectExtensionFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceHandleDTO()).compareTo(other.isSetFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeHandleDTO, other.financeHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyFinanceHandleDTO()).compareTo(other.isSetApplyFinanceHandleDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandleDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandleDTO, other.applyFinanceHandleDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectExtensionFee_args(");
      boolean first = true;

      sb.append("financeHandleDTO:");
      if (this.financeHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.financeHandleDTO);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyFinanceHandleDTO:");
      if (this.applyFinanceHandleDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandleDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeHandleDTO != null) {
        financeHandleDTO.validate();
      }
      if (applyFinanceHandleDTO != null) {
        applyFinanceHandleDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectExtensionFee_argsStandardSchemeFactory implements SchemeFactory {
      public collectExtensionFee_argsStandardScheme getScheme() {
        return new collectExtensionFee_argsStandardScheme();
      }
    }

    private static class collectExtensionFee_argsStandardScheme extends StandardScheme<collectExtensionFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectExtensionFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeHandleDTO = new FinanceHandleDTO();
                struct.financeHandleDTO.read(iprot);
                struct.setFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLY_FINANCE_HANDLE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
                struct.applyFinanceHandleDTO.read(iprot);
                struct.setApplyFinanceHandleDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectExtensionFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeHandleDTO != null) {
          oprot.writeFieldBegin(FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.financeHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyFinanceHandleDTO != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_DTO_FIELD_DESC);
          struct.applyFinanceHandleDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectExtensionFee_argsTupleSchemeFactory implements SchemeFactory {
      public collectExtensionFee_argsTupleScheme getScheme() {
        return new collectExtensionFee_argsTupleScheme();
      }
    }

    private static class collectExtensionFee_argsTupleScheme extends TupleScheme<collectExtensionFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectExtensionFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceHandleDTO()) {
          optionals.set(0);
        }
        if (struct.isSetApplyFinanceHandleDTO()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFinanceHandleDTO()) {
          struct.financeHandleDTO.write(oprot);
        }
        if (struct.isSetApplyFinanceHandleDTO()) {
          struct.applyFinanceHandleDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectExtensionFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.financeHandleDTO = new FinanceHandleDTO();
          struct.financeHandleDTO.read(iprot);
          struct.setFinanceHandleDTOIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyFinanceHandleDTO = new ApplyFinanceHandleDTO();
          struct.applyFinanceHandleDTO.read(iprot);
          struct.setApplyFinanceHandleDTOIsSet(true);
        }
      }
    }

  }

  public static class collectExtensionFee_result implements org.apache.thrift.TBase<collectExtensionFee_result, collectExtensionFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<collectExtensionFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectExtensionFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectExtensionFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectExtensionFee_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectExtensionFee_result.class, metaDataMap);
    }

    public collectExtensionFee_result() {
    }

    public collectExtensionFee_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectExtensionFee_result(collectExtensionFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public collectExtensionFee_result deepCopy() {
      return new collectExtensionFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public collectExtensionFee_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectExtensionFee_result)
        return this.equals((collectExtensionFee_result)that);
      return false;
    }

    public boolean equals(collectExtensionFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectExtensionFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectExtensionFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectExtensionFee_resultStandardSchemeFactory implements SchemeFactory {
      public collectExtensionFee_resultStandardScheme getScheme() {
        return new collectExtensionFee_resultStandardScheme();
      }
    }

    private static class collectExtensionFee_resultStandardScheme extends StandardScheme<collectExtensionFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectExtensionFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectExtensionFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectExtensionFee_resultTupleSchemeFactory implements SchemeFactory {
      public collectExtensionFee_resultTupleScheme getScheme() {
        return new collectExtensionFee_resultTupleScheme();
      }
    }

    private static class collectExtensionFee_resultTupleScheme extends TupleScheme<collectExtensionFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectExtensionFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectExtensionFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class collectFee_args implements org.apache.thrift.TBase<collectFee_args, collectFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<collectFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectFee_args");

    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandleList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectFee_argsTupleSchemeFactory());
    }

    public List<ApplyFinanceHandleDTO> applyFinanceHandleList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_FINANCE_HANDLE_LIST((short)1, "applyFinanceHandleList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_FINANCE_HANDLE_LIST
            return APPLY_FINANCE_HANDLE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandleList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectFee_args.class, metaDataMap);
    }

    public collectFee_args() {
    }

    public collectFee_args(
      List<ApplyFinanceHandleDTO> applyFinanceHandleList)
    {
      this();
      this.applyFinanceHandleList = applyFinanceHandleList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectFee_args(collectFee_args other) {
      if (other.isSetApplyFinanceHandleList()) {
        List<ApplyFinanceHandleDTO> __this__applyFinanceHandleList = new ArrayList<ApplyFinanceHandleDTO>(other.applyFinanceHandleList.size());
        for (ApplyFinanceHandleDTO other_element : other.applyFinanceHandleList) {
          __this__applyFinanceHandleList.add(new ApplyFinanceHandleDTO(other_element));
        }
        this.applyFinanceHandleList = __this__applyFinanceHandleList;
      }
    }

    public collectFee_args deepCopy() {
      return new collectFee_args(this);
    }

    @Override
    public void clear() {
      this.applyFinanceHandleList = null;
    }

    public int getApplyFinanceHandleListSize() {
      return (this.applyFinanceHandleList == null) ? 0 : this.applyFinanceHandleList.size();
    }

    public java.util.Iterator<ApplyFinanceHandleDTO> getApplyFinanceHandleListIterator() {
      return (this.applyFinanceHandleList == null) ? null : this.applyFinanceHandleList.iterator();
    }

    public void addToApplyFinanceHandleList(ApplyFinanceHandleDTO elem) {
      if (this.applyFinanceHandleList == null) {
        this.applyFinanceHandleList = new ArrayList<ApplyFinanceHandleDTO>();
      }
      this.applyFinanceHandleList.add(elem);
    }

    public List<ApplyFinanceHandleDTO> getApplyFinanceHandleList() {
      return this.applyFinanceHandleList;
    }

    public collectFee_args setApplyFinanceHandleList(List<ApplyFinanceHandleDTO> applyFinanceHandleList) {
      this.applyFinanceHandleList = applyFinanceHandleList;
      return this;
    }

    public void unsetApplyFinanceHandleList() {
      this.applyFinanceHandleList = null;
    }

    /** Returns true if field applyFinanceHandleList is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandleList() {
      return this.applyFinanceHandleList != null;
    }

    public void setApplyFinanceHandleListIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandleList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_LIST:
        if (value == null) {
          unsetApplyFinanceHandleList();
        } else {
          setApplyFinanceHandleList((List<ApplyFinanceHandleDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_FINANCE_HANDLE_LIST:
        return getApplyFinanceHandleList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_FINANCE_HANDLE_LIST:
        return isSetApplyFinanceHandleList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectFee_args)
        return this.equals((collectFee_args)that);
      return false;
    }

    public boolean equals(collectFee_args that) {
      if (that == null)
        return false;

      boolean this_present_applyFinanceHandleList = true && this.isSetApplyFinanceHandleList();
      boolean that_present_applyFinanceHandleList = true && that.isSetApplyFinanceHandleList();
      if (this_present_applyFinanceHandleList || that_present_applyFinanceHandleList) {
        if (!(this_present_applyFinanceHandleList && that_present_applyFinanceHandleList))
          return false;
        if (!this.applyFinanceHandleList.equals(that.applyFinanceHandleList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyFinanceHandleList = true && (isSetApplyFinanceHandleList());
      list.add(present_applyFinanceHandleList);
      if (present_applyFinanceHandleList)
        list.add(applyFinanceHandleList);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyFinanceHandleList()).compareTo(other.isSetApplyFinanceHandleList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandleList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandleList, other.applyFinanceHandleList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectFee_args(");
      boolean first = true;

      sb.append("applyFinanceHandleList:");
      if (this.applyFinanceHandleList == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandleList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectFee_argsStandardSchemeFactory implements SchemeFactory {
      public collectFee_argsStandardScheme getScheme() {
        return new collectFee_argsStandardScheme();
      }
    }

    private static class collectFee_argsStandardScheme extends StandardScheme<collectFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_FINANCE_HANDLE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list384 = iprot.readListBegin();
                  struct.applyFinanceHandleList = new ArrayList<ApplyFinanceHandleDTO>(_list384.size);
                  ApplyFinanceHandleDTO _elem385;
                  for (int _i386 = 0; _i386 < _list384.size; ++_i386)
                  {
                    _elem385 = new ApplyFinanceHandleDTO();
                    _elem385.read(iprot);
                    struct.applyFinanceHandleList.add(_elem385);
                  }
                  iprot.readListEnd();
                }
                struct.setApplyFinanceHandleListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyFinanceHandleList != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.applyFinanceHandleList.size()));
            for (ApplyFinanceHandleDTO _iter387 : struct.applyFinanceHandleList)
            {
              _iter387.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectFee_argsTupleSchemeFactory implements SchemeFactory {
      public collectFee_argsTupleScheme getScheme() {
        return new collectFee_argsTupleScheme();
      }
    }

    private static class collectFee_argsTupleScheme extends TupleScheme<collectFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyFinanceHandleList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyFinanceHandleList()) {
          {
            oprot.writeI32(struct.applyFinanceHandleList.size());
            for (ApplyFinanceHandleDTO _iter388 : struct.applyFinanceHandleList)
            {
              _iter388.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list389 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.applyFinanceHandleList = new ArrayList<ApplyFinanceHandleDTO>(_list389.size);
            ApplyFinanceHandleDTO _elem390;
            for (int _i391 = 0; _i391 < _list389.size; ++_i391)
            {
              _elem390 = new ApplyFinanceHandleDTO();
              _elem390.read(iprot);
              struct.applyFinanceHandleList.add(_elem390);
            }
          }
          struct.setApplyFinanceHandleListIsSet(true);
        }
      }
    }

  }

  public static class collectFee_result implements org.apache.thrift.TBase<collectFee_result, collectFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<collectFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectFee_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectFee_result.class, metaDataMap);
    }

    public collectFee_result() {
    }

    public collectFee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectFee_result(collectFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public collectFee_result deepCopy() {
      return new collectFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public collectFee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectFee_result)
        return this.equals((collectFee_result)that);
      return false;
    }

    public boolean equals(collectFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectFee_resultStandardSchemeFactory implements SchemeFactory {
      public collectFee_resultStandardScheme getScheme() {
        return new collectFee_resultStandardScheme();
      }
    }

    private static class collectFee_resultStandardScheme extends StandardScheme<collectFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectFee_resultTupleSchemeFactory implements SchemeFactory {
      public collectFee_resultTupleScheme getScheme() {
        return new collectFee_resultTupleScheme();
      }
    }

    private static class collectFee_resultTupleScheme extends TupleScheme<collectFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class collectFddFee_args implements org.apache.thrift.TBase<collectFddFee_args, collectFddFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<collectFddFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectFddFee_args");

    private static final org.apache.thrift.protocol.TField APPLY_FINANCE_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFinanceHandle", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectFddFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectFddFee_argsTupleSchemeFactory());
    }

    public ApplyFinanceHandleDTO applyFinanceHandle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_FINANCE_HANDLE((short)1, "applyFinanceHandle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_FINANCE_HANDLE
            return APPLY_FINANCE_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_FINANCE_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("applyFinanceHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectFddFee_args.class, metaDataMap);
    }

    public collectFddFee_args() {
    }

    public collectFddFee_args(
      ApplyFinanceHandleDTO applyFinanceHandle)
    {
      this();
      this.applyFinanceHandle = applyFinanceHandle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectFddFee_args(collectFddFee_args other) {
      if (other.isSetApplyFinanceHandle()) {
        this.applyFinanceHandle = new ApplyFinanceHandleDTO(other.applyFinanceHandle);
      }
    }

    public collectFddFee_args deepCopy() {
      return new collectFddFee_args(this);
    }

    @Override
    public void clear() {
      this.applyFinanceHandle = null;
    }

    public ApplyFinanceHandleDTO getApplyFinanceHandle() {
      return this.applyFinanceHandle;
    }

    public collectFddFee_args setApplyFinanceHandle(ApplyFinanceHandleDTO applyFinanceHandle) {
      this.applyFinanceHandle = applyFinanceHandle;
      return this;
    }

    public void unsetApplyFinanceHandle() {
      this.applyFinanceHandle = null;
    }

    /** Returns true if field applyFinanceHandle is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyFinanceHandle() {
      return this.applyFinanceHandle != null;
    }

    public void setApplyFinanceHandleIsSet(boolean value) {
      if (!value) {
        this.applyFinanceHandle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_FINANCE_HANDLE:
        if (value == null) {
          unsetApplyFinanceHandle();
        } else {
          setApplyFinanceHandle((ApplyFinanceHandleDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_FINANCE_HANDLE:
        return getApplyFinanceHandle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_FINANCE_HANDLE:
        return isSetApplyFinanceHandle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectFddFee_args)
        return this.equals((collectFddFee_args)that);
      return false;
    }

    public boolean equals(collectFddFee_args that) {
      if (that == null)
        return false;

      boolean this_present_applyFinanceHandle = true && this.isSetApplyFinanceHandle();
      boolean that_present_applyFinanceHandle = true && that.isSetApplyFinanceHandle();
      if (this_present_applyFinanceHandle || that_present_applyFinanceHandle) {
        if (!(this_present_applyFinanceHandle && that_present_applyFinanceHandle))
          return false;
        if (!this.applyFinanceHandle.equals(that.applyFinanceHandle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyFinanceHandle = true && (isSetApplyFinanceHandle());
      list.add(present_applyFinanceHandle);
      if (present_applyFinanceHandle)
        list.add(applyFinanceHandle);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectFddFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyFinanceHandle()).compareTo(other.isSetApplyFinanceHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyFinanceHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFinanceHandle, other.applyFinanceHandle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectFddFee_args(");
      boolean first = true;

      sb.append("applyFinanceHandle:");
      if (this.applyFinanceHandle == null) {
        sb.append("null");
      } else {
        sb.append(this.applyFinanceHandle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applyFinanceHandle != null) {
        applyFinanceHandle.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectFddFee_argsStandardSchemeFactory implements SchemeFactory {
      public collectFddFee_argsStandardScheme getScheme() {
        return new collectFddFee_argsStandardScheme();
      }
    }

    private static class collectFddFee_argsStandardScheme extends StandardScheme<collectFddFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectFddFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_FINANCE_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyFinanceHandle = new ApplyFinanceHandleDTO();
                struct.applyFinanceHandle.read(iprot);
                struct.setApplyFinanceHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectFddFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyFinanceHandle != null) {
          oprot.writeFieldBegin(APPLY_FINANCE_HANDLE_FIELD_DESC);
          struct.applyFinanceHandle.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectFddFee_argsTupleSchemeFactory implements SchemeFactory {
      public collectFddFee_argsTupleScheme getScheme() {
        return new collectFddFee_argsTupleScheme();
      }
    }

    private static class collectFddFee_argsTupleScheme extends TupleScheme<collectFddFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectFddFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyFinanceHandle()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyFinanceHandle()) {
          struct.applyFinanceHandle.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectFddFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applyFinanceHandle = new ApplyFinanceHandleDTO();
          struct.applyFinanceHandle.read(iprot);
          struct.setApplyFinanceHandleIsSet(true);
        }
      }
    }

  }

  public static class collectFddFee_result implements org.apache.thrift.TBase<collectFddFee_result, collectFddFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<collectFddFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectFddFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectFddFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectFddFee_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectFddFee_result.class, metaDataMap);
    }

    public collectFddFee_result() {
    }

    public collectFddFee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectFddFee_result(collectFddFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public collectFddFee_result deepCopy() {
      return new collectFddFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public collectFddFee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectFddFee_result)
        return this.equals((collectFddFee_result)that);
      return false;
    }

    public boolean equals(collectFddFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectFddFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectFddFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectFddFee_resultStandardSchemeFactory implements SchemeFactory {
      public collectFddFee_resultStandardScheme getScheme() {
        return new collectFddFee_resultStandardScheme();
      }
    }

    private static class collectFddFee_resultStandardScheme extends StandardScheme<collectFddFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectFddFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectFddFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectFddFee_resultTupleSchemeFactory implements SchemeFactory {
      public collectFddFee_resultTupleScheme getScheme() {
        return new collectFddFee_resultTupleScheme();
      }
    }

    private static class collectFddFee_resultTupleScheme extends TupleScheme<collectFddFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectFddFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectFddFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLoanHisByProjectId_args implements org.apache.thrift.TBase<getLoanHisByProjectId_args, getLoanHisByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanHisByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanHisByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("productNum", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanHisByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanHisByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public String productNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      PRODUCT_NUM((short)2, "productNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // PRODUCT_NUM
            return PRODUCT_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PRODUCT_NUM, new org.apache.thrift.meta_data.FieldMetaData("productNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanHisByProjectId_args.class, metaDataMap);
    }

    public getLoanHisByProjectId_args() {
    }

    public getLoanHisByProjectId_args(
      int projectId,
      String productNum)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.productNum = productNum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanHisByProjectId_args(getLoanHisByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      if (other.isSetProductNum()) {
        this.productNum = other.productNum;
      }
    }

    public getLoanHisByProjectId_args deepCopy() {
      return new getLoanHisByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.productNum = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getLoanHisByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public String getProductNum() {
      return this.productNum;
    }

    public getLoanHisByProjectId_args setProductNum(String productNum) {
      this.productNum = productNum;
      return this;
    }

    public void unsetProductNum() {
      this.productNum = null;
    }

    /** Returns true if field productNum is set (has been assigned a value) and false otherwise */
    public boolean isSetProductNum() {
      return this.productNum != null;
    }

    public void setProductNumIsSet(boolean value) {
      if (!value) {
        this.productNum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case PRODUCT_NUM:
        if (value == null) {
          unsetProductNum();
        } else {
          setProductNum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case PRODUCT_NUM:
        return getProductNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case PRODUCT_NUM:
        return isSetProductNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanHisByProjectId_args)
        return this.equals((getLoanHisByProjectId_args)that);
      return false;
    }

    public boolean equals(getLoanHisByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_productNum = true && this.isSetProductNum();
      boolean that_present_productNum = true && that.isSetProductNum();
      if (this_present_productNum || that_present_productNum) {
        if (!(this_present_productNum && that_present_productNum))
          return false;
        if (!this.productNum.equals(that.productNum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_productNum = true && (isSetProductNum());
      list.add(present_productNum);
      if (present_productNum)
        list.add(productNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanHisByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductNum()).compareTo(other.isSetProductNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productNum, other.productNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanHisByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("productNum:");
      if (this.productNum == null) {
        sb.append("null");
      } else {
        sb.append(this.productNum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanHisByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getLoanHisByProjectId_argsStandardScheme getScheme() {
        return new getLoanHisByProjectId_argsStandardScheme();
      }
    }

    private static class getLoanHisByProjectId_argsStandardScheme extends StandardScheme<getLoanHisByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanHisByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productNum = iprot.readString();
                struct.setProductNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanHisByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.productNum != null) {
          oprot.writeFieldBegin(PRODUCT_NUM_FIELD_DESC);
          oprot.writeString(struct.productNum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanHisByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getLoanHisByProjectId_argsTupleScheme getScheme() {
        return new getLoanHisByProjectId_argsTupleScheme();
      }
    }

    private static class getLoanHisByProjectId_argsTupleScheme extends TupleScheme<getLoanHisByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanHisByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetProductNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetProductNum()) {
          oprot.writeString(struct.productNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanHisByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productNum = iprot.readString();
          struct.setProductNumIsSet(true);
        }
      }
    }

  }

  public static class getLoanHisByProjectId_result implements org.apache.thrift.TBase<getLoanHisByProjectId_result, getLoanHisByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanHisByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanHisByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanHisByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanHisByProjectId_resultTupleSchemeFactory());
    }

    public List<ApplyFinanceHandleDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplyFinanceHandleDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanHisByProjectId_result.class, metaDataMap);
    }

    public getLoanHisByProjectId_result() {
    }

    public getLoanHisByProjectId_result(
      List<ApplyFinanceHandleDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanHisByProjectId_result(getLoanHisByProjectId_result other) {
      if (other.isSetSuccess()) {
        List<ApplyFinanceHandleDTO> __this__success = new ArrayList<ApplyFinanceHandleDTO>(other.success.size());
        for (ApplyFinanceHandleDTO other_element : other.success) {
          __this__success.add(new ApplyFinanceHandleDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLoanHisByProjectId_result deepCopy() {
      return new getLoanHisByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ApplyFinanceHandleDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ApplyFinanceHandleDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<ApplyFinanceHandleDTO>();
      }
      this.success.add(elem);
    }

    public List<ApplyFinanceHandleDTO> getSuccess() {
      return this.success;
    }

    public getLoanHisByProjectId_result setSuccess(List<ApplyFinanceHandleDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ApplyFinanceHandleDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanHisByProjectId_result)
        return this.equals((getLoanHisByProjectId_result)that);
      return false;
    }

    public boolean equals(getLoanHisByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanHisByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanHisByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanHisByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getLoanHisByProjectId_resultStandardScheme getScheme() {
        return new getLoanHisByProjectId_resultStandardScheme();
      }
    }

    private static class getLoanHisByProjectId_resultStandardScheme extends StandardScheme<getLoanHisByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanHisByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list392 = iprot.readListBegin();
                  struct.success = new ArrayList<ApplyFinanceHandleDTO>(_list392.size);
                  ApplyFinanceHandleDTO _elem393;
                  for (int _i394 = 0; _i394 < _list392.size; ++_i394)
                  {
                    _elem393 = new ApplyFinanceHandleDTO();
                    _elem393.read(iprot);
                    struct.success.add(_elem393);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanHisByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ApplyFinanceHandleDTO _iter395 : struct.success)
            {
              _iter395.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanHisByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getLoanHisByProjectId_resultTupleScheme getScheme() {
        return new getLoanHisByProjectId_resultTupleScheme();
      }
    }

    private static class getLoanHisByProjectId_resultTupleScheme extends TupleScheme<getLoanHisByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanHisByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ApplyFinanceHandleDTO _iter396 : struct.success)
            {
              _iter396.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanHisByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list397 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ApplyFinanceHandleDTO>(_list397.size);
            ApplyFinanceHandleDTO _elem398;
            for (int _i399 = 0; _i399 < _list397.size; ++_i399)
            {
              _elem398 = new ApplyFinanceHandleDTO();
              _elem398.read(iprot);
              struct.success.add(_elem398);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

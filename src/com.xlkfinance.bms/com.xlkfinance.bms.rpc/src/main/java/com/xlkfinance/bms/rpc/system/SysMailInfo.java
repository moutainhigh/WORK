/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 邮箱
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysMailInfo implements org.apache.thrift.TBase<SysMailInfo, SysMailInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SysMailInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysMailInfo");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREATOR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SEND_MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("sendMail", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REC_MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("recMail", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysMailInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysMailInfoTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public String creatorDate; // required
  public int creatorId; // required
  public int pid; // required
  public String subject; // required
  public String content; // required
  public String sendMail; // required
  public String recMail; // required
  public int status; // required
  public String ipAddress; // required
  public int category; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    CREATOR_DATE((short)3, "creatorDate"),
    CREATOR_ID((short)4, "creatorId"),
    PID((short)5, "pid"),
    SUBJECT((short)6, "subject"),
    CONTENT((short)7, "content"),
    SEND_MAIL((short)8, "sendMail"),
    REC_MAIL((short)9, "recMail"),
    STATUS((short)10, "status"),
    IP_ADDRESS((short)11, "ipAddress"),
    CATEGORY((short)12, "category");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // CREATOR_DATE
          return CREATOR_DATE;
        case 4: // CREATOR_ID
          return CREATOR_ID;
        case 5: // PID
          return PID;
        case 6: // SUBJECT
          return SUBJECT;
        case 7: // CONTENT
          return CONTENT;
        case 8: // SEND_MAIL
          return SEND_MAIL;
        case 9: // REC_MAIL
          return REC_MAIL;
        case 10: // STATUS
          return STATUS;
        case 11: // IP_ADDRESS
          return IP_ADDRESS;
        case 12: // CATEGORY
          return CATEGORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __CREATORID_ISSET_ID = 2;
  private static final int __PID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __CATEGORY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATOR_DATE, new org.apache.thrift.meta_data.FieldMetaData("creatorDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_MAIL, new org.apache.thrift.meta_data.FieldMetaData("sendMail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_MAIL, new org.apache.thrift.meta_data.FieldMetaData("recMail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysMailInfo.class, metaDataMap);
  }

  public SysMailInfo() {
    this.page = 1;

    this.rows = 10;

  }

  public SysMailInfo(
    int page,
    int rows,
    String creatorDate,
    int creatorId,
    int pid,
    String subject,
    String content,
    String sendMail,
    String recMail,
    int status,
    String ipAddress,
    int category)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.creatorDate = creatorDate;
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.subject = subject;
    this.content = content;
    this.sendMail = sendMail;
    this.recMail = recMail;
    this.status = status;
    setStatusIsSet(true);
    this.ipAddress = ipAddress;
    this.category = category;
    setCategoryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysMailInfo(SysMailInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreatorDate()) {
      this.creatorDate = other.creatorDate;
    }
    this.creatorId = other.creatorId;
    this.pid = other.pid;
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetSendMail()) {
      this.sendMail = other.sendMail;
    }
    if (other.isSetRecMail()) {
      this.recMail = other.recMail;
    }
    this.status = other.status;
    if (other.isSetIpAddress()) {
      this.ipAddress = other.ipAddress;
    }
    this.category = other.category;
  }

  public SysMailInfo deepCopy() {
    return new SysMailInfo(this);
  }

  @Override
  public void clear() {
    this.page = 1;

    this.rows = 10;

    this.creatorDate = null;
    setCreatorIdIsSet(false);
    this.creatorId = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.subject = null;
    this.content = null;
    this.sendMail = null;
    this.recMail = null;
    setStatusIsSet(false);
    this.status = 0;
    this.ipAddress = null;
    setCategoryIsSet(false);
    this.category = 0;
  }

  public int getPage() {
    return this.page;
  }

  public SysMailInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SysMailInfo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreatorDate() {
    return this.creatorDate;
  }

  public SysMailInfo setCreatorDate(String creatorDate) {
    this.creatorDate = creatorDate;
    return this;
  }

  public void unsetCreatorDate() {
    this.creatorDate = null;
  }

  /** Returns true if field creatorDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorDate() {
    return this.creatorDate != null;
  }

  public void setCreatorDateIsSet(boolean value) {
    if (!value) {
      this.creatorDate = null;
    }
  }

  public int getCreatorId() {
    return this.creatorId;
  }

  public SysMailInfo setCreatorId(int creatorId) {
    this.creatorId = creatorId;
    setCreatorIdIsSet(true);
    return this;
  }

  public void unsetCreatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATORID_ISSET_ID);
  }

  public void setCreatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATORID_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public SysMailInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getSubject() {
    return this.subject;
  }

  public SysMailInfo setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SysMailInfo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getSendMail() {
    return this.sendMail;
  }

  public SysMailInfo setSendMail(String sendMail) {
    this.sendMail = sendMail;
    return this;
  }

  public void unsetSendMail() {
    this.sendMail = null;
  }

  /** Returns true if field sendMail is set (has been assigned a value) and false otherwise */
  public boolean isSetSendMail() {
    return this.sendMail != null;
  }

  public void setSendMailIsSet(boolean value) {
    if (!value) {
      this.sendMail = null;
    }
  }

  public String getRecMail() {
    return this.recMail;
  }

  public SysMailInfo setRecMail(String recMail) {
    this.recMail = recMail;
    return this;
  }

  public void unsetRecMail() {
    this.recMail = null;
  }

  /** Returns true if field recMail is set (has been assigned a value) and false otherwise */
  public boolean isSetRecMail() {
    return this.recMail != null;
  }

  public void setRecMailIsSet(boolean value) {
    if (!value) {
      this.recMail = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public SysMailInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getIpAddress() {
    return this.ipAddress;
  }

  public SysMailInfo setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public int getCategory() {
    return this.category;
  }

  public SysMailInfo setCategory(int category) {
    this.category = category;
    setCategoryIsSet(true);
    return this;
  }

  public void unsetCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  public void setCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATOR_DATE:
      if (value == null) {
        unsetCreatorDate();
      } else {
        setCreatorDate((String)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SEND_MAIL:
      if (value == null) {
        unsetSendMail();
      } else {
        setSendMail((String)value);
      }
      break;

    case REC_MAIL:
      if (value == null) {
        unsetRecMail();
      } else {
        setRecMail((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATOR_DATE:
      return getCreatorDate();

    case CREATOR_ID:
      return Integer.valueOf(getCreatorId());

    case PID:
      return Integer.valueOf(getPid());

    case SUBJECT:
      return getSubject();

    case CONTENT:
      return getContent();

    case SEND_MAIL:
      return getSendMail();

    case REC_MAIL:
      return getRecMail();

    case STATUS:
      return Integer.valueOf(getStatus());

    case IP_ADDRESS:
      return getIpAddress();

    case CATEGORY:
      return Integer.valueOf(getCategory());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATOR_DATE:
      return isSetCreatorDate();
    case CREATOR_ID:
      return isSetCreatorId();
    case PID:
      return isSetPid();
    case SUBJECT:
      return isSetSubject();
    case CONTENT:
      return isSetContent();
    case SEND_MAIL:
      return isSetSendMail();
    case REC_MAIL:
      return isSetRecMail();
    case STATUS:
      return isSetStatus();
    case IP_ADDRESS:
      return isSetIpAddress();
    case CATEGORY:
      return isSetCategory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysMailInfo)
      return this.equals((SysMailInfo)that);
    return false;
  }

  public boolean equals(SysMailInfo that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_creatorDate = true && this.isSetCreatorDate();
    boolean that_present_creatorDate = true && that.isSetCreatorDate();
    if (this_present_creatorDate || that_present_creatorDate) {
      if (!(this_present_creatorDate && that_present_creatorDate))
        return false;
      if (!this.creatorDate.equals(that.creatorDate))
        return false;
    }

    boolean this_present_creatorId = true;
    boolean that_present_creatorId = true;
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (this.creatorId != that.creatorId)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_sendMail = true && this.isSetSendMail();
    boolean that_present_sendMail = true && that.isSetSendMail();
    if (this_present_sendMail || that_present_sendMail) {
      if (!(this_present_sendMail && that_present_sendMail))
        return false;
      if (!this.sendMail.equals(that.sendMail))
        return false;
    }

    boolean this_present_recMail = true && this.isSetRecMail();
    boolean that_present_recMail = true && that.isSetRecMail();
    if (this_present_recMail || that_present_recMail) {
      if (!(this_present_recMail && that_present_recMail))
        return false;
      if (!this.recMail.equals(that.recMail))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (!this.ipAddress.equals(that.ipAddress))
        return false;
    }

    boolean this_present_category = true;
    boolean that_present_category = true;
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (this.category != that.category)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_creatorDate = true && (isSetCreatorDate());
    list.add(present_creatorDate);
    if (present_creatorDate)
      list.add(creatorDate);

    boolean present_creatorId = true;
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_subject = true && (isSetSubject());
    list.add(present_subject);
    if (present_subject)
      list.add(subject);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_sendMail = true && (isSetSendMail());
    list.add(present_sendMail);
    if (present_sendMail)
      list.add(sendMail);

    boolean present_recMail = true && (isSetRecMail());
    list.add(present_recMail);
    if (present_recMail)
      list.add(recMail);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_ipAddress = true && (isSetIpAddress());
    list.add(present_ipAddress);
    if (present_ipAddress)
      list.add(ipAddress);

    boolean present_category = true;
    list.add(present_category);
    if (present_category)
      list.add(category);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysMailInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorDate()).compareTo(other.isSetCreatorDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorDate, other.creatorDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendMail()).compareTo(other.isSetSendMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendMail, other.sendMail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecMail()).compareTo(other.isSetRecMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recMail, other.recMail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysMailInfo(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorDate:");
    if (this.creatorDate == null) {
      sb.append("null");
    } else {
      sb.append(this.creatorDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    sb.append(this.creatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendMail:");
    if (this.sendMail == null) {
      sb.append("null");
    } else {
      sb.append(this.sendMail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recMail:");
    if (this.recMail == null) {
      sb.append("null");
    } else {
      sb.append(this.recMail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    sb.append(this.category);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysMailInfoStandardSchemeFactory implements SchemeFactory {
    public SysMailInfoStandardScheme getScheme() {
      return new SysMailInfoStandardScheme();
    }
  }

  private static class SysMailInfoStandardScheme extends StandardScheme<SysMailInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysMailInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATOR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorDate = iprot.readString();
              struct.setCreatorDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creatorId = iprot.readI32();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEND_MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendMail = iprot.readString();
              struct.setSendMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REC_MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recMail = iprot.readString();
              struct.setRecMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readString();
              struct.setIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = iprot.readI32();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysMailInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.creatorDate != null) {
        oprot.writeFieldBegin(CREATOR_DATE_FIELD_DESC);
        oprot.writeString(struct.creatorDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.creatorId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.sendMail != null) {
        oprot.writeFieldBegin(SEND_MAIL_FIELD_DESC);
        oprot.writeString(struct.sendMail);
        oprot.writeFieldEnd();
      }
      if (struct.recMail != null) {
        oprot.writeFieldBegin(REC_MAIL_FIELD_DESC);
        oprot.writeString(struct.recMail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.category);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysMailInfoTupleSchemeFactory implements SchemeFactory {
    public SysMailInfoTupleScheme getScheme() {
      return new SysMailInfoTupleScheme();
    }
  }

  private static class SysMailInfoTupleScheme extends TupleScheme<SysMailInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysMailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetCreatorDate()) {
        optionals.set(2);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(3);
      }
      if (struct.isSetPid()) {
        optionals.set(4);
      }
      if (struct.isSetSubject()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetSendMail()) {
        optionals.set(7);
      }
      if (struct.isSetRecMail()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetIpAddress()) {
        optionals.set(10);
      }
      if (struct.isSetCategory()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreatorDate()) {
        oprot.writeString(struct.creatorDate);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeI32(struct.creatorId);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetSendMail()) {
        oprot.writeString(struct.sendMail);
      }
      if (struct.isSetRecMail()) {
        oprot.writeString(struct.recMail);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetIpAddress()) {
        oprot.writeString(struct.ipAddress);
      }
      if (struct.isSetCategory()) {
        oprot.writeI32(struct.category);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysMailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creatorDate = iprot.readString();
        struct.setCreatorDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.creatorId = iprot.readI32();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sendMail = iprot.readString();
        struct.setSendMailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.recMail = iprot.readString();
        struct.setRecMailIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ipAddress = iprot.readString();
        struct.setIpAddressIsSet(true);
      }
      if (incoming.get(11)) {
        struct.category = iprot.readI32();
        struct.setCategoryIsSet(true);
      }
    }
  }

}


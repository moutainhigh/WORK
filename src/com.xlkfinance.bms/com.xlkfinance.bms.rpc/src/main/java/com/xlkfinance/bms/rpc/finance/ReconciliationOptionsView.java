/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class ReconciliationOptionsView implements org.apache.thrift.TBase<ReconciliationOptionsView, ReconciliationOptionsView._Fields>, java.io.Serializable, Cloneable, Comparable<ReconciliationOptionsView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReconciliationOptionsView");

  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REF_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("refNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDt", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OVERDUE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdue", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_FEEW_FIELD_DESC = new org.apache.thrift.protocol.TField("hasFeew", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReconciliationOptionsViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReconciliationOptionsViewTupleSchemeFactory());
  }

  public int refId; // required
  public int type; // required
  public String name; // required
  public int refNum; // required
  public String repayDt; // required
  public int overdue; // required
  public boolean hasFeew; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REF_ID((short)1, "refId"),
    TYPE((short)2, "type"),
    NAME((short)3, "name"),
    REF_NUM((short)4, "refNum"),
    REPAY_DT((short)5, "repayDt"),
    OVERDUE((short)6, "overdue"),
    HAS_FEEW((short)7, "hasFeew");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REF_ID
          return REF_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // NAME
          return NAME;
        case 4: // REF_NUM
          return REF_NUM;
        case 5: // REPAY_DT
          return REPAY_DT;
        case 6: // OVERDUE
          return OVERDUE;
        case 7: // HAS_FEEW
          return HAS_FEEW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REFID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __REFNUM_ISSET_ID = 2;
  private static final int __OVERDUE_ISSET_ID = 3;
  private static final int __HASFEEW_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_NUM, new org.apache.thrift.meta_data.FieldMetaData("refNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("repayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE, new org.apache.thrift.meta_data.FieldMetaData("overdue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_FEEW, new org.apache.thrift.meta_data.FieldMetaData("hasFeew", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReconciliationOptionsView.class, metaDataMap);
  }

  public ReconciliationOptionsView() {
  }

  public ReconciliationOptionsView(
    int refId,
    int type,
    String name,
    int refNum,
    String repayDt,
    int overdue,
    boolean hasFeew)
  {
    this();
    this.refId = refId;
    setRefIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.name = name;
    this.refNum = refNum;
    setRefNumIsSet(true);
    this.repayDt = repayDt;
    this.overdue = overdue;
    setOverdueIsSet(true);
    this.hasFeew = hasFeew;
    setHasFeewIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReconciliationOptionsView(ReconciliationOptionsView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.refId = other.refId;
    this.type = other.type;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.refNum = other.refNum;
    if (other.isSetRepayDt()) {
      this.repayDt = other.repayDt;
    }
    this.overdue = other.overdue;
    this.hasFeew = other.hasFeew;
  }

  public ReconciliationOptionsView deepCopy() {
    return new ReconciliationOptionsView(this);
  }

  @Override
  public void clear() {
    setRefIdIsSet(false);
    this.refId = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.name = null;
    setRefNumIsSet(false);
    this.refNum = 0;
    this.repayDt = null;
    setOverdueIsSet(false);
    this.overdue = 0;
    setHasFeewIsSet(false);
    this.hasFeew = false;
  }

  public int getRefId() {
    return this.refId;
  }

  public ReconciliationOptionsView setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public ReconciliationOptionsView setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ReconciliationOptionsView setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getRefNum() {
    return this.refNum;
  }

  public ReconciliationOptionsView setRefNum(int refNum) {
    this.refNum = refNum;
    setRefNumIsSet(true);
    return this;
  }

  public void unsetRefNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFNUM_ISSET_ID);
  }

  /** Returns true if field refNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRefNum() {
    return EncodingUtils.testBit(__isset_bitfield, __REFNUM_ISSET_ID);
  }

  public void setRefNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFNUM_ISSET_ID, value);
  }

  public String getRepayDt() {
    return this.repayDt;
  }

  public ReconciliationOptionsView setRepayDt(String repayDt) {
    this.repayDt = repayDt;
    return this;
  }

  public void unsetRepayDt() {
    this.repayDt = null;
  }

  /** Returns true if field repayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDt() {
    return this.repayDt != null;
  }

  public void setRepayDtIsSet(boolean value) {
    if (!value) {
      this.repayDt = null;
    }
  }

  public int getOverdue() {
    return this.overdue;
  }

  public ReconciliationOptionsView setOverdue(int overdue) {
    this.overdue = overdue;
    setOverdueIsSet(true);
    return this;
  }

  public void unsetOverdue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUE_ISSET_ID);
  }

  /** Returns true if field overdue is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdue() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUE_ISSET_ID);
  }

  public void setOverdueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUE_ISSET_ID, value);
  }

  public boolean isHasFeew() {
    return this.hasFeew;
  }

  public ReconciliationOptionsView setHasFeew(boolean hasFeew) {
    this.hasFeew = hasFeew;
    setHasFeewIsSet(true);
    return this;
  }

  public void unsetHasFeew() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASFEEW_ISSET_ID);
  }

  /** Returns true if field hasFeew is set (has been assigned a value) and false otherwise */
  public boolean isSetHasFeew() {
    return EncodingUtils.testBit(__isset_bitfield, __HASFEEW_ISSET_ID);
  }

  public void setHasFeewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASFEEW_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case REF_NUM:
      if (value == null) {
        unsetRefNum();
      } else {
        setRefNum((Integer)value);
      }
      break;

    case REPAY_DT:
      if (value == null) {
        unsetRepayDt();
      } else {
        setRepayDt((String)value);
      }
      break;

    case OVERDUE:
      if (value == null) {
        unsetOverdue();
      } else {
        setOverdue((Integer)value);
      }
      break;

    case HAS_FEEW:
      if (value == null) {
        unsetHasFeew();
      } else {
        setHasFeew((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REF_ID:
      return Integer.valueOf(getRefId());

    case TYPE:
      return Integer.valueOf(getType());

    case NAME:
      return getName();

    case REF_NUM:
      return Integer.valueOf(getRefNum());

    case REPAY_DT:
      return getRepayDt();

    case OVERDUE:
      return Integer.valueOf(getOverdue());

    case HAS_FEEW:
      return Boolean.valueOf(isHasFeew());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REF_ID:
      return isSetRefId();
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case REF_NUM:
      return isSetRefNum();
    case REPAY_DT:
      return isSetRepayDt();
    case OVERDUE:
      return isSetOverdue();
    case HAS_FEEW:
      return isSetHasFeew();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReconciliationOptionsView)
      return this.equals((ReconciliationOptionsView)that);
    return false;
  }

  public boolean equals(ReconciliationOptionsView that) {
    if (that == null)
      return false;

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_refNum = true;
    boolean that_present_refNum = true;
    if (this_present_refNum || that_present_refNum) {
      if (!(this_present_refNum && that_present_refNum))
        return false;
      if (this.refNum != that.refNum)
        return false;
    }

    boolean this_present_repayDt = true && this.isSetRepayDt();
    boolean that_present_repayDt = true && that.isSetRepayDt();
    if (this_present_repayDt || that_present_repayDt) {
      if (!(this_present_repayDt && that_present_repayDt))
        return false;
      if (!this.repayDt.equals(that.repayDt))
        return false;
    }

    boolean this_present_overdue = true;
    boolean that_present_overdue = true;
    if (this_present_overdue || that_present_overdue) {
      if (!(this_present_overdue && that_present_overdue))
        return false;
      if (this.overdue != that.overdue)
        return false;
    }

    boolean this_present_hasFeew = true;
    boolean that_present_hasFeew = true;
    if (this_present_hasFeew || that_present_hasFeew) {
      if (!(this_present_hasFeew && that_present_hasFeew))
        return false;
      if (this.hasFeew != that.hasFeew)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_refNum = true;
    list.add(present_refNum);
    if (present_refNum)
      list.add(refNum);

    boolean present_repayDt = true && (isSetRepayDt());
    list.add(present_repayDt);
    if (present_repayDt)
      list.add(repayDt);

    boolean present_overdue = true;
    list.add(present_overdue);
    if (present_overdue)
      list.add(overdue);

    boolean present_hasFeew = true;
    list.add(present_hasFeew);
    if (present_hasFeew)
      list.add(hasFeew);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReconciliationOptionsView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefNum()).compareTo(other.isSetRefNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refNum, other.refNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDt()).compareTo(other.isSetRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDt, other.repayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdue()).compareTo(other.isSetOverdue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdue, other.overdue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasFeew()).compareTo(other.isSetHasFeew());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasFeew()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasFeew, other.hasFeew);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReconciliationOptionsView(");
    boolean first = true;

    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refNum:");
    sb.append(this.refNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDt:");
    if (this.repayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdue:");
    sb.append(this.overdue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasFeew:");
    sb.append(this.hasFeew);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReconciliationOptionsViewStandardSchemeFactory implements SchemeFactory {
    public ReconciliationOptionsViewStandardScheme getScheme() {
      return new ReconciliationOptionsViewStandardScheme();
    }
  }

  private static class ReconciliationOptionsViewStandardScheme extends StandardScheme<ReconciliationOptionsView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReconciliationOptionsView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REF_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refNum = iprot.readI32();
              struct.setRefNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDt = iprot.readString();
              struct.setRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OVERDUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdue = iprot.readI32();
              struct.setOverdueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_FEEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasFeew = iprot.readBool();
              struct.setHasFeewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReconciliationOptionsView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_NUM_FIELD_DESC);
      oprot.writeI32(struct.refNum);
      oprot.writeFieldEnd();
      if (struct.repayDt != null) {
        oprot.writeFieldBegin(REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.repayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_FIELD_DESC);
      oprot.writeI32(struct.overdue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_FEEW_FIELD_DESC);
      oprot.writeBool(struct.hasFeew);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReconciliationOptionsViewTupleSchemeFactory implements SchemeFactory {
    public ReconciliationOptionsViewTupleScheme getScheme() {
      return new ReconciliationOptionsViewTupleScheme();
    }
  }

  private static class ReconciliationOptionsViewTupleScheme extends TupleScheme<ReconciliationOptionsView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReconciliationOptionsView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRefId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetRefNum()) {
        optionals.set(3);
      }
      if (struct.isSetRepayDt()) {
        optionals.set(4);
      }
      if (struct.isSetOverdue()) {
        optionals.set(5);
      }
      if (struct.isSetHasFeew()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetRefNum()) {
        oprot.writeI32(struct.refNum);
      }
      if (struct.isSetRepayDt()) {
        oprot.writeString(struct.repayDt);
      }
      if (struct.isSetOverdue()) {
        oprot.writeI32(struct.overdue);
      }
      if (struct.isSetHasFeew()) {
        oprot.writeBool(struct.hasFeew);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReconciliationOptionsView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refNum = iprot.readI32();
        struct.setRefNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.repayDt = iprot.readString();
        struct.setRepayDtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.overdue = iprot.readI32();
        struct.setOverdueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hasFeew = iprot.readBool();
        struct.setHasFeewIsSet(true);
      }
    }
  }

}


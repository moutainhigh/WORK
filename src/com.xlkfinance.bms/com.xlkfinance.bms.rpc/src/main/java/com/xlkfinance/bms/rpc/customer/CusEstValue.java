/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusEstValue implements org.apache.thrift.TBase<CusEstValue, CusEstValue._Fields>, java.io.Serializable, Cloneable, Comparable<CusEstValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusEstValue");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_EST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cusEstInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CUS_EST_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cusEstOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusEstValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusEstValueTupleSchemeFactory());
  }

  public int pid; // required
  public CusEstInfo cusEstInfo; // required
  public CusEstOption cusEstOption; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_EST_INFO((short)2, "cusEstInfo"),
    CUS_EST_OPTION((short)3, "cusEstOption"),
    STATUS((short)4, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_EST_INFO
          return CUS_EST_INFO;
        case 3: // CUS_EST_OPTION
          return CUS_EST_OPTION;
        case 4: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_EST_INFO, new org.apache.thrift.meta_data.FieldMetaData("cusEstInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusEstInfo.class)));
    tmpMap.put(_Fields.CUS_EST_OPTION, new org.apache.thrift.meta_data.FieldMetaData("cusEstOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusEstOption.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusEstValue.class, metaDataMap);
  }

  public CusEstValue() {
  }

  public CusEstValue(
    int pid,
    CusEstInfo cusEstInfo,
    CusEstOption cusEstOption,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusEstInfo = cusEstInfo;
    this.cusEstOption = cusEstOption;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusEstValue(CusEstValue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusEstInfo()) {
      this.cusEstInfo = new CusEstInfo(other.cusEstInfo);
    }
    if (other.isSetCusEstOption()) {
      this.cusEstOption = new CusEstOption(other.cusEstOption);
    }
    this.status = other.status;
  }

  public CusEstValue deepCopy() {
    return new CusEstValue(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusEstInfo = null;
    this.cusEstOption = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusEstValue setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusEstInfo getCusEstInfo() {
    return this.cusEstInfo;
  }

  public CusEstValue setCusEstInfo(CusEstInfo cusEstInfo) {
    this.cusEstInfo = cusEstInfo;
    return this;
  }

  public void unsetCusEstInfo() {
    this.cusEstInfo = null;
  }

  /** Returns true if field cusEstInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCusEstInfo() {
    return this.cusEstInfo != null;
  }

  public void setCusEstInfoIsSet(boolean value) {
    if (!value) {
      this.cusEstInfo = null;
    }
  }

  public CusEstOption getCusEstOption() {
    return this.cusEstOption;
  }

  public CusEstValue setCusEstOption(CusEstOption cusEstOption) {
    this.cusEstOption = cusEstOption;
    return this;
  }

  public void unsetCusEstOption() {
    this.cusEstOption = null;
  }

  /** Returns true if field cusEstOption is set (has been assigned a value) and false otherwise */
  public boolean isSetCusEstOption() {
    return this.cusEstOption != null;
  }

  public void setCusEstOptionIsSet(boolean value) {
    if (!value) {
      this.cusEstOption = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusEstValue setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_EST_INFO:
      if (value == null) {
        unsetCusEstInfo();
      } else {
        setCusEstInfo((CusEstInfo)value);
      }
      break;

    case CUS_EST_OPTION:
      if (value == null) {
        unsetCusEstOption();
      } else {
        setCusEstOption((CusEstOption)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_EST_INFO:
      return getCusEstInfo();

    case CUS_EST_OPTION:
      return getCusEstOption();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_EST_INFO:
      return isSetCusEstInfo();
    case CUS_EST_OPTION:
      return isSetCusEstOption();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusEstValue)
      return this.equals((CusEstValue)that);
    return false;
  }

  public boolean equals(CusEstValue that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusEstInfo = true && this.isSetCusEstInfo();
    boolean that_present_cusEstInfo = true && that.isSetCusEstInfo();
    if (this_present_cusEstInfo || that_present_cusEstInfo) {
      if (!(this_present_cusEstInfo && that_present_cusEstInfo))
        return false;
      if (!this.cusEstInfo.equals(that.cusEstInfo))
        return false;
    }

    boolean this_present_cusEstOption = true && this.isSetCusEstOption();
    boolean that_present_cusEstOption = true && that.isSetCusEstOption();
    if (this_present_cusEstOption || that_present_cusEstOption) {
      if (!(this_present_cusEstOption && that_present_cusEstOption))
        return false;
      if (!this.cusEstOption.equals(that.cusEstOption))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusEstInfo = true && (isSetCusEstInfo());
    list.add(present_cusEstInfo);
    if (present_cusEstInfo)
      list.add(cusEstInfo);

    boolean present_cusEstOption = true && (isSetCusEstOption());
    list.add(present_cusEstOption);
    if (present_cusEstOption)
      list.add(cusEstOption);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusEstValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusEstInfo()).compareTo(other.isSetCusEstInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusEstInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusEstInfo, other.cusEstInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusEstOption()).compareTo(other.isSetCusEstOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusEstOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusEstOption, other.cusEstOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusEstValue(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusEstInfo:");
    if (this.cusEstInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.cusEstInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusEstOption:");
    if (this.cusEstOption == null) {
      sb.append("null");
    } else {
      sb.append(this.cusEstOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusEstInfo != null) {
      cusEstInfo.validate();
    }
    if (cusEstOption != null) {
      cusEstOption.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusEstValueStandardSchemeFactory implements SchemeFactory {
    public CusEstValueStandardScheme getScheme() {
      return new CusEstValueStandardScheme();
    }
  }

  private static class CusEstValueStandardScheme extends StandardScheme<CusEstValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusEstValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_EST_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusEstInfo = new CusEstInfo();
              struct.cusEstInfo.read(iprot);
              struct.setCusEstInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUS_EST_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusEstOption = new CusEstOption();
              struct.cusEstOption.read(iprot);
              struct.setCusEstOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusEstValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusEstInfo != null) {
        oprot.writeFieldBegin(CUS_EST_INFO_FIELD_DESC);
        struct.cusEstInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusEstOption != null) {
        oprot.writeFieldBegin(CUS_EST_OPTION_FIELD_DESC);
        struct.cusEstOption.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusEstValueTupleSchemeFactory implements SchemeFactory {
    public CusEstValueTupleScheme getScheme() {
      return new CusEstValueTupleScheme();
    }
  }

  private static class CusEstValueTupleScheme extends TupleScheme<CusEstValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusEstValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusEstInfo()) {
        optionals.set(1);
      }
      if (struct.isSetCusEstOption()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusEstInfo()) {
        struct.cusEstInfo.write(oprot);
      }
      if (struct.isSetCusEstOption()) {
        struct.cusEstOption.write(oprot);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusEstValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusEstInfo = new CusEstInfo();
        struct.cusEstInfo.read(iprot);
        struct.setCusEstInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cusEstOption = new CusEstOption();
        struct.cusEstOption.read(iprot);
        struct.setCusEstOptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


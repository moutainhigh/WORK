/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusAcct implements org.apache.thrift.TBase<CusAcct, CusAcct._Fields>, java.io.Serializable, Cloneable, Comparable<CusAcct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusAcct");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CUS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("cusStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("acctTypeText", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ARR_PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("arrPids", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField CUSTOMER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("customerList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField CUS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusSource", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusAcctStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusAcctTupleSchemeFactory());
  }

  public int pid; // required
  public int cusType; // required
  public int cusStatus; // required
  public int status; // required
  public int pmUserId; // required
  public int pids; // required
  public String userName; // required
  public String acctName; // required
  public String acctTypeText; // required
  public int ecoTrade; // required
  public int page; // required
  public int rows; // required
  public String arrPids; // required
  public List<Integer> userIds; // required
  public List<CusPerson> customerList; // required
  public int cusSource; // required
  public int orgId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_TYPE((short)2, "cusType"),
    CUS_STATUS((short)3, "cusStatus"),
    STATUS((short)4, "status"),
    PM_USER_ID((short)5, "pmUserId"),
    PIDS((short)6, "pids"),
    USER_NAME((short)7, "userName"),
    ACCT_NAME((short)8, "acctName"),
    ACCT_TYPE_TEXT((short)9, "acctTypeText"),
    ECO_TRADE((short)10, "ecoTrade"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows"),
    ARR_PIDS((short)13, "arrPids"),
    USER_IDS((short)14, "userIds"),
    CUSTOMER_LIST((short)15, "customerList"),
    CUS_SOURCE((short)16, "cusSource"),
    ORG_ID((short)17, "orgId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_TYPE
          return CUS_TYPE;
        case 3: // CUS_STATUS
          return CUS_STATUS;
        case 4: // STATUS
          return STATUS;
        case 5: // PM_USER_ID
          return PM_USER_ID;
        case 6: // PIDS
          return PIDS;
        case 7: // USER_NAME
          return USER_NAME;
        case 8: // ACCT_NAME
          return ACCT_NAME;
        case 9: // ACCT_TYPE_TEXT
          return ACCT_TYPE_TEXT;
        case 10: // ECO_TRADE
          return ECO_TRADE;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        case 13: // ARR_PIDS
          return ARR_PIDS;
        case 14: // USER_IDS
          return USER_IDS;
        case 15: // CUSTOMER_LIST
          return CUSTOMER_LIST;
        case 16: // CUS_SOURCE
          return CUS_SOURCE;
        case 17: // ORG_ID
          return ORG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CUSTYPE_ISSET_ID = 1;
  private static final int __CUSSTATUS_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __PMUSERID_ISSET_ID = 4;
  private static final int __PIDS_ISSET_ID = 5;
  private static final int __ECOTRADE_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __CUSSOURCE_ISSET_ID = 9;
  private static final int __ORGID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("cusStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("acctTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARR_PIDS, new org.apache.thrift.meta_data.FieldMetaData("arrPids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CUSTOMER_LIST, new org.apache.thrift.meta_data.FieldMetaData("customerList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "CusPerson"))));
    tmpMap.put(_Fields.CUS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("cusSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusAcct.class, metaDataMap);
  }

  public CusAcct() {
    this.cusStatus = 1;

  }

  public CusAcct(
    int pid,
    int cusType,
    int cusStatus,
    int status,
    int pmUserId,
    int pids,
    String userName,
    String acctName,
    String acctTypeText,
    int ecoTrade,
    int page,
    int rows,
    String arrPids,
    List<Integer> userIds,
    List<CusPerson> customerList,
    int cusSource,
    int orgId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.cusStatus = cusStatus;
    setCusStatusIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.pids = pids;
    setPidsIsSet(true);
    this.userName = userName;
    this.acctName = acctName;
    this.acctTypeText = acctTypeText;
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.arrPids = arrPids;
    this.userIds = userIds;
    this.customerList = customerList;
    this.cusSource = cusSource;
    setCusSourceIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusAcct(CusAcct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.cusType = other.cusType;
    this.cusStatus = other.cusStatus;
    this.status = other.status;
    this.pmUserId = other.pmUserId;
    this.pids = other.pids;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetAcctTypeText()) {
      this.acctTypeText = other.acctTypeText;
    }
    this.ecoTrade = other.ecoTrade;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetArrPids()) {
      this.arrPids = other.arrPids;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetCustomerList()) {
      List<CusPerson> __this__customerList = new ArrayList<CusPerson>(other.customerList.size());
      for (CusPerson other_element : other.customerList) {
        __this__customerList.add(other_element);
      }
      this.customerList = __this__customerList;
    }
    this.cusSource = other.cusSource;
    this.orgId = other.orgId;
  }

  public CusAcct deepCopy() {
    return new CusAcct(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setCusTypeIsSet(false);
    this.cusType = 0;
    this.cusStatus = 1;

    setStatusIsSet(false);
    this.status = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    setPidsIsSet(false);
    this.pids = 0;
    this.userName = null;
    this.acctName = null;
    this.acctTypeText = null;
    setEcoTradeIsSet(false);
    this.ecoTrade = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.arrPids = null;
    this.userIds = null;
    this.customerList = null;
    setCusSourceIsSet(false);
    this.cusSource = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusAcct setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCusType() {
    return this.cusType;
  }

  public CusAcct setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public int getCusStatus() {
    return this.cusStatus;
  }

  public CusAcct setCusStatus(int cusStatus) {
    this.cusStatus = cusStatus;
    setCusStatusIsSet(true);
    return this;
  }

  public void unsetCusStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSSTATUS_ISSET_ID);
  }

  /** Returns true if field cusStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCusStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSSTATUS_ISSET_ID);
  }

  public void setCusStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSSTATUS_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusAcct setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public CusAcct setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getPids() {
    return this.pids;
  }

  public CusAcct setPids(int pids) {
    this.pids = pids;
    setPidsIsSet(true);
    return this;
  }

  public void unsetPids() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PIDS_ISSET_ID);
  }

  /** Returns true if field pids is set (has been assigned a value) and false otherwise */
  public boolean isSetPids() {
    return EncodingUtils.testBit(__isset_bitfield, __PIDS_ISSET_ID);
  }

  public void setPidsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PIDS_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public CusAcct setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public CusAcct setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getAcctTypeText() {
    return this.acctTypeText;
  }

  public CusAcct setAcctTypeText(String acctTypeText) {
    this.acctTypeText = acctTypeText;
    return this;
  }

  public void unsetAcctTypeText() {
    this.acctTypeText = null;
  }

  /** Returns true if field acctTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctTypeText() {
    return this.acctTypeText != null;
  }

  public void setAcctTypeTextIsSet(boolean value) {
    if (!value) {
      this.acctTypeText = null;
    }
  }

  public int getEcoTrade() {
    return this.ecoTrade;
  }

  public CusAcct setEcoTrade(int ecoTrade) {
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    return this;
  }

  public void unsetEcoTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  public void setEcoTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECOTRADE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusAcct setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusAcct setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getArrPids() {
    return this.arrPids;
  }

  public CusAcct setArrPids(String arrPids) {
    this.arrPids = arrPids;
    return this;
  }

  public void unsetArrPids() {
    this.arrPids = null;
  }

  /** Returns true if field arrPids is set (has been assigned a value) and false otherwise */
  public boolean isSetArrPids() {
    return this.arrPids != null;
  }

  public void setArrPidsIsSet(boolean value) {
    if (!value) {
      this.arrPids = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CusAcct setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getCustomerListSize() {
    return (this.customerList == null) ? 0 : this.customerList.size();
  }

  public java.util.Iterator<CusPerson> getCustomerListIterator() {
    return (this.customerList == null) ? null : this.customerList.iterator();
  }

  public void addToCustomerList(CusPerson elem) {
    if (this.customerList == null) {
      this.customerList = new ArrayList<CusPerson>();
    }
    this.customerList.add(elem);
  }

  public List<CusPerson> getCustomerList() {
    return this.customerList;
  }

  public CusAcct setCustomerList(List<CusPerson> customerList) {
    this.customerList = customerList;
    return this;
  }

  public void unsetCustomerList() {
    this.customerList = null;
  }

  /** Returns true if field customerList is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerList() {
    return this.customerList != null;
  }

  public void setCustomerListIsSet(boolean value) {
    if (!value) {
      this.customerList = null;
    }
  }

  public int getCusSource() {
    return this.cusSource;
  }

  public CusAcct setCusSource(int cusSource) {
    this.cusSource = cusSource;
    setCusSourceIsSet(true);
    return this;
  }

  public void unsetCusSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSSOURCE_ISSET_ID);
  }

  /** Returns true if field cusSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCusSource() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSSOURCE_ISSET_ID);
  }

  public void setCusSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSSOURCE_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public CusAcct setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case CUS_STATUS:
      if (value == null) {
        unsetCusStatus();
      } else {
        setCusStatus((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case PIDS:
      if (value == null) {
        unsetPids();
      } else {
        setPids((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case ACCT_TYPE_TEXT:
      if (value == null) {
        unsetAcctTypeText();
      } else {
        setAcctTypeText((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case ARR_PIDS:
      if (value == null) {
        unsetArrPids();
      } else {
        setArrPids((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case CUSTOMER_LIST:
      if (value == null) {
        unsetCustomerList();
      } else {
        setCustomerList((List<CusPerson>)value);
      }
      break;

    case CUS_SOURCE:
      if (value == null) {
        unsetCusSource();
      } else {
        setCusSource((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case CUS_STATUS:
      return Integer.valueOf(getCusStatus());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case PIDS:
      return Integer.valueOf(getPids());

    case USER_NAME:
      return getUserName();

    case ACCT_NAME:
      return getAcctName();

    case ACCT_TYPE_TEXT:
      return getAcctTypeText();

    case ECO_TRADE:
      return Integer.valueOf(getEcoTrade());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case ARR_PIDS:
      return getArrPids();

    case USER_IDS:
      return getUserIds();

    case CUSTOMER_LIST:
      return getCustomerList();

    case CUS_SOURCE:
      return Integer.valueOf(getCusSource());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_TYPE:
      return isSetCusType();
    case CUS_STATUS:
      return isSetCusStatus();
    case STATUS:
      return isSetStatus();
    case PM_USER_ID:
      return isSetPmUserId();
    case PIDS:
      return isSetPids();
    case USER_NAME:
      return isSetUserName();
    case ACCT_NAME:
      return isSetAcctName();
    case ACCT_TYPE_TEXT:
      return isSetAcctTypeText();
    case ECO_TRADE:
      return isSetEcoTrade();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case ARR_PIDS:
      return isSetArrPids();
    case USER_IDS:
      return isSetUserIds();
    case CUSTOMER_LIST:
      return isSetCustomerList();
    case CUS_SOURCE:
      return isSetCusSource();
    case ORG_ID:
      return isSetOrgId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusAcct)
      return this.equals((CusAcct)that);
    return false;
  }

  public boolean equals(CusAcct that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_cusStatus = true;
    boolean that_present_cusStatus = true;
    if (this_present_cusStatus || that_present_cusStatus) {
      if (!(this_present_cusStatus && that_present_cusStatus))
        return false;
      if (this.cusStatus != that.cusStatus)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_pids = true;
    boolean that_present_pids = true;
    if (this_present_pids || that_present_pids) {
      if (!(this_present_pids && that_present_pids))
        return false;
      if (this.pids != that.pids)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_acctTypeText = true && this.isSetAcctTypeText();
    boolean that_present_acctTypeText = true && that.isSetAcctTypeText();
    if (this_present_acctTypeText || that_present_acctTypeText) {
      if (!(this_present_acctTypeText && that_present_acctTypeText))
        return false;
      if (!this.acctTypeText.equals(that.acctTypeText))
        return false;
    }

    boolean this_present_ecoTrade = true;
    boolean that_present_ecoTrade = true;
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (this.ecoTrade != that.ecoTrade)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_arrPids = true && this.isSetArrPids();
    boolean that_present_arrPids = true && that.isSetArrPids();
    if (this_present_arrPids || that_present_arrPids) {
      if (!(this_present_arrPids && that_present_arrPids))
        return false;
      if (!this.arrPids.equals(that.arrPids))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_customerList = true && this.isSetCustomerList();
    boolean that_present_customerList = true && that.isSetCustomerList();
    if (this_present_customerList || that_present_customerList) {
      if (!(this_present_customerList && that_present_customerList))
        return false;
      if (!this.customerList.equals(that.customerList))
        return false;
    }

    boolean this_present_cusSource = true;
    boolean that_present_cusSource = true;
    if (this_present_cusSource || that_present_cusSource) {
      if (!(this_present_cusSource && that_present_cusSource))
        return false;
      if (this.cusSource != that.cusSource)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_cusStatus = true;
    list.add(present_cusStatus);
    if (present_cusStatus)
      list.add(cusStatus);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_pids = true;
    list.add(present_pids);
    if (present_pids)
      list.add(pids);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_acctTypeText = true && (isSetAcctTypeText());
    list.add(present_acctTypeText);
    if (present_acctTypeText)
      list.add(acctTypeText);

    boolean present_ecoTrade = true;
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_arrPids = true && (isSetArrPids());
    list.add(present_arrPids);
    if (present_arrPids)
      list.add(arrPids);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_customerList = true && (isSetCustomerList());
    list.add(present_customerList);
    if (present_customerList)
      list.add(customerList);

    boolean present_cusSource = true;
    list.add(present_cusSource);
    if (present_cusSource)
      list.add(cusSource);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusAcct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusStatus()).compareTo(other.isSetCusStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusStatus, other.cusStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctTypeText()).compareTo(other.isSetAcctTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctTypeText, other.acctTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrPids()).compareTo(other.isSetArrPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrPids, other.arrPids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerList()).compareTo(other.isSetCustomerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerList, other.customerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusSource()).compareTo(other.isSetCusSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusSource, other.cusSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusAcct(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusStatus:");
    sb.append(this.cusStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pids:");
    sb.append(this.pids);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctTypeText:");
    if (this.acctTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.acctTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    sb.append(this.ecoTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrPids:");
    if (this.arrPids == null) {
      sb.append("null");
    } else {
      sb.append(this.arrPids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerList:");
    if (this.customerList == null) {
      sb.append("null");
    } else {
      sb.append(this.customerList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusSource:");
    sb.append(this.cusSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusAcctStandardSchemeFactory implements SchemeFactory {
    public CusAcctStandardScheme getScheme() {
      return new CusAcctStandardScheme();
    }
  }

  private static class CusAcctStandardScheme extends StandardScheme<CusAcct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusAcct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusStatus = iprot.readI32();
              struct.setCusStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pids = iprot.readI32();
              struct.setPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACCT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctTypeText = iprot.readString();
              struct.setAcctTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecoTrade = iprot.readI32();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ARR_PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrPids = iprot.readString();
              struct.setArrPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CUSTOMER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.customerList = new ArrayList<CusPerson>(_list3.size);
                CusPerson _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new CusPerson();
                  _elem4.read(iprot);
                  struct.customerList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setCustomerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusSource = iprot.readI32();
              struct.setCusSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusAcct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_STATUS_FIELD_DESC);
      oprot.writeI32(struct.cusStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PIDS_FIELD_DESC);
      oprot.writeI32(struct.pids);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.acctTypeText != null) {
        oprot.writeFieldBegin(ACCT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.acctTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
      oprot.writeI32(struct.ecoTrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.arrPids != null) {
        oprot.writeFieldBegin(ARR_PIDS_FIELD_DESC);
        oprot.writeString(struct.arrPids);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter6 : struct.userIds)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.customerList != null) {
        oprot.writeFieldBegin(CUSTOMER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.customerList.size()));
          for (CusPerson _iter7 : struct.customerList)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.cusSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusAcctTupleSchemeFactory implements SchemeFactory {
    public CusAcctTupleScheme getScheme() {
      return new CusAcctTupleScheme();
    }
  }

  private static class CusAcctTupleScheme extends TupleScheme<CusAcct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusAcct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusType()) {
        optionals.set(1);
      }
      if (struct.isSetCusStatus()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(4);
      }
      if (struct.isSetPids()) {
        optionals.set(5);
      }
      if (struct.isSetUserName()) {
        optionals.set(6);
      }
      if (struct.isSetAcctName()) {
        optionals.set(7);
      }
      if (struct.isSetAcctTypeText()) {
        optionals.set(8);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetArrPids()) {
        optionals.set(12);
      }
      if (struct.isSetUserIds()) {
        optionals.set(13);
      }
      if (struct.isSetCustomerList()) {
        optionals.set(14);
      }
      if (struct.isSetCusSource()) {
        optionals.set(15);
      }
      if (struct.isSetOrgId()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetCusStatus()) {
        oprot.writeI32(struct.cusStatus);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetPids()) {
        oprot.writeI32(struct.pids);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetAcctTypeText()) {
        oprot.writeString(struct.acctTypeText);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeI32(struct.ecoTrade);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetArrPids()) {
        oprot.writeString(struct.arrPids);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter8 : struct.userIds)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetCustomerList()) {
        {
          oprot.writeI32(struct.customerList.size());
          for (CusPerson _iter9 : struct.customerList)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetCusSource()) {
        oprot.writeI32(struct.cusSource);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusAcct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cusStatus = iprot.readI32();
        struct.setCusStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pids = iprot.readI32();
        struct.setPidsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.acctTypeText = iprot.readString();
        struct.setAcctTypeTextIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ecoTrade = iprot.readI32();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.arrPids = iprot.readString();
        struct.setArrPidsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.userIds.add(_elem11);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.customerList = new ArrayList<CusPerson>(_list13.size);
          CusPerson _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new CusPerson();
            _elem14.read(iprot);
            struct.customerList.add(_elem14);
          }
        }
        struct.setCustomerListIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cusSource = iprot.readI32();
        struct.setCusSourceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
    }
  }

}


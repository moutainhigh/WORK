/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class BalanceConfirmDTO implements org.apache.thrift.TBase<BalanceConfirmDTO, BalanceConfirmDTO._Fields>, java.io.Serializable, Cloneable, Comparable<BalanceConfirmDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BalanceConfirmDTO");

  private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("firstBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FIRST_BACK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("firstBackAccount", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SECOND_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("secondBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SECOND_BACK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondBackAccount", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BalanceConfirmDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BalanceConfirmDTOTupleSchemeFactory());
  }

  public int handleId; // required
  public double firstBalance; // required
  public String firstBackAccount; // required
  public double secondBalance; // required
  public String secondBackAccount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HANDLE_ID((short)1, "handleId"),
    FIRST_BALANCE((short)2, "firstBalance"),
    FIRST_BACK_ACCOUNT((short)3, "firstBackAccount"),
    SECOND_BALANCE((short)4, "secondBalance"),
    SECOND_BACK_ACCOUNT((short)5, "secondBackAccount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HANDLE_ID
          return HANDLE_ID;
        case 2: // FIRST_BALANCE
          return FIRST_BALANCE;
        case 3: // FIRST_BACK_ACCOUNT
          return FIRST_BACK_ACCOUNT;
        case 4: // SECOND_BALANCE
          return SECOND_BALANCE;
        case 5: // SECOND_BACK_ACCOUNT
          return SECOND_BACK_ACCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HANDLEID_ISSET_ID = 0;
  private static final int __FIRSTBALANCE_ISSET_ID = 1;
  private static final int __SECONDBALANCE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("firstBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIRST_BACK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("firstBackAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECOND_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("secondBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SECOND_BACK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("secondBackAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BalanceConfirmDTO.class, metaDataMap);
  }

  public BalanceConfirmDTO() {
  }

  public BalanceConfirmDTO(
    int handleId,
    double firstBalance,
    String firstBackAccount,
    double secondBalance,
    String secondBackAccount)
  {
    this();
    this.handleId = handleId;
    setHandleIdIsSet(true);
    this.firstBalance = firstBalance;
    setFirstBalanceIsSet(true);
    this.firstBackAccount = firstBackAccount;
    this.secondBalance = secondBalance;
    setSecondBalanceIsSet(true);
    this.secondBackAccount = secondBackAccount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BalanceConfirmDTO(BalanceConfirmDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.handleId = other.handleId;
    this.firstBalance = other.firstBalance;
    if (other.isSetFirstBackAccount()) {
      this.firstBackAccount = other.firstBackAccount;
    }
    this.secondBalance = other.secondBalance;
    if (other.isSetSecondBackAccount()) {
      this.secondBackAccount = other.secondBackAccount;
    }
  }

  public BalanceConfirmDTO deepCopy() {
    return new BalanceConfirmDTO(this);
  }

  @Override
  public void clear() {
    setHandleIdIsSet(false);
    this.handleId = 0;
    setFirstBalanceIsSet(false);
    this.firstBalance = 0.0;
    this.firstBackAccount = null;
    setSecondBalanceIsSet(false);
    this.secondBalance = 0.0;
    this.secondBackAccount = null;
  }

  public int getHandleId() {
    return this.handleId;
  }

  public BalanceConfirmDTO setHandleId(int handleId) {
    this.handleId = handleId;
    setHandleIdIsSet(true);
    return this;
  }

  public void unsetHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  public void setHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
  }

  public double getFirstBalance() {
    return this.firstBalance;
  }

  public BalanceConfirmDTO setFirstBalance(double firstBalance) {
    this.firstBalance = firstBalance;
    setFirstBalanceIsSet(true);
    return this;
  }

  public void unsetFirstBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTBALANCE_ISSET_ID);
  }

  /** Returns true if field firstBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTBALANCE_ISSET_ID);
  }

  public void setFirstBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTBALANCE_ISSET_ID, value);
  }

  public String getFirstBackAccount() {
    return this.firstBackAccount;
  }

  public BalanceConfirmDTO setFirstBackAccount(String firstBackAccount) {
    this.firstBackAccount = firstBackAccount;
    return this;
  }

  public void unsetFirstBackAccount() {
    this.firstBackAccount = null;
  }

  /** Returns true if field firstBackAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstBackAccount() {
    return this.firstBackAccount != null;
  }

  public void setFirstBackAccountIsSet(boolean value) {
    if (!value) {
      this.firstBackAccount = null;
    }
  }

  public double getSecondBalance() {
    return this.secondBalance;
  }

  public BalanceConfirmDTO setSecondBalance(double secondBalance) {
    this.secondBalance = secondBalance;
    setSecondBalanceIsSet(true);
    return this;
  }

  public void unsetSecondBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECONDBALANCE_ISSET_ID);
  }

  /** Returns true if field secondBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __SECONDBALANCE_ISSET_ID);
  }

  public void setSecondBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECONDBALANCE_ISSET_ID, value);
  }

  public String getSecondBackAccount() {
    return this.secondBackAccount;
  }

  public BalanceConfirmDTO setSecondBackAccount(String secondBackAccount) {
    this.secondBackAccount = secondBackAccount;
    return this;
  }

  public void unsetSecondBackAccount() {
    this.secondBackAccount = null;
  }

  /** Returns true if field secondBackAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondBackAccount() {
    return this.secondBackAccount != null;
  }

  public void setSecondBackAccountIsSet(boolean value) {
    if (!value) {
      this.secondBackAccount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HANDLE_ID:
      if (value == null) {
        unsetHandleId();
      } else {
        setHandleId((Integer)value);
      }
      break;

    case FIRST_BALANCE:
      if (value == null) {
        unsetFirstBalance();
      } else {
        setFirstBalance((Double)value);
      }
      break;

    case FIRST_BACK_ACCOUNT:
      if (value == null) {
        unsetFirstBackAccount();
      } else {
        setFirstBackAccount((String)value);
      }
      break;

    case SECOND_BALANCE:
      if (value == null) {
        unsetSecondBalance();
      } else {
        setSecondBalance((Double)value);
      }
      break;

    case SECOND_BACK_ACCOUNT:
      if (value == null) {
        unsetSecondBackAccount();
      } else {
        setSecondBackAccount((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HANDLE_ID:
      return Integer.valueOf(getHandleId());

    case FIRST_BALANCE:
      return Double.valueOf(getFirstBalance());

    case FIRST_BACK_ACCOUNT:
      return getFirstBackAccount();

    case SECOND_BALANCE:
      return Double.valueOf(getSecondBalance());

    case SECOND_BACK_ACCOUNT:
      return getSecondBackAccount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HANDLE_ID:
      return isSetHandleId();
    case FIRST_BALANCE:
      return isSetFirstBalance();
    case FIRST_BACK_ACCOUNT:
      return isSetFirstBackAccount();
    case SECOND_BALANCE:
      return isSetSecondBalance();
    case SECOND_BACK_ACCOUNT:
      return isSetSecondBackAccount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BalanceConfirmDTO)
      return this.equals((BalanceConfirmDTO)that);
    return false;
  }

  public boolean equals(BalanceConfirmDTO that) {
    if (that == null)
      return false;

    boolean this_present_handleId = true;
    boolean that_present_handleId = true;
    if (this_present_handleId || that_present_handleId) {
      if (!(this_present_handleId && that_present_handleId))
        return false;
      if (this.handleId != that.handleId)
        return false;
    }

    boolean this_present_firstBalance = true;
    boolean that_present_firstBalance = true;
    if (this_present_firstBalance || that_present_firstBalance) {
      if (!(this_present_firstBalance && that_present_firstBalance))
        return false;
      if (this.firstBalance != that.firstBalance)
        return false;
    }

    boolean this_present_firstBackAccount = true && this.isSetFirstBackAccount();
    boolean that_present_firstBackAccount = true && that.isSetFirstBackAccount();
    if (this_present_firstBackAccount || that_present_firstBackAccount) {
      if (!(this_present_firstBackAccount && that_present_firstBackAccount))
        return false;
      if (!this.firstBackAccount.equals(that.firstBackAccount))
        return false;
    }

    boolean this_present_secondBalance = true;
    boolean that_present_secondBalance = true;
    if (this_present_secondBalance || that_present_secondBalance) {
      if (!(this_present_secondBalance && that_present_secondBalance))
        return false;
      if (this.secondBalance != that.secondBalance)
        return false;
    }

    boolean this_present_secondBackAccount = true && this.isSetSecondBackAccount();
    boolean that_present_secondBackAccount = true && that.isSetSecondBackAccount();
    if (this_present_secondBackAccount || that_present_secondBackAccount) {
      if (!(this_present_secondBackAccount && that_present_secondBackAccount))
        return false;
      if (!this.secondBackAccount.equals(that.secondBackAccount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_handleId = true;
    list.add(present_handleId);
    if (present_handleId)
      list.add(handleId);

    boolean present_firstBalance = true;
    list.add(present_firstBalance);
    if (present_firstBalance)
      list.add(firstBalance);

    boolean present_firstBackAccount = true && (isSetFirstBackAccount());
    list.add(present_firstBackAccount);
    if (present_firstBackAccount)
      list.add(firstBackAccount);

    boolean present_secondBalance = true;
    list.add(present_secondBalance);
    if (present_secondBalance)
      list.add(secondBalance);

    boolean present_secondBackAccount = true && (isSetSecondBackAccount());
    list.add(present_secondBackAccount);
    if (present_secondBackAccount)
      list.add(secondBackAccount);

    return list.hashCode();
  }

  @Override
  public int compareTo(BalanceConfirmDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstBalance()).compareTo(other.isSetFirstBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstBalance, other.firstBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstBackAccount()).compareTo(other.isSetFirstBackAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstBackAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstBackAccount, other.firstBackAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondBalance()).compareTo(other.isSetSecondBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondBalance, other.secondBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondBackAccount()).compareTo(other.isSetSecondBackAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondBackAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondBackAccount, other.secondBackAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BalanceConfirmDTO(");
    boolean first = true;

    sb.append("handleId:");
    sb.append(this.handleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstBalance:");
    sb.append(this.firstBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstBackAccount:");
    if (this.firstBackAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.firstBackAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secondBalance:");
    sb.append(this.secondBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("secondBackAccount:");
    if (this.secondBackAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.secondBackAccount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BalanceConfirmDTOStandardSchemeFactory implements SchemeFactory {
    public BalanceConfirmDTOStandardScheme getScheme() {
      return new BalanceConfirmDTOStandardScheme();
    }
  }

  private static class BalanceConfirmDTOStandardScheme extends StandardScheme<BalanceConfirmDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BalanceConfirmDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleId = iprot.readI32();
              struct.setHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRST_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.firstBalance = iprot.readDouble();
              struct.setFirstBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIRST_BACK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstBackAccount = iprot.readString();
              struct.setFirstBackAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECOND_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.secondBalance = iprot.readDouble();
              struct.setSecondBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SECOND_BACK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secondBackAccount = iprot.readString();
              struct.setSecondBackAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BalanceConfirmDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.handleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.firstBalance);
      oprot.writeFieldEnd();
      if (struct.firstBackAccount != null) {
        oprot.writeFieldBegin(FIRST_BACK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.firstBackAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SECOND_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.secondBalance);
      oprot.writeFieldEnd();
      if (struct.secondBackAccount != null) {
        oprot.writeFieldBegin(SECOND_BACK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.secondBackAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BalanceConfirmDTOTupleSchemeFactory implements SchemeFactory {
    public BalanceConfirmDTOTupleScheme getScheme() {
      return new BalanceConfirmDTOTupleScheme();
    }
  }

  private static class BalanceConfirmDTOTupleScheme extends TupleScheme<BalanceConfirmDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BalanceConfirmDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHandleId()) {
        optionals.set(0);
      }
      if (struct.isSetFirstBalance()) {
        optionals.set(1);
      }
      if (struct.isSetFirstBackAccount()) {
        optionals.set(2);
      }
      if (struct.isSetSecondBalance()) {
        optionals.set(3);
      }
      if (struct.isSetSecondBackAccount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHandleId()) {
        oprot.writeI32(struct.handleId);
      }
      if (struct.isSetFirstBalance()) {
        oprot.writeDouble(struct.firstBalance);
      }
      if (struct.isSetFirstBackAccount()) {
        oprot.writeString(struct.firstBackAccount);
      }
      if (struct.isSetSecondBalance()) {
        oprot.writeDouble(struct.secondBalance);
      }
      if (struct.isSetSecondBackAccount()) {
        oprot.writeString(struct.secondBackAccount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BalanceConfirmDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.handleId = iprot.readI32();
        struct.setHandleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstBalance = iprot.readDouble();
        struct.setFirstBalanceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.firstBackAccount = iprot.readString();
        struct.setFirstBackAccountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.secondBalance = iprot.readDouble();
        struct.setSecondBalanceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.secondBackAccount = iprot.readString();
        struct.setSecondBackAccountIsSet(true);
      }
    }
  }

}


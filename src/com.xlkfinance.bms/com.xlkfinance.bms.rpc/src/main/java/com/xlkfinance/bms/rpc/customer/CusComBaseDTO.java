/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComBaseDTO implements org.apache.thrift.TBase<CusComBaseDTO, CusComBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusComBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComBaseDTO");

  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_SHARES_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComShares", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcct", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CUS_PER_COM_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerCom", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComBaseDTOTupleSchemeFactory());
  }

  public CusComBase cusComBase; // required
  public List<CusComShare> cusComShares; // required
  public CusAcct cusAcct; // required
  public int acctId; // required
  public CusPerCom cusPerCom; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUS_COM_BASE((short)1, "cusComBase"),
    CUS_COM_SHARES((short)2, "cusComShares"),
    CUS_ACCT((short)3, "cusAcct"),
    ACCT_ID((short)4, "acctId"),
    CUS_PER_COM((short)5, "cusPerCom");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 2: // CUS_COM_SHARES
          return CUS_COM_SHARES;
        case 3: // CUS_ACCT
          return CUS_ACCT;
        case 4: // ACCT_ID
          return ACCT_ID;
        case 5: // CUS_PER_COM
          return CUS_PER_COM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.CUS_COM_SHARES, new org.apache.thrift.meta_data.FieldMetaData("cusComShares", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComShare.class))));
    tmpMap.put(_Fields.CUS_ACCT, new org.apache.thrift.meta_data.FieldMetaData("cusAcct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusAcct.class)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_PER_COM, new org.apache.thrift.meta_data.FieldMetaData("cusPerCom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "CusPerCom")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComBaseDTO.class, metaDataMap);
  }

  public CusComBaseDTO() {
  }

  public CusComBaseDTO(
    CusComBase cusComBase,
    List<CusComShare> cusComShares,
    CusAcct cusAcct,
    int acctId,
    CusPerCom cusPerCom)
  {
    this();
    this.cusComBase = cusComBase;
    this.cusComShares = cusComShares;
    this.cusAcct = cusAcct;
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.cusPerCom = cusPerCom;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComBaseDTO(CusComBaseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    if (other.isSetCusComShares()) {
      List<CusComShare> __this__cusComShares = new ArrayList<CusComShare>(other.cusComShares.size());
      for (CusComShare other_element : other.cusComShares) {
        __this__cusComShares.add(new CusComShare(other_element));
      }
      this.cusComShares = __this__cusComShares;
    }
    if (other.isSetCusAcct()) {
      this.cusAcct = new CusAcct(other.cusAcct);
    }
    this.acctId = other.acctId;
    if (other.isSetCusPerCom()) {
      this.cusPerCom = other.cusPerCom;
    }
  }

  public CusComBaseDTO deepCopy() {
    return new CusComBaseDTO(this);
  }

  @Override
  public void clear() {
    this.cusComBase = null;
    this.cusComShares = null;
    this.cusAcct = null;
    setAcctIdIsSet(false);
    this.acctId = 0;
    this.cusPerCom = null;
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComBaseDTO setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public int getCusComSharesSize() {
    return (this.cusComShares == null) ? 0 : this.cusComShares.size();
  }

  public java.util.Iterator<CusComShare> getCusComSharesIterator() {
    return (this.cusComShares == null) ? null : this.cusComShares.iterator();
  }

  public void addToCusComShares(CusComShare elem) {
    if (this.cusComShares == null) {
      this.cusComShares = new ArrayList<CusComShare>();
    }
    this.cusComShares.add(elem);
  }

  public List<CusComShare> getCusComShares() {
    return this.cusComShares;
  }

  public CusComBaseDTO setCusComShares(List<CusComShare> cusComShares) {
    this.cusComShares = cusComShares;
    return this;
  }

  public void unsetCusComShares() {
    this.cusComShares = null;
  }

  /** Returns true if field cusComShares is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComShares() {
    return this.cusComShares != null;
  }

  public void setCusComSharesIsSet(boolean value) {
    if (!value) {
      this.cusComShares = null;
    }
  }

  public CusAcct getCusAcct() {
    return this.cusAcct;
  }

  public CusComBaseDTO setCusAcct(CusAcct cusAcct) {
    this.cusAcct = cusAcct;
    return this;
  }

  public void unsetCusAcct() {
    this.cusAcct = null;
  }

  /** Returns true if field cusAcct is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcct() {
    return this.cusAcct != null;
  }

  public void setCusAcctIsSet(boolean value) {
    if (!value) {
      this.cusAcct = null;
    }
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CusComBaseDTO setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public CusPerCom getCusPerCom() {
    return this.cusPerCom;
  }

  public CusComBaseDTO setCusPerCom(CusPerCom cusPerCom) {
    this.cusPerCom = cusPerCom;
    return this;
  }

  public void unsetCusPerCom() {
    this.cusPerCom = null;
  }

  /** Returns true if field cusPerCom is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerCom() {
    return this.cusPerCom != null;
  }

  public void setCusPerComIsSet(boolean value) {
    if (!value) {
      this.cusPerCom = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case CUS_COM_SHARES:
      if (value == null) {
        unsetCusComShares();
      } else {
        setCusComShares((List<CusComShare>)value);
      }
      break;

    case CUS_ACCT:
      if (value == null) {
        unsetCusAcct();
      } else {
        setCusAcct((CusAcct)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case CUS_PER_COM:
      if (value == null) {
        unsetCusPerCom();
      } else {
        setCusPerCom((CusPerCom)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUS_COM_BASE:
      return getCusComBase();

    case CUS_COM_SHARES:
      return getCusComShares();

    case CUS_ACCT:
      return getCusAcct();

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case CUS_PER_COM:
      return getCusPerCom();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUS_COM_BASE:
      return isSetCusComBase();
    case CUS_COM_SHARES:
      return isSetCusComShares();
    case CUS_ACCT:
      return isSetCusAcct();
    case ACCT_ID:
      return isSetAcctId();
    case CUS_PER_COM:
      return isSetCusPerCom();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComBaseDTO)
      return this.equals((CusComBaseDTO)that);
    return false;
  }

  public boolean equals(CusComBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_cusComShares = true && this.isSetCusComShares();
    boolean that_present_cusComShares = true && that.isSetCusComShares();
    if (this_present_cusComShares || that_present_cusComShares) {
      if (!(this_present_cusComShares && that_present_cusComShares))
        return false;
      if (!this.cusComShares.equals(that.cusComShares))
        return false;
    }

    boolean this_present_cusAcct = true && this.isSetCusAcct();
    boolean that_present_cusAcct = true && that.isSetCusAcct();
    if (this_present_cusAcct || that_present_cusAcct) {
      if (!(this_present_cusAcct && that_present_cusAcct))
        return false;
      if (!this.cusAcct.equals(that.cusAcct))
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_cusPerCom = true && this.isSetCusPerCom();
    boolean that_present_cusPerCom = true && that.isSetCusPerCom();
    if (this_present_cusPerCom || that_present_cusPerCom) {
      if (!(this_present_cusPerCom && that_present_cusPerCom))
        return false;
      if (!this.cusPerCom.equals(that.cusPerCom))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_cusComShares = true && (isSetCusComShares());
    list.add(present_cusComShares);
    if (present_cusComShares)
      list.add(cusComShares);

    boolean present_cusAcct = true && (isSetCusAcct());
    list.add(present_cusAcct);
    if (present_cusAcct)
      list.add(cusAcct);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_cusPerCom = true && (isSetCusPerCom());
    list.add(present_cusPerCom);
    if (present_cusPerCom)
      list.add(cusPerCom);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComShares()).compareTo(other.isSetCusComShares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComShares()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComShares, other.cusComShares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcct()).compareTo(other.isSetCusAcct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcct, other.cusAcct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerCom()).compareTo(other.isSetCusPerCom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerCom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerCom, other.cusPerCom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComBaseDTO(");
    boolean first = true;

    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComShares:");
    if (this.cusComShares == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComShares);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcct:");
    if (this.cusAcct == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerCom:");
    if (this.cusPerCom == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerCom);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
    if (cusAcct != null) {
      cusAcct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComBaseDTOStandardSchemeFactory implements SchemeFactory {
    public CusComBaseDTOStandardScheme getScheme() {
      return new CusComBaseDTOStandardScheme();
    }
  }

  private static class CusComBaseDTOStandardScheme extends StandardScheme<CusComBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_SHARES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.cusComShares = new ArrayList<CusComShare>(_list160.size);
                CusComShare _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  _elem161 = new CusComShare();
                  _elem161.read(iprot);
                  struct.cusComShares.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setCusComSharesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUS_ACCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusAcct = new CusAcct();
              struct.cusAcct.read(iprot);
              struct.setCusAcctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_PER_COM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerCom = new CusPerCom();
              struct.cusPerCom.read(iprot);
              struct.setCusPerComIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusComShares != null) {
        oprot.writeFieldBegin(CUS_COM_SHARES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cusComShares.size()));
          for (CusComShare _iter163 : struct.cusComShares)
          {
            _iter163.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cusAcct != null) {
        oprot.writeFieldBegin(CUS_ACCT_FIELD_DESC);
        struct.cusAcct.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      if (struct.cusPerCom != null) {
        oprot.writeFieldBegin(CUS_PER_COM_FIELD_DESC);
        struct.cusPerCom.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComBaseDTOTupleSchemeFactory implements SchemeFactory {
    public CusComBaseDTOTupleScheme getScheme() {
      return new CusComBaseDTOTupleScheme();
    }
  }

  private static class CusComBaseDTOTupleScheme extends TupleScheme<CusComBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCusComBase()) {
        optionals.set(0);
      }
      if (struct.isSetCusComShares()) {
        optionals.set(1);
      }
      if (struct.isSetCusAcct()) {
        optionals.set(2);
      }
      if (struct.isSetAcctId()) {
        optionals.set(3);
      }
      if (struct.isSetCusPerCom()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetCusComShares()) {
        {
          oprot.writeI32(struct.cusComShares.size());
          for (CusComShare _iter164 : struct.cusComShares)
          {
            _iter164.write(oprot);
          }
        }
      }
      if (struct.isSetCusAcct()) {
        struct.cusAcct.write(oprot);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetCusPerCom()) {
        struct.cusPerCom.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cusComShares = new ArrayList<CusComShare>(_list165.size);
          CusComShare _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = new CusComShare();
            _elem166.read(iprot);
            struct.cusComShares.add(_elem166);
          }
        }
        struct.setCusComSharesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cusAcct = new CusAcct();
        struct.cusAcct.read(iprot);
        struct.setCusAcctIsSet(true);
      }
      if (incoming.get(3)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cusPerCom = new CusPerCom();
        struct.cusPerCom.read(iprot);
        struct.setCusPerComIsSet(true);
      }
    }
  }

}


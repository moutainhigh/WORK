/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ElementLendDetails implements org.apache.thrift.TBase<ElementLendDetails, ElementLendDetails._Fields>, java.io.Serializable, Cloneable, Comparable<ElementLendDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ElementLendDetails");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lendId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ELEMENT_FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("elementFileId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ELEMENT_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("elementFileName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lendTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RETURN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("returnTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BUYER_SELLER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerSellerType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BUYER_SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerSellerName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RETURN_FILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("returnFileIds", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ElementLendDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ElementLendDetailsTupleSchemeFactory());
  }

  public int pid; // required
  public int lendId; // required
  public int elementFileId; // required
  public String elementFileName; // required
  public String lendTime; // required
  public String returnTime; // required
  public int status; // required
  public int buyerSellerType; // required
  public String buyerSellerName; // required
  public String remark; // required
  public List<String> returnFileIds; // required
  public String code; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LEND_ID((short)2, "lendId"),
    ELEMENT_FILE_ID((short)3, "elementFileId"),
    ELEMENT_FILE_NAME((short)4, "elementFileName"),
    LEND_TIME((short)5, "lendTime"),
    RETURN_TIME((short)6, "returnTime"),
    STATUS((short)7, "status"),
    BUYER_SELLER_TYPE((short)8, "buyerSellerType"),
    BUYER_SELLER_NAME((short)9, "buyerSellerName"),
    REMARK((short)10, "remark"),
    RETURN_FILE_IDS((short)11, "returnFileIds"),
    CODE((short)12, "code");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LEND_ID
          return LEND_ID;
        case 3: // ELEMENT_FILE_ID
          return ELEMENT_FILE_ID;
        case 4: // ELEMENT_FILE_NAME
          return ELEMENT_FILE_NAME;
        case 5: // LEND_TIME
          return LEND_TIME;
        case 6: // RETURN_TIME
          return RETURN_TIME;
        case 7: // STATUS
          return STATUS;
        case 8: // BUYER_SELLER_TYPE
          return BUYER_SELLER_TYPE;
        case 9: // BUYER_SELLER_NAME
          return BUYER_SELLER_NAME;
        case 10: // REMARK
          return REMARK;
        case 11: // RETURN_FILE_IDS
          return RETURN_FILE_IDS;
        case 12: // CODE
          return CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LENDID_ISSET_ID = 1;
  private static final int __ELEMENTFILEID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __BUYERSELLERTYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEND_ID, new org.apache.thrift.meta_data.FieldMetaData("lendId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ELEMENT_FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("elementFileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ELEMENT_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("elementFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("lendTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_TIME, new org.apache.thrift.meta_data.FieldMetaData("returnTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUYER_SELLER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("buyerSellerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUYER_SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerSellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_FILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("returnFileIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ElementLendDetails.class, metaDataMap);
  }

  public ElementLendDetails() {
  }

  public ElementLendDetails(
    int pid,
    int lendId,
    int elementFileId,
    String elementFileName,
    String lendTime,
    String returnTime,
    int status,
    int buyerSellerType,
    String buyerSellerName,
    String remark,
    List<String> returnFileIds,
    String code)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.lendId = lendId;
    setLendIdIsSet(true);
    this.elementFileId = elementFileId;
    setElementFileIdIsSet(true);
    this.elementFileName = elementFileName;
    this.lendTime = lendTime;
    this.returnTime = returnTime;
    this.status = status;
    setStatusIsSet(true);
    this.buyerSellerType = buyerSellerType;
    setBuyerSellerTypeIsSet(true);
    this.buyerSellerName = buyerSellerName;
    this.remark = remark;
    this.returnFileIds = returnFileIds;
    this.code = code;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ElementLendDetails(ElementLendDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.lendId = other.lendId;
    this.elementFileId = other.elementFileId;
    if (other.isSetElementFileName()) {
      this.elementFileName = other.elementFileName;
    }
    if (other.isSetLendTime()) {
      this.lendTime = other.lendTime;
    }
    if (other.isSetReturnTime()) {
      this.returnTime = other.returnTime;
    }
    this.status = other.status;
    this.buyerSellerType = other.buyerSellerType;
    if (other.isSetBuyerSellerName()) {
      this.buyerSellerName = other.buyerSellerName;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetReturnFileIds()) {
      List<String> __this__returnFileIds = new ArrayList<String>(other.returnFileIds);
      this.returnFileIds = __this__returnFileIds;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
  }

  public ElementLendDetails deepCopy() {
    return new ElementLendDetails(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLendIdIsSet(false);
    this.lendId = 0;
    setElementFileIdIsSet(false);
    this.elementFileId = 0;
    this.elementFileName = null;
    this.lendTime = null;
    this.returnTime = null;
    setStatusIsSet(false);
    this.status = 0;
    setBuyerSellerTypeIsSet(false);
    this.buyerSellerType = 0;
    this.buyerSellerName = null;
    this.remark = null;
    this.returnFileIds = null;
    this.code = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ElementLendDetails setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLendId() {
    return this.lendId;
  }

  public ElementLendDetails setLendId(int lendId) {
    this.lendId = lendId;
    setLendIdIsSet(true);
    return this;
  }

  public void unsetLendId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENDID_ISSET_ID);
  }

  /** Returns true if field lendId is set (has been assigned a value) and false otherwise */
  public boolean isSetLendId() {
    return EncodingUtils.testBit(__isset_bitfield, __LENDID_ISSET_ID);
  }

  public void setLendIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENDID_ISSET_ID, value);
  }

  public int getElementFileId() {
    return this.elementFileId;
  }

  public ElementLendDetails setElementFileId(int elementFileId) {
    this.elementFileId = elementFileId;
    setElementFileIdIsSet(true);
    return this;
  }

  public void unsetElementFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ELEMENTFILEID_ISSET_ID);
  }

  /** Returns true if field elementFileId is set (has been assigned a value) and false otherwise */
  public boolean isSetElementFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __ELEMENTFILEID_ISSET_ID);
  }

  public void setElementFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ELEMENTFILEID_ISSET_ID, value);
  }

  public String getElementFileName() {
    return this.elementFileName;
  }

  public ElementLendDetails setElementFileName(String elementFileName) {
    this.elementFileName = elementFileName;
    return this;
  }

  public void unsetElementFileName() {
    this.elementFileName = null;
  }

  /** Returns true if field elementFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetElementFileName() {
    return this.elementFileName != null;
  }

  public void setElementFileNameIsSet(boolean value) {
    if (!value) {
      this.elementFileName = null;
    }
  }

  public String getLendTime() {
    return this.lendTime;
  }

  public ElementLendDetails setLendTime(String lendTime) {
    this.lendTime = lendTime;
    return this;
  }

  public void unsetLendTime() {
    this.lendTime = null;
  }

  /** Returns true if field lendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLendTime() {
    return this.lendTime != null;
  }

  public void setLendTimeIsSet(boolean value) {
    if (!value) {
      this.lendTime = null;
    }
  }

  public String getReturnTime() {
    return this.returnTime;
  }

  public ElementLendDetails setReturnTime(String returnTime) {
    this.returnTime = returnTime;
    return this;
  }

  public void unsetReturnTime() {
    this.returnTime = null;
  }

  /** Returns true if field returnTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnTime() {
    return this.returnTime != null;
  }

  public void setReturnTimeIsSet(boolean value) {
    if (!value) {
      this.returnTime = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ElementLendDetails setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getBuyerSellerType() {
    return this.buyerSellerType;
  }

  public ElementLendDetails setBuyerSellerType(int buyerSellerType) {
    this.buyerSellerType = buyerSellerType;
    setBuyerSellerTypeIsSet(true);
    return this;
  }

  public void unsetBuyerSellerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID);
  }

  /** Returns true if field buyerSellerType is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerSellerType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID);
  }

  public void setBuyerSellerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID, value);
  }

  public String getBuyerSellerName() {
    return this.buyerSellerName;
  }

  public ElementLendDetails setBuyerSellerName(String buyerSellerName) {
    this.buyerSellerName = buyerSellerName;
    return this;
  }

  public void unsetBuyerSellerName() {
    this.buyerSellerName = null;
  }

  /** Returns true if field buyerSellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerSellerName() {
    return this.buyerSellerName != null;
  }

  public void setBuyerSellerNameIsSet(boolean value) {
    if (!value) {
      this.buyerSellerName = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ElementLendDetails setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getReturnFileIdsSize() {
    return (this.returnFileIds == null) ? 0 : this.returnFileIds.size();
  }

  public java.util.Iterator<String> getReturnFileIdsIterator() {
    return (this.returnFileIds == null) ? null : this.returnFileIds.iterator();
  }

  public void addToReturnFileIds(String elem) {
    if (this.returnFileIds == null) {
      this.returnFileIds = new ArrayList<String>();
    }
    this.returnFileIds.add(elem);
  }

  public List<String> getReturnFileIds() {
    return this.returnFileIds;
  }

  public ElementLendDetails setReturnFileIds(List<String> returnFileIds) {
    this.returnFileIds = returnFileIds;
    return this;
  }

  public void unsetReturnFileIds() {
    this.returnFileIds = null;
  }

  /** Returns true if field returnFileIds is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFileIds() {
    return this.returnFileIds != null;
  }

  public void setReturnFileIdsIsSet(boolean value) {
    if (!value) {
      this.returnFileIds = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public ElementLendDetails setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LEND_ID:
      if (value == null) {
        unsetLendId();
      } else {
        setLendId((Integer)value);
      }
      break;

    case ELEMENT_FILE_ID:
      if (value == null) {
        unsetElementFileId();
      } else {
        setElementFileId((Integer)value);
      }
      break;

    case ELEMENT_FILE_NAME:
      if (value == null) {
        unsetElementFileName();
      } else {
        setElementFileName((String)value);
      }
      break;

    case LEND_TIME:
      if (value == null) {
        unsetLendTime();
      } else {
        setLendTime((String)value);
      }
      break;

    case RETURN_TIME:
      if (value == null) {
        unsetReturnTime();
      } else {
        setReturnTime((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case BUYER_SELLER_TYPE:
      if (value == null) {
        unsetBuyerSellerType();
      } else {
        setBuyerSellerType((Integer)value);
      }
      break;

    case BUYER_SELLER_NAME:
      if (value == null) {
        unsetBuyerSellerName();
      } else {
        setBuyerSellerName((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case RETURN_FILE_IDS:
      if (value == null) {
        unsetReturnFileIds();
      } else {
        setReturnFileIds((List<String>)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LEND_ID:
      return Integer.valueOf(getLendId());

    case ELEMENT_FILE_ID:
      return Integer.valueOf(getElementFileId());

    case ELEMENT_FILE_NAME:
      return getElementFileName();

    case LEND_TIME:
      return getLendTime();

    case RETURN_TIME:
      return getReturnTime();

    case STATUS:
      return Integer.valueOf(getStatus());

    case BUYER_SELLER_TYPE:
      return Integer.valueOf(getBuyerSellerType());

    case BUYER_SELLER_NAME:
      return getBuyerSellerName();

    case REMARK:
      return getRemark();

    case RETURN_FILE_IDS:
      return getReturnFileIds();

    case CODE:
      return getCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LEND_ID:
      return isSetLendId();
    case ELEMENT_FILE_ID:
      return isSetElementFileId();
    case ELEMENT_FILE_NAME:
      return isSetElementFileName();
    case LEND_TIME:
      return isSetLendTime();
    case RETURN_TIME:
      return isSetReturnTime();
    case STATUS:
      return isSetStatus();
    case BUYER_SELLER_TYPE:
      return isSetBuyerSellerType();
    case BUYER_SELLER_NAME:
      return isSetBuyerSellerName();
    case REMARK:
      return isSetRemark();
    case RETURN_FILE_IDS:
      return isSetReturnFileIds();
    case CODE:
      return isSetCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ElementLendDetails)
      return this.equals((ElementLendDetails)that);
    return false;
  }

  public boolean equals(ElementLendDetails that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_lendId = true;
    boolean that_present_lendId = true;
    if (this_present_lendId || that_present_lendId) {
      if (!(this_present_lendId && that_present_lendId))
        return false;
      if (this.lendId != that.lendId)
        return false;
    }

    boolean this_present_elementFileId = true;
    boolean that_present_elementFileId = true;
    if (this_present_elementFileId || that_present_elementFileId) {
      if (!(this_present_elementFileId && that_present_elementFileId))
        return false;
      if (this.elementFileId != that.elementFileId)
        return false;
    }

    boolean this_present_elementFileName = true && this.isSetElementFileName();
    boolean that_present_elementFileName = true && that.isSetElementFileName();
    if (this_present_elementFileName || that_present_elementFileName) {
      if (!(this_present_elementFileName && that_present_elementFileName))
        return false;
      if (!this.elementFileName.equals(that.elementFileName))
        return false;
    }

    boolean this_present_lendTime = true && this.isSetLendTime();
    boolean that_present_lendTime = true && that.isSetLendTime();
    if (this_present_lendTime || that_present_lendTime) {
      if (!(this_present_lendTime && that_present_lendTime))
        return false;
      if (!this.lendTime.equals(that.lendTime))
        return false;
    }

    boolean this_present_returnTime = true && this.isSetReturnTime();
    boolean that_present_returnTime = true && that.isSetReturnTime();
    if (this_present_returnTime || that_present_returnTime) {
      if (!(this_present_returnTime && that_present_returnTime))
        return false;
      if (!this.returnTime.equals(that.returnTime))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_buyerSellerType = true;
    boolean that_present_buyerSellerType = true;
    if (this_present_buyerSellerType || that_present_buyerSellerType) {
      if (!(this_present_buyerSellerType && that_present_buyerSellerType))
        return false;
      if (this.buyerSellerType != that.buyerSellerType)
        return false;
    }

    boolean this_present_buyerSellerName = true && this.isSetBuyerSellerName();
    boolean that_present_buyerSellerName = true && that.isSetBuyerSellerName();
    if (this_present_buyerSellerName || that_present_buyerSellerName) {
      if (!(this_present_buyerSellerName && that_present_buyerSellerName))
        return false;
      if (!this.buyerSellerName.equals(that.buyerSellerName))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_returnFileIds = true && this.isSetReturnFileIds();
    boolean that_present_returnFileIds = true && that.isSetReturnFileIds();
    if (this_present_returnFileIds || that_present_returnFileIds) {
      if (!(this_present_returnFileIds && that_present_returnFileIds))
        return false;
      if (!this.returnFileIds.equals(that.returnFileIds))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_lendId = true;
    list.add(present_lendId);
    if (present_lendId)
      list.add(lendId);

    boolean present_elementFileId = true;
    list.add(present_elementFileId);
    if (present_elementFileId)
      list.add(elementFileId);

    boolean present_elementFileName = true && (isSetElementFileName());
    list.add(present_elementFileName);
    if (present_elementFileName)
      list.add(elementFileName);

    boolean present_lendTime = true && (isSetLendTime());
    list.add(present_lendTime);
    if (present_lendTime)
      list.add(lendTime);

    boolean present_returnTime = true && (isSetReturnTime());
    list.add(present_returnTime);
    if (present_returnTime)
      list.add(returnTime);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_buyerSellerType = true;
    list.add(present_buyerSellerType);
    if (present_buyerSellerType)
      list.add(buyerSellerType);

    boolean present_buyerSellerName = true && (isSetBuyerSellerName());
    list.add(present_buyerSellerName);
    if (present_buyerSellerName)
      list.add(buyerSellerName);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_returnFileIds = true && (isSetReturnFileIds());
    list.add(present_returnFileIds);
    if (present_returnFileIds)
      list.add(returnFileIds);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    return list.hashCode();
  }

  @Override
  public int compareTo(ElementLendDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendId()).compareTo(other.isSetLendId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendId, other.lendId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElementFileId()).compareTo(other.isSetElementFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElementFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementFileId, other.elementFileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElementFileName()).compareTo(other.isSetElementFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElementFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementFileName, other.elementFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendTime()).compareTo(other.isSetLendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendTime, other.lendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnTime()).compareTo(other.isSetReturnTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnTime, other.returnTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerSellerType()).compareTo(other.isSetBuyerSellerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerSellerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerSellerType, other.buyerSellerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerSellerName()).compareTo(other.isSetBuyerSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerSellerName, other.buyerSellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFileIds()).compareTo(other.isSetReturnFileIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFileIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnFileIds, other.returnFileIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ElementLendDetails(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendId:");
    sb.append(this.lendId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elementFileId:");
    sb.append(this.elementFileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elementFileName:");
    if (this.elementFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.elementFileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendTime:");
    if (this.lendTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lendTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnTime:");
    if (this.returnTime == null) {
      sb.append("null");
    } else {
      sb.append(this.returnTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerSellerType:");
    sb.append(this.buyerSellerType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerSellerName:");
    if (this.buyerSellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerSellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnFileIds:");
    if (this.returnFileIds == null) {
      sb.append("null");
    } else {
      sb.append(this.returnFileIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ElementLendDetailsStandardSchemeFactory implements SchemeFactory {
    public ElementLendDetailsStandardScheme getScheme() {
      return new ElementLendDetailsStandardScheme();
    }
  }

  private static class ElementLendDetailsStandardScheme extends StandardScheme<ElementLendDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ElementLendDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lendId = iprot.readI32();
              struct.setLendIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ELEMENT_FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.elementFileId = iprot.readI32();
              struct.setElementFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ELEMENT_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.elementFileName = iprot.readString();
              struct.setElementFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lendTime = iprot.readString();
              struct.setLendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RETURN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnTime = iprot.readString();
              struct.setReturnTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUYER_SELLER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buyerSellerType = iprot.readI32();
              struct.setBuyerSellerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUYER_SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerSellerName = iprot.readString();
              struct.setBuyerSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RETURN_FILE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.returnFileIds = new ArrayList<String>(_list80.size);
                String _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = iprot.readString();
                  struct.returnFileIds.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setReturnFileIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ElementLendDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEND_ID_FIELD_DESC);
      oprot.writeI32(struct.lendId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ELEMENT_FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.elementFileId);
      oprot.writeFieldEnd();
      if (struct.elementFileName != null) {
        oprot.writeFieldBegin(ELEMENT_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.elementFileName);
        oprot.writeFieldEnd();
      }
      if (struct.lendTime != null) {
        oprot.writeFieldBegin(LEND_TIME_FIELD_DESC);
        oprot.writeString(struct.lendTime);
        oprot.writeFieldEnd();
      }
      if (struct.returnTime != null) {
        oprot.writeFieldBegin(RETURN_TIME_FIELD_DESC);
        oprot.writeString(struct.returnTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUYER_SELLER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.buyerSellerType);
      oprot.writeFieldEnd();
      if (struct.buyerSellerName != null) {
        oprot.writeFieldBegin(BUYER_SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerSellerName);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.returnFileIds != null) {
        oprot.writeFieldBegin(RETURN_FILE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.returnFileIds.size()));
          for (String _iter83 : struct.returnFileIds)
          {
            oprot.writeString(_iter83);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ElementLendDetailsTupleSchemeFactory implements SchemeFactory {
    public ElementLendDetailsTupleScheme getScheme() {
      return new ElementLendDetailsTupleScheme();
    }
  }

  private static class ElementLendDetailsTupleScheme extends TupleScheme<ElementLendDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ElementLendDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLendId()) {
        optionals.set(1);
      }
      if (struct.isSetElementFileId()) {
        optionals.set(2);
      }
      if (struct.isSetElementFileName()) {
        optionals.set(3);
      }
      if (struct.isSetLendTime()) {
        optionals.set(4);
      }
      if (struct.isSetReturnTime()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetBuyerSellerType()) {
        optionals.set(7);
      }
      if (struct.isSetBuyerSellerName()) {
        optionals.set(8);
      }
      if (struct.isSetRemark()) {
        optionals.set(9);
      }
      if (struct.isSetReturnFileIds()) {
        optionals.set(10);
      }
      if (struct.isSetCode()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLendId()) {
        oprot.writeI32(struct.lendId);
      }
      if (struct.isSetElementFileId()) {
        oprot.writeI32(struct.elementFileId);
      }
      if (struct.isSetElementFileName()) {
        oprot.writeString(struct.elementFileName);
      }
      if (struct.isSetLendTime()) {
        oprot.writeString(struct.lendTime);
      }
      if (struct.isSetReturnTime()) {
        oprot.writeString(struct.returnTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetBuyerSellerType()) {
        oprot.writeI32(struct.buyerSellerType);
      }
      if (struct.isSetBuyerSellerName()) {
        oprot.writeString(struct.buyerSellerName);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetReturnFileIds()) {
        {
          oprot.writeI32(struct.returnFileIds.size());
          for (String _iter84 : struct.returnFileIds)
          {
            oprot.writeString(_iter84);
          }
        }
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ElementLendDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lendId = iprot.readI32();
        struct.setLendIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.elementFileId = iprot.readI32();
        struct.setElementFileIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.elementFileName = iprot.readString();
        struct.setElementFileNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lendTime = iprot.readString();
        struct.setLendTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.returnTime = iprot.readString();
        struct.setReturnTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.buyerSellerType = iprot.readI32();
        struct.setBuyerSellerTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.buyerSellerName = iprot.readString();
        struct.setBuyerSellerNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.returnFileIds = new ArrayList<String>(_list85.size);
          String _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = iprot.readString();
            struct.returnFileIds.add(_elem86);
          }
        }
        struct.setReturnFileIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
    }
  }

}


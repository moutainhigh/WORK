/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RealtimePlan implements org.apache.thrift.TBase<RealtimePlan, RealtimePlan._Fields>, java.io.Serializable, Cloneable, Comparable<RealtimePlan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RealtimePlan");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OPER_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("operRepayDt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("baseAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OPER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("operCost", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField GEN_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("genDttm", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("principalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField PLAN_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("planVersion", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField IS_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconciliation", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField REFUND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField FREEZE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("freezeStatus", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RealtimePlanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RealtimePlanTupleSchemeFactory());
  }

  public String pId; // required
  public int loanId; // required
  public String operRepayDt; // required
  public int operType; // required
  public double baseAmt; // required
  public double operCost; // required
  public String genDttm; // required
  public int operUserId; // required
  public double total; // required
  public double principalBalance; // required
  public int planVersion; // required
  public int status; // required
  public int refId; // required
  public int isReconciliation; // required
  public int refundType; // required
  public int freezeStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    LOAN_ID((short)2, "loanId"),
    OPER_REPAY_DT((short)3, "operRepayDt"),
    OPER_TYPE((short)4, "operType"),
    BASE_AMT((short)5, "baseAmt"),
    OPER_COST((short)6, "operCost"),
    GEN_DTTM((short)7, "genDttm"),
    OPER_USER_ID((short)8, "operUserId"),
    TOTAL((short)9, "total"),
    PRINCIPAL_BALANCE((short)10, "principalBalance"),
    PLAN_VERSION((short)11, "planVersion"),
    STATUS((short)12, "status"),
    REF_ID((short)13, "refId"),
    IS_RECONCILIATION((short)14, "isReconciliation"),
    REFUND_TYPE((short)15, "refundType"),
    FREEZE_STATUS((short)16, "freezeStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // OPER_REPAY_DT
          return OPER_REPAY_DT;
        case 4: // OPER_TYPE
          return OPER_TYPE;
        case 5: // BASE_AMT
          return BASE_AMT;
        case 6: // OPER_COST
          return OPER_COST;
        case 7: // GEN_DTTM
          return GEN_DTTM;
        case 8: // OPER_USER_ID
          return OPER_USER_ID;
        case 9: // TOTAL
          return TOTAL;
        case 10: // PRINCIPAL_BALANCE
          return PRINCIPAL_BALANCE;
        case 11: // PLAN_VERSION
          return PLAN_VERSION;
        case 12: // STATUS
          return STATUS;
        case 13: // REF_ID
          return REF_ID;
        case 14: // IS_RECONCILIATION
          return IS_RECONCILIATION;
        case 15: // REFUND_TYPE
          return REFUND_TYPE;
        case 16: // FREEZE_STATUS
          return FREEZE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __OPERTYPE_ISSET_ID = 1;
  private static final int __BASEAMT_ISSET_ID = 2;
  private static final int __OPERCOST_ISSET_ID = 3;
  private static final int __OPERUSERID_ISSET_ID = 4;
  private static final int __TOTAL_ISSET_ID = 5;
  private static final int __PRINCIPALBALANCE_ISSET_ID = 6;
  private static final int __PLANVERSION_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __REFID_ISSET_ID = 9;
  private static final int __ISRECONCILIATION_ISSET_ID = 10;
  private static final int __REFUNDTYPE_ISSET_ID = 11;
  private static final int __FREEZESTATUS_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPER_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("operRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BASE_AMT, new org.apache.thrift.meta_data.FieldMetaData("baseAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPER_COST, new org.apache.thrift.meta_data.FieldMetaData("operCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GEN_DTTM, new org.apache.thrift.meta_data.FieldMetaData("genDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("operUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("principalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_VERSION, new org.apache.thrift.meta_data.FieldMetaData("planVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("isReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("refundType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREEZE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("freezeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RealtimePlan.class, metaDataMap);
  }

  public RealtimePlan() {
  }

  public RealtimePlan(
    String pId,
    int loanId,
    String operRepayDt,
    int operType,
    double baseAmt,
    double operCost,
    String genDttm,
    int operUserId,
    double total,
    double principalBalance,
    int planVersion,
    int status,
    int refId,
    int isReconciliation,
    int refundType,
    int freezeStatus)
  {
    this();
    this.pId = pId;
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.operRepayDt = operRepayDt;
    this.operType = operType;
    setOperTypeIsSet(true);
    this.baseAmt = baseAmt;
    setBaseAmtIsSet(true);
    this.operCost = operCost;
    setOperCostIsSet(true);
    this.genDttm = genDttm;
    this.operUserId = operUserId;
    setOperUserIdIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    this.planVersion = planVersion;
    setPlanVersionIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    this.refundType = refundType;
    setRefundTypeIsSet(true);
    this.freezeStatus = freezeStatus;
    setFreezeStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RealtimePlan(RealtimePlan other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    this.loanId = other.loanId;
    if (other.isSetOperRepayDt()) {
      this.operRepayDt = other.operRepayDt;
    }
    this.operType = other.operType;
    this.baseAmt = other.baseAmt;
    this.operCost = other.operCost;
    if (other.isSetGenDttm()) {
      this.genDttm = other.genDttm;
    }
    this.operUserId = other.operUserId;
    this.total = other.total;
    this.principalBalance = other.principalBalance;
    this.planVersion = other.planVersion;
    this.status = other.status;
    this.refId = other.refId;
    this.isReconciliation = other.isReconciliation;
    this.refundType = other.refundType;
    this.freezeStatus = other.freezeStatus;
  }

  public RealtimePlan deepCopy() {
    return new RealtimePlan(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.operRepayDt = null;
    setOperTypeIsSet(false);
    this.operType = 0;
    setBaseAmtIsSet(false);
    this.baseAmt = 0.0;
    setOperCostIsSet(false);
    this.operCost = 0.0;
    this.genDttm = null;
    setOperUserIdIsSet(false);
    this.operUserId = 0;
    setTotalIsSet(false);
    this.total = 0.0;
    setPrincipalBalanceIsSet(false);
    this.principalBalance = 0.0;
    setPlanVersionIsSet(false);
    this.planVersion = 0;
    setStatusIsSet(false);
    this.status = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    setIsReconciliationIsSet(false);
    this.isReconciliation = 0;
    setRefundTypeIsSet(false);
    this.refundType = 0;
    setFreezeStatusIsSet(false);
    this.freezeStatus = 0;
  }

  public String getPId() {
    return this.pId;
  }

  public RealtimePlan setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public int getLoanId() {
    return this.loanId;
  }

  public RealtimePlan setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getOperRepayDt() {
    return this.operRepayDt;
  }

  public RealtimePlan setOperRepayDt(String operRepayDt) {
    this.operRepayDt = operRepayDt;
    return this;
  }

  public void unsetOperRepayDt() {
    this.operRepayDt = null;
  }

  /** Returns true if field operRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetOperRepayDt() {
    return this.operRepayDt != null;
  }

  public void setOperRepayDtIsSet(boolean value) {
    if (!value) {
      this.operRepayDt = null;
    }
  }

  public int getOperType() {
    return this.operType;
  }

  public RealtimePlan setOperType(int operType) {
    this.operType = operType;
    setOperTypeIsSet(true);
    return this;
  }

  public void unsetOperType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERTYPE_ISSET_ID);
  }

  /** Returns true if field operType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperType() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERTYPE_ISSET_ID);
  }

  public void setOperTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERTYPE_ISSET_ID, value);
  }

  public double getBaseAmt() {
    return this.baseAmt;
  }

  public RealtimePlan setBaseAmt(double baseAmt) {
    this.baseAmt = baseAmt;
    setBaseAmtIsSet(true);
    return this;
  }

  public void unsetBaseAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEAMT_ISSET_ID);
  }

  /** Returns true if field baseAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEAMT_ISSET_ID);
  }

  public void setBaseAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEAMT_ISSET_ID, value);
  }

  public double getOperCost() {
    return this.operCost;
  }

  public RealtimePlan setOperCost(double operCost) {
    this.operCost = operCost;
    setOperCostIsSet(true);
    return this;
  }

  public void unsetOperCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERCOST_ISSET_ID);
  }

  /** Returns true if field operCost is set (has been assigned a value) and false otherwise */
  public boolean isSetOperCost() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERCOST_ISSET_ID);
  }

  public void setOperCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERCOST_ISSET_ID, value);
  }

  public String getGenDttm() {
    return this.genDttm;
  }

  public RealtimePlan setGenDttm(String genDttm) {
    this.genDttm = genDttm;
    return this;
  }

  public void unsetGenDttm() {
    this.genDttm = null;
  }

  /** Returns true if field genDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetGenDttm() {
    return this.genDttm != null;
  }

  public void setGenDttmIsSet(boolean value) {
    if (!value) {
      this.genDttm = null;
    }
  }

  public int getOperUserId() {
    return this.operUserId;
  }

  public RealtimePlan setOperUserId(int operUserId) {
    this.operUserId = operUserId;
    setOperUserIdIsSet(true);
    return this;
  }

  public void unsetOperUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERUSERID_ISSET_ID);
  }

  /** Returns true if field operUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERUSERID_ISSET_ID);
  }

  public void setOperUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERUSERID_ISSET_ID, value);
  }

  public double getTotal() {
    return this.total;
  }

  public RealtimePlan setTotal(double total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public double getPrincipalBalance() {
    return this.principalBalance;
  }

  public RealtimePlan setPrincipalBalance(double principalBalance) {
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    return this;
  }

  public void unsetPrincipalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  /** Returns true if field principalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  public void setPrincipalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID, value);
  }

  public int getPlanVersion() {
    return this.planVersion;
  }

  public RealtimePlan setPlanVersion(int planVersion) {
    this.planVersion = planVersion;
    setPlanVersionIsSet(true);
    return this;
  }

  public void unsetPlanVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANVERSION_ISSET_ID);
  }

  /** Returns true if field planVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANVERSION_ISSET_ID);
  }

  public void setPlanVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANVERSION_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public RealtimePlan setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public RealtimePlan setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getIsReconciliation() {
    return this.isReconciliation;
  }

  public RealtimePlan setIsReconciliation(int isReconciliation) {
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    return this;
  }

  public void unsetIsReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  /** Returns true if field isReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  public void setIsReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID, value);
  }

  public int getRefundType() {
    return this.refundType;
  }

  public RealtimePlan setRefundType(int refundType) {
    this.refundType = refundType;
    setRefundTypeIsSet(true);
    return this;
  }

  public void unsetRefundType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDTYPE_ISSET_ID);
  }

  /** Returns true if field refundType is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundType() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDTYPE_ISSET_ID);
  }

  public void setRefundTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDTYPE_ISSET_ID, value);
  }

  public int getFreezeStatus() {
    return this.freezeStatus;
  }

  public RealtimePlan setFreezeStatus(int freezeStatus) {
    this.freezeStatus = freezeStatus;
    setFreezeStatusIsSet(true);
    return this;
  }

  public void unsetFreezeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEZESTATUS_ISSET_ID);
  }

  /** Returns true if field freezeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetFreezeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEZESTATUS_ISSET_ID);
  }

  public void setFreezeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEZESTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case OPER_REPAY_DT:
      if (value == null) {
        unsetOperRepayDt();
      } else {
        setOperRepayDt((String)value);
      }
      break;

    case OPER_TYPE:
      if (value == null) {
        unsetOperType();
      } else {
        setOperType((Integer)value);
      }
      break;

    case BASE_AMT:
      if (value == null) {
        unsetBaseAmt();
      } else {
        setBaseAmt((Double)value);
      }
      break;

    case OPER_COST:
      if (value == null) {
        unsetOperCost();
      } else {
        setOperCost((Double)value);
      }
      break;

    case GEN_DTTM:
      if (value == null) {
        unsetGenDttm();
      } else {
        setGenDttm((String)value);
      }
      break;

    case OPER_USER_ID:
      if (value == null) {
        unsetOperUserId();
      } else {
        setOperUserId((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Double)value);
      }
      break;

    case PRINCIPAL_BALANCE:
      if (value == null) {
        unsetPrincipalBalance();
      } else {
        setPrincipalBalance((Double)value);
      }
      break;

    case PLAN_VERSION:
      if (value == null) {
        unsetPlanVersion();
      } else {
        setPlanVersion((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case IS_RECONCILIATION:
      if (value == null) {
        unsetIsReconciliation();
      } else {
        setIsReconciliation((Integer)value);
      }
      break;

    case REFUND_TYPE:
      if (value == null) {
        unsetRefundType();
      } else {
        setRefundType((Integer)value);
      }
      break;

    case FREEZE_STATUS:
      if (value == null) {
        unsetFreezeStatus();
      } else {
        setFreezeStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case OPER_REPAY_DT:
      return getOperRepayDt();

    case OPER_TYPE:
      return Integer.valueOf(getOperType());

    case BASE_AMT:
      return Double.valueOf(getBaseAmt());

    case OPER_COST:
      return Double.valueOf(getOperCost());

    case GEN_DTTM:
      return getGenDttm();

    case OPER_USER_ID:
      return Integer.valueOf(getOperUserId());

    case TOTAL:
      return Double.valueOf(getTotal());

    case PRINCIPAL_BALANCE:
      return Double.valueOf(getPrincipalBalance());

    case PLAN_VERSION:
      return Integer.valueOf(getPlanVersion());

    case STATUS:
      return Integer.valueOf(getStatus());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case IS_RECONCILIATION:
      return Integer.valueOf(getIsReconciliation());

    case REFUND_TYPE:
      return Integer.valueOf(getRefundType());

    case FREEZE_STATUS:
      return Integer.valueOf(getFreezeStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case LOAN_ID:
      return isSetLoanId();
    case OPER_REPAY_DT:
      return isSetOperRepayDt();
    case OPER_TYPE:
      return isSetOperType();
    case BASE_AMT:
      return isSetBaseAmt();
    case OPER_COST:
      return isSetOperCost();
    case GEN_DTTM:
      return isSetGenDttm();
    case OPER_USER_ID:
      return isSetOperUserId();
    case TOTAL:
      return isSetTotal();
    case PRINCIPAL_BALANCE:
      return isSetPrincipalBalance();
    case PLAN_VERSION:
      return isSetPlanVersion();
    case STATUS:
      return isSetStatus();
    case REF_ID:
      return isSetRefId();
    case IS_RECONCILIATION:
      return isSetIsReconciliation();
    case REFUND_TYPE:
      return isSetRefundType();
    case FREEZE_STATUS:
      return isSetFreezeStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RealtimePlan)
      return this.equals((RealtimePlan)that);
    return false;
  }

  public boolean equals(RealtimePlan that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_operRepayDt = true && this.isSetOperRepayDt();
    boolean that_present_operRepayDt = true && that.isSetOperRepayDt();
    if (this_present_operRepayDt || that_present_operRepayDt) {
      if (!(this_present_operRepayDt && that_present_operRepayDt))
        return false;
      if (!this.operRepayDt.equals(that.operRepayDt))
        return false;
    }

    boolean this_present_operType = true;
    boolean that_present_operType = true;
    if (this_present_operType || that_present_operType) {
      if (!(this_present_operType && that_present_operType))
        return false;
      if (this.operType != that.operType)
        return false;
    }

    boolean this_present_baseAmt = true;
    boolean that_present_baseAmt = true;
    if (this_present_baseAmt || that_present_baseAmt) {
      if (!(this_present_baseAmt && that_present_baseAmt))
        return false;
      if (this.baseAmt != that.baseAmt)
        return false;
    }

    boolean this_present_operCost = true;
    boolean that_present_operCost = true;
    if (this_present_operCost || that_present_operCost) {
      if (!(this_present_operCost && that_present_operCost))
        return false;
      if (this.operCost != that.operCost)
        return false;
    }

    boolean this_present_genDttm = true && this.isSetGenDttm();
    boolean that_present_genDttm = true && that.isSetGenDttm();
    if (this_present_genDttm || that_present_genDttm) {
      if (!(this_present_genDttm && that_present_genDttm))
        return false;
      if (!this.genDttm.equals(that.genDttm))
        return false;
    }

    boolean this_present_operUserId = true;
    boolean that_present_operUserId = true;
    if (this_present_operUserId || that_present_operUserId) {
      if (!(this_present_operUserId && that_present_operUserId))
        return false;
      if (this.operUserId != that.operUserId)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_principalBalance = true;
    boolean that_present_principalBalance = true;
    if (this_present_principalBalance || that_present_principalBalance) {
      if (!(this_present_principalBalance && that_present_principalBalance))
        return false;
      if (this.principalBalance != that.principalBalance)
        return false;
    }

    boolean this_present_planVersion = true;
    boolean that_present_planVersion = true;
    if (this_present_planVersion || that_present_planVersion) {
      if (!(this_present_planVersion && that_present_planVersion))
        return false;
      if (this.planVersion != that.planVersion)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_isReconciliation = true;
    boolean that_present_isReconciliation = true;
    if (this_present_isReconciliation || that_present_isReconciliation) {
      if (!(this_present_isReconciliation && that_present_isReconciliation))
        return false;
      if (this.isReconciliation != that.isReconciliation)
        return false;
    }

    boolean this_present_refundType = true;
    boolean that_present_refundType = true;
    if (this_present_refundType || that_present_refundType) {
      if (!(this_present_refundType && that_present_refundType))
        return false;
      if (this.refundType != that.refundType)
        return false;
    }

    boolean this_present_freezeStatus = true;
    boolean that_present_freezeStatus = true;
    if (this_present_freezeStatus || that_present_freezeStatus) {
      if (!(this_present_freezeStatus && that_present_freezeStatus))
        return false;
      if (this.freezeStatus != that.freezeStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_operRepayDt = true && (isSetOperRepayDt());
    list.add(present_operRepayDt);
    if (present_operRepayDt)
      list.add(operRepayDt);

    boolean present_operType = true;
    list.add(present_operType);
    if (present_operType)
      list.add(operType);

    boolean present_baseAmt = true;
    list.add(present_baseAmt);
    if (present_baseAmt)
      list.add(baseAmt);

    boolean present_operCost = true;
    list.add(present_operCost);
    if (present_operCost)
      list.add(operCost);

    boolean present_genDttm = true && (isSetGenDttm());
    list.add(present_genDttm);
    if (present_genDttm)
      list.add(genDttm);

    boolean present_operUserId = true;
    list.add(present_operUserId);
    if (present_operUserId)
      list.add(operUserId);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_principalBalance = true;
    list.add(present_principalBalance);
    if (present_principalBalance)
      list.add(principalBalance);

    boolean present_planVersion = true;
    list.add(present_planVersion);
    if (present_planVersion)
      list.add(planVersion);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_isReconciliation = true;
    list.add(present_isReconciliation);
    if (present_isReconciliation)
      list.add(isReconciliation);

    boolean present_refundType = true;
    list.add(present_refundType);
    if (present_refundType)
      list.add(refundType);

    boolean present_freezeStatus = true;
    list.add(present_freezeStatus);
    if (present_freezeStatus)
      list.add(freezeStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(RealtimePlan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperRepayDt()).compareTo(other.isSetOperRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operRepayDt, other.operRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperType()).compareTo(other.isSetOperType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operType, other.operType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseAmt()).compareTo(other.isSetBaseAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseAmt, other.baseAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperCost()).compareTo(other.isSetOperCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operCost, other.operCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenDttm()).compareTo(other.isSetGenDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genDttm, other.genDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperUserId()).compareTo(other.isSetOperUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operUserId, other.operUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalBalance()).compareTo(other.isSetPrincipalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalBalance, other.principalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanVersion()).compareTo(other.isSetPlanVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planVersion, other.planVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconciliation()).compareTo(other.isSetIsReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconciliation, other.isReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundType()).compareTo(other.isSetRefundType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundType, other.refundType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreezeStatus()).compareTo(other.isSetFreezeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreezeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezeStatus, other.freezeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RealtimePlan(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operRepayDt:");
    if (this.operRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.operRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operType:");
    sb.append(this.operType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("baseAmt:");
    sb.append(this.baseAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operCost:");
    sb.append(this.operCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("genDttm:");
    if (this.genDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.genDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operUserId:");
    sb.append(this.operUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalBalance:");
    sb.append(this.principalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planVersion:");
    sb.append(this.planVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReconciliation:");
    sb.append(this.isReconciliation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundType:");
    sb.append(this.refundType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freezeStatus:");
    sb.append(this.freezeStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RealtimePlanStandardSchemeFactory implements SchemeFactory {
    public RealtimePlanStandardScheme getScheme() {
      return new RealtimePlanStandardScheme();
    }
  }

  private static class RealtimePlanStandardScheme extends StandardScheme<RealtimePlan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RealtimePlan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPER_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operRepayDt = iprot.readString();
              struct.setOperRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operType = iprot.readI32();
              struct.setOperTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BASE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.baseAmt = iprot.readDouble();
              struct.setBaseAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operCost = iprot.readDouble();
              struct.setOperCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GEN_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.genDttm = iprot.readString();
              struct.setGenDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operUserId = iprot.readI32();
              struct.setOperUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total = iprot.readDouble();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRINCIPAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalBalance = iprot.readDouble();
              struct.setPrincipalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAN_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planVersion = iprot.readI32();
              struct.setPlanVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReconciliation = iprot.readI32();
              struct.setIsReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REFUND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundType = iprot.readI32();
              struct.setRefundTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FREEZE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freezeStatus = iprot.readI32();
              struct.setFreezeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RealtimePlan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.operRepayDt != null) {
        oprot.writeFieldBegin(OPER_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.operRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.operType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.baseAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_COST_FIELD_DESC);
      oprot.writeDouble(struct.operCost);
      oprot.writeFieldEnd();
      if (struct.genDttm != null) {
        oprot.writeFieldBegin(GEN_DTTM_FIELD_DESC);
        oprot.writeString(struct.genDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPER_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.operUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.principalBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_VERSION_FIELD_DESC);
      oprot.writeI32(struct.planVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.isReconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_TYPE_FIELD_DESC);
      oprot.writeI32(struct.refundType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREEZE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.freezeStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RealtimePlanTupleSchemeFactory implements SchemeFactory {
    public RealtimePlanTupleScheme getScheme() {
      return new RealtimePlanTupleScheme();
    }
  }

  private static class RealtimePlanTupleScheme extends TupleScheme<RealtimePlan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RealtimePlan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetOperRepayDt()) {
        optionals.set(2);
      }
      if (struct.isSetOperType()) {
        optionals.set(3);
      }
      if (struct.isSetBaseAmt()) {
        optionals.set(4);
      }
      if (struct.isSetOperCost()) {
        optionals.set(5);
      }
      if (struct.isSetGenDttm()) {
        optionals.set(6);
      }
      if (struct.isSetOperUserId()) {
        optionals.set(7);
      }
      if (struct.isSetTotal()) {
        optionals.set(8);
      }
      if (struct.isSetPrincipalBalance()) {
        optionals.set(9);
      }
      if (struct.isSetPlanVersion()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetRefId()) {
        optionals.set(12);
      }
      if (struct.isSetIsReconciliation()) {
        optionals.set(13);
      }
      if (struct.isSetRefundType()) {
        optionals.set(14);
      }
      if (struct.isSetFreezeStatus()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetOperRepayDt()) {
        oprot.writeString(struct.operRepayDt);
      }
      if (struct.isSetOperType()) {
        oprot.writeI32(struct.operType);
      }
      if (struct.isSetBaseAmt()) {
        oprot.writeDouble(struct.baseAmt);
      }
      if (struct.isSetOperCost()) {
        oprot.writeDouble(struct.operCost);
      }
      if (struct.isSetGenDttm()) {
        oprot.writeString(struct.genDttm);
      }
      if (struct.isSetOperUserId()) {
        oprot.writeI32(struct.operUserId);
      }
      if (struct.isSetTotal()) {
        oprot.writeDouble(struct.total);
      }
      if (struct.isSetPrincipalBalance()) {
        oprot.writeDouble(struct.principalBalance);
      }
      if (struct.isSetPlanVersion()) {
        oprot.writeI32(struct.planVersion);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetIsReconciliation()) {
        oprot.writeI32(struct.isReconciliation);
      }
      if (struct.isSetRefundType()) {
        oprot.writeI32(struct.refundType);
      }
      if (struct.isSetFreezeStatus()) {
        oprot.writeI32(struct.freezeStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RealtimePlan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operRepayDt = iprot.readString();
        struct.setOperRepayDtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operType = iprot.readI32();
        struct.setOperTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.baseAmt = iprot.readDouble();
        struct.setBaseAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operCost = iprot.readDouble();
        struct.setOperCostIsSet(true);
      }
      if (incoming.get(6)) {
        struct.genDttm = iprot.readString();
        struct.setGenDttmIsSet(true);
      }
      if (incoming.get(7)) {
        struct.operUserId = iprot.readI32();
        struct.setOperUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.total = iprot.readDouble();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.principalBalance = iprot.readDouble();
        struct.setPrincipalBalanceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.planVersion = iprot.readI32();
        struct.setPlanVersionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isReconciliation = iprot.readI32();
        struct.setIsReconciliationIsSet(true);
      }
      if (incoming.get(14)) {
        struct.refundType = iprot.readI32();
        struct.setRefundTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.freezeStatus = iprot.readI32();
        struct.setFreezeStatusIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepaymentViolationView implements org.apache.thrift.TBase<RepaymentViolationView, RepaymentViolationView._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentViolationView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentViolationView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IS_TERMINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isTermination", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField VIOLATION_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("violationProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField VIOLATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("violationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField VIOLATION_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("violationDt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VIOLATION_OT_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("violationOtInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField IS_BACKLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("isBacklist", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewStatus", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IS_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconciliation", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentViolationViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentViolationViewTupleSchemeFactory());
  }

  public String pId; // required
  public int projectId; // required
  public int isTermination; // required
  public double loanAmt; // required
  public double violationProportion; // required
  public double violationAmt; // required
  public String violationDt; // required
  public double violationOtInterest; // required
  public int isBacklist; // required
  public int reviewStatus; // required
  public String remark; // required
  public int isReconciliation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    PROJECT_ID((short)2, "projectId"),
    IS_TERMINATION((short)3, "isTermination"),
    LOAN_AMT((short)4, "loanAmt"),
    VIOLATION_PROPORTION((short)5, "violationProportion"),
    VIOLATION_AMT((short)6, "violationAmt"),
    VIOLATION_DT((short)7, "violationDt"),
    VIOLATION_OT_INTEREST((short)8, "violationOtInterest"),
    IS_BACKLIST((short)9, "isBacklist"),
    REVIEW_STATUS((short)10, "reviewStatus"),
    REMARK((short)11, "remark"),
    IS_RECONCILIATION((short)12, "isReconciliation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // IS_TERMINATION
          return IS_TERMINATION;
        case 4: // LOAN_AMT
          return LOAN_AMT;
        case 5: // VIOLATION_PROPORTION
          return VIOLATION_PROPORTION;
        case 6: // VIOLATION_AMT
          return VIOLATION_AMT;
        case 7: // VIOLATION_DT
          return VIOLATION_DT;
        case 8: // VIOLATION_OT_INTEREST
          return VIOLATION_OT_INTEREST;
        case 9: // IS_BACKLIST
          return IS_BACKLIST;
        case 10: // REVIEW_STATUS
          return REVIEW_STATUS;
        case 11: // REMARK
          return REMARK;
        case 12: // IS_RECONCILIATION
          return IS_RECONCILIATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __ISTERMINATION_ISSET_ID = 1;
  private static final int __LOANAMT_ISSET_ID = 2;
  private static final int __VIOLATIONPROPORTION_ISSET_ID = 3;
  private static final int __VIOLATIONAMT_ISSET_ID = 4;
  private static final int __VIOLATIONOTINTEREST_ISSET_ID = 5;
  private static final int __ISBACKLIST_ISSET_ID = 6;
  private static final int __REVIEWSTATUS_ISSET_ID = 7;
  private static final int __ISRECONCILIATION_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TERMINATION, new org.apache.thrift.meta_data.FieldMetaData("isTermination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIOLATION_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("violationProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIOLATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("violationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VIOLATION_DT, new org.apache.thrift.meta_data.FieldMetaData("violationDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIOLATION_OT_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("violationOtInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_BACKLIST, new org.apache.thrift.meta_data.FieldMetaData("isBacklist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("isReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentViolationView.class, metaDataMap);
  }

  public RepaymentViolationView() {
  }

  public RepaymentViolationView(
    String pId,
    int projectId,
    int isTermination,
    double loanAmt,
    double violationProportion,
    double violationAmt,
    String violationDt,
    double violationOtInterest,
    int isBacklist,
    int reviewStatus,
    String remark,
    int isReconciliation)
  {
    this();
    this.pId = pId;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.isTermination = isTermination;
    setIsTerminationIsSet(true);
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.violationProportion = violationProportion;
    setViolationProportionIsSet(true);
    this.violationAmt = violationAmt;
    setViolationAmtIsSet(true);
    this.violationDt = violationDt;
    this.violationOtInterest = violationOtInterest;
    setViolationOtInterestIsSet(true);
    this.isBacklist = isBacklist;
    setIsBacklistIsSet(true);
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    this.remark = remark;
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentViolationView(RepaymentViolationView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    this.projectId = other.projectId;
    this.isTermination = other.isTermination;
    this.loanAmt = other.loanAmt;
    this.violationProportion = other.violationProportion;
    this.violationAmt = other.violationAmt;
    if (other.isSetViolationDt()) {
      this.violationDt = other.violationDt;
    }
    this.violationOtInterest = other.violationOtInterest;
    this.isBacklist = other.isBacklist;
    this.reviewStatus = other.reviewStatus;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.isReconciliation = other.isReconciliation;
  }

  public RepaymentViolationView deepCopy() {
    return new RepaymentViolationView(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setIsTerminationIsSet(false);
    this.isTermination = 0;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    setViolationProportionIsSet(false);
    this.violationProportion = 0.0;
    setViolationAmtIsSet(false);
    this.violationAmt = 0.0;
    this.violationDt = null;
    setViolationOtInterestIsSet(false);
    this.violationOtInterest = 0.0;
    setIsBacklistIsSet(false);
    this.isBacklist = 0;
    setReviewStatusIsSet(false);
    this.reviewStatus = 0;
    this.remark = null;
    setIsReconciliationIsSet(false);
    this.isReconciliation = 0;
  }

  public String getPId() {
    return this.pId;
  }

  public RepaymentViolationView setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepaymentViolationView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getIsTermination() {
    return this.isTermination;
  }

  public RepaymentViolationView setIsTermination(int isTermination) {
    this.isTermination = isTermination;
    setIsTerminationIsSet(true);
    return this;
  }

  public void unsetIsTermination() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTERMINATION_ISSET_ID);
  }

  /** Returns true if field isTermination is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTermination() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTERMINATION_ISSET_ID);
  }

  public void setIsTerminationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTERMINATION_ISSET_ID, value);
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public RepaymentViolationView setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public double getViolationProportion() {
    return this.violationProportion;
  }

  public RepaymentViolationView setViolationProportion(double violationProportion) {
    this.violationProportion = violationProportion;
    setViolationProportionIsSet(true);
    return this;
  }

  public void unsetViolationProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIOLATIONPROPORTION_ISSET_ID);
  }

  /** Returns true if field violationProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __VIOLATIONPROPORTION_ISSET_ID);
  }

  public void setViolationProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIOLATIONPROPORTION_ISSET_ID, value);
  }

  public double getViolationAmt() {
    return this.violationAmt;
  }

  public RepaymentViolationView setViolationAmt(double violationAmt) {
    this.violationAmt = violationAmt;
    setViolationAmtIsSet(true);
    return this;
  }

  public void unsetViolationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIOLATIONAMT_ISSET_ID);
  }

  /** Returns true if field violationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __VIOLATIONAMT_ISSET_ID);
  }

  public void setViolationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIOLATIONAMT_ISSET_ID, value);
  }

  public String getViolationDt() {
    return this.violationDt;
  }

  public RepaymentViolationView setViolationDt(String violationDt) {
    this.violationDt = violationDt;
    return this;
  }

  public void unsetViolationDt() {
    this.violationDt = null;
  }

  /** Returns true if field violationDt is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationDt() {
    return this.violationDt != null;
  }

  public void setViolationDtIsSet(boolean value) {
    if (!value) {
      this.violationDt = null;
    }
  }

  public double getViolationOtInterest() {
    return this.violationOtInterest;
  }

  public RepaymentViolationView setViolationOtInterest(double violationOtInterest) {
    this.violationOtInterest = violationOtInterest;
    setViolationOtInterestIsSet(true);
    return this;
  }

  public void unsetViolationOtInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIOLATIONOTINTEREST_ISSET_ID);
  }

  /** Returns true if field violationOtInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetViolationOtInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __VIOLATIONOTINTEREST_ISSET_ID);
  }

  public void setViolationOtInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIOLATIONOTINTEREST_ISSET_ID, value);
  }

  public int getIsBacklist() {
    return this.isBacklist;
  }

  public RepaymentViolationView setIsBacklist(int isBacklist) {
    this.isBacklist = isBacklist;
    setIsBacklistIsSet(true);
    return this;
  }

  public void unsetIsBacklist() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBACKLIST_ISSET_ID);
  }

  /** Returns true if field isBacklist is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBacklist() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBACKLIST_ISSET_ID);
  }

  public void setIsBacklistIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBACKLIST_ISSET_ID, value);
  }

  public int getReviewStatus() {
    return this.reviewStatus;
  }

  public RepaymentViolationView setReviewStatus(int reviewStatus) {
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    return this;
  }

  public void unsetReviewStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  /** Returns true if field reviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  public void setReviewStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public RepaymentViolationView setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getIsReconciliation() {
    return this.isReconciliation;
  }

  public RepaymentViolationView setIsReconciliation(int isReconciliation) {
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    return this;
  }

  public void unsetIsReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  /** Returns true if field isReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  public void setIsReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case IS_TERMINATION:
      if (value == null) {
        unsetIsTermination();
      } else {
        setIsTermination((Integer)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case VIOLATION_PROPORTION:
      if (value == null) {
        unsetViolationProportion();
      } else {
        setViolationProportion((Double)value);
      }
      break;

    case VIOLATION_AMT:
      if (value == null) {
        unsetViolationAmt();
      } else {
        setViolationAmt((Double)value);
      }
      break;

    case VIOLATION_DT:
      if (value == null) {
        unsetViolationDt();
      } else {
        setViolationDt((String)value);
      }
      break;

    case VIOLATION_OT_INTEREST:
      if (value == null) {
        unsetViolationOtInterest();
      } else {
        setViolationOtInterest((Double)value);
      }
      break;

    case IS_BACKLIST:
      if (value == null) {
        unsetIsBacklist();
      } else {
        setIsBacklist((Integer)value);
      }
      break;

    case REVIEW_STATUS:
      if (value == null) {
        unsetReviewStatus();
      } else {
        setReviewStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case IS_RECONCILIATION:
      if (value == null) {
        unsetIsReconciliation();
      } else {
        setIsReconciliation((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case IS_TERMINATION:
      return Integer.valueOf(getIsTermination());

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case VIOLATION_PROPORTION:
      return Double.valueOf(getViolationProportion());

    case VIOLATION_AMT:
      return Double.valueOf(getViolationAmt());

    case VIOLATION_DT:
      return getViolationDt();

    case VIOLATION_OT_INTEREST:
      return Double.valueOf(getViolationOtInterest());

    case IS_BACKLIST:
      return Integer.valueOf(getIsBacklist());

    case REVIEW_STATUS:
      return Integer.valueOf(getReviewStatus());

    case REMARK:
      return getRemark();

    case IS_RECONCILIATION:
      return Integer.valueOf(getIsReconciliation());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case PROJECT_ID:
      return isSetProjectId();
    case IS_TERMINATION:
      return isSetIsTermination();
    case LOAN_AMT:
      return isSetLoanAmt();
    case VIOLATION_PROPORTION:
      return isSetViolationProportion();
    case VIOLATION_AMT:
      return isSetViolationAmt();
    case VIOLATION_DT:
      return isSetViolationDt();
    case VIOLATION_OT_INTEREST:
      return isSetViolationOtInterest();
    case IS_BACKLIST:
      return isSetIsBacklist();
    case REVIEW_STATUS:
      return isSetReviewStatus();
    case REMARK:
      return isSetRemark();
    case IS_RECONCILIATION:
      return isSetIsReconciliation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentViolationView)
      return this.equals((RepaymentViolationView)that);
    return false;
  }

  public boolean equals(RepaymentViolationView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_isTermination = true;
    boolean that_present_isTermination = true;
    if (this_present_isTermination || that_present_isTermination) {
      if (!(this_present_isTermination && that_present_isTermination))
        return false;
      if (this.isTermination != that.isTermination)
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_violationProportion = true;
    boolean that_present_violationProportion = true;
    if (this_present_violationProportion || that_present_violationProportion) {
      if (!(this_present_violationProportion && that_present_violationProportion))
        return false;
      if (this.violationProportion != that.violationProportion)
        return false;
    }

    boolean this_present_violationAmt = true;
    boolean that_present_violationAmt = true;
    if (this_present_violationAmt || that_present_violationAmt) {
      if (!(this_present_violationAmt && that_present_violationAmt))
        return false;
      if (this.violationAmt != that.violationAmt)
        return false;
    }

    boolean this_present_violationDt = true && this.isSetViolationDt();
    boolean that_present_violationDt = true && that.isSetViolationDt();
    if (this_present_violationDt || that_present_violationDt) {
      if (!(this_present_violationDt && that_present_violationDt))
        return false;
      if (!this.violationDt.equals(that.violationDt))
        return false;
    }

    boolean this_present_violationOtInterest = true;
    boolean that_present_violationOtInterest = true;
    if (this_present_violationOtInterest || that_present_violationOtInterest) {
      if (!(this_present_violationOtInterest && that_present_violationOtInterest))
        return false;
      if (this.violationOtInterest != that.violationOtInterest)
        return false;
    }

    boolean this_present_isBacklist = true;
    boolean that_present_isBacklist = true;
    if (this_present_isBacklist || that_present_isBacklist) {
      if (!(this_present_isBacklist && that_present_isBacklist))
        return false;
      if (this.isBacklist != that.isBacklist)
        return false;
    }

    boolean this_present_reviewStatus = true;
    boolean that_present_reviewStatus = true;
    if (this_present_reviewStatus || that_present_reviewStatus) {
      if (!(this_present_reviewStatus && that_present_reviewStatus))
        return false;
      if (this.reviewStatus != that.reviewStatus)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_isReconciliation = true;
    boolean that_present_isReconciliation = true;
    if (this_present_isReconciliation || that_present_isReconciliation) {
      if (!(this_present_isReconciliation && that_present_isReconciliation))
        return false;
      if (this.isReconciliation != that.isReconciliation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_isTermination = true;
    list.add(present_isTermination);
    if (present_isTermination)
      list.add(isTermination);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_violationProportion = true;
    list.add(present_violationProportion);
    if (present_violationProportion)
      list.add(violationProportion);

    boolean present_violationAmt = true;
    list.add(present_violationAmt);
    if (present_violationAmt)
      list.add(violationAmt);

    boolean present_violationDt = true && (isSetViolationDt());
    list.add(present_violationDt);
    if (present_violationDt)
      list.add(violationDt);

    boolean present_violationOtInterest = true;
    list.add(present_violationOtInterest);
    if (present_violationOtInterest)
      list.add(violationOtInterest);

    boolean present_isBacklist = true;
    list.add(present_isBacklist);
    if (present_isBacklist)
      list.add(isBacklist);

    boolean present_reviewStatus = true;
    list.add(present_reviewStatus);
    if (present_reviewStatus)
      list.add(reviewStatus);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_isReconciliation = true;
    list.add(present_isReconciliation);
    if (present_isReconciliation)
      list.add(isReconciliation);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentViolationView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTermination()).compareTo(other.isSetIsTermination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTermination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTermination, other.isTermination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationProportion()).compareTo(other.isSetViolationProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationProportion, other.violationProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationAmt()).compareTo(other.isSetViolationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationAmt, other.violationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationDt()).compareTo(other.isSetViolationDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationDt, other.violationDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViolationOtInterest()).compareTo(other.isSetViolationOtInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolationOtInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.violationOtInterest, other.violationOtInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBacklist()).compareTo(other.isSetIsBacklist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBacklist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBacklist, other.isBacklist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewStatus()).compareTo(other.isSetReviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewStatus, other.reviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconciliation()).compareTo(other.isSetIsReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconciliation, other.isReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentViolationView(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTermination:");
    sb.append(this.isTermination);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationProportion:");
    sb.append(this.violationProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationAmt:");
    sb.append(this.violationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationDt:");
    if (this.violationDt == null) {
      sb.append("null");
    } else {
      sb.append(this.violationDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("violationOtInterest:");
    sb.append(this.violationOtInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBacklist:");
    sb.append(this.isBacklist);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewStatus:");
    sb.append(this.reviewStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReconciliation:");
    sb.append(this.isReconciliation);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentViolationViewStandardSchemeFactory implements SchemeFactory {
    public RepaymentViolationViewStandardScheme getScheme() {
      return new RepaymentViolationViewStandardScheme();
    }
  }

  private static class RepaymentViolationViewStandardScheme extends StandardScheme<RepaymentViolationView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentViolationView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_TERMINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isTermination = iprot.readI32();
              struct.setIsTerminationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIOLATION_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.violationProportion = iprot.readDouble();
              struct.setViolationProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIOLATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.violationAmt = iprot.readDouble();
              struct.setViolationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VIOLATION_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.violationDt = iprot.readString();
              struct.setViolationDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIOLATION_OT_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.violationOtInterest = iprot.readDouble();
              struct.setViolationOtInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_BACKLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isBacklist = iprot.readI32();
              struct.setIsBacklistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reviewStatus = iprot.readI32();
              struct.setReviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReconciliation = iprot.readI32();
              struct.setIsReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentViolationView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TERMINATION_FIELD_DESC);
      oprot.writeI32(struct.isTermination);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIOLATION_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.violationProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIOLATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.violationAmt);
      oprot.writeFieldEnd();
      if (struct.violationDt != null) {
        oprot.writeFieldBegin(VIOLATION_DT_FIELD_DESC);
        oprot.writeString(struct.violationDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIOLATION_OT_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.violationOtInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BACKLIST_FIELD_DESC);
      oprot.writeI32(struct.isBacklist);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REVIEW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.reviewStatus);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.isReconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentViolationViewTupleSchemeFactory implements SchemeFactory {
    public RepaymentViolationViewTupleScheme getScheme() {
      return new RepaymentViolationViewTupleScheme();
    }
  }

  private static class RepaymentViolationViewTupleScheme extends TupleScheme<RepaymentViolationView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentViolationView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetIsTermination()) {
        optionals.set(2);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(3);
      }
      if (struct.isSetViolationProportion()) {
        optionals.set(4);
      }
      if (struct.isSetViolationAmt()) {
        optionals.set(5);
      }
      if (struct.isSetViolationDt()) {
        optionals.set(6);
      }
      if (struct.isSetViolationOtInterest()) {
        optionals.set(7);
      }
      if (struct.isSetIsBacklist()) {
        optionals.set(8);
      }
      if (struct.isSetReviewStatus()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetIsReconciliation()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetIsTermination()) {
        oprot.writeI32(struct.isTermination);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetViolationProportion()) {
        oprot.writeDouble(struct.violationProportion);
      }
      if (struct.isSetViolationAmt()) {
        oprot.writeDouble(struct.violationAmt);
      }
      if (struct.isSetViolationDt()) {
        oprot.writeString(struct.violationDt);
      }
      if (struct.isSetViolationOtInterest()) {
        oprot.writeDouble(struct.violationOtInterest);
      }
      if (struct.isSetIsBacklist()) {
        oprot.writeI32(struct.isBacklist);
      }
      if (struct.isSetReviewStatus()) {
        oprot.writeI32(struct.reviewStatus);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetIsReconciliation()) {
        oprot.writeI32(struct.isReconciliation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentViolationView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isTermination = iprot.readI32();
        struct.setIsTerminationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.violationProportion = iprot.readDouble();
        struct.setViolationProportionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.violationAmt = iprot.readDouble();
        struct.setViolationAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.violationDt = iprot.readString();
        struct.setViolationDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.violationOtInterest = iprot.readDouble();
        struct.setViolationOtInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isBacklist = iprot.readI32();
        struct.setIsBacklistIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reviewStatus = iprot.readI32();
        struct.setReviewStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isReconciliation = iprot.readI32();
        struct.setIsReconciliationIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-25")
public class CusPerFamilyFinance implements org.apache.thrift.TBase<CusPerFamilyFinance, CusPerFamilyFinance._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerFamilyFinance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerFamilyFinance");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_PER_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_ASSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAssets", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_LIAB_FIELD_DESC = new org.apache.thrift.protocol.TField("totalLiab", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FAMILY_ASSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("familyAssets", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField YEAR_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("yearPay", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MONTH_WAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthWage", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FAMILY_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("familyIncome", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FAMILY_CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("familyControl", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ASSETS_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("assetsDetail", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LIAB_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("liabDetail", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MONTHLY_PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("monthlyPayment", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField OVERDRAFT_FIELD_DESC = new org.apache.thrift.protocol.TField("overdraft", org.apache.thrift.protocol.TType.DOUBLE, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerFamilyFinanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerFamilyFinanceTupleSchemeFactory());
  }

  public int pid; // required
  public CusPerBase cusPerBase; // required
  public double totalAssets; // required
  public double totalLiab; // required
  public double familyAssets; // required
  public double yearPay; // required
  public double monthWage; // required
  public double familyIncome; // required
  public double familyControl; // required
  public int status; // required
  public String assetsDetail; // required
  public String liabDetail; // required
  public double monthlyPayment; // required
  public double overdraft; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_PER_BASE((short)2, "cusPerBase"),
    TOTAL_ASSETS((short)3, "totalAssets"),
    TOTAL_LIAB((short)4, "totalLiab"),
    FAMILY_ASSETS((short)5, "familyAssets"),
    YEAR_PAY((short)6, "yearPay"),
    MONTH_WAGE((short)7, "monthWage"),
    FAMILY_INCOME((short)8, "familyIncome"),
    FAMILY_CONTROL((short)9, "familyControl"),
    STATUS((short)10, "status"),
    ASSETS_DETAIL((short)11, "assetsDetail"),
    LIAB_DETAIL((short)12, "liabDetail"),
    MONTHLY_PAYMENT((short)13, "monthlyPayment"),
    OVERDRAFT((short)14, "overdraft");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_PER_BASE
          return CUS_PER_BASE;
        case 3: // TOTAL_ASSETS
          return TOTAL_ASSETS;
        case 4: // TOTAL_LIAB
          return TOTAL_LIAB;
        case 5: // FAMILY_ASSETS
          return FAMILY_ASSETS;
        case 6: // YEAR_PAY
          return YEAR_PAY;
        case 7: // MONTH_WAGE
          return MONTH_WAGE;
        case 8: // FAMILY_INCOME
          return FAMILY_INCOME;
        case 9: // FAMILY_CONTROL
          return FAMILY_CONTROL;
        case 10: // STATUS
          return STATUS;
        case 11: // ASSETS_DETAIL
          return ASSETS_DETAIL;
        case 12: // LIAB_DETAIL
          return LIAB_DETAIL;
        case 13: // MONTHLY_PAYMENT
          return MONTHLY_PAYMENT;
        case 14: // OVERDRAFT
          return OVERDRAFT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __TOTALASSETS_ISSET_ID = 1;
  private static final int __TOTALLIAB_ISSET_ID = 2;
  private static final int __FAMILYASSETS_ISSET_ID = 3;
  private static final int __YEARPAY_ISSET_ID = 4;
  private static final int __MONTHWAGE_ISSET_ID = 5;
  private static final int __FAMILYINCOME_ISSET_ID = 6;
  private static final int __FAMILYCONTROL_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __MONTHLYPAYMENT_ISSET_ID = 9;
  private static final int __OVERDRAFT_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_PER_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusPerBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerBase.class)));
    tmpMap.put(_Fields.TOTAL_ASSETS, new org.apache.thrift.meta_data.FieldMetaData("totalAssets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_LIAB, new org.apache.thrift.meta_data.FieldMetaData("totalLiab", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAMILY_ASSETS, new org.apache.thrift.meta_data.FieldMetaData("familyAssets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_PAY, new org.apache.thrift.meta_data.FieldMetaData("yearPay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_WAGE, new org.apache.thrift.meta_data.FieldMetaData("monthWage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAMILY_INCOME, new org.apache.thrift.meta_data.FieldMetaData("familyIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAMILY_CONTROL, new org.apache.thrift.meta_data.FieldMetaData("familyControl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSETS_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("assetsDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIAB_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("liabDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTHLY_PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("monthlyPayment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDRAFT, new org.apache.thrift.meta_data.FieldMetaData("overdraft", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerFamilyFinance.class, metaDataMap);
  }

  public CusPerFamilyFinance() {
  }

  public CusPerFamilyFinance(
    int pid,
    CusPerBase cusPerBase,
    double totalAssets,
    double totalLiab,
    double familyAssets,
    double yearPay,
    double monthWage,
    double familyIncome,
    double familyControl,
    int status,
    String assetsDetail,
    String liabDetail,
    double monthlyPayment,
    double overdraft)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusPerBase = cusPerBase;
    this.totalAssets = totalAssets;
    setTotalAssetsIsSet(true);
    this.totalLiab = totalLiab;
    setTotalLiabIsSet(true);
    this.familyAssets = familyAssets;
    setFamilyAssetsIsSet(true);
    this.yearPay = yearPay;
    setYearPayIsSet(true);
    this.monthWage = monthWage;
    setMonthWageIsSet(true);
    this.familyIncome = familyIncome;
    setFamilyIncomeIsSet(true);
    this.familyControl = familyControl;
    setFamilyControlIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.assetsDetail = assetsDetail;
    this.liabDetail = liabDetail;
    this.monthlyPayment = monthlyPayment;
    setMonthlyPaymentIsSet(true);
    this.overdraft = overdraft;
    setOverdraftIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerFamilyFinance(CusPerFamilyFinance other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusPerBase()) {
      this.cusPerBase = new CusPerBase(other.cusPerBase);
    }
    this.totalAssets = other.totalAssets;
    this.totalLiab = other.totalLiab;
    this.familyAssets = other.familyAssets;
    this.yearPay = other.yearPay;
    this.monthWage = other.monthWage;
    this.familyIncome = other.familyIncome;
    this.familyControl = other.familyControl;
    this.status = other.status;
    if (other.isSetAssetsDetail()) {
      this.assetsDetail = other.assetsDetail;
    }
    if (other.isSetLiabDetail()) {
      this.liabDetail = other.liabDetail;
    }
    this.monthlyPayment = other.monthlyPayment;
    this.overdraft = other.overdraft;
  }

  public CusPerFamilyFinance deepCopy() {
    return new CusPerFamilyFinance(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusPerBase = null;
    setTotalAssetsIsSet(false);
    this.totalAssets = 0.0;
    setTotalLiabIsSet(false);
    this.totalLiab = 0.0;
    setFamilyAssetsIsSet(false);
    this.familyAssets = 0.0;
    setYearPayIsSet(false);
    this.yearPay = 0.0;
    setMonthWageIsSet(false);
    this.monthWage = 0.0;
    setFamilyIncomeIsSet(false);
    this.familyIncome = 0.0;
    setFamilyControlIsSet(false);
    this.familyControl = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    this.assetsDetail = null;
    this.liabDetail = null;
    setMonthlyPaymentIsSet(false);
    this.monthlyPayment = 0.0;
    setOverdraftIsSet(false);
    this.overdraft = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusPerFamilyFinance setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusPerBase getCusPerBase() {
    return this.cusPerBase;
  }

  public CusPerFamilyFinance setCusPerBase(CusPerBase cusPerBase) {
    this.cusPerBase = cusPerBase;
    return this;
  }

  public void unsetCusPerBase() {
    this.cusPerBase = null;
  }

  /** Returns true if field cusPerBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerBase() {
    return this.cusPerBase != null;
  }

  public void setCusPerBaseIsSet(boolean value) {
    if (!value) {
      this.cusPerBase = null;
    }
  }

  public double getTotalAssets() {
    return this.totalAssets;
  }

  public CusPerFamilyFinance setTotalAssets(double totalAssets) {
    this.totalAssets = totalAssets;
    setTotalAssetsIsSet(true);
    return this;
  }

  public void unsetTotalAssets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALASSETS_ISSET_ID);
  }

  /** Returns true if field totalAssets is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAssets() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALASSETS_ISSET_ID);
  }

  public void setTotalAssetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALASSETS_ISSET_ID, value);
  }

  public double getTotalLiab() {
    return this.totalLiab;
  }

  public CusPerFamilyFinance setTotalLiab(double totalLiab) {
    this.totalLiab = totalLiab;
    setTotalLiabIsSet(true);
    return this;
  }

  public void unsetTotalLiab() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALLIAB_ISSET_ID);
  }

  /** Returns true if field totalLiab is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalLiab() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALLIAB_ISSET_ID);
  }

  public void setTotalLiabIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALLIAB_ISSET_ID, value);
  }

  public double getFamilyAssets() {
    return this.familyAssets;
  }

  public CusPerFamilyFinance setFamilyAssets(double familyAssets) {
    this.familyAssets = familyAssets;
    setFamilyAssetsIsSet(true);
    return this;
  }

  public void unsetFamilyAssets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYASSETS_ISSET_ID);
  }

  /** Returns true if field familyAssets is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyAssets() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYASSETS_ISSET_ID);
  }

  public void setFamilyAssetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYASSETS_ISSET_ID, value);
  }

  public double getYearPay() {
    return this.yearPay;
  }

  public CusPerFamilyFinance setYearPay(double yearPay) {
    this.yearPay = yearPay;
    setYearPayIsSet(true);
    return this;
  }

  public void unsetYearPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEARPAY_ISSET_ID);
  }

  /** Returns true if field yearPay is set (has been assigned a value) and false otherwise */
  public boolean isSetYearPay() {
    return EncodingUtils.testBit(__isset_bitfield, __YEARPAY_ISSET_ID);
  }

  public void setYearPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEARPAY_ISSET_ID, value);
  }

  public double getMonthWage() {
    return this.monthWage;
  }

  public CusPerFamilyFinance setMonthWage(double monthWage) {
    this.monthWage = monthWage;
    setMonthWageIsSet(true);
    return this;
  }

  public void unsetMonthWage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHWAGE_ISSET_ID);
  }

  /** Returns true if field monthWage is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthWage() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHWAGE_ISSET_ID);
  }

  public void setMonthWageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHWAGE_ISSET_ID, value);
  }

  public double getFamilyIncome() {
    return this.familyIncome;
  }

  public CusPerFamilyFinance setFamilyIncome(double familyIncome) {
    this.familyIncome = familyIncome;
    setFamilyIncomeIsSet(true);
    return this;
  }

  public void unsetFamilyIncome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYINCOME_ISSET_ID);
  }

  /** Returns true if field familyIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyIncome() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYINCOME_ISSET_ID);
  }

  public void setFamilyIncomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYINCOME_ISSET_ID, value);
  }

  public double getFamilyControl() {
    return this.familyControl;
  }

  public CusPerFamilyFinance setFamilyControl(double familyControl) {
    this.familyControl = familyControl;
    setFamilyControlIsSet(true);
    return this;
  }

  public void unsetFamilyControl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYCONTROL_ISSET_ID);
  }

  /** Returns true if field familyControl is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyControl() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYCONTROL_ISSET_ID);
  }

  public void setFamilyControlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYCONTROL_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusPerFamilyFinance setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getAssetsDetail() {
    return this.assetsDetail;
  }

  public CusPerFamilyFinance setAssetsDetail(String assetsDetail) {
    this.assetsDetail = assetsDetail;
    return this;
  }

  public void unsetAssetsDetail() {
    this.assetsDetail = null;
  }

  /** Returns true if field assetsDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetAssetsDetail() {
    return this.assetsDetail != null;
  }

  public void setAssetsDetailIsSet(boolean value) {
    if (!value) {
      this.assetsDetail = null;
    }
  }

  public String getLiabDetail() {
    return this.liabDetail;
  }

  public CusPerFamilyFinance setLiabDetail(String liabDetail) {
    this.liabDetail = liabDetail;
    return this;
  }

  public void unsetLiabDetail() {
    this.liabDetail = null;
  }

  /** Returns true if field liabDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetLiabDetail() {
    return this.liabDetail != null;
  }

  public void setLiabDetailIsSet(boolean value) {
    if (!value) {
      this.liabDetail = null;
    }
  }

  public double getMonthlyPayment() {
    return this.monthlyPayment;
  }

  public CusPerFamilyFinance setMonthlyPayment(double monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
    setMonthlyPaymentIsSet(true);
    return this;
  }

  public void unsetMonthlyPayment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLYPAYMENT_ISSET_ID);
  }

  /** Returns true if field monthlyPayment is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthlyPayment() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLYPAYMENT_ISSET_ID);
  }

  public void setMonthlyPaymentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLYPAYMENT_ISSET_ID, value);
  }

  public double getOverdraft() {
    return this.overdraft;
  }

  public CusPerFamilyFinance setOverdraft(double overdraft) {
    this.overdraft = overdraft;
    setOverdraftIsSet(true);
    return this;
  }

  public void unsetOverdraft() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDRAFT_ISSET_ID);
  }

  /** Returns true if field overdraft is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdraft() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDRAFT_ISSET_ID);
  }

  public void setOverdraftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDRAFT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_PER_BASE:
      if (value == null) {
        unsetCusPerBase();
      } else {
        setCusPerBase((CusPerBase)value);
      }
      break;

    case TOTAL_ASSETS:
      if (value == null) {
        unsetTotalAssets();
      } else {
        setTotalAssets((Double)value);
      }
      break;

    case TOTAL_LIAB:
      if (value == null) {
        unsetTotalLiab();
      } else {
        setTotalLiab((Double)value);
      }
      break;

    case FAMILY_ASSETS:
      if (value == null) {
        unsetFamilyAssets();
      } else {
        setFamilyAssets((Double)value);
      }
      break;

    case YEAR_PAY:
      if (value == null) {
        unsetYearPay();
      } else {
        setYearPay((Double)value);
      }
      break;

    case MONTH_WAGE:
      if (value == null) {
        unsetMonthWage();
      } else {
        setMonthWage((Double)value);
      }
      break;

    case FAMILY_INCOME:
      if (value == null) {
        unsetFamilyIncome();
      } else {
        setFamilyIncome((Double)value);
      }
      break;

    case FAMILY_CONTROL:
      if (value == null) {
        unsetFamilyControl();
      } else {
        setFamilyControl((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ASSETS_DETAIL:
      if (value == null) {
        unsetAssetsDetail();
      } else {
        setAssetsDetail((String)value);
      }
      break;

    case LIAB_DETAIL:
      if (value == null) {
        unsetLiabDetail();
      } else {
        setLiabDetail((String)value);
      }
      break;

    case MONTHLY_PAYMENT:
      if (value == null) {
        unsetMonthlyPayment();
      } else {
        setMonthlyPayment((Double)value);
      }
      break;

    case OVERDRAFT:
      if (value == null) {
        unsetOverdraft();
      } else {
        setOverdraft((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_PER_BASE:
      return getCusPerBase();

    case TOTAL_ASSETS:
      return Double.valueOf(getTotalAssets());

    case TOTAL_LIAB:
      return Double.valueOf(getTotalLiab());

    case FAMILY_ASSETS:
      return Double.valueOf(getFamilyAssets());

    case YEAR_PAY:
      return Double.valueOf(getYearPay());

    case MONTH_WAGE:
      return Double.valueOf(getMonthWage());

    case FAMILY_INCOME:
      return Double.valueOf(getFamilyIncome());

    case FAMILY_CONTROL:
      return Double.valueOf(getFamilyControl());

    case STATUS:
      return Integer.valueOf(getStatus());

    case ASSETS_DETAIL:
      return getAssetsDetail();

    case LIAB_DETAIL:
      return getLiabDetail();

    case MONTHLY_PAYMENT:
      return Double.valueOf(getMonthlyPayment());

    case OVERDRAFT:
      return Double.valueOf(getOverdraft());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_PER_BASE:
      return isSetCusPerBase();
    case TOTAL_ASSETS:
      return isSetTotalAssets();
    case TOTAL_LIAB:
      return isSetTotalLiab();
    case FAMILY_ASSETS:
      return isSetFamilyAssets();
    case YEAR_PAY:
      return isSetYearPay();
    case MONTH_WAGE:
      return isSetMonthWage();
    case FAMILY_INCOME:
      return isSetFamilyIncome();
    case FAMILY_CONTROL:
      return isSetFamilyControl();
    case STATUS:
      return isSetStatus();
    case ASSETS_DETAIL:
      return isSetAssetsDetail();
    case LIAB_DETAIL:
      return isSetLiabDetail();
    case MONTHLY_PAYMENT:
      return isSetMonthlyPayment();
    case OVERDRAFT:
      return isSetOverdraft();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerFamilyFinance)
      return this.equals((CusPerFamilyFinance)that);
    return false;
  }

  public boolean equals(CusPerFamilyFinance that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusPerBase = true && this.isSetCusPerBase();
    boolean that_present_cusPerBase = true && that.isSetCusPerBase();
    if (this_present_cusPerBase || that_present_cusPerBase) {
      if (!(this_present_cusPerBase && that_present_cusPerBase))
        return false;
      if (!this.cusPerBase.equals(that.cusPerBase))
        return false;
    }

    boolean this_present_totalAssets = true;
    boolean that_present_totalAssets = true;
    if (this_present_totalAssets || that_present_totalAssets) {
      if (!(this_present_totalAssets && that_present_totalAssets))
        return false;
      if (this.totalAssets != that.totalAssets)
        return false;
    }

    boolean this_present_totalLiab = true;
    boolean that_present_totalLiab = true;
    if (this_present_totalLiab || that_present_totalLiab) {
      if (!(this_present_totalLiab && that_present_totalLiab))
        return false;
      if (this.totalLiab != that.totalLiab)
        return false;
    }

    boolean this_present_familyAssets = true;
    boolean that_present_familyAssets = true;
    if (this_present_familyAssets || that_present_familyAssets) {
      if (!(this_present_familyAssets && that_present_familyAssets))
        return false;
      if (this.familyAssets != that.familyAssets)
        return false;
    }

    boolean this_present_yearPay = true;
    boolean that_present_yearPay = true;
    if (this_present_yearPay || that_present_yearPay) {
      if (!(this_present_yearPay && that_present_yearPay))
        return false;
      if (this.yearPay != that.yearPay)
        return false;
    }

    boolean this_present_monthWage = true;
    boolean that_present_monthWage = true;
    if (this_present_monthWage || that_present_monthWage) {
      if (!(this_present_monthWage && that_present_monthWage))
        return false;
      if (this.monthWage != that.monthWage)
        return false;
    }

    boolean this_present_familyIncome = true;
    boolean that_present_familyIncome = true;
    if (this_present_familyIncome || that_present_familyIncome) {
      if (!(this_present_familyIncome && that_present_familyIncome))
        return false;
      if (this.familyIncome != that.familyIncome)
        return false;
    }

    boolean this_present_familyControl = true;
    boolean that_present_familyControl = true;
    if (this_present_familyControl || that_present_familyControl) {
      if (!(this_present_familyControl && that_present_familyControl))
        return false;
      if (this.familyControl != that.familyControl)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_assetsDetail = true && this.isSetAssetsDetail();
    boolean that_present_assetsDetail = true && that.isSetAssetsDetail();
    if (this_present_assetsDetail || that_present_assetsDetail) {
      if (!(this_present_assetsDetail && that_present_assetsDetail))
        return false;
      if (!this.assetsDetail.equals(that.assetsDetail))
        return false;
    }

    boolean this_present_liabDetail = true && this.isSetLiabDetail();
    boolean that_present_liabDetail = true && that.isSetLiabDetail();
    if (this_present_liabDetail || that_present_liabDetail) {
      if (!(this_present_liabDetail && that_present_liabDetail))
        return false;
      if (!this.liabDetail.equals(that.liabDetail))
        return false;
    }

    boolean this_present_monthlyPayment = true;
    boolean that_present_monthlyPayment = true;
    if (this_present_monthlyPayment || that_present_monthlyPayment) {
      if (!(this_present_monthlyPayment && that_present_monthlyPayment))
        return false;
      if (this.monthlyPayment != that.monthlyPayment)
        return false;
    }

    boolean this_present_overdraft = true;
    boolean that_present_overdraft = true;
    if (this_present_overdraft || that_present_overdraft) {
      if (!(this_present_overdraft && that_present_overdraft))
        return false;
      if (this.overdraft != that.overdraft)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusPerBase = true && (isSetCusPerBase());
    list.add(present_cusPerBase);
    if (present_cusPerBase)
      list.add(cusPerBase);

    boolean present_totalAssets = true;
    list.add(present_totalAssets);
    if (present_totalAssets)
      list.add(totalAssets);

    boolean present_totalLiab = true;
    list.add(present_totalLiab);
    if (present_totalLiab)
      list.add(totalLiab);

    boolean present_familyAssets = true;
    list.add(present_familyAssets);
    if (present_familyAssets)
      list.add(familyAssets);

    boolean present_yearPay = true;
    list.add(present_yearPay);
    if (present_yearPay)
      list.add(yearPay);

    boolean present_monthWage = true;
    list.add(present_monthWage);
    if (present_monthWage)
      list.add(monthWage);

    boolean present_familyIncome = true;
    list.add(present_familyIncome);
    if (present_familyIncome)
      list.add(familyIncome);

    boolean present_familyControl = true;
    list.add(present_familyControl);
    if (present_familyControl)
      list.add(familyControl);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_assetsDetail = true && (isSetAssetsDetail());
    list.add(present_assetsDetail);
    if (present_assetsDetail)
      list.add(assetsDetail);

    boolean present_liabDetail = true && (isSetLiabDetail());
    list.add(present_liabDetail);
    if (present_liabDetail)
      list.add(liabDetail);

    boolean present_monthlyPayment = true;
    list.add(present_monthlyPayment);
    if (present_monthlyPayment)
      list.add(monthlyPayment);

    boolean present_overdraft = true;
    list.add(present_overdraft);
    if (present_overdraft)
      list.add(overdraft);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerFamilyFinance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerBase()).compareTo(other.isSetCusPerBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerBase, other.cusPerBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAssets()).compareTo(other.isSetTotalAssets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAssets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAssets, other.totalAssets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalLiab()).compareTo(other.isSetTotalLiab());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalLiab()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalLiab, other.totalLiab);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyAssets()).compareTo(other.isSetFamilyAssets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyAssets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyAssets, other.familyAssets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearPay()).compareTo(other.isSetYearPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearPay, other.yearPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthWage()).compareTo(other.isSetMonthWage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthWage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthWage, other.monthWage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyIncome()).compareTo(other.isSetFamilyIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyIncome, other.familyIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyControl()).compareTo(other.isSetFamilyControl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyControl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyControl, other.familyControl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssetsDetail()).compareTo(other.isSetAssetsDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssetsDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetsDetail, other.assetsDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiabDetail()).compareTo(other.isSetLiabDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiabDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liabDetail, other.liabDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthlyPayment()).compareTo(other.isSetMonthlyPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthlyPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthlyPayment, other.monthlyPayment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdraft()).compareTo(other.isSetOverdraft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdraft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdraft, other.overdraft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerFamilyFinance(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerBase:");
    if (this.cusPerBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAssets:");
    sb.append(this.totalAssets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalLiab:");
    sb.append(this.totalLiab);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyAssets:");
    sb.append(this.familyAssets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearPay:");
    sb.append(this.yearPay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthWage:");
    sb.append(this.monthWage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyIncome:");
    sb.append(this.familyIncome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyControl:");
    sb.append(this.familyControl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assetsDetail:");
    if (this.assetsDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.assetsDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liabDetail:");
    if (this.liabDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.liabDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthlyPayment:");
    sb.append(this.monthlyPayment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdraft:");
    sb.append(this.overdraft);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerBase != null) {
      cusPerBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerFamilyFinanceStandardSchemeFactory implements SchemeFactory {
    public CusPerFamilyFinanceStandardScheme getScheme() {
      return new CusPerFamilyFinanceStandardScheme();
    }
  }

  private static class CusPerFamilyFinanceStandardScheme extends StandardScheme<CusPerFamilyFinance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerFamilyFinance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_PER_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerBase = new CusPerBase();
              struct.cusPerBase.read(iprot);
              struct.setCusPerBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_ASSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAssets = iprot.readDouble();
              struct.setTotalAssetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_LIAB
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalLiab = iprot.readDouble();
              struct.setTotalLiabIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FAMILY_ASSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.familyAssets = iprot.readDouble();
              struct.setFamilyAssetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // YEAR_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearPay = iprot.readDouble();
              struct.setYearPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MONTH_WAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthWage = iprot.readDouble();
              struct.setMonthWageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FAMILY_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.familyIncome = iprot.readDouble();
              struct.setFamilyIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FAMILY_CONTROL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.familyControl = iprot.readDouble();
              struct.setFamilyControlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ASSETS_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assetsDetail = iprot.readString();
              struct.setAssetsDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIAB_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liabDetail = iprot.readString();
              struct.setLiabDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MONTHLY_PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthlyPayment = iprot.readDouble();
              struct.setMonthlyPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OVERDRAFT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdraft = iprot.readDouble();
              struct.setOverdraftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerFamilyFinance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusPerBase != null) {
        oprot.writeFieldBegin(CUS_PER_BASE_FIELD_DESC);
        struct.cusPerBase.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_ASSETS_FIELD_DESC);
      oprot.writeDouble(struct.totalAssets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_LIAB_FIELD_DESC);
      oprot.writeDouble(struct.totalLiab);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_ASSETS_FIELD_DESC);
      oprot.writeDouble(struct.familyAssets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_PAY_FIELD_DESC);
      oprot.writeDouble(struct.yearPay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_WAGE_FIELD_DESC);
      oprot.writeDouble(struct.monthWage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_INCOME_FIELD_DESC);
      oprot.writeDouble(struct.familyIncome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_CONTROL_FIELD_DESC);
      oprot.writeDouble(struct.familyControl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.assetsDetail != null) {
        oprot.writeFieldBegin(ASSETS_DETAIL_FIELD_DESC);
        oprot.writeString(struct.assetsDetail);
        oprot.writeFieldEnd();
      }
      if (struct.liabDetail != null) {
        oprot.writeFieldBegin(LIAB_DETAIL_FIELD_DESC);
        oprot.writeString(struct.liabDetail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTHLY_PAYMENT_FIELD_DESC);
      oprot.writeDouble(struct.monthlyPayment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDRAFT_FIELD_DESC);
      oprot.writeDouble(struct.overdraft);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerFamilyFinanceTupleSchemeFactory implements SchemeFactory {
    public CusPerFamilyFinanceTupleScheme getScheme() {
      return new CusPerFamilyFinanceTupleScheme();
    }
  }

  private static class CusPerFamilyFinanceTupleScheme extends TupleScheme<CusPerFamilyFinance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerFamilyFinance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusPerBase()) {
        optionals.set(1);
      }
      if (struct.isSetTotalAssets()) {
        optionals.set(2);
      }
      if (struct.isSetTotalLiab()) {
        optionals.set(3);
      }
      if (struct.isSetFamilyAssets()) {
        optionals.set(4);
      }
      if (struct.isSetYearPay()) {
        optionals.set(5);
      }
      if (struct.isSetMonthWage()) {
        optionals.set(6);
      }
      if (struct.isSetFamilyIncome()) {
        optionals.set(7);
      }
      if (struct.isSetFamilyControl()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetAssetsDetail()) {
        optionals.set(10);
      }
      if (struct.isSetLiabDetail()) {
        optionals.set(11);
      }
      if (struct.isSetMonthlyPayment()) {
        optionals.set(12);
      }
      if (struct.isSetOverdraft()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusPerBase()) {
        struct.cusPerBase.write(oprot);
      }
      if (struct.isSetTotalAssets()) {
        oprot.writeDouble(struct.totalAssets);
      }
      if (struct.isSetTotalLiab()) {
        oprot.writeDouble(struct.totalLiab);
      }
      if (struct.isSetFamilyAssets()) {
        oprot.writeDouble(struct.familyAssets);
      }
      if (struct.isSetYearPay()) {
        oprot.writeDouble(struct.yearPay);
      }
      if (struct.isSetMonthWage()) {
        oprot.writeDouble(struct.monthWage);
      }
      if (struct.isSetFamilyIncome()) {
        oprot.writeDouble(struct.familyIncome);
      }
      if (struct.isSetFamilyControl()) {
        oprot.writeDouble(struct.familyControl);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetAssetsDetail()) {
        oprot.writeString(struct.assetsDetail);
      }
      if (struct.isSetLiabDetail()) {
        oprot.writeString(struct.liabDetail);
      }
      if (struct.isSetMonthlyPayment()) {
        oprot.writeDouble(struct.monthlyPayment);
      }
      if (struct.isSetOverdraft()) {
        oprot.writeDouble(struct.overdraft);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerFamilyFinance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusPerBase = new CusPerBase();
        struct.cusPerBase.read(iprot);
        struct.setCusPerBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalAssets = iprot.readDouble();
        struct.setTotalAssetsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalLiab = iprot.readDouble();
        struct.setTotalLiabIsSet(true);
      }
      if (incoming.get(4)) {
        struct.familyAssets = iprot.readDouble();
        struct.setFamilyAssetsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.yearPay = iprot.readDouble();
        struct.setYearPayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.monthWage = iprot.readDouble();
        struct.setMonthWageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.familyIncome = iprot.readDouble();
        struct.setFamilyIncomeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.familyControl = iprot.readDouble();
        struct.setFamilyControlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.assetsDetail = iprot.readString();
        struct.setAssetsDetailIsSet(true);
      }
      if (incoming.get(11)) {
        struct.liabDetail = iprot.readString();
        struct.setLiabDetailIsSet(true);
      }
      if (incoming.get(12)) {
        struct.monthlyPayment = iprot.readDouble();
        struct.setMonthlyPaymentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.overdraft = iprot.readDouble();
        struct.setOverdraftIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class LoanRefundView implements org.apache.thrift.TBase<LoanRefundView, LoanRefundView._Fields>, java.io.Serializable, Cloneable, Comparable<LoanRefundView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanRefundView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTUAL_REFUND_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualRefundAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField REFUND_DIFFERENCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDifferenceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField REFUND_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REFUND_BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refundBankId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PAYABLE_REFUND_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("payableRefundAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REFUND_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refundUserId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REFUND_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("refundUserName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanRefundViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanRefundViewTupleSchemeFactory());
  }

  public int pid; // required
  public double actualRefundAmt; // required
  public double refundDifferenceAmt; // required
  public String refundDt; // required
  public String refundBankId; // required
  public String remark; // required
  public int projectId; // required
  public double payableRefundAmt; // required
  public int status; // required
  public int refundUserId; // required
  public String refundUserName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACTUAL_REFUND_AMT((short)2, "actualRefundAmt"),
    REFUND_DIFFERENCE_AMT((short)3, "refundDifferenceAmt"),
    REFUND_DT((short)4, "refundDt"),
    REFUND_BANK_ID((short)5, "refundBankId"),
    REMARK((short)6, "remark"),
    PROJECT_ID((short)7, "projectId"),
    PAYABLE_REFUND_AMT((short)8, "payableRefundAmt"),
    STATUS((short)9, "status"),
    REFUND_USER_ID((short)10, "refundUserId"),
    REFUND_USER_NAME((short)11, "refundUserName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACTUAL_REFUND_AMT
          return ACTUAL_REFUND_AMT;
        case 3: // REFUND_DIFFERENCE_AMT
          return REFUND_DIFFERENCE_AMT;
        case 4: // REFUND_DT
          return REFUND_DT;
        case 5: // REFUND_BANK_ID
          return REFUND_BANK_ID;
        case 6: // REMARK
          return REMARK;
        case 7: // PROJECT_ID
          return PROJECT_ID;
        case 8: // PAYABLE_REFUND_AMT
          return PAYABLE_REFUND_AMT;
        case 9: // STATUS
          return STATUS;
        case 10: // REFUND_USER_ID
          return REFUND_USER_ID;
        case 11: // REFUND_USER_NAME
          return REFUND_USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACTUALREFUNDAMT_ISSET_ID = 1;
  private static final int __REFUNDDIFFERENCEAMT_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private static final int __PAYABLEREFUNDAMT_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __REFUNDUSERID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_REFUND_AMT, new org.apache.thrift.meta_data.FieldMetaData("actualRefundAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_DIFFERENCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("refundDifferenceAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_DT, new org.apache.thrift.meta_data.FieldMetaData("refundDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("refundBankId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYABLE_REFUND_AMT, new org.apache.thrift.meta_data.FieldMetaData("payableRefundAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("refundUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("refundUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanRefundView.class, metaDataMap);
  }

  public LoanRefundView() {
  }

  public LoanRefundView(
    int pid,
    double actualRefundAmt,
    double refundDifferenceAmt,
    String refundDt,
    String refundBankId,
    String remark,
    int projectId,
    double payableRefundAmt,
    int status,
    int refundUserId,
    String refundUserName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.actualRefundAmt = actualRefundAmt;
    setActualRefundAmtIsSet(true);
    this.refundDifferenceAmt = refundDifferenceAmt;
    setRefundDifferenceAmtIsSet(true);
    this.refundDt = refundDt;
    this.refundBankId = refundBankId;
    this.remark = remark;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.payableRefundAmt = payableRefundAmt;
    setPayableRefundAmtIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.refundUserId = refundUserId;
    setRefundUserIdIsSet(true);
    this.refundUserName = refundUserName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanRefundView(LoanRefundView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.actualRefundAmt = other.actualRefundAmt;
    this.refundDifferenceAmt = other.refundDifferenceAmt;
    if (other.isSetRefundDt()) {
      this.refundDt = other.refundDt;
    }
    if (other.isSetRefundBankId()) {
      this.refundBankId = other.refundBankId;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.projectId = other.projectId;
    this.payableRefundAmt = other.payableRefundAmt;
    this.status = other.status;
    this.refundUserId = other.refundUserId;
    if (other.isSetRefundUserName()) {
      this.refundUserName = other.refundUserName;
    }
  }

  public LoanRefundView deepCopy() {
    return new LoanRefundView(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setActualRefundAmtIsSet(false);
    this.actualRefundAmt = 0.0;
    setRefundDifferenceAmtIsSet(false);
    this.refundDifferenceAmt = 0.0;
    this.refundDt = null;
    this.refundBankId = null;
    this.remark = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setPayableRefundAmtIsSet(false);
    this.payableRefundAmt = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    setRefundUserIdIsSet(false);
    this.refundUserId = 0;
    this.refundUserName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public LoanRefundView setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getActualRefundAmt() {
    return this.actualRefundAmt;
  }

  public LoanRefundView setActualRefundAmt(double actualRefundAmt) {
    this.actualRefundAmt = actualRefundAmt;
    setActualRefundAmtIsSet(true);
    return this;
  }

  public void unsetActualRefundAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALREFUNDAMT_ISSET_ID);
  }

  /** Returns true if field actualRefundAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualRefundAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALREFUNDAMT_ISSET_ID);
  }

  public void setActualRefundAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALREFUNDAMT_ISSET_ID, value);
  }

  public double getRefundDifferenceAmt() {
    return this.refundDifferenceAmt;
  }

  public LoanRefundView setRefundDifferenceAmt(double refundDifferenceAmt) {
    this.refundDifferenceAmt = refundDifferenceAmt;
    setRefundDifferenceAmtIsSet(true);
    return this;
  }

  public void unsetRefundDifferenceAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDDIFFERENCEAMT_ISSET_ID);
  }

  /** Returns true if field refundDifferenceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDifferenceAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDDIFFERENCEAMT_ISSET_ID);
  }

  public void setRefundDifferenceAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDDIFFERENCEAMT_ISSET_ID, value);
  }

  public String getRefundDt() {
    return this.refundDt;
  }

  public LoanRefundView setRefundDt(String refundDt) {
    this.refundDt = refundDt;
    return this;
  }

  public void unsetRefundDt() {
    this.refundDt = null;
  }

  /** Returns true if field refundDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDt() {
    return this.refundDt != null;
  }

  public void setRefundDtIsSet(boolean value) {
    if (!value) {
      this.refundDt = null;
    }
  }

  public String getRefundBankId() {
    return this.refundBankId;
  }

  public LoanRefundView setRefundBankId(String refundBankId) {
    this.refundBankId = refundBankId;
    return this;
  }

  public void unsetRefundBankId() {
    this.refundBankId = null;
  }

  /** Returns true if field refundBankId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundBankId() {
    return this.refundBankId != null;
  }

  public void setRefundBankIdIsSet(boolean value) {
    if (!value) {
      this.refundBankId = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public LoanRefundView setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public LoanRefundView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getPayableRefundAmt() {
    return this.payableRefundAmt;
  }

  public LoanRefundView setPayableRefundAmt(double payableRefundAmt) {
    this.payableRefundAmt = payableRefundAmt;
    setPayableRefundAmtIsSet(true);
    return this;
  }

  public void unsetPayableRefundAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYABLEREFUNDAMT_ISSET_ID);
  }

  /** Returns true if field payableRefundAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetPayableRefundAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYABLEREFUNDAMT_ISSET_ID);
  }

  public void setPayableRefundAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYABLEREFUNDAMT_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public LoanRefundView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getRefundUserId() {
    return this.refundUserId;
  }

  public LoanRefundView setRefundUserId(int refundUserId) {
    this.refundUserId = refundUserId;
    setRefundUserIdIsSet(true);
    return this;
  }

  public void unsetRefundUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDUSERID_ISSET_ID);
  }

  /** Returns true if field refundUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDUSERID_ISSET_ID);
  }

  public void setRefundUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDUSERID_ISSET_ID, value);
  }

  public String getRefundUserName() {
    return this.refundUserName;
  }

  public LoanRefundView setRefundUserName(String refundUserName) {
    this.refundUserName = refundUserName;
    return this;
  }

  public void unsetRefundUserName() {
    this.refundUserName = null;
  }

  /** Returns true if field refundUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundUserName() {
    return this.refundUserName != null;
  }

  public void setRefundUserNameIsSet(boolean value) {
    if (!value) {
      this.refundUserName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACTUAL_REFUND_AMT:
      if (value == null) {
        unsetActualRefundAmt();
      } else {
        setActualRefundAmt((Double)value);
      }
      break;

    case REFUND_DIFFERENCE_AMT:
      if (value == null) {
        unsetRefundDifferenceAmt();
      } else {
        setRefundDifferenceAmt((Double)value);
      }
      break;

    case REFUND_DT:
      if (value == null) {
        unsetRefundDt();
      } else {
        setRefundDt((String)value);
      }
      break;

    case REFUND_BANK_ID:
      if (value == null) {
        unsetRefundBankId();
      } else {
        setRefundBankId((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PAYABLE_REFUND_AMT:
      if (value == null) {
        unsetPayableRefundAmt();
      } else {
        setPayableRefundAmt((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REFUND_USER_ID:
      if (value == null) {
        unsetRefundUserId();
      } else {
        setRefundUserId((Integer)value);
      }
      break;

    case REFUND_USER_NAME:
      if (value == null) {
        unsetRefundUserName();
      } else {
        setRefundUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACTUAL_REFUND_AMT:
      return Double.valueOf(getActualRefundAmt());

    case REFUND_DIFFERENCE_AMT:
      return Double.valueOf(getRefundDifferenceAmt());

    case REFUND_DT:
      return getRefundDt();

    case REFUND_BANK_ID:
      return getRefundBankId();

    case REMARK:
      return getRemark();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PAYABLE_REFUND_AMT:
      return Double.valueOf(getPayableRefundAmt());

    case STATUS:
      return Integer.valueOf(getStatus());

    case REFUND_USER_ID:
      return Integer.valueOf(getRefundUserId());

    case REFUND_USER_NAME:
      return getRefundUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACTUAL_REFUND_AMT:
      return isSetActualRefundAmt();
    case REFUND_DIFFERENCE_AMT:
      return isSetRefundDifferenceAmt();
    case REFUND_DT:
      return isSetRefundDt();
    case REFUND_BANK_ID:
      return isSetRefundBankId();
    case REMARK:
      return isSetRemark();
    case PROJECT_ID:
      return isSetProjectId();
    case PAYABLE_REFUND_AMT:
      return isSetPayableRefundAmt();
    case STATUS:
      return isSetStatus();
    case REFUND_USER_ID:
      return isSetRefundUserId();
    case REFUND_USER_NAME:
      return isSetRefundUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanRefundView)
      return this.equals((LoanRefundView)that);
    return false;
  }

  public boolean equals(LoanRefundView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_actualRefundAmt = true;
    boolean that_present_actualRefundAmt = true;
    if (this_present_actualRefundAmt || that_present_actualRefundAmt) {
      if (!(this_present_actualRefundAmt && that_present_actualRefundAmt))
        return false;
      if (this.actualRefundAmt != that.actualRefundAmt)
        return false;
    }

    boolean this_present_refundDifferenceAmt = true;
    boolean that_present_refundDifferenceAmt = true;
    if (this_present_refundDifferenceAmt || that_present_refundDifferenceAmt) {
      if (!(this_present_refundDifferenceAmt && that_present_refundDifferenceAmt))
        return false;
      if (this.refundDifferenceAmt != that.refundDifferenceAmt)
        return false;
    }

    boolean this_present_refundDt = true && this.isSetRefundDt();
    boolean that_present_refundDt = true && that.isSetRefundDt();
    if (this_present_refundDt || that_present_refundDt) {
      if (!(this_present_refundDt && that_present_refundDt))
        return false;
      if (!this.refundDt.equals(that.refundDt))
        return false;
    }

    boolean this_present_refundBankId = true && this.isSetRefundBankId();
    boolean that_present_refundBankId = true && that.isSetRefundBankId();
    if (this_present_refundBankId || that_present_refundBankId) {
      if (!(this_present_refundBankId && that_present_refundBankId))
        return false;
      if (!this.refundBankId.equals(that.refundBankId))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_payableRefundAmt = true;
    boolean that_present_payableRefundAmt = true;
    if (this_present_payableRefundAmt || that_present_payableRefundAmt) {
      if (!(this_present_payableRefundAmt && that_present_payableRefundAmt))
        return false;
      if (this.payableRefundAmt != that.payableRefundAmt)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_refundUserId = true;
    boolean that_present_refundUserId = true;
    if (this_present_refundUserId || that_present_refundUserId) {
      if (!(this_present_refundUserId && that_present_refundUserId))
        return false;
      if (this.refundUserId != that.refundUserId)
        return false;
    }

    boolean this_present_refundUserName = true && this.isSetRefundUserName();
    boolean that_present_refundUserName = true && that.isSetRefundUserName();
    if (this_present_refundUserName || that_present_refundUserName) {
      if (!(this_present_refundUserName && that_present_refundUserName))
        return false;
      if (!this.refundUserName.equals(that.refundUserName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_actualRefundAmt = true;
    list.add(present_actualRefundAmt);
    if (present_actualRefundAmt)
      list.add(actualRefundAmt);

    boolean present_refundDifferenceAmt = true;
    list.add(present_refundDifferenceAmt);
    if (present_refundDifferenceAmt)
      list.add(refundDifferenceAmt);

    boolean present_refundDt = true && (isSetRefundDt());
    list.add(present_refundDt);
    if (present_refundDt)
      list.add(refundDt);

    boolean present_refundBankId = true && (isSetRefundBankId());
    list.add(present_refundBankId);
    if (present_refundBankId)
      list.add(refundBankId);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_payableRefundAmt = true;
    list.add(present_payableRefundAmt);
    if (present_payableRefundAmt)
      list.add(payableRefundAmt);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_refundUserId = true;
    list.add(present_refundUserId);
    if (present_refundUserId)
      list.add(refundUserId);

    boolean present_refundUserName = true && (isSetRefundUserName());
    list.add(present_refundUserName);
    if (present_refundUserName)
      list.add(refundUserName);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanRefundView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualRefundAmt()).compareTo(other.isSetActualRefundAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualRefundAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualRefundAmt, other.actualRefundAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDifferenceAmt()).compareTo(other.isSetRefundDifferenceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDifferenceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDifferenceAmt, other.refundDifferenceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDt()).compareTo(other.isSetRefundDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDt, other.refundDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundBankId()).compareTo(other.isSetRefundBankId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundBankId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundBankId, other.refundBankId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayableRefundAmt()).compareTo(other.isSetPayableRefundAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayableRefundAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payableRefundAmt, other.payableRefundAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundUserId()).compareTo(other.isSetRefundUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundUserId, other.refundUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundUserName()).compareTo(other.isSetRefundUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundUserName, other.refundUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanRefundView(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualRefundAmt:");
    sb.append(this.actualRefundAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDifferenceAmt:");
    sb.append(this.refundDifferenceAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDt:");
    if (this.refundDt == null) {
      sb.append("null");
    } else {
      sb.append(this.refundDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundBankId:");
    if (this.refundBankId == null) {
      sb.append("null");
    } else {
      sb.append(this.refundBankId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payableRefundAmt:");
    sb.append(this.payableRefundAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundUserId:");
    sb.append(this.refundUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundUserName:");
    if (this.refundUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.refundUserName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanRefundViewStandardSchemeFactory implements SchemeFactory {
    public LoanRefundViewStandardScheme getScheme() {
      return new LoanRefundViewStandardScheme();
    }
  }

  private static class LoanRefundViewStandardScheme extends StandardScheme<LoanRefundView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanRefundView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTUAL_REFUND_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualRefundAmt = iprot.readDouble();
              struct.setActualRefundAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REFUND_DIFFERENCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundDifferenceAmt = iprot.readDouble();
              struct.setRefundDifferenceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFUND_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundDt = iprot.readString();
              struct.setRefundDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFUND_BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundBankId = iprot.readString();
              struct.setRefundBankIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAYABLE_REFUND_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payableRefundAmt = iprot.readDouble();
              struct.setPayableRefundAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REFUND_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundUserId = iprot.readI32();
              struct.setRefundUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REFUND_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundUserName = iprot.readString();
              struct.setRefundUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanRefundView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_REFUND_AMT_FIELD_DESC);
      oprot.writeDouble(struct.actualRefundAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_DIFFERENCE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.refundDifferenceAmt);
      oprot.writeFieldEnd();
      if (struct.refundDt != null) {
        oprot.writeFieldBegin(REFUND_DT_FIELD_DESC);
        oprot.writeString(struct.refundDt);
        oprot.writeFieldEnd();
      }
      if (struct.refundBankId != null) {
        oprot.writeFieldBegin(REFUND_BANK_ID_FIELD_DESC);
        oprot.writeString(struct.refundBankId);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYABLE_REFUND_AMT_FIELD_DESC);
      oprot.writeDouble(struct.payableRefundAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.refundUserId);
      oprot.writeFieldEnd();
      if (struct.refundUserName != null) {
        oprot.writeFieldBegin(REFUND_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.refundUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanRefundViewTupleSchemeFactory implements SchemeFactory {
    public LoanRefundViewTupleScheme getScheme() {
      return new LoanRefundViewTupleScheme();
    }
  }

  private static class LoanRefundViewTupleScheme extends TupleScheme<LoanRefundView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanRefundView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetActualRefundAmt()) {
        optionals.set(1);
      }
      if (struct.isSetRefundDifferenceAmt()) {
        optionals.set(2);
      }
      if (struct.isSetRefundDt()) {
        optionals.set(3);
      }
      if (struct.isSetRefundBankId()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetProjectId()) {
        optionals.set(6);
      }
      if (struct.isSetPayableRefundAmt()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetRefundUserId()) {
        optionals.set(9);
      }
      if (struct.isSetRefundUserName()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetActualRefundAmt()) {
        oprot.writeDouble(struct.actualRefundAmt);
      }
      if (struct.isSetRefundDifferenceAmt()) {
        oprot.writeDouble(struct.refundDifferenceAmt);
      }
      if (struct.isSetRefundDt()) {
        oprot.writeString(struct.refundDt);
      }
      if (struct.isSetRefundBankId()) {
        oprot.writeString(struct.refundBankId);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetPayableRefundAmt()) {
        oprot.writeDouble(struct.payableRefundAmt);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRefundUserId()) {
        oprot.writeI32(struct.refundUserId);
      }
      if (struct.isSetRefundUserName()) {
        oprot.writeString(struct.refundUserName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanRefundView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.actualRefundAmt = iprot.readDouble();
        struct.setActualRefundAmtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refundDifferenceAmt = iprot.readDouble();
        struct.setRefundDifferenceAmtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refundDt = iprot.readString();
        struct.setRefundDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refundBankId = iprot.readString();
        struct.setRefundBankIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.payableRefundAmt = iprot.readDouble();
        struct.setPayableRefundAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.refundUserId = iprot.readI32();
        struct.setRefundUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.refundUserName = iprot.readString();
        struct.setRefundUserNameIsSet(true);
      }
    }
  }

}


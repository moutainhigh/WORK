/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class AdvapplyRepaymentView implements org.apache.thrift.TBase<AdvapplyRepaymentView, AdvapplyRepaymentView._Fields>, java.io.Serializable, Cloneable, Comparable<AdvapplyRepaymentView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdvapplyRepaymentView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("principalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField OVERDUE_LOANMT_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueLoanmt", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFineAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SHOULD_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SHOULD_OTHER_COST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOtherCostName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHOULD_TOTAIL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldTotailAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField HAS_RECEIVE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasReceiveAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField RECEIVE_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveDt", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField NO_RECEIVE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("noReceiveAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField IS_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconciliation", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdvapplyRepaymentViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdvapplyRepaymentViewTupleSchemeFactory());
  }

  public String pId; // required
  public String planRepayDt; // required
  public int planCycleNum; // required
  public double shouldPrincipal; // required
  public double shouldMangCost; // required
  public double shouldInterest; // required
  public double total; // required
  public double principalBalance; // required
  public double overdueLoanmt; // required
  public double overdueFineAmt; // required
  public double shouldOtherCost; // required
  public String shouldOtherCostName; // required
  public double shouldTotailAmt; // required
  public double hasReceiveAmt; // required
  public String receiveDt; // required
  public double noReceiveAmt; // required
  public int isReconciliation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    PLAN_REPAY_DT((short)2, "planRepayDt"),
    PLAN_CYCLE_NUM((short)3, "planCycleNum"),
    SHOULD_PRINCIPAL((short)4, "shouldPrincipal"),
    SHOULD_MANG_COST((short)5, "shouldMangCost"),
    SHOULD_INTEREST((short)6, "shouldInterest"),
    TOTAL((short)7, "total"),
    PRINCIPAL_BALANCE((short)8, "principalBalance"),
    OVERDUE_LOANMT((short)9, "overdueLoanmt"),
    OVERDUE_FINE_AMT((short)10, "overdueFineAmt"),
    SHOULD_OTHER_COST((short)11, "shouldOtherCost"),
    SHOULD_OTHER_COST_NAME((short)12, "shouldOtherCostName"),
    SHOULD_TOTAIL_AMT((short)13, "shouldTotailAmt"),
    HAS_RECEIVE_AMT((short)14, "hasReceiveAmt"),
    RECEIVE_DT((short)15, "receiveDt"),
    NO_RECEIVE_AMT((short)16, "noReceiveAmt"),
    IS_RECONCILIATION((short)17, "isReconciliation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // PLAN_REPAY_DT
          return PLAN_REPAY_DT;
        case 3: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 4: // SHOULD_PRINCIPAL
          return SHOULD_PRINCIPAL;
        case 5: // SHOULD_MANG_COST
          return SHOULD_MANG_COST;
        case 6: // SHOULD_INTEREST
          return SHOULD_INTEREST;
        case 7: // TOTAL
          return TOTAL;
        case 8: // PRINCIPAL_BALANCE
          return PRINCIPAL_BALANCE;
        case 9: // OVERDUE_LOANMT
          return OVERDUE_LOANMT;
        case 10: // OVERDUE_FINE_AMT
          return OVERDUE_FINE_AMT;
        case 11: // SHOULD_OTHER_COST
          return SHOULD_OTHER_COST;
        case 12: // SHOULD_OTHER_COST_NAME
          return SHOULD_OTHER_COST_NAME;
        case 13: // SHOULD_TOTAIL_AMT
          return SHOULD_TOTAIL_AMT;
        case 14: // HAS_RECEIVE_AMT
          return HAS_RECEIVE_AMT;
        case 15: // RECEIVE_DT
          return RECEIVE_DT;
        case 16: // NO_RECEIVE_AMT
          return NO_RECEIVE_AMT;
        case 17: // IS_RECONCILIATION
          return IS_RECONCILIATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLANCYCLENUM_ISSET_ID = 0;
  private static final int __SHOULDPRINCIPAL_ISSET_ID = 1;
  private static final int __SHOULDMANGCOST_ISSET_ID = 2;
  private static final int __SHOULDINTEREST_ISSET_ID = 3;
  private static final int __TOTAL_ISSET_ID = 4;
  private static final int __PRINCIPALBALANCE_ISSET_ID = 5;
  private static final int __OVERDUELOANMT_ISSET_ID = 6;
  private static final int __OVERDUEFINEAMT_ISSET_ID = 7;
  private static final int __SHOULDOTHERCOST_ISSET_ID = 8;
  private static final int __SHOULDTOTAILAMT_ISSET_ID = 9;
  private static final int __HASRECEIVEAMT_ISSET_ID = 10;
  private static final int __NORECEIVEAMT_ISSET_ID = 11;
  private static final int __ISRECONCILIATION_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("shouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("principalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_LOANMT, new org.apache.thrift.meta_data.FieldMetaData("overdueLoanmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FINE_AMT, new org.apache.thrift.meta_data.FieldMetaData("overdueFineAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OTHER_COST_NAME, new org.apache.thrift.meta_data.FieldMetaData("shouldOtherCostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_TOTAIL_AMT, new org.apache.thrift.meta_data.FieldMetaData("shouldTotailAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HAS_RECEIVE_AMT, new org.apache.thrift.meta_data.FieldMetaData("hasReceiveAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVE_DT, new org.apache.thrift.meta_data.FieldMetaData("receiveDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO_RECEIVE_AMT, new org.apache.thrift.meta_data.FieldMetaData("noReceiveAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("isReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdvapplyRepaymentView.class, metaDataMap);
  }

  public AdvapplyRepaymentView() {
  }

  public AdvapplyRepaymentView(
    String pId,
    String planRepayDt,
    int planCycleNum,
    double shouldPrincipal,
    double shouldMangCost,
    double shouldInterest,
    double total,
    double principalBalance,
    double overdueLoanmt,
    double overdueFineAmt,
    double shouldOtherCost,
    String shouldOtherCostName,
    double shouldTotailAmt,
    double hasReceiveAmt,
    String receiveDt,
    double noReceiveAmt,
    int isReconciliation)
  {
    this();
    this.pId = pId;
    this.planRepayDt = planRepayDt;
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    this.overdueLoanmt = overdueLoanmt;
    setOverdueLoanmtIsSet(true);
    this.overdueFineAmt = overdueFineAmt;
    setOverdueFineAmtIsSet(true);
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    this.shouldOtherCostName = shouldOtherCostName;
    this.shouldTotailAmt = shouldTotailAmt;
    setShouldTotailAmtIsSet(true);
    this.hasReceiveAmt = hasReceiveAmt;
    setHasReceiveAmtIsSet(true);
    this.receiveDt = receiveDt;
    this.noReceiveAmt = noReceiveAmt;
    setNoReceiveAmtIsSet(true);
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdvapplyRepaymentView(AdvapplyRepaymentView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    if (other.isSetPlanRepayDt()) {
      this.planRepayDt = other.planRepayDt;
    }
    this.planCycleNum = other.planCycleNum;
    this.shouldPrincipal = other.shouldPrincipal;
    this.shouldMangCost = other.shouldMangCost;
    this.shouldInterest = other.shouldInterest;
    this.total = other.total;
    this.principalBalance = other.principalBalance;
    this.overdueLoanmt = other.overdueLoanmt;
    this.overdueFineAmt = other.overdueFineAmt;
    this.shouldOtherCost = other.shouldOtherCost;
    if (other.isSetShouldOtherCostName()) {
      this.shouldOtherCostName = other.shouldOtherCostName;
    }
    this.shouldTotailAmt = other.shouldTotailAmt;
    this.hasReceiveAmt = other.hasReceiveAmt;
    if (other.isSetReceiveDt()) {
      this.receiveDt = other.receiveDt;
    }
    this.noReceiveAmt = other.noReceiveAmt;
    this.isReconciliation = other.isReconciliation;
  }

  public AdvapplyRepaymentView deepCopy() {
    return new AdvapplyRepaymentView(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    this.planRepayDt = null;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    setShouldPrincipalIsSet(false);
    this.shouldPrincipal = 0.0;
    setShouldMangCostIsSet(false);
    this.shouldMangCost = 0.0;
    setShouldInterestIsSet(false);
    this.shouldInterest = 0.0;
    setTotalIsSet(false);
    this.total = 0.0;
    setPrincipalBalanceIsSet(false);
    this.principalBalance = 0.0;
    setOverdueLoanmtIsSet(false);
    this.overdueLoanmt = 0.0;
    setOverdueFineAmtIsSet(false);
    this.overdueFineAmt = 0.0;
    setShouldOtherCostIsSet(false);
    this.shouldOtherCost = 0.0;
    this.shouldOtherCostName = null;
    setShouldTotailAmtIsSet(false);
    this.shouldTotailAmt = 0.0;
    setHasReceiveAmtIsSet(false);
    this.hasReceiveAmt = 0.0;
    this.receiveDt = null;
    setNoReceiveAmtIsSet(false);
    this.noReceiveAmt = 0.0;
    setIsReconciliationIsSet(false);
    this.isReconciliation = 0;
  }

  public String getPId() {
    return this.pId;
  }

  public AdvapplyRepaymentView setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public String getPlanRepayDt() {
    return this.planRepayDt;
  }

  public AdvapplyRepaymentView setPlanRepayDt(String planRepayDt) {
    this.planRepayDt = planRepayDt;
    return this;
  }

  public void unsetPlanRepayDt() {
    this.planRepayDt = null;
  }

  /** Returns true if field planRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDt() {
    return this.planRepayDt != null;
  }

  public void setPlanRepayDtIsSet(boolean value) {
    if (!value) {
      this.planRepayDt = null;
    }
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public AdvapplyRepaymentView setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public double getShouldPrincipal() {
    return this.shouldPrincipal;
  }

  public AdvapplyRepaymentView setShouldPrincipal(double shouldPrincipal) {
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    return this;
  }

  public void unsetShouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field shouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  public void setShouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getShouldMangCost() {
    return this.shouldMangCost;
  }

  public AdvapplyRepaymentView setShouldMangCost(double shouldMangCost) {
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    return this;
  }

  public void unsetShouldMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  /** Returns true if field shouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  public void setShouldMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID, value);
  }

  public double getShouldInterest() {
    return this.shouldInterest;
  }

  public AdvapplyRepaymentView setShouldInterest(double shouldInterest) {
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    return this;
  }

  public void unsetShouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field shouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  public void setShouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID, value);
  }

  public double getTotal() {
    return this.total;
  }

  public AdvapplyRepaymentView setTotal(double total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public double getPrincipalBalance() {
    return this.principalBalance;
  }

  public AdvapplyRepaymentView setPrincipalBalance(double principalBalance) {
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    return this;
  }

  public void unsetPrincipalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  /** Returns true if field principalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  public void setPrincipalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID, value);
  }

  public double getOverdueLoanmt() {
    return this.overdueLoanmt;
  }

  public AdvapplyRepaymentView setOverdueLoanmt(double overdueLoanmt) {
    this.overdueLoanmt = overdueLoanmt;
    setOverdueLoanmtIsSet(true);
    return this;
  }

  public void unsetOverdueLoanmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUELOANMT_ISSET_ID);
  }

  /** Returns true if field overdueLoanmt is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueLoanmt() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUELOANMT_ISSET_ID);
  }

  public void setOverdueLoanmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUELOANMT_ISSET_ID, value);
  }

  public double getOverdueFineAmt() {
    return this.overdueFineAmt;
  }

  public AdvapplyRepaymentView setOverdueFineAmt(double overdueFineAmt) {
    this.overdueFineAmt = overdueFineAmt;
    setOverdueFineAmtIsSet(true);
    return this;
  }

  public void unsetOverdueFineAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINEAMT_ISSET_ID);
  }

  /** Returns true if field overdueFineAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFineAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINEAMT_ISSET_ID);
  }

  public void setOverdueFineAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINEAMT_ISSET_ID, value);
  }

  public double getShouldOtherCost() {
    return this.shouldOtherCost;
  }

  public AdvapplyRepaymentView setShouldOtherCost(double shouldOtherCost) {
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    return this;
  }

  public void unsetShouldOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field shouldOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  public void setShouldOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID, value);
  }

  public String getShouldOtherCostName() {
    return this.shouldOtherCostName;
  }

  public AdvapplyRepaymentView setShouldOtherCostName(String shouldOtherCostName) {
    this.shouldOtherCostName = shouldOtherCostName;
    return this;
  }

  public void unsetShouldOtherCostName() {
    this.shouldOtherCostName = null;
  }

  /** Returns true if field shouldOtherCostName is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOtherCostName() {
    return this.shouldOtherCostName != null;
  }

  public void setShouldOtherCostNameIsSet(boolean value) {
    if (!value) {
      this.shouldOtherCostName = null;
    }
  }

  public double getShouldTotailAmt() {
    return this.shouldTotailAmt;
  }

  public AdvapplyRepaymentView setShouldTotailAmt(double shouldTotailAmt) {
    this.shouldTotailAmt = shouldTotailAmt;
    setShouldTotailAmtIsSet(true);
    return this;
  }

  public void unsetShouldTotailAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDTOTAILAMT_ISSET_ID);
  }

  /** Returns true if field shouldTotailAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldTotailAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDTOTAILAMT_ISSET_ID);
  }

  public void setShouldTotailAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDTOTAILAMT_ISSET_ID, value);
  }

  public double getHasReceiveAmt() {
    return this.hasReceiveAmt;
  }

  public AdvapplyRepaymentView setHasReceiveAmt(double hasReceiveAmt) {
    this.hasReceiveAmt = hasReceiveAmt;
    setHasReceiveAmtIsSet(true);
    return this;
  }

  public void unsetHasReceiveAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASRECEIVEAMT_ISSET_ID);
  }

  /** Returns true if field hasReceiveAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetHasReceiveAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __HASRECEIVEAMT_ISSET_ID);
  }

  public void setHasReceiveAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASRECEIVEAMT_ISSET_ID, value);
  }

  public String getReceiveDt() {
    return this.receiveDt;
  }

  public AdvapplyRepaymentView setReceiveDt(String receiveDt) {
    this.receiveDt = receiveDt;
    return this;
  }

  public void unsetReceiveDt() {
    this.receiveDt = null;
  }

  /** Returns true if field receiveDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveDt() {
    return this.receiveDt != null;
  }

  public void setReceiveDtIsSet(boolean value) {
    if (!value) {
      this.receiveDt = null;
    }
  }

  public double getNoReceiveAmt() {
    return this.noReceiveAmt;
  }

  public AdvapplyRepaymentView setNoReceiveAmt(double noReceiveAmt) {
    this.noReceiveAmt = noReceiveAmt;
    setNoReceiveAmtIsSet(true);
    return this;
  }

  public void unsetNoReceiveAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORECEIVEAMT_ISSET_ID);
  }

  /** Returns true if field noReceiveAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetNoReceiveAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __NORECEIVEAMT_ISSET_ID);
  }

  public void setNoReceiveAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORECEIVEAMT_ISSET_ID, value);
  }

  public int getIsReconciliation() {
    return this.isReconciliation;
  }

  public AdvapplyRepaymentView setIsReconciliation(int isReconciliation) {
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    return this;
  }

  public void unsetIsReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  /** Returns true if field isReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  public void setIsReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case PLAN_REPAY_DT:
      if (value == null) {
        unsetPlanRepayDt();
      } else {
        setPlanRepayDt((String)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case SHOULD_PRINCIPAL:
      if (value == null) {
        unsetShouldPrincipal();
      } else {
        setShouldPrincipal((Double)value);
      }
      break;

    case SHOULD_MANG_COST:
      if (value == null) {
        unsetShouldMangCost();
      } else {
        setShouldMangCost((Double)value);
      }
      break;

    case SHOULD_INTEREST:
      if (value == null) {
        unsetShouldInterest();
      } else {
        setShouldInterest((Double)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Double)value);
      }
      break;

    case PRINCIPAL_BALANCE:
      if (value == null) {
        unsetPrincipalBalance();
      } else {
        setPrincipalBalance((Double)value);
      }
      break;

    case OVERDUE_LOANMT:
      if (value == null) {
        unsetOverdueLoanmt();
      } else {
        setOverdueLoanmt((Double)value);
      }
      break;

    case OVERDUE_FINE_AMT:
      if (value == null) {
        unsetOverdueFineAmt();
      } else {
        setOverdueFineAmt((Double)value);
      }
      break;

    case SHOULD_OTHER_COST:
      if (value == null) {
        unsetShouldOtherCost();
      } else {
        setShouldOtherCost((Double)value);
      }
      break;

    case SHOULD_OTHER_COST_NAME:
      if (value == null) {
        unsetShouldOtherCostName();
      } else {
        setShouldOtherCostName((String)value);
      }
      break;

    case SHOULD_TOTAIL_AMT:
      if (value == null) {
        unsetShouldTotailAmt();
      } else {
        setShouldTotailAmt((Double)value);
      }
      break;

    case HAS_RECEIVE_AMT:
      if (value == null) {
        unsetHasReceiveAmt();
      } else {
        setHasReceiveAmt((Double)value);
      }
      break;

    case RECEIVE_DT:
      if (value == null) {
        unsetReceiveDt();
      } else {
        setReceiveDt((String)value);
      }
      break;

    case NO_RECEIVE_AMT:
      if (value == null) {
        unsetNoReceiveAmt();
      } else {
        setNoReceiveAmt((Double)value);
      }
      break;

    case IS_RECONCILIATION:
      if (value == null) {
        unsetIsReconciliation();
      } else {
        setIsReconciliation((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case PLAN_REPAY_DT:
      return getPlanRepayDt();

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case SHOULD_PRINCIPAL:
      return Double.valueOf(getShouldPrincipal());

    case SHOULD_MANG_COST:
      return Double.valueOf(getShouldMangCost());

    case SHOULD_INTEREST:
      return Double.valueOf(getShouldInterest());

    case TOTAL:
      return Double.valueOf(getTotal());

    case PRINCIPAL_BALANCE:
      return Double.valueOf(getPrincipalBalance());

    case OVERDUE_LOANMT:
      return Double.valueOf(getOverdueLoanmt());

    case OVERDUE_FINE_AMT:
      return Double.valueOf(getOverdueFineAmt());

    case SHOULD_OTHER_COST:
      return Double.valueOf(getShouldOtherCost());

    case SHOULD_OTHER_COST_NAME:
      return getShouldOtherCostName();

    case SHOULD_TOTAIL_AMT:
      return Double.valueOf(getShouldTotailAmt());

    case HAS_RECEIVE_AMT:
      return Double.valueOf(getHasReceiveAmt());

    case RECEIVE_DT:
      return getReceiveDt();

    case NO_RECEIVE_AMT:
      return Double.valueOf(getNoReceiveAmt());

    case IS_RECONCILIATION:
      return Integer.valueOf(getIsReconciliation());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case PLAN_REPAY_DT:
      return isSetPlanRepayDt();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case SHOULD_PRINCIPAL:
      return isSetShouldPrincipal();
    case SHOULD_MANG_COST:
      return isSetShouldMangCost();
    case SHOULD_INTEREST:
      return isSetShouldInterest();
    case TOTAL:
      return isSetTotal();
    case PRINCIPAL_BALANCE:
      return isSetPrincipalBalance();
    case OVERDUE_LOANMT:
      return isSetOverdueLoanmt();
    case OVERDUE_FINE_AMT:
      return isSetOverdueFineAmt();
    case SHOULD_OTHER_COST:
      return isSetShouldOtherCost();
    case SHOULD_OTHER_COST_NAME:
      return isSetShouldOtherCostName();
    case SHOULD_TOTAIL_AMT:
      return isSetShouldTotailAmt();
    case HAS_RECEIVE_AMT:
      return isSetHasReceiveAmt();
    case RECEIVE_DT:
      return isSetReceiveDt();
    case NO_RECEIVE_AMT:
      return isSetNoReceiveAmt();
    case IS_RECONCILIATION:
      return isSetIsReconciliation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdvapplyRepaymentView)
      return this.equals((AdvapplyRepaymentView)that);
    return false;
  }

  public boolean equals(AdvapplyRepaymentView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_planRepayDt = true && this.isSetPlanRepayDt();
    boolean that_present_planRepayDt = true && that.isSetPlanRepayDt();
    if (this_present_planRepayDt || that_present_planRepayDt) {
      if (!(this_present_planRepayDt && that_present_planRepayDt))
        return false;
      if (!this.planRepayDt.equals(that.planRepayDt))
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_shouldPrincipal = true;
    boolean that_present_shouldPrincipal = true;
    if (this_present_shouldPrincipal || that_present_shouldPrincipal) {
      if (!(this_present_shouldPrincipal && that_present_shouldPrincipal))
        return false;
      if (this.shouldPrincipal != that.shouldPrincipal)
        return false;
    }

    boolean this_present_shouldMangCost = true;
    boolean that_present_shouldMangCost = true;
    if (this_present_shouldMangCost || that_present_shouldMangCost) {
      if (!(this_present_shouldMangCost && that_present_shouldMangCost))
        return false;
      if (this.shouldMangCost != that.shouldMangCost)
        return false;
    }

    boolean this_present_shouldInterest = true;
    boolean that_present_shouldInterest = true;
    if (this_present_shouldInterest || that_present_shouldInterest) {
      if (!(this_present_shouldInterest && that_present_shouldInterest))
        return false;
      if (this.shouldInterest != that.shouldInterest)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_principalBalance = true;
    boolean that_present_principalBalance = true;
    if (this_present_principalBalance || that_present_principalBalance) {
      if (!(this_present_principalBalance && that_present_principalBalance))
        return false;
      if (this.principalBalance != that.principalBalance)
        return false;
    }

    boolean this_present_overdueLoanmt = true;
    boolean that_present_overdueLoanmt = true;
    if (this_present_overdueLoanmt || that_present_overdueLoanmt) {
      if (!(this_present_overdueLoanmt && that_present_overdueLoanmt))
        return false;
      if (this.overdueLoanmt != that.overdueLoanmt)
        return false;
    }

    boolean this_present_overdueFineAmt = true;
    boolean that_present_overdueFineAmt = true;
    if (this_present_overdueFineAmt || that_present_overdueFineAmt) {
      if (!(this_present_overdueFineAmt && that_present_overdueFineAmt))
        return false;
      if (this.overdueFineAmt != that.overdueFineAmt)
        return false;
    }

    boolean this_present_shouldOtherCost = true;
    boolean that_present_shouldOtherCost = true;
    if (this_present_shouldOtherCost || that_present_shouldOtherCost) {
      if (!(this_present_shouldOtherCost && that_present_shouldOtherCost))
        return false;
      if (this.shouldOtherCost != that.shouldOtherCost)
        return false;
    }

    boolean this_present_shouldOtherCostName = true && this.isSetShouldOtherCostName();
    boolean that_present_shouldOtherCostName = true && that.isSetShouldOtherCostName();
    if (this_present_shouldOtherCostName || that_present_shouldOtherCostName) {
      if (!(this_present_shouldOtherCostName && that_present_shouldOtherCostName))
        return false;
      if (!this.shouldOtherCostName.equals(that.shouldOtherCostName))
        return false;
    }

    boolean this_present_shouldTotailAmt = true;
    boolean that_present_shouldTotailAmt = true;
    if (this_present_shouldTotailAmt || that_present_shouldTotailAmt) {
      if (!(this_present_shouldTotailAmt && that_present_shouldTotailAmt))
        return false;
      if (this.shouldTotailAmt != that.shouldTotailAmt)
        return false;
    }

    boolean this_present_hasReceiveAmt = true;
    boolean that_present_hasReceiveAmt = true;
    if (this_present_hasReceiveAmt || that_present_hasReceiveAmt) {
      if (!(this_present_hasReceiveAmt && that_present_hasReceiveAmt))
        return false;
      if (this.hasReceiveAmt != that.hasReceiveAmt)
        return false;
    }

    boolean this_present_receiveDt = true && this.isSetReceiveDt();
    boolean that_present_receiveDt = true && that.isSetReceiveDt();
    if (this_present_receiveDt || that_present_receiveDt) {
      if (!(this_present_receiveDt && that_present_receiveDt))
        return false;
      if (!this.receiveDt.equals(that.receiveDt))
        return false;
    }

    boolean this_present_noReceiveAmt = true;
    boolean that_present_noReceiveAmt = true;
    if (this_present_noReceiveAmt || that_present_noReceiveAmt) {
      if (!(this_present_noReceiveAmt && that_present_noReceiveAmt))
        return false;
      if (this.noReceiveAmt != that.noReceiveAmt)
        return false;
    }

    boolean this_present_isReconciliation = true;
    boolean that_present_isReconciliation = true;
    if (this_present_isReconciliation || that_present_isReconciliation) {
      if (!(this_present_isReconciliation && that_present_isReconciliation))
        return false;
      if (this.isReconciliation != that.isReconciliation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_planRepayDt = true && (isSetPlanRepayDt());
    list.add(present_planRepayDt);
    if (present_planRepayDt)
      list.add(planRepayDt);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_shouldPrincipal = true;
    list.add(present_shouldPrincipal);
    if (present_shouldPrincipal)
      list.add(shouldPrincipal);

    boolean present_shouldMangCost = true;
    list.add(present_shouldMangCost);
    if (present_shouldMangCost)
      list.add(shouldMangCost);

    boolean present_shouldInterest = true;
    list.add(present_shouldInterest);
    if (present_shouldInterest)
      list.add(shouldInterest);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_principalBalance = true;
    list.add(present_principalBalance);
    if (present_principalBalance)
      list.add(principalBalance);

    boolean present_overdueLoanmt = true;
    list.add(present_overdueLoanmt);
    if (present_overdueLoanmt)
      list.add(overdueLoanmt);

    boolean present_overdueFineAmt = true;
    list.add(present_overdueFineAmt);
    if (present_overdueFineAmt)
      list.add(overdueFineAmt);

    boolean present_shouldOtherCost = true;
    list.add(present_shouldOtherCost);
    if (present_shouldOtherCost)
      list.add(shouldOtherCost);

    boolean present_shouldOtherCostName = true && (isSetShouldOtherCostName());
    list.add(present_shouldOtherCostName);
    if (present_shouldOtherCostName)
      list.add(shouldOtherCostName);

    boolean present_shouldTotailAmt = true;
    list.add(present_shouldTotailAmt);
    if (present_shouldTotailAmt)
      list.add(shouldTotailAmt);

    boolean present_hasReceiveAmt = true;
    list.add(present_hasReceiveAmt);
    if (present_hasReceiveAmt)
      list.add(hasReceiveAmt);

    boolean present_receiveDt = true && (isSetReceiveDt());
    list.add(present_receiveDt);
    if (present_receiveDt)
      list.add(receiveDt);

    boolean present_noReceiveAmt = true;
    list.add(present_noReceiveAmt);
    if (present_noReceiveAmt)
      list.add(noReceiveAmt);

    boolean present_isReconciliation = true;
    list.add(present_isReconciliation);
    if (present_isReconciliation)
      list.add(isReconciliation);

    return list.hashCode();
  }

  @Override
  public int compareTo(AdvapplyRepaymentView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDt()).compareTo(other.isSetPlanRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDt, other.planRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrincipal()).compareTo(other.isSetShouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrincipal, other.shouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldMangCost()).compareTo(other.isSetShouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldMangCost, other.shouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldInterest()).compareTo(other.isSetShouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldInterest, other.shouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalBalance()).compareTo(other.isSetPrincipalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalBalance, other.principalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueLoanmt()).compareTo(other.isSetOverdueLoanmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueLoanmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueLoanmt, other.overdueLoanmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFineAmt()).compareTo(other.isSetOverdueFineAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFineAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFineAmt, other.overdueFineAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOtherCost()).compareTo(other.isSetShouldOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOtherCost, other.shouldOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOtherCostName()).compareTo(other.isSetShouldOtherCostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOtherCostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOtherCostName, other.shouldOtherCostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldTotailAmt()).compareTo(other.isSetShouldTotailAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldTotailAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldTotailAmt, other.shouldTotailAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasReceiveAmt()).compareTo(other.isSetHasReceiveAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasReceiveAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasReceiveAmt, other.hasReceiveAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveDt()).compareTo(other.isSetReceiveDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveDt, other.receiveDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoReceiveAmt()).compareTo(other.isSetNoReceiveAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoReceiveAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReceiveAmt, other.noReceiveAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconciliation()).compareTo(other.isSetIsReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconciliation, other.isReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdvapplyRepaymentView(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDt:");
    if (this.planRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrincipal:");
    sb.append(this.shouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldMangCost:");
    sb.append(this.shouldMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldInterest:");
    sb.append(this.shouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalBalance:");
    sb.append(this.principalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueLoanmt:");
    sb.append(this.overdueLoanmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFineAmt:");
    sb.append(this.overdueFineAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOtherCost:");
    sb.append(this.shouldOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOtherCostName:");
    if (this.shouldOtherCostName == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldOtherCostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldTotailAmt:");
    sb.append(this.shouldTotailAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasReceiveAmt:");
    sb.append(this.hasReceiveAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveDt:");
    if (this.receiveDt == null) {
      sb.append("null");
    } else {
      sb.append(this.receiveDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noReceiveAmt:");
    sb.append(this.noReceiveAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReconciliation:");
    sb.append(this.isReconciliation);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdvapplyRepaymentViewStandardSchemeFactory implements SchemeFactory {
    public AdvapplyRepaymentViewStandardScheme getScheme() {
      return new AdvapplyRepaymentViewStandardScheme();
    }
  }

  private static class AdvapplyRepaymentViewStandardScheme extends StandardScheme<AdvapplyRepaymentView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdvapplyRepaymentView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAN_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDt = iprot.readString();
              struct.setPlanRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrincipal = iprot.readDouble();
              struct.setShouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldMangCost = iprot.readDouble();
              struct.setShouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldInterest = iprot.readDouble();
              struct.setShouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total = iprot.readDouble();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRINCIPAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalBalance = iprot.readDouble();
              struct.setPrincipalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OVERDUE_LOANMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueLoanmt = iprot.readDouble();
              struct.setOverdueLoanmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OVERDUE_FINE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFineAmt = iprot.readDouble();
              struct.setOverdueFineAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHOULD_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOtherCost = iprot.readDouble();
              struct.setShouldOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHOULD_OTHER_COST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldOtherCostName = iprot.readString();
              struct.setShouldOtherCostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHOULD_TOTAIL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldTotailAmt = iprot.readDouble();
              struct.setShouldTotailAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HAS_RECEIVE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hasReceiveAmt = iprot.readDouble();
              struct.setHasReceiveAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RECEIVE_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiveDt = iprot.readString();
              struct.setReceiveDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NO_RECEIVE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noReceiveAmt = iprot.readDouble();
              struct.setNoReceiveAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReconciliation = iprot.readI32();
              struct.setIsReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdvapplyRepaymentView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.shouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.principalBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_LOANMT_FIELD_DESC);
      oprot.writeDouble(struct.overdueLoanmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.overdueFineAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldOtherCost);
      oprot.writeFieldEnd();
      if (struct.shouldOtherCostName != null) {
        oprot.writeFieldBegin(SHOULD_OTHER_COST_NAME_FIELD_DESC);
        oprot.writeString(struct.shouldOtherCostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_TOTAIL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.shouldTotailAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_RECEIVE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.hasReceiveAmt);
      oprot.writeFieldEnd();
      if (struct.receiveDt != null) {
        oprot.writeFieldBegin(RECEIVE_DT_FIELD_DESC);
        oprot.writeString(struct.receiveDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NO_RECEIVE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.noReceiveAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.isReconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdvapplyRepaymentViewTupleSchemeFactory implements SchemeFactory {
    public AdvapplyRepaymentViewTupleScheme getScheme() {
      return new AdvapplyRepaymentViewTupleScheme();
    }
  }

  private static class AdvapplyRepaymentViewTupleScheme extends TupleScheme<AdvapplyRepaymentView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdvapplyRepaymentView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetPlanRepayDt()) {
        optionals.set(1);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(2);
      }
      if (struct.isSetShouldPrincipal()) {
        optionals.set(3);
      }
      if (struct.isSetShouldMangCost()) {
        optionals.set(4);
      }
      if (struct.isSetShouldInterest()) {
        optionals.set(5);
      }
      if (struct.isSetTotal()) {
        optionals.set(6);
      }
      if (struct.isSetPrincipalBalance()) {
        optionals.set(7);
      }
      if (struct.isSetOverdueLoanmt()) {
        optionals.set(8);
      }
      if (struct.isSetOverdueFineAmt()) {
        optionals.set(9);
      }
      if (struct.isSetShouldOtherCost()) {
        optionals.set(10);
      }
      if (struct.isSetShouldOtherCostName()) {
        optionals.set(11);
      }
      if (struct.isSetShouldTotailAmt()) {
        optionals.set(12);
      }
      if (struct.isSetHasReceiveAmt()) {
        optionals.set(13);
      }
      if (struct.isSetReceiveDt()) {
        optionals.set(14);
      }
      if (struct.isSetNoReceiveAmt()) {
        optionals.set(15);
      }
      if (struct.isSetIsReconciliation()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetPlanRepayDt()) {
        oprot.writeString(struct.planRepayDt);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetShouldPrincipal()) {
        oprot.writeDouble(struct.shouldPrincipal);
      }
      if (struct.isSetShouldMangCost()) {
        oprot.writeDouble(struct.shouldMangCost);
      }
      if (struct.isSetShouldInterest()) {
        oprot.writeDouble(struct.shouldInterest);
      }
      if (struct.isSetTotal()) {
        oprot.writeDouble(struct.total);
      }
      if (struct.isSetPrincipalBalance()) {
        oprot.writeDouble(struct.principalBalance);
      }
      if (struct.isSetOverdueLoanmt()) {
        oprot.writeDouble(struct.overdueLoanmt);
      }
      if (struct.isSetOverdueFineAmt()) {
        oprot.writeDouble(struct.overdueFineAmt);
      }
      if (struct.isSetShouldOtherCost()) {
        oprot.writeDouble(struct.shouldOtherCost);
      }
      if (struct.isSetShouldOtherCostName()) {
        oprot.writeString(struct.shouldOtherCostName);
      }
      if (struct.isSetShouldTotailAmt()) {
        oprot.writeDouble(struct.shouldTotailAmt);
      }
      if (struct.isSetHasReceiveAmt()) {
        oprot.writeDouble(struct.hasReceiveAmt);
      }
      if (struct.isSetReceiveDt()) {
        oprot.writeString(struct.receiveDt);
      }
      if (struct.isSetNoReceiveAmt()) {
        oprot.writeDouble(struct.noReceiveAmt);
      }
      if (struct.isSetIsReconciliation()) {
        oprot.writeI32(struct.isReconciliation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdvapplyRepaymentView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.planRepayDt = iprot.readString();
        struct.setPlanRepayDtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shouldPrincipal = iprot.readDouble();
        struct.setShouldPrincipalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shouldMangCost = iprot.readDouble();
        struct.setShouldMangCostIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shouldInterest = iprot.readDouble();
        struct.setShouldInterestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.total = iprot.readDouble();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.principalBalance = iprot.readDouble();
        struct.setPrincipalBalanceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.overdueLoanmt = iprot.readDouble();
        struct.setOverdueLoanmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.overdueFineAmt = iprot.readDouble();
        struct.setOverdueFineAmtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.shouldOtherCost = iprot.readDouble();
        struct.setShouldOtherCostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.shouldOtherCostName = iprot.readString();
        struct.setShouldOtherCostNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shouldTotailAmt = iprot.readDouble();
        struct.setShouldTotailAmtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.hasReceiveAmt = iprot.readDouble();
        struct.setHasReceiveAmtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.receiveDt = iprot.readString();
        struct.setReceiveDtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.noReceiveAmt = iprot.readDouble();
        struct.setNoReceiveAmtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isReconciliation = iprot.readI32();
        struct.setIsReconciliationIsSet(true);
      }
    }
  }

}


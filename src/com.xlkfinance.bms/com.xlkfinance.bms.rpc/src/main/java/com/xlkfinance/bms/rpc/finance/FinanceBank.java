/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceBank implements org.apache.thrift.TBase<FinanceBank, FinanceBank._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceBank> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceBank");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHARGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("bank", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BANK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNum", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BANK_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankUserName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEFAULT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField IS_OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("isOpen", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CRE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("creDttm", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField IS_OPEN_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("isOpenText", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardTypeText", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHOW_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("showSeq", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField BANK_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankText", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceBankStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceBankTupleSchemeFactory());
  }

  public int pid; // required
  public String chargeName; // required
  public int bankCardType; // required
  public int bank; // required
  public String bankNum; // required
  public String bankUserName; // required
  public double defaultAmt; // required
  public int isOpen; // required
  public String remark; // required
  public String creDttm; // required
  public int status; // required
  public String isOpenText; // required
  public String bankCardTypeText; // required
  public int showSeq; // required
  public String bankText; // required
  public int rows; // required
  public int page; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CHARGE_NAME((short)2, "chargeName"),
    BANK_CARD_TYPE((short)3, "bankCardType"),
    BANK((short)4, "bank"),
    BANK_NUM((short)5, "bankNum"),
    BANK_USER_NAME((short)6, "bankUserName"),
    DEFAULT_AMT((short)7, "defaultAmt"),
    IS_OPEN((short)8, "isOpen"),
    REMARK((short)9, "remark"),
    CRE_DTTM((short)10, "creDttm"),
    STATUS((short)11, "status"),
    IS_OPEN_TEXT((short)12, "isOpenText"),
    BANK_CARD_TYPE_TEXT((short)13, "bankCardTypeText"),
    SHOW_SEQ((short)14, "showSeq"),
    BANK_TEXT((short)15, "bankText"),
    ROWS((short)16, "rows"),
    PAGE((short)17, "page");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CHARGE_NAME
          return CHARGE_NAME;
        case 3: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 4: // BANK
          return BANK;
        case 5: // BANK_NUM
          return BANK_NUM;
        case 6: // BANK_USER_NAME
          return BANK_USER_NAME;
        case 7: // DEFAULT_AMT
          return DEFAULT_AMT;
        case 8: // IS_OPEN
          return IS_OPEN;
        case 9: // REMARK
          return REMARK;
        case 10: // CRE_DTTM
          return CRE_DTTM;
        case 11: // STATUS
          return STATUS;
        case 12: // IS_OPEN_TEXT
          return IS_OPEN_TEXT;
        case 13: // BANK_CARD_TYPE_TEXT
          return BANK_CARD_TYPE_TEXT;
        case 14: // SHOW_SEQ
          return SHOW_SEQ;
        case 15: // BANK_TEXT
          return BANK_TEXT;
        case 16: // ROWS
          return ROWS;
        case 17: // PAGE
          return PAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __BANKCARDTYPE_ISSET_ID = 1;
  private static final int __BANK_ISSET_ID = 2;
  private static final int __DEFAULTAMT_ISSET_ID = 3;
  private static final int __ISOPEN_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __SHOWSEQ_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("chargeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK, new org.apache.thrift.meta_data.FieldMetaData("bank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_NUM, new org.apache.thrift.meta_data.FieldMetaData("bankNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_AMT, new org.apache.thrift.meta_data.FieldMetaData("defaultAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_OPEN, new org.apache.thrift.meta_data.FieldMetaData("isOpen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("creDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_OPEN_TEXT, new org.apache.thrift.meta_data.FieldMetaData("isOpenText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("bankCardTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOW_SEQ, new org.apache.thrift.meta_data.FieldMetaData("showSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_TEXT, new org.apache.thrift.meta_data.FieldMetaData("bankText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceBank.class, metaDataMap);
  }

  public FinanceBank() {
  }

  public FinanceBank(
    int pid,
    String chargeName,
    int bankCardType,
    int bank,
    String bankNum,
    String bankUserName,
    double defaultAmt,
    int isOpen,
    String remark,
    String creDttm,
    int status,
    String isOpenText,
    String bankCardTypeText,
    int showSeq,
    String bankText,
    int rows,
    int page)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.chargeName = chargeName;
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    this.bank = bank;
    setBankIsSet(true);
    this.bankNum = bankNum;
    this.bankUserName = bankUserName;
    this.defaultAmt = defaultAmt;
    setDefaultAmtIsSet(true);
    this.isOpen = isOpen;
    setIsOpenIsSet(true);
    this.remark = remark;
    this.creDttm = creDttm;
    this.status = status;
    setStatusIsSet(true);
    this.isOpenText = isOpenText;
    this.bankCardTypeText = bankCardTypeText;
    this.showSeq = showSeq;
    setShowSeqIsSet(true);
    this.bankText = bankText;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceBank(FinanceBank other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetChargeName()) {
      this.chargeName = other.chargeName;
    }
    this.bankCardType = other.bankCardType;
    this.bank = other.bank;
    if (other.isSetBankNum()) {
      this.bankNum = other.bankNum;
    }
    if (other.isSetBankUserName()) {
      this.bankUserName = other.bankUserName;
    }
    this.defaultAmt = other.defaultAmt;
    this.isOpen = other.isOpen;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreDttm()) {
      this.creDttm = other.creDttm;
    }
    this.status = other.status;
    if (other.isSetIsOpenText()) {
      this.isOpenText = other.isOpenText;
    }
    if (other.isSetBankCardTypeText()) {
      this.bankCardTypeText = other.bankCardTypeText;
    }
    this.showSeq = other.showSeq;
    if (other.isSetBankText()) {
      this.bankText = other.bankText;
    }
    this.rows = other.rows;
    this.page = other.page;
  }

  public FinanceBank deepCopy() {
    return new FinanceBank(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.chargeName = null;
    setBankCardTypeIsSet(false);
    this.bankCardType = 0;
    setBankIsSet(false);
    this.bank = 0;
    this.bankNum = null;
    this.bankUserName = null;
    setDefaultAmtIsSet(false);
    this.defaultAmt = 0.0;
    setIsOpenIsSet(false);
    this.isOpen = 0;
    this.remark = null;
    this.creDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    this.isOpenText = null;
    this.bankCardTypeText = null;
    setShowSeqIsSet(false);
    this.showSeq = 0;
    this.bankText = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceBank setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getChargeName() {
    return this.chargeName;
  }

  public FinanceBank setChargeName(String chargeName) {
    this.chargeName = chargeName;
    return this;
  }

  public void unsetChargeName() {
    this.chargeName = null;
  }

  /** Returns true if field chargeName is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeName() {
    return this.chargeName != null;
  }

  public void setChargeNameIsSet(boolean value) {
    if (!value) {
      this.chargeName = null;
    }
  }

  public int getBankCardType() {
    return this.bankCardType;
  }

  public FinanceBank setBankCardType(int bankCardType) {
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    return this;
  }

  public void unsetBankCardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  public void setBankCardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID, value);
  }

  public int getBank() {
    return this.bank;
  }

  public FinanceBank setBank(int bank) {
    this.bank = bank;
    setBankIsSet(true);
    return this;
  }

  public void unsetBank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANK_ISSET_ID);
  }

  /** Returns true if field bank is set (has been assigned a value) and false otherwise */
  public boolean isSetBank() {
    return EncodingUtils.testBit(__isset_bitfield, __BANK_ISSET_ID);
  }

  public void setBankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANK_ISSET_ID, value);
  }

  public String getBankNum() {
    return this.bankNum;
  }

  public FinanceBank setBankNum(String bankNum) {
    this.bankNum = bankNum;
    return this;
  }

  public void unsetBankNum() {
    this.bankNum = null;
  }

  /** Returns true if field bankNum is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNum() {
    return this.bankNum != null;
  }

  public void setBankNumIsSet(boolean value) {
    if (!value) {
      this.bankNum = null;
    }
  }

  public String getBankUserName() {
    return this.bankUserName;
  }

  public FinanceBank setBankUserName(String bankUserName) {
    this.bankUserName = bankUserName;
    return this;
  }

  public void unsetBankUserName() {
    this.bankUserName = null;
  }

  /** Returns true if field bankUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankUserName() {
    return this.bankUserName != null;
  }

  public void setBankUserNameIsSet(boolean value) {
    if (!value) {
      this.bankUserName = null;
    }
  }

  public double getDefaultAmt() {
    return this.defaultAmt;
  }

  public FinanceBank setDefaultAmt(double defaultAmt) {
    this.defaultAmt = defaultAmt;
    setDefaultAmtIsSet(true);
    return this;
  }

  public void unsetDefaultAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTAMT_ISSET_ID);
  }

  /** Returns true if field defaultAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTAMT_ISSET_ID);
  }

  public void setDefaultAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTAMT_ISSET_ID, value);
  }

  public int getIsOpen() {
    return this.isOpen;
  }

  public FinanceBank setIsOpen(int isOpen) {
    this.isOpen = isOpen;
    setIsOpenIsSet(true);
    return this;
  }

  public void unsetIsOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOPEN_ISSET_ID);
  }

  /** Returns true if field isOpen is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOPEN_ISSET_ID);
  }

  public void setIsOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOPEN_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public FinanceBank setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreDttm() {
    return this.creDttm;
  }

  public FinanceBank setCreDttm(String creDttm) {
    this.creDttm = creDttm;
    return this;
  }

  public void unsetCreDttm() {
    this.creDttm = null;
  }

  /** Returns true if field creDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCreDttm() {
    return this.creDttm != null;
  }

  public void setCreDttmIsSet(boolean value) {
    if (!value) {
      this.creDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public FinanceBank setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getIsOpenText() {
    return this.isOpenText;
  }

  public FinanceBank setIsOpenText(String isOpenText) {
    this.isOpenText = isOpenText;
    return this;
  }

  public void unsetIsOpenText() {
    this.isOpenText = null;
  }

  /** Returns true if field isOpenText is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOpenText() {
    return this.isOpenText != null;
  }

  public void setIsOpenTextIsSet(boolean value) {
    if (!value) {
      this.isOpenText = null;
    }
  }

  public String getBankCardTypeText() {
    return this.bankCardTypeText;
  }

  public FinanceBank setBankCardTypeText(String bankCardTypeText) {
    this.bankCardTypeText = bankCardTypeText;
    return this;
  }

  public void unsetBankCardTypeText() {
    this.bankCardTypeText = null;
  }

  /** Returns true if field bankCardTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardTypeText() {
    return this.bankCardTypeText != null;
  }

  public void setBankCardTypeTextIsSet(boolean value) {
    if (!value) {
      this.bankCardTypeText = null;
    }
  }

  public int getShowSeq() {
    return this.showSeq;
  }

  public FinanceBank setShowSeq(int showSeq) {
    this.showSeq = showSeq;
    setShowSeqIsSet(true);
    return this;
  }

  public void unsetShowSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWSEQ_ISSET_ID);
  }

  /** Returns true if field showSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetShowSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWSEQ_ISSET_ID);
  }

  public void setShowSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWSEQ_ISSET_ID, value);
  }

  public String getBankText() {
    return this.bankText;
  }

  public FinanceBank setBankText(String bankText) {
    this.bankText = bankText;
    return this;
  }

  public void unsetBankText() {
    this.bankText = null;
  }

  /** Returns true if field bankText is set (has been assigned a value) and false otherwise */
  public boolean isSetBankText() {
    return this.bankText != null;
  }

  public void setBankTextIsSet(boolean value) {
    if (!value) {
      this.bankText = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public FinanceBank setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public FinanceBank setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CHARGE_NAME:
      if (value == null) {
        unsetChargeName();
      } else {
        setChargeName((String)value);
      }
      break;

    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((Integer)value);
      }
      break;

    case BANK:
      if (value == null) {
        unsetBank();
      } else {
        setBank((Integer)value);
      }
      break;

    case BANK_NUM:
      if (value == null) {
        unsetBankNum();
      } else {
        setBankNum((String)value);
      }
      break;

    case BANK_USER_NAME:
      if (value == null) {
        unsetBankUserName();
      } else {
        setBankUserName((String)value);
      }
      break;

    case DEFAULT_AMT:
      if (value == null) {
        unsetDefaultAmt();
      } else {
        setDefaultAmt((Double)value);
      }
      break;

    case IS_OPEN:
      if (value == null) {
        unsetIsOpen();
      } else {
        setIsOpen((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CRE_DTTM:
      if (value == null) {
        unsetCreDttm();
      } else {
        setCreDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case IS_OPEN_TEXT:
      if (value == null) {
        unsetIsOpenText();
      } else {
        setIsOpenText((String)value);
      }
      break;

    case BANK_CARD_TYPE_TEXT:
      if (value == null) {
        unsetBankCardTypeText();
      } else {
        setBankCardTypeText((String)value);
      }
      break;

    case SHOW_SEQ:
      if (value == null) {
        unsetShowSeq();
      } else {
        setShowSeq((Integer)value);
      }
      break;

    case BANK_TEXT:
      if (value == null) {
        unsetBankText();
      } else {
        setBankText((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CHARGE_NAME:
      return getChargeName();

    case BANK_CARD_TYPE:
      return Integer.valueOf(getBankCardType());

    case BANK:
      return Integer.valueOf(getBank());

    case BANK_NUM:
      return getBankNum();

    case BANK_USER_NAME:
      return getBankUserName();

    case DEFAULT_AMT:
      return Double.valueOf(getDefaultAmt());

    case IS_OPEN:
      return Integer.valueOf(getIsOpen());

    case REMARK:
      return getRemark();

    case CRE_DTTM:
      return getCreDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case IS_OPEN_TEXT:
      return getIsOpenText();

    case BANK_CARD_TYPE_TEXT:
      return getBankCardTypeText();

    case SHOW_SEQ:
      return Integer.valueOf(getShowSeq());

    case BANK_TEXT:
      return getBankText();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CHARGE_NAME:
      return isSetChargeName();
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    case BANK:
      return isSetBank();
    case BANK_NUM:
      return isSetBankNum();
    case BANK_USER_NAME:
      return isSetBankUserName();
    case DEFAULT_AMT:
      return isSetDefaultAmt();
    case IS_OPEN:
      return isSetIsOpen();
    case REMARK:
      return isSetRemark();
    case CRE_DTTM:
      return isSetCreDttm();
    case STATUS:
      return isSetStatus();
    case IS_OPEN_TEXT:
      return isSetIsOpenText();
    case BANK_CARD_TYPE_TEXT:
      return isSetBankCardTypeText();
    case SHOW_SEQ:
      return isSetShowSeq();
    case BANK_TEXT:
      return isSetBankText();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceBank)
      return this.equals((FinanceBank)that);
    return false;
  }

  public boolean equals(FinanceBank that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_chargeName = true && this.isSetChargeName();
    boolean that_present_chargeName = true && that.isSetChargeName();
    if (this_present_chargeName || that_present_chargeName) {
      if (!(this_present_chargeName && that_present_chargeName))
        return false;
      if (!this.chargeName.equals(that.chargeName))
        return false;
    }

    boolean this_present_bankCardType = true;
    boolean that_present_bankCardType = true;
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (this.bankCardType != that.bankCardType)
        return false;
    }

    boolean this_present_bank = true;
    boolean that_present_bank = true;
    if (this_present_bank || that_present_bank) {
      if (!(this_present_bank && that_present_bank))
        return false;
      if (this.bank != that.bank)
        return false;
    }

    boolean this_present_bankNum = true && this.isSetBankNum();
    boolean that_present_bankNum = true && that.isSetBankNum();
    if (this_present_bankNum || that_present_bankNum) {
      if (!(this_present_bankNum && that_present_bankNum))
        return false;
      if (!this.bankNum.equals(that.bankNum))
        return false;
    }

    boolean this_present_bankUserName = true && this.isSetBankUserName();
    boolean that_present_bankUserName = true && that.isSetBankUserName();
    if (this_present_bankUserName || that_present_bankUserName) {
      if (!(this_present_bankUserName && that_present_bankUserName))
        return false;
      if (!this.bankUserName.equals(that.bankUserName))
        return false;
    }

    boolean this_present_defaultAmt = true;
    boolean that_present_defaultAmt = true;
    if (this_present_defaultAmt || that_present_defaultAmt) {
      if (!(this_present_defaultAmt && that_present_defaultAmt))
        return false;
      if (this.defaultAmt != that.defaultAmt)
        return false;
    }

    boolean this_present_isOpen = true;
    boolean that_present_isOpen = true;
    if (this_present_isOpen || that_present_isOpen) {
      if (!(this_present_isOpen && that_present_isOpen))
        return false;
      if (this.isOpen != that.isOpen)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_creDttm = true && this.isSetCreDttm();
    boolean that_present_creDttm = true && that.isSetCreDttm();
    if (this_present_creDttm || that_present_creDttm) {
      if (!(this_present_creDttm && that_present_creDttm))
        return false;
      if (!this.creDttm.equals(that.creDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_isOpenText = true && this.isSetIsOpenText();
    boolean that_present_isOpenText = true && that.isSetIsOpenText();
    if (this_present_isOpenText || that_present_isOpenText) {
      if (!(this_present_isOpenText && that_present_isOpenText))
        return false;
      if (!this.isOpenText.equals(that.isOpenText))
        return false;
    }

    boolean this_present_bankCardTypeText = true && this.isSetBankCardTypeText();
    boolean that_present_bankCardTypeText = true && that.isSetBankCardTypeText();
    if (this_present_bankCardTypeText || that_present_bankCardTypeText) {
      if (!(this_present_bankCardTypeText && that_present_bankCardTypeText))
        return false;
      if (!this.bankCardTypeText.equals(that.bankCardTypeText))
        return false;
    }

    boolean this_present_showSeq = true;
    boolean that_present_showSeq = true;
    if (this_present_showSeq || that_present_showSeq) {
      if (!(this_present_showSeq && that_present_showSeq))
        return false;
      if (this.showSeq != that.showSeq)
        return false;
    }

    boolean this_present_bankText = true && this.isSetBankText();
    boolean that_present_bankText = true && that.isSetBankText();
    if (this_present_bankText || that_present_bankText) {
      if (!(this_present_bankText && that_present_bankText))
        return false;
      if (!this.bankText.equals(that.bankText))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_chargeName = true && (isSetChargeName());
    list.add(present_chargeName);
    if (present_chargeName)
      list.add(chargeName);

    boolean present_bankCardType = true;
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    boolean present_bank = true;
    list.add(present_bank);
    if (present_bank)
      list.add(bank);

    boolean present_bankNum = true && (isSetBankNum());
    list.add(present_bankNum);
    if (present_bankNum)
      list.add(bankNum);

    boolean present_bankUserName = true && (isSetBankUserName());
    list.add(present_bankUserName);
    if (present_bankUserName)
      list.add(bankUserName);

    boolean present_defaultAmt = true;
    list.add(present_defaultAmt);
    if (present_defaultAmt)
      list.add(defaultAmt);

    boolean present_isOpen = true;
    list.add(present_isOpen);
    if (present_isOpen)
      list.add(isOpen);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_creDttm = true && (isSetCreDttm());
    list.add(present_creDttm);
    if (present_creDttm)
      list.add(creDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_isOpenText = true && (isSetIsOpenText());
    list.add(present_isOpenText);
    if (present_isOpenText)
      list.add(isOpenText);

    boolean present_bankCardTypeText = true && (isSetBankCardTypeText());
    list.add(present_bankCardTypeText);
    if (present_bankCardTypeText)
      list.add(bankCardTypeText);

    boolean present_showSeq = true;
    list.add(present_showSeq);
    if (present_showSeq)
      list.add(showSeq);

    boolean present_bankText = true && (isSetBankText());
    list.add(present_bankText);
    if (present_bankText)
      list.add(bankText);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceBank other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeName()).compareTo(other.isSetChargeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeName, other.chargeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBank()).compareTo(other.isSetBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bank, other.bank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNum()).compareTo(other.isSetBankNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNum, other.bankNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankUserName()).compareTo(other.isSetBankUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankUserName, other.bankUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultAmt()).compareTo(other.isSetDefaultAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultAmt, other.defaultAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOpen()).compareTo(other.isSetIsOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOpen, other.isOpen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreDttm()).compareTo(other.isSetCreDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creDttm, other.creDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOpenText()).compareTo(other.isSetIsOpenText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOpenText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOpenText, other.isOpenText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardTypeText()).compareTo(other.isSetBankCardTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardTypeText, other.bankCardTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowSeq()).compareTo(other.isSetShowSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showSeq, other.showSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankText()).compareTo(other.isSetBankText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankText, other.bankText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceBank(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeName:");
    if (this.chargeName == null) {
      sb.append("null");
    } else {
      sb.append(this.chargeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    sb.append(this.bankCardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bank:");
    sb.append(this.bank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNum:");
    if (this.bankNum == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankUserName:");
    if (this.bankUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultAmt:");
    sb.append(this.defaultAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOpen:");
    sb.append(this.isOpen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creDttm:");
    if (this.creDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.creDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOpenText:");
    if (this.isOpenText == null) {
      sb.append("null");
    } else {
      sb.append(this.isOpenText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardTypeText:");
    if (this.bankCardTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("showSeq:");
    sb.append(this.showSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankText:");
    if (this.bankText == null) {
      sb.append("null");
    } else {
      sb.append(this.bankText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceBankStandardSchemeFactory implements SchemeFactory {
    public FinanceBankStandardScheme getScheme() {
      return new FinanceBankStandardScheme();
    }
  }

  private static class FinanceBankStandardScheme extends StandardScheme<FinanceBank> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeName = iprot.readString();
              struct.setChargeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankCardType = iprot.readI32();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bank = iprot.readI32();
              struct.setBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BANK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNum = iprot.readString();
              struct.setBankNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BANK_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankUserName = iprot.readString();
              struct.setBankUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFAULT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultAmt = iprot.readDouble();
              struct.setDefaultAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isOpen = iprot.readI32();
              struct.setIsOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CRE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creDttm = iprot.readString();
              struct.setCreDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_OPEN_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isOpenText = iprot.readString();
              struct.setIsOpenTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BANK_CARD_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardTypeText = iprot.readString();
              struct.setBankCardTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHOW_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showSeq = iprot.readI32();
              struct.setShowSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BANK_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankText = iprot.readString();
              struct.setBankTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceBank struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.chargeName != null) {
        oprot.writeFieldBegin(CHARGE_NAME_FIELD_DESC);
        oprot.writeString(struct.chargeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bankCardType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_FIELD_DESC);
      oprot.writeI32(struct.bank);
      oprot.writeFieldEnd();
      if (struct.bankNum != null) {
        oprot.writeFieldBegin(BANK_NUM_FIELD_DESC);
        oprot.writeString(struct.bankNum);
        oprot.writeFieldEnd();
      }
      if (struct.bankUserName != null) {
        oprot.writeFieldBegin(BANK_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.bankUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEFAULT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.defaultAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OPEN_FIELD_DESC);
      oprot.writeI32(struct.isOpen);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.creDttm != null) {
        oprot.writeFieldBegin(CRE_DTTM_FIELD_DESC);
        oprot.writeString(struct.creDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.isOpenText != null) {
        oprot.writeFieldBegin(IS_OPEN_TEXT_FIELD_DESC);
        oprot.writeString(struct.isOpenText);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardTypeText != null) {
        oprot.writeFieldBegin(BANK_CARD_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.bankCardTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOW_SEQ_FIELD_DESC);
      oprot.writeI32(struct.showSeq);
      oprot.writeFieldEnd();
      if (struct.bankText != null) {
        oprot.writeFieldBegin(BANK_TEXT_FIELD_DESC);
        oprot.writeString(struct.bankText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceBankTupleSchemeFactory implements SchemeFactory {
    public FinanceBankTupleScheme getScheme() {
      return new FinanceBankTupleScheme();
    }
  }

  private static class FinanceBankTupleScheme extends TupleScheme<FinanceBank> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceBank struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetChargeName()) {
        optionals.set(1);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(2);
      }
      if (struct.isSetBank()) {
        optionals.set(3);
      }
      if (struct.isSetBankNum()) {
        optionals.set(4);
      }
      if (struct.isSetBankUserName()) {
        optionals.set(5);
      }
      if (struct.isSetDefaultAmt()) {
        optionals.set(6);
      }
      if (struct.isSetIsOpen()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetCreDttm()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetIsOpenText()) {
        optionals.set(11);
      }
      if (struct.isSetBankCardTypeText()) {
        optionals.set(12);
      }
      if (struct.isSetShowSeq()) {
        optionals.set(13);
      }
      if (struct.isSetBankText()) {
        optionals.set(14);
      }
      if (struct.isSetRows()) {
        optionals.set(15);
      }
      if (struct.isSetPage()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetChargeName()) {
        oprot.writeString(struct.chargeName);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeI32(struct.bankCardType);
      }
      if (struct.isSetBank()) {
        oprot.writeI32(struct.bank);
      }
      if (struct.isSetBankNum()) {
        oprot.writeString(struct.bankNum);
      }
      if (struct.isSetBankUserName()) {
        oprot.writeString(struct.bankUserName);
      }
      if (struct.isSetDefaultAmt()) {
        oprot.writeDouble(struct.defaultAmt);
      }
      if (struct.isSetIsOpen()) {
        oprot.writeI32(struct.isOpen);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreDttm()) {
        oprot.writeString(struct.creDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetIsOpenText()) {
        oprot.writeString(struct.isOpenText);
      }
      if (struct.isSetBankCardTypeText()) {
        oprot.writeString(struct.bankCardTypeText);
      }
      if (struct.isSetShowSeq()) {
        oprot.writeI32(struct.showSeq);
      }
      if (struct.isSetBankText()) {
        oprot.writeString(struct.bankText);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceBank struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chargeName = iprot.readString();
        struct.setChargeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankCardType = iprot.readI32();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bank = iprot.readI32();
        struct.setBankIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bankNum = iprot.readString();
        struct.setBankNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bankUserName = iprot.readString();
        struct.setBankUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.defaultAmt = iprot.readDouble();
        struct.setDefaultAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isOpen = iprot.readI32();
        struct.setIsOpenIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.creDttm = iprot.readString();
        struct.setCreDttmIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isOpenText = iprot.readString();
        struct.setIsOpenTextIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bankCardTypeText = iprot.readString();
        struct.setBankCardTypeTextIsSet(true);
      }
      if (incoming.get(13)) {
        struct.showSeq = iprot.readI32();
        struct.setShowSeqIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bankText = iprot.readString();
        struct.setBankTextIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
    }
  }

}


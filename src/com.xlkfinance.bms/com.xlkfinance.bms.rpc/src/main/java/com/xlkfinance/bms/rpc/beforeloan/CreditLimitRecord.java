/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class CreditLimitRecord implements org.apache.thrift.TBase<CreditLimitRecord, CreditLimitRecord._Fields>, java.io.Serializable, Cloneable, Comparable<CreditLimitRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditLimitRecord");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creditId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREDIT_USE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("creditUseType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CREDIT_USE_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditUseTypeText", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("amt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CRE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("creDttm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreditLimitRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreditLimitRecordTupleSchemeFactory());
  }

  public int pid; // required
  public int creditId; // required
  public int creditUseType; // required
  public String creditUseTypeText; // required
  public double amt; // required
  public double requestAmt; // required
  public String reason; // required
  public String creDttm; // required
  public int status; // required
  public int loanId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CREDIT_ID((short)2, "creditId"),
    CREDIT_USE_TYPE((short)3, "creditUseType"),
    CREDIT_USE_TYPE_TEXT((short)4, "creditUseTypeText"),
    AMT((short)5, "amt"),
    REQUEST_AMT((short)6, "requestAmt"),
    REASON((short)7, "reason"),
    CRE_DTTM((short)8, "creDttm"),
    STATUS((short)9, "status"),
    LOAN_ID((short)10, "loanId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CREDIT_ID
          return CREDIT_ID;
        case 3: // CREDIT_USE_TYPE
          return CREDIT_USE_TYPE;
        case 4: // CREDIT_USE_TYPE_TEXT
          return CREDIT_USE_TYPE_TEXT;
        case 5: // AMT
          return AMT;
        case 6: // REQUEST_AMT
          return REQUEST_AMT;
        case 7: // REASON
          return REASON;
        case 8: // CRE_DTTM
          return CRE_DTTM;
        case 9: // STATUS
          return STATUS;
        case 10: // LOAN_ID
          return LOAN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREDITID_ISSET_ID = 1;
  private static final int __CREDITUSETYPE_ISSET_ID = 2;
  private static final int __AMT_ISSET_ID = 3;
  private static final int __REQUESTAMT_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __LOANID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("creditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_USE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("creditUseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_USE_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("creditUseTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMT, new org.apache.thrift.meta_data.FieldMetaData("amt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_AMT, new org.apache.thrift.meta_data.FieldMetaData("requestAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("creDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditLimitRecord.class, metaDataMap);
  }

  public CreditLimitRecord() {
  }

  public CreditLimitRecord(
    int pid,
    int creditId,
    int creditUseType,
    String creditUseTypeText,
    double amt,
    double requestAmt,
    String reason,
    String creDttm,
    int status,
    int loanId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.creditId = creditId;
    setCreditIdIsSet(true);
    this.creditUseType = creditUseType;
    setCreditUseTypeIsSet(true);
    this.creditUseTypeText = creditUseTypeText;
    this.amt = amt;
    setAmtIsSet(true);
    this.requestAmt = requestAmt;
    setRequestAmtIsSet(true);
    this.reason = reason;
    this.creDttm = creDttm;
    this.status = status;
    setStatusIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditLimitRecord(CreditLimitRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.creditId = other.creditId;
    this.creditUseType = other.creditUseType;
    if (other.isSetCreditUseTypeText()) {
      this.creditUseTypeText = other.creditUseTypeText;
    }
    this.amt = other.amt;
    this.requestAmt = other.requestAmt;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetCreDttm()) {
      this.creDttm = other.creDttm;
    }
    this.status = other.status;
    this.loanId = other.loanId;
  }

  public CreditLimitRecord deepCopy() {
    return new CreditLimitRecord(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setCreditIdIsSet(false);
    this.creditId = 0;
    setCreditUseTypeIsSet(false);
    this.creditUseType = 0;
    this.creditUseTypeText = null;
    setAmtIsSet(false);
    this.amt = 0.0;
    setRequestAmtIsSet(false);
    this.requestAmt = 0.0;
    this.reason = null;
    this.creDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CreditLimitRecord setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCreditId() {
    return this.creditId;
  }

  public CreditLimitRecord setCreditId(int creditId) {
    this.creditId = creditId;
    setCreditIdIsSet(true);
    return this;
  }

  public void unsetCreditId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITID_ISSET_ID);
  }

  /** Returns true if field creditId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITID_ISSET_ID);
  }

  public void setCreditIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITID_ISSET_ID, value);
  }

  public int getCreditUseType() {
    return this.creditUseType;
  }

  public CreditLimitRecord setCreditUseType(int creditUseType) {
    this.creditUseType = creditUseType;
    setCreditUseTypeIsSet(true);
    return this;
  }

  public void unsetCreditUseType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITUSETYPE_ISSET_ID);
  }

  /** Returns true if field creditUseType is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditUseType() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITUSETYPE_ISSET_ID);
  }

  public void setCreditUseTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITUSETYPE_ISSET_ID, value);
  }

  public String getCreditUseTypeText() {
    return this.creditUseTypeText;
  }

  public CreditLimitRecord setCreditUseTypeText(String creditUseTypeText) {
    this.creditUseTypeText = creditUseTypeText;
    return this;
  }

  public void unsetCreditUseTypeText() {
    this.creditUseTypeText = null;
  }

  /** Returns true if field creditUseTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditUseTypeText() {
    return this.creditUseTypeText != null;
  }

  public void setCreditUseTypeTextIsSet(boolean value) {
    if (!value) {
      this.creditUseTypeText = null;
    }
  }

  public double getAmt() {
    return this.amt;
  }

  public CreditLimitRecord setAmt(double amt) {
    this.amt = amt;
    setAmtIsSet(true);
    return this;
  }

  public void unsetAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMT_ISSET_ID);
  }

  /** Returns true if field amt is set (has been assigned a value) and false otherwise */
  public boolean isSetAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __AMT_ISSET_ID);
  }

  public void setAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMT_ISSET_ID, value);
  }

  public double getRequestAmt() {
    return this.requestAmt;
  }

  public CreditLimitRecord setRequestAmt(double requestAmt) {
    this.requestAmt = requestAmt;
    setRequestAmtIsSet(true);
    return this;
  }

  public void unsetRequestAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTAMT_ISSET_ID);
  }

  /** Returns true if field requestAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTAMT_ISSET_ID);
  }

  public void setRequestAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTAMT_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public CreditLimitRecord setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public String getCreDttm() {
    return this.creDttm;
  }

  public CreditLimitRecord setCreDttm(String creDttm) {
    this.creDttm = creDttm;
    return this;
  }

  public void unsetCreDttm() {
    this.creDttm = null;
  }

  /** Returns true if field creDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCreDttm() {
    return this.creDttm != null;
  }

  public void setCreDttmIsSet(boolean value) {
    if (!value) {
      this.creDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CreditLimitRecord setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public CreditLimitRecord setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CREDIT_ID:
      if (value == null) {
        unsetCreditId();
      } else {
        setCreditId((Integer)value);
      }
      break;

    case CREDIT_USE_TYPE:
      if (value == null) {
        unsetCreditUseType();
      } else {
        setCreditUseType((Integer)value);
      }
      break;

    case CREDIT_USE_TYPE_TEXT:
      if (value == null) {
        unsetCreditUseTypeText();
      } else {
        setCreditUseTypeText((String)value);
      }
      break;

    case AMT:
      if (value == null) {
        unsetAmt();
      } else {
        setAmt((Double)value);
      }
      break;

    case REQUEST_AMT:
      if (value == null) {
        unsetRequestAmt();
      } else {
        setRequestAmt((Double)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case CRE_DTTM:
      if (value == null) {
        unsetCreDttm();
      } else {
        setCreDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CREDIT_ID:
      return Integer.valueOf(getCreditId());

    case CREDIT_USE_TYPE:
      return Integer.valueOf(getCreditUseType());

    case CREDIT_USE_TYPE_TEXT:
      return getCreditUseTypeText();

    case AMT:
      return Double.valueOf(getAmt());

    case REQUEST_AMT:
      return Double.valueOf(getRequestAmt());

    case REASON:
      return getReason();

    case CRE_DTTM:
      return getCreDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CREDIT_ID:
      return isSetCreditId();
    case CREDIT_USE_TYPE:
      return isSetCreditUseType();
    case CREDIT_USE_TYPE_TEXT:
      return isSetCreditUseTypeText();
    case AMT:
      return isSetAmt();
    case REQUEST_AMT:
      return isSetRequestAmt();
    case REASON:
      return isSetReason();
    case CRE_DTTM:
      return isSetCreDttm();
    case STATUS:
      return isSetStatus();
    case LOAN_ID:
      return isSetLoanId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditLimitRecord)
      return this.equals((CreditLimitRecord)that);
    return false;
  }

  public boolean equals(CreditLimitRecord that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_creditId = true;
    boolean that_present_creditId = true;
    if (this_present_creditId || that_present_creditId) {
      if (!(this_present_creditId && that_present_creditId))
        return false;
      if (this.creditId != that.creditId)
        return false;
    }

    boolean this_present_creditUseType = true;
    boolean that_present_creditUseType = true;
    if (this_present_creditUseType || that_present_creditUseType) {
      if (!(this_present_creditUseType && that_present_creditUseType))
        return false;
      if (this.creditUseType != that.creditUseType)
        return false;
    }

    boolean this_present_creditUseTypeText = true && this.isSetCreditUseTypeText();
    boolean that_present_creditUseTypeText = true && that.isSetCreditUseTypeText();
    if (this_present_creditUseTypeText || that_present_creditUseTypeText) {
      if (!(this_present_creditUseTypeText && that_present_creditUseTypeText))
        return false;
      if (!this.creditUseTypeText.equals(that.creditUseTypeText))
        return false;
    }

    boolean this_present_amt = true;
    boolean that_present_amt = true;
    if (this_present_amt || that_present_amt) {
      if (!(this_present_amt && that_present_amt))
        return false;
      if (this.amt != that.amt)
        return false;
    }

    boolean this_present_requestAmt = true;
    boolean that_present_requestAmt = true;
    if (this_present_requestAmt || that_present_requestAmt) {
      if (!(this_present_requestAmt && that_present_requestAmt))
        return false;
      if (this.requestAmt != that.requestAmt)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_creDttm = true && this.isSetCreDttm();
    boolean that_present_creDttm = true && that.isSetCreDttm();
    if (this_present_creDttm || that_present_creDttm) {
      if (!(this_present_creDttm && that_present_creDttm))
        return false;
      if (!this.creDttm.equals(that.creDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_creditId = true;
    list.add(present_creditId);
    if (present_creditId)
      list.add(creditId);

    boolean present_creditUseType = true;
    list.add(present_creditUseType);
    if (present_creditUseType)
      list.add(creditUseType);

    boolean present_creditUseTypeText = true && (isSetCreditUseTypeText());
    list.add(present_creditUseTypeText);
    if (present_creditUseTypeText)
      list.add(creditUseTypeText);

    boolean present_amt = true;
    list.add(present_amt);
    if (present_amt)
      list.add(amt);

    boolean present_requestAmt = true;
    list.add(present_requestAmt);
    if (present_requestAmt)
      list.add(requestAmt);

    boolean present_reason = true && (isSetReason());
    list.add(present_reason);
    if (present_reason)
      list.add(reason);

    boolean present_creDttm = true && (isSetCreDttm());
    list.add(present_creDttm);
    if (present_creDttm)
      list.add(creDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreditLimitRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditId()).compareTo(other.isSetCreditId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditId, other.creditId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditUseType()).compareTo(other.isSetCreditUseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditUseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditUseType, other.creditUseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditUseTypeText()).compareTo(other.isSetCreditUseTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditUseTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditUseTypeText, other.creditUseTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmt()).compareTo(other.isSetAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amt, other.amt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestAmt()).compareTo(other.isSetRequestAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestAmt, other.requestAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreDttm()).compareTo(other.isSetCreDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creDttm, other.creDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreditLimitRecord(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditId:");
    sb.append(this.creditId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditUseType:");
    sb.append(this.creditUseType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditUseTypeText:");
    if (this.creditUseTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.creditUseTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amt:");
    sb.append(this.amt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestAmt:");
    sb.append(this.requestAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creDttm:");
    if (this.creDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.creDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditLimitRecordStandardSchemeFactory implements SchemeFactory {
    public CreditLimitRecordStandardScheme getScheme() {
      return new CreditLimitRecordStandardScheme();
    }
  }

  private static class CreditLimitRecordStandardScheme extends StandardScheme<CreditLimitRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditLimitRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREDIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditId = iprot.readI32();
              struct.setCreditIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREDIT_USE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditUseType = iprot.readI32();
              struct.setCreditUseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREDIT_USE_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creditUseTypeText = iprot.readString();
              struct.setCreditUseTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amt = iprot.readDouble();
              struct.setAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requestAmt = iprot.readDouble();
              struct.setRequestAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CRE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creDttm = iprot.readString();
              struct.setCreDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditLimitRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_ID_FIELD_DESC);
      oprot.writeI32(struct.creditId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_USE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.creditUseType);
      oprot.writeFieldEnd();
      if (struct.creditUseTypeText != null) {
        oprot.writeFieldBegin(CREDIT_USE_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.creditUseTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMT_FIELD_DESC);
      oprot.writeDouble(struct.amt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_AMT_FIELD_DESC);
      oprot.writeDouble(struct.requestAmt);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.creDttm != null) {
        oprot.writeFieldBegin(CRE_DTTM_FIELD_DESC);
        oprot.writeString(struct.creDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditLimitRecordTupleSchemeFactory implements SchemeFactory {
    public CreditLimitRecordTupleScheme getScheme() {
      return new CreditLimitRecordTupleScheme();
    }
  }

  private static class CreditLimitRecordTupleScheme extends TupleScheme<CreditLimitRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditLimitRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCreditId()) {
        optionals.set(1);
      }
      if (struct.isSetCreditUseType()) {
        optionals.set(2);
      }
      if (struct.isSetCreditUseTypeText()) {
        optionals.set(3);
      }
      if (struct.isSetAmt()) {
        optionals.set(4);
      }
      if (struct.isSetRequestAmt()) {
        optionals.set(5);
      }
      if (struct.isSetReason()) {
        optionals.set(6);
      }
      if (struct.isSetCreDttm()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetLoanId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCreditId()) {
        oprot.writeI32(struct.creditId);
      }
      if (struct.isSetCreditUseType()) {
        oprot.writeI32(struct.creditUseType);
      }
      if (struct.isSetCreditUseTypeText()) {
        oprot.writeString(struct.creditUseTypeText);
      }
      if (struct.isSetAmt()) {
        oprot.writeDouble(struct.amt);
      }
      if (struct.isSetRequestAmt()) {
        oprot.writeDouble(struct.requestAmt);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetCreDttm()) {
        oprot.writeString(struct.creDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditLimitRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.creditId = iprot.readI32();
        struct.setCreditIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creditUseType = iprot.readI32();
        struct.setCreditUseTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.creditUseTypeText = iprot.readString();
        struct.setCreditUseTypeTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amt = iprot.readDouble();
        struct.setAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestAmt = iprot.readDouble();
        struct.setRequestAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(7)) {
        struct.creDttm = iprot.readString();
        struct.setCreDttmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
    }
  }

}


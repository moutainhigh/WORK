/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-3")
public class BizHisLoanInfo implements org.apache.thrift.TBase<BizHisLoanInfo, BizHisLoanInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BizHisLoanInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizHisLoanInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTerm", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REPAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MORTGAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanUsage", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("payment", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MONTH_MAID_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthMaidRate", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField OVERDUE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueRate", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField PREPAYMENT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("prepaymentRate", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("feeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("createNode", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CREATE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createUserName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createNodeName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizHisLoanInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizHisLoanInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public double loanMoney; // required
  public int loanTerm; // required
  public String repaymentType; // required
  public double mortgageRate; // required
  public String loanUsage; // required
  public String payment; // required
  public double monthMaidRate; // required
  public double overdueRate; // required
  public double prepaymentRate; // required
  public double feeRate; // required
  public int createrId; // required
  public String createDate; // required
  public int createNode; // required
  public String createUserName; // required
  public String createNodeName; // required
  public int projectType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    LOAN_MONEY((short)3, "loanMoney"),
    LOAN_TERM((short)4, "loanTerm"),
    REPAYMENT_TYPE((short)5, "repaymentType"),
    MORTGAGE_RATE((short)6, "mortgageRate"),
    LOAN_USAGE((short)7, "loanUsage"),
    PAYMENT((short)8, "payment"),
    MONTH_MAID_RATE((short)9, "monthMaidRate"),
    OVERDUE_RATE((short)10, "overdueRate"),
    PREPAYMENT_RATE((short)11, "prepaymentRate"),
    FEE_RATE((short)12, "feeRate"),
    CREATER_ID((short)13, "createrId"),
    CREATE_DATE((short)14, "createDate"),
    CREATE_NODE((short)15, "createNode"),
    CREATE_USER_NAME((short)16, "createUserName"),
    CREATE_NODE_NAME((short)17, "createNodeName"),
    PROJECT_TYPE((short)18, "projectType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // LOAN_MONEY
          return LOAN_MONEY;
        case 4: // LOAN_TERM
          return LOAN_TERM;
        case 5: // REPAYMENT_TYPE
          return REPAYMENT_TYPE;
        case 6: // MORTGAGE_RATE
          return MORTGAGE_RATE;
        case 7: // LOAN_USAGE
          return LOAN_USAGE;
        case 8: // PAYMENT
          return PAYMENT;
        case 9: // MONTH_MAID_RATE
          return MONTH_MAID_RATE;
        case 10: // OVERDUE_RATE
          return OVERDUE_RATE;
        case 11: // PREPAYMENT_RATE
          return PREPAYMENT_RATE;
        case 12: // FEE_RATE
          return FEE_RATE;
        case 13: // CREATER_ID
          return CREATER_ID;
        case 14: // CREATE_DATE
          return CREATE_DATE;
        case 15: // CREATE_NODE
          return CREATE_NODE;
        case 16: // CREATE_USER_NAME
          return CREATE_USER_NAME;
        case 17: // CREATE_NODE_NAME
          return CREATE_NODE_NAME;
        case 18: // PROJECT_TYPE
          return PROJECT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __LOANMONEY_ISSET_ID = 2;
  private static final int __LOANTERM_ISSET_ID = 3;
  private static final int __MORTGAGERATE_ISSET_ID = 4;
  private static final int __MONTHMAIDRATE_ISSET_ID = 5;
  private static final int __OVERDUERATE_ISSET_ID = 6;
  private static final int __PREPAYMENTRATE_ISSET_ID = 7;
  private static final int __FEERATE_ISSET_ID = 8;
  private static final int __CREATERID_ISSET_ID = 9;
  private static final int __CREATENODE_ISSET_ID = 10;
  private static final int __PROJECTTYPE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_TERM, new org.apache.thrift.meta_data.FieldMetaData("loanTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repaymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("mortgageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_USAGE, new org.apache.thrift.meta_data.FieldMetaData("loanUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("payment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_MAID_RATE, new org.apache.thrift.meta_data.FieldMetaData("monthMaidRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_RATE, new org.apache.thrift.meta_data.FieldMetaData("overdueRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREPAYMENT_RATE, new org.apache.thrift.meta_data.FieldMetaData("prepaymentRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("feeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_NODE, new org.apache.thrift.meta_data.FieldMetaData("createNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("createUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("createNodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizHisLoanInfo.class, metaDataMap);
  }

  public BizHisLoanInfo() {
  }

  public BizHisLoanInfo(
    int pid,
    int projectId,
    double loanMoney,
    int loanTerm,
    String repaymentType,
    double mortgageRate,
    String loanUsage,
    String payment,
    double monthMaidRate,
    double overdueRate,
    double prepaymentRate,
    double feeRate,
    int createrId,
    String createDate,
    int createNode,
    String createUserName,
    String createNodeName,
    int projectType)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    this.repaymentType = repaymentType;
    this.mortgageRate = mortgageRate;
    setMortgageRateIsSet(true);
    this.loanUsage = loanUsage;
    this.payment = payment;
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    this.prepaymentRate = prepaymentRate;
    setPrepaymentRateIsSet(true);
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.createDate = createDate;
    this.createNode = createNode;
    setCreateNodeIsSet(true);
    this.createUserName = createUserName;
    this.createNodeName = createNodeName;
    this.projectType = projectType;
    setProjectTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizHisLoanInfo(BizHisLoanInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.loanMoney = other.loanMoney;
    this.loanTerm = other.loanTerm;
    if (other.isSetRepaymentType()) {
      this.repaymentType = other.repaymentType;
    }
    this.mortgageRate = other.mortgageRate;
    if (other.isSetLoanUsage()) {
      this.loanUsage = other.loanUsage;
    }
    if (other.isSetPayment()) {
      this.payment = other.payment;
    }
    this.monthMaidRate = other.monthMaidRate;
    this.overdueRate = other.overdueRate;
    this.prepaymentRate = other.prepaymentRate;
    this.feeRate = other.feeRate;
    this.createrId = other.createrId;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createNode = other.createNode;
    if (other.isSetCreateUserName()) {
      this.createUserName = other.createUserName;
    }
    if (other.isSetCreateNodeName()) {
      this.createNodeName = other.createNodeName;
    }
    this.projectType = other.projectType;
  }

  public BizHisLoanInfo deepCopy() {
    return new BizHisLoanInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setLoanTermIsSet(false);
    this.loanTerm = 0;
    this.repaymentType = null;
    setMortgageRateIsSet(false);
    this.mortgageRate = 0.0;
    this.loanUsage = null;
    this.payment = null;
    setMonthMaidRateIsSet(false);
    this.monthMaidRate = 0.0;
    setOverdueRateIsSet(false);
    this.overdueRate = 0.0;
    setPrepaymentRateIsSet(false);
    this.prepaymentRate = 0.0;
    setFeeRateIsSet(false);
    this.feeRate = 0.0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.createDate = null;
    setCreateNodeIsSet(false);
    this.createNode = 0;
    this.createUserName = null;
    this.createNodeName = null;
    setProjectTypeIsSet(false);
    this.projectType = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public BizHisLoanInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizHisLoanInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public BizHisLoanInfo setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public int getLoanTerm() {
    return this.loanTerm;
  }

  public BizHisLoanInfo setLoanTerm(int loanTerm) {
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    return this;
  }

  public void unsetLoanTerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  /** Returns true if field loanTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTerm() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  public void setLoanTermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANTERM_ISSET_ID, value);
  }

  public String getRepaymentType() {
    return this.repaymentType;
  }

  public BizHisLoanInfo setRepaymentType(String repaymentType) {
    this.repaymentType = repaymentType;
    return this;
  }

  public void unsetRepaymentType() {
    this.repaymentType = null;
  }

  /** Returns true if field repaymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentType() {
    return this.repaymentType != null;
  }

  public void setRepaymentTypeIsSet(boolean value) {
    if (!value) {
      this.repaymentType = null;
    }
  }

  public double getMortgageRate() {
    return this.mortgageRate;
  }

  public BizHisLoanInfo setMortgageRate(double mortgageRate) {
    this.mortgageRate = mortgageRate;
    setMortgageRateIsSet(true);
    return this;
  }

  public void unsetMortgageRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID);
  }

  /** Returns true if field mortgageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID);
  }

  public void setMortgageRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID, value);
  }

  public String getLoanUsage() {
    return this.loanUsage;
  }

  public BizHisLoanInfo setLoanUsage(String loanUsage) {
    this.loanUsage = loanUsage;
    return this;
  }

  public void unsetLoanUsage() {
    this.loanUsage = null;
  }

  /** Returns true if field loanUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanUsage() {
    return this.loanUsage != null;
  }

  public void setLoanUsageIsSet(boolean value) {
    if (!value) {
      this.loanUsage = null;
    }
  }

  public String getPayment() {
    return this.payment;
  }

  public BizHisLoanInfo setPayment(String payment) {
    this.payment = payment;
    return this;
  }

  public void unsetPayment() {
    this.payment = null;
  }

  /** Returns true if field payment is set (has been assigned a value) and false otherwise */
  public boolean isSetPayment() {
    return this.payment != null;
  }

  public void setPaymentIsSet(boolean value) {
    if (!value) {
      this.payment = null;
    }
  }

  public double getMonthMaidRate() {
    return this.monthMaidRate;
  }

  public BizHisLoanInfo setMonthMaidRate(double monthMaidRate) {
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    return this;
  }

  public void unsetMonthMaidRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  /** Returns true if field monthMaidRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthMaidRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  public void setMonthMaidRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID, value);
  }

  public double getOverdueRate() {
    return this.overdueRate;
  }

  public BizHisLoanInfo setOverdueRate(double overdueRate) {
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    return this;
  }

  public void unsetOverdueRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  /** Returns true if field overdueRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  public void setOverdueRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUERATE_ISSET_ID, value);
  }

  public double getPrepaymentRate() {
    return this.prepaymentRate;
  }

  public BizHisLoanInfo setPrepaymentRate(double prepaymentRate) {
    this.prepaymentRate = prepaymentRate;
    setPrepaymentRateIsSet(true);
    return this;
  }

  public void unsetPrepaymentRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREPAYMENTRATE_ISSET_ID);
  }

  /** Returns true if field prepaymentRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepaymentRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PREPAYMENTRATE_ISSET_ID);
  }

  public void setPrepaymentRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREPAYMENTRATE_ISSET_ID, value);
  }

  public double getFeeRate() {
    return this.feeRate;
  }

  public BizHisLoanInfo setFeeRate(double feeRate) {
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    return this;
  }

  public void unsetFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  /** Returns true if field feeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  public void setFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEERATE_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizHisLoanInfo setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public BizHisLoanInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreateNode() {
    return this.createNode;
  }

  public BizHisLoanInfo setCreateNode(int createNode) {
    this.createNode = createNode;
    setCreateNodeIsSet(true);
    return this;
  }

  public void unsetCreateNode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATENODE_ISSET_ID);
  }

  /** Returns true if field createNode is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateNode() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATENODE_ISSET_ID);
  }

  public void setCreateNodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATENODE_ISSET_ID, value);
  }

  public String getCreateUserName() {
    return this.createUserName;
  }

  public BizHisLoanInfo setCreateUserName(String createUserName) {
    this.createUserName = createUserName;
    return this;
  }

  public void unsetCreateUserName() {
    this.createUserName = null;
  }

  /** Returns true if field createUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUserName() {
    return this.createUserName != null;
  }

  public void setCreateUserNameIsSet(boolean value) {
    if (!value) {
      this.createUserName = null;
    }
  }

  public String getCreateNodeName() {
    return this.createNodeName;
  }

  public BizHisLoanInfo setCreateNodeName(String createNodeName) {
    this.createNodeName = createNodeName;
    return this;
  }

  public void unsetCreateNodeName() {
    this.createNodeName = null;
  }

  /** Returns true if field createNodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateNodeName() {
    return this.createNodeName != null;
  }

  public void setCreateNodeNameIsSet(boolean value) {
    if (!value) {
      this.createNodeName = null;
    }
  }

  public int getProjectType() {
    return this.projectType;
  }

  public BizHisLoanInfo setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case LOAN_TERM:
      if (value == null) {
        unsetLoanTerm();
      } else {
        setLoanTerm((Integer)value);
      }
      break;

    case REPAYMENT_TYPE:
      if (value == null) {
        unsetRepaymentType();
      } else {
        setRepaymentType((String)value);
      }
      break;

    case MORTGAGE_RATE:
      if (value == null) {
        unsetMortgageRate();
      } else {
        setMortgageRate((Double)value);
      }
      break;

    case LOAN_USAGE:
      if (value == null) {
        unsetLoanUsage();
      } else {
        setLoanUsage((String)value);
      }
      break;

    case PAYMENT:
      if (value == null) {
        unsetPayment();
      } else {
        setPayment((String)value);
      }
      break;

    case MONTH_MAID_RATE:
      if (value == null) {
        unsetMonthMaidRate();
      } else {
        setMonthMaidRate((Double)value);
      }
      break;

    case OVERDUE_RATE:
      if (value == null) {
        unsetOverdueRate();
      } else {
        setOverdueRate((Double)value);
      }
      break;

    case PREPAYMENT_RATE:
      if (value == null) {
        unsetPrepaymentRate();
      } else {
        setPrepaymentRate((Double)value);
      }
      break;

    case FEE_RATE:
      if (value == null) {
        unsetFeeRate();
      } else {
        setFeeRate((Double)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATE_NODE:
      if (value == null) {
        unsetCreateNode();
      } else {
        setCreateNode((Integer)value);
      }
      break;

    case CREATE_USER_NAME:
      if (value == null) {
        unsetCreateUserName();
      } else {
        setCreateUserName((String)value);
      }
      break;

    case CREATE_NODE_NAME:
      if (value == null) {
        unsetCreateNodeName();
      } else {
        setCreateNodeName((String)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case LOAN_TERM:
      return Integer.valueOf(getLoanTerm());

    case REPAYMENT_TYPE:
      return getRepaymentType();

    case MORTGAGE_RATE:
      return Double.valueOf(getMortgageRate());

    case LOAN_USAGE:
      return getLoanUsage();

    case PAYMENT:
      return getPayment();

    case MONTH_MAID_RATE:
      return Double.valueOf(getMonthMaidRate());

    case OVERDUE_RATE:
      return Double.valueOf(getOverdueRate());

    case PREPAYMENT_RATE:
      return Double.valueOf(getPrepaymentRate());

    case FEE_RATE:
      return Double.valueOf(getFeeRate());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case CREATE_DATE:
      return getCreateDate();

    case CREATE_NODE:
      return Integer.valueOf(getCreateNode());

    case CREATE_USER_NAME:
      return getCreateUserName();

    case CREATE_NODE_NAME:
      return getCreateNodeName();

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case LOAN_TERM:
      return isSetLoanTerm();
    case REPAYMENT_TYPE:
      return isSetRepaymentType();
    case MORTGAGE_RATE:
      return isSetMortgageRate();
    case LOAN_USAGE:
      return isSetLoanUsage();
    case PAYMENT:
      return isSetPayment();
    case MONTH_MAID_RATE:
      return isSetMonthMaidRate();
    case OVERDUE_RATE:
      return isSetOverdueRate();
    case PREPAYMENT_RATE:
      return isSetPrepaymentRate();
    case FEE_RATE:
      return isSetFeeRate();
    case CREATER_ID:
      return isSetCreaterId();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATE_NODE:
      return isSetCreateNode();
    case CREATE_USER_NAME:
      return isSetCreateUserName();
    case CREATE_NODE_NAME:
      return isSetCreateNodeName();
    case PROJECT_TYPE:
      return isSetProjectType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizHisLoanInfo)
      return this.equals((BizHisLoanInfo)that);
    return false;
  }

  public boolean equals(BizHisLoanInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_loanTerm = true;
    boolean that_present_loanTerm = true;
    if (this_present_loanTerm || that_present_loanTerm) {
      if (!(this_present_loanTerm && that_present_loanTerm))
        return false;
      if (this.loanTerm != that.loanTerm)
        return false;
    }

    boolean this_present_repaymentType = true && this.isSetRepaymentType();
    boolean that_present_repaymentType = true && that.isSetRepaymentType();
    if (this_present_repaymentType || that_present_repaymentType) {
      if (!(this_present_repaymentType && that_present_repaymentType))
        return false;
      if (!this.repaymentType.equals(that.repaymentType))
        return false;
    }

    boolean this_present_mortgageRate = true;
    boolean that_present_mortgageRate = true;
    if (this_present_mortgageRate || that_present_mortgageRate) {
      if (!(this_present_mortgageRate && that_present_mortgageRate))
        return false;
      if (this.mortgageRate != that.mortgageRate)
        return false;
    }

    boolean this_present_loanUsage = true && this.isSetLoanUsage();
    boolean that_present_loanUsage = true && that.isSetLoanUsage();
    if (this_present_loanUsage || that_present_loanUsage) {
      if (!(this_present_loanUsage && that_present_loanUsage))
        return false;
      if (!this.loanUsage.equals(that.loanUsage))
        return false;
    }

    boolean this_present_payment = true && this.isSetPayment();
    boolean that_present_payment = true && that.isSetPayment();
    if (this_present_payment || that_present_payment) {
      if (!(this_present_payment && that_present_payment))
        return false;
      if (!this.payment.equals(that.payment))
        return false;
    }

    boolean this_present_monthMaidRate = true;
    boolean that_present_monthMaidRate = true;
    if (this_present_monthMaidRate || that_present_monthMaidRate) {
      if (!(this_present_monthMaidRate && that_present_monthMaidRate))
        return false;
      if (this.monthMaidRate != that.monthMaidRate)
        return false;
    }

    boolean this_present_overdueRate = true;
    boolean that_present_overdueRate = true;
    if (this_present_overdueRate || that_present_overdueRate) {
      if (!(this_present_overdueRate && that_present_overdueRate))
        return false;
      if (this.overdueRate != that.overdueRate)
        return false;
    }

    boolean this_present_prepaymentRate = true;
    boolean that_present_prepaymentRate = true;
    if (this_present_prepaymentRate || that_present_prepaymentRate) {
      if (!(this_present_prepaymentRate && that_present_prepaymentRate))
        return false;
      if (this.prepaymentRate != that.prepaymentRate)
        return false;
    }

    boolean this_present_feeRate = true;
    boolean that_present_feeRate = true;
    if (this_present_feeRate || that_present_feeRate) {
      if (!(this_present_feeRate && that_present_feeRate))
        return false;
      if (this.feeRate != that.feeRate)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createNode = true;
    boolean that_present_createNode = true;
    if (this_present_createNode || that_present_createNode) {
      if (!(this_present_createNode && that_present_createNode))
        return false;
      if (this.createNode != that.createNode)
        return false;
    }

    boolean this_present_createUserName = true && this.isSetCreateUserName();
    boolean that_present_createUserName = true && that.isSetCreateUserName();
    if (this_present_createUserName || that_present_createUserName) {
      if (!(this_present_createUserName && that_present_createUserName))
        return false;
      if (!this.createUserName.equals(that.createUserName))
        return false;
    }

    boolean this_present_createNodeName = true && this.isSetCreateNodeName();
    boolean that_present_createNodeName = true && that.isSetCreateNodeName();
    if (this_present_createNodeName || that_present_createNodeName) {
      if (!(this_present_createNodeName && that_present_createNodeName))
        return false;
      if (!this.createNodeName.equals(that.createNodeName))
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_loanTerm = true;
    list.add(present_loanTerm);
    if (present_loanTerm)
      list.add(loanTerm);

    boolean present_repaymentType = true && (isSetRepaymentType());
    list.add(present_repaymentType);
    if (present_repaymentType)
      list.add(repaymentType);

    boolean present_mortgageRate = true;
    list.add(present_mortgageRate);
    if (present_mortgageRate)
      list.add(mortgageRate);

    boolean present_loanUsage = true && (isSetLoanUsage());
    list.add(present_loanUsage);
    if (present_loanUsage)
      list.add(loanUsage);

    boolean present_payment = true && (isSetPayment());
    list.add(present_payment);
    if (present_payment)
      list.add(payment);

    boolean present_monthMaidRate = true;
    list.add(present_monthMaidRate);
    if (present_monthMaidRate)
      list.add(monthMaidRate);

    boolean present_overdueRate = true;
    list.add(present_overdueRate);
    if (present_overdueRate)
      list.add(overdueRate);

    boolean present_prepaymentRate = true;
    list.add(present_prepaymentRate);
    if (present_prepaymentRate)
      list.add(prepaymentRate);

    boolean present_feeRate = true;
    list.add(present_feeRate);
    if (present_feeRate)
      list.add(feeRate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createNode = true;
    list.add(present_createNode);
    if (present_createNode)
      list.add(createNode);

    boolean present_createUserName = true && (isSetCreateUserName());
    list.add(present_createUserName);
    if (present_createUserName)
      list.add(createUserName);

    boolean present_createNodeName = true && (isSetCreateNodeName());
    list.add(present_createNodeName);
    if (present_createNodeName)
      list.add(createNodeName);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizHisLoanInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTerm()).compareTo(other.isSetLoanTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTerm, other.loanTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentType()).compareTo(other.isSetRepaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentType, other.repaymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageRate()).compareTo(other.isSetMortgageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageRate, other.mortgageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanUsage()).compareTo(other.isSetLoanUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanUsage, other.loanUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayment()).compareTo(other.isSetPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payment, other.payment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthMaidRate()).compareTo(other.isSetMonthMaidRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthMaidRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthMaidRate, other.monthMaidRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueRate()).compareTo(other.isSetOverdueRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueRate, other.overdueRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrepaymentRate()).compareTo(other.isSetPrepaymentRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepaymentRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepaymentRate, other.prepaymentRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeRate()).compareTo(other.isSetFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeRate, other.feeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateNode()).compareTo(other.isSetCreateNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createNode, other.createNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUserName()).compareTo(other.isSetCreateUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUserName, other.createUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateNodeName()).compareTo(other.isSetCreateNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createNodeName, other.createNodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizHisLoanInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTerm:");
    sb.append(this.loanTerm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentType:");
    if (this.repaymentType == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageRate:");
    sb.append(this.mortgageRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanUsage:");
    if (this.loanUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.loanUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payment:");
    if (this.payment == null) {
      sb.append("null");
    } else {
      sb.append(this.payment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthMaidRate:");
    sb.append(this.monthMaidRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueRate:");
    sb.append(this.overdueRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prepaymentRate:");
    sb.append(this.prepaymentRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeRate:");
    sb.append(this.feeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createNode:");
    sb.append(this.createNode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUserName:");
    if (this.createUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.createUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createNodeName:");
    if (this.createNodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.createNodeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizHisLoanInfoStandardSchemeFactory implements SchemeFactory {
    public BizHisLoanInfoStandardScheme getScheme() {
      return new BizHisLoanInfoStandardScheme();
    }
  }

  private static class BizHisLoanInfoStandardScheme extends StandardScheme<BizHisLoanInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizHisLoanInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanTerm = iprot.readI32();
              struct.setLoanTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentType = iprot.readString();
              struct.setRepaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MORTGAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mortgageRate = iprot.readDouble();
              struct.setMortgageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanUsage = iprot.readString();
              struct.setLoanUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payment = iprot.readString();
              struct.setPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MONTH_MAID_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthMaidRate = iprot.readDouble();
              struct.setMonthMaidRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OVERDUE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueRate = iprot.readDouble();
              struct.setOverdueRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PREPAYMENT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prepaymentRate = iprot.readDouble();
              struct.setPrepaymentRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeRate = iprot.readDouble();
              struct.setFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createNode = iprot.readI32();
              struct.setCreateNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createUserName = iprot.readString();
              struct.setCreateUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createNodeName = iprot.readString();
              struct.setCreateNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizHisLoanInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_TERM_FIELD_DESC);
      oprot.writeI32(struct.loanTerm);
      oprot.writeFieldEnd();
      if (struct.repaymentType != null) {
        oprot.writeFieldBegin(REPAYMENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.repaymentType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MORTGAGE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.mortgageRate);
      oprot.writeFieldEnd();
      if (struct.loanUsage != null) {
        oprot.writeFieldBegin(LOAN_USAGE_FIELD_DESC);
        oprot.writeString(struct.loanUsage);
        oprot.writeFieldEnd();
      }
      if (struct.payment != null) {
        oprot.writeFieldBegin(PAYMENT_FIELD_DESC);
        oprot.writeString(struct.payment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTH_MAID_RATE_FIELD_DESC);
      oprot.writeDouble(struct.monthMaidRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.overdueRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREPAYMENT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.prepaymentRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.feeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_NODE_FIELD_DESC);
      oprot.writeI32(struct.createNode);
      oprot.writeFieldEnd();
      if (struct.createUserName != null) {
        oprot.writeFieldBegin(CREATE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.createUserName);
        oprot.writeFieldEnd();
      }
      if (struct.createNodeName != null) {
        oprot.writeFieldBegin(CREATE_NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.createNodeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizHisLoanInfoTupleSchemeFactory implements SchemeFactory {
    public BizHisLoanInfoTupleScheme getScheme() {
      return new BizHisLoanInfoTupleScheme();
    }
  }

  private static class BizHisLoanInfoTupleScheme extends TupleScheme<BizHisLoanInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizHisLoanInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(2);
      }
      if (struct.isSetLoanTerm()) {
        optionals.set(3);
      }
      if (struct.isSetRepaymentType()) {
        optionals.set(4);
      }
      if (struct.isSetMortgageRate()) {
        optionals.set(5);
      }
      if (struct.isSetLoanUsage()) {
        optionals.set(6);
      }
      if (struct.isSetPayment()) {
        optionals.set(7);
      }
      if (struct.isSetMonthMaidRate()) {
        optionals.set(8);
      }
      if (struct.isSetOverdueRate()) {
        optionals.set(9);
      }
      if (struct.isSetPrepaymentRate()) {
        optionals.set(10);
      }
      if (struct.isSetFeeRate()) {
        optionals.set(11);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(12);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(13);
      }
      if (struct.isSetCreateNode()) {
        optionals.set(14);
      }
      if (struct.isSetCreateUserName()) {
        optionals.set(15);
      }
      if (struct.isSetCreateNodeName()) {
        optionals.set(16);
      }
      if (struct.isSetProjectType()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetLoanTerm()) {
        oprot.writeI32(struct.loanTerm);
      }
      if (struct.isSetRepaymentType()) {
        oprot.writeString(struct.repaymentType);
      }
      if (struct.isSetMortgageRate()) {
        oprot.writeDouble(struct.mortgageRate);
      }
      if (struct.isSetLoanUsage()) {
        oprot.writeString(struct.loanUsage);
      }
      if (struct.isSetPayment()) {
        oprot.writeString(struct.payment);
      }
      if (struct.isSetMonthMaidRate()) {
        oprot.writeDouble(struct.monthMaidRate);
      }
      if (struct.isSetOverdueRate()) {
        oprot.writeDouble(struct.overdueRate);
      }
      if (struct.isSetPrepaymentRate()) {
        oprot.writeDouble(struct.prepaymentRate);
      }
      if (struct.isSetFeeRate()) {
        oprot.writeDouble(struct.feeRate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreateNode()) {
        oprot.writeI32(struct.createNode);
      }
      if (struct.isSetCreateUserName()) {
        oprot.writeString(struct.createUserName);
      }
      if (struct.isSetCreateNodeName()) {
        oprot.writeString(struct.createNodeName);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizHisLoanInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanTerm = iprot.readI32();
        struct.setLoanTermIsSet(true);
      }
      if (incoming.get(4)) {
        struct.repaymentType = iprot.readString();
        struct.setRepaymentTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mortgageRate = iprot.readDouble();
        struct.setMortgageRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanUsage = iprot.readString();
        struct.setLoanUsageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.payment = iprot.readString();
        struct.setPaymentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.monthMaidRate = iprot.readDouble();
        struct.setMonthMaidRateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.overdueRate = iprot.readDouble();
        struct.setOverdueRateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.prepaymentRate = iprot.readDouble();
        struct.setPrepaymentRateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.feeRate = iprot.readDouble();
        struct.setFeeRateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createNode = iprot.readI32();
        struct.setCreateNodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createUserName = iprot.readString();
        struct.setCreateUserNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createNodeName = iprot.readString();
        struct.setCreateNodeNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class LoanOutputInfo implements org.apache.thrift.TBase<LoanOutputInfo, LoanOutputInfo._Fields>, java.io.Serializable, Cloneable, Comparable<LoanOutputInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanOutputInfo");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SHOULD_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SHOULD_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DIF_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("difAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("outputDesc", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TENDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tenderType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FT_BANK_ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ftBankAcctId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ftUserId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField FT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ftUserName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanOutputInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanOutputInfoTupleSchemeFactory());
  }

  public int pId; // required
  public int loanId; // required
  public double shouldAmt; // required
  public String shouldDate; // required
  public double difAmt; // required
  public String outputDesc; // required
  public int refId; // required
  public String ftType; // required
  public String tenderType; // required
  public double ftAmt; // required
  public String ftDate; // required
  public String ftBankAcctId; // required
  public int ftUserId; // required
  public String ftUserName; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    LOAN_ID((short)2, "loanId"),
    SHOULD_AMT((short)3, "shouldAmt"),
    SHOULD_DATE((short)4, "shouldDate"),
    DIF_AMT((short)5, "difAmt"),
    OUTPUT_DESC((short)6, "outputDesc"),
    REF_ID((short)7, "refId"),
    FT_TYPE((short)8, "ftType"),
    TENDER_TYPE((short)9, "tenderType"),
    FT_AMT((short)10, "ftAmt"),
    FT_DATE((short)11, "ftDate"),
    FT_BANK_ACCT_ID((short)12, "ftBankAcctId"),
    FT_USER_ID((short)13, "ftUserId"),
    FT_USER_NAME((short)14, "ftUserName"),
    STATUS((short)15, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // SHOULD_AMT
          return SHOULD_AMT;
        case 4: // SHOULD_DATE
          return SHOULD_DATE;
        case 5: // DIF_AMT
          return DIF_AMT;
        case 6: // OUTPUT_DESC
          return OUTPUT_DESC;
        case 7: // REF_ID
          return REF_ID;
        case 8: // FT_TYPE
          return FT_TYPE;
        case 9: // TENDER_TYPE
          return TENDER_TYPE;
        case 10: // FT_AMT
          return FT_AMT;
        case 11: // FT_DATE
          return FT_DATE;
        case 12: // FT_BANK_ACCT_ID
          return FT_BANK_ACCT_ID;
        case 13: // FT_USER_ID
          return FT_USER_ID;
        case 14: // FT_USER_NAME
          return FT_USER_NAME;
        case 15: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __SHOULDAMT_ISSET_ID = 2;
  private static final int __DIFAMT_ISSET_ID = 3;
  private static final int __REFID_ISSET_ID = 4;
  private static final int __FTAMT_ISSET_ID = 5;
  private static final int __FTUSERID_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_AMT, new org.apache.thrift.meta_data.FieldMetaData("shouldAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_DATE, new org.apache.thrift.meta_data.FieldMetaData("shouldDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIF_AMT, new org.apache.thrift.meta_data.FieldMetaData("difAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTPUT_DESC, new org.apache.thrift.meta_data.FieldMetaData("outputDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tenderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_AMT, new org.apache.thrift.meta_data.FieldMetaData("ftAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FT_DATE, new org.apache.thrift.meta_data.FieldMetaData("ftDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_BANK_ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("ftBankAcctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("ftUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("ftUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanOutputInfo.class, metaDataMap);
  }

  public LoanOutputInfo() {
  }

  public LoanOutputInfo(
    int pId,
    int loanId,
    double shouldAmt,
    String shouldDate,
    double difAmt,
    String outputDesc,
    int refId,
    String ftType,
    String tenderType,
    double ftAmt,
    String ftDate,
    String ftBankAcctId,
    int ftUserId,
    String ftUserName,
    int status)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.shouldAmt = shouldAmt;
    setShouldAmtIsSet(true);
    this.shouldDate = shouldDate;
    this.difAmt = difAmt;
    setDifAmtIsSet(true);
    this.outputDesc = outputDesc;
    this.refId = refId;
    setRefIdIsSet(true);
    this.ftType = ftType;
    this.tenderType = tenderType;
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    this.ftDate = ftDate;
    this.ftBankAcctId = ftBankAcctId;
    this.ftUserId = ftUserId;
    setFtUserIdIsSet(true);
    this.ftUserName = ftUserName;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanOutputInfo(LoanOutputInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    this.loanId = other.loanId;
    this.shouldAmt = other.shouldAmt;
    if (other.isSetShouldDate()) {
      this.shouldDate = other.shouldDate;
    }
    this.difAmt = other.difAmt;
    if (other.isSetOutputDesc()) {
      this.outputDesc = other.outputDesc;
    }
    this.refId = other.refId;
    if (other.isSetFtType()) {
      this.ftType = other.ftType;
    }
    if (other.isSetTenderType()) {
      this.tenderType = other.tenderType;
    }
    this.ftAmt = other.ftAmt;
    if (other.isSetFtDate()) {
      this.ftDate = other.ftDate;
    }
    if (other.isSetFtBankAcctId()) {
      this.ftBankAcctId = other.ftBankAcctId;
    }
    this.ftUserId = other.ftUserId;
    if (other.isSetFtUserName()) {
      this.ftUserName = other.ftUserName;
    }
    this.status = other.status;
  }

  public LoanOutputInfo deepCopy() {
    return new LoanOutputInfo(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setShouldAmtIsSet(false);
    this.shouldAmt = 0.0;
    this.shouldDate = null;
    setDifAmtIsSet(false);
    this.difAmt = 0.0;
    this.outputDesc = null;
    setRefIdIsSet(false);
    this.refId = 0;
    this.ftType = null;
    this.tenderType = null;
    setFtAmtIsSet(false);
    this.ftAmt = 0.0;
    this.ftDate = null;
    this.ftBankAcctId = null;
    setFtUserIdIsSet(false);
    this.ftUserId = 0;
    this.ftUserName = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPId() {
    return this.pId;
  }

  public LoanOutputInfo setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public LoanOutputInfo setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public double getShouldAmt() {
    return this.shouldAmt;
  }

  public LoanOutputInfo setShouldAmt(double shouldAmt) {
    this.shouldAmt = shouldAmt;
    setShouldAmtIsSet(true);
    return this;
  }

  public void unsetShouldAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDAMT_ISSET_ID);
  }

  /** Returns true if field shouldAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDAMT_ISSET_ID);
  }

  public void setShouldAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDAMT_ISSET_ID, value);
  }

  public String getShouldDate() {
    return this.shouldDate;
  }

  public LoanOutputInfo setShouldDate(String shouldDate) {
    this.shouldDate = shouldDate;
    return this;
  }

  public void unsetShouldDate() {
    this.shouldDate = null;
  }

  /** Returns true if field shouldDate is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldDate() {
    return this.shouldDate != null;
  }

  public void setShouldDateIsSet(boolean value) {
    if (!value) {
      this.shouldDate = null;
    }
  }

  public double getDifAmt() {
    return this.difAmt;
  }

  public LoanOutputInfo setDifAmt(double difAmt) {
    this.difAmt = difAmt;
    setDifAmtIsSet(true);
    return this;
  }

  public void unsetDifAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFAMT_ISSET_ID);
  }

  /** Returns true if field difAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDifAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFAMT_ISSET_ID);
  }

  public void setDifAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFAMT_ISSET_ID, value);
  }

  public String getOutputDesc() {
    return this.outputDesc;
  }

  public LoanOutputInfo setOutputDesc(String outputDesc) {
    this.outputDesc = outputDesc;
    return this;
  }

  public void unsetOutputDesc() {
    this.outputDesc = null;
  }

  /** Returns true if field outputDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputDesc() {
    return this.outputDesc != null;
  }

  public void setOutputDescIsSet(boolean value) {
    if (!value) {
      this.outputDesc = null;
    }
  }

  public int getRefId() {
    return this.refId;
  }

  public LoanOutputInfo setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public String getFtType() {
    return this.ftType;
  }

  public LoanOutputInfo setFtType(String ftType) {
    this.ftType = ftType;
    return this;
  }

  public void unsetFtType() {
    this.ftType = null;
  }

  /** Returns true if field ftType is set (has been assigned a value) and false otherwise */
  public boolean isSetFtType() {
    return this.ftType != null;
  }

  public void setFtTypeIsSet(boolean value) {
    if (!value) {
      this.ftType = null;
    }
  }

  public String getTenderType() {
    return this.tenderType;
  }

  public LoanOutputInfo setTenderType(String tenderType) {
    this.tenderType = tenderType;
    return this;
  }

  public void unsetTenderType() {
    this.tenderType = null;
  }

  /** Returns true if field tenderType is set (has been assigned a value) and false otherwise */
  public boolean isSetTenderType() {
    return this.tenderType != null;
  }

  public void setTenderTypeIsSet(boolean value) {
    if (!value) {
      this.tenderType = null;
    }
  }

  public double getFtAmt() {
    return this.ftAmt;
  }

  public LoanOutputInfo setFtAmt(double ftAmt) {
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    return this;
  }

  public void unsetFtAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  /** Returns true if field ftAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  public void setFtAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTAMT_ISSET_ID, value);
  }

  public String getFtDate() {
    return this.ftDate;
  }

  public LoanOutputInfo setFtDate(String ftDate) {
    this.ftDate = ftDate;
    return this;
  }

  public void unsetFtDate() {
    this.ftDate = null;
  }

  /** Returns true if field ftDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFtDate() {
    return this.ftDate != null;
  }

  public void setFtDateIsSet(boolean value) {
    if (!value) {
      this.ftDate = null;
    }
  }

  public String getFtBankAcctId() {
    return this.ftBankAcctId;
  }

  public LoanOutputInfo setFtBankAcctId(String ftBankAcctId) {
    this.ftBankAcctId = ftBankAcctId;
    return this;
  }

  public void unsetFtBankAcctId() {
    this.ftBankAcctId = null;
  }

  /** Returns true if field ftBankAcctId is set (has been assigned a value) and false otherwise */
  public boolean isSetFtBankAcctId() {
    return this.ftBankAcctId != null;
  }

  public void setFtBankAcctIdIsSet(boolean value) {
    if (!value) {
      this.ftBankAcctId = null;
    }
  }

  public int getFtUserId() {
    return this.ftUserId;
  }

  public LoanOutputInfo setFtUserId(int ftUserId) {
    this.ftUserId = ftUserId;
    setFtUserIdIsSet(true);
    return this;
  }

  public void unsetFtUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTUSERID_ISSET_ID);
  }

  /** Returns true if field ftUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetFtUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __FTUSERID_ISSET_ID);
  }

  public void setFtUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTUSERID_ISSET_ID, value);
  }

  public String getFtUserName() {
    return this.ftUserName;
  }

  public LoanOutputInfo setFtUserName(String ftUserName) {
    this.ftUserName = ftUserName;
    return this;
  }

  public void unsetFtUserName() {
    this.ftUserName = null;
  }

  /** Returns true if field ftUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetFtUserName() {
    return this.ftUserName != null;
  }

  public void setFtUserNameIsSet(boolean value) {
    if (!value) {
      this.ftUserName = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public LoanOutputInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case SHOULD_AMT:
      if (value == null) {
        unsetShouldAmt();
      } else {
        setShouldAmt((Double)value);
      }
      break;

    case SHOULD_DATE:
      if (value == null) {
        unsetShouldDate();
      } else {
        setShouldDate((String)value);
      }
      break;

    case DIF_AMT:
      if (value == null) {
        unsetDifAmt();
      } else {
        setDifAmt((Double)value);
      }
      break;

    case OUTPUT_DESC:
      if (value == null) {
        unsetOutputDesc();
      } else {
        setOutputDesc((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFtType();
      } else {
        setFtType((String)value);
      }
      break;

    case TENDER_TYPE:
      if (value == null) {
        unsetTenderType();
      } else {
        setTenderType((String)value);
      }
      break;

    case FT_AMT:
      if (value == null) {
        unsetFtAmt();
      } else {
        setFtAmt((Double)value);
      }
      break;

    case FT_DATE:
      if (value == null) {
        unsetFtDate();
      } else {
        setFtDate((String)value);
      }
      break;

    case FT_BANK_ACCT_ID:
      if (value == null) {
        unsetFtBankAcctId();
      } else {
        setFtBankAcctId((String)value);
      }
      break;

    case FT_USER_ID:
      if (value == null) {
        unsetFtUserId();
      } else {
        setFtUserId((Integer)value);
      }
      break;

    case FT_USER_NAME:
      if (value == null) {
        unsetFtUserName();
      } else {
        setFtUserName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case SHOULD_AMT:
      return Double.valueOf(getShouldAmt());

    case SHOULD_DATE:
      return getShouldDate();

    case DIF_AMT:
      return Double.valueOf(getDifAmt());

    case OUTPUT_DESC:
      return getOutputDesc();

    case REF_ID:
      return Integer.valueOf(getRefId());

    case FT_TYPE:
      return getFtType();

    case TENDER_TYPE:
      return getTenderType();

    case FT_AMT:
      return Double.valueOf(getFtAmt());

    case FT_DATE:
      return getFtDate();

    case FT_BANK_ACCT_ID:
      return getFtBankAcctId();

    case FT_USER_ID:
      return Integer.valueOf(getFtUserId());

    case FT_USER_NAME:
      return getFtUserName();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case LOAN_ID:
      return isSetLoanId();
    case SHOULD_AMT:
      return isSetShouldAmt();
    case SHOULD_DATE:
      return isSetShouldDate();
    case DIF_AMT:
      return isSetDifAmt();
    case OUTPUT_DESC:
      return isSetOutputDesc();
    case REF_ID:
      return isSetRefId();
    case FT_TYPE:
      return isSetFtType();
    case TENDER_TYPE:
      return isSetTenderType();
    case FT_AMT:
      return isSetFtAmt();
    case FT_DATE:
      return isSetFtDate();
    case FT_BANK_ACCT_ID:
      return isSetFtBankAcctId();
    case FT_USER_ID:
      return isSetFtUserId();
    case FT_USER_NAME:
      return isSetFtUserName();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanOutputInfo)
      return this.equals((LoanOutputInfo)that);
    return false;
  }

  public boolean equals(LoanOutputInfo that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_shouldAmt = true;
    boolean that_present_shouldAmt = true;
    if (this_present_shouldAmt || that_present_shouldAmt) {
      if (!(this_present_shouldAmt && that_present_shouldAmt))
        return false;
      if (this.shouldAmt != that.shouldAmt)
        return false;
    }

    boolean this_present_shouldDate = true && this.isSetShouldDate();
    boolean that_present_shouldDate = true && that.isSetShouldDate();
    if (this_present_shouldDate || that_present_shouldDate) {
      if (!(this_present_shouldDate && that_present_shouldDate))
        return false;
      if (!this.shouldDate.equals(that.shouldDate))
        return false;
    }

    boolean this_present_difAmt = true;
    boolean that_present_difAmt = true;
    if (this_present_difAmt || that_present_difAmt) {
      if (!(this_present_difAmt && that_present_difAmt))
        return false;
      if (this.difAmt != that.difAmt)
        return false;
    }

    boolean this_present_outputDesc = true && this.isSetOutputDesc();
    boolean that_present_outputDesc = true && that.isSetOutputDesc();
    if (this_present_outputDesc || that_present_outputDesc) {
      if (!(this_present_outputDesc && that_present_outputDesc))
        return false;
      if (!this.outputDesc.equals(that.outputDesc))
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_ftType = true && this.isSetFtType();
    boolean that_present_ftType = true && that.isSetFtType();
    if (this_present_ftType || that_present_ftType) {
      if (!(this_present_ftType && that_present_ftType))
        return false;
      if (!this.ftType.equals(that.ftType))
        return false;
    }

    boolean this_present_tenderType = true && this.isSetTenderType();
    boolean that_present_tenderType = true && that.isSetTenderType();
    if (this_present_tenderType || that_present_tenderType) {
      if (!(this_present_tenderType && that_present_tenderType))
        return false;
      if (!this.tenderType.equals(that.tenderType))
        return false;
    }

    boolean this_present_ftAmt = true;
    boolean that_present_ftAmt = true;
    if (this_present_ftAmt || that_present_ftAmt) {
      if (!(this_present_ftAmt && that_present_ftAmt))
        return false;
      if (this.ftAmt != that.ftAmt)
        return false;
    }

    boolean this_present_ftDate = true && this.isSetFtDate();
    boolean that_present_ftDate = true && that.isSetFtDate();
    if (this_present_ftDate || that_present_ftDate) {
      if (!(this_present_ftDate && that_present_ftDate))
        return false;
      if (!this.ftDate.equals(that.ftDate))
        return false;
    }

    boolean this_present_ftBankAcctId = true && this.isSetFtBankAcctId();
    boolean that_present_ftBankAcctId = true && that.isSetFtBankAcctId();
    if (this_present_ftBankAcctId || that_present_ftBankAcctId) {
      if (!(this_present_ftBankAcctId && that_present_ftBankAcctId))
        return false;
      if (!this.ftBankAcctId.equals(that.ftBankAcctId))
        return false;
    }

    boolean this_present_ftUserId = true;
    boolean that_present_ftUserId = true;
    if (this_present_ftUserId || that_present_ftUserId) {
      if (!(this_present_ftUserId && that_present_ftUserId))
        return false;
      if (this.ftUserId != that.ftUserId)
        return false;
    }

    boolean this_present_ftUserName = true && this.isSetFtUserName();
    boolean that_present_ftUserName = true && that.isSetFtUserName();
    if (this_present_ftUserName || that_present_ftUserName) {
      if (!(this_present_ftUserName && that_present_ftUserName))
        return false;
      if (!this.ftUserName.equals(that.ftUserName))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_shouldAmt = true;
    list.add(present_shouldAmt);
    if (present_shouldAmt)
      list.add(shouldAmt);

    boolean present_shouldDate = true && (isSetShouldDate());
    list.add(present_shouldDate);
    if (present_shouldDate)
      list.add(shouldDate);

    boolean present_difAmt = true;
    list.add(present_difAmt);
    if (present_difAmt)
      list.add(difAmt);

    boolean present_outputDesc = true && (isSetOutputDesc());
    list.add(present_outputDesc);
    if (present_outputDesc)
      list.add(outputDesc);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_ftType = true && (isSetFtType());
    list.add(present_ftType);
    if (present_ftType)
      list.add(ftType);

    boolean present_tenderType = true && (isSetTenderType());
    list.add(present_tenderType);
    if (present_tenderType)
      list.add(tenderType);

    boolean present_ftAmt = true;
    list.add(present_ftAmt);
    if (present_ftAmt)
      list.add(ftAmt);

    boolean present_ftDate = true && (isSetFtDate());
    list.add(present_ftDate);
    if (present_ftDate)
      list.add(ftDate);

    boolean present_ftBankAcctId = true && (isSetFtBankAcctId());
    list.add(present_ftBankAcctId);
    if (present_ftBankAcctId)
      list.add(ftBankAcctId);

    boolean present_ftUserId = true;
    list.add(present_ftUserId);
    if (present_ftUserId)
      list.add(ftUserId);

    boolean present_ftUserName = true && (isSetFtUserName());
    list.add(present_ftUserName);
    if (present_ftUserName)
      list.add(ftUserName);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanOutputInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldAmt()).compareTo(other.isSetShouldAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldAmt, other.shouldAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldDate()).compareTo(other.isSetShouldDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldDate, other.shouldDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDifAmt()).compareTo(other.isSetDifAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.difAmt, other.difAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputDesc()).compareTo(other.isSetOutputDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputDesc, other.outputDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtType()).compareTo(other.isSetFtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftType, other.ftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenderType()).compareTo(other.isSetTenderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenderType, other.tenderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtAmt()).compareTo(other.isSetFtAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftAmt, other.ftAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtDate()).compareTo(other.isSetFtDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftDate, other.ftDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtBankAcctId()).compareTo(other.isSetFtBankAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtBankAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftBankAcctId, other.ftBankAcctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtUserId()).compareTo(other.isSetFtUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftUserId, other.ftUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtUserName()).compareTo(other.isSetFtUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftUserName, other.ftUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanOutputInfo(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldAmt:");
    sb.append(this.shouldAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldDate:");
    if (this.shouldDate == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("difAmt:");
    sb.append(this.difAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputDesc:");
    if (this.outputDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.outputDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftType:");
    if (this.ftType == null) {
      sb.append("null");
    } else {
      sb.append(this.ftType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenderType:");
    if (this.tenderType == null) {
      sb.append("null");
    } else {
      sb.append(this.tenderType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftAmt:");
    sb.append(this.ftAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftDate:");
    if (this.ftDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ftDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftBankAcctId:");
    if (this.ftBankAcctId == null) {
      sb.append("null");
    } else {
      sb.append(this.ftBankAcctId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftUserId:");
    sb.append(this.ftUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftUserName:");
    if (this.ftUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.ftUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanOutputInfoStandardSchemeFactory implements SchemeFactory {
    public LoanOutputInfoStandardScheme getScheme() {
      return new LoanOutputInfoStandardScheme();
    }
  }

  private static class LoanOutputInfoStandardScheme extends StandardScheme<LoanOutputInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanOutputInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOULD_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldAmt = iprot.readDouble();
              struct.setShouldAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOULD_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldDate = iprot.readString();
              struct.setShouldDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIF_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.difAmt = iprot.readDouble();
              struct.setDifAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputDesc = iprot.readString();
              struct.setOutputDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftType = iprot.readString();
              struct.setFtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TENDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenderType = iprot.readString();
              struct.setTenderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ftAmt = iprot.readDouble();
              struct.setFtAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftDate = iprot.readString();
              struct.setFtDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FT_BANK_ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftBankAcctId = iprot.readString();
              struct.setFtBankAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftUserId = iprot.readI32();
              struct.setFtUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftUserName = iprot.readString();
              struct.setFtUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanOutputInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_AMT_FIELD_DESC);
      oprot.writeDouble(struct.shouldAmt);
      oprot.writeFieldEnd();
      if (struct.shouldDate != null) {
        oprot.writeFieldBegin(SHOULD_DATE_FIELD_DESC);
        oprot.writeString(struct.shouldDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIF_AMT_FIELD_DESC);
      oprot.writeDouble(struct.difAmt);
      oprot.writeFieldEnd();
      if (struct.outputDesc != null) {
        oprot.writeFieldBegin(OUTPUT_DESC_FIELD_DESC);
        oprot.writeString(struct.outputDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      if (struct.ftType != null) {
        oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
        oprot.writeString(struct.ftType);
        oprot.writeFieldEnd();
      }
      if (struct.tenderType != null) {
        oprot.writeFieldBegin(TENDER_TYPE_FIELD_DESC);
        oprot.writeString(struct.tenderType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.ftAmt);
      oprot.writeFieldEnd();
      if (struct.ftDate != null) {
        oprot.writeFieldBegin(FT_DATE_FIELD_DESC);
        oprot.writeString(struct.ftDate);
        oprot.writeFieldEnd();
      }
      if (struct.ftBankAcctId != null) {
        oprot.writeFieldBegin(FT_BANK_ACCT_ID_FIELD_DESC);
        oprot.writeString(struct.ftBankAcctId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.ftUserId);
      oprot.writeFieldEnd();
      if (struct.ftUserName != null) {
        oprot.writeFieldBegin(FT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.ftUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanOutputInfoTupleSchemeFactory implements SchemeFactory {
    public LoanOutputInfoTupleScheme getScheme() {
      return new LoanOutputInfoTupleScheme();
    }
  }

  private static class LoanOutputInfoTupleScheme extends TupleScheme<LoanOutputInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanOutputInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetShouldAmt()) {
        optionals.set(2);
      }
      if (struct.isSetShouldDate()) {
        optionals.set(3);
      }
      if (struct.isSetDifAmt()) {
        optionals.set(4);
      }
      if (struct.isSetOutputDesc()) {
        optionals.set(5);
      }
      if (struct.isSetRefId()) {
        optionals.set(6);
      }
      if (struct.isSetFtType()) {
        optionals.set(7);
      }
      if (struct.isSetTenderType()) {
        optionals.set(8);
      }
      if (struct.isSetFtAmt()) {
        optionals.set(9);
      }
      if (struct.isSetFtDate()) {
        optionals.set(10);
      }
      if (struct.isSetFtBankAcctId()) {
        optionals.set(11);
      }
      if (struct.isSetFtUserId()) {
        optionals.set(12);
      }
      if (struct.isSetFtUserName()) {
        optionals.set(13);
      }
      if (struct.isSetStatus()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetShouldAmt()) {
        oprot.writeDouble(struct.shouldAmt);
      }
      if (struct.isSetShouldDate()) {
        oprot.writeString(struct.shouldDate);
      }
      if (struct.isSetDifAmt()) {
        oprot.writeDouble(struct.difAmt);
      }
      if (struct.isSetOutputDesc()) {
        oprot.writeString(struct.outputDesc);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetFtType()) {
        oprot.writeString(struct.ftType);
      }
      if (struct.isSetTenderType()) {
        oprot.writeString(struct.tenderType);
      }
      if (struct.isSetFtAmt()) {
        oprot.writeDouble(struct.ftAmt);
      }
      if (struct.isSetFtDate()) {
        oprot.writeString(struct.ftDate);
      }
      if (struct.isSetFtBankAcctId()) {
        oprot.writeString(struct.ftBankAcctId);
      }
      if (struct.isSetFtUserId()) {
        oprot.writeI32(struct.ftUserId);
      }
      if (struct.isSetFtUserName()) {
        oprot.writeString(struct.ftUserName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanOutputInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shouldAmt = iprot.readDouble();
        struct.setShouldAmtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shouldDate = iprot.readString();
        struct.setShouldDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.difAmt = iprot.readDouble();
        struct.setDifAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.outputDesc = iprot.readString();
        struct.setOutputDescIsSet(true);
      }
      if (incoming.get(6)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ftType = iprot.readString();
        struct.setFtTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tenderType = iprot.readString();
        struct.setTenderTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ftAmt = iprot.readDouble();
        struct.setFtAmtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ftDate = iprot.readString();
        struct.setFtDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ftBankAcctId = iprot.readString();
        struct.setFtBankAcctIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ftUserId = iprot.readI32();
        struct.setFtUserIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ftUserName = iprot.readString();
        struct.setFtUserNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerson implements org.apache.thrift.TBase<CusPerson, CusPerson._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerson> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerson");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcct", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RELATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("relationType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHINA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chinaName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BIRTH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NATION_FIELD_DESC = new org.apache.thrift.protocol.TField("nation", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("mail", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WECHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("wechat", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField GRADU_SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("graduSchool", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GRADU_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("graduDt", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("education", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField POL_FACE_FIELD_DESC = new org.apache.thrift.protocol.TField("polFace", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField WORK_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("workUnit", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField UNIT_NATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitNature", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REG_CAPITAL_FIELD_DESC = new org.apache.thrift.protocol.TField("regCapital", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField MAIN_BUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mainBus", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField UNIT_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitPhone", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField FAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fax", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField WORK_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("workService", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField OCC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("occName", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField SERVANT_FIELD_DESC = new org.apache.thrift.protocol.TField("servant", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField DEPTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("deptment", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PAY_SOC_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("paySocSec", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField MONTH_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("monthIncome", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("trade", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField ENTRY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("entryTime", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField PAY_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("payWay", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField MONTH_PAY_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("monthPayDay", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField STAFF_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("staffNum", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField UNIT_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitAddr", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField UNIT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitCode", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField CERT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certNumber", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField CERT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("certUrl", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField KNOW_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("knowLoan", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("relation", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhone", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField IS_COM_OWN_FIELD_DESC = new org.apache.thrift.protocol.TField("isComOwn", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField BOARD_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("boardMember", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField MARR_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("marrStatus", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField LIVE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("liveDate", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField SOC_SEC_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("socSecNumber", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField OTHER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("otherPhone", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField FAMILY_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("familyPhone", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField CENSUS_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("censusAddr", org.apache.thrift.protocol.TType.STRING, (short)56);
  private static final org.apache.thrift.protocol.TField COMM_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("commAddr", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField COMM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commCode", org.apache.thrift.protocol.TType.STRING, (short)58);
  private static final org.apache.thrift.protocol.TField LIVE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("liveAddr", org.apache.thrift.protocol.TType.STRING, (short)59);
  private static final org.apache.thrift.protocol.TField LIVE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("liveCode", org.apache.thrift.protocol.TType.STRING, (short)60);
  private static final org.apache.thrift.protocol.TField COMMUNITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("communityName", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField CENSUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("censusCode", org.apache.thrift.protocol.TType.STRING, (short)62);
  private static final org.apache.thrift.protocol.TField RELATION_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("relationTypeText", org.apache.thrift.protocol.TType.STRING, (short)63);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)64);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("certTypeText", org.apache.thrift.protocol.TType.STRING, (short)65);
  private static final org.apache.thrift.protocol.TField SEX_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("sexText", org.apache.thrift.protocol.TType.STRING, (short)66);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)67);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)68);
  private static final org.apache.thrift.protocol.TField PROPORTION_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("proportionProperty", org.apache.thrift.protocol.TType.DOUBLE, (short)69);
  private static final org.apache.thrift.protocol.TField LIVE_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("liveProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)70);
  private static final org.apache.thrift.protocol.TField LIVE_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("liveCityCode", org.apache.thrift.protocol.TType.STRING, (short)71);
  private static final org.apache.thrift.protocol.TField LIVE_DISTRICT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("liveDistrictCode", org.apache.thrift.protocol.TType.STRING, (short)72);
  private static final org.apache.thrift.protocol.TField CERT_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("certAddr", org.apache.thrift.protocol.TType.STRING, (short)73);
  private static final org.apache.thrift.protocol.TField CUS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusSource", org.apache.thrift.protocol.TType.I32, (short)74);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)75);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPersonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPersonTupleSchemeFactory());
  }

  public int pid; // required
  public CusAcct cusAcct; // required
  public int relationType; // required
  public String chinaName; // required
  public String engName; // required
  public int sex; // required
  public String birthDate; // required
  public String nation; // required
  public String mail; // required
  public String qq; // required
  public String wechat; // required
  public String graduSchool; // required
  public String graduDt; // required
  public int education; // required
  public int degree; // required
  public int polFace; // required
  public String workUnit; // required
  public int unitNature; // required
  public double regCapital; // required
  public String mainBus; // required
  public String unitPhone; // required
  public String fax; // required
  public String occupation; // required
  public String workService; // required
  public int occName; // required
  public int servant; // required
  public String deptment; // required
  public int paySocSec; // required
  public double monthIncome; // required
  public int trade; // required
  public String entryTime; // required
  public int payWay; // required
  public int monthPayDay; // required
  public int staffNum; // required
  public String unitAddr; // required
  public String unitCode; // required
  public int certType; // required
  public String certNumber; // required
  public String certUrl; // required
  public int knowLoan; // required
  public int status; // required
  public String job; // required
  public String relation; // required
  public String mobilePhone; // required
  public String telephone; // required
  public int isComOwn; // required
  public int boardMember; // required
  public int pids; // required
  public int page; // required
  public int rows; // required
  public int marrStatus; // required
  public int liveDate; // required
  public String socSecNumber; // required
  public String otherPhone; // required
  public String familyPhone; // required
  public String censusAddr; // required
  public String commAddr; // required
  public String commCode; // required
  public String liveAddr; // required
  public String liveCode; // required
  public String communityName; // required
  public String censusCode; // required
  public String relationTypeText; // required
  public String realName; // required
  public String certTypeText; // required
  public String sexText; // required
  public int age; // required
  public List<Integer> userIds; // required
  public double proportionProperty; // required
  public String liveProvinceCode; // required
  public String liveCityCode; // required
  public String liveDistrictCode; // required
  public String certAddr; // required
  public int cusSource; // required
  public int orgId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_ACCT((short)2, "cusAcct"),
    RELATION_TYPE((short)3, "relationType"),
    CHINA_NAME((short)4, "chinaName"),
    ENG_NAME((short)5, "engName"),
    SEX((short)6, "sex"),
    BIRTH_DATE((short)7, "birthDate"),
    NATION((short)8, "nation"),
    MAIL((short)9, "mail"),
    QQ((short)10, "qq"),
    WECHAT((short)11, "wechat"),
    GRADU_SCHOOL((short)12, "graduSchool"),
    GRADU_DT((short)13, "graduDt"),
    EDUCATION((short)14, "education"),
    DEGREE((short)15, "degree"),
    POL_FACE((short)16, "polFace"),
    WORK_UNIT((short)17, "workUnit"),
    UNIT_NATURE((short)18, "unitNature"),
    REG_CAPITAL((short)19, "regCapital"),
    MAIN_BUS((short)20, "mainBus"),
    UNIT_PHONE((short)21, "unitPhone"),
    FAX((short)22, "fax"),
    OCCUPATION((short)23, "occupation"),
    WORK_SERVICE((short)24, "workService"),
    OCC_NAME((short)25, "occName"),
    SERVANT((short)26, "servant"),
    DEPTMENT((short)27, "deptment"),
    PAY_SOC_SEC((short)28, "paySocSec"),
    MONTH_INCOME((short)29, "monthIncome"),
    TRADE((short)30, "trade"),
    ENTRY_TIME((short)31, "entryTime"),
    PAY_WAY((short)32, "payWay"),
    MONTH_PAY_DAY((short)33, "monthPayDay"),
    STAFF_NUM((short)34, "staffNum"),
    UNIT_ADDR((short)35, "unitAddr"),
    UNIT_CODE((short)36, "unitCode"),
    CERT_TYPE((short)37, "certType"),
    CERT_NUMBER((short)38, "certNumber"),
    CERT_URL((short)39, "certUrl"),
    KNOW_LOAN((short)40, "knowLoan"),
    STATUS((short)41, "status"),
    JOB((short)42, "job"),
    RELATION((short)43, "relation"),
    MOBILE_PHONE((short)44, "mobilePhone"),
    TELEPHONE((short)45, "telephone"),
    IS_COM_OWN((short)46, "isComOwn"),
    BOARD_MEMBER((short)47, "boardMember"),
    PIDS((short)48, "pids"),
    PAGE((short)49, "page"),
    ROWS((short)50, "rows"),
    MARR_STATUS((short)51, "marrStatus"),
    LIVE_DATE((short)52, "liveDate"),
    SOC_SEC_NUMBER((short)53, "socSecNumber"),
    OTHER_PHONE((short)54, "otherPhone"),
    FAMILY_PHONE((short)55, "familyPhone"),
    CENSUS_ADDR((short)56, "censusAddr"),
    COMM_ADDR((short)57, "commAddr"),
    COMM_CODE((short)58, "commCode"),
    LIVE_ADDR((short)59, "liveAddr"),
    LIVE_CODE((short)60, "liveCode"),
    COMMUNITY_NAME((short)61, "communityName"),
    CENSUS_CODE((short)62, "censusCode"),
    RELATION_TYPE_TEXT((short)63, "relationTypeText"),
    REAL_NAME((short)64, "realName"),
    CERT_TYPE_TEXT((short)65, "certTypeText"),
    SEX_TEXT((short)66, "sexText"),
    AGE((short)67, "age"),
    USER_IDS((short)68, "userIds"),
    PROPORTION_PROPERTY((short)69, "proportionProperty"),
    LIVE_PROVINCE_CODE((short)70, "liveProvinceCode"),
    LIVE_CITY_CODE((short)71, "liveCityCode"),
    LIVE_DISTRICT_CODE((short)72, "liveDistrictCode"),
    CERT_ADDR((short)73, "certAddr"),
    CUS_SOURCE((short)74, "cusSource"),
    ORG_ID((short)75, "orgId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_ACCT
          return CUS_ACCT;
        case 3: // RELATION_TYPE
          return RELATION_TYPE;
        case 4: // CHINA_NAME
          return CHINA_NAME;
        case 5: // ENG_NAME
          return ENG_NAME;
        case 6: // SEX
          return SEX;
        case 7: // BIRTH_DATE
          return BIRTH_DATE;
        case 8: // NATION
          return NATION;
        case 9: // MAIL
          return MAIL;
        case 10: // QQ
          return QQ;
        case 11: // WECHAT
          return WECHAT;
        case 12: // GRADU_SCHOOL
          return GRADU_SCHOOL;
        case 13: // GRADU_DT
          return GRADU_DT;
        case 14: // EDUCATION
          return EDUCATION;
        case 15: // DEGREE
          return DEGREE;
        case 16: // POL_FACE
          return POL_FACE;
        case 17: // WORK_UNIT
          return WORK_UNIT;
        case 18: // UNIT_NATURE
          return UNIT_NATURE;
        case 19: // REG_CAPITAL
          return REG_CAPITAL;
        case 20: // MAIN_BUS
          return MAIN_BUS;
        case 21: // UNIT_PHONE
          return UNIT_PHONE;
        case 22: // FAX
          return FAX;
        case 23: // OCCUPATION
          return OCCUPATION;
        case 24: // WORK_SERVICE
          return WORK_SERVICE;
        case 25: // OCC_NAME
          return OCC_NAME;
        case 26: // SERVANT
          return SERVANT;
        case 27: // DEPTMENT
          return DEPTMENT;
        case 28: // PAY_SOC_SEC
          return PAY_SOC_SEC;
        case 29: // MONTH_INCOME
          return MONTH_INCOME;
        case 30: // TRADE
          return TRADE;
        case 31: // ENTRY_TIME
          return ENTRY_TIME;
        case 32: // PAY_WAY
          return PAY_WAY;
        case 33: // MONTH_PAY_DAY
          return MONTH_PAY_DAY;
        case 34: // STAFF_NUM
          return STAFF_NUM;
        case 35: // UNIT_ADDR
          return UNIT_ADDR;
        case 36: // UNIT_CODE
          return UNIT_CODE;
        case 37: // CERT_TYPE
          return CERT_TYPE;
        case 38: // CERT_NUMBER
          return CERT_NUMBER;
        case 39: // CERT_URL
          return CERT_URL;
        case 40: // KNOW_LOAN
          return KNOW_LOAN;
        case 41: // STATUS
          return STATUS;
        case 42: // JOB
          return JOB;
        case 43: // RELATION
          return RELATION;
        case 44: // MOBILE_PHONE
          return MOBILE_PHONE;
        case 45: // TELEPHONE
          return TELEPHONE;
        case 46: // IS_COM_OWN
          return IS_COM_OWN;
        case 47: // BOARD_MEMBER
          return BOARD_MEMBER;
        case 48: // PIDS
          return PIDS;
        case 49: // PAGE
          return PAGE;
        case 50: // ROWS
          return ROWS;
        case 51: // MARR_STATUS
          return MARR_STATUS;
        case 52: // LIVE_DATE
          return LIVE_DATE;
        case 53: // SOC_SEC_NUMBER
          return SOC_SEC_NUMBER;
        case 54: // OTHER_PHONE
          return OTHER_PHONE;
        case 55: // FAMILY_PHONE
          return FAMILY_PHONE;
        case 56: // CENSUS_ADDR
          return CENSUS_ADDR;
        case 57: // COMM_ADDR
          return COMM_ADDR;
        case 58: // COMM_CODE
          return COMM_CODE;
        case 59: // LIVE_ADDR
          return LIVE_ADDR;
        case 60: // LIVE_CODE
          return LIVE_CODE;
        case 61: // COMMUNITY_NAME
          return COMMUNITY_NAME;
        case 62: // CENSUS_CODE
          return CENSUS_CODE;
        case 63: // RELATION_TYPE_TEXT
          return RELATION_TYPE_TEXT;
        case 64: // REAL_NAME
          return REAL_NAME;
        case 65: // CERT_TYPE_TEXT
          return CERT_TYPE_TEXT;
        case 66: // SEX_TEXT
          return SEX_TEXT;
        case 67: // AGE
          return AGE;
        case 68: // USER_IDS
          return USER_IDS;
        case 69: // PROPORTION_PROPERTY
          return PROPORTION_PROPERTY;
        case 70: // LIVE_PROVINCE_CODE
          return LIVE_PROVINCE_CODE;
        case 71: // LIVE_CITY_CODE
          return LIVE_CITY_CODE;
        case 72: // LIVE_DISTRICT_CODE
          return LIVE_DISTRICT_CODE;
        case 73: // CERT_ADDR
          return CERT_ADDR;
        case 74: // CUS_SOURCE
          return CUS_SOURCE;
        case 75: // ORG_ID
          return ORG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __RELATIONTYPE_ISSET_ID = 1;
  private static final int __SEX_ISSET_ID = 2;
  private static final int __EDUCATION_ISSET_ID = 3;
  private static final int __DEGREE_ISSET_ID = 4;
  private static final int __POLFACE_ISSET_ID = 5;
  private static final int __UNITNATURE_ISSET_ID = 6;
  private static final int __REGCAPITAL_ISSET_ID = 7;
  private static final int __OCCNAME_ISSET_ID = 8;
  private static final int __SERVANT_ISSET_ID = 9;
  private static final int __PAYSOCSEC_ISSET_ID = 10;
  private static final int __MONTHINCOME_ISSET_ID = 11;
  private static final int __TRADE_ISSET_ID = 12;
  private static final int __PAYWAY_ISSET_ID = 13;
  private static final int __MONTHPAYDAY_ISSET_ID = 14;
  private static final int __STAFFNUM_ISSET_ID = 15;
  private static final int __CERTTYPE_ISSET_ID = 16;
  private static final int __KNOWLOAN_ISSET_ID = 17;
  private static final int __STATUS_ISSET_ID = 18;
  private static final int __ISCOMOWN_ISSET_ID = 19;
  private static final int __BOARDMEMBER_ISSET_ID = 20;
  private static final int __PIDS_ISSET_ID = 21;
  private static final int __PAGE_ISSET_ID = 22;
  private static final int __ROWS_ISSET_ID = 23;
  private static final int __MARRSTATUS_ISSET_ID = 24;
  private static final int __LIVEDATE_ISSET_ID = 25;
  private static final int __AGE_ISSET_ID = 26;
  private static final int __PROPORTIONPROPERTY_ISSET_ID = 27;
  private static final int __CUSSOURCE_ISSET_ID = 28;
  private static final int __ORGID_ISSET_ID = 29;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_ACCT, new org.apache.thrift.meta_data.FieldMetaData("cusAcct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusAcct.class)));
    tmpMap.put(_Fields.RELATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("relationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHINA_NAME, new org.apache.thrift.meta_data.FieldMetaData("chinaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("engName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTH_DATE, new org.apache.thrift.meta_data.FieldMetaData("birthDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATION, new org.apache.thrift.meta_data.FieldMetaData("nation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIL, new org.apache.thrift.meta_data.FieldMetaData("mail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WECHAT, new org.apache.thrift.meta_data.FieldMetaData("wechat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRADU_SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("graduSchool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRADU_DT, new org.apache.thrift.meta_data.FieldMetaData("graduDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EDUCATION, new org.apache.thrift.meta_data.FieldMetaData("education", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POL_FACE, new org.apache.thrift.meta_data.FieldMetaData("polFace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORK_UNIT, new org.apache.thrift.meta_data.FieldMetaData("workUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_NATURE, new org.apache.thrift.meta_data.FieldMetaData("unitNature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REG_CAPITAL, new org.apache.thrift.meta_data.FieldMetaData("regCapital", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAIN_BUS, new org.apache.thrift.meta_data.FieldMetaData("mainBus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_PHONE, new org.apache.thrift.meta_data.FieldMetaData("unitPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAX, new org.apache.thrift.meta_data.FieldMetaData("fax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("workService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCC_NAME, new org.apache.thrift.meta_data.FieldMetaData("occName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVANT, new org.apache.thrift.meta_data.FieldMetaData("servant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPTMENT, new org.apache.thrift.meta_data.FieldMetaData("deptment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_SOC_SEC, new org.apache.thrift.meta_data.FieldMetaData("paySocSec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_INCOME, new org.apache.thrift.meta_data.FieldMetaData("monthIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE, new org.apache.thrift.meta_data.FieldMetaData("trade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTRY_TIME, new org.apache.thrift.meta_data.FieldMetaData("entryTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_WAY, new org.apache.thrift.meta_data.FieldMetaData("payWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_PAY_DAY, new org.apache.thrift.meta_data.FieldMetaData("monthPayDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAFF_NUM, new org.apache.thrift.meta_data.FieldMetaData("staffNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIT_ADDR, new org.apache.thrift.meta_data.FieldMetaData("unitAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_CODE, new org.apache.thrift.meta_data.FieldMetaData("unitCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_URL, new org.apache.thrift.meta_data.FieldMetaData("certUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KNOW_LOAN, new org.apache.thrift.meta_data.FieldMetaData("knowLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION, new org.apache.thrift.meta_data.FieldMetaData("relation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("mobilePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_COM_OWN, new org.apache.thrift.meta_data.FieldMetaData("isComOwn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOARD_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("boardMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MARR_STATUS, new org.apache.thrift.meta_data.FieldMetaData("marrStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIVE_DATE, new org.apache.thrift.meta_data.FieldMetaData("liveDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOC_SEC_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("socSecNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("otherPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMILY_PHONE, new org.apache.thrift.meta_data.FieldMetaData("familyPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CENSUS_ADDR, new org.apache.thrift.meta_data.FieldMetaData("censusAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMM_ADDR, new org.apache.thrift.meta_data.FieldMetaData("commAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMM_CODE, new org.apache.thrift.meta_data.FieldMetaData("commCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("liveAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_CODE, new org.apache.thrift.meta_data.FieldMetaData("liveCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMUNITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("communityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CENSUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("censusCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("relationTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("certTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX_TEXT, new org.apache.thrift.meta_data.FieldMetaData("sexText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PROPORTION_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("proportionProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIVE_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("liveProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("liveCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_DISTRICT_CODE, new org.apache.thrift.meta_data.FieldMetaData("liveDistrictCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_ADDR, new org.apache.thrift.meta_data.FieldMetaData("certAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("cusSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerson.class, metaDataMap);
  }

  public CusPerson() {
  }

  public CusPerson(
    int pid,
    CusAcct cusAcct,
    int relationType,
    String chinaName,
    String engName,
    int sex,
    String birthDate,
    String nation,
    String mail,
    String qq,
    String wechat,
    String graduSchool,
    String graduDt,
    int education,
    int degree,
    int polFace,
    String workUnit,
    int unitNature,
    double regCapital,
    String mainBus,
    String unitPhone,
    String fax,
    String occupation,
    String workService,
    int occName,
    int servant,
    String deptment,
    int paySocSec,
    double monthIncome,
    int trade,
    String entryTime,
    int payWay,
    int monthPayDay,
    int staffNum,
    String unitAddr,
    String unitCode,
    int certType,
    String certNumber,
    String certUrl,
    int knowLoan,
    int status,
    String job,
    String relation,
    String mobilePhone,
    String telephone,
    int isComOwn,
    int boardMember,
    int pids,
    int page,
    int rows,
    int marrStatus,
    int liveDate,
    String socSecNumber,
    String otherPhone,
    String familyPhone,
    String censusAddr,
    String commAddr,
    String commCode,
    String liveAddr,
    String liveCode,
    String communityName,
    String censusCode,
    String relationTypeText,
    String realName,
    String certTypeText,
    String sexText,
    int age,
    List<Integer> userIds,
    double proportionProperty,
    String liveProvinceCode,
    String liveCityCode,
    String liveDistrictCode,
    String certAddr,
    int cusSource,
    int orgId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusAcct = cusAcct;
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    this.chinaName = chinaName;
    this.engName = engName;
    this.sex = sex;
    setSexIsSet(true);
    this.birthDate = birthDate;
    this.nation = nation;
    this.mail = mail;
    this.qq = qq;
    this.wechat = wechat;
    this.graduSchool = graduSchool;
    this.graduDt = graduDt;
    this.education = education;
    setEducationIsSet(true);
    this.degree = degree;
    setDegreeIsSet(true);
    this.polFace = polFace;
    setPolFaceIsSet(true);
    this.workUnit = workUnit;
    this.unitNature = unitNature;
    setUnitNatureIsSet(true);
    this.regCapital = regCapital;
    setRegCapitalIsSet(true);
    this.mainBus = mainBus;
    this.unitPhone = unitPhone;
    this.fax = fax;
    this.occupation = occupation;
    this.workService = workService;
    this.occName = occName;
    setOccNameIsSet(true);
    this.servant = servant;
    setServantIsSet(true);
    this.deptment = deptment;
    this.paySocSec = paySocSec;
    setPaySocSecIsSet(true);
    this.monthIncome = monthIncome;
    setMonthIncomeIsSet(true);
    this.trade = trade;
    setTradeIsSet(true);
    this.entryTime = entryTime;
    this.payWay = payWay;
    setPayWayIsSet(true);
    this.monthPayDay = monthPayDay;
    setMonthPayDayIsSet(true);
    this.staffNum = staffNum;
    setStaffNumIsSet(true);
    this.unitAddr = unitAddr;
    this.unitCode = unitCode;
    this.certType = certType;
    setCertTypeIsSet(true);
    this.certNumber = certNumber;
    this.certUrl = certUrl;
    this.knowLoan = knowLoan;
    setKnowLoanIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.job = job;
    this.relation = relation;
    this.mobilePhone = mobilePhone;
    this.telephone = telephone;
    this.isComOwn = isComOwn;
    setIsComOwnIsSet(true);
    this.boardMember = boardMember;
    setBoardMemberIsSet(true);
    this.pids = pids;
    setPidsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.marrStatus = marrStatus;
    setMarrStatusIsSet(true);
    this.liveDate = liveDate;
    setLiveDateIsSet(true);
    this.socSecNumber = socSecNumber;
    this.otherPhone = otherPhone;
    this.familyPhone = familyPhone;
    this.censusAddr = censusAddr;
    this.commAddr = commAddr;
    this.commCode = commCode;
    this.liveAddr = liveAddr;
    this.liveCode = liveCode;
    this.communityName = communityName;
    this.censusCode = censusCode;
    this.relationTypeText = relationTypeText;
    this.realName = realName;
    this.certTypeText = certTypeText;
    this.sexText = sexText;
    this.age = age;
    setAgeIsSet(true);
    this.userIds = userIds;
    this.proportionProperty = proportionProperty;
    setProportionPropertyIsSet(true);
    this.liveProvinceCode = liveProvinceCode;
    this.liveCityCode = liveCityCode;
    this.liveDistrictCode = liveDistrictCode;
    this.certAddr = certAddr;
    this.cusSource = cusSource;
    setCusSourceIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerson(CusPerson other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusAcct()) {
      this.cusAcct = new CusAcct(other.cusAcct);
    }
    this.relationType = other.relationType;
    if (other.isSetChinaName()) {
      this.chinaName = other.chinaName;
    }
    if (other.isSetEngName()) {
      this.engName = other.engName;
    }
    this.sex = other.sex;
    if (other.isSetBirthDate()) {
      this.birthDate = other.birthDate;
    }
    if (other.isSetNation()) {
      this.nation = other.nation;
    }
    if (other.isSetMail()) {
      this.mail = other.mail;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
    if (other.isSetWechat()) {
      this.wechat = other.wechat;
    }
    if (other.isSetGraduSchool()) {
      this.graduSchool = other.graduSchool;
    }
    if (other.isSetGraduDt()) {
      this.graduDt = other.graduDt;
    }
    this.education = other.education;
    this.degree = other.degree;
    this.polFace = other.polFace;
    if (other.isSetWorkUnit()) {
      this.workUnit = other.workUnit;
    }
    this.unitNature = other.unitNature;
    this.regCapital = other.regCapital;
    if (other.isSetMainBus()) {
      this.mainBus = other.mainBus;
    }
    if (other.isSetUnitPhone()) {
      this.unitPhone = other.unitPhone;
    }
    if (other.isSetFax()) {
      this.fax = other.fax;
    }
    if (other.isSetOccupation()) {
      this.occupation = other.occupation;
    }
    if (other.isSetWorkService()) {
      this.workService = other.workService;
    }
    this.occName = other.occName;
    this.servant = other.servant;
    if (other.isSetDeptment()) {
      this.deptment = other.deptment;
    }
    this.paySocSec = other.paySocSec;
    this.monthIncome = other.monthIncome;
    this.trade = other.trade;
    if (other.isSetEntryTime()) {
      this.entryTime = other.entryTime;
    }
    this.payWay = other.payWay;
    this.monthPayDay = other.monthPayDay;
    this.staffNum = other.staffNum;
    if (other.isSetUnitAddr()) {
      this.unitAddr = other.unitAddr;
    }
    if (other.isSetUnitCode()) {
      this.unitCode = other.unitCode;
    }
    this.certType = other.certType;
    if (other.isSetCertNumber()) {
      this.certNumber = other.certNumber;
    }
    if (other.isSetCertUrl()) {
      this.certUrl = other.certUrl;
    }
    this.knowLoan = other.knowLoan;
    this.status = other.status;
    if (other.isSetJob()) {
      this.job = other.job;
    }
    if (other.isSetRelation()) {
      this.relation = other.relation;
    }
    if (other.isSetMobilePhone()) {
      this.mobilePhone = other.mobilePhone;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    this.isComOwn = other.isComOwn;
    this.boardMember = other.boardMember;
    this.pids = other.pids;
    this.page = other.page;
    this.rows = other.rows;
    this.marrStatus = other.marrStatus;
    this.liveDate = other.liveDate;
    if (other.isSetSocSecNumber()) {
      this.socSecNumber = other.socSecNumber;
    }
    if (other.isSetOtherPhone()) {
      this.otherPhone = other.otherPhone;
    }
    if (other.isSetFamilyPhone()) {
      this.familyPhone = other.familyPhone;
    }
    if (other.isSetCensusAddr()) {
      this.censusAddr = other.censusAddr;
    }
    if (other.isSetCommAddr()) {
      this.commAddr = other.commAddr;
    }
    if (other.isSetCommCode()) {
      this.commCode = other.commCode;
    }
    if (other.isSetLiveAddr()) {
      this.liveAddr = other.liveAddr;
    }
    if (other.isSetLiveCode()) {
      this.liveCode = other.liveCode;
    }
    if (other.isSetCommunityName()) {
      this.communityName = other.communityName;
    }
    if (other.isSetCensusCode()) {
      this.censusCode = other.censusCode;
    }
    if (other.isSetRelationTypeText()) {
      this.relationTypeText = other.relationTypeText;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetCertTypeText()) {
      this.certTypeText = other.certTypeText;
    }
    if (other.isSetSexText()) {
      this.sexText = other.sexText;
    }
    this.age = other.age;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.proportionProperty = other.proportionProperty;
    if (other.isSetLiveProvinceCode()) {
      this.liveProvinceCode = other.liveProvinceCode;
    }
    if (other.isSetLiveCityCode()) {
      this.liveCityCode = other.liveCityCode;
    }
    if (other.isSetLiveDistrictCode()) {
      this.liveDistrictCode = other.liveDistrictCode;
    }
    if (other.isSetCertAddr()) {
      this.certAddr = other.certAddr;
    }
    this.cusSource = other.cusSource;
    this.orgId = other.orgId;
  }

  public CusPerson deepCopy() {
    return new CusPerson(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusAcct = null;
    setRelationTypeIsSet(false);
    this.relationType = 0;
    this.chinaName = null;
    this.engName = null;
    setSexIsSet(false);
    this.sex = 0;
    this.birthDate = null;
    this.nation = null;
    this.mail = null;
    this.qq = null;
    this.wechat = null;
    this.graduSchool = null;
    this.graduDt = null;
    setEducationIsSet(false);
    this.education = 0;
    setDegreeIsSet(false);
    this.degree = 0;
    setPolFaceIsSet(false);
    this.polFace = 0;
    this.workUnit = null;
    setUnitNatureIsSet(false);
    this.unitNature = 0;
    setRegCapitalIsSet(false);
    this.regCapital = 0.0;
    this.mainBus = null;
    this.unitPhone = null;
    this.fax = null;
    this.occupation = null;
    this.workService = null;
    setOccNameIsSet(false);
    this.occName = 0;
    setServantIsSet(false);
    this.servant = 0;
    this.deptment = null;
    setPaySocSecIsSet(false);
    this.paySocSec = 0;
    setMonthIncomeIsSet(false);
    this.monthIncome = 0.0;
    setTradeIsSet(false);
    this.trade = 0;
    this.entryTime = null;
    setPayWayIsSet(false);
    this.payWay = 0;
    setMonthPayDayIsSet(false);
    this.monthPayDay = 0;
    setStaffNumIsSet(false);
    this.staffNum = 0;
    this.unitAddr = null;
    this.unitCode = null;
    setCertTypeIsSet(false);
    this.certType = 0;
    this.certNumber = null;
    this.certUrl = null;
    setKnowLoanIsSet(false);
    this.knowLoan = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.job = null;
    this.relation = null;
    this.mobilePhone = null;
    this.telephone = null;
    setIsComOwnIsSet(false);
    this.isComOwn = 0;
    setBoardMemberIsSet(false);
    this.boardMember = 0;
    setPidsIsSet(false);
    this.pids = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setMarrStatusIsSet(false);
    this.marrStatus = 0;
    setLiveDateIsSet(false);
    this.liveDate = 0;
    this.socSecNumber = null;
    this.otherPhone = null;
    this.familyPhone = null;
    this.censusAddr = null;
    this.commAddr = null;
    this.commCode = null;
    this.liveAddr = null;
    this.liveCode = null;
    this.communityName = null;
    this.censusCode = null;
    this.relationTypeText = null;
    this.realName = null;
    this.certTypeText = null;
    this.sexText = null;
    setAgeIsSet(false);
    this.age = 0;
    this.userIds = null;
    setProportionPropertyIsSet(false);
    this.proportionProperty = 0.0;
    this.liveProvinceCode = null;
    this.liveCityCode = null;
    this.liveDistrictCode = null;
    this.certAddr = null;
    setCusSourceIsSet(false);
    this.cusSource = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusPerson setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusAcct getCusAcct() {
    return this.cusAcct;
  }

  public CusPerson setCusAcct(CusAcct cusAcct) {
    this.cusAcct = cusAcct;
    return this;
  }

  public void unsetCusAcct() {
    this.cusAcct = null;
  }

  /** Returns true if field cusAcct is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcct() {
    return this.cusAcct != null;
  }

  public void setCusAcctIsSet(boolean value) {
    if (!value) {
      this.cusAcct = null;
    }
  }

  public int getRelationType() {
    return this.relationType;
  }

  public CusPerson setRelationType(int relationType) {
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    return this;
  }

  public void unsetRelationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  /** Returns true if field relationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationType() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  public void setRelationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID, value);
  }

  public String getChinaName() {
    return this.chinaName;
  }

  public CusPerson setChinaName(String chinaName) {
    this.chinaName = chinaName;
    return this;
  }

  public void unsetChinaName() {
    this.chinaName = null;
  }

  /** Returns true if field chinaName is set (has been assigned a value) and false otherwise */
  public boolean isSetChinaName() {
    return this.chinaName != null;
  }

  public void setChinaNameIsSet(boolean value) {
    if (!value) {
      this.chinaName = null;
    }
  }

  public String getEngName() {
    return this.engName;
  }

  public CusPerson setEngName(String engName) {
    this.engName = engName;
    return this;
  }

  public void unsetEngName() {
    this.engName = null;
  }

  /** Returns true if field engName is set (has been assigned a value) and false otherwise */
  public boolean isSetEngName() {
    return this.engName != null;
  }

  public void setEngNameIsSet(boolean value) {
    if (!value) {
      this.engName = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public CusPerson setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getBirthDate() {
    return this.birthDate;
  }

  public CusPerson setBirthDate(String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  public void unsetBirthDate() {
    this.birthDate = null;
  }

  /** Returns true if field birthDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthDate() {
    return this.birthDate != null;
  }

  public void setBirthDateIsSet(boolean value) {
    if (!value) {
      this.birthDate = null;
    }
  }

  public String getNation() {
    return this.nation;
  }

  public CusPerson setNation(String nation) {
    this.nation = nation;
    return this;
  }

  public void unsetNation() {
    this.nation = null;
  }

  /** Returns true if field nation is set (has been assigned a value) and false otherwise */
  public boolean isSetNation() {
    return this.nation != null;
  }

  public void setNationIsSet(boolean value) {
    if (!value) {
      this.nation = null;
    }
  }

  public String getMail() {
    return this.mail;
  }

  public CusPerson setMail(String mail) {
    this.mail = mail;
    return this;
  }

  public void unsetMail() {
    this.mail = null;
  }

  /** Returns true if field mail is set (has been assigned a value) and false otherwise */
  public boolean isSetMail() {
    return this.mail != null;
  }

  public void setMailIsSet(boolean value) {
    if (!value) {
      this.mail = null;
    }
  }

  public String getQq() {
    return this.qq;
  }

  public CusPerson setQq(String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  public String getWechat() {
    return this.wechat;
  }

  public CusPerson setWechat(String wechat) {
    this.wechat = wechat;
    return this;
  }

  public void unsetWechat() {
    this.wechat = null;
  }

  /** Returns true if field wechat is set (has been assigned a value) and false otherwise */
  public boolean isSetWechat() {
    return this.wechat != null;
  }

  public void setWechatIsSet(boolean value) {
    if (!value) {
      this.wechat = null;
    }
  }

  public String getGraduSchool() {
    return this.graduSchool;
  }

  public CusPerson setGraduSchool(String graduSchool) {
    this.graduSchool = graduSchool;
    return this;
  }

  public void unsetGraduSchool() {
    this.graduSchool = null;
  }

  /** Returns true if field graduSchool is set (has been assigned a value) and false otherwise */
  public boolean isSetGraduSchool() {
    return this.graduSchool != null;
  }

  public void setGraduSchoolIsSet(boolean value) {
    if (!value) {
      this.graduSchool = null;
    }
  }

  public String getGraduDt() {
    return this.graduDt;
  }

  public CusPerson setGraduDt(String graduDt) {
    this.graduDt = graduDt;
    return this;
  }

  public void unsetGraduDt() {
    this.graduDt = null;
  }

  /** Returns true if field graduDt is set (has been assigned a value) and false otherwise */
  public boolean isSetGraduDt() {
    return this.graduDt != null;
  }

  public void setGraduDtIsSet(boolean value) {
    if (!value) {
      this.graduDt = null;
    }
  }

  public int getEducation() {
    return this.education;
  }

  public CusPerson setEducation(int education) {
    this.education = education;
    setEducationIsSet(true);
    return this;
  }

  public void unsetEducation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDUCATION_ISSET_ID);
  }

  /** Returns true if field education is set (has been assigned a value) and false otherwise */
  public boolean isSetEducation() {
    return EncodingUtils.testBit(__isset_bitfield, __EDUCATION_ISSET_ID);
  }

  public void setEducationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDUCATION_ISSET_ID, value);
  }

  public int getDegree() {
    return this.degree;
  }

  public CusPerson setDegree(int degree) {
    this.degree = degree;
    setDegreeIsSet(true);
    return this;
  }

  public void unsetDegree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  /** Returns true if field degree is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree() {
    return EncodingUtils.testBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  public void setDegreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEGREE_ISSET_ID, value);
  }

  public int getPolFace() {
    return this.polFace;
  }

  public CusPerson setPolFace(int polFace) {
    this.polFace = polFace;
    setPolFaceIsSet(true);
    return this;
  }

  public void unsetPolFace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLFACE_ISSET_ID);
  }

  /** Returns true if field polFace is set (has been assigned a value) and false otherwise */
  public boolean isSetPolFace() {
    return EncodingUtils.testBit(__isset_bitfield, __POLFACE_ISSET_ID);
  }

  public void setPolFaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLFACE_ISSET_ID, value);
  }

  public String getWorkUnit() {
    return this.workUnit;
  }

  public CusPerson setWorkUnit(String workUnit) {
    this.workUnit = workUnit;
    return this;
  }

  public void unsetWorkUnit() {
    this.workUnit = null;
  }

  /** Returns true if field workUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkUnit() {
    return this.workUnit != null;
  }

  public void setWorkUnitIsSet(boolean value) {
    if (!value) {
      this.workUnit = null;
    }
  }

  public int getUnitNature() {
    return this.unitNature;
  }

  public CusPerson setUnitNature(int unitNature) {
    this.unitNature = unitNature;
    setUnitNatureIsSet(true);
    return this;
  }

  public void unsetUnitNature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNITNATURE_ISSET_ID);
  }

  /** Returns true if field unitNature is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitNature() {
    return EncodingUtils.testBit(__isset_bitfield, __UNITNATURE_ISSET_ID);
  }

  public void setUnitNatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNITNATURE_ISSET_ID, value);
  }

  public double getRegCapital() {
    return this.regCapital;
  }

  public CusPerson setRegCapital(double regCapital) {
    this.regCapital = regCapital;
    setRegCapitalIsSet(true);
    return this;
  }

  public void unsetRegCapital() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGCAPITAL_ISSET_ID);
  }

  /** Returns true if field regCapital is set (has been assigned a value) and false otherwise */
  public boolean isSetRegCapital() {
    return EncodingUtils.testBit(__isset_bitfield, __REGCAPITAL_ISSET_ID);
  }

  public void setRegCapitalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGCAPITAL_ISSET_ID, value);
  }

  public String getMainBus() {
    return this.mainBus;
  }

  public CusPerson setMainBus(String mainBus) {
    this.mainBus = mainBus;
    return this;
  }

  public void unsetMainBus() {
    this.mainBus = null;
  }

  /** Returns true if field mainBus is set (has been assigned a value) and false otherwise */
  public boolean isSetMainBus() {
    return this.mainBus != null;
  }

  public void setMainBusIsSet(boolean value) {
    if (!value) {
      this.mainBus = null;
    }
  }

  public String getUnitPhone() {
    return this.unitPhone;
  }

  public CusPerson setUnitPhone(String unitPhone) {
    this.unitPhone = unitPhone;
    return this;
  }

  public void unsetUnitPhone() {
    this.unitPhone = null;
  }

  /** Returns true if field unitPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitPhone() {
    return this.unitPhone != null;
  }

  public void setUnitPhoneIsSet(boolean value) {
    if (!value) {
      this.unitPhone = null;
    }
  }

  public String getFax() {
    return this.fax;
  }

  public CusPerson setFax(String fax) {
    this.fax = fax;
    return this;
  }

  public void unsetFax() {
    this.fax = null;
  }

  /** Returns true if field fax is set (has been assigned a value) and false otherwise */
  public boolean isSetFax() {
    return this.fax != null;
  }

  public void setFaxIsSet(boolean value) {
    if (!value) {
      this.fax = null;
    }
  }

  public String getOccupation() {
    return this.occupation;
  }

  public CusPerson setOccupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public String getWorkService() {
    return this.workService;
  }

  public CusPerson setWorkService(String workService) {
    this.workService = workService;
    return this;
  }

  public void unsetWorkService() {
    this.workService = null;
  }

  /** Returns true if field workService is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkService() {
    return this.workService != null;
  }

  public void setWorkServiceIsSet(boolean value) {
    if (!value) {
      this.workService = null;
    }
  }

  public int getOccName() {
    return this.occName;
  }

  public CusPerson setOccName(int occName) {
    this.occName = occName;
    setOccNameIsSet(true);
    return this;
  }

  public void unsetOccName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCCNAME_ISSET_ID);
  }

  /** Returns true if field occName is set (has been assigned a value) and false otherwise */
  public boolean isSetOccName() {
    return EncodingUtils.testBit(__isset_bitfield, __OCCNAME_ISSET_ID);
  }

  public void setOccNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCCNAME_ISSET_ID, value);
  }

  public int getServant() {
    return this.servant;
  }

  public CusPerson setServant(int servant) {
    this.servant = servant;
    setServantIsSet(true);
    return this;
  }

  public void unsetServant() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVANT_ISSET_ID);
  }

  /** Returns true if field servant is set (has been assigned a value) and false otherwise */
  public boolean isSetServant() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVANT_ISSET_ID);
  }

  public void setServantIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVANT_ISSET_ID, value);
  }

  public String getDeptment() {
    return this.deptment;
  }

  public CusPerson setDeptment(String deptment) {
    this.deptment = deptment;
    return this;
  }

  public void unsetDeptment() {
    this.deptment = null;
  }

  /** Returns true if field deptment is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptment() {
    return this.deptment != null;
  }

  public void setDeptmentIsSet(boolean value) {
    if (!value) {
      this.deptment = null;
    }
  }

  public int getPaySocSec() {
    return this.paySocSec;
  }

  public CusPerson setPaySocSec(int paySocSec) {
    this.paySocSec = paySocSec;
    setPaySocSecIsSet(true);
    return this;
  }

  public void unsetPaySocSec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYSOCSEC_ISSET_ID);
  }

  /** Returns true if field paySocSec is set (has been assigned a value) and false otherwise */
  public boolean isSetPaySocSec() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYSOCSEC_ISSET_ID);
  }

  public void setPaySocSecIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYSOCSEC_ISSET_ID, value);
  }

  public double getMonthIncome() {
    return this.monthIncome;
  }

  public CusPerson setMonthIncome(double monthIncome) {
    this.monthIncome = monthIncome;
    setMonthIncomeIsSet(true);
    return this;
  }

  public void unsetMonthIncome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHINCOME_ISSET_ID);
  }

  /** Returns true if field monthIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthIncome() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHINCOME_ISSET_ID);
  }

  public void setMonthIncomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHINCOME_ISSET_ID, value);
  }

  public int getTrade() {
    return this.trade;
  }

  public CusPerson setTrade(int trade) {
    this.trade = trade;
    setTradeIsSet(true);
    return this;
  }

  public void unsetTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADE_ISSET_ID);
  }

  /** Returns true if field trade is set (has been assigned a value) and false otherwise */
  public boolean isSetTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADE_ISSET_ID);
  }

  public void setTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADE_ISSET_ID, value);
  }

  public String getEntryTime() {
    return this.entryTime;
  }

  public CusPerson setEntryTime(String entryTime) {
    this.entryTime = entryTime;
    return this;
  }

  public void unsetEntryTime() {
    this.entryTime = null;
  }

  /** Returns true if field entryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryTime() {
    return this.entryTime != null;
  }

  public void setEntryTimeIsSet(boolean value) {
    if (!value) {
      this.entryTime = null;
    }
  }

  public int getPayWay() {
    return this.payWay;
  }

  public CusPerson setPayWay(int payWay) {
    this.payWay = payWay;
    setPayWayIsSet(true);
    return this;
  }

  public void unsetPayWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYWAY_ISSET_ID);
  }

  /** Returns true if field payWay is set (has been assigned a value) and false otherwise */
  public boolean isSetPayWay() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYWAY_ISSET_ID);
  }

  public void setPayWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYWAY_ISSET_ID, value);
  }

  public int getMonthPayDay() {
    return this.monthPayDay;
  }

  public CusPerson setMonthPayDay(int monthPayDay) {
    this.monthPayDay = monthPayDay;
    setMonthPayDayIsSet(true);
    return this;
  }

  public void unsetMonthPayDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHPAYDAY_ISSET_ID);
  }

  /** Returns true if field monthPayDay is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthPayDay() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHPAYDAY_ISSET_ID);
  }

  public void setMonthPayDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHPAYDAY_ISSET_ID, value);
  }

  public int getStaffNum() {
    return this.staffNum;
  }

  public CusPerson setStaffNum(int staffNum) {
    this.staffNum = staffNum;
    setStaffNumIsSet(true);
    return this;
  }

  public void unsetStaffNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAFFNUM_ISSET_ID);
  }

  /** Returns true if field staffNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStaffNum() {
    return EncodingUtils.testBit(__isset_bitfield, __STAFFNUM_ISSET_ID);
  }

  public void setStaffNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAFFNUM_ISSET_ID, value);
  }

  public String getUnitAddr() {
    return this.unitAddr;
  }

  public CusPerson setUnitAddr(String unitAddr) {
    this.unitAddr = unitAddr;
    return this;
  }

  public void unsetUnitAddr() {
    this.unitAddr = null;
  }

  /** Returns true if field unitAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitAddr() {
    return this.unitAddr != null;
  }

  public void setUnitAddrIsSet(boolean value) {
    if (!value) {
      this.unitAddr = null;
    }
  }

  public String getUnitCode() {
    return this.unitCode;
  }

  public CusPerson setUnitCode(String unitCode) {
    this.unitCode = unitCode;
    return this;
  }

  public void unsetUnitCode() {
    this.unitCode = null;
  }

  /** Returns true if field unitCode is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitCode() {
    return this.unitCode != null;
  }

  public void setUnitCodeIsSet(boolean value) {
    if (!value) {
      this.unitCode = null;
    }
  }

  public int getCertType() {
    return this.certType;
  }

  public CusPerson setCertType(int certType) {
    this.certType = certType;
    setCertTypeIsSet(true);
    return this;
  }

  public void unsetCertType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return EncodingUtils.testBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  public void setCertTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CERTTYPE_ISSET_ID, value);
  }

  public String getCertNumber() {
    return this.certNumber;
  }

  public CusPerson setCertNumber(String certNumber) {
    this.certNumber = certNumber;
    return this;
  }

  public void unsetCertNumber() {
    this.certNumber = null;
  }

  /** Returns true if field certNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNumber() {
    return this.certNumber != null;
  }

  public void setCertNumberIsSet(boolean value) {
    if (!value) {
      this.certNumber = null;
    }
  }

  public String getCertUrl() {
    return this.certUrl;
  }

  public CusPerson setCertUrl(String certUrl) {
    this.certUrl = certUrl;
    return this;
  }

  public void unsetCertUrl() {
    this.certUrl = null;
  }

  /** Returns true if field certUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCertUrl() {
    return this.certUrl != null;
  }

  public void setCertUrlIsSet(boolean value) {
    if (!value) {
      this.certUrl = null;
    }
  }

  public int getKnowLoan() {
    return this.knowLoan;
  }

  public CusPerson setKnowLoan(int knowLoan) {
    this.knowLoan = knowLoan;
    setKnowLoanIsSet(true);
    return this;
  }

  public void unsetKnowLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KNOWLOAN_ISSET_ID);
  }

  /** Returns true if field knowLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __KNOWLOAN_ISSET_ID);
  }

  public void setKnowLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KNOWLOAN_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusPerson setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getJob() {
    return this.job;
  }

  public CusPerson setJob(String job) {
    this.job = job;
    return this;
  }

  public void unsetJob() {
    this.job = null;
  }

  /** Returns true if field job is set (has been assigned a value) and false otherwise */
  public boolean isSetJob() {
    return this.job != null;
  }

  public void setJobIsSet(boolean value) {
    if (!value) {
      this.job = null;
    }
  }

  public String getRelation() {
    return this.relation;
  }

  public CusPerson setRelation(String relation) {
    this.relation = relation;
    return this;
  }

  public void unsetRelation() {
    this.relation = null;
  }

  /** Returns true if field relation is set (has been assigned a value) and false otherwise */
  public boolean isSetRelation() {
    return this.relation != null;
  }

  public void setRelationIsSet(boolean value) {
    if (!value) {
      this.relation = null;
    }
  }

  public String getMobilePhone() {
    return this.mobilePhone;
  }

  public CusPerson setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
    return this;
  }

  public void unsetMobilePhone() {
    this.mobilePhone = null;
  }

  /** Returns true if field mobilePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhone() {
    return this.mobilePhone != null;
  }

  public void setMobilePhoneIsSet(boolean value) {
    if (!value) {
      this.mobilePhone = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public CusPerson setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public int getIsComOwn() {
    return this.isComOwn;
  }

  public CusPerson setIsComOwn(int isComOwn) {
    this.isComOwn = isComOwn;
    setIsComOwnIsSet(true);
    return this;
  }

  public void unsetIsComOwn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMOWN_ISSET_ID);
  }

  /** Returns true if field isComOwn is set (has been assigned a value) and false otherwise */
  public boolean isSetIsComOwn() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMOWN_ISSET_ID);
  }

  public void setIsComOwnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMOWN_ISSET_ID, value);
  }

  public int getBoardMember() {
    return this.boardMember;
  }

  public CusPerson setBoardMember(int boardMember) {
    this.boardMember = boardMember;
    setBoardMemberIsSet(true);
    return this;
  }

  public void unsetBoardMember() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOARDMEMBER_ISSET_ID);
  }

  /** Returns true if field boardMember is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardMember() {
    return EncodingUtils.testBit(__isset_bitfield, __BOARDMEMBER_ISSET_ID);
  }

  public void setBoardMemberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOARDMEMBER_ISSET_ID, value);
  }

  public int getPids() {
    return this.pids;
  }

  public CusPerson setPids(int pids) {
    this.pids = pids;
    setPidsIsSet(true);
    return this;
  }

  public void unsetPids() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PIDS_ISSET_ID);
  }

  /** Returns true if field pids is set (has been assigned a value) and false otherwise */
  public boolean isSetPids() {
    return EncodingUtils.testBit(__isset_bitfield, __PIDS_ISSET_ID);
  }

  public void setPidsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PIDS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusPerson setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusPerson setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getMarrStatus() {
    return this.marrStatus;
  }

  public CusPerson setMarrStatus(int marrStatus) {
    this.marrStatus = marrStatus;
    setMarrStatusIsSet(true);
    return this;
  }

  public void unsetMarrStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARRSTATUS_ISSET_ID);
  }

  /** Returns true if field marrStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMarrStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MARRSTATUS_ISSET_ID);
  }

  public void setMarrStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARRSTATUS_ISSET_ID, value);
  }

  public int getLiveDate() {
    return this.liveDate;
  }

  public CusPerson setLiveDate(int liveDate) {
    this.liveDate = liveDate;
    setLiveDateIsSet(true);
    return this;
  }

  public void unsetLiveDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVEDATE_ISSET_ID);
  }

  /** Returns true if field liveDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveDate() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVEDATE_ISSET_ID);
  }

  public void setLiveDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVEDATE_ISSET_ID, value);
  }

  public String getSocSecNumber() {
    return this.socSecNumber;
  }

  public CusPerson setSocSecNumber(String socSecNumber) {
    this.socSecNumber = socSecNumber;
    return this;
  }

  public void unsetSocSecNumber() {
    this.socSecNumber = null;
  }

  /** Returns true if field socSecNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSocSecNumber() {
    return this.socSecNumber != null;
  }

  public void setSocSecNumberIsSet(boolean value) {
    if (!value) {
      this.socSecNumber = null;
    }
  }

  public String getOtherPhone() {
    return this.otherPhone;
  }

  public CusPerson setOtherPhone(String otherPhone) {
    this.otherPhone = otherPhone;
    return this;
  }

  public void unsetOtherPhone() {
    this.otherPhone = null;
  }

  /** Returns true if field otherPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherPhone() {
    return this.otherPhone != null;
  }

  public void setOtherPhoneIsSet(boolean value) {
    if (!value) {
      this.otherPhone = null;
    }
  }

  public String getFamilyPhone() {
    return this.familyPhone;
  }

  public CusPerson setFamilyPhone(String familyPhone) {
    this.familyPhone = familyPhone;
    return this;
  }

  public void unsetFamilyPhone() {
    this.familyPhone = null;
  }

  /** Returns true if field familyPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyPhone() {
    return this.familyPhone != null;
  }

  public void setFamilyPhoneIsSet(boolean value) {
    if (!value) {
      this.familyPhone = null;
    }
  }

  public String getCensusAddr() {
    return this.censusAddr;
  }

  public CusPerson setCensusAddr(String censusAddr) {
    this.censusAddr = censusAddr;
    return this;
  }

  public void unsetCensusAddr() {
    this.censusAddr = null;
  }

  /** Returns true if field censusAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetCensusAddr() {
    return this.censusAddr != null;
  }

  public void setCensusAddrIsSet(boolean value) {
    if (!value) {
      this.censusAddr = null;
    }
  }

  public String getCommAddr() {
    return this.commAddr;
  }

  public CusPerson setCommAddr(String commAddr) {
    this.commAddr = commAddr;
    return this;
  }

  public void unsetCommAddr() {
    this.commAddr = null;
  }

  /** Returns true if field commAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetCommAddr() {
    return this.commAddr != null;
  }

  public void setCommAddrIsSet(boolean value) {
    if (!value) {
      this.commAddr = null;
    }
  }

  public String getCommCode() {
    return this.commCode;
  }

  public CusPerson setCommCode(String commCode) {
    this.commCode = commCode;
    return this;
  }

  public void unsetCommCode() {
    this.commCode = null;
  }

  /** Returns true if field commCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommCode() {
    return this.commCode != null;
  }

  public void setCommCodeIsSet(boolean value) {
    if (!value) {
      this.commCode = null;
    }
  }

  public String getLiveAddr() {
    return this.liveAddr;
  }

  public CusPerson setLiveAddr(String liveAddr) {
    this.liveAddr = liveAddr;
    return this;
  }

  public void unsetLiveAddr() {
    this.liveAddr = null;
  }

  /** Returns true if field liveAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveAddr() {
    return this.liveAddr != null;
  }

  public void setLiveAddrIsSet(boolean value) {
    if (!value) {
      this.liveAddr = null;
    }
  }

  public String getLiveCode() {
    return this.liveCode;
  }

  public CusPerson setLiveCode(String liveCode) {
    this.liveCode = liveCode;
    return this;
  }

  public void unsetLiveCode() {
    this.liveCode = null;
  }

  /** Returns true if field liveCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveCode() {
    return this.liveCode != null;
  }

  public void setLiveCodeIsSet(boolean value) {
    if (!value) {
      this.liveCode = null;
    }
  }

  public String getCommunityName() {
    return this.communityName;
  }

  public CusPerson setCommunityName(String communityName) {
    this.communityName = communityName;
    return this;
  }

  public void unsetCommunityName() {
    this.communityName = null;
  }

  /** Returns true if field communityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunityName() {
    return this.communityName != null;
  }

  public void setCommunityNameIsSet(boolean value) {
    if (!value) {
      this.communityName = null;
    }
  }

  public String getCensusCode() {
    return this.censusCode;
  }

  public CusPerson setCensusCode(String censusCode) {
    this.censusCode = censusCode;
    return this;
  }

  public void unsetCensusCode() {
    this.censusCode = null;
  }

  /** Returns true if field censusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCensusCode() {
    return this.censusCode != null;
  }

  public void setCensusCodeIsSet(boolean value) {
    if (!value) {
      this.censusCode = null;
    }
  }

  public String getRelationTypeText() {
    return this.relationTypeText;
  }

  public CusPerson setRelationTypeText(String relationTypeText) {
    this.relationTypeText = relationTypeText;
    return this;
  }

  public void unsetRelationTypeText() {
    this.relationTypeText = null;
  }

  /** Returns true if field relationTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationTypeText() {
    return this.relationTypeText != null;
  }

  public void setRelationTypeTextIsSet(boolean value) {
    if (!value) {
      this.relationTypeText = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public CusPerson setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getCertTypeText() {
    return this.certTypeText;
  }

  public CusPerson setCertTypeText(String certTypeText) {
    this.certTypeText = certTypeText;
    return this;
  }

  public void unsetCertTypeText() {
    this.certTypeText = null;
  }

  /** Returns true if field certTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetCertTypeText() {
    return this.certTypeText != null;
  }

  public void setCertTypeTextIsSet(boolean value) {
    if (!value) {
      this.certTypeText = null;
    }
  }

  public String getSexText() {
    return this.sexText;
  }

  public CusPerson setSexText(String sexText) {
    this.sexText = sexText;
    return this;
  }

  public void unsetSexText() {
    this.sexText = null;
  }

  /** Returns true if field sexText is set (has been assigned a value) and false otherwise */
  public boolean isSetSexText() {
    return this.sexText != null;
  }

  public void setSexTextIsSet(boolean value) {
    if (!value) {
      this.sexText = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public CusPerson setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CusPerson setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public double getProportionProperty() {
    return this.proportionProperty;
  }

  public CusPerson setProportionProperty(double proportionProperty) {
    this.proportionProperty = proportionProperty;
    setProportionPropertyIsSet(true);
    return this;
  }

  public void unsetProportionProperty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPORTIONPROPERTY_ISSET_ID);
  }

  /** Returns true if field proportionProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetProportionProperty() {
    return EncodingUtils.testBit(__isset_bitfield, __PROPORTIONPROPERTY_ISSET_ID);
  }

  public void setProportionPropertyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPORTIONPROPERTY_ISSET_ID, value);
  }

  public String getLiveProvinceCode() {
    return this.liveProvinceCode;
  }

  public CusPerson setLiveProvinceCode(String liveProvinceCode) {
    this.liveProvinceCode = liveProvinceCode;
    return this;
  }

  public void unsetLiveProvinceCode() {
    this.liveProvinceCode = null;
  }

  /** Returns true if field liveProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveProvinceCode() {
    return this.liveProvinceCode != null;
  }

  public void setLiveProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.liveProvinceCode = null;
    }
  }

  public String getLiveCityCode() {
    return this.liveCityCode;
  }

  public CusPerson setLiveCityCode(String liveCityCode) {
    this.liveCityCode = liveCityCode;
    return this;
  }

  public void unsetLiveCityCode() {
    this.liveCityCode = null;
  }

  /** Returns true if field liveCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveCityCode() {
    return this.liveCityCode != null;
  }

  public void setLiveCityCodeIsSet(boolean value) {
    if (!value) {
      this.liveCityCode = null;
    }
  }

  public String getLiveDistrictCode() {
    return this.liveDistrictCode;
  }

  public CusPerson setLiveDistrictCode(String liveDistrictCode) {
    this.liveDistrictCode = liveDistrictCode;
    return this;
  }

  public void unsetLiveDistrictCode() {
    this.liveDistrictCode = null;
  }

  /** Returns true if field liveDistrictCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveDistrictCode() {
    return this.liveDistrictCode != null;
  }

  public void setLiveDistrictCodeIsSet(boolean value) {
    if (!value) {
      this.liveDistrictCode = null;
    }
  }

  public String getCertAddr() {
    return this.certAddr;
  }

  public CusPerson setCertAddr(String certAddr) {
    this.certAddr = certAddr;
    return this;
  }

  public void unsetCertAddr() {
    this.certAddr = null;
  }

  /** Returns true if field certAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetCertAddr() {
    return this.certAddr != null;
  }

  public void setCertAddrIsSet(boolean value) {
    if (!value) {
      this.certAddr = null;
    }
  }

  public int getCusSource() {
    return this.cusSource;
  }

  public CusPerson setCusSource(int cusSource) {
    this.cusSource = cusSource;
    setCusSourceIsSet(true);
    return this;
  }

  public void unsetCusSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSSOURCE_ISSET_ID);
  }

  /** Returns true if field cusSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCusSource() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSSOURCE_ISSET_ID);
  }

  public void setCusSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSSOURCE_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public CusPerson setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_ACCT:
      if (value == null) {
        unsetCusAcct();
      } else {
        setCusAcct((CusAcct)value);
      }
      break;

    case RELATION_TYPE:
      if (value == null) {
        unsetRelationType();
      } else {
        setRelationType((Integer)value);
      }
      break;

    case CHINA_NAME:
      if (value == null) {
        unsetChinaName();
      } else {
        setChinaName((String)value);
      }
      break;

    case ENG_NAME:
      if (value == null) {
        unsetEngName();
      } else {
        setEngName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case BIRTH_DATE:
      if (value == null) {
        unsetBirthDate();
      } else {
        setBirthDate((String)value);
      }
      break;

    case NATION:
      if (value == null) {
        unsetNation();
      } else {
        setNation((String)value);
      }
      break;

    case MAIL:
      if (value == null) {
        unsetMail();
      } else {
        setMail((String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((String)value);
      }
      break;

    case WECHAT:
      if (value == null) {
        unsetWechat();
      } else {
        setWechat((String)value);
      }
      break;

    case GRADU_SCHOOL:
      if (value == null) {
        unsetGraduSchool();
      } else {
        setGraduSchool((String)value);
      }
      break;

    case GRADU_DT:
      if (value == null) {
        unsetGraduDt();
      } else {
        setGraduDt((String)value);
      }
      break;

    case EDUCATION:
      if (value == null) {
        unsetEducation();
      } else {
        setEducation((Integer)value);
      }
      break;

    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((Integer)value);
      }
      break;

    case POL_FACE:
      if (value == null) {
        unsetPolFace();
      } else {
        setPolFace((Integer)value);
      }
      break;

    case WORK_UNIT:
      if (value == null) {
        unsetWorkUnit();
      } else {
        setWorkUnit((String)value);
      }
      break;

    case UNIT_NATURE:
      if (value == null) {
        unsetUnitNature();
      } else {
        setUnitNature((Integer)value);
      }
      break;

    case REG_CAPITAL:
      if (value == null) {
        unsetRegCapital();
      } else {
        setRegCapital((Double)value);
      }
      break;

    case MAIN_BUS:
      if (value == null) {
        unsetMainBus();
      } else {
        setMainBus((String)value);
      }
      break;

    case UNIT_PHONE:
      if (value == null) {
        unsetUnitPhone();
      } else {
        setUnitPhone((String)value);
      }
      break;

    case FAX:
      if (value == null) {
        unsetFax();
      } else {
        setFax((String)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((String)value);
      }
      break;

    case WORK_SERVICE:
      if (value == null) {
        unsetWorkService();
      } else {
        setWorkService((String)value);
      }
      break;

    case OCC_NAME:
      if (value == null) {
        unsetOccName();
      } else {
        setOccName((Integer)value);
      }
      break;

    case SERVANT:
      if (value == null) {
        unsetServant();
      } else {
        setServant((Integer)value);
      }
      break;

    case DEPTMENT:
      if (value == null) {
        unsetDeptment();
      } else {
        setDeptment((String)value);
      }
      break;

    case PAY_SOC_SEC:
      if (value == null) {
        unsetPaySocSec();
      } else {
        setPaySocSec((Integer)value);
      }
      break;

    case MONTH_INCOME:
      if (value == null) {
        unsetMonthIncome();
      } else {
        setMonthIncome((Double)value);
      }
      break;

    case TRADE:
      if (value == null) {
        unsetTrade();
      } else {
        setTrade((Integer)value);
      }
      break;

    case ENTRY_TIME:
      if (value == null) {
        unsetEntryTime();
      } else {
        setEntryTime((String)value);
      }
      break;

    case PAY_WAY:
      if (value == null) {
        unsetPayWay();
      } else {
        setPayWay((Integer)value);
      }
      break;

    case MONTH_PAY_DAY:
      if (value == null) {
        unsetMonthPayDay();
      } else {
        setMonthPayDay((Integer)value);
      }
      break;

    case STAFF_NUM:
      if (value == null) {
        unsetStaffNum();
      } else {
        setStaffNum((Integer)value);
      }
      break;

    case UNIT_ADDR:
      if (value == null) {
        unsetUnitAddr();
      } else {
        setUnitAddr((String)value);
      }
      break;

    case UNIT_CODE:
      if (value == null) {
        unsetUnitCode();
      } else {
        setUnitCode((String)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((Integer)value);
      }
      break;

    case CERT_NUMBER:
      if (value == null) {
        unsetCertNumber();
      } else {
        setCertNumber((String)value);
      }
      break;

    case CERT_URL:
      if (value == null) {
        unsetCertUrl();
      } else {
        setCertUrl((String)value);
      }
      break;

    case KNOW_LOAN:
      if (value == null) {
        unsetKnowLoan();
      } else {
        setKnowLoan((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case JOB:
      if (value == null) {
        unsetJob();
      } else {
        setJob((String)value);
      }
      break;

    case RELATION:
      if (value == null) {
        unsetRelation();
      } else {
        setRelation((String)value);
      }
      break;

    case MOBILE_PHONE:
      if (value == null) {
        unsetMobilePhone();
      } else {
        setMobilePhone((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case IS_COM_OWN:
      if (value == null) {
        unsetIsComOwn();
      } else {
        setIsComOwn((Integer)value);
      }
      break;

    case BOARD_MEMBER:
      if (value == null) {
        unsetBoardMember();
      } else {
        setBoardMember((Integer)value);
      }
      break;

    case PIDS:
      if (value == null) {
        unsetPids();
      } else {
        setPids((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case MARR_STATUS:
      if (value == null) {
        unsetMarrStatus();
      } else {
        setMarrStatus((Integer)value);
      }
      break;

    case LIVE_DATE:
      if (value == null) {
        unsetLiveDate();
      } else {
        setLiveDate((Integer)value);
      }
      break;

    case SOC_SEC_NUMBER:
      if (value == null) {
        unsetSocSecNumber();
      } else {
        setSocSecNumber((String)value);
      }
      break;

    case OTHER_PHONE:
      if (value == null) {
        unsetOtherPhone();
      } else {
        setOtherPhone((String)value);
      }
      break;

    case FAMILY_PHONE:
      if (value == null) {
        unsetFamilyPhone();
      } else {
        setFamilyPhone((String)value);
      }
      break;

    case CENSUS_ADDR:
      if (value == null) {
        unsetCensusAddr();
      } else {
        setCensusAddr((String)value);
      }
      break;

    case COMM_ADDR:
      if (value == null) {
        unsetCommAddr();
      } else {
        setCommAddr((String)value);
      }
      break;

    case COMM_CODE:
      if (value == null) {
        unsetCommCode();
      } else {
        setCommCode((String)value);
      }
      break;

    case LIVE_ADDR:
      if (value == null) {
        unsetLiveAddr();
      } else {
        setLiveAddr((String)value);
      }
      break;

    case LIVE_CODE:
      if (value == null) {
        unsetLiveCode();
      } else {
        setLiveCode((String)value);
      }
      break;

    case COMMUNITY_NAME:
      if (value == null) {
        unsetCommunityName();
      } else {
        setCommunityName((String)value);
      }
      break;

    case CENSUS_CODE:
      if (value == null) {
        unsetCensusCode();
      } else {
        setCensusCode((String)value);
      }
      break;

    case RELATION_TYPE_TEXT:
      if (value == null) {
        unsetRelationTypeText();
      } else {
        setRelationTypeText((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case CERT_TYPE_TEXT:
      if (value == null) {
        unsetCertTypeText();
      } else {
        setCertTypeText((String)value);
      }
      break;

    case SEX_TEXT:
      if (value == null) {
        unsetSexText();
      } else {
        setSexText((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PROPORTION_PROPERTY:
      if (value == null) {
        unsetProportionProperty();
      } else {
        setProportionProperty((Double)value);
      }
      break;

    case LIVE_PROVINCE_CODE:
      if (value == null) {
        unsetLiveProvinceCode();
      } else {
        setLiveProvinceCode((String)value);
      }
      break;

    case LIVE_CITY_CODE:
      if (value == null) {
        unsetLiveCityCode();
      } else {
        setLiveCityCode((String)value);
      }
      break;

    case LIVE_DISTRICT_CODE:
      if (value == null) {
        unsetLiveDistrictCode();
      } else {
        setLiveDistrictCode((String)value);
      }
      break;

    case CERT_ADDR:
      if (value == null) {
        unsetCertAddr();
      } else {
        setCertAddr((String)value);
      }
      break;

    case CUS_SOURCE:
      if (value == null) {
        unsetCusSource();
      } else {
        setCusSource((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_ACCT:
      return getCusAcct();

    case RELATION_TYPE:
      return Integer.valueOf(getRelationType());

    case CHINA_NAME:
      return getChinaName();

    case ENG_NAME:
      return getEngName();

    case SEX:
      return Integer.valueOf(getSex());

    case BIRTH_DATE:
      return getBirthDate();

    case NATION:
      return getNation();

    case MAIL:
      return getMail();

    case QQ:
      return getQq();

    case WECHAT:
      return getWechat();

    case GRADU_SCHOOL:
      return getGraduSchool();

    case GRADU_DT:
      return getGraduDt();

    case EDUCATION:
      return Integer.valueOf(getEducation());

    case DEGREE:
      return Integer.valueOf(getDegree());

    case POL_FACE:
      return Integer.valueOf(getPolFace());

    case WORK_UNIT:
      return getWorkUnit();

    case UNIT_NATURE:
      return Integer.valueOf(getUnitNature());

    case REG_CAPITAL:
      return Double.valueOf(getRegCapital());

    case MAIN_BUS:
      return getMainBus();

    case UNIT_PHONE:
      return getUnitPhone();

    case FAX:
      return getFax();

    case OCCUPATION:
      return getOccupation();

    case WORK_SERVICE:
      return getWorkService();

    case OCC_NAME:
      return Integer.valueOf(getOccName());

    case SERVANT:
      return Integer.valueOf(getServant());

    case DEPTMENT:
      return getDeptment();

    case PAY_SOC_SEC:
      return Integer.valueOf(getPaySocSec());

    case MONTH_INCOME:
      return Double.valueOf(getMonthIncome());

    case TRADE:
      return Integer.valueOf(getTrade());

    case ENTRY_TIME:
      return getEntryTime();

    case PAY_WAY:
      return Integer.valueOf(getPayWay());

    case MONTH_PAY_DAY:
      return Integer.valueOf(getMonthPayDay());

    case STAFF_NUM:
      return Integer.valueOf(getStaffNum());

    case UNIT_ADDR:
      return getUnitAddr();

    case UNIT_CODE:
      return getUnitCode();

    case CERT_TYPE:
      return Integer.valueOf(getCertType());

    case CERT_NUMBER:
      return getCertNumber();

    case CERT_URL:
      return getCertUrl();

    case KNOW_LOAN:
      return Integer.valueOf(getKnowLoan());

    case STATUS:
      return Integer.valueOf(getStatus());

    case JOB:
      return getJob();

    case RELATION:
      return getRelation();

    case MOBILE_PHONE:
      return getMobilePhone();

    case TELEPHONE:
      return getTelephone();

    case IS_COM_OWN:
      return Integer.valueOf(getIsComOwn());

    case BOARD_MEMBER:
      return Integer.valueOf(getBoardMember());

    case PIDS:
      return Integer.valueOf(getPids());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case MARR_STATUS:
      return Integer.valueOf(getMarrStatus());

    case LIVE_DATE:
      return Integer.valueOf(getLiveDate());

    case SOC_SEC_NUMBER:
      return getSocSecNumber();

    case OTHER_PHONE:
      return getOtherPhone();

    case FAMILY_PHONE:
      return getFamilyPhone();

    case CENSUS_ADDR:
      return getCensusAddr();

    case COMM_ADDR:
      return getCommAddr();

    case COMM_CODE:
      return getCommCode();

    case LIVE_ADDR:
      return getLiveAddr();

    case LIVE_CODE:
      return getLiveCode();

    case COMMUNITY_NAME:
      return getCommunityName();

    case CENSUS_CODE:
      return getCensusCode();

    case RELATION_TYPE_TEXT:
      return getRelationTypeText();

    case REAL_NAME:
      return getRealName();

    case CERT_TYPE_TEXT:
      return getCertTypeText();

    case SEX_TEXT:
      return getSexText();

    case AGE:
      return Integer.valueOf(getAge());

    case USER_IDS:
      return getUserIds();

    case PROPORTION_PROPERTY:
      return Double.valueOf(getProportionProperty());

    case LIVE_PROVINCE_CODE:
      return getLiveProvinceCode();

    case LIVE_CITY_CODE:
      return getLiveCityCode();

    case LIVE_DISTRICT_CODE:
      return getLiveDistrictCode();

    case CERT_ADDR:
      return getCertAddr();

    case CUS_SOURCE:
      return Integer.valueOf(getCusSource());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_ACCT:
      return isSetCusAcct();
    case RELATION_TYPE:
      return isSetRelationType();
    case CHINA_NAME:
      return isSetChinaName();
    case ENG_NAME:
      return isSetEngName();
    case SEX:
      return isSetSex();
    case BIRTH_DATE:
      return isSetBirthDate();
    case NATION:
      return isSetNation();
    case MAIL:
      return isSetMail();
    case QQ:
      return isSetQq();
    case WECHAT:
      return isSetWechat();
    case GRADU_SCHOOL:
      return isSetGraduSchool();
    case GRADU_DT:
      return isSetGraduDt();
    case EDUCATION:
      return isSetEducation();
    case DEGREE:
      return isSetDegree();
    case POL_FACE:
      return isSetPolFace();
    case WORK_UNIT:
      return isSetWorkUnit();
    case UNIT_NATURE:
      return isSetUnitNature();
    case REG_CAPITAL:
      return isSetRegCapital();
    case MAIN_BUS:
      return isSetMainBus();
    case UNIT_PHONE:
      return isSetUnitPhone();
    case FAX:
      return isSetFax();
    case OCCUPATION:
      return isSetOccupation();
    case WORK_SERVICE:
      return isSetWorkService();
    case OCC_NAME:
      return isSetOccName();
    case SERVANT:
      return isSetServant();
    case DEPTMENT:
      return isSetDeptment();
    case PAY_SOC_SEC:
      return isSetPaySocSec();
    case MONTH_INCOME:
      return isSetMonthIncome();
    case TRADE:
      return isSetTrade();
    case ENTRY_TIME:
      return isSetEntryTime();
    case PAY_WAY:
      return isSetPayWay();
    case MONTH_PAY_DAY:
      return isSetMonthPayDay();
    case STAFF_NUM:
      return isSetStaffNum();
    case UNIT_ADDR:
      return isSetUnitAddr();
    case UNIT_CODE:
      return isSetUnitCode();
    case CERT_TYPE:
      return isSetCertType();
    case CERT_NUMBER:
      return isSetCertNumber();
    case CERT_URL:
      return isSetCertUrl();
    case KNOW_LOAN:
      return isSetKnowLoan();
    case STATUS:
      return isSetStatus();
    case JOB:
      return isSetJob();
    case RELATION:
      return isSetRelation();
    case MOBILE_PHONE:
      return isSetMobilePhone();
    case TELEPHONE:
      return isSetTelephone();
    case IS_COM_OWN:
      return isSetIsComOwn();
    case BOARD_MEMBER:
      return isSetBoardMember();
    case PIDS:
      return isSetPids();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case MARR_STATUS:
      return isSetMarrStatus();
    case LIVE_DATE:
      return isSetLiveDate();
    case SOC_SEC_NUMBER:
      return isSetSocSecNumber();
    case OTHER_PHONE:
      return isSetOtherPhone();
    case FAMILY_PHONE:
      return isSetFamilyPhone();
    case CENSUS_ADDR:
      return isSetCensusAddr();
    case COMM_ADDR:
      return isSetCommAddr();
    case COMM_CODE:
      return isSetCommCode();
    case LIVE_ADDR:
      return isSetLiveAddr();
    case LIVE_CODE:
      return isSetLiveCode();
    case COMMUNITY_NAME:
      return isSetCommunityName();
    case CENSUS_CODE:
      return isSetCensusCode();
    case RELATION_TYPE_TEXT:
      return isSetRelationTypeText();
    case REAL_NAME:
      return isSetRealName();
    case CERT_TYPE_TEXT:
      return isSetCertTypeText();
    case SEX_TEXT:
      return isSetSexText();
    case AGE:
      return isSetAge();
    case USER_IDS:
      return isSetUserIds();
    case PROPORTION_PROPERTY:
      return isSetProportionProperty();
    case LIVE_PROVINCE_CODE:
      return isSetLiveProvinceCode();
    case LIVE_CITY_CODE:
      return isSetLiveCityCode();
    case LIVE_DISTRICT_CODE:
      return isSetLiveDistrictCode();
    case CERT_ADDR:
      return isSetCertAddr();
    case CUS_SOURCE:
      return isSetCusSource();
    case ORG_ID:
      return isSetOrgId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerson)
      return this.equals((CusPerson)that);
    return false;
  }

  public boolean equals(CusPerson that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusAcct = true && this.isSetCusAcct();
    boolean that_present_cusAcct = true && that.isSetCusAcct();
    if (this_present_cusAcct || that_present_cusAcct) {
      if (!(this_present_cusAcct && that_present_cusAcct))
        return false;
      if (!this.cusAcct.equals(that.cusAcct))
        return false;
    }

    boolean this_present_relationType = true;
    boolean that_present_relationType = true;
    if (this_present_relationType || that_present_relationType) {
      if (!(this_present_relationType && that_present_relationType))
        return false;
      if (this.relationType != that.relationType)
        return false;
    }

    boolean this_present_chinaName = true && this.isSetChinaName();
    boolean that_present_chinaName = true && that.isSetChinaName();
    if (this_present_chinaName || that_present_chinaName) {
      if (!(this_present_chinaName && that_present_chinaName))
        return false;
      if (!this.chinaName.equals(that.chinaName))
        return false;
    }

    boolean this_present_engName = true && this.isSetEngName();
    boolean that_present_engName = true && that.isSetEngName();
    if (this_present_engName || that_present_engName) {
      if (!(this_present_engName && that_present_engName))
        return false;
      if (!this.engName.equals(that.engName))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_birthDate = true && this.isSetBirthDate();
    boolean that_present_birthDate = true && that.isSetBirthDate();
    if (this_present_birthDate || that_present_birthDate) {
      if (!(this_present_birthDate && that_present_birthDate))
        return false;
      if (!this.birthDate.equals(that.birthDate))
        return false;
    }

    boolean this_present_nation = true && this.isSetNation();
    boolean that_present_nation = true && that.isSetNation();
    if (this_present_nation || that_present_nation) {
      if (!(this_present_nation && that_present_nation))
        return false;
      if (!this.nation.equals(that.nation))
        return false;
    }

    boolean this_present_mail = true && this.isSetMail();
    boolean that_present_mail = true && that.isSetMail();
    if (this_present_mail || that_present_mail) {
      if (!(this_present_mail && that_present_mail))
        return false;
      if (!this.mail.equals(that.mail))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    boolean this_present_wechat = true && this.isSetWechat();
    boolean that_present_wechat = true && that.isSetWechat();
    if (this_present_wechat || that_present_wechat) {
      if (!(this_present_wechat && that_present_wechat))
        return false;
      if (!this.wechat.equals(that.wechat))
        return false;
    }

    boolean this_present_graduSchool = true && this.isSetGraduSchool();
    boolean that_present_graduSchool = true && that.isSetGraduSchool();
    if (this_present_graduSchool || that_present_graduSchool) {
      if (!(this_present_graduSchool && that_present_graduSchool))
        return false;
      if (!this.graduSchool.equals(that.graduSchool))
        return false;
    }

    boolean this_present_graduDt = true && this.isSetGraduDt();
    boolean that_present_graduDt = true && that.isSetGraduDt();
    if (this_present_graduDt || that_present_graduDt) {
      if (!(this_present_graduDt && that_present_graduDt))
        return false;
      if (!this.graduDt.equals(that.graduDt))
        return false;
    }

    boolean this_present_education = true;
    boolean that_present_education = true;
    if (this_present_education || that_present_education) {
      if (!(this_present_education && that_present_education))
        return false;
      if (this.education != that.education)
        return false;
    }

    boolean this_present_degree = true;
    boolean that_present_degree = true;
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (this.degree != that.degree)
        return false;
    }

    boolean this_present_polFace = true;
    boolean that_present_polFace = true;
    if (this_present_polFace || that_present_polFace) {
      if (!(this_present_polFace && that_present_polFace))
        return false;
      if (this.polFace != that.polFace)
        return false;
    }

    boolean this_present_workUnit = true && this.isSetWorkUnit();
    boolean that_present_workUnit = true && that.isSetWorkUnit();
    if (this_present_workUnit || that_present_workUnit) {
      if (!(this_present_workUnit && that_present_workUnit))
        return false;
      if (!this.workUnit.equals(that.workUnit))
        return false;
    }

    boolean this_present_unitNature = true;
    boolean that_present_unitNature = true;
    if (this_present_unitNature || that_present_unitNature) {
      if (!(this_present_unitNature && that_present_unitNature))
        return false;
      if (this.unitNature != that.unitNature)
        return false;
    }

    boolean this_present_regCapital = true;
    boolean that_present_regCapital = true;
    if (this_present_regCapital || that_present_regCapital) {
      if (!(this_present_regCapital && that_present_regCapital))
        return false;
      if (this.regCapital != that.regCapital)
        return false;
    }

    boolean this_present_mainBus = true && this.isSetMainBus();
    boolean that_present_mainBus = true && that.isSetMainBus();
    if (this_present_mainBus || that_present_mainBus) {
      if (!(this_present_mainBus && that_present_mainBus))
        return false;
      if (!this.mainBus.equals(that.mainBus))
        return false;
    }

    boolean this_present_unitPhone = true && this.isSetUnitPhone();
    boolean that_present_unitPhone = true && that.isSetUnitPhone();
    if (this_present_unitPhone || that_present_unitPhone) {
      if (!(this_present_unitPhone && that_present_unitPhone))
        return false;
      if (!this.unitPhone.equals(that.unitPhone))
        return false;
    }

    boolean this_present_fax = true && this.isSetFax();
    boolean that_present_fax = true && that.isSetFax();
    if (this_present_fax || that_present_fax) {
      if (!(this_present_fax && that_present_fax))
        return false;
      if (!this.fax.equals(that.fax))
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    boolean this_present_workService = true && this.isSetWorkService();
    boolean that_present_workService = true && that.isSetWorkService();
    if (this_present_workService || that_present_workService) {
      if (!(this_present_workService && that_present_workService))
        return false;
      if (!this.workService.equals(that.workService))
        return false;
    }

    boolean this_present_occName = true;
    boolean that_present_occName = true;
    if (this_present_occName || that_present_occName) {
      if (!(this_present_occName && that_present_occName))
        return false;
      if (this.occName != that.occName)
        return false;
    }

    boolean this_present_servant = true;
    boolean that_present_servant = true;
    if (this_present_servant || that_present_servant) {
      if (!(this_present_servant && that_present_servant))
        return false;
      if (this.servant != that.servant)
        return false;
    }

    boolean this_present_deptment = true && this.isSetDeptment();
    boolean that_present_deptment = true && that.isSetDeptment();
    if (this_present_deptment || that_present_deptment) {
      if (!(this_present_deptment && that_present_deptment))
        return false;
      if (!this.deptment.equals(that.deptment))
        return false;
    }

    boolean this_present_paySocSec = true;
    boolean that_present_paySocSec = true;
    if (this_present_paySocSec || that_present_paySocSec) {
      if (!(this_present_paySocSec && that_present_paySocSec))
        return false;
      if (this.paySocSec != that.paySocSec)
        return false;
    }

    boolean this_present_monthIncome = true;
    boolean that_present_monthIncome = true;
    if (this_present_monthIncome || that_present_monthIncome) {
      if (!(this_present_monthIncome && that_present_monthIncome))
        return false;
      if (this.monthIncome != that.monthIncome)
        return false;
    }

    boolean this_present_trade = true;
    boolean that_present_trade = true;
    if (this_present_trade || that_present_trade) {
      if (!(this_present_trade && that_present_trade))
        return false;
      if (this.trade != that.trade)
        return false;
    }

    boolean this_present_entryTime = true && this.isSetEntryTime();
    boolean that_present_entryTime = true && that.isSetEntryTime();
    if (this_present_entryTime || that_present_entryTime) {
      if (!(this_present_entryTime && that_present_entryTime))
        return false;
      if (!this.entryTime.equals(that.entryTime))
        return false;
    }

    boolean this_present_payWay = true;
    boolean that_present_payWay = true;
    if (this_present_payWay || that_present_payWay) {
      if (!(this_present_payWay && that_present_payWay))
        return false;
      if (this.payWay != that.payWay)
        return false;
    }

    boolean this_present_monthPayDay = true;
    boolean that_present_monthPayDay = true;
    if (this_present_monthPayDay || that_present_monthPayDay) {
      if (!(this_present_monthPayDay && that_present_monthPayDay))
        return false;
      if (this.monthPayDay != that.monthPayDay)
        return false;
    }

    boolean this_present_staffNum = true;
    boolean that_present_staffNum = true;
    if (this_present_staffNum || that_present_staffNum) {
      if (!(this_present_staffNum && that_present_staffNum))
        return false;
      if (this.staffNum != that.staffNum)
        return false;
    }

    boolean this_present_unitAddr = true && this.isSetUnitAddr();
    boolean that_present_unitAddr = true && that.isSetUnitAddr();
    if (this_present_unitAddr || that_present_unitAddr) {
      if (!(this_present_unitAddr && that_present_unitAddr))
        return false;
      if (!this.unitAddr.equals(that.unitAddr))
        return false;
    }

    boolean this_present_unitCode = true && this.isSetUnitCode();
    boolean that_present_unitCode = true && that.isSetUnitCode();
    if (this_present_unitCode || that_present_unitCode) {
      if (!(this_present_unitCode && that_present_unitCode))
        return false;
      if (!this.unitCode.equals(that.unitCode))
        return false;
    }

    boolean this_present_certType = true;
    boolean that_present_certType = true;
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (this.certType != that.certType)
        return false;
    }

    boolean this_present_certNumber = true && this.isSetCertNumber();
    boolean that_present_certNumber = true && that.isSetCertNumber();
    if (this_present_certNumber || that_present_certNumber) {
      if (!(this_present_certNumber && that_present_certNumber))
        return false;
      if (!this.certNumber.equals(that.certNumber))
        return false;
    }

    boolean this_present_certUrl = true && this.isSetCertUrl();
    boolean that_present_certUrl = true && that.isSetCertUrl();
    if (this_present_certUrl || that_present_certUrl) {
      if (!(this_present_certUrl && that_present_certUrl))
        return false;
      if (!this.certUrl.equals(that.certUrl))
        return false;
    }

    boolean this_present_knowLoan = true;
    boolean that_present_knowLoan = true;
    if (this_present_knowLoan || that_present_knowLoan) {
      if (!(this_present_knowLoan && that_present_knowLoan))
        return false;
      if (this.knowLoan != that.knowLoan)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_job = true && this.isSetJob();
    boolean that_present_job = true && that.isSetJob();
    if (this_present_job || that_present_job) {
      if (!(this_present_job && that_present_job))
        return false;
      if (!this.job.equals(that.job))
        return false;
    }

    boolean this_present_relation = true && this.isSetRelation();
    boolean that_present_relation = true && that.isSetRelation();
    if (this_present_relation || that_present_relation) {
      if (!(this_present_relation && that_present_relation))
        return false;
      if (!this.relation.equals(that.relation))
        return false;
    }

    boolean this_present_mobilePhone = true && this.isSetMobilePhone();
    boolean that_present_mobilePhone = true && that.isSetMobilePhone();
    if (this_present_mobilePhone || that_present_mobilePhone) {
      if (!(this_present_mobilePhone && that_present_mobilePhone))
        return false;
      if (!this.mobilePhone.equals(that.mobilePhone))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_isComOwn = true;
    boolean that_present_isComOwn = true;
    if (this_present_isComOwn || that_present_isComOwn) {
      if (!(this_present_isComOwn && that_present_isComOwn))
        return false;
      if (this.isComOwn != that.isComOwn)
        return false;
    }

    boolean this_present_boardMember = true;
    boolean that_present_boardMember = true;
    if (this_present_boardMember || that_present_boardMember) {
      if (!(this_present_boardMember && that_present_boardMember))
        return false;
      if (this.boardMember != that.boardMember)
        return false;
    }

    boolean this_present_pids = true;
    boolean that_present_pids = true;
    if (this_present_pids || that_present_pids) {
      if (!(this_present_pids && that_present_pids))
        return false;
      if (this.pids != that.pids)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_marrStatus = true;
    boolean that_present_marrStatus = true;
    if (this_present_marrStatus || that_present_marrStatus) {
      if (!(this_present_marrStatus && that_present_marrStatus))
        return false;
      if (this.marrStatus != that.marrStatus)
        return false;
    }

    boolean this_present_liveDate = true;
    boolean that_present_liveDate = true;
    if (this_present_liveDate || that_present_liveDate) {
      if (!(this_present_liveDate && that_present_liveDate))
        return false;
      if (this.liveDate != that.liveDate)
        return false;
    }

    boolean this_present_socSecNumber = true && this.isSetSocSecNumber();
    boolean that_present_socSecNumber = true && that.isSetSocSecNumber();
    if (this_present_socSecNumber || that_present_socSecNumber) {
      if (!(this_present_socSecNumber && that_present_socSecNumber))
        return false;
      if (!this.socSecNumber.equals(that.socSecNumber))
        return false;
    }

    boolean this_present_otherPhone = true && this.isSetOtherPhone();
    boolean that_present_otherPhone = true && that.isSetOtherPhone();
    if (this_present_otherPhone || that_present_otherPhone) {
      if (!(this_present_otherPhone && that_present_otherPhone))
        return false;
      if (!this.otherPhone.equals(that.otherPhone))
        return false;
    }

    boolean this_present_familyPhone = true && this.isSetFamilyPhone();
    boolean that_present_familyPhone = true && that.isSetFamilyPhone();
    if (this_present_familyPhone || that_present_familyPhone) {
      if (!(this_present_familyPhone && that_present_familyPhone))
        return false;
      if (!this.familyPhone.equals(that.familyPhone))
        return false;
    }

    boolean this_present_censusAddr = true && this.isSetCensusAddr();
    boolean that_present_censusAddr = true && that.isSetCensusAddr();
    if (this_present_censusAddr || that_present_censusAddr) {
      if (!(this_present_censusAddr && that_present_censusAddr))
        return false;
      if (!this.censusAddr.equals(that.censusAddr))
        return false;
    }

    boolean this_present_commAddr = true && this.isSetCommAddr();
    boolean that_present_commAddr = true && that.isSetCommAddr();
    if (this_present_commAddr || that_present_commAddr) {
      if (!(this_present_commAddr && that_present_commAddr))
        return false;
      if (!this.commAddr.equals(that.commAddr))
        return false;
    }

    boolean this_present_commCode = true && this.isSetCommCode();
    boolean that_present_commCode = true && that.isSetCommCode();
    if (this_present_commCode || that_present_commCode) {
      if (!(this_present_commCode && that_present_commCode))
        return false;
      if (!this.commCode.equals(that.commCode))
        return false;
    }

    boolean this_present_liveAddr = true && this.isSetLiveAddr();
    boolean that_present_liveAddr = true && that.isSetLiveAddr();
    if (this_present_liveAddr || that_present_liveAddr) {
      if (!(this_present_liveAddr && that_present_liveAddr))
        return false;
      if (!this.liveAddr.equals(that.liveAddr))
        return false;
    }

    boolean this_present_liveCode = true && this.isSetLiveCode();
    boolean that_present_liveCode = true && that.isSetLiveCode();
    if (this_present_liveCode || that_present_liveCode) {
      if (!(this_present_liveCode && that_present_liveCode))
        return false;
      if (!this.liveCode.equals(that.liveCode))
        return false;
    }

    boolean this_present_communityName = true && this.isSetCommunityName();
    boolean that_present_communityName = true && that.isSetCommunityName();
    if (this_present_communityName || that_present_communityName) {
      if (!(this_present_communityName && that_present_communityName))
        return false;
      if (!this.communityName.equals(that.communityName))
        return false;
    }

    boolean this_present_censusCode = true && this.isSetCensusCode();
    boolean that_present_censusCode = true && that.isSetCensusCode();
    if (this_present_censusCode || that_present_censusCode) {
      if (!(this_present_censusCode && that_present_censusCode))
        return false;
      if (!this.censusCode.equals(that.censusCode))
        return false;
    }

    boolean this_present_relationTypeText = true && this.isSetRelationTypeText();
    boolean that_present_relationTypeText = true && that.isSetRelationTypeText();
    if (this_present_relationTypeText || that_present_relationTypeText) {
      if (!(this_present_relationTypeText && that_present_relationTypeText))
        return false;
      if (!this.relationTypeText.equals(that.relationTypeText))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_certTypeText = true && this.isSetCertTypeText();
    boolean that_present_certTypeText = true && that.isSetCertTypeText();
    if (this_present_certTypeText || that_present_certTypeText) {
      if (!(this_present_certTypeText && that_present_certTypeText))
        return false;
      if (!this.certTypeText.equals(that.certTypeText))
        return false;
    }

    boolean this_present_sexText = true && this.isSetSexText();
    boolean that_present_sexText = true && that.isSetSexText();
    if (this_present_sexText || that_present_sexText) {
      if (!(this_present_sexText && that_present_sexText))
        return false;
      if (!this.sexText.equals(that.sexText))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_proportionProperty = true;
    boolean that_present_proportionProperty = true;
    if (this_present_proportionProperty || that_present_proportionProperty) {
      if (!(this_present_proportionProperty && that_present_proportionProperty))
        return false;
      if (this.proportionProperty != that.proportionProperty)
        return false;
    }

    boolean this_present_liveProvinceCode = true && this.isSetLiveProvinceCode();
    boolean that_present_liveProvinceCode = true && that.isSetLiveProvinceCode();
    if (this_present_liveProvinceCode || that_present_liveProvinceCode) {
      if (!(this_present_liveProvinceCode && that_present_liveProvinceCode))
        return false;
      if (!this.liveProvinceCode.equals(that.liveProvinceCode))
        return false;
    }

    boolean this_present_liveCityCode = true && this.isSetLiveCityCode();
    boolean that_present_liveCityCode = true && that.isSetLiveCityCode();
    if (this_present_liveCityCode || that_present_liveCityCode) {
      if (!(this_present_liveCityCode && that_present_liveCityCode))
        return false;
      if (!this.liveCityCode.equals(that.liveCityCode))
        return false;
    }

    boolean this_present_liveDistrictCode = true && this.isSetLiveDistrictCode();
    boolean that_present_liveDistrictCode = true && that.isSetLiveDistrictCode();
    if (this_present_liveDistrictCode || that_present_liveDistrictCode) {
      if (!(this_present_liveDistrictCode && that_present_liveDistrictCode))
        return false;
      if (!this.liveDistrictCode.equals(that.liveDistrictCode))
        return false;
    }

    boolean this_present_certAddr = true && this.isSetCertAddr();
    boolean that_present_certAddr = true && that.isSetCertAddr();
    if (this_present_certAddr || that_present_certAddr) {
      if (!(this_present_certAddr && that_present_certAddr))
        return false;
      if (!this.certAddr.equals(that.certAddr))
        return false;
    }

    boolean this_present_cusSource = true;
    boolean that_present_cusSource = true;
    if (this_present_cusSource || that_present_cusSource) {
      if (!(this_present_cusSource && that_present_cusSource))
        return false;
      if (this.cusSource != that.cusSource)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusAcct = true && (isSetCusAcct());
    list.add(present_cusAcct);
    if (present_cusAcct)
      list.add(cusAcct);

    boolean present_relationType = true;
    list.add(present_relationType);
    if (present_relationType)
      list.add(relationType);

    boolean present_chinaName = true && (isSetChinaName());
    list.add(present_chinaName);
    if (present_chinaName)
      list.add(chinaName);

    boolean present_engName = true && (isSetEngName());
    list.add(present_engName);
    if (present_engName)
      list.add(engName);

    boolean present_sex = true;
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_birthDate = true && (isSetBirthDate());
    list.add(present_birthDate);
    if (present_birthDate)
      list.add(birthDate);

    boolean present_nation = true && (isSetNation());
    list.add(present_nation);
    if (present_nation)
      list.add(nation);

    boolean present_mail = true && (isSetMail());
    list.add(present_mail);
    if (present_mail)
      list.add(mail);

    boolean present_qq = true && (isSetQq());
    list.add(present_qq);
    if (present_qq)
      list.add(qq);

    boolean present_wechat = true && (isSetWechat());
    list.add(present_wechat);
    if (present_wechat)
      list.add(wechat);

    boolean present_graduSchool = true && (isSetGraduSchool());
    list.add(present_graduSchool);
    if (present_graduSchool)
      list.add(graduSchool);

    boolean present_graduDt = true && (isSetGraduDt());
    list.add(present_graduDt);
    if (present_graduDt)
      list.add(graduDt);

    boolean present_education = true;
    list.add(present_education);
    if (present_education)
      list.add(education);

    boolean present_degree = true;
    list.add(present_degree);
    if (present_degree)
      list.add(degree);

    boolean present_polFace = true;
    list.add(present_polFace);
    if (present_polFace)
      list.add(polFace);

    boolean present_workUnit = true && (isSetWorkUnit());
    list.add(present_workUnit);
    if (present_workUnit)
      list.add(workUnit);

    boolean present_unitNature = true;
    list.add(present_unitNature);
    if (present_unitNature)
      list.add(unitNature);

    boolean present_regCapital = true;
    list.add(present_regCapital);
    if (present_regCapital)
      list.add(regCapital);

    boolean present_mainBus = true && (isSetMainBus());
    list.add(present_mainBus);
    if (present_mainBus)
      list.add(mainBus);

    boolean present_unitPhone = true && (isSetUnitPhone());
    list.add(present_unitPhone);
    if (present_unitPhone)
      list.add(unitPhone);

    boolean present_fax = true && (isSetFax());
    list.add(present_fax);
    if (present_fax)
      list.add(fax);

    boolean present_occupation = true && (isSetOccupation());
    list.add(present_occupation);
    if (present_occupation)
      list.add(occupation);

    boolean present_workService = true && (isSetWorkService());
    list.add(present_workService);
    if (present_workService)
      list.add(workService);

    boolean present_occName = true;
    list.add(present_occName);
    if (present_occName)
      list.add(occName);

    boolean present_servant = true;
    list.add(present_servant);
    if (present_servant)
      list.add(servant);

    boolean present_deptment = true && (isSetDeptment());
    list.add(present_deptment);
    if (present_deptment)
      list.add(deptment);

    boolean present_paySocSec = true;
    list.add(present_paySocSec);
    if (present_paySocSec)
      list.add(paySocSec);

    boolean present_monthIncome = true;
    list.add(present_monthIncome);
    if (present_monthIncome)
      list.add(monthIncome);

    boolean present_trade = true;
    list.add(present_trade);
    if (present_trade)
      list.add(trade);

    boolean present_entryTime = true && (isSetEntryTime());
    list.add(present_entryTime);
    if (present_entryTime)
      list.add(entryTime);

    boolean present_payWay = true;
    list.add(present_payWay);
    if (present_payWay)
      list.add(payWay);

    boolean present_monthPayDay = true;
    list.add(present_monthPayDay);
    if (present_monthPayDay)
      list.add(monthPayDay);

    boolean present_staffNum = true;
    list.add(present_staffNum);
    if (present_staffNum)
      list.add(staffNum);

    boolean present_unitAddr = true && (isSetUnitAddr());
    list.add(present_unitAddr);
    if (present_unitAddr)
      list.add(unitAddr);

    boolean present_unitCode = true && (isSetUnitCode());
    list.add(present_unitCode);
    if (present_unitCode)
      list.add(unitCode);

    boolean present_certType = true;
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_certNumber = true && (isSetCertNumber());
    list.add(present_certNumber);
    if (present_certNumber)
      list.add(certNumber);

    boolean present_certUrl = true && (isSetCertUrl());
    list.add(present_certUrl);
    if (present_certUrl)
      list.add(certUrl);

    boolean present_knowLoan = true;
    list.add(present_knowLoan);
    if (present_knowLoan)
      list.add(knowLoan);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_job = true && (isSetJob());
    list.add(present_job);
    if (present_job)
      list.add(job);

    boolean present_relation = true && (isSetRelation());
    list.add(present_relation);
    if (present_relation)
      list.add(relation);

    boolean present_mobilePhone = true && (isSetMobilePhone());
    list.add(present_mobilePhone);
    if (present_mobilePhone)
      list.add(mobilePhone);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_isComOwn = true;
    list.add(present_isComOwn);
    if (present_isComOwn)
      list.add(isComOwn);

    boolean present_boardMember = true;
    list.add(present_boardMember);
    if (present_boardMember)
      list.add(boardMember);

    boolean present_pids = true;
    list.add(present_pids);
    if (present_pids)
      list.add(pids);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_marrStatus = true;
    list.add(present_marrStatus);
    if (present_marrStatus)
      list.add(marrStatus);

    boolean present_liveDate = true;
    list.add(present_liveDate);
    if (present_liveDate)
      list.add(liveDate);

    boolean present_socSecNumber = true && (isSetSocSecNumber());
    list.add(present_socSecNumber);
    if (present_socSecNumber)
      list.add(socSecNumber);

    boolean present_otherPhone = true && (isSetOtherPhone());
    list.add(present_otherPhone);
    if (present_otherPhone)
      list.add(otherPhone);

    boolean present_familyPhone = true && (isSetFamilyPhone());
    list.add(present_familyPhone);
    if (present_familyPhone)
      list.add(familyPhone);

    boolean present_censusAddr = true && (isSetCensusAddr());
    list.add(present_censusAddr);
    if (present_censusAddr)
      list.add(censusAddr);

    boolean present_commAddr = true && (isSetCommAddr());
    list.add(present_commAddr);
    if (present_commAddr)
      list.add(commAddr);

    boolean present_commCode = true && (isSetCommCode());
    list.add(present_commCode);
    if (present_commCode)
      list.add(commCode);

    boolean present_liveAddr = true && (isSetLiveAddr());
    list.add(present_liveAddr);
    if (present_liveAddr)
      list.add(liveAddr);

    boolean present_liveCode = true && (isSetLiveCode());
    list.add(present_liveCode);
    if (present_liveCode)
      list.add(liveCode);

    boolean present_communityName = true && (isSetCommunityName());
    list.add(present_communityName);
    if (present_communityName)
      list.add(communityName);

    boolean present_censusCode = true && (isSetCensusCode());
    list.add(present_censusCode);
    if (present_censusCode)
      list.add(censusCode);

    boolean present_relationTypeText = true && (isSetRelationTypeText());
    list.add(present_relationTypeText);
    if (present_relationTypeText)
      list.add(relationTypeText);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_certTypeText = true && (isSetCertTypeText());
    list.add(present_certTypeText);
    if (present_certTypeText)
      list.add(certTypeText);

    boolean present_sexText = true && (isSetSexText());
    list.add(present_sexText);
    if (present_sexText)
      list.add(sexText);

    boolean present_age = true;
    list.add(present_age);
    if (present_age)
      list.add(age);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_proportionProperty = true;
    list.add(present_proportionProperty);
    if (present_proportionProperty)
      list.add(proportionProperty);

    boolean present_liveProvinceCode = true && (isSetLiveProvinceCode());
    list.add(present_liveProvinceCode);
    if (present_liveProvinceCode)
      list.add(liveProvinceCode);

    boolean present_liveCityCode = true && (isSetLiveCityCode());
    list.add(present_liveCityCode);
    if (present_liveCityCode)
      list.add(liveCityCode);

    boolean present_liveDistrictCode = true && (isSetLiveDistrictCode());
    list.add(present_liveDistrictCode);
    if (present_liveDistrictCode)
      list.add(liveDistrictCode);

    boolean present_certAddr = true && (isSetCertAddr());
    list.add(present_certAddr);
    if (present_certAddr)
      list.add(certAddr);

    boolean present_cusSource = true;
    list.add(present_cusSource);
    if (present_cusSource)
      list.add(cusSource);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerson other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcct()).compareTo(other.isSetCusAcct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcct, other.cusAcct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationType()).compareTo(other.isSetRelationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationType, other.relationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChinaName()).compareTo(other.isSetChinaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chinaName, other.chinaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngName()).compareTo(other.isSetEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engName, other.engName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthDate()).compareTo(other.isSetBirthDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthDate, other.birthDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNation()).compareTo(other.isSetNation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nation, other.nation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMail()).compareTo(other.isSetMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mail, other.mail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechat()).compareTo(other.isSetWechat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechat, other.wechat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGraduSchool()).compareTo(other.isSetGraduSchool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGraduSchool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.graduSchool, other.graduSchool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGraduDt()).compareTo(other.isSetGraduDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGraduDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.graduDt, other.graduDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEducation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(other.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, other.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolFace()).compareTo(other.isSetPolFace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolFace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.polFace, other.polFace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkUnit()).compareTo(other.isSetWorkUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workUnit, other.workUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitNature()).compareTo(other.isSetUnitNature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitNature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitNature, other.unitNature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegCapital()).compareTo(other.isSetRegCapital());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegCapital()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regCapital, other.regCapital);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainBus()).compareTo(other.isSetMainBus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainBus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainBus, other.mainBus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitPhone()).compareTo(other.isSetUnitPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitPhone, other.unitPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFax()).compareTo(other.isSetFax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fax, other.fax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkService()).compareTo(other.isSetWorkService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workService, other.workService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccName()).compareTo(other.isSetOccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occName, other.occName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServant()).compareTo(other.isSetServant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.servant, other.servant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptment()).compareTo(other.isSetDeptment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptment, other.deptment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaySocSec()).compareTo(other.isSetPaySocSec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaySocSec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paySocSec, other.paySocSec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthIncome()).compareTo(other.isSetMonthIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthIncome, other.monthIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrade()).compareTo(other.isSetTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trade, other.trade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryTime()).compareTo(other.isSetEntryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryTime, other.entryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayWay()).compareTo(other.isSetPayWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payWay, other.payWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthPayDay()).compareTo(other.isSetMonthPayDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthPayDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthPayDay, other.monthPayDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaffNum()).compareTo(other.isSetStaffNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaffNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staffNum, other.staffNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitAddr()).compareTo(other.isSetUnitAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitAddr, other.unitAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitCode()).compareTo(other.isSetUnitCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitCode, other.unitCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNumber()).compareTo(other.isSetCertNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNumber, other.certNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertUrl()).compareTo(other.isSetCertUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certUrl, other.certUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowLoan()).compareTo(other.isSetKnowLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowLoan, other.knowLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelation()).compareTo(other.isSetRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relation, other.relation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhone()).compareTo(other.isSetMobilePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhone, other.mobilePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsComOwn()).compareTo(other.isSetIsComOwn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsComOwn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isComOwn, other.isComOwn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoardMember()).compareTo(other.isSetBoardMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boardMember, other.boardMember);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarrStatus()).compareTo(other.isSetMarrStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarrStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marrStatus, other.marrStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveDate()).compareTo(other.isSetLiveDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveDate, other.liveDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSocSecNumber()).compareTo(other.isSetSocSecNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSocSecNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socSecNumber, other.socSecNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherPhone()).compareTo(other.isSetOtherPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherPhone, other.otherPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyPhone()).compareTo(other.isSetFamilyPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyPhone, other.familyPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCensusAddr()).compareTo(other.isSetCensusAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCensusAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.censusAddr, other.censusAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommAddr()).compareTo(other.isSetCommAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commAddr, other.commAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommCode()).compareTo(other.isSetCommCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commCode, other.commCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveAddr()).compareTo(other.isSetLiveAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveAddr, other.liveAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveCode()).compareTo(other.isSetLiveCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveCode, other.liveCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommunityName()).compareTo(other.isSetCommunityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communityName, other.communityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCensusCode()).compareTo(other.isSetCensusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCensusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.censusCode, other.censusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationTypeText()).compareTo(other.isSetRelationTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationTypeText, other.relationTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertTypeText()).compareTo(other.isSetCertTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certTypeText, other.certTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexText()).compareTo(other.isSetSexText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexText, other.sexText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProportionProperty()).compareTo(other.isSetProportionProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProportionProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proportionProperty, other.proportionProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveProvinceCode()).compareTo(other.isSetLiveProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveProvinceCode, other.liveProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveCityCode()).compareTo(other.isSetLiveCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveCityCode, other.liveCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveDistrictCode()).compareTo(other.isSetLiveDistrictCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveDistrictCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveDistrictCode, other.liveDistrictCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertAddr()).compareTo(other.isSetCertAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certAddr, other.certAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusSource()).compareTo(other.isSetCusSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusSource, other.cusSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerson(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcct:");
    if (this.cusAcct == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationType:");
    sb.append(this.relationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chinaName:");
    if (this.chinaName == null) {
      sb.append("null");
    } else {
      sb.append(this.chinaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engName:");
    if (this.engName == null) {
      sb.append("null");
    } else {
      sb.append(this.engName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthDate:");
    if (this.birthDate == null) {
      sb.append("null");
    } else {
      sb.append(this.birthDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nation:");
    if (this.nation == null) {
      sb.append("null");
    } else {
      sb.append(this.nation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mail:");
    if (this.mail == null) {
      sb.append("null");
    } else {
      sb.append(this.mail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qq:");
    if (this.qq == null) {
      sb.append("null");
    } else {
      sb.append(this.qq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wechat:");
    if (this.wechat == null) {
      sb.append("null");
    } else {
      sb.append(this.wechat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("graduSchool:");
    if (this.graduSchool == null) {
      sb.append("null");
    } else {
      sb.append(this.graduSchool);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("graduDt:");
    if (this.graduDt == null) {
      sb.append("null");
    } else {
      sb.append(this.graduDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("education:");
    sb.append(this.education);
    first = false;
    if (!first) sb.append(", ");
    sb.append("degree:");
    sb.append(this.degree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("polFace:");
    sb.append(this.polFace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workUnit:");
    if (this.workUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.workUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitNature:");
    sb.append(this.unitNature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regCapital:");
    sb.append(this.regCapital);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mainBus:");
    if (this.mainBus == null) {
      sb.append("null");
    } else {
      sb.append(this.mainBus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitPhone:");
    if (this.unitPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.unitPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fax:");
    if (this.fax == null) {
      sb.append("null");
    } else {
      sb.append(this.fax);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occupation:");
    if (this.occupation == null) {
      sb.append("null");
    } else {
      sb.append(this.occupation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workService:");
    if (this.workService == null) {
      sb.append("null");
    } else {
      sb.append(this.workService);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occName:");
    sb.append(this.occName);
    first = false;
    if (!first) sb.append(", ");
    sb.append("servant:");
    sb.append(this.servant);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptment:");
    if (this.deptment == null) {
      sb.append("null");
    } else {
      sb.append(this.deptment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paySocSec:");
    sb.append(this.paySocSec);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthIncome:");
    sb.append(this.monthIncome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trade:");
    sb.append(this.trade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryTime:");
    if (this.entryTime == null) {
      sb.append("null");
    } else {
      sb.append(this.entryTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payWay:");
    sb.append(this.payWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthPayDay:");
    sb.append(this.monthPayDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("staffNum:");
    sb.append(this.staffNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitAddr:");
    if (this.unitAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.unitAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitCode:");
    if (this.unitCode == null) {
      sb.append("null");
    } else {
      sb.append(this.unitCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certType:");
    sb.append(this.certType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNumber:");
    if (this.certNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certUrl:");
    if (this.certUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.certUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowLoan:");
    sb.append(this.knowLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("job:");
    if (this.job == null) {
      sb.append("null");
    } else {
      sb.append(this.job);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relation:");
    if (this.relation == null) {
      sb.append("null");
    } else {
      sb.append(this.relation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhone:");
    if (this.mobilePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isComOwn:");
    sb.append(this.isComOwn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boardMember:");
    sb.append(this.boardMember);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pids:");
    sb.append(this.pids);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marrStatus:");
    sb.append(this.marrStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveDate:");
    sb.append(this.liveDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("socSecNumber:");
    if (this.socSecNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.socSecNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherPhone:");
    if (this.otherPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.otherPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyPhone:");
    if (this.familyPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.familyPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("censusAddr:");
    if (this.censusAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.censusAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commAddr:");
    if (this.commAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.commAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commCode:");
    if (this.commCode == null) {
      sb.append("null");
    } else {
      sb.append(this.commCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveAddr:");
    if (this.liveAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.liveAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveCode:");
    if (this.liveCode == null) {
      sb.append("null");
    } else {
      sb.append(this.liveCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("communityName:");
    if (this.communityName == null) {
      sb.append("null");
    } else {
      sb.append(this.communityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("censusCode:");
    if (this.censusCode == null) {
      sb.append("null");
    } else {
      sb.append(this.censusCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationTypeText:");
    if (this.relationTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.relationTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certTypeText:");
    if (this.certTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.certTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sexText:");
    if (this.sexText == null) {
      sb.append("null");
    } else {
      sb.append(this.sexText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proportionProperty:");
    sb.append(this.proportionProperty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveProvinceCode:");
    if (this.liveProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.liveProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveCityCode:");
    if (this.liveCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.liveCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveDistrictCode:");
    if (this.liveDistrictCode == null) {
      sb.append("null");
    } else {
      sb.append(this.liveDistrictCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certAddr:");
    if (this.certAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.certAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusSource:");
    sb.append(this.cusSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusAcct != null) {
      cusAcct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPersonStandardSchemeFactory implements SchemeFactory {
    public CusPersonStandardScheme getScheme() {
      return new CusPersonStandardScheme();
    }
  }

  private static class CusPersonStandardScheme extends StandardScheme<CusPerson> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerson struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_ACCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusAcct = new CusAcct();
              struct.cusAcct.read(iprot);
              struct.setCusAcctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relationType = iprot.readI32();
              struct.setRelationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHINA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chinaName = iprot.readString();
              struct.setChinaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engName = iprot.readString();
              struct.setEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIRTH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthDate = iprot.readString();
              struct.setBirthDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nation = iprot.readString();
              struct.setNationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mail = iprot.readString();
              struct.setMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WECHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wechat = iprot.readString();
              struct.setWechatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GRADU_SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.graduSchool = iprot.readString();
              struct.setGraduSchoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GRADU_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.graduDt = iprot.readString();
              struct.setGraduDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EDUCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.education = iprot.readI32();
              struct.setEducationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.degree = iprot.readI32();
              struct.setDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POL_FACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.polFace = iprot.readI32();
              struct.setPolFaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // WORK_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workUnit = iprot.readString();
              struct.setWorkUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UNIT_NATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unitNature = iprot.readI32();
              struct.setUnitNatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REG_CAPITAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.regCapital = iprot.readDouble();
              struct.setRegCapitalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MAIN_BUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mainBus = iprot.readString();
              struct.setMainBusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UNIT_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitPhone = iprot.readString();
              struct.setUnitPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FAX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fax = iprot.readString();
              struct.setFaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation = iprot.readString();
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // WORK_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workService = iprot.readString();
              struct.setWorkServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // OCC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.occName = iprot.readI32();
              struct.setOccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SERVANT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.servant = iprot.readI32();
              struct.setServantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DEPTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptment = iprot.readString();
              struct.setDeptmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PAY_SOC_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paySocSec = iprot.readI32();
              struct.setPaySocSecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MONTH_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthIncome = iprot.readDouble();
              struct.setMonthIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.trade = iprot.readI32();
              struct.setTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ENTRY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryTime = iprot.readString();
              struct.setEntryTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PAY_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payWay = iprot.readI32();
              struct.setPayWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // MONTH_PAY_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monthPayDay = iprot.readI32();
              struct.setMonthPayDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // STAFF_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.staffNum = iprot.readI32();
              struct.setStaffNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // UNIT_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitAddr = iprot.readString();
              struct.setUnitAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // UNIT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitCode = iprot.readString();
              struct.setUnitCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.certType = iprot.readI32();
              struct.setCertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // CERT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNumber = iprot.readString();
              struct.setCertNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // CERT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certUrl = iprot.readString();
              struct.setCertUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // KNOW_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.knowLoan = iprot.readI32();
              struct.setKnowLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.job = iprot.readString();
              struct.setJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relation = iprot.readString();
              struct.setRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // MOBILE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhone = iprot.readString();
              struct.setMobilePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // IS_COM_OWN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isComOwn = iprot.readI32();
              struct.setIsComOwnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // BOARD_MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.boardMember = iprot.readI32();
              struct.setBoardMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pids = iprot.readI32();
              struct.setPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // MARR_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.marrStatus = iprot.readI32();
              struct.setMarrStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // LIVE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveDate = iprot.readI32();
              struct.setLiveDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // SOC_SEC_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.socSecNumber = iprot.readString();
              struct.setSocSecNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // OTHER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherPhone = iprot.readString();
              struct.setOtherPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // FAMILY_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.familyPhone = iprot.readString();
              struct.setFamilyPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // CENSUS_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.censusAddr = iprot.readString();
              struct.setCensusAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // COMM_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commAddr = iprot.readString();
              struct.setCommAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // COMM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commCode = iprot.readString();
              struct.setCommCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // LIVE_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveAddr = iprot.readString();
              struct.setLiveAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // LIVE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveCode = iprot.readString();
              struct.setLiveCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // COMMUNITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.communityName = iprot.readString();
              struct.setCommunityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // CENSUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.censusCode = iprot.readString();
              struct.setCensusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // RELATION_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relationTypeText = iprot.readString();
              struct.setRelationTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // CERT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certTypeText = iprot.readString();
              struct.setCertTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // SEX_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sexText = iprot.readString();
              struct.setSexTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list24.size);
                int _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI32();
                  struct.userIds.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // PROPORTION_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.proportionProperty = iprot.readDouble();
              struct.setProportionPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // LIVE_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveProvinceCode = iprot.readString();
              struct.setLiveProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // LIVE_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveCityCode = iprot.readString();
              struct.setLiveCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // LIVE_DISTRICT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveDistrictCode = iprot.readString();
              struct.setLiveDistrictCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // CERT_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certAddr = iprot.readString();
              struct.setCertAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // CUS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusSource = iprot.readI32();
              struct.setCusSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerson struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusAcct != null) {
        oprot.writeFieldBegin(CUS_ACCT_FIELD_DESC);
        struct.cusAcct.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.relationType);
      oprot.writeFieldEnd();
      if (struct.chinaName != null) {
        oprot.writeFieldBegin(CHINA_NAME_FIELD_DESC);
        oprot.writeString(struct.chinaName);
        oprot.writeFieldEnd();
      }
      if (struct.engName != null) {
        oprot.writeFieldBegin(ENG_NAME_FIELD_DESC);
        oprot.writeString(struct.engName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      if (struct.birthDate != null) {
        oprot.writeFieldBegin(BIRTH_DATE_FIELD_DESC);
        oprot.writeString(struct.birthDate);
        oprot.writeFieldEnd();
      }
      if (struct.nation != null) {
        oprot.writeFieldBegin(NATION_FIELD_DESC);
        oprot.writeString(struct.nation);
        oprot.writeFieldEnd();
      }
      if (struct.mail != null) {
        oprot.writeFieldBegin(MAIL_FIELD_DESC);
        oprot.writeString(struct.mail);
        oprot.writeFieldEnd();
      }
      if (struct.qq != null) {
        oprot.writeFieldBegin(QQ_FIELD_DESC);
        oprot.writeString(struct.qq);
        oprot.writeFieldEnd();
      }
      if (struct.wechat != null) {
        oprot.writeFieldBegin(WECHAT_FIELD_DESC);
        oprot.writeString(struct.wechat);
        oprot.writeFieldEnd();
      }
      if (struct.graduSchool != null) {
        oprot.writeFieldBegin(GRADU_SCHOOL_FIELD_DESC);
        oprot.writeString(struct.graduSchool);
        oprot.writeFieldEnd();
      }
      if (struct.graduDt != null) {
        oprot.writeFieldBegin(GRADU_DT_FIELD_DESC);
        oprot.writeString(struct.graduDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
      oprot.writeI32(struct.education);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEGREE_FIELD_DESC);
      oprot.writeI32(struct.degree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POL_FACE_FIELD_DESC);
      oprot.writeI32(struct.polFace);
      oprot.writeFieldEnd();
      if (struct.workUnit != null) {
        oprot.writeFieldBegin(WORK_UNIT_FIELD_DESC);
        oprot.writeString(struct.workUnit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UNIT_NATURE_FIELD_DESC);
      oprot.writeI32(struct.unitNature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REG_CAPITAL_FIELD_DESC);
      oprot.writeDouble(struct.regCapital);
      oprot.writeFieldEnd();
      if (struct.mainBus != null) {
        oprot.writeFieldBegin(MAIN_BUS_FIELD_DESC);
        oprot.writeString(struct.mainBus);
        oprot.writeFieldEnd();
      }
      if (struct.unitPhone != null) {
        oprot.writeFieldBegin(UNIT_PHONE_FIELD_DESC);
        oprot.writeString(struct.unitPhone);
        oprot.writeFieldEnd();
      }
      if (struct.fax != null) {
        oprot.writeFieldBegin(FAX_FIELD_DESC);
        oprot.writeString(struct.fax);
        oprot.writeFieldEnd();
      }
      if (struct.occupation != null) {
        oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
        oprot.writeString(struct.occupation);
        oprot.writeFieldEnd();
      }
      if (struct.workService != null) {
        oprot.writeFieldBegin(WORK_SERVICE_FIELD_DESC);
        oprot.writeString(struct.workService);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OCC_NAME_FIELD_DESC);
      oprot.writeI32(struct.occName);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVANT_FIELD_DESC);
      oprot.writeI32(struct.servant);
      oprot.writeFieldEnd();
      if (struct.deptment != null) {
        oprot.writeFieldBegin(DEPTMENT_FIELD_DESC);
        oprot.writeString(struct.deptment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAY_SOC_SEC_FIELD_DESC);
      oprot.writeI32(struct.paySocSec);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_INCOME_FIELD_DESC);
      oprot.writeDouble(struct.monthIncome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADE_FIELD_DESC);
      oprot.writeI32(struct.trade);
      oprot.writeFieldEnd();
      if (struct.entryTime != null) {
        oprot.writeFieldBegin(ENTRY_TIME_FIELD_DESC);
        oprot.writeString(struct.entryTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAY_WAY_FIELD_DESC);
      oprot.writeI32(struct.payWay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_PAY_DAY_FIELD_DESC);
      oprot.writeI32(struct.monthPayDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAFF_NUM_FIELD_DESC);
      oprot.writeI32(struct.staffNum);
      oprot.writeFieldEnd();
      if (struct.unitAddr != null) {
        oprot.writeFieldBegin(UNIT_ADDR_FIELD_DESC);
        oprot.writeString(struct.unitAddr);
        oprot.writeFieldEnd();
      }
      if (struct.unitCode != null) {
        oprot.writeFieldBegin(UNIT_CODE_FIELD_DESC);
        oprot.writeString(struct.unitCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.certType);
      oprot.writeFieldEnd();
      if (struct.certNumber != null) {
        oprot.writeFieldBegin(CERT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certNumber);
        oprot.writeFieldEnd();
      }
      if (struct.certUrl != null) {
        oprot.writeFieldBegin(CERT_URL_FIELD_DESC);
        oprot.writeString(struct.certUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KNOW_LOAN_FIELD_DESC);
      oprot.writeI32(struct.knowLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.job != null) {
        oprot.writeFieldBegin(JOB_FIELD_DESC);
        oprot.writeString(struct.job);
        oprot.writeFieldEnd();
      }
      if (struct.relation != null) {
        oprot.writeFieldBegin(RELATION_FIELD_DESC);
        oprot.writeString(struct.relation);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhone != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_FIELD_DESC);
        oprot.writeString(struct.mobilePhone);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_COM_OWN_FIELD_DESC);
      oprot.writeI32(struct.isComOwn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOARD_MEMBER_FIELD_DESC);
      oprot.writeI32(struct.boardMember);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PIDS_FIELD_DESC);
      oprot.writeI32(struct.pids);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARR_STATUS_FIELD_DESC);
      oprot.writeI32(struct.marrStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIVE_DATE_FIELD_DESC);
      oprot.writeI32(struct.liveDate);
      oprot.writeFieldEnd();
      if (struct.socSecNumber != null) {
        oprot.writeFieldBegin(SOC_SEC_NUMBER_FIELD_DESC);
        oprot.writeString(struct.socSecNumber);
        oprot.writeFieldEnd();
      }
      if (struct.otherPhone != null) {
        oprot.writeFieldBegin(OTHER_PHONE_FIELD_DESC);
        oprot.writeString(struct.otherPhone);
        oprot.writeFieldEnd();
      }
      if (struct.familyPhone != null) {
        oprot.writeFieldBegin(FAMILY_PHONE_FIELD_DESC);
        oprot.writeString(struct.familyPhone);
        oprot.writeFieldEnd();
      }
      if (struct.censusAddr != null) {
        oprot.writeFieldBegin(CENSUS_ADDR_FIELD_DESC);
        oprot.writeString(struct.censusAddr);
        oprot.writeFieldEnd();
      }
      if (struct.commAddr != null) {
        oprot.writeFieldBegin(COMM_ADDR_FIELD_DESC);
        oprot.writeString(struct.commAddr);
        oprot.writeFieldEnd();
      }
      if (struct.commCode != null) {
        oprot.writeFieldBegin(COMM_CODE_FIELD_DESC);
        oprot.writeString(struct.commCode);
        oprot.writeFieldEnd();
      }
      if (struct.liveAddr != null) {
        oprot.writeFieldBegin(LIVE_ADDR_FIELD_DESC);
        oprot.writeString(struct.liveAddr);
        oprot.writeFieldEnd();
      }
      if (struct.liveCode != null) {
        oprot.writeFieldBegin(LIVE_CODE_FIELD_DESC);
        oprot.writeString(struct.liveCode);
        oprot.writeFieldEnd();
      }
      if (struct.communityName != null) {
        oprot.writeFieldBegin(COMMUNITY_NAME_FIELD_DESC);
        oprot.writeString(struct.communityName);
        oprot.writeFieldEnd();
      }
      if (struct.censusCode != null) {
        oprot.writeFieldBegin(CENSUS_CODE_FIELD_DESC);
        oprot.writeString(struct.censusCode);
        oprot.writeFieldEnd();
      }
      if (struct.relationTypeText != null) {
        oprot.writeFieldBegin(RELATION_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.relationTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.certTypeText != null) {
        oprot.writeFieldBegin(CERT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.certTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.sexText != null) {
        oprot.writeFieldBegin(SEX_TEXT_FIELD_DESC);
        oprot.writeString(struct.sexText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter27 : struct.userIds)
          {
            oprot.writeI32(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROPORTION_PROPERTY_FIELD_DESC);
      oprot.writeDouble(struct.proportionProperty);
      oprot.writeFieldEnd();
      if (struct.liveProvinceCode != null) {
        oprot.writeFieldBegin(LIVE_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.liveProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.liveCityCode != null) {
        oprot.writeFieldBegin(LIVE_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.liveCityCode);
        oprot.writeFieldEnd();
      }
      if (struct.liveDistrictCode != null) {
        oprot.writeFieldBegin(LIVE_DISTRICT_CODE_FIELD_DESC);
        oprot.writeString(struct.liveDistrictCode);
        oprot.writeFieldEnd();
      }
      if (struct.certAddr != null) {
        oprot.writeFieldBegin(CERT_ADDR_FIELD_DESC);
        oprot.writeString(struct.certAddr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.cusSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPersonTupleSchemeFactory implements SchemeFactory {
    public CusPersonTupleScheme getScheme() {
      return new CusPersonTupleScheme();
    }
  }

  private static class CusPersonTupleScheme extends TupleScheme<CusPerson> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerson struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusAcct()) {
        optionals.set(1);
      }
      if (struct.isSetRelationType()) {
        optionals.set(2);
      }
      if (struct.isSetChinaName()) {
        optionals.set(3);
      }
      if (struct.isSetEngName()) {
        optionals.set(4);
      }
      if (struct.isSetSex()) {
        optionals.set(5);
      }
      if (struct.isSetBirthDate()) {
        optionals.set(6);
      }
      if (struct.isSetNation()) {
        optionals.set(7);
      }
      if (struct.isSetMail()) {
        optionals.set(8);
      }
      if (struct.isSetQq()) {
        optionals.set(9);
      }
      if (struct.isSetWechat()) {
        optionals.set(10);
      }
      if (struct.isSetGraduSchool()) {
        optionals.set(11);
      }
      if (struct.isSetGraduDt()) {
        optionals.set(12);
      }
      if (struct.isSetEducation()) {
        optionals.set(13);
      }
      if (struct.isSetDegree()) {
        optionals.set(14);
      }
      if (struct.isSetPolFace()) {
        optionals.set(15);
      }
      if (struct.isSetWorkUnit()) {
        optionals.set(16);
      }
      if (struct.isSetUnitNature()) {
        optionals.set(17);
      }
      if (struct.isSetRegCapital()) {
        optionals.set(18);
      }
      if (struct.isSetMainBus()) {
        optionals.set(19);
      }
      if (struct.isSetUnitPhone()) {
        optionals.set(20);
      }
      if (struct.isSetFax()) {
        optionals.set(21);
      }
      if (struct.isSetOccupation()) {
        optionals.set(22);
      }
      if (struct.isSetWorkService()) {
        optionals.set(23);
      }
      if (struct.isSetOccName()) {
        optionals.set(24);
      }
      if (struct.isSetServant()) {
        optionals.set(25);
      }
      if (struct.isSetDeptment()) {
        optionals.set(26);
      }
      if (struct.isSetPaySocSec()) {
        optionals.set(27);
      }
      if (struct.isSetMonthIncome()) {
        optionals.set(28);
      }
      if (struct.isSetTrade()) {
        optionals.set(29);
      }
      if (struct.isSetEntryTime()) {
        optionals.set(30);
      }
      if (struct.isSetPayWay()) {
        optionals.set(31);
      }
      if (struct.isSetMonthPayDay()) {
        optionals.set(32);
      }
      if (struct.isSetStaffNum()) {
        optionals.set(33);
      }
      if (struct.isSetUnitAddr()) {
        optionals.set(34);
      }
      if (struct.isSetUnitCode()) {
        optionals.set(35);
      }
      if (struct.isSetCertType()) {
        optionals.set(36);
      }
      if (struct.isSetCertNumber()) {
        optionals.set(37);
      }
      if (struct.isSetCertUrl()) {
        optionals.set(38);
      }
      if (struct.isSetKnowLoan()) {
        optionals.set(39);
      }
      if (struct.isSetStatus()) {
        optionals.set(40);
      }
      if (struct.isSetJob()) {
        optionals.set(41);
      }
      if (struct.isSetRelation()) {
        optionals.set(42);
      }
      if (struct.isSetMobilePhone()) {
        optionals.set(43);
      }
      if (struct.isSetTelephone()) {
        optionals.set(44);
      }
      if (struct.isSetIsComOwn()) {
        optionals.set(45);
      }
      if (struct.isSetBoardMember()) {
        optionals.set(46);
      }
      if (struct.isSetPids()) {
        optionals.set(47);
      }
      if (struct.isSetPage()) {
        optionals.set(48);
      }
      if (struct.isSetRows()) {
        optionals.set(49);
      }
      if (struct.isSetMarrStatus()) {
        optionals.set(50);
      }
      if (struct.isSetLiveDate()) {
        optionals.set(51);
      }
      if (struct.isSetSocSecNumber()) {
        optionals.set(52);
      }
      if (struct.isSetOtherPhone()) {
        optionals.set(53);
      }
      if (struct.isSetFamilyPhone()) {
        optionals.set(54);
      }
      if (struct.isSetCensusAddr()) {
        optionals.set(55);
      }
      if (struct.isSetCommAddr()) {
        optionals.set(56);
      }
      if (struct.isSetCommCode()) {
        optionals.set(57);
      }
      if (struct.isSetLiveAddr()) {
        optionals.set(58);
      }
      if (struct.isSetLiveCode()) {
        optionals.set(59);
      }
      if (struct.isSetCommunityName()) {
        optionals.set(60);
      }
      if (struct.isSetCensusCode()) {
        optionals.set(61);
      }
      if (struct.isSetRelationTypeText()) {
        optionals.set(62);
      }
      if (struct.isSetRealName()) {
        optionals.set(63);
      }
      if (struct.isSetCertTypeText()) {
        optionals.set(64);
      }
      if (struct.isSetSexText()) {
        optionals.set(65);
      }
      if (struct.isSetAge()) {
        optionals.set(66);
      }
      if (struct.isSetUserIds()) {
        optionals.set(67);
      }
      if (struct.isSetProportionProperty()) {
        optionals.set(68);
      }
      if (struct.isSetLiveProvinceCode()) {
        optionals.set(69);
      }
      if (struct.isSetLiveCityCode()) {
        optionals.set(70);
      }
      if (struct.isSetLiveDistrictCode()) {
        optionals.set(71);
      }
      if (struct.isSetCertAddr()) {
        optionals.set(72);
      }
      if (struct.isSetCusSource()) {
        optionals.set(73);
      }
      if (struct.isSetOrgId()) {
        optionals.set(74);
      }
      oprot.writeBitSet(optionals, 75);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusAcct()) {
        struct.cusAcct.write(oprot);
      }
      if (struct.isSetRelationType()) {
        oprot.writeI32(struct.relationType);
      }
      if (struct.isSetChinaName()) {
        oprot.writeString(struct.chinaName);
      }
      if (struct.isSetEngName()) {
        oprot.writeString(struct.engName);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetBirthDate()) {
        oprot.writeString(struct.birthDate);
      }
      if (struct.isSetNation()) {
        oprot.writeString(struct.nation);
      }
      if (struct.isSetMail()) {
        oprot.writeString(struct.mail);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
      if (struct.isSetWechat()) {
        oprot.writeString(struct.wechat);
      }
      if (struct.isSetGraduSchool()) {
        oprot.writeString(struct.graduSchool);
      }
      if (struct.isSetGraduDt()) {
        oprot.writeString(struct.graduDt);
      }
      if (struct.isSetEducation()) {
        oprot.writeI32(struct.education);
      }
      if (struct.isSetDegree()) {
        oprot.writeI32(struct.degree);
      }
      if (struct.isSetPolFace()) {
        oprot.writeI32(struct.polFace);
      }
      if (struct.isSetWorkUnit()) {
        oprot.writeString(struct.workUnit);
      }
      if (struct.isSetUnitNature()) {
        oprot.writeI32(struct.unitNature);
      }
      if (struct.isSetRegCapital()) {
        oprot.writeDouble(struct.regCapital);
      }
      if (struct.isSetMainBus()) {
        oprot.writeString(struct.mainBus);
      }
      if (struct.isSetUnitPhone()) {
        oprot.writeString(struct.unitPhone);
      }
      if (struct.isSetFax()) {
        oprot.writeString(struct.fax);
      }
      if (struct.isSetOccupation()) {
        oprot.writeString(struct.occupation);
      }
      if (struct.isSetWorkService()) {
        oprot.writeString(struct.workService);
      }
      if (struct.isSetOccName()) {
        oprot.writeI32(struct.occName);
      }
      if (struct.isSetServant()) {
        oprot.writeI32(struct.servant);
      }
      if (struct.isSetDeptment()) {
        oprot.writeString(struct.deptment);
      }
      if (struct.isSetPaySocSec()) {
        oprot.writeI32(struct.paySocSec);
      }
      if (struct.isSetMonthIncome()) {
        oprot.writeDouble(struct.monthIncome);
      }
      if (struct.isSetTrade()) {
        oprot.writeI32(struct.trade);
      }
      if (struct.isSetEntryTime()) {
        oprot.writeString(struct.entryTime);
      }
      if (struct.isSetPayWay()) {
        oprot.writeI32(struct.payWay);
      }
      if (struct.isSetMonthPayDay()) {
        oprot.writeI32(struct.monthPayDay);
      }
      if (struct.isSetStaffNum()) {
        oprot.writeI32(struct.staffNum);
      }
      if (struct.isSetUnitAddr()) {
        oprot.writeString(struct.unitAddr);
      }
      if (struct.isSetUnitCode()) {
        oprot.writeString(struct.unitCode);
      }
      if (struct.isSetCertType()) {
        oprot.writeI32(struct.certType);
      }
      if (struct.isSetCertNumber()) {
        oprot.writeString(struct.certNumber);
      }
      if (struct.isSetCertUrl()) {
        oprot.writeString(struct.certUrl);
      }
      if (struct.isSetKnowLoan()) {
        oprot.writeI32(struct.knowLoan);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetJob()) {
        oprot.writeString(struct.job);
      }
      if (struct.isSetRelation()) {
        oprot.writeString(struct.relation);
      }
      if (struct.isSetMobilePhone()) {
        oprot.writeString(struct.mobilePhone);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetIsComOwn()) {
        oprot.writeI32(struct.isComOwn);
      }
      if (struct.isSetBoardMember()) {
        oprot.writeI32(struct.boardMember);
      }
      if (struct.isSetPids()) {
        oprot.writeI32(struct.pids);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetMarrStatus()) {
        oprot.writeI32(struct.marrStatus);
      }
      if (struct.isSetLiveDate()) {
        oprot.writeI32(struct.liveDate);
      }
      if (struct.isSetSocSecNumber()) {
        oprot.writeString(struct.socSecNumber);
      }
      if (struct.isSetOtherPhone()) {
        oprot.writeString(struct.otherPhone);
      }
      if (struct.isSetFamilyPhone()) {
        oprot.writeString(struct.familyPhone);
      }
      if (struct.isSetCensusAddr()) {
        oprot.writeString(struct.censusAddr);
      }
      if (struct.isSetCommAddr()) {
        oprot.writeString(struct.commAddr);
      }
      if (struct.isSetCommCode()) {
        oprot.writeString(struct.commCode);
      }
      if (struct.isSetLiveAddr()) {
        oprot.writeString(struct.liveAddr);
      }
      if (struct.isSetLiveCode()) {
        oprot.writeString(struct.liveCode);
      }
      if (struct.isSetCommunityName()) {
        oprot.writeString(struct.communityName);
      }
      if (struct.isSetCensusCode()) {
        oprot.writeString(struct.censusCode);
      }
      if (struct.isSetRelationTypeText()) {
        oprot.writeString(struct.relationTypeText);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetCertTypeText()) {
        oprot.writeString(struct.certTypeText);
      }
      if (struct.isSetSexText()) {
        oprot.writeString(struct.sexText);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter28 : struct.userIds)
          {
            oprot.writeI32(_iter28);
          }
        }
      }
      if (struct.isSetProportionProperty()) {
        oprot.writeDouble(struct.proportionProperty);
      }
      if (struct.isSetLiveProvinceCode()) {
        oprot.writeString(struct.liveProvinceCode);
      }
      if (struct.isSetLiveCityCode()) {
        oprot.writeString(struct.liveCityCode);
      }
      if (struct.isSetLiveDistrictCode()) {
        oprot.writeString(struct.liveDistrictCode);
      }
      if (struct.isSetCertAddr()) {
        oprot.writeString(struct.certAddr);
      }
      if (struct.isSetCusSource()) {
        oprot.writeI32(struct.cusSource);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerson struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(75);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusAcct = new CusAcct();
        struct.cusAcct.read(iprot);
        struct.setCusAcctIsSet(true);
      }
      if (incoming.get(2)) {
        struct.relationType = iprot.readI32();
        struct.setRelationTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chinaName = iprot.readString();
        struct.setChinaNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.engName = iprot.readString();
        struct.setEngNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(6)) {
        struct.birthDate = iprot.readString();
        struct.setBirthDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nation = iprot.readString();
        struct.setNationIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mail = iprot.readString();
        struct.setMailIsSet(true);
      }
      if (incoming.get(9)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
      if (incoming.get(10)) {
        struct.wechat = iprot.readString();
        struct.setWechatIsSet(true);
      }
      if (incoming.get(11)) {
        struct.graduSchool = iprot.readString();
        struct.setGraduSchoolIsSet(true);
      }
      if (incoming.get(12)) {
        struct.graduDt = iprot.readString();
        struct.setGraduDtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.education = iprot.readI32();
        struct.setEducationIsSet(true);
      }
      if (incoming.get(14)) {
        struct.degree = iprot.readI32();
        struct.setDegreeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.polFace = iprot.readI32();
        struct.setPolFaceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.workUnit = iprot.readString();
        struct.setWorkUnitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.unitNature = iprot.readI32();
        struct.setUnitNatureIsSet(true);
      }
      if (incoming.get(18)) {
        struct.regCapital = iprot.readDouble();
        struct.setRegCapitalIsSet(true);
      }
      if (incoming.get(19)) {
        struct.mainBus = iprot.readString();
        struct.setMainBusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.unitPhone = iprot.readString();
        struct.setUnitPhoneIsSet(true);
      }
      if (incoming.get(21)) {
        struct.fax = iprot.readString();
        struct.setFaxIsSet(true);
      }
      if (incoming.get(22)) {
        struct.occupation = iprot.readString();
        struct.setOccupationIsSet(true);
      }
      if (incoming.get(23)) {
        struct.workService = iprot.readString();
        struct.setWorkServiceIsSet(true);
      }
      if (incoming.get(24)) {
        struct.occName = iprot.readI32();
        struct.setOccNameIsSet(true);
      }
      if (incoming.get(25)) {
        struct.servant = iprot.readI32();
        struct.setServantIsSet(true);
      }
      if (incoming.get(26)) {
        struct.deptment = iprot.readString();
        struct.setDeptmentIsSet(true);
      }
      if (incoming.get(27)) {
        struct.paySocSec = iprot.readI32();
        struct.setPaySocSecIsSet(true);
      }
      if (incoming.get(28)) {
        struct.monthIncome = iprot.readDouble();
        struct.setMonthIncomeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.trade = iprot.readI32();
        struct.setTradeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.entryTime = iprot.readString();
        struct.setEntryTimeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.payWay = iprot.readI32();
        struct.setPayWayIsSet(true);
      }
      if (incoming.get(32)) {
        struct.monthPayDay = iprot.readI32();
        struct.setMonthPayDayIsSet(true);
      }
      if (incoming.get(33)) {
        struct.staffNum = iprot.readI32();
        struct.setStaffNumIsSet(true);
      }
      if (incoming.get(34)) {
        struct.unitAddr = iprot.readString();
        struct.setUnitAddrIsSet(true);
      }
      if (incoming.get(35)) {
        struct.unitCode = iprot.readString();
        struct.setUnitCodeIsSet(true);
      }
      if (incoming.get(36)) {
        struct.certType = iprot.readI32();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.certNumber = iprot.readString();
        struct.setCertNumberIsSet(true);
      }
      if (incoming.get(38)) {
        struct.certUrl = iprot.readString();
        struct.setCertUrlIsSet(true);
      }
      if (incoming.get(39)) {
        struct.knowLoan = iprot.readI32();
        struct.setKnowLoanIsSet(true);
      }
      if (incoming.get(40)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(41)) {
        struct.job = iprot.readString();
        struct.setJobIsSet(true);
      }
      if (incoming.get(42)) {
        struct.relation = iprot.readString();
        struct.setRelationIsSet(true);
      }
      if (incoming.get(43)) {
        struct.mobilePhone = iprot.readString();
        struct.setMobilePhoneIsSet(true);
      }
      if (incoming.get(44)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(45)) {
        struct.isComOwn = iprot.readI32();
        struct.setIsComOwnIsSet(true);
      }
      if (incoming.get(46)) {
        struct.boardMember = iprot.readI32();
        struct.setBoardMemberIsSet(true);
      }
      if (incoming.get(47)) {
        struct.pids = iprot.readI32();
        struct.setPidsIsSet(true);
      }
      if (incoming.get(48)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(49)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(50)) {
        struct.marrStatus = iprot.readI32();
        struct.setMarrStatusIsSet(true);
      }
      if (incoming.get(51)) {
        struct.liveDate = iprot.readI32();
        struct.setLiveDateIsSet(true);
      }
      if (incoming.get(52)) {
        struct.socSecNumber = iprot.readString();
        struct.setSocSecNumberIsSet(true);
      }
      if (incoming.get(53)) {
        struct.otherPhone = iprot.readString();
        struct.setOtherPhoneIsSet(true);
      }
      if (incoming.get(54)) {
        struct.familyPhone = iprot.readString();
        struct.setFamilyPhoneIsSet(true);
      }
      if (incoming.get(55)) {
        struct.censusAddr = iprot.readString();
        struct.setCensusAddrIsSet(true);
      }
      if (incoming.get(56)) {
        struct.commAddr = iprot.readString();
        struct.setCommAddrIsSet(true);
      }
      if (incoming.get(57)) {
        struct.commCode = iprot.readString();
        struct.setCommCodeIsSet(true);
      }
      if (incoming.get(58)) {
        struct.liveAddr = iprot.readString();
        struct.setLiveAddrIsSet(true);
      }
      if (incoming.get(59)) {
        struct.liveCode = iprot.readString();
        struct.setLiveCodeIsSet(true);
      }
      if (incoming.get(60)) {
        struct.communityName = iprot.readString();
        struct.setCommunityNameIsSet(true);
      }
      if (incoming.get(61)) {
        struct.censusCode = iprot.readString();
        struct.setCensusCodeIsSet(true);
      }
      if (incoming.get(62)) {
        struct.relationTypeText = iprot.readString();
        struct.setRelationTypeTextIsSet(true);
      }
      if (incoming.get(63)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(64)) {
        struct.certTypeText = iprot.readString();
        struct.setCertTypeTextIsSet(true);
      }
      if (incoming.get(65)) {
        struct.sexText = iprot.readString();
        struct.setSexTextIsSet(true);
      }
      if (incoming.get(66)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(67)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.userIds.add(_elem30);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(68)) {
        struct.proportionProperty = iprot.readDouble();
        struct.setProportionPropertyIsSet(true);
      }
      if (incoming.get(69)) {
        struct.liveProvinceCode = iprot.readString();
        struct.setLiveProvinceCodeIsSet(true);
      }
      if (incoming.get(70)) {
        struct.liveCityCode = iprot.readString();
        struct.setLiveCityCodeIsSet(true);
      }
      if (incoming.get(71)) {
        struct.liveDistrictCode = iprot.readString();
        struct.setLiveDistrictCodeIsSet(true);
      }
      if (incoming.get(72)) {
        struct.certAddr = iprot.readString();
        struct.setCertAddrIsSet(true);
      }
      if (incoming.get(73)) {
        struct.cusSource = iprot.readI32();
        struct.setCusSourceIsSet(true);
      }
      if (incoming.get(74)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
    }
  }

}


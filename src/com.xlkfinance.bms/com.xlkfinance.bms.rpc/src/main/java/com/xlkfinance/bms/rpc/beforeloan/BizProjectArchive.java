/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizProjectArchive implements org.apache.thrift.TBase<BizProjectArchive, BizProjectArchive._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectArchive> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectArchive");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARCHIVE_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveCatelog", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ARCHIVE_CATELOG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveCatelogValue", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ARCHIVE_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveFileName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ARCHIVE_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveLocation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OFFLINE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("offlineCnt", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ONLINE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineCnt", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ARCHIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isArchive", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IS_ARCHIVE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("isArchiveValue", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("createDttm", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ARCHIVE_PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveProjectId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PROJECT_ARCHIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectArchiveId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ARCHIVE_CATELOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveCatelogName", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectArchiveStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectArchiveTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int archiveCatelog; // required
  public String archiveCatelogValue; // required
  public String archiveFileName; // required
  public String archiveLocation; // required
  public int offlineCnt; // required
  public int onlineCnt; // required
  public int isArchive; // required
  public String isArchiveValue; // required
  public String remark; // required
  public String createDttm; // required
  public int status; // required
  public int archiveProjectId; // required
  public int projectArchiveId; // required
  public String archiveCatelogName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    ARCHIVE_CATELOG((short)3, "archiveCatelog"),
    ARCHIVE_CATELOG_VALUE((short)4, "archiveCatelogValue"),
    ARCHIVE_FILE_NAME((short)5, "archiveFileName"),
    ARCHIVE_LOCATION((short)6, "archiveLocation"),
    OFFLINE_CNT((short)7, "offlineCnt"),
    ONLINE_CNT((short)8, "onlineCnt"),
    IS_ARCHIVE((short)9, "isArchive"),
    IS_ARCHIVE_VALUE((short)10, "isArchiveValue"),
    REMARK((short)11, "remark"),
    CREATE_DTTM((short)12, "createDttm"),
    STATUS((short)13, "status"),
    ARCHIVE_PROJECT_ID((short)14, "archiveProjectId"),
    PROJECT_ARCHIVE_ID((short)15, "projectArchiveId"),
    ARCHIVE_CATELOG_NAME((short)16, "archiveCatelogName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // ARCHIVE_CATELOG
          return ARCHIVE_CATELOG;
        case 4: // ARCHIVE_CATELOG_VALUE
          return ARCHIVE_CATELOG_VALUE;
        case 5: // ARCHIVE_FILE_NAME
          return ARCHIVE_FILE_NAME;
        case 6: // ARCHIVE_LOCATION
          return ARCHIVE_LOCATION;
        case 7: // OFFLINE_CNT
          return OFFLINE_CNT;
        case 8: // ONLINE_CNT
          return ONLINE_CNT;
        case 9: // IS_ARCHIVE
          return IS_ARCHIVE;
        case 10: // IS_ARCHIVE_VALUE
          return IS_ARCHIVE_VALUE;
        case 11: // REMARK
          return REMARK;
        case 12: // CREATE_DTTM
          return CREATE_DTTM;
        case 13: // STATUS
          return STATUS;
        case 14: // ARCHIVE_PROJECT_ID
          return ARCHIVE_PROJECT_ID;
        case 15: // PROJECT_ARCHIVE_ID
          return PROJECT_ARCHIVE_ID;
        case 16: // ARCHIVE_CATELOG_NAME
          return ARCHIVE_CATELOG_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __ARCHIVECATELOG_ISSET_ID = 2;
  private static final int __OFFLINECNT_ISSET_ID = 3;
  private static final int __ONLINECNT_ISSET_ID = 4;
  private static final int __ISARCHIVE_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __ARCHIVEPROJECTID_ISSET_ID = 7;
  private static final int __PROJECTARCHIVEID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVE_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("archiveCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVE_CATELOG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("archiveCatelogValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVE_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("archiveFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVE_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("archiveLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFLINE_CNT, new org.apache.thrift.meta_data.FieldMetaData("offlineCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_CNT, new org.apache.thrift.meta_data.FieldMetaData("onlineCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ARCHIVE, new org.apache.thrift.meta_data.FieldMetaData("isArchive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ARCHIVE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("isArchiveValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("createDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVE_PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("archiveProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ARCHIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("projectArchiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVE_CATELOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("archiveCatelogName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectArchive.class, metaDataMap);
  }

  public BizProjectArchive() {
  }

  public BizProjectArchive(
    int pid,
    int projectId,
    int archiveCatelog,
    String archiveCatelogValue,
    String archiveFileName,
    String archiveLocation,
    int offlineCnt,
    int onlineCnt,
    int isArchive,
    String isArchiveValue,
    String remark,
    String createDttm,
    int status,
    int archiveProjectId,
    int projectArchiveId,
    String archiveCatelogName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.archiveCatelog = archiveCatelog;
    setArchiveCatelogIsSet(true);
    this.archiveCatelogValue = archiveCatelogValue;
    this.archiveFileName = archiveFileName;
    this.archiveLocation = archiveLocation;
    this.offlineCnt = offlineCnt;
    setOfflineCntIsSet(true);
    this.onlineCnt = onlineCnt;
    setOnlineCntIsSet(true);
    this.isArchive = isArchive;
    setIsArchiveIsSet(true);
    this.isArchiveValue = isArchiveValue;
    this.remark = remark;
    this.createDttm = createDttm;
    this.status = status;
    setStatusIsSet(true);
    this.archiveProjectId = archiveProjectId;
    setArchiveProjectIdIsSet(true);
    this.projectArchiveId = projectArchiveId;
    setProjectArchiveIdIsSet(true);
    this.archiveCatelogName = archiveCatelogName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectArchive(BizProjectArchive other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.archiveCatelog = other.archiveCatelog;
    if (other.isSetArchiveCatelogValue()) {
      this.archiveCatelogValue = other.archiveCatelogValue;
    }
    if (other.isSetArchiveFileName()) {
      this.archiveFileName = other.archiveFileName;
    }
    if (other.isSetArchiveLocation()) {
      this.archiveLocation = other.archiveLocation;
    }
    this.offlineCnt = other.offlineCnt;
    this.onlineCnt = other.onlineCnt;
    this.isArchive = other.isArchive;
    if (other.isSetIsArchiveValue()) {
      this.isArchiveValue = other.isArchiveValue;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateDttm()) {
      this.createDttm = other.createDttm;
    }
    this.status = other.status;
    this.archiveProjectId = other.archiveProjectId;
    this.projectArchiveId = other.projectArchiveId;
    if (other.isSetArchiveCatelogName()) {
      this.archiveCatelogName = other.archiveCatelogName;
    }
  }

  public BizProjectArchive deepCopy() {
    return new BizProjectArchive(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setArchiveCatelogIsSet(false);
    this.archiveCatelog = 0;
    this.archiveCatelogValue = null;
    this.archiveFileName = null;
    this.archiveLocation = null;
    setOfflineCntIsSet(false);
    this.offlineCnt = 0;
    setOnlineCntIsSet(false);
    this.onlineCnt = 0;
    setIsArchiveIsSet(false);
    this.isArchive = 0;
    this.isArchiveValue = null;
    this.remark = null;
    this.createDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    setArchiveProjectIdIsSet(false);
    this.archiveProjectId = 0;
    setProjectArchiveIdIsSet(false);
    this.projectArchiveId = 0;
    this.archiveCatelogName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectArchive setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectArchive setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getArchiveCatelog() {
    return this.archiveCatelog;
  }

  public BizProjectArchive setArchiveCatelog(int archiveCatelog) {
    this.archiveCatelog = archiveCatelog;
    setArchiveCatelogIsSet(true);
    return this;
  }

  public void unsetArchiveCatelog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVECATELOG_ISSET_ID);
  }

  /** Returns true if field archiveCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveCatelog() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVECATELOG_ISSET_ID);
  }

  public void setArchiveCatelogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVECATELOG_ISSET_ID, value);
  }

  public String getArchiveCatelogValue() {
    return this.archiveCatelogValue;
  }

  public BizProjectArchive setArchiveCatelogValue(String archiveCatelogValue) {
    this.archiveCatelogValue = archiveCatelogValue;
    return this;
  }

  public void unsetArchiveCatelogValue() {
    this.archiveCatelogValue = null;
  }

  /** Returns true if field archiveCatelogValue is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveCatelogValue() {
    return this.archiveCatelogValue != null;
  }

  public void setArchiveCatelogValueIsSet(boolean value) {
    if (!value) {
      this.archiveCatelogValue = null;
    }
  }

  public String getArchiveFileName() {
    return this.archiveFileName;
  }

  public BizProjectArchive setArchiveFileName(String archiveFileName) {
    this.archiveFileName = archiveFileName;
    return this;
  }

  public void unsetArchiveFileName() {
    this.archiveFileName = null;
  }

  /** Returns true if field archiveFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveFileName() {
    return this.archiveFileName != null;
  }

  public void setArchiveFileNameIsSet(boolean value) {
    if (!value) {
      this.archiveFileName = null;
    }
  }

  public String getArchiveLocation() {
    return this.archiveLocation;
  }

  public BizProjectArchive setArchiveLocation(String archiveLocation) {
    this.archiveLocation = archiveLocation;
    return this;
  }

  public void unsetArchiveLocation() {
    this.archiveLocation = null;
  }

  /** Returns true if field archiveLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveLocation() {
    return this.archiveLocation != null;
  }

  public void setArchiveLocationIsSet(boolean value) {
    if (!value) {
      this.archiveLocation = null;
    }
  }

  public int getOfflineCnt() {
    return this.offlineCnt;
  }

  public BizProjectArchive setOfflineCnt(int offlineCnt) {
    this.offlineCnt = offlineCnt;
    setOfflineCntIsSet(true);
    return this;
  }

  public void unsetOfflineCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFLINECNT_ISSET_ID);
  }

  /** Returns true if field offlineCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflineCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFLINECNT_ISSET_ID);
  }

  public void setOfflineCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFLINECNT_ISSET_ID, value);
  }

  public int getOnlineCnt() {
    return this.onlineCnt;
  }

  public BizProjectArchive setOnlineCnt(int onlineCnt) {
    this.onlineCnt = onlineCnt;
    setOnlineCntIsSet(true);
    return this;
  }

  public void unsetOnlineCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINECNT_ISSET_ID);
  }

  /** Returns true if field onlineCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINECNT_ISSET_ID);
  }

  public void setOnlineCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINECNT_ISSET_ID, value);
  }

  public int getIsArchive() {
    return this.isArchive;
  }

  public BizProjectArchive setIsArchive(int isArchive) {
    this.isArchive = isArchive;
    setIsArchiveIsSet(true);
    return this;
  }

  public void unsetIsArchive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARCHIVE_ISSET_ID);
  }

  /** Returns true if field isArchive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArchive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARCHIVE_ISSET_ID);
  }

  public void setIsArchiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARCHIVE_ISSET_ID, value);
  }

  public String getIsArchiveValue() {
    return this.isArchiveValue;
  }

  public BizProjectArchive setIsArchiveValue(String isArchiveValue) {
    this.isArchiveValue = isArchiveValue;
    return this;
  }

  public void unsetIsArchiveValue() {
    this.isArchiveValue = null;
  }

  /** Returns true if field isArchiveValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArchiveValue() {
    return this.isArchiveValue != null;
  }

  public void setIsArchiveValueIsSet(boolean value) {
    if (!value) {
      this.isArchiveValue = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public BizProjectArchive setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateDttm() {
    return this.createDttm;
  }

  public BizProjectArchive setCreateDttm(String createDttm) {
    this.createDttm = createDttm;
    return this;
  }

  public void unsetCreateDttm() {
    this.createDttm = null;
  }

  /** Returns true if field createDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDttm() {
    return this.createDttm != null;
  }

  public void setCreateDttmIsSet(boolean value) {
    if (!value) {
      this.createDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProjectArchive setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getArchiveProjectId() {
    return this.archiveProjectId;
  }

  public BizProjectArchive setArchiveProjectId(int archiveProjectId) {
    this.archiveProjectId = archiveProjectId;
    setArchiveProjectIdIsSet(true);
    return this;
  }

  public void unsetArchiveProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEPROJECTID_ISSET_ID);
  }

  /** Returns true if field archiveProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEPROJECTID_ISSET_ID);
  }

  public void setArchiveProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEPROJECTID_ISSET_ID, value);
  }

  public int getProjectArchiveId() {
    return this.projectArchiveId;
  }

  public BizProjectArchive setProjectArchiveId(int projectArchiveId) {
    this.projectArchiveId = projectArchiveId;
    setProjectArchiveIdIsSet(true);
    return this;
  }

  public void unsetProjectArchiveId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTARCHIVEID_ISSET_ID);
  }

  /** Returns true if field projectArchiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectArchiveId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTARCHIVEID_ISSET_ID);
  }

  public void setProjectArchiveIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTARCHIVEID_ISSET_ID, value);
  }

  public String getArchiveCatelogName() {
    return this.archiveCatelogName;
  }

  public BizProjectArchive setArchiveCatelogName(String archiveCatelogName) {
    this.archiveCatelogName = archiveCatelogName;
    return this;
  }

  public void unsetArchiveCatelogName() {
    this.archiveCatelogName = null;
  }

  /** Returns true if field archiveCatelogName is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveCatelogName() {
    return this.archiveCatelogName != null;
  }

  public void setArchiveCatelogNameIsSet(boolean value) {
    if (!value) {
      this.archiveCatelogName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ARCHIVE_CATELOG:
      if (value == null) {
        unsetArchiveCatelog();
      } else {
        setArchiveCatelog((Integer)value);
      }
      break;

    case ARCHIVE_CATELOG_VALUE:
      if (value == null) {
        unsetArchiveCatelogValue();
      } else {
        setArchiveCatelogValue((String)value);
      }
      break;

    case ARCHIVE_FILE_NAME:
      if (value == null) {
        unsetArchiveFileName();
      } else {
        setArchiveFileName((String)value);
      }
      break;

    case ARCHIVE_LOCATION:
      if (value == null) {
        unsetArchiveLocation();
      } else {
        setArchiveLocation((String)value);
      }
      break;

    case OFFLINE_CNT:
      if (value == null) {
        unsetOfflineCnt();
      } else {
        setOfflineCnt((Integer)value);
      }
      break;

    case ONLINE_CNT:
      if (value == null) {
        unsetOnlineCnt();
      } else {
        setOnlineCnt((Integer)value);
      }
      break;

    case IS_ARCHIVE:
      if (value == null) {
        unsetIsArchive();
      } else {
        setIsArchive((Integer)value);
      }
      break;

    case IS_ARCHIVE_VALUE:
      if (value == null) {
        unsetIsArchiveValue();
      } else {
        setIsArchiveValue((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_DTTM:
      if (value == null) {
        unsetCreateDttm();
      } else {
        setCreateDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ARCHIVE_PROJECT_ID:
      if (value == null) {
        unsetArchiveProjectId();
      } else {
        setArchiveProjectId((Integer)value);
      }
      break;

    case PROJECT_ARCHIVE_ID:
      if (value == null) {
        unsetProjectArchiveId();
      } else {
        setProjectArchiveId((Integer)value);
      }
      break;

    case ARCHIVE_CATELOG_NAME:
      if (value == null) {
        unsetArchiveCatelogName();
      } else {
        setArchiveCatelogName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ARCHIVE_CATELOG:
      return Integer.valueOf(getArchiveCatelog());

    case ARCHIVE_CATELOG_VALUE:
      return getArchiveCatelogValue();

    case ARCHIVE_FILE_NAME:
      return getArchiveFileName();

    case ARCHIVE_LOCATION:
      return getArchiveLocation();

    case OFFLINE_CNT:
      return Integer.valueOf(getOfflineCnt());

    case ONLINE_CNT:
      return Integer.valueOf(getOnlineCnt());

    case IS_ARCHIVE:
      return Integer.valueOf(getIsArchive());

    case IS_ARCHIVE_VALUE:
      return getIsArchiveValue();

    case REMARK:
      return getRemark();

    case CREATE_DTTM:
      return getCreateDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case ARCHIVE_PROJECT_ID:
      return Integer.valueOf(getArchiveProjectId());

    case PROJECT_ARCHIVE_ID:
      return Integer.valueOf(getProjectArchiveId());

    case ARCHIVE_CATELOG_NAME:
      return getArchiveCatelogName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case ARCHIVE_CATELOG:
      return isSetArchiveCatelog();
    case ARCHIVE_CATELOG_VALUE:
      return isSetArchiveCatelogValue();
    case ARCHIVE_FILE_NAME:
      return isSetArchiveFileName();
    case ARCHIVE_LOCATION:
      return isSetArchiveLocation();
    case OFFLINE_CNT:
      return isSetOfflineCnt();
    case ONLINE_CNT:
      return isSetOnlineCnt();
    case IS_ARCHIVE:
      return isSetIsArchive();
    case IS_ARCHIVE_VALUE:
      return isSetIsArchiveValue();
    case REMARK:
      return isSetRemark();
    case CREATE_DTTM:
      return isSetCreateDttm();
    case STATUS:
      return isSetStatus();
    case ARCHIVE_PROJECT_ID:
      return isSetArchiveProjectId();
    case PROJECT_ARCHIVE_ID:
      return isSetProjectArchiveId();
    case ARCHIVE_CATELOG_NAME:
      return isSetArchiveCatelogName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectArchive)
      return this.equals((BizProjectArchive)that);
    return false;
  }

  public boolean equals(BizProjectArchive that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_archiveCatelog = true;
    boolean that_present_archiveCatelog = true;
    if (this_present_archiveCatelog || that_present_archiveCatelog) {
      if (!(this_present_archiveCatelog && that_present_archiveCatelog))
        return false;
      if (this.archiveCatelog != that.archiveCatelog)
        return false;
    }

    boolean this_present_archiveCatelogValue = true && this.isSetArchiveCatelogValue();
    boolean that_present_archiveCatelogValue = true && that.isSetArchiveCatelogValue();
    if (this_present_archiveCatelogValue || that_present_archiveCatelogValue) {
      if (!(this_present_archiveCatelogValue && that_present_archiveCatelogValue))
        return false;
      if (!this.archiveCatelogValue.equals(that.archiveCatelogValue))
        return false;
    }

    boolean this_present_archiveFileName = true && this.isSetArchiveFileName();
    boolean that_present_archiveFileName = true && that.isSetArchiveFileName();
    if (this_present_archiveFileName || that_present_archiveFileName) {
      if (!(this_present_archiveFileName && that_present_archiveFileName))
        return false;
      if (!this.archiveFileName.equals(that.archiveFileName))
        return false;
    }

    boolean this_present_archiveLocation = true && this.isSetArchiveLocation();
    boolean that_present_archiveLocation = true && that.isSetArchiveLocation();
    if (this_present_archiveLocation || that_present_archiveLocation) {
      if (!(this_present_archiveLocation && that_present_archiveLocation))
        return false;
      if (!this.archiveLocation.equals(that.archiveLocation))
        return false;
    }

    boolean this_present_offlineCnt = true;
    boolean that_present_offlineCnt = true;
    if (this_present_offlineCnt || that_present_offlineCnt) {
      if (!(this_present_offlineCnt && that_present_offlineCnt))
        return false;
      if (this.offlineCnt != that.offlineCnt)
        return false;
    }

    boolean this_present_onlineCnt = true;
    boolean that_present_onlineCnt = true;
    if (this_present_onlineCnt || that_present_onlineCnt) {
      if (!(this_present_onlineCnt && that_present_onlineCnt))
        return false;
      if (this.onlineCnt != that.onlineCnt)
        return false;
    }

    boolean this_present_isArchive = true;
    boolean that_present_isArchive = true;
    if (this_present_isArchive || that_present_isArchive) {
      if (!(this_present_isArchive && that_present_isArchive))
        return false;
      if (this.isArchive != that.isArchive)
        return false;
    }

    boolean this_present_isArchiveValue = true && this.isSetIsArchiveValue();
    boolean that_present_isArchiveValue = true && that.isSetIsArchiveValue();
    if (this_present_isArchiveValue || that_present_isArchiveValue) {
      if (!(this_present_isArchiveValue && that_present_isArchiveValue))
        return false;
      if (!this.isArchiveValue.equals(that.isArchiveValue))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createDttm = true && this.isSetCreateDttm();
    boolean that_present_createDttm = true && that.isSetCreateDttm();
    if (this_present_createDttm || that_present_createDttm) {
      if (!(this_present_createDttm && that_present_createDttm))
        return false;
      if (!this.createDttm.equals(that.createDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_archiveProjectId = true;
    boolean that_present_archiveProjectId = true;
    if (this_present_archiveProjectId || that_present_archiveProjectId) {
      if (!(this_present_archiveProjectId && that_present_archiveProjectId))
        return false;
      if (this.archiveProjectId != that.archiveProjectId)
        return false;
    }

    boolean this_present_projectArchiveId = true;
    boolean that_present_projectArchiveId = true;
    if (this_present_projectArchiveId || that_present_projectArchiveId) {
      if (!(this_present_projectArchiveId && that_present_projectArchiveId))
        return false;
      if (this.projectArchiveId != that.projectArchiveId)
        return false;
    }

    boolean this_present_archiveCatelogName = true && this.isSetArchiveCatelogName();
    boolean that_present_archiveCatelogName = true && that.isSetArchiveCatelogName();
    if (this_present_archiveCatelogName || that_present_archiveCatelogName) {
      if (!(this_present_archiveCatelogName && that_present_archiveCatelogName))
        return false;
      if (!this.archiveCatelogName.equals(that.archiveCatelogName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_archiveCatelog = true;
    list.add(present_archiveCatelog);
    if (present_archiveCatelog)
      list.add(archiveCatelog);

    boolean present_archiveCatelogValue = true && (isSetArchiveCatelogValue());
    list.add(present_archiveCatelogValue);
    if (present_archiveCatelogValue)
      list.add(archiveCatelogValue);

    boolean present_archiveFileName = true && (isSetArchiveFileName());
    list.add(present_archiveFileName);
    if (present_archiveFileName)
      list.add(archiveFileName);

    boolean present_archiveLocation = true && (isSetArchiveLocation());
    list.add(present_archiveLocation);
    if (present_archiveLocation)
      list.add(archiveLocation);

    boolean present_offlineCnt = true;
    list.add(present_offlineCnt);
    if (present_offlineCnt)
      list.add(offlineCnt);

    boolean present_onlineCnt = true;
    list.add(present_onlineCnt);
    if (present_onlineCnt)
      list.add(onlineCnt);

    boolean present_isArchive = true;
    list.add(present_isArchive);
    if (present_isArchive)
      list.add(isArchive);

    boolean present_isArchiveValue = true && (isSetIsArchiveValue());
    list.add(present_isArchiveValue);
    if (present_isArchiveValue)
      list.add(isArchiveValue);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createDttm = true && (isSetCreateDttm());
    list.add(present_createDttm);
    if (present_createDttm)
      list.add(createDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_archiveProjectId = true;
    list.add(present_archiveProjectId);
    if (present_archiveProjectId)
      list.add(archiveProjectId);

    boolean present_projectArchiveId = true;
    list.add(present_projectArchiveId);
    if (present_projectArchiveId)
      list.add(projectArchiveId);

    boolean present_archiveCatelogName = true && (isSetArchiveCatelogName());
    list.add(present_archiveCatelogName);
    if (present_archiveCatelogName)
      list.add(archiveCatelogName);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectArchive other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveCatelog()).compareTo(other.isSetArchiveCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveCatelog, other.archiveCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveCatelogValue()).compareTo(other.isSetArchiveCatelogValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveCatelogValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveCatelogValue, other.archiveCatelogValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveFileName()).compareTo(other.isSetArchiveFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveFileName, other.archiveFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveLocation()).compareTo(other.isSetArchiveLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveLocation, other.archiveLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfflineCnt()).compareTo(other.isSetOfflineCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflineCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlineCnt, other.offlineCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineCnt()).compareTo(other.isSetOnlineCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineCnt, other.onlineCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArchive()).compareTo(other.isSetIsArchive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArchive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArchive, other.isArchive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArchiveValue()).compareTo(other.isSetIsArchiveValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArchiveValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArchiveValue, other.isArchiveValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDttm()).compareTo(other.isSetCreateDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDttm, other.createDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveProjectId()).compareTo(other.isSetArchiveProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveProjectId, other.archiveProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectArchiveId()).compareTo(other.isSetProjectArchiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectArchiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectArchiveId, other.projectArchiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveCatelogName()).compareTo(other.isSetArchiveCatelogName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveCatelogName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveCatelogName, other.archiveCatelogName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectArchive(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveCatelog:");
    sb.append(this.archiveCatelog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveCatelogValue:");
    if (this.archiveCatelogValue == null) {
      sb.append("null");
    } else {
      sb.append(this.archiveCatelogValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveFileName:");
    if (this.archiveFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.archiveFileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveLocation:");
    if (this.archiveLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.archiveLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offlineCnt:");
    sb.append(this.offlineCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlineCnt:");
    sb.append(this.onlineCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArchive:");
    sb.append(this.isArchive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArchiveValue:");
    if (this.isArchiveValue == null) {
      sb.append("null");
    } else {
      sb.append(this.isArchiveValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDttm:");
    if (this.createDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.createDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveProjectId:");
    sb.append(this.archiveProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectArchiveId:");
    sb.append(this.projectArchiveId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveCatelogName:");
    if (this.archiveCatelogName == null) {
      sb.append("null");
    } else {
      sb.append(this.archiveCatelogName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectArchiveStandardSchemeFactory implements SchemeFactory {
    public BizProjectArchiveStandardScheme getScheme() {
      return new BizProjectArchiveStandardScheme();
    }
  }

  private static class BizProjectArchiveStandardScheme extends StandardScheme<BizProjectArchive> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectArchive struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARCHIVE_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.archiveCatelog = iprot.readI32();
              struct.setArchiveCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARCHIVE_CATELOG_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveCatelogValue = iprot.readString();
              struct.setArchiveCatelogValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARCHIVE_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveFileName = iprot.readString();
              struct.setArchiveFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ARCHIVE_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveLocation = iprot.readString();
              struct.setArchiveLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OFFLINE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offlineCnt = iprot.readI32();
              struct.setOfflineCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ONLINE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.onlineCnt = iprot.readI32();
              struct.setOnlineCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ARCHIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isArchive = iprot.readI32();
              struct.setIsArchiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_ARCHIVE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isArchiveValue = iprot.readString();
              struct.setIsArchiveValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDttm = iprot.readString();
              struct.setCreateDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ARCHIVE_PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.archiveProjectId = iprot.readI32();
              struct.setArchiveProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROJECT_ARCHIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectArchiveId = iprot.readI32();
              struct.setProjectArchiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ARCHIVE_CATELOG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveCatelogName = iprot.readString();
              struct.setArchiveCatelogNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectArchive struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVE_CATELOG_FIELD_DESC);
      oprot.writeI32(struct.archiveCatelog);
      oprot.writeFieldEnd();
      if (struct.archiveCatelogValue != null) {
        oprot.writeFieldBegin(ARCHIVE_CATELOG_VALUE_FIELD_DESC);
        oprot.writeString(struct.archiveCatelogValue);
        oprot.writeFieldEnd();
      }
      if (struct.archiveFileName != null) {
        oprot.writeFieldBegin(ARCHIVE_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.archiveFileName);
        oprot.writeFieldEnd();
      }
      if (struct.archiveLocation != null) {
        oprot.writeFieldBegin(ARCHIVE_LOCATION_FIELD_DESC);
        oprot.writeString(struct.archiveLocation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFLINE_CNT_FIELD_DESC);
      oprot.writeI32(struct.offlineCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONLINE_CNT_FIELD_DESC);
      oprot.writeI32(struct.onlineCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ARCHIVE_FIELD_DESC);
      oprot.writeI32(struct.isArchive);
      oprot.writeFieldEnd();
      if (struct.isArchiveValue != null) {
        oprot.writeFieldBegin(IS_ARCHIVE_VALUE_FIELD_DESC);
        oprot.writeString(struct.isArchiveValue);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createDttm != null) {
        oprot.writeFieldBegin(CREATE_DTTM_FIELD_DESC);
        oprot.writeString(struct.createDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVE_PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.archiveProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ARCHIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.projectArchiveId);
      oprot.writeFieldEnd();
      if (struct.archiveCatelogName != null) {
        oprot.writeFieldBegin(ARCHIVE_CATELOG_NAME_FIELD_DESC);
        oprot.writeString(struct.archiveCatelogName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectArchiveTupleSchemeFactory implements SchemeFactory {
    public BizProjectArchiveTupleScheme getScheme() {
      return new BizProjectArchiveTupleScheme();
    }
  }

  private static class BizProjectArchiveTupleScheme extends TupleScheme<BizProjectArchive> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectArchive struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetArchiveCatelog()) {
        optionals.set(2);
      }
      if (struct.isSetArchiveCatelogValue()) {
        optionals.set(3);
      }
      if (struct.isSetArchiveFileName()) {
        optionals.set(4);
      }
      if (struct.isSetArchiveLocation()) {
        optionals.set(5);
      }
      if (struct.isSetOfflineCnt()) {
        optionals.set(6);
      }
      if (struct.isSetOnlineCnt()) {
        optionals.set(7);
      }
      if (struct.isSetIsArchive()) {
        optionals.set(8);
      }
      if (struct.isSetIsArchiveValue()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetCreateDttm()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetArchiveProjectId()) {
        optionals.set(13);
      }
      if (struct.isSetProjectArchiveId()) {
        optionals.set(14);
      }
      if (struct.isSetArchiveCatelogName()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetArchiveCatelog()) {
        oprot.writeI32(struct.archiveCatelog);
      }
      if (struct.isSetArchiveCatelogValue()) {
        oprot.writeString(struct.archiveCatelogValue);
      }
      if (struct.isSetArchiveFileName()) {
        oprot.writeString(struct.archiveFileName);
      }
      if (struct.isSetArchiveLocation()) {
        oprot.writeString(struct.archiveLocation);
      }
      if (struct.isSetOfflineCnt()) {
        oprot.writeI32(struct.offlineCnt);
      }
      if (struct.isSetOnlineCnt()) {
        oprot.writeI32(struct.onlineCnt);
      }
      if (struct.isSetIsArchive()) {
        oprot.writeI32(struct.isArchive);
      }
      if (struct.isSetIsArchiveValue()) {
        oprot.writeString(struct.isArchiveValue);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateDttm()) {
        oprot.writeString(struct.createDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetArchiveProjectId()) {
        oprot.writeI32(struct.archiveProjectId);
      }
      if (struct.isSetProjectArchiveId()) {
        oprot.writeI32(struct.projectArchiveId);
      }
      if (struct.isSetArchiveCatelogName()) {
        oprot.writeString(struct.archiveCatelogName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectArchive struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.archiveCatelog = iprot.readI32();
        struct.setArchiveCatelogIsSet(true);
      }
      if (incoming.get(3)) {
        struct.archiveCatelogValue = iprot.readString();
        struct.setArchiveCatelogValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.archiveFileName = iprot.readString();
        struct.setArchiveFileNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.archiveLocation = iprot.readString();
        struct.setArchiveLocationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.offlineCnt = iprot.readI32();
        struct.setOfflineCntIsSet(true);
      }
      if (incoming.get(7)) {
        struct.onlineCnt = iprot.readI32();
        struct.setOnlineCntIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isArchive = iprot.readI32();
        struct.setIsArchiveIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isArchiveValue = iprot.readString();
        struct.setIsArchiveValueIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createDttm = iprot.readString();
        struct.setCreateDttmIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.archiveProjectId = iprot.readI32();
        struct.setArchiveProjectIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.projectArchiveId = iprot.readI32();
        struct.setProjectArchiveIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.archiveCatelogName = iprot.readString();
        struct.setArchiveCatelogNameIsSet(true);
      }
    }
  }

}


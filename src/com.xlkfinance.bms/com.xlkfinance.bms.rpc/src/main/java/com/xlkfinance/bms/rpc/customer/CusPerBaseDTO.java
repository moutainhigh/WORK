/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerBaseDTO implements org.apache.thrift.TBase<CusPerBaseDTO, CusPerBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerBaseDTO");

  private static final org.apache.thrift.protocol.TField CUS_PER_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerBase", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerson", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CUS_PER_SOC_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerSocSec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcct", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sexId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("certTypeId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CERT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CUS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("cusStatus", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField CUS_RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("cusRelation", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField SPOUSE_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("spousePerson", org.apache.thrift.protocol.TType.STRUCT, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerBaseDTOTupleSchemeFactory());
  }

  public CusPerBase cusPerBase; // required
  public CusPerson cusPerson; // required
  public CusPerSocSec cusPerSocSec; // required
  public CusAcct cusAcct; // required
  public String cusName; // required
  public int sexId; // required
  public int certTypeId; // required
  public String certNumber; // required
  public int cusType; // required
  public int cusStatus; // required
  public int page; // required
  public int rows; // required
  public int userId; // required
  public List<Integer> userIds; // required
  public CusRelation cusRelation; // required
  public CusPerson spousePerson; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUS_PER_BASE((short)1, "cusPerBase"),
    CUS_PERSON((short)2, "cusPerson"),
    CUS_PER_SOC_SEC((short)3, "cusPerSocSec"),
    CUS_ACCT((short)4, "cusAcct"),
    CUS_NAME((short)5, "cusName"),
    SEX_ID((short)6, "sexId"),
    CERT_TYPE_ID((short)7, "certTypeId"),
    CERT_NUMBER((short)8, "certNumber"),
    CUS_TYPE((short)9, "cusType"),
    CUS_STATUS((short)10, "cusStatus"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows"),
    USER_ID((short)13, "userId"),
    USER_IDS((short)14, "userIds"),
    CUS_RELATION((short)15, "cusRelation"),
    SPOUSE_PERSON((short)16, "spousePerson");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUS_PER_BASE
          return CUS_PER_BASE;
        case 2: // CUS_PERSON
          return CUS_PERSON;
        case 3: // CUS_PER_SOC_SEC
          return CUS_PER_SOC_SEC;
        case 4: // CUS_ACCT
          return CUS_ACCT;
        case 5: // CUS_NAME
          return CUS_NAME;
        case 6: // SEX_ID
          return SEX_ID;
        case 7: // CERT_TYPE_ID
          return CERT_TYPE_ID;
        case 8: // CERT_NUMBER
          return CERT_NUMBER;
        case 9: // CUS_TYPE
          return CUS_TYPE;
        case 10: // CUS_STATUS
          return CUS_STATUS;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        case 13: // USER_ID
          return USER_ID;
        case 14: // USER_IDS
          return USER_IDS;
        case 15: // CUS_RELATION
          return CUS_RELATION;
        case 16: // SPOUSE_PERSON
          return SPOUSE_PERSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEXID_ISSET_ID = 0;
  private static final int __CERTTYPEID_ISSET_ID = 1;
  private static final int __CUSTYPE_ISSET_ID = 2;
  private static final int __CUSSTATUS_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private static final int __USERID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUS_PER_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusPerBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerBase.class)));
    tmpMap.put(_Fields.CUS_PERSON, new org.apache.thrift.meta_data.FieldMetaData("cusPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerson.class)));
    tmpMap.put(_Fields.CUS_PER_SOC_SEC, new org.apache.thrift.meta_data.FieldMetaData("cusPerSocSec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerSocSec.class)));
    tmpMap.put(_Fields.CUS_ACCT, new org.apache.thrift.meta_data.FieldMetaData("cusAcct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusAcct.class)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX_ID, new org.apache.thrift.meta_data.FieldMetaData("sexId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERT_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("certTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("cusStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CUS_RELATION, new org.apache.thrift.meta_data.FieldMetaData("cusRelation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "CusRelation")));
    tmpMap.put(_Fields.SPOUSE_PERSON, new org.apache.thrift.meta_data.FieldMetaData("spousePerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerson.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerBaseDTO.class, metaDataMap);
  }

  public CusPerBaseDTO() {
  }

  public CusPerBaseDTO(
    CusPerBase cusPerBase,
    CusPerson cusPerson,
    CusPerSocSec cusPerSocSec,
    CusAcct cusAcct,
    String cusName,
    int sexId,
    int certTypeId,
    String certNumber,
    int cusType,
    int cusStatus,
    int page,
    int rows,
    int userId,
    List<Integer> userIds,
    CusRelation cusRelation,
    CusPerson spousePerson)
  {
    this();
    this.cusPerBase = cusPerBase;
    this.cusPerson = cusPerson;
    this.cusPerSocSec = cusPerSocSec;
    this.cusAcct = cusAcct;
    this.cusName = cusName;
    this.sexId = sexId;
    setSexIdIsSet(true);
    this.certTypeId = certTypeId;
    setCertTypeIdIsSet(true);
    this.certNumber = certNumber;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.cusStatus = cusStatus;
    setCusStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.userIds = userIds;
    this.cusRelation = cusRelation;
    this.spousePerson = spousePerson;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerBaseDTO(CusPerBaseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCusPerBase()) {
      this.cusPerBase = new CusPerBase(other.cusPerBase);
    }
    if (other.isSetCusPerson()) {
      this.cusPerson = new CusPerson(other.cusPerson);
    }
    if (other.isSetCusPerSocSec()) {
      this.cusPerSocSec = new CusPerSocSec(other.cusPerSocSec);
    }
    if (other.isSetCusAcct()) {
      this.cusAcct = new CusAcct(other.cusAcct);
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    this.sexId = other.sexId;
    this.certTypeId = other.certTypeId;
    if (other.isSetCertNumber()) {
      this.certNumber = other.certNumber;
    }
    this.cusType = other.cusType;
    this.cusStatus = other.cusStatus;
    this.page = other.page;
    this.rows = other.rows;
    this.userId = other.userId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetCusRelation()) {
      this.cusRelation = other.cusRelation;
    }
    if (other.isSetSpousePerson()) {
      this.spousePerson = new CusPerson(other.spousePerson);
    }
  }

  public CusPerBaseDTO deepCopy() {
    return new CusPerBaseDTO(this);
  }

  @Override
  public void clear() {
    this.cusPerBase = null;
    this.cusPerson = null;
    this.cusPerSocSec = null;
    this.cusAcct = null;
    this.cusName = null;
    setSexIdIsSet(false);
    this.sexId = 0;
    setCertTypeIdIsSet(false);
    this.certTypeId = 0;
    this.certNumber = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    setCusStatusIsSet(false);
    this.cusStatus = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.userIds = null;
    this.cusRelation = null;
    this.spousePerson = null;
  }

  public CusPerBase getCusPerBase() {
    return this.cusPerBase;
  }

  public CusPerBaseDTO setCusPerBase(CusPerBase cusPerBase) {
    this.cusPerBase = cusPerBase;
    return this;
  }

  public void unsetCusPerBase() {
    this.cusPerBase = null;
  }

  /** Returns true if field cusPerBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerBase() {
    return this.cusPerBase != null;
  }

  public void setCusPerBaseIsSet(boolean value) {
    if (!value) {
      this.cusPerBase = null;
    }
  }

  public CusPerson getCusPerson() {
    return this.cusPerson;
  }

  public CusPerBaseDTO setCusPerson(CusPerson cusPerson) {
    this.cusPerson = cusPerson;
    return this;
  }

  public void unsetCusPerson() {
    this.cusPerson = null;
  }

  /** Returns true if field cusPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerson() {
    return this.cusPerson != null;
  }

  public void setCusPersonIsSet(boolean value) {
    if (!value) {
      this.cusPerson = null;
    }
  }

  public CusPerSocSec getCusPerSocSec() {
    return this.cusPerSocSec;
  }

  public CusPerBaseDTO setCusPerSocSec(CusPerSocSec cusPerSocSec) {
    this.cusPerSocSec = cusPerSocSec;
    return this;
  }

  public void unsetCusPerSocSec() {
    this.cusPerSocSec = null;
  }

  /** Returns true if field cusPerSocSec is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerSocSec() {
    return this.cusPerSocSec != null;
  }

  public void setCusPerSocSecIsSet(boolean value) {
    if (!value) {
      this.cusPerSocSec = null;
    }
  }

  public CusAcct getCusAcct() {
    return this.cusAcct;
  }

  public CusPerBaseDTO setCusAcct(CusAcct cusAcct) {
    this.cusAcct = cusAcct;
    return this;
  }

  public void unsetCusAcct() {
    this.cusAcct = null;
  }

  /** Returns true if field cusAcct is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcct() {
    return this.cusAcct != null;
  }

  public void setCusAcctIsSet(boolean value) {
    if (!value) {
      this.cusAcct = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public CusPerBaseDTO setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public int getSexId() {
    return this.sexId;
  }

  public CusPerBaseDTO setSexId(int sexId) {
    this.sexId = sexId;
    setSexIdIsSet(true);
    return this;
  }

  public void unsetSexId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEXID_ISSET_ID);
  }

  /** Returns true if field sexId is set (has been assigned a value) and false otherwise */
  public boolean isSetSexId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEXID_ISSET_ID);
  }

  public void setSexIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEXID_ISSET_ID, value);
  }

  public int getCertTypeId() {
    return this.certTypeId;
  }

  public CusPerBaseDTO setCertTypeId(int certTypeId) {
    this.certTypeId = certTypeId;
    setCertTypeIdIsSet(true);
    return this;
  }

  public void unsetCertTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CERTTYPEID_ISSET_ID);
  }

  /** Returns true if field certTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCertTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __CERTTYPEID_ISSET_ID);
  }

  public void setCertTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CERTTYPEID_ISSET_ID, value);
  }

  public String getCertNumber() {
    return this.certNumber;
  }

  public CusPerBaseDTO setCertNumber(String certNumber) {
    this.certNumber = certNumber;
    return this;
  }

  public void unsetCertNumber() {
    this.certNumber = null;
  }

  /** Returns true if field certNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNumber() {
    return this.certNumber != null;
  }

  public void setCertNumberIsSet(boolean value) {
    if (!value) {
      this.certNumber = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public CusPerBaseDTO setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public int getCusStatus() {
    return this.cusStatus;
  }

  public CusPerBaseDTO setCusStatus(int cusStatus) {
    this.cusStatus = cusStatus;
    setCusStatusIsSet(true);
    return this;
  }

  public void unsetCusStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSSTATUS_ISSET_ID);
  }

  /** Returns true if field cusStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCusStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSSTATUS_ISSET_ID);
  }

  public void setCusStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSSTATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusPerBaseDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusPerBaseDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public CusPerBaseDTO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CusPerBaseDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public CusRelation getCusRelation() {
    return this.cusRelation;
  }

  public CusPerBaseDTO setCusRelation(CusRelation cusRelation) {
    this.cusRelation = cusRelation;
    return this;
  }

  public void unsetCusRelation() {
    this.cusRelation = null;
  }

  /** Returns true if field cusRelation is set (has been assigned a value) and false otherwise */
  public boolean isSetCusRelation() {
    return this.cusRelation != null;
  }

  public void setCusRelationIsSet(boolean value) {
    if (!value) {
      this.cusRelation = null;
    }
  }

  public CusPerson getSpousePerson() {
    return this.spousePerson;
  }

  public CusPerBaseDTO setSpousePerson(CusPerson spousePerson) {
    this.spousePerson = spousePerson;
    return this;
  }

  public void unsetSpousePerson() {
    this.spousePerson = null;
  }

  /** Returns true if field spousePerson is set (has been assigned a value) and false otherwise */
  public boolean isSetSpousePerson() {
    return this.spousePerson != null;
  }

  public void setSpousePersonIsSet(boolean value) {
    if (!value) {
      this.spousePerson = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUS_PER_BASE:
      if (value == null) {
        unsetCusPerBase();
      } else {
        setCusPerBase((CusPerBase)value);
      }
      break;

    case CUS_PERSON:
      if (value == null) {
        unsetCusPerson();
      } else {
        setCusPerson((CusPerson)value);
      }
      break;

    case CUS_PER_SOC_SEC:
      if (value == null) {
        unsetCusPerSocSec();
      } else {
        setCusPerSocSec((CusPerSocSec)value);
      }
      break;

    case CUS_ACCT:
      if (value == null) {
        unsetCusAcct();
      } else {
        setCusAcct((CusAcct)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case SEX_ID:
      if (value == null) {
        unsetSexId();
      } else {
        setSexId((Integer)value);
      }
      break;

    case CERT_TYPE_ID:
      if (value == null) {
        unsetCertTypeId();
      } else {
        setCertTypeId((Integer)value);
      }
      break;

    case CERT_NUMBER:
      if (value == null) {
        unsetCertNumber();
      } else {
        setCertNumber((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case CUS_STATUS:
      if (value == null) {
        unsetCusStatus();
      } else {
        setCusStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case CUS_RELATION:
      if (value == null) {
        unsetCusRelation();
      } else {
        setCusRelation((CusRelation)value);
      }
      break;

    case SPOUSE_PERSON:
      if (value == null) {
        unsetSpousePerson();
      } else {
        setSpousePerson((CusPerson)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUS_PER_BASE:
      return getCusPerBase();

    case CUS_PERSON:
      return getCusPerson();

    case CUS_PER_SOC_SEC:
      return getCusPerSocSec();

    case CUS_ACCT:
      return getCusAcct();

    case CUS_NAME:
      return getCusName();

    case SEX_ID:
      return Integer.valueOf(getSexId());

    case CERT_TYPE_ID:
      return Integer.valueOf(getCertTypeId());

    case CERT_NUMBER:
      return getCertNumber();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case CUS_STATUS:
      return Integer.valueOf(getCusStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case USER_IDS:
      return getUserIds();

    case CUS_RELATION:
      return getCusRelation();

    case SPOUSE_PERSON:
      return getSpousePerson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUS_PER_BASE:
      return isSetCusPerBase();
    case CUS_PERSON:
      return isSetCusPerson();
    case CUS_PER_SOC_SEC:
      return isSetCusPerSocSec();
    case CUS_ACCT:
      return isSetCusAcct();
    case CUS_NAME:
      return isSetCusName();
    case SEX_ID:
      return isSetSexId();
    case CERT_TYPE_ID:
      return isSetCertTypeId();
    case CERT_NUMBER:
      return isSetCertNumber();
    case CUS_TYPE:
      return isSetCusType();
    case CUS_STATUS:
      return isSetCusStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_ID:
      return isSetUserId();
    case USER_IDS:
      return isSetUserIds();
    case CUS_RELATION:
      return isSetCusRelation();
    case SPOUSE_PERSON:
      return isSetSpousePerson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerBaseDTO)
      return this.equals((CusPerBaseDTO)that);
    return false;
  }

  public boolean equals(CusPerBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_cusPerBase = true && this.isSetCusPerBase();
    boolean that_present_cusPerBase = true && that.isSetCusPerBase();
    if (this_present_cusPerBase || that_present_cusPerBase) {
      if (!(this_present_cusPerBase && that_present_cusPerBase))
        return false;
      if (!this.cusPerBase.equals(that.cusPerBase))
        return false;
    }

    boolean this_present_cusPerson = true && this.isSetCusPerson();
    boolean that_present_cusPerson = true && that.isSetCusPerson();
    if (this_present_cusPerson || that_present_cusPerson) {
      if (!(this_present_cusPerson && that_present_cusPerson))
        return false;
      if (!this.cusPerson.equals(that.cusPerson))
        return false;
    }

    boolean this_present_cusPerSocSec = true && this.isSetCusPerSocSec();
    boolean that_present_cusPerSocSec = true && that.isSetCusPerSocSec();
    if (this_present_cusPerSocSec || that_present_cusPerSocSec) {
      if (!(this_present_cusPerSocSec && that_present_cusPerSocSec))
        return false;
      if (!this.cusPerSocSec.equals(that.cusPerSocSec))
        return false;
    }

    boolean this_present_cusAcct = true && this.isSetCusAcct();
    boolean that_present_cusAcct = true && that.isSetCusAcct();
    if (this_present_cusAcct || that_present_cusAcct) {
      if (!(this_present_cusAcct && that_present_cusAcct))
        return false;
      if (!this.cusAcct.equals(that.cusAcct))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_sexId = true;
    boolean that_present_sexId = true;
    if (this_present_sexId || that_present_sexId) {
      if (!(this_present_sexId && that_present_sexId))
        return false;
      if (this.sexId != that.sexId)
        return false;
    }

    boolean this_present_certTypeId = true;
    boolean that_present_certTypeId = true;
    if (this_present_certTypeId || that_present_certTypeId) {
      if (!(this_present_certTypeId && that_present_certTypeId))
        return false;
      if (this.certTypeId != that.certTypeId)
        return false;
    }

    boolean this_present_certNumber = true && this.isSetCertNumber();
    boolean that_present_certNumber = true && that.isSetCertNumber();
    if (this_present_certNumber || that_present_certNumber) {
      if (!(this_present_certNumber && that_present_certNumber))
        return false;
      if (!this.certNumber.equals(that.certNumber))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_cusStatus = true;
    boolean that_present_cusStatus = true;
    if (this_present_cusStatus || that_present_cusStatus) {
      if (!(this_present_cusStatus && that_present_cusStatus))
        return false;
      if (this.cusStatus != that.cusStatus)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_cusRelation = true && this.isSetCusRelation();
    boolean that_present_cusRelation = true && that.isSetCusRelation();
    if (this_present_cusRelation || that_present_cusRelation) {
      if (!(this_present_cusRelation && that_present_cusRelation))
        return false;
      if (!this.cusRelation.equals(that.cusRelation))
        return false;
    }

    boolean this_present_spousePerson = true && this.isSetSpousePerson();
    boolean that_present_spousePerson = true && that.isSetSpousePerson();
    if (this_present_spousePerson || that_present_spousePerson) {
      if (!(this_present_spousePerson && that_present_spousePerson))
        return false;
      if (!this.spousePerson.equals(that.spousePerson))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cusPerBase = true && (isSetCusPerBase());
    list.add(present_cusPerBase);
    if (present_cusPerBase)
      list.add(cusPerBase);

    boolean present_cusPerson = true && (isSetCusPerson());
    list.add(present_cusPerson);
    if (present_cusPerson)
      list.add(cusPerson);

    boolean present_cusPerSocSec = true && (isSetCusPerSocSec());
    list.add(present_cusPerSocSec);
    if (present_cusPerSocSec)
      list.add(cusPerSocSec);

    boolean present_cusAcct = true && (isSetCusAcct());
    list.add(present_cusAcct);
    if (present_cusAcct)
      list.add(cusAcct);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_sexId = true;
    list.add(present_sexId);
    if (present_sexId)
      list.add(sexId);

    boolean present_certTypeId = true;
    list.add(present_certTypeId);
    if (present_certTypeId)
      list.add(certTypeId);

    boolean present_certNumber = true && (isSetCertNumber());
    list.add(present_certNumber);
    if (present_certNumber)
      list.add(certNumber);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_cusStatus = true;
    list.add(present_cusStatus);
    if (present_cusStatus)
      list.add(cusStatus);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_cusRelation = true && (isSetCusRelation());
    list.add(present_cusRelation);
    if (present_cusRelation)
      list.add(cusRelation);

    boolean present_spousePerson = true && (isSetSpousePerson());
    list.add(present_spousePerson);
    if (present_spousePerson)
      list.add(spousePerson);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCusPerBase()).compareTo(other.isSetCusPerBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerBase, other.cusPerBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerson()).compareTo(other.isSetCusPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerson, other.cusPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerSocSec()).compareTo(other.isSetCusPerSocSec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerSocSec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerSocSec, other.cusPerSocSec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcct()).compareTo(other.isSetCusAcct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcct, other.cusAcct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexId()).compareTo(other.isSetSexId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexId, other.sexId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertTypeId()).compareTo(other.isSetCertTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certTypeId, other.certTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNumber()).compareTo(other.isSetCertNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNumber, other.certNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusStatus()).compareTo(other.isSetCusStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusStatus, other.cusStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusRelation()).compareTo(other.isSetCusRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusRelation, other.cusRelation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpousePerson()).compareTo(other.isSetSpousePerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpousePerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spousePerson, other.spousePerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerBaseDTO(");
    boolean first = true;

    sb.append("cusPerBase:");
    if (this.cusPerBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerson:");
    if (this.cusPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerSocSec:");
    if (this.cusPerSocSec == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerSocSec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcct:");
    if (this.cusAcct == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sexId:");
    sb.append(this.sexId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certTypeId:");
    sb.append(this.certTypeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNumber:");
    if (this.certNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusStatus:");
    sb.append(this.cusStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusRelation:");
    if (this.cusRelation == null) {
      sb.append("null");
    } else {
      sb.append(this.cusRelation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spousePerson:");
    if (this.spousePerson == null) {
      sb.append("null");
    } else {
      sb.append(this.spousePerson);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerBase != null) {
      cusPerBase.validate();
    }
    if (cusPerson != null) {
      cusPerson.validate();
    }
    if (cusPerSocSec != null) {
      cusPerSocSec.validate();
    }
    if (cusAcct != null) {
      cusAcct.validate();
    }
    if (spousePerson != null) {
      spousePerson.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerBaseDTOStandardSchemeFactory implements SchemeFactory {
    public CusPerBaseDTOStandardScheme getScheme() {
      return new CusPerBaseDTOStandardScheme();
    }
  }

  private static class CusPerBaseDTOStandardScheme extends StandardScheme<CusPerBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUS_PER_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerBase = new CusPerBase();
              struct.cusPerBase.read(iprot);
              struct.setCusPerBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerson = new CusPerson();
              struct.cusPerson.read(iprot);
              struct.setCusPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUS_PER_SOC_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerSocSec = new CusPerSocSec();
              struct.cusPerSocSec.read(iprot);
              struct.setCusPerSocSecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_ACCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusAcct = new CusAcct();
              struct.cusAcct.read(iprot);
              struct.setCusAcctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sexId = iprot.readI32();
              struct.setSexIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CERT_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.certTypeId = iprot.readI32();
              struct.setCertTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CERT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNumber = iprot.readString();
              struct.setCertNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CUS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusStatus = iprot.readI32();
              struct.setCusStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list128.size);
                int _elem129;
                for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                {
                  _elem129 = iprot.readI32();
                  struct.userIds.add(_elem129);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CUS_RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusRelation = new CusRelation();
              struct.cusRelation.read(iprot);
              struct.setCusRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SPOUSE_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spousePerson = new CusPerson();
              struct.spousePerson.read(iprot);
              struct.setSpousePersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cusPerBase != null) {
        oprot.writeFieldBegin(CUS_PER_BASE_FIELD_DESC);
        struct.cusPerBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusPerson != null) {
        oprot.writeFieldBegin(CUS_PERSON_FIELD_DESC);
        struct.cusPerson.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusPerSocSec != null) {
        oprot.writeFieldBegin(CUS_PER_SOC_SEC_FIELD_DESC);
        struct.cusPerSocSec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusAcct != null) {
        oprot.writeFieldBegin(CUS_ACCT_FIELD_DESC);
        struct.cusAcct.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_ID_FIELD_DESC);
      oprot.writeI32(struct.sexId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CERT_TYPE_ID_FIELD_DESC);
      oprot.writeI32(struct.certTypeId);
      oprot.writeFieldEnd();
      if (struct.certNumber != null) {
        oprot.writeFieldBegin(CERT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_STATUS_FIELD_DESC);
      oprot.writeI32(struct.cusStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter131 : struct.userIds)
          {
            oprot.writeI32(_iter131);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cusRelation != null) {
        oprot.writeFieldBegin(CUS_RELATION_FIELD_DESC);
        struct.cusRelation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.spousePerson != null) {
        oprot.writeFieldBegin(SPOUSE_PERSON_FIELD_DESC);
        struct.spousePerson.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerBaseDTOTupleSchemeFactory implements SchemeFactory {
    public CusPerBaseDTOTupleScheme getScheme() {
      return new CusPerBaseDTOTupleScheme();
    }
  }

  private static class CusPerBaseDTOTupleScheme extends TupleScheme<CusPerBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCusPerBase()) {
        optionals.set(0);
      }
      if (struct.isSetCusPerson()) {
        optionals.set(1);
      }
      if (struct.isSetCusPerSocSec()) {
        optionals.set(2);
      }
      if (struct.isSetCusAcct()) {
        optionals.set(3);
      }
      if (struct.isSetCusName()) {
        optionals.set(4);
      }
      if (struct.isSetSexId()) {
        optionals.set(5);
      }
      if (struct.isSetCertTypeId()) {
        optionals.set(6);
      }
      if (struct.isSetCertNumber()) {
        optionals.set(7);
      }
      if (struct.isSetCusType()) {
        optionals.set(8);
      }
      if (struct.isSetCusStatus()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetUserId()) {
        optionals.set(12);
      }
      if (struct.isSetUserIds()) {
        optionals.set(13);
      }
      if (struct.isSetCusRelation()) {
        optionals.set(14);
      }
      if (struct.isSetSpousePerson()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetCusPerBase()) {
        struct.cusPerBase.write(oprot);
      }
      if (struct.isSetCusPerson()) {
        struct.cusPerson.write(oprot);
      }
      if (struct.isSetCusPerSocSec()) {
        struct.cusPerSocSec.write(oprot);
      }
      if (struct.isSetCusAcct()) {
        struct.cusAcct.write(oprot);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetSexId()) {
        oprot.writeI32(struct.sexId);
      }
      if (struct.isSetCertTypeId()) {
        oprot.writeI32(struct.certTypeId);
      }
      if (struct.isSetCertNumber()) {
        oprot.writeString(struct.certNumber);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetCusStatus()) {
        oprot.writeI32(struct.cusStatus);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter132 : struct.userIds)
          {
            oprot.writeI32(_iter132);
          }
        }
      }
      if (struct.isSetCusRelation()) {
        struct.cusRelation.write(oprot);
      }
      if (struct.isSetSpousePerson()) {
        struct.spousePerson.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.cusPerBase = new CusPerBase();
        struct.cusPerBase.read(iprot);
        struct.setCusPerBaseIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusPerson = new CusPerson();
        struct.cusPerson.read(iprot);
        struct.setCusPersonIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cusPerSocSec = new CusPerSocSec();
        struct.cusPerSocSec.read(iprot);
        struct.setCusPerSocSecIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusAcct = new CusAcct();
        struct.cusAcct.read(iprot);
        struct.setCusAcctIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sexId = iprot.readI32();
        struct.setSexIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.certTypeId = iprot.readI32();
        struct.setCertTypeIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.certNumber = iprot.readString();
        struct.setCertNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cusStatus = iprot.readI32();
        struct.setCusStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list133.size);
          int _elem134;
          for (int _i135 = 0; _i135 < _list133.size; ++_i135)
          {
            _elem134 = iprot.readI32();
            struct.userIds.add(_elem134);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cusRelation = new CusRelation();
        struct.cusRelation.read(iprot);
        struct.setCusRelationIsSet(true);
      }
      if (incoming.get(15)) {
        struct.spousePerson = new CusPerson();
        struct.spousePerson.read(iprot);
        struct.setSpousePersonIsSet(true);
      }
    }
  }

}


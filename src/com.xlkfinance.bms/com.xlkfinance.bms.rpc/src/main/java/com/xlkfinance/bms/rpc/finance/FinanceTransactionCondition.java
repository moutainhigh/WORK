/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceTransactionCondition implements org.apache.thrift.TBase<FinanceTransactionCondition, FinanceTransactionCondition._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceTransactionCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceTransactionCondition");

  private static final org.apache.thrift.protocol.TField REG_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("regCategory", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("usedType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAcctId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FT_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftStartDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FT_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftEndDt", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REPAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayType", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceTransactionConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceTransactionConditionTupleSchemeFactory());
  }

  public int regCategory; // required
  public int usedType; // required
  public int bankAcctId; // required
  public String ftStartDt; // required
  public String ftEndDt; // required
  public int rows; // required
  public int page; // required
  public int pid; // required
  public int repayType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REG_CATEGORY((short)1, "regCategory"),
    USED_TYPE((short)2, "usedType"),
    BANK_ACCT_ID((short)3, "bankAcctId"),
    FT_START_DT((short)4, "ftStartDt"),
    FT_END_DT((short)5, "ftEndDt"),
    ROWS((short)6, "rows"),
    PAGE((short)7, "page"),
    PID((short)8, "pid"),
    REPAY_TYPE((short)9, "repayType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REG_CATEGORY
          return REG_CATEGORY;
        case 2: // USED_TYPE
          return USED_TYPE;
        case 3: // BANK_ACCT_ID
          return BANK_ACCT_ID;
        case 4: // FT_START_DT
          return FT_START_DT;
        case 5: // FT_END_DT
          return FT_END_DT;
        case 6: // ROWS
          return ROWS;
        case 7: // PAGE
          return PAGE;
        case 8: // PID
          return PID;
        case 9: // REPAY_TYPE
          return REPAY_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGCATEGORY_ISSET_ID = 0;
  private static final int __USEDTYPE_ISSET_ID = 1;
  private static final int __BANKACCTID_ISSET_ID = 2;
  private static final int __ROWS_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __PID_ISSET_ID = 5;
  private static final int __REPAYTYPE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REG_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("regCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("usedType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("bankAcctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_START_DT, new org.apache.thrift.meta_data.FieldMetaData("ftStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_END_DT, new org.apache.thrift.meta_data.FieldMetaData("ftEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repayType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceTransactionCondition.class, metaDataMap);
  }

  public FinanceTransactionCondition() {
  }

  public FinanceTransactionCondition(
    int regCategory,
    int usedType,
    int bankAcctId,
    String ftStartDt,
    String ftEndDt,
    int rows,
    int page,
    int pid,
    int repayType)
  {
    this();
    this.regCategory = regCategory;
    setRegCategoryIsSet(true);
    this.usedType = usedType;
    setUsedTypeIsSet(true);
    this.bankAcctId = bankAcctId;
    setBankAcctIdIsSet(true);
    this.ftStartDt = ftStartDt;
    this.ftEndDt = ftEndDt;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.repayType = repayType;
    setRepayTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceTransactionCondition(FinanceTransactionCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.regCategory = other.regCategory;
    this.usedType = other.usedType;
    this.bankAcctId = other.bankAcctId;
    if (other.isSetFtStartDt()) {
      this.ftStartDt = other.ftStartDt;
    }
    if (other.isSetFtEndDt()) {
      this.ftEndDt = other.ftEndDt;
    }
    this.rows = other.rows;
    this.page = other.page;
    this.pid = other.pid;
    this.repayType = other.repayType;
  }

  public FinanceTransactionCondition deepCopy() {
    return new FinanceTransactionCondition(this);
  }

  @Override
  public void clear() {
    setRegCategoryIsSet(false);
    this.regCategory = 0;
    setUsedTypeIsSet(false);
    this.usedType = 0;
    setBankAcctIdIsSet(false);
    this.bankAcctId = 0;
    this.ftStartDt = null;
    this.ftEndDt = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    setPidIsSet(false);
    this.pid = 0;
    setRepayTypeIsSet(false);
    this.repayType = 0;
  }

  public int getRegCategory() {
    return this.regCategory;
  }

  public FinanceTransactionCondition setRegCategory(int regCategory) {
    this.regCategory = regCategory;
    setRegCategoryIsSet(true);
    return this;
  }

  public void unsetRegCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGCATEGORY_ISSET_ID);
  }

  /** Returns true if field regCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetRegCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __REGCATEGORY_ISSET_ID);
  }

  public void setRegCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGCATEGORY_ISSET_ID, value);
  }

  public int getUsedType() {
    return this.usedType;
  }

  public FinanceTransactionCondition setUsedType(int usedType) {
    this.usedType = usedType;
    setUsedTypeIsSet(true);
    return this;
  }

  public void unsetUsedType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDTYPE_ISSET_ID);
  }

  /** Returns true if field usedType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedType() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDTYPE_ISSET_ID);
  }

  public void setUsedTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDTYPE_ISSET_ID, value);
  }

  public int getBankAcctId() {
    return this.bankAcctId;
  }

  public FinanceTransactionCondition setBankAcctId(int bankAcctId) {
    this.bankAcctId = bankAcctId;
    setBankAcctIdIsSet(true);
    return this;
  }

  public void unsetBankAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKACCTID_ISSET_ID);
  }

  /** Returns true if field bankAcctId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKACCTID_ISSET_ID);
  }

  public void setBankAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKACCTID_ISSET_ID, value);
  }

  public String getFtStartDt() {
    return this.ftStartDt;
  }

  public FinanceTransactionCondition setFtStartDt(String ftStartDt) {
    this.ftStartDt = ftStartDt;
    return this;
  }

  public void unsetFtStartDt() {
    this.ftStartDt = null;
  }

  /** Returns true if field ftStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtStartDt() {
    return this.ftStartDt != null;
  }

  public void setFtStartDtIsSet(boolean value) {
    if (!value) {
      this.ftStartDt = null;
    }
  }

  public String getFtEndDt() {
    return this.ftEndDt;
  }

  public FinanceTransactionCondition setFtEndDt(String ftEndDt) {
    this.ftEndDt = ftEndDt;
    return this;
  }

  public void unsetFtEndDt() {
    this.ftEndDt = null;
  }

  /** Returns true if field ftEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtEndDt() {
    return this.ftEndDt != null;
  }

  public void setFtEndDtIsSet(boolean value) {
    if (!value) {
      this.ftEndDt = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public FinanceTransactionCondition setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public FinanceTransactionCondition setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceTransactionCondition setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getRepayType() {
    return this.repayType;
  }

  public FinanceTransactionCondition setRepayType(int repayType) {
    this.repayType = repayType;
    setRepayTypeIsSet(true);
    return this;
  }

  public void unsetRepayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYTYPE_ISSET_ID);
  }

  /** Returns true if field repayType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYTYPE_ISSET_ID);
  }

  public void setRepayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REG_CATEGORY:
      if (value == null) {
        unsetRegCategory();
      } else {
        setRegCategory((Integer)value);
      }
      break;

    case USED_TYPE:
      if (value == null) {
        unsetUsedType();
      } else {
        setUsedType((Integer)value);
      }
      break;

    case BANK_ACCT_ID:
      if (value == null) {
        unsetBankAcctId();
      } else {
        setBankAcctId((Integer)value);
      }
      break;

    case FT_START_DT:
      if (value == null) {
        unsetFtStartDt();
      } else {
        setFtStartDt((String)value);
      }
      break;

    case FT_END_DT:
      if (value == null) {
        unsetFtEndDt();
      } else {
        setFtEndDt((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REPAY_TYPE:
      if (value == null) {
        unsetRepayType();
      } else {
        setRepayType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REG_CATEGORY:
      return Integer.valueOf(getRegCategory());

    case USED_TYPE:
      return Integer.valueOf(getUsedType());

    case BANK_ACCT_ID:
      return Integer.valueOf(getBankAcctId());

    case FT_START_DT:
      return getFtStartDt();

    case FT_END_DT:
      return getFtEndDt();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case PID:
      return Integer.valueOf(getPid());

    case REPAY_TYPE:
      return Integer.valueOf(getRepayType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REG_CATEGORY:
      return isSetRegCategory();
    case USED_TYPE:
      return isSetUsedType();
    case BANK_ACCT_ID:
      return isSetBankAcctId();
    case FT_START_DT:
      return isSetFtStartDt();
    case FT_END_DT:
      return isSetFtEndDt();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case PID:
      return isSetPid();
    case REPAY_TYPE:
      return isSetRepayType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceTransactionCondition)
      return this.equals((FinanceTransactionCondition)that);
    return false;
  }

  public boolean equals(FinanceTransactionCondition that) {
    if (that == null)
      return false;

    boolean this_present_regCategory = true;
    boolean that_present_regCategory = true;
    if (this_present_regCategory || that_present_regCategory) {
      if (!(this_present_regCategory && that_present_regCategory))
        return false;
      if (this.regCategory != that.regCategory)
        return false;
    }

    boolean this_present_usedType = true;
    boolean that_present_usedType = true;
    if (this_present_usedType || that_present_usedType) {
      if (!(this_present_usedType && that_present_usedType))
        return false;
      if (this.usedType != that.usedType)
        return false;
    }

    boolean this_present_bankAcctId = true;
    boolean that_present_bankAcctId = true;
    if (this_present_bankAcctId || that_present_bankAcctId) {
      if (!(this_present_bankAcctId && that_present_bankAcctId))
        return false;
      if (this.bankAcctId != that.bankAcctId)
        return false;
    }

    boolean this_present_ftStartDt = true && this.isSetFtStartDt();
    boolean that_present_ftStartDt = true && that.isSetFtStartDt();
    if (this_present_ftStartDt || that_present_ftStartDt) {
      if (!(this_present_ftStartDt && that_present_ftStartDt))
        return false;
      if (!this.ftStartDt.equals(that.ftStartDt))
        return false;
    }

    boolean this_present_ftEndDt = true && this.isSetFtEndDt();
    boolean that_present_ftEndDt = true && that.isSetFtEndDt();
    if (this_present_ftEndDt || that_present_ftEndDt) {
      if (!(this_present_ftEndDt && that_present_ftEndDt))
        return false;
      if (!this.ftEndDt.equals(that.ftEndDt))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_repayType = true;
    boolean that_present_repayType = true;
    if (this_present_repayType || that_present_repayType) {
      if (!(this_present_repayType && that_present_repayType))
        return false;
      if (this.repayType != that.repayType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_regCategory = true;
    list.add(present_regCategory);
    if (present_regCategory)
      list.add(regCategory);

    boolean present_usedType = true;
    list.add(present_usedType);
    if (present_usedType)
      list.add(usedType);

    boolean present_bankAcctId = true;
    list.add(present_bankAcctId);
    if (present_bankAcctId)
      list.add(bankAcctId);

    boolean present_ftStartDt = true && (isSetFtStartDt());
    list.add(present_ftStartDt);
    if (present_ftStartDt)
      list.add(ftStartDt);

    boolean present_ftEndDt = true && (isSetFtEndDt());
    list.add(present_ftEndDt);
    if (present_ftEndDt)
      list.add(ftEndDt);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_repayType = true;
    list.add(present_repayType);
    if (present_repayType)
      list.add(repayType);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceTransactionCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRegCategory()).compareTo(other.isSetRegCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regCategory, other.regCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedType()).compareTo(other.isSetUsedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedType, other.usedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAcctId()).compareTo(other.isSetBankAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAcctId, other.bankAcctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtStartDt()).compareTo(other.isSetFtStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftStartDt, other.ftStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtEndDt()).compareTo(other.isSetFtEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftEndDt, other.ftEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayType()).compareTo(other.isSetRepayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayType, other.repayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceTransactionCondition(");
    boolean first = true;

    sb.append("regCategory:");
    sb.append(this.regCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedType:");
    sb.append(this.usedType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAcctId:");
    sb.append(this.bankAcctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftStartDt:");
    if (this.ftStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.ftStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftEndDt:");
    if (this.ftEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.ftEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayType:");
    sb.append(this.repayType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceTransactionConditionStandardSchemeFactory implements SchemeFactory {
    public FinanceTransactionConditionStandardScheme getScheme() {
      return new FinanceTransactionConditionStandardScheme();
    }
  }

  private static class FinanceTransactionConditionStandardScheme extends StandardScheme<FinanceTransactionCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceTransactionCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REG_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regCategory = iprot.readI32();
              struct.setRegCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usedType = iprot.readI32();
              struct.setUsedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankAcctId = iprot.readI32();
              struct.setBankAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FT_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftStartDt = iprot.readString();
              struct.setFtStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FT_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftEndDt = iprot.readString();
              struct.setFtEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REPAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayType = iprot.readI32();
              struct.setRepayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceTransactionCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REG_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.regCategory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USED_TYPE_FIELD_DESC);
      oprot.writeI32(struct.usedType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.bankAcctId);
      oprot.writeFieldEnd();
      if (struct.ftStartDt != null) {
        oprot.writeFieldBegin(FT_START_DT_FIELD_DESC);
        oprot.writeString(struct.ftStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.ftEndDt != null) {
        oprot.writeFieldBegin(FT_END_DT_FIELD_DESC);
        oprot.writeString(struct.ftEndDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repayType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceTransactionConditionTupleSchemeFactory implements SchemeFactory {
    public FinanceTransactionConditionTupleScheme getScheme() {
      return new FinanceTransactionConditionTupleScheme();
    }
  }

  private static class FinanceTransactionConditionTupleScheme extends TupleScheme<FinanceTransactionCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceTransactionCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRegCategory()) {
        optionals.set(0);
      }
      if (struct.isSetUsedType()) {
        optionals.set(1);
      }
      if (struct.isSetBankAcctId()) {
        optionals.set(2);
      }
      if (struct.isSetFtStartDt()) {
        optionals.set(3);
      }
      if (struct.isSetFtEndDt()) {
        optionals.set(4);
      }
      if (struct.isSetRows()) {
        optionals.set(5);
      }
      if (struct.isSetPage()) {
        optionals.set(6);
      }
      if (struct.isSetPid()) {
        optionals.set(7);
      }
      if (struct.isSetRepayType()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetRegCategory()) {
        oprot.writeI32(struct.regCategory);
      }
      if (struct.isSetUsedType()) {
        oprot.writeI32(struct.usedType);
      }
      if (struct.isSetBankAcctId()) {
        oprot.writeI32(struct.bankAcctId);
      }
      if (struct.isSetFtStartDt()) {
        oprot.writeString(struct.ftStartDt);
      }
      if (struct.isSetFtEndDt()) {
        oprot.writeString(struct.ftEndDt);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetRepayType()) {
        oprot.writeI32(struct.repayType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceTransactionCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.regCategory = iprot.readI32();
        struct.setRegCategoryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.usedType = iprot.readI32();
        struct.setUsedTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankAcctId = iprot.readI32();
        struct.setBankAcctIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ftStartDt = iprot.readString();
        struct.setFtStartDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ftEndDt = iprot.readString();
        struct.setFtEndDtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.repayType = iprot.readI32();
        struct.setRepayTypeIsSet(true);
      }
    }
  }

}


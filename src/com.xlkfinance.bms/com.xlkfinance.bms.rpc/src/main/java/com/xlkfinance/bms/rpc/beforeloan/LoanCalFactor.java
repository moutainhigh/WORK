/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class LoanCalFactor implements org.apache.thrift.TBase<LoanCalFactor, LoanCalFactor._Fields>, java.io.Serializable, Cloneable, Comparable<LoanCalFactor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanCalFactor");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INPUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inputId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SURPLUS_FIELD_DESC = new org.apache.thrift.protocol.TField("surplus", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FINE_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("fineRates", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("fine", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ARREARS_FIELD_DESC = new org.apache.thrift.protocol.TField("isArrears", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IS_REBACK_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("isRebackInterest", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HAS_OTHER_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("hasOtherLoan", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField COMPELTE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("compelteDttm", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanCalFactorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanCalFactorTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public int inputId; // required
  public double preRepayAmt; // required
  public double surplus; // required
  public double fineRates; // required
  public double fine; // required
  public String repayDate; // required
  public int isArrears; // required
  public int isRebackInterest; // required
  public int hasOtherLoan; // required
  public String reason; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String compelteDttm; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    INPUT_ID((short)3, "inputId"),
    PRE_REPAY_AMT((short)4, "preRepayAmt"),
    SURPLUS((short)5, "surplus"),
    FINE_RATES((short)6, "fineRates"),
    FINE((short)7, "fine"),
    REPAY_DATE((short)8, "repayDate"),
    IS_ARREARS((short)9, "isArrears"),
    IS_REBACK_INTEREST((short)10, "isRebackInterest"),
    HAS_OTHER_LOAN((short)11, "hasOtherLoan"),
    REASON((short)12, "reason"),
    REQUEST_STATUS((short)13, "requestStatus"),
    REQUEST_DTTM((short)14, "requestDttm"),
    COMPELTE_DTTM((short)15, "compelteDttm"),
    STATUS((short)16, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // INPUT_ID
          return INPUT_ID;
        case 4: // PRE_REPAY_AMT
          return PRE_REPAY_AMT;
        case 5: // SURPLUS
          return SURPLUS;
        case 6: // FINE_RATES
          return FINE_RATES;
        case 7: // FINE
          return FINE;
        case 8: // REPAY_DATE
          return REPAY_DATE;
        case 9: // IS_ARREARS
          return IS_ARREARS;
        case 10: // IS_REBACK_INTEREST
          return IS_REBACK_INTEREST;
        case 11: // HAS_OTHER_LOAN
          return HAS_OTHER_LOAN;
        case 12: // REASON
          return REASON;
        case 13: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 14: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 15: // COMPELTE_DTTM
          return COMPELTE_DTTM;
        case 16: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __INPUTID_ISSET_ID = 2;
  private static final int __PREREPAYAMT_ISSET_ID = 3;
  private static final int __SURPLUS_ISSET_ID = 4;
  private static final int __FINERATES_ISSET_ID = 5;
  private static final int __FINE_ISSET_ID = 6;
  private static final int __ISARREARS_ISSET_ID = 7;
  private static final int __ISREBACKINTEREST_ISSET_ID = 8;
  private static final int __HASOTHERLOAN_ISSET_ID = 9;
  private static final int __REQUESTSTATUS_ISSET_ID = 10;
  private static final int __STATUS_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_ID, new org.apache.thrift.meta_data.FieldMetaData("inputId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRE_REPAY_AMT, new org.apache.thrift.meta_data.FieldMetaData("preRepayAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SURPLUS, new org.apache.thrift.meta_data.FieldMetaData("surplus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINE_RATES, new org.apache.thrift.meta_data.FieldMetaData("fineRates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINE, new org.apache.thrift.meta_data.FieldMetaData("fine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ARREARS, new org.apache.thrift.meta_data.FieldMetaData("isArrears", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REBACK_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("isRebackInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_OTHER_LOAN, new org.apache.thrift.meta_data.FieldMetaData("hasOtherLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPELTE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("compelteDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanCalFactor.class, metaDataMap);
  }

  public LoanCalFactor() {
  }

  public LoanCalFactor(
    int pid,
    int loanId,
    int inputId,
    double preRepayAmt,
    double surplus,
    double fineRates,
    double fine,
    String repayDate,
    int isArrears,
    int isRebackInterest,
    int hasOtherLoan,
    String reason,
    int requestStatus,
    String requestDttm,
    String compelteDttm,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.inputId = inputId;
    setInputIdIsSet(true);
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    this.surplus = surplus;
    setSurplusIsSet(true);
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    this.fine = fine;
    setFineIsSet(true);
    this.repayDate = repayDate;
    this.isArrears = isArrears;
    setIsArrearsIsSet(true);
    this.isRebackInterest = isRebackInterest;
    setIsRebackInterestIsSet(true);
    this.hasOtherLoan = hasOtherLoan;
    setHasOtherLoanIsSet(true);
    this.reason = reason;
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.compelteDttm = compelteDttm;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanCalFactor(LoanCalFactor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    this.inputId = other.inputId;
    this.preRepayAmt = other.preRepayAmt;
    this.surplus = other.surplus;
    this.fineRates = other.fineRates;
    this.fine = other.fine;
    if (other.isSetRepayDate()) {
      this.repayDate = other.repayDate;
    }
    this.isArrears = other.isArrears;
    this.isRebackInterest = other.isRebackInterest;
    this.hasOtherLoan = other.hasOtherLoan;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompelteDttm()) {
      this.compelteDttm = other.compelteDttm;
    }
    this.status = other.status;
  }

  public LoanCalFactor deepCopy() {
    return new LoanCalFactor(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setInputIdIsSet(false);
    this.inputId = 0;
    setPreRepayAmtIsSet(false);
    this.preRepayAmt = 0.0;
    setSurplusIsSet(false);
    this.surplus = 0.0;
    setFineRatesIsSet(false);
    this.fineRates = 0.0;
    setFineIsSet(false);
    this.fine = 0.0;
    this.repayDate = null;
    setIsArrearsIsSet(false);
    this.isArrears = 0;
    setIsRebackInterestIsSet(false);
    this.isRebackInterest = 0;
    setHasOtherLoanIsSet(false);
    this.hasOtherLoan = 0;
    this.reason = null;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.compelteDttm = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public LoanCalFactor setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public LoanCalFactor setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getInputId() {
    return this.inputId;
  }

  public LoanCalFactor setInputId(int inputId) {
    this.inputId = inputId;
    setInputIdIsSet(true);
    return this;
  }

  public void unsetInputId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  /** Returns true if field inputId is set (has been assigned a value) and false otherwise */
  public boolean isSetInputId() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  public void setInputIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTID_ISSET_ID, value);
  }

  public double getPreRepayAmt() {
    return this.preRepayAmt;
  }

  public LoanCalFactor setPreRepayAmt(double preRepayAmt) {
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    return this;
  }

  public void unsetPreRepayAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  /** Returns true if field preRepayAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  public void setPreRepayAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID, value);
  }

  public double getSurplus() {
    return this.surplus;
  }

  public LoanCalFactor setSurplus(double surplus) {
    this.surplus = surplus;
    setSurplusIsSet(true);
    return this;
  }

  public void unsetSurplus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURPLUS_ISSET_ID);
  }

  /** Returns true if field surplus is set (has been assigned a value) and false otherwise */
  public boolean isSetSurplus() {
    return EncodingUtils.testBit(__isset_bitfield, __SURPLUS_ISSET_ID);
  }

  public void setSurplusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURPLUS_ISSET_ID, value);
  }

  public double getFineRates() {
    return this.fineRates;
  }

  public LoanCalFactor setFineRates(double fineRates) {
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    return this;
  }

  public void unsetFineRates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  /** Returns true if field fineRates is set (has been assigned a value) and false otherwise */
  public boolean isSetFineRates() {
    return EncodingUtils.testBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  public void setFineRatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINERATES_ISSET_ID, value);
  }

  public double getFine() {
    return this.fine;
  }

  public LoanCalFactor setFine(double fine) {
    this.fine = fine;
    setFineIsSet(true);
    return this;
  }

  public void unsetFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  /** Returns true if field fine is set (has been assigned a value) and false otherwise */
  public boolean isSetFine() {
    return EncodingUtils.testBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  public void setFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINE_ISSET_ID, value);
  }

  public String getRepayDate() {
    return this.repayDate;
  }

  public LoanCalFactor setRepayDate(String repayDate) {
    this.repayDate = repayDate;
    return this;
  }

  public void unsetRepayDate() {
    this.repayDate = null;
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return this.repayDate != null;
  }

  public void setRepayDateIsSet(boolean value) {
    if (!value) {
      this.repayDate = null;
    }
  }

  public int getIsArrears() {
    return this.isArrears;
  }

  public LoanCalFactor setIsArrears(int isArrears) {
    this.isArrears = isArrears;
    setIsArrearsIsSet(true);
    return this;
  }

  public void unsetIsArrears() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARREARS_ISSET_ID);
  }

  /** Returns true if field isArrears is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArrears() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARREARS_ISSET_ID);
  }

  public void setIsArrearsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARREARS_ISSET_ID, value);
  }

  public int getIsRebackInterest() {
    return this.isRebackInterest;
  }

  public LoanCalFactor setIsRebackInterest(int isRebackInterest) {
    this.isRebackInterest = isRebackInterest;
    setIsRebackInterestIsSet(true);
    return this;
  }

  public void unsetIsRebackInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID);
  }

  /** Returns true if field isRebackInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRebackInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID);
  }

  public void setIsRebackInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID, value);
  }

  public int getHasOtherLoan() {
    return this.hasOtherLoan;
  }

  public LoanCalFactor setHasOtherLoan(int hasOtherLoan) {
    this.hasOtherLoan = hasOtherLoan;
    setHasOtherLoanIsSet(true);
    return this;
  }

  public void unsetHasOtherLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID);
  }

  /** Returns true if field hasOtherLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetHasOtherLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID);
  }

  public void setHasOtherLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public LoanCalFactor setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public LoanCalFactor setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public LoanCalFactor setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompelteDttm() {
    return this.compelteDttm;
  }

  public LoanCalFactor setCompelteDttm(String compelteDttm) {
    this.compelteDttm = compelteDttm;
    return this;
  }

  public void unsetCompelteDttm() {
    this.compelteDttm = null;
  }

  /** Returns true if field compelteDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompelteDttm() {
    return this.compelteDttm != null;
  }

  public void setCompelteDttmIsSet(boolean value) {
    if (!value) {
      this.compelteDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public LoanCalFactor setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case INPUT_ID:
      if (value == null) {
        unsetInputId();
      } else {
        setInputId((Integer)value);
      }
      break;

    case PRE_REPAY_AMT:
      if (value == null) {
        unsetPreRepayAmt();
      } else {
        setPreRepayAmt((Double)value);
      }
      break;

    case SURPLUS:
      if (value == null) {
        unsetSurplus();
      } else {
        setSurplus((Double)value);
      }
      break;

    case FINE_RATES:
      if (value == null) {
        unsetFineRates();
      } else {
        setFineRates((Double)value);
      }
      break;

    case FINE:
      if (value == null) {
        unsetFine();
      } else {
        setFine((Double)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((String)value);
      }
      break;

    case IS_ARREARS:
      if (value == null) {
        unsetIsArrears();
      } else {
        setIsArrears((Integer)value);
      }
      break;

    case IS_REBACK_INTEREST:
      if (value == null) {
        unsetIsRebackInterest();
      } else {
        setIsRebackInterest((Integer)value);
      }
      break;

    case HAS_OTHER_LOAN:
      if (value == null) {
        unsetHasOtherLoan();
      } else {
        setHasOtherLoan((Integer)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPELTE_DTTM:
      if (value == null) {
        unsetCompelteDttm();
      } else {
        setCompelteDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case INPUT_ID:
      return Integer.valueOf(getInputId());

    case PRE_REPAY_AMT:
      return Double.valueOf(getPreRepayAmt());

    case SURPLUS:
      return Double.valueOf(getSurplus());

    case FINE_RATES:
      return Double.valueOf(getFineRates());

    case FINE:
      return Double.valueOf(getFine());

    case REPAY_DATE:
      return getRepayDate();

    case IS_ARREARS:
      return Integer.valueOf(getIsArrears());

    case IS_REBACK_INTEREST:
      return Integer.valueOf(getIsRebackInterest());

    case HAS_OTHER_LOAN:
      return Integer.valueOf(getHasOtherLoan());

    case REASON:
      return getReason();

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPELTE_DTTM:
      return getCompelteDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case INPUT_ID:
      return isSetInputId();
    case PRE_REPAY_AMT:
      return isSetPreRepayAmt();
    case SURPLUS:
      return isSetSurplus();
    case FINE_RATES:
      return isSetFineRates();
    case FINE:
      return isSetFine();
    case REPAY_DATE:
      return isSetRepayDate();
    case IS_ARREARS:
      return isSetIsArrears();
    case IS_REBACK_INTEREST:
      return isSetIsRebackInterest();
    case HAS_OTHER_LOAN:
      return isSetHasOtherLoan();
    case REASON:
      return isSetReason();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPELTE_DTTM:
      return isSetCompelteDttm();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanCalFactor)
      return this.equals((LoanCalFactor)that);
    return false;
  }

  public boolean equals(LoanCalFactor that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_inputId = true;
    boolean that_present_inputId = true;
    if (this_present_inputId || that_present_inputId) {
      if (!(this_present_inputId && that_present_inputId))
        return false;
      if (this.inputId != that.inputId)
        return false;
    }

    boolean this_present_preRepayAmt = true;
    boolean that_present_preRepayAmt = true;
    if (this_present_preRepayAmt || that_present_preRepayAmt) {
      if (!(this_present_preRepayAmt && that_present_preRepayAmt))
        return false;
      if (this.preRepayAmt != that.preRepayAmt)
        return false;
    }

    boolean this_present_surplus = true;
    boolean that_present_surplus = true;
    if (this_present_surplus || that_present_surplus) {
      if (!(this_present_surplus && that_present_surplus))
        return false;
      if (this.surplus != that.surplus)
        return false;
    }

    boolean this_present_fineRates = true;
    boolean that_present_fineRates = true;
    if (this_present_fineRates || that_present_fineRates) {
      if (!(this_present_fineRates && that_present_fineRates))
        return false;
      if (this.fineRates != that.fineRates)
        return false;
    }

    boolean this_present_fine = true;
    boolean that_present_fine = true;
    if (this_present_fine || that_present_fine) {
      if (!(this_present_fine && that_present_fine))
        return false;
      if (this.fine != that.fine)
        return false;
    }

    boolean this_present_repayDate = true && this.isSetRepayDate();
    boolean that_present_repayDate = true && that.isSetRepayDate();
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (!this.repayDate.equals(that.repayDate))
        return false;
    }

    boolean this_present_isArrears = true;
    boolean that_present_isArrears = true;
    if (this_present_isArrears || that_present_isArrears) {
      if (!(this_present_isArrears && that_present_isArrears))
        return false;
      if (this.isArrears != that.isArrears)
        return false;
    }

    boolean this_present_isRebackInterest = true;
    boolean that_present_isRebackInterest = true;
    if (this_present_isRebackInterest || that_present_isRebackInterest) {
      if (!(this_present_isRebackInterest && that_present_isRebackInterest))
        return false;
      if (this.isRebackInterest != that.isRebackInterest)
        return false;
    }

    boolean this_present_hasOtherLoan = true;
    boolean that_present_hasOtherLoan = true;
    if (this_present_hasOtherLoan || that_present_hasOtherLoan) {
      if (!(this_present_hasOtherLoan && that_present_hasOtherLoan))
        return false;
      if (this.hasOtherLoan != that.hasOtherLoan)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_compelteDttm = true && this.isSetCompelteDttm();
    boolean that_present_compelteDttm = true && that.isSetCompelteDttm();
    if (this_present_compelteDttm || that_present_compelteDttm) {
      if (!(this_present_compelteDttm && that_present_compelteDttm))
        return false;
      if (!this.compelteDttm.equals(that.compelteDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_inputId = true;
    list.add(present_inputId);
    if (present_inputId)
      list.add(inputId);

    boolean present_preRepayAmt = true;
    list.add(present_preRepayAmt);
    if (present_preRepayAmt)
      list.add(preRepayAmt);

    boolean present_surplus = true;
    list.add(present_surplus);
    if (present_surplus)
      list.add(surplus);

    boolean present_fineRates = true;
    list.add(present_fineRates);
    if (present_fineRates)
      list.add(fineRates);

    boolean present_fine = true;
    list.add(present_fine);
    if (present_fine)
      list.add(fine);

    boolean present_repayDate = true && (isSetRepayDate());
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_isArrears = true;
    list.add(present_isArrears);
    if (present_isArrears)
      list.add(isArrears);

    boolean present_isRebackInterest = true;
    list.add(present_isRebackInterest);
    if (present_isRebackInterest)
      list.add(isRebackInterest);

    boolean present_hasOtherLoan = true;
    list.add(present_hasOtherLoan);
    if (present_hasOtherLoan)
      list.add(hasOtherLoan);

    boolean present_reason = true && (isSetReason());
    list.add(present_reason);
    if (present_reason)
      list.add(reason);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_compelteDttm = true && (isSetCompelteDttm());
    list.add(present_compelteDttm);
    if (present_compelteDttm)
      list.add(compelteDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanCalFactor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputId()).compareTo(other.isSetInputId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputId, other.inputId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayAmt()).compareTo(other.isSetPreRepayAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayAmt, other.preRepayAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurplus()).compareTo(other.isSetSurplus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurplus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surplus, other.surplus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFineRates()).compareTo(other.isSetFineRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFineRates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fineRates, other.fineRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFine()).compareTo(other.isSetFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fine, other.fine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArrears()).compareTo(other.isSetIsArrears());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArrears()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArrears, other.isArrears);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRebackInterest()).compareTo(other.isSetIsRebackInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRebackInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRebackInterest, other.isRebackInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasOtherLoan()).compareTo(other.isSetHasOtherLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasOtherLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasOtherLoan, other.hasOtherLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompelteDttm()).compareTo(other.isSetCompelteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompelteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compelteDttm, other.compelteDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanCalFactor(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputId:");
    sb.append(this.inputId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayAmt:");
    sb.append(this.preRepayAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surplus:");
    sb.append(this.surplus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fineRates:");
    sb.append(this.fineRates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fine:");
    sb.append(this.fine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    if (this.repayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArrears:");
    sb.append(this.isArrears);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRebackInterest:");
    sb.append(this.isRebackInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasOtherLoan:");
    sb.append(this.hasOtherLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compelteDttm:");
    if (this.compelteDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.compelteDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanCalFactorStandardSchemeFactory implements SchemeFactory {
    public LoanCalFactorStandardScheme getScheme() {
      return new LoanCalFactorStandardScheme();
    }
  }

  private static class LoanCalFactorStandardScheme extends StandardScheme<LoanCalFactor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanCalFactor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INPUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inputId = iprot.readI32();
              struct.setInputIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRE_REPAY_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preRepayAmt = iprot.readDouble();
              struct.setPreRepayAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SURPLUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.surplus = iprot.readDouble();
              struct.setSurplusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINE_RATES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fineRates = iprot.readDouble();
              struct.setFineRatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fine = iprot.readDouble();
              struct.setFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDate = iprot.readString();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ARREARS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isArrears = iprot.readI32();
              struct.setIsArrearsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_REBACK_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRebackInterest = iprot.readI32();
              struct.setIsRebackInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HAS_OTHER_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasOtherLoan = iprot.readI32();
              struct.setHasOtherLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMPELTE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compelteDttm = iprot.readString();
              struct.setCompelteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanCalFactor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_ID_FIELD_DESC);
      oprot.writeI32(struct.inputId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_AMT_FIELD_DESC);
      oprot.writeDouble(struct.preRepayAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SURPLUS_FIELD_DESC);
      oprot.writeDouble(struct.surplus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINE_RATES_FIELD_DESC);
      oprot.writeDouble(struct.fineRates);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINE_FIELD_DESC);
      oprot.writeDouble(struct.fine);
      oprot.writeFieldEnd();
      if (struct.repayDate != null) {
        oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
        oprot.writeString(struct.repayDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ARREARS_FIELD_DESC);
      oprot.writeI32(struct.isArrears);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REBACK_INTEREST_FIELD_DESC);
      oprot.writeI32(struct.isRebackInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_OTHER_LOAN_FIELD_DESC);
      oprot.writeI32(struct.hasOtherLoan);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.compelteDttm != null) {
        oprot.writeFieldBegin(COMPELTE_DTTM_FIELD_DESC);
        oprot.writeString(struct.compelteDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanCalFactorTupleSchemeFactory implements SchemeFactory {
    public LoanCalFactorTupleScheme getScheme() {
      return new LoanCalFactorTupleScheme();
    }
  }

  private static class LoanCalFactorTupleScheme extends TupleScheme<LoanCalFactor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanCalFactor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetInputId()) {
        optionals.set(2);
      }
      if (struct.isSetPreRepayAmt()) {
        optionals.set(3);
      }
      if (struct.isSetSurplus()) {
        optionals.set(4);
      }
      if (struct.isSetFineRates()) {
        optionals.set(5);
      }
      if (struct.isSetFine()) {
        optionals.set(6);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(7);
      }
      if (struct.isSetIsArrears()) {
        optionals.set(8);
      }
      if (struct.isSetIsRebackInterest()) {
        optionals.set(9);
      }
      if (struct.isSetHasOtherLoan()) {
        optionals.set(10);
      }
      if (struct.isSetReason()) {
        optionals.set(11);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(12);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(13);
      }
      if (struct.isSetCompelteDttm()) {
        optionals.set(14);
      }
      if (struct.isSetStatus()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetInputId()) {
        oprot.writeI32(struct.inputId);
      }
      if (struct.isSetPreRepayAmt()) {
        oprot.writeDouble(struct.preRepayAmt);
      }
      if (struct.isSetSurplus()) {
        oprot.writeDouble(struct.surplus);
      }
      if (struct.isSetFineRates()) {
        oprot.writeDouble(struct.fineRates);
      }
      if (struct.isSetFine()) {
        oprot.writeDouble(struct.fine);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeString(struct.repayDate);
      }
      if (struct.isSetIsArrears()) {
        oprot.writeI32(struct.isArrears);
      }
      if (struct.isSetIsRebackInterest()) {
        oprot.writeI32(struct.isRebackInterest);
      }
      if (struct.isSetHasOtherLoan()) {
        oprot.writeI32(struct.hasOtherLoan);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompelteDttm()) {
        oprot.writeString(struct.compelteDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanCalFactor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inputId = iprot.readI32();
        struct.setInputIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.preRepayAmt = iprot.readDouble();
        struct.setPreRepayAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.surplus = iprot.readDouble();
        struct.setSurplusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fineRates = iprot.readDouble();
        struct.setFineRatesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fine = iprot.readDouble();
        struct.setFineIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repayDate = iprot.readString();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isArrears = iprot.readI32();
        struct.setIsArrearsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isRebackInterest = iprot.readI32();
        struct.setIsRebackInterestIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hasOtherLoan = iprot.readI32();
        struct.setHasOtherLoanIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(14)) {
        struct.compelteDttm = iprot.readString();
        struct.setCompelteDttmIsSet(true);
      }
      if (incoming.get(15)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


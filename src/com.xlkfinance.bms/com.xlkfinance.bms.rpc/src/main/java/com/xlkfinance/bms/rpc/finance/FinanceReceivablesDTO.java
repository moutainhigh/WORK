/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * end by yql
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceReceivablesDTO implements org.apache.thrift.TBase<FinanceReceivablesDTO, FinanceReceivablesDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceReceivablesDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceReceivablesDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PAYMENT_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDttm", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("useBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliation", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField AVAILABLE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("availableBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceReceivablesDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceReceivablesDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public double paymentAmount; // required
  public String paymentDttm; // required
  public double useBalance; // required
  public int reconciliation; // required
  public int status; // required
  public int version; // required
  public double availableBalance; // required
  public double reconciliationAmt; // required
  public String createUser; // required
  public String createDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    PAYMENT_AMOUNT((short)3, "paymentAmount"),
    PAYMENT_DTTM((short)4, "paymentDttm"),
    USE_BALANCE((short)5, "useBalance"),
    RECONCILIATION((short)6, "reconciliation"),
    STATUS((short)7, "status"),
    VERSION((short)8, "version"),
    AVAILABLE_BALANCE((short)9, "availableBalance"),
    RECONCILIATION_AMT((short)10, "reconciliationAmt"),
    CREATE_USER((short)11, "createUser"),
    CREATE_DATE((short)12, "createDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // PAYMENT_AMOUNT
          return PAYMENT_AMOUNT;
        case 4: // PAYMENT_DTTM
          return PAYMENT_DTTM;
        case 5: // USE_BALANCE
          return USE_BALANCE;
        case 6: // RECONCILIATION
          return RECONCILIATION;
        case 7: // STATUS
          return STATUS;
        case 8: // VERSION
          return VERSION;
        case 9: // AVAILABLE_BALANCE
          return AVAILABLE_BALANCE;
        case 10: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 11: // CREATE_USER
          return CREATE_USER;
        case 12: // CREATE_DATE
          return CREATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __PAYMENTAMOUNT_ISSET_ID = 2;
  private static final int __USEBALANCE_ISSET_ID = 3;
  private static final int __RECONCILIATION_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __VERSION_ISSET_ID = 6;
  private static final int __AVAILABLEBALANCE_ISSET_ID = 7;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("paymentAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_DTTM, new org.apache.thrift.meta_data.FieldMetaData("paymentDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("useBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("reconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVAILABLE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("availableBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceReceivablesDTO.class, metaDataMap);
  }

  public FinanceReceivablesDTO() {
  }

  public FinanceReceivablesDTO(
    int pid,
    int loanId,
    double paymentAmount,
    String paymentDttm,
    double useBalance,
    int reconciliation,
    int status,
    int version,
    double availableBalance,
    double reconciliationAmt,
    String createUser,
    String createDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.paymentAmount = paymentAmount;
    setPaymentAmountIsSet(true);
    this.paymentDttm = paymentDttm;
    this.useBalance = useBalance;
    setUseBalanceIsSet(true);
    this.reconciliation = reconciliation;
    setReconciliationIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.availableBalance = availableBalance;
    setAvailableBalanceIsSet(true);
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.createUser = createUser;
    this.createDate = createDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceReceivablesDTO(FinanceReceivablesDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    this.paymentAmount = other.paymentAmount;
    if (other.isSetPaymentDttm()) {
      this.paymentDttm = other.paymentDttm;
    }
    this.useBalance = other.useBalance;
    this.reconciliation = other.reconciliation;
    this.status = other.status;
    this.version = other.version;
    this.availableBalance = other.availableBalance;
    this.reconciliationAmt = other.reconciliationAmt;
    if (other.isSetCreateUser()) {
      this.createUser = other.createUser;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
  }

  public FinanceReceivablesDTO deepCopy() {
    return new FinanceReceivablesDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setPaymentAmountIsSet(false);
    this.paymentAmount = 0.0;
    this.paymentDttm = null;
    setUseBalanceIsSet(false);
    this.useBalance = 0.0;
    setReconciliationIsSet(false);
    this.reconciliation = 0;
    setStatusIsSet(false);
    this.status = 0;
    setVersionIsSet(false);
    this.version = 0;
    setAvailableBalanceIsSet(false);
    this.availableBalance = 0.0;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    this.createUser = null;
    this.createDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceReceivablesDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public FinanceReceivablesDTO setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public double getPaymentAmount() {
    return this.paymentAmount;
  }

  public FinanceReceivablesDTO setPaymentAmount(double paymentAmount) {
    this.paymentAmount = paymentAmount;
    setPaymentAmountIsSet(true);
    return this;
  }

  public void unsetPaymentAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTAMOUNT_ISSET_ID);
  }

  /** Returns true if field paymentAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTAMOUNT_ISSET_ID);
  }

  public void setPaymentAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTAMOUNT_ISSET_ID, value);
  }

  public String getPaymentDttm() {
    return this.paymentDttm;
  }

  public FinanceReceivablesDTO setPaymentDttm(String paymentDttm) {
    this.paymentDttm = paymentDttm;
    return this;
  }

  public void unsetPaymentDttm() {
    this.paymentDttm = null;
  }

  /** Returns true if field paymentDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentDttm() {
    return this.paymentDttm != null;
  }

  public void setPaymentDttmIsSet(boolean value) {
    if (!value) {
      this.paymentDttm = null;
    }
  }

  public double getUseBalance() {
    return this.useBalance;
  }

  public FinanceReceivablesDTO setUseBalance(double useBalance) {
    this.useBalance = useBalance;
    setUseBalanceIsSet(true);
    return this;
  }

  public void unsetUseBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEBALANCE_ISSET_ID);
  }

  /** Returns true if field useBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetUseBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __USEBALANCE_ISSET_ID);
  }

  public void setUseBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEBALANCE_ISSET_ID, value);
  }

  public int getReconciliation() {
    return this.reconciliation;
  }

  public FinanceReceivablesDTO setReconciliation(int reconciliation) {
    this.reconciliation = reconciliation;
    setReconciliationIsSet(true);
    return this;
  }

  public void unsetReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATION_ISSET_ID);
  }

  /** Returns true if field reconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATION_ISSET_ID);
  }

  public void setReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATION_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public FinanceReceivablesDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public FinanceReceivablesDTO setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public double getAvailableBalance() {
    return this.availableBalance;
  }

  public FinanceReceivablesDTO setAvailableBalance(double availableBalance) {
    this.availableBalance = availableBalance;
    setAvailableBalanceIsSet(true);
    return this;
  }

  public void unsetAvailableBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEBALANCE_ISSET_ID);
  }

  /** Returns true if field availableBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEBALANCE_ISSET_ID);
  }

  public void setAvailableBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEBALANCE_ISSET_ID, value);
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public FinanceReceivablesDTO setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public String getCreateUser() {
    return this.createUser;
  }

  public FinanceReceivablesDTO setCreateUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

  public void unsetCreateUser() {
    this.createUser = null;
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return this.createUser != null;
  }

  public void setCreateUserIsSet(boolean value) {
    if (!value) {
      this.createUser = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public FinanceReceivablesDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PAYMENT_AMOUNT:
      if (value == null) {
        unsetPaymentAmount();
      } else {
        setPaymentAmount((Double)value);
      }
      break;

    case PAYMENT_DTTM:
      if (value == null) {
        unsetPaymentDttm();
      } else {
        setPaymentDttm((String)value);
      }
      break;

    case USE_BALANCE:
      if (value == null) {
        unsetUseBalance();
      } else {
        setUseBalance((Double)value);
      }
      break;

    case RECONCILIATION:
      if (value == null) {
        unsetReconciliation();
      } else {
        setReconciliation((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case AVAILABLE_BALANCE:
      if (value == null) {
        unsetAvailableBalance();
      } else {
        setAvailableBalance((Double)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PAYMENT_AMOUNT:
      return Double.valueOf(getPaymentAmount());

    case PAYMENT_DTTM:
      return getPaymentDttm();

    case USE_BALANCE:
      return Double.valueOf(getUseBalance());

    case RECONCILIATION:
      return Integer.valueOf(getReconciliation());

    case STATUS:
      return Integer.valueOf(getStatus());

    case VERSION:
      return Integer.valueOf(getVersion());

    case AVAILABLE_BALANCE:
      return Double.valueOf(getAvailableBalance());

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case CREATE_USER:
      return getCreateUser();

    case CREATE_DATE:
      return getCreateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case PAYMENT_AMOUNT:
      return isSetPaymentAmount();
    case PAYMENT_DTTM:
      return isSetPaymentDttm();
    case USE_BALANCE:
      return isSetUseBalance();
    case RECONCILIATION:
      return isSetReconciliation();
    case STATUS:
      return isSetStatus();
    case VERSION:
      return isSetVersion();
    case AVAILABLE_BALANCE:
      return isSetAvailableBalance();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case CREATE_USER:
      return isSetCreateUser();
    case CREATE_DATE:
      return isSetCreateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceReceivablesDTO)
      return this.equals((FinanceReceivablesDTO)that);
    return false;
  }

  public boolean equals(FinanceReceivablesDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_paymentAmount = true;
    boolean that_present_paymentAmount = true;
    if (this_present_paymentAmount || that_present_paymentAmount) {
      if (!(this_present_paymentAmount && that_present_paymentAmount))
        return false;
      if (this.paymentAmount != that.paymentAmount)
        return false;
    }

    boolean this_present_paymentDttm = true && this.isSetPaymentDttm();
    boolean that_present_paymentDttm = true && that.isSetPaymentDttm();
    if (this_present_paymentDttm || that_present_paymentDttm) {
      if (!(this_present_paymentDttm && that_present_paymentDttm))
        return false;
      if (!this.paymentDttm.equals(that.paymentDttm))
        return false;
    }

    boolean this_present_useBalance = true;
    boolean that_present_useBalance = true;
    if (this_present_useBalance || that_present_useBalance) {
      if (!(this_present_useBalance && that_present_useBalance))
        return false;
      if (this.useBalance != that.useBalance)
        return false;
    }

    boolean this_present_reconciliation = true;
    boolean that_present_reconciliation = true;
    if (this_present_reconciliation || that_present_reconciliation) {
      if (!(this_present_reconciliation && that_present_reconciliation))
        return false;
      if (this.reconciliation != that.reconciliation)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_availableBalance = true;
    boolean that_present_availableBalance = true;
    if (this_present_availableBalance || that_present_availableBalance) {
      if (!(this_present_availableBalance && that_present_availableBalance))
        return false;
      if (this.availableBalance != that.availableBalance)
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_createUser = true && this.isSetCreateUser();
    boolean that_present_createUser = true && that.isSetCreateUser();
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (!this.createUser.equals(that.createUser))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_paymentAmount = true;
    list.add(present_paymentAmount);
    if (present_paymentAmount)
      list.add(paymentAmount);

    boolean present_paymentDttm = true && (isSetPaymentDttm());
    list.add(present_paymentDttm);
    if (present_paymentDttm)
      list.add(paymentDttm);

    boolean present_useBalance = true;
    list.add(present_useBalance);
    if (present_useBalance)
      list.add(useBalance);

    boolean present_reconciliation = true;
    list.add(present_reconciliation);
    if (present_reconciliation)
      list.add(reconciliation);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_availableBalance = true;
    list.add(present_availableBalance);
    if (present_availableBalance)
      list.add(availableBalance);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_createUser = true && (isSetCreateUser());
    list.add(present_createUser);
    if (present_createUser)
      list.add(createUser);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceReceivablesDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAmount()).compareTo(other.isSetPaymentAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAmount, other.paymentAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentDttm()).compareTo(other.isSetPaymentDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDttm, other.paymentDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseBalance()).compareTo(other.isSetUseBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useBalance, other.useBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliation()).compareTo(other.isSetReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliation, other.reconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableBalance()).compareTo(other.isSetAvailableBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableBalance, other.availableBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceReceivablesDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAmount:");
    sb.append(this.paymentAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentDttm:");
    if (this.paymentDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useBalance:");
    sb.append(this.useBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliation:");
    sb.append(this.reconciliation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableBalance:");
    sb.append(this.availableBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    if (this.createUser == null) {
      sb.append("null");
    } else {
      sb.append(this.createUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceReceivablesDTOStandardSchemeFactory implements SchemeFactory {
    public FinanceReceivablesDTOStandardScheme getScheme() {
      return new FinanceReceivablesDTOStandardScheme();
    }
  }

  private static class FinanceReceivablesDTOStandardScheme extends StandardScheme<FinanceReceivablesDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceReceivablesDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paymentAmount = iprot.readDouble();
              struct.setPaymentAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAYMENT_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentDttm = iprot.readString();
              struct.setPaymentDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useBalance = iprot.readDouble();
              struct.setUseBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reconciliation = iprot.readI32();
              struct.setReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVAILABLE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableBalance = iprot.readDouble();
              struct.setAvailableBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createUser = iprot.readString();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceReceivablesDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.paymentAmount);
      oprot.writeFieldEnd();
      if (struct.paymentDttm != null) {
        oprot.writeFieldBegin(PAYMENT_DTTM_FIELD_DESC);
        oprot.writeString(struct.paymentDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.useBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.reconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.availableBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      if (struct.createUser != null) {
        oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
        oprot.writeString(struct.createUser);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceReceivablesDTOTupleSchemeFactory implements SchemeFactory {
    public FinanceReceivablesDTOTupleScheme getScheme() {
      return new FinanceReceivablesDTOTupleScheme();
    }
  }

  private static class FinanceReceivablesDTOTupleScheme extends TupleScheme<FinanceReceivablesDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceReceivablesDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentAmount()) {
        optionals.set(2);
      }
      if (struct.isSetPaymentDttm()) {
        optionals.set(3);
      }
      if (struct.isSetUseBalance()) {
        optionals.set(4);
      }
      if (struct.isSetReconciliation()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetVersion()) {
        optionals.set(7);
      }
      if (struct.isSetAvailableBalance()) {
        optionals.set(8);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(9);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(10);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetPaymentAmount()) {
        oprot.writeDouble(struct.paymentAmount);
      }
      if (struct.isSetPaymentDttm()) {
        oprot.writeString(struct.paymentDttm);
      }
      if (struct.isSetUseBalance()) {
        oprot.writeDouble(struct.useBalance);
      }
      if (struct.isSetReconciliation()) {
        oprot.writeI32(struct.reconciliation);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetAvailableBalance()) {
        oprot.writeDouble(struct.availableBalance);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeString(struct.createUser);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceReceivablesDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentAmount = iprot.readDouble();
        struct.setPaymentAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.paymentDttm = iprot.readString();
        struct.setPaymentDttmIsSet(true);
      }
      if (incoming.get(4)) {
        struct.useBalance = iprot.readDouble();
        struct.setUseBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reconciliation = iprot.readI32();
        struct.setReconciliationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.availableBalance = iprot.readDouble();
        struct.setAvailableBalanceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createUser = iprot.readString();
        struct.setCreateUserIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
    }
  }

}


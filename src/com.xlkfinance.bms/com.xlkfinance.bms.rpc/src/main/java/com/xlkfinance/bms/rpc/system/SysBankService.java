/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-17")
public class SysBankService {

  /**
   *   
   * @Title:
   * @Package
   * @Description: 广告信息
   * @author baogang  
   * @date 2016年5月11日
   */
  public interface Iface {

    public int addSysBankInfo(SysBankInfo sysBankInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateSysBankInfo(SysBankInfo sysBankInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<SysBankInfo> querySysBankInfos(SysBankInfo sysBankInfo) throws org.apache.thrift.TException;

    public int getSysBankCount(SysBankInfo sysBankInfo) throws org.apache.thrift.TException;

    public SysBankInfo querySysBankInfo(int pid) throws org.apache.thrift.TException;

    public List<SysBankInfoDto> queryAllSysBankInfo(SysBankInfo sysBankInfo) throws org.apache.thrift.TException;

    public int batchDelete(String ids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSysBankInfo(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSysBankInfo(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySysBankInfos(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysBankCount(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySysBankInfo(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryAllSysBankInfo(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchDelete(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addSysBankInfo(SysBankInfo sysBankInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addSysBankInfo(sysBankInfo);
      return recv_addSysBankInfo();
    }

    public void send_addSysBankInfo(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      addSysBankInfo_args args = new addSysBankInfo_args();
      args.setSysBankInfo(sysBankInfo);
      sendBase("addSysBankInfo", args);
    }

    public int recv_addSysBankInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addSysBankInfo_result result = new addSysBankInfo_result();
      receiveBase(result, "addSysBankInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSysBankInfo failed: unknown result");
    }

    public int updateSysBankInfo(SysBankInfo sysBankInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateSysBankInfo(sysBankInfo);
      return recv_updateSysBankInfo();
    }

    public void send_updateSysBankInfo(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      updateSysBankInfo_args args = new updateSysBankInfo_args();
      args.setSysBankInfo(sysBankInfo);
      sendBase("updateSysBankInfo", args);
    }

    public int recv_updateSysBankInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateSysBankInfo_result result = new updateSysBankInfo_result();
      receiveBase(result, "updateSysBankInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSysBankInfo failed: unknown result");
    }

    public List<SysBankInfo> querySysBankInfos(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      send_querySysBankInfos(sysBankInfo);
      return recv_querySysBankInfos();
    }

    public void send_querySysBankInfos(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      querySysBankInfos_args args = new querySysBankInfos_args();
      args.setSysBankInfo(sysBankInfo);
      sendBase("querySysBankInfos", args);
    }

    public List<SysBankInfo> recv_querySysBankInfos() throws org.apache.thrift.TException
    {
      querySysBankInfos_result result = new querySysBankInfos_result();
      receiveBase(result, "querySysBankInfos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySysBankInfos failed: unknown result");
    }

    public int getSysBankCount(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      send_getSysBankCount(sysBankInfo);
      return recv_getSysBankCount();
    }

    public void send_getSysBankCount(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      getSysBankCount_args args = new getSysBankCount_args();
      args.setSysBankInfo(sysBankInfo);
      sendBase("getSysBankCount", args);
    }

    public int recv_getSysBankCount() throws org.apache.thrift.TException
    {
      getSysBankCount_result result = new getSysBankCount_result();
      receiveBase(result, "getSysBankCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysBankCount failed: unknown result");
    }

    public SysBankInfo querySysBankInfo(int pid) throws org.apache.thrift.TException
    {
      send_querySysBankInfo(pid);
      return recv_querySysBankInfo();
    }

    public void send_querySysBankInfo(int pid) throws org.apache.thrift.TException
    {
      querySysBankInfo_args args = new querySysBankInfo_args();
      args.setPid(pid);
      sendBase("querySysBankInfo", args);
    }

    public SysBankInfo recv_querySysBankInfo() throws org.apache.thrift.TException
    {
      querySysBankInfo_result result = new querySysBankInfo_result();
      receiveBase(result, "querySysBankInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySysBankInfo failed: unknown result");
    }

    public List<SysBankInfoDto> queryAllSysBankInfo(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      send_queryAllSysBankInfo(sysBankInfo);
      return recv_queryAllSysBankInfo();
    }

    public void send_queryAllSysBankInfo(SysBankInfo sysBankInfo) throws org.apache.thrift.TException
    {
      queryAllSysBankInfo_args args = new queryAllSysBankInfo_args();
      args.setSysBankInfo(sysBankInfo);
      sendBase("queryAllSysBankInfo", args);
    }

    public List<SysBankInfoDto> recv_queryAllSysBankInfo() throws org.apache.thrift.TException
    {
      queryAllSysBankInfo_result result = new queryAllSysBankInfo_result();
      receiveBase(result, "queryAllSysBankInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllSysBankInfo failed: unknown result");
    }

    public int batchDelete(String ids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_batchDelete(ids);
      return recv_batchDelete();
    }

    public void send_batchDelete(String ids) throws org.apache.thrift.TException
    {
      batchDelete_args args = new batchDelete_args();
      args.setIds(ids);
      sendBase("batchDelete", args);
    }

    public int recv_batchDelete() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      batchDelete_result result = new batchDelete_result();
      receiveBase(result, "batchDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchDelete failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSysBankInfo(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSysBankInfo_call method_call = new addSysBankInfo_call(sysBankInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSysBankInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysBankInfo sysBankInfo;
      public addSysBankInfo_call(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysBankInfo = sysBankInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSysBankInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSysBankInfo_args args = new addSysBankInfo_args();
        args.setSysBankInfo(sysBankInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSysBankInfo();
      }
    }

    public void updateSysBankInfo(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSysBankInfo_call method_call = new updateSysBankInfo_call(sysBankInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSysBankInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysBankInfo sysBankInfo;
      public updateSysBankInfo_call(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysBankInfo = sysBankInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSysBankInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSysBankInfo_args args = new updateSysBankInfo_args();
        args.setSysBankInfo(sysBankInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSysBankInfo();
      }
    }

    public void querySysBankInfos(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySysBankInfos_call method_call = new querySysBankInfos_call(sysBankInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySysBankInfos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysBankInfo sysBankInfo;
      public querySysBankInfos_call(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysBankInfo = sysBankInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySysBankInfos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySysBankInfos_args args = new querySysBankInfos_args();
        args.setSysBankInfo(sysBankInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysBankInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySysBankInfos();
      }
    }

    public void getSysBankCount(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysBankCount_call method_call = new getSysBankCount_call(sysBankInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysBankCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysBankInfo sysBankInfo;
      public getSysBankCount_call(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysBankInfo = sysBankInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysBankCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysBankCount_args args = new getSysBankCount_args();
        args.setSysBankInfo(sysBankInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysBankCount();
      }
    }

    public void querySysBankInfo(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySysBankInfo_call method_call = new querySysBankInfo_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySysBankInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public querySysBankInfo_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySysBankInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySysBankInfo_args args = new querySysBankInfo_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysBankInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySysBankInfo();
      }
    }

    public void queryAllSysBankInfo(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAllSysBankInfo_call method_call = new queryAllSysBankInfo_call(sysBankInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAllSysBankInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysBankInfo sysBankInfo;
      public queryAllSysBankInfo_call(SysBankInfo sysBankInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysBankInfo = sysBankInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllSysBankInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAllSysBankInfo_args args = new queryAllSysBankInfo_args();
        args.setSysBankInfo(sysBankInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysBankInfoDto> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAllSysBankInfo();
      }
    }

    public void batchDelete(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchDelete_call method_call = new batchDelete_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ids;
      public batchDelete_call(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchDelete_args args = new batchDelete_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchDelete();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSysBankInfo", new addSysBankInfo());
      processMap.put("updateSysBankInfo", new updateSysBankInfo());
      processMap.put("querySysBankInfos", new querySysBankInfos());
      processMap.put("getSysBankCount", new getSysBankCount());
      processMap.put("querySysBankInfo", new querySysBankInfo());
      processMap.put("queryAllSysBankInfo", new queryAllSysBankInfo());
      processMap.put("batchDelete", new batchDelete());
      return processMap;
    }

    public static class addSysBankInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSysBankInfo_args> {
      public addSysBankInfo() {
        super("addSysBankInfo");
      }

      public addSysBankInfo_args getEmptyArgsInstance() {
        return new addSysBankInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSysBankInfo_result getResult(I iface, addSysBankInfo_args args) throws org.apache.thrift.TException {
        addSysBankInfo_result result = new addSysBankInfo_result();
        try {
          result.success = iface.addSysBankInfo(args.sysBankInfo);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateSysBankInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSysBankInfo_args> {
      public updateSysBankInfo() {
        super("updateSysBankInfo");
      }

      public updateSysBankInfo_args getEmptyArgsInstance() {
        return new updateSysBankInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSysBankInfo_result getResult(I iface, updateSysBankInfo_args args) throws org.apache.thrift.TException {
        updateSysBankInfo_result result = new updateSysBankInfo_result();
        try {
          result.success = iface.updateSysBankInfo(args.sysBankInfo);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class querySysBankInfos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySysBankInfos_args> {
      public querySysBankInfos() {
        super("querySysBankInfos");
      }

      public querySysBankInfos_args getEmptyArgsInstance() {
        return new querySysBankInfos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySysBankInfos_result getResult(I iface, querySysBankInfos_args args) throws org.apache.thrift.TException {
        querySysBankInfos_result result = new querySysBankInfos_result();
        result.success = iface.querySysBankInfos(args.sysBankInfo);
        return result;
      }
    }

    public static class getSysBankCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysBankCount_args> {
      public getSysBankCount() {
        super("getSysBankCount");
      }

      public getSysBankCount_args getEmptyArgsInstance() {
        return new getSysBankCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysBankCount_result getResult(I iface, getSysBankCount_args args) throws org.apache.thrift.TException {
        getSysBankCount_result result = new getSysBankCount_result();
        result.success = iface.getSysBankCount(args.sysBankInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class querySysBankInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySysBankInfo_args> {
      public querySysBankInfo() {
        super("querySysBankInfo");
      }

      public querySysBankInfo_args getEmptyArgsInstance() {
        return new querySysBankInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySysBankInfo_result getResult(I iface, querySysBankInfo_args args) throws org.apache.thrift.TException {
        querySysBankInfo_result result = new querySysBankInfo_result();
        result.success = iface.querySysBankInfo(args.pid);
        return result;
      }
    }

    public static class queryAllSysBankInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllSysBankInfo_args> {
      public queryAllSysBankInfo() {
        super("queryAllSysBankInfo");
      }

      public queryAllSysBankInfo_args getEmptyArgsInstance() {
        return new queryAllSysBankInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryAllSysBankInfo_result getResult(I iface, queryAllSysBankInfo_args args) throws org.apache.thrift.TException {
        queryAllSysBankInfo_result result = new queryAllSysBankInfo_result();
        result.success = iface.queryAllSysBankInfo(args.sysBankInfo);
        return result;
      }
    }

    public static class batchDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDelete_args> {
      public batchDelete() {
        super("batchDelete");
      }

      public batchDelete_args getEmptyArgsInstance() {
        return new batchDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchDelete_result getResult(I iface, batchDelete_args args) throws org.apache.thrift.TException {
        batchDelete_result result = new batchDelete_result();
        try {
          result.success = iface.batchDelete(args.ids);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSysBankInfo", new addSysBankInfo());
      processMap.put("updateSysBankInfo", new updateSysBankInfo());
      processMap.put("querySysBankInfos", new querySysBankInfos());
      processMap.put("getSysBankCount", new getSysBankCount());
      processMap.put("querySysBankInfo", new querySysBankInfo());
      processMap.put("queryAllSysBankInfo", new queryAllSysBankInfo());
      processMap.put("batchDelete", new batchDelete());
      return processMap;
    }

    public static class addSysBankInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSysBankInfo_args, Integer> {
      public addSysBankInfo() {
        super("addSysBankInfo");
      }

      public addSysBankInfo_args getEmptyArgsInstance() {
        return new addSysBankInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addSysBankInfo_result result = new addSysBankInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSysBankInfo_result result = new addSysBankInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSysBankInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addSysBankInfo(args.sysBankInfo,resultHandler);
      }
    }

    public static class updateSysBankInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSysBankInfo_args, Integer> {
      public updateSysBankInfo() {
        super("updateSysBankInfo");
      }

      public updateSysBankInfo_args getEmptyArgsInstance() {
        return new updateSysBankInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateSysBankInfo_result result = new updateSysBankInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSysBankInfo_result result = new updateSysBankInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSysBankInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateSysBankInfo(args.sysBankInfo,resultHandler);
      }
    }

    public static class querySysBankInfos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySysBankInfos_args, List<SysBankInfo>> {
      public querySysBankInfos() {
        super("querySysBankInfos");
      }

      public querySysBankInfos_args getEmptyArgsInstance() {
        return new querySysBankInfos_args();
      }

      public AsyncMethodCallback<List<SysBankInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysBankInfo>>() { 
          public void onComplete(List<SysBankInfo> o) {
            querySysBankInfos_result result = new querySysBankInfos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySysBankInfos_result result = new querySysBankInfos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySysBankInfos_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysBankInfo>> resultHandler) throws TException {
        iface.querySysBankInfos(args.sysBankInfo,resultHandler);
      }
    }

    public static class getSysBankCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysBankCount_args, Integer> {
      public getSysBankCount() {
        super("getSysBankCount");
      }

      public getSysBankCount_args getEmptyArgsInstance() {
        return new getSysBankCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getSysBankCount_result result = new getSysBankCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysBankCount_result result = new getSysBankCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysBankCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getSysBankCount(args.sysBankInfo,resultHandler);
      }
    }

    public static class querySysBankInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySysBankInfo_args, SysBankInfo> {
      public querySysBankInfo() {
        super("querySysBankInfo");
      }

      public querySysBankInfo_args getEmptyArgsInstance() {
        return new querySysBankInfo_args();
      }

      public AsyncMethodCallback<SysBankInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SysBankInfo>() { 
          public void onComplete(SysBankInfo o) {
            querySysBankInfo_result result = new querySysBankInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySysBankInfo_result result = new querySysBankInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySysBankInfo_args args, org.apache.thrift.async.AsyncMethodCallback<SysBankInfo> resultHandler) throws TException {
        iface.querySysBankInfo(args.pid,resultHandler);
      }
    }

    public static class queryAllSysBankInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllSysBankInfo_args, List<SysBankInfoDto>> {
      public queryAllSysBankInfo() {
        super("queryAllSysBankInfo");
      }

      public queryAllSysBankInfo_args getEmptyArgsInstance() {
        return new queryAllSysBankInfo_args();
      }

      public AsyncMethodCallback<List<SysBankInfoDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysBankInfoDto>>() { 
          public void onComplete(List<SysBankInfoDto> o) {
            queryAllSysBankInfo_result result = new queryAllSysBankInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryAllSysBankInfo_result result = new queryAllSysBankInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryAllSysBankInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysBankInfoDto>> resultHandler) throws TException {
        iface.queryAllSysBankInfo(args.sysBankInfo,resultHandler);
      }
    }

    public static class batchDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchDelete_args, Integer> {
      public batchDelete() {
        super("batchDelete");
      }

      public batchDelete_args getEmptyArgsInstance() {
        return new batchDelete_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchDelete_result result = new batchDelete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchDelete_result result = new batchDelete_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchDelete(args.ids,resultHandler);
      }
    }

  }

  public static class addSysBankInfo_args implements org.apache.thrift.TBase<addSysBankInfo_args, addSysBankInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSysBankInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysBankInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_BANK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysBankInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysBankInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysBankInfo_argsTupleSchemeFactory());
    }

    public SysBankInfo sysBankInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_BANK_INFO((short)1, "sysBankInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_BANK_INFO
            return SYS_BANK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_BANK_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysBankInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysBankInfo_args.class, metaDataMap);
    }

    public addSysBankInfo_args() {
    }

    public addSysBankInfo_args(
      SysBankInfo sysBankInfo)
    {
      this();
      this.sysBankInfo = sysBankInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysBankInfo_args(addSysBankInfo_args other) {
      if (other.isSetSysBankInfo()) {
        this.sysBankInfo = new SysBankInfo(other.sysBankInfo);
      }
    }

    public addSysBankInfo_args deepCopy() {
      return new addSysBankInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysBankInfo = null;
    }

    public SysBankInfo getSysBankInfo() {
      return this.sysBankInfo;
    }

    public addSysBankInfo_args setSysBankInfo(SysBankInfo sysBankInfo) {
      this.sysBankInfo = sysBankInfo;
      return this;
    }

    public void unsetSysBankInfo() {
      this.sysBankInfo = null;
    }

    /** Returns true if field sysBankInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysBankInfo() {
      return this.sysBankInfo != null;
    }

    public void setSysBankInfoIsSet(boolean value) {
      if (!value) {
        this.sysBankInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_BANK_INFO:
        if (value == null) {
          unsetSysBankInfo();
        } else {
          setSysBankInfo((SysBankInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_BANK_INFO:
        return getSysBankInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_BANK_INFO:
        return isSetSysBankInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysBankInfo_args)
        return this.equals((addSysBankInfo_args)that);
      return false;
    }

    public boolean equals(addSysBankInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysBankInfo = true && this.isSetSysBankInfo();
      boolean that_present_sysBankInfo = true && that.isSetSysBankInfo();
      if (this_present_sysBankInfo || that_present_sysBankInfo) {
        if (!(this_present_sysBankInfo && that_present_sysBankInfo))
          return false;
        if (!this.sysBankInfo.equals(that.sysBankInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysBankInfo = true && (isSetSysBankInfo());
      list.add(present_sysBankInfo);
      if (present_sysBankInfo)
        list.add(sysBankInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysBankInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysBankInfo()).compareTo(other.isSetSysBankInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysBankInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysBankInfo, other.sysBankInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysBankInfo_args(");
      boolean first = true;

      sb.append("sysBankInfo:");
      if (this.sysBankInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysBankInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysBankInfo != null) {
        sysBankInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysBankInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addSysBankInfo_argsStandardScheme getScheme() {
        return new addSysBankInfo_argsStandardScheme();
      }
    }

    private static class addSysBankInfo_argsStandardScheme extends StandardScheme<addSysBankInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysBankInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_BANK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysBankInfo = new SysBankInfo();
                struct.sysBankInfo.read(iprot);
                struct.setSysBankInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysBankInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysBankInfo != null) {
          oprot.writeFieldBegin(SYS_BANK_INFO_FIELD_DESC);
          struct.sysBankInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysBankInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addSysBankInfo_argsTupleScheme getScheme() {
        return new addSysBankInfo_argsTupleScheme();
      }
    }

    private static class addSysBankInfo_argsTupleScheme extends TupleScheme<addSysBankInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysBankInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysBankInfo()) {
          struct.sysBankInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysBankInfo = new SysBankInfo();
          struct.sysBankInfo.read(iprot);
          struct.setSysBankInfoIsSet(true);
        }
      }
    }

  }

  public static class addSysBankInfo_result implements org.apache.thrift.TBase<addSysBankInfo_result, addSysBankInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSysBankInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysBankInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysBankInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysBankInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysBankInfo_result.class, metaDataMap);
    }

    public addSysBankInfo_result() {
    }

    public addSysBankInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysBankInfo_result(addSysBankInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addSysBankInfo_result deepCopy() {
      return new addSysBankInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addSysBankInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addSysBankInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysBankInfo_result)
        return this.equals((addSysBankInfo_result)that);
      return false;
    }

    public boolean equals(addSysBankInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysBankInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysBankInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysBankInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addSysBankInfo_resultStandardScheme getScheme() {
        return new addSysBankInfo_resultStandardScheme();
      }
    }

    private static class addSysBankInfo_resultStandardScheme extends StandardScheme<addSysBankInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysBankInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysBankInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysBankInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addSysBankInfo_resultTupleScheme getScheme() {
        return new addSysBankInfo_resultTupleScheme();
      }
    }

    private static class addSysBankInfo_resultTupleScheme extends TupleScheme<addSysBankInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateSysBankInfo_args implements org.apache.thrift.TBase<updateSysBankInfo_args, updateSysBankInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysBankInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysBankInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_BANK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysBankInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysBankInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysBankInfo_argsTupleSchemeFactory());
    }

    public SysBankInfo sysBankInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_BANK_INFO((short)1, "sysBankInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_BANK_INFO
            return SYS_BANK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_BANK_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysBankInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysBankInfo_args.class, metaDataMap);
    }

    public updateSysBankInfo_args() {
    }

    public updateSysBankInfo_args(
      SysBankInfo sysBankInfo)
    {
      this();
      this.sysBankInfo = sysBankInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysBankInfo_args(updateSysBankInfo_args other) {
      if (other.isSetSysBankInfo()) {
        this.sysBankInfo = new SysBankInfo(other.sysBankInfo);
      }
    }

    public updateSysBankInfo_args deepCopy() {
      return new updateSysBankInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysBankInfo = null;
    }

    public SysBankInfo getSysBankInfo() {
      return this.sysBankInfo;
    }

    public updateSysBankInfo_args setSysBankInfo(SysBankInfo sysBankInfo) {
      this.sysBankInfo = sysBankInfo;
      return this;
    }

    public void unsetSysBankInfo() {
      this.sysBankInfo = null;
    }

    /** Returns true if field sysBankInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysBankInfo() {
      return this.sysBankInfo != null;
    }

    public void setSysBankInfoIsSet(boolean value) {
      if (!value) {
        this.sysBankInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_BANK_INFO:
        if (value == null) {
          unsetSysBankInfo();
        } else {
          setSysBankInfo((SysBankInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_BANK_INFO:
        return getSysBankInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_BANK_INFO:
        return isSetSysBankInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysBankInfo_args)
        return this.equals((updateSysBankInfo_args)that);
      return false;
    }

    public boolean equals(updateSysBankInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysBankInfo = true && this.isSetSysBankInfo();
      boolean that_present_sysBankInfo = true && that.isSetSysBankInfo();
      if (this_present_sysBankInfo || that_present_sysBankInfo) {
        if (!(this_present_sysBankInfo && that_present_sysBankInfo))
          return false;
        if (!this.sysBankInfo.equals(that.sysBankInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysBankInfo = true && (isSetSysBankInfo());
      list.add(present_sysBankInfo);
      if (present_sysBankInfo)
        list.add(sysBankInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysBankInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysBankInfo()).compareTo(other.isSetSysBankInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysBankInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysBankInfo, other.sysBankInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysBankInfo_args(");
      boolean first = true;

      sb.append("sysBankInfo:");
      if (this.sysBankInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysBankInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysBankInfo != null) {
        sysBankInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysBankInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateSysBankInfo_argsStandardScheme getScheme() {
        return new updateSysBankInfo_argsStandardScheme();
      }
    }

    private static class updateSysBankInfo_argsStandardScheme extends StandardScheme<updateSysBankInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysBankInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_BANK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysBankInfo = new SysBankInfo();
                struct.sysBankInfo.read(iprot);
                struct.setSysBankInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysBankInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysBankInfo != null) {
          oprot.writeFieldBegin(SYS_BANK_INFO_FIELD_DESC);
          struct.sysBankInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysBankInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateSysBankInfo_argsTupleScheme getScheme() {
        return new updateSysBankInfo_argsTupleScheme();
      }
    }

    private static class updateSysBankInfo_argsTupleScheme extends TupleScheme<updateSysBankInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysBankInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysBankInfo()) {
          struct.sysBankInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysBankInfo = new SysBankInfo();
          struct.sysBankInfo.read(iprot);
          struct.setSysBankInfoIsSet(true);
        }
      }
    }

  }

  public static class updateSysBankInfo_result implements org.apache.thrift.TBase<updateSysBankInfo_result, updateSysBankInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysBankInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysBankInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysBankInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysBankInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysBankInfo_result.class, metaDataMap);
    }

    public updateSysBankInfo_result() {
    }

    public updateSysBankInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysBankInfo_result(updateSysBankInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateSysBankInfo_result deepCopy() {
      return new updateSysBankInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateSysBankInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateSysBankInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysBankInfo_result)
        return this.equals((updateSysBankInfo_result)that);
      return false;
    }

    public boolean equals(updateSysBankInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysBankInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysBankInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysBankInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateSysBankInfo_resultStandardScheme getScheme() {
        return new updateSysBankInfo_resultStandardScheme();
      }
    }

    private static class updateSysBankInfo_resultStandardScheme extends StandardScheme<updateSysBankInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysBankInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysBankInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysBankInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateSysBankInfo_resultTupleScheme getScheme() {
        return new updateSysBankInfo_resultTupleScheme();
      }
    }

    private static class updateSysBankInfo_resultTupleScheme extends TupleScheme<updateSysBankInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class querySysBankInfos_args implements org.apache.thrift.TBase<querySysBankInfos_args, querySysBankInfos_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySysBankInfos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySysBankInfos_args");

    private static final org.apache.thrift.protocol.TField SYS_BANK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysBankInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySysBankInfos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySysBankInfos_argsTupleSchemeFactory());
    }

    public SysBankInfo sysBankInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_BANK_INFO((short)1, "sysBankInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_BANK_INFO
            return SYS_BANK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_BANK_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysBankInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySysBankInfos_args.class, metaDataMap);
    }

    public querySysBankInfos_args() {
    }

    public querySysBankInfos_args(
      SysBankInfo sysBankInfo)
    {
      this();
      this.sysBankInfo = sysBankInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySysBankInfos_args(querySysBankInfos_args other) {
      if (other.isSetSysBankInfo()) {
        this.sysBankInfo = new SysBankInfo(other.sysBankInfo);
      }
    }

    public querySysBankInfos_args deepCopy() {
      return new querySysBankInfos_args(this);
    }

    @Override
    public void clear() {
      this.sysBankInfo = null;
    }

    public SysBankInfo getSysBankInfo() {
      return this.sysBankInfo;
    }

    public querySysBankInfos_args setSysBankInfo(SysBankInfo sysBankInfo) {
      this.sysBankInfo = sysBankInfo;
      return this;
    }

    public void unsetSysBankInfo() {
      this.sysBankInfo = null;
    }

    /** Returns true if field sysBankInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysBankInfo() {
      return this.sysBankInfo != null;
    }

    public void setSysBankInfoIsSet(boolean value) {
      if (!value) {
        this.sysBankInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_BANK_INFO:
        if (value == null) {
          unsetSysBankInfo();
        } else {
          setSysBankInfo((SysBankInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_BANK_INFO:
        return getSysBankInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_BANK_INFO:
        return isSetSysBankInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySysBankInfos_args)
        return this.equals((querySysBankInfos_args)that);
      return false;
    }

    public boolean equals(querySysBankInfos_args that) {
      if (that == null)
        return false;

      boolean this_present_sysBankInfo = true && this.isSetSysBankInfo();
      boolean that_present_sysBankInfo = true && that.isSetSysBankInfo();
      if (this_present_sysBankInfo || that_present_sysBankInfo) {
        if (!(this_present_sysBankInfo && that_present_sysBankInfo))
          return false;
        if (!this.sysBankInfo.equals(that.sysBankInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysBankInfo = true && (isSetSysBankInfo());
      list.add(present_sysBankInfo);
      if (present_sysBankInfo)
        list.add(sysBankInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySysBankInfos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysBankInfo()).compareTo(other.isSetSysBankInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysBankInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysBankInfo, other.sysBankInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySysBankInfos_args(");
      boolean first = true;

      sb.append("sysBankInfo:");
      if (this.sysBankInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysBankInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysBankInfo != null) {
        sysBankInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySysBankInfos_argsStandardSchemeFactory implements SchemeFactory {
      public querySysBankInfos_argsStandardScheme getScheme() {
        return new querySysBankInfos_argsStandardScheme();
      }
    }

    private static class querySysBankInfos_argsStandardScheme extends StandardScheme<querySysBankInfos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySysBankInfos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_BANK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysBankInfo = new SysBankInfo();
                struct.sysBankInfo.read(iprot);
                struct.setSysBankInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySysBankInfos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysBankInfo != null) {
          oprot.writeFieldBegin(SYS_BANK_INFO_FIELD_DESC);
          struct.sysBankInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySysBankInfos_argsTupleSchemeFactory implements SchemeFactory {
      public querySysBankInfos_argsTupleScheme getScheme() {
        return new querySysBankInfos_argsTupleScheme();
      }
    }

    private static class querySysBankInfos_argsTupleScheme extends TupleScheme<querySysBankInfos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySysBankInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysBankInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysBankInfo()) {
          struct.sysBankInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySysBankInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysBankInfo = new SysBankInfo();
          struct.sysBankInfo.read(iprot);
          struct.setSysBankInfoIsSet(true);
        }
      }
    }

  }

  public static class querySysBankInfos_result implements org.apache.thrift.TBase<querySysBankInfos_result, querySysBankInfos_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySysBankInfos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySysBankInfos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySysBankInfos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySysBankInfos_resultTupleSchemeFactory());
    }

    public List<SysBankInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySysBankInfos_result.class, metaDataMap);
    }

    public querySysBankInfos_result() {
    }

    public querySysBankInfos_result(
      List<SysBankInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySysBankInfos_result(querySysBankInfos_result other) {
      if (other.isSetSuccess()) {
        List<SysBankInfo> __this__success = new ArrayList<SysBankInfo>(other.success.size());
        for (SysBankInfo other_element : other.success) {
          __this__success.add(new SysBankInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySysBankInfos_result deepCopy() {
      return new querySysBankInfos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysBankInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysBankInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysBankInfo>();
      }
      this.success.add(elem);
    }

    public List<SysBankInfo> getSuccess() {
      return this.success;
    }

    public querySysBankInfos_result setSuccess(List<SysBankInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysBankInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySysBankInfos_result)
        return this.equals((querySysBankInfos_result)that);
      return false;
    }

    public boolean equals(querySysBankInfos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySysBankInfos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySysBankInfos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySysBankInfos_resultStandardSchemeFactory implements SchemeFactory {
      public querySysBankInfos_resultStandardScheme getScheme() {
        return new querySysBankInfos_resultStandardScheme();
      }
    }

    private static class querySysBankInfos_resultStandardScheme extends StandardScheme<querySysBankInfos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySysBankInfos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list758 = iprot.readListBegin();
                  struct.success = new ArrayList<SysBankInfo>(_list758.size);
                  SysBankInfo _elem759;
                  for (int _i760 = 0; _i760 < _list758.size; ++_i760)
                  {
                    _elem759 = new SysBankInfo();
                    _elem759.read(iprot);
                    struct.success.add(_elem759);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySysBankInfos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysBankInfo _iter761 : struct.success)
            {
              _iter761.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySysBankInfos_resultTupleSchemeFactory implements SchemeFactory {
      public querySysBankInfos_resultTupleScheme getScheme() {
        return new querySysBankInfos_resultTupleScheme();
      }
    }

    private static class querySysBankInfos_resultTupleScheme extends TupleScheme<querySysBankInfos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySysBankInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysBankInfo _iter762 : struct.success)
            {
              _iter762.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySysBankInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list763 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysBankInfo>(_list763.size);
            SysBankInfo _elem764;
            for (int _i765 = 0; _i765 < _list763.size; ++_i765)
            {
              _elem764 = new SysBankInfo();
              _elem764.read(iprot);
              struct.success.add(_elem764);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysBankCount_args implements org.apache.thrift.TBase<getSysBankCount_args, getSysBankCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysBankCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysBankCount_args");

    private static final org.apache.thrift.protocol.TField SYS_BANK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysBankInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysBankCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysBankCount_argsTupleSchemeFactory());
    }

    public SysBankInfo sysBankInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_BANK_INFO((short)1, "sysBankInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_BANK_INFO
            return SYS_BANK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_BANK_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysBankInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysBankCount_args.class, metaDataMap);
    }

    public getSysBankCount_args() {
    }

    public getSysBankCount_args(
      SysBankInfo sysBankInfo)
    {
      this();
      this.sysBankInfo = sysBankInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysBankCount_args(getSysBankCount_args other) {
      if (other.isSetSysBankInfo()) {
        this.sysBankInfo = new SysBankInfo(other.sysBankInfo);
      }
    }

    public getSysBankCount_args deepCopy() {
      return new getSysBankCount_args(this);
    }

    @Override
    public void clear() {
      this.sysBankInfo = null;
    }

    public SysBankInfo getSysBankInfo() {
      return this.sysBankInfo;
    }

    public getSysBankCount_args setSysBankInfo(SysBankInfo sysBankInfo) {
      this.sysBankInfo = sysBankInfo;
      return this;
    }

    public void unsetSysBankInfo() {
      this.sysBankInfo = null;
    }

    /** Returns true if field sysBankInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysBankInfo() {
      return this.sysBankInfo != null;
    }

    public void setSysBankInfoIsSet(boolean value) {
      if (!value) {
        this.sysBankInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_BANK_INFO:
        if (value == null) {
          unsetSysBankInfo();
        } else {
          setSysBankInfo((SysBankInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_BANK_INFO:
        return getSysBankInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_BANK_INFO:
        return isSetSysBankInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysBankCount_args)
        return this.equals((getSysBankCount_args)that);
      return false;
    }

    public boolean equals(getSysBankCount_args that) {
      if (that == null)
        return false;

      boolean this_present_sysBankInfo = true && this.isSetSysBankInfo();
      boolean that_present_sysBankInfo = true && that.isSetSysBankInfo();
      if (this_present_sysBankInfo || that_present_sysBankInfo) {
        if (!(this_present_sysBankInfo && that_present_sysBankInfo))
          return false;
        if (!this.sysBankInfo.equals(that.sysBankInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysBankInfo = true && (isSetSysBankInfo());
      list.add(present_sysBankInfo);
      if (present_sysBankInfo)
        list.add(sysBankInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysBankCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysBankInfo()).compareTo(other.isSetSysBankInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysBankInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysBankInfo, other.sysBankInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysBankCount_args(");
      boolean first = true;

      sb.append("sysBankInfo:");
      if (this.sysBankInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysBankInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysBankInfo != null) {
        sysBankInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysBankCount_argsStandardSchemeFactory implements SchemeFactory {
      public getSysBankCount_argsStandardScheme getScheme() {
        return new getSysBankCount_argsStandardScheme();
      }
    }

    private static class getSysBankCount_argsStandardScheme extends StandardScheme<getSysBankCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysBankCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_BANK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysBankInfo = new SysBankInfo();
                struct.sysBankInfo.read(iprot);
                struct.setSysBankInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysBankCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysBankInfo != null) {
          oprot.writeFieldBegin(SYS_BANK_INFO_FIELD_DESC);
          struct.sysBankInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysBankCount_argsTupleSchemeFactory implements SchemeFactory {
      public getSysBankCount_argsTupleScheme getScheme() {
        return new getSysBankCount_argsTupleScheme();
      }
    }

    private static class getSysBankCount_argsTupleScheme extends TupleScheme<getSysBankCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysBankCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysBankInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysBankInfo()) {
          struct.sysBankInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysBankCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysBankInfo = new SysBankInfo();
          struct.sysBankInfo.read(iprot);
          struct.setSysBankInfoIsSet(true);
        }
      }
    }

  }

  public static class getSysBankCount_result implements org.apache.thrift.TBase<getSysBankCount_result, getSysBankCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysBankCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysBankCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysBankCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysBankCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysBankCount_result.class, metaDataMap);
    }

    public getSysBankCount_result() {
    }

    public getSysBankCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysBankCount_result(getSysBankCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSysBankCount_result deepCopy() {
      return new getSysBankCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getSysBankCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysBankCount_result)
        return this.equals((getSysBankCount_result)that);
      return false;
    }

    public boolean equals(getSysBankCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysBankCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysBankCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysBankCount_resultStandardSchemeFactory implements SchemeFactory {
      public getSysBankCount_resultStandardScheme getScheme() {
        return new getSysBankCount_resultStandardScheme();
      }
    }

    private static class getSysBankCount_resultStandardScheme extends StandardScheme<getSysBankCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysBankCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysBankCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysBankCount_resultTupleSchemeFactory implements SchemeFactory {
      public getSysBankCount_resultTupleScheme getScheme() {
        return new getSysBankCount_resultTupleScheme();
      }
    }

    private static class getSysBankCount_resultTupleScheme extends TupleScheme<getSysBankCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysBankCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysBankCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySysBankInfo_args implements org.apache.thrift.TBase<querySysBankInfo_args, querySysBankInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySysBankInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySysBankInfo_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySysBankInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySysBankInfo_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySysBankInfo_args.class, metaDataMap);
    }

    public querySysBankInfo_args() {
    }

    public querySysBankInfo_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySysBankInfo_args(querySysBankInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public querySysBankInfo_args deepCopy() {
      return new querySysBankInfo_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public querySysBankInfo_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySysBankInfo_args)
        return this.equals((querySysBankInfo_args)that);
      return false;
    }

    public boolean equals(querySysBankInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySysBankInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySysBankInfo_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySysBankInfo_argsStandardSchemeFactory implements SchemeFactory {
      public querySysBankInfo_argsStandardScheme getScheme() {
        return new querySysBankInfo_argsStandardScheme();
      }
    }

    private static class querySysBankInfo_argsStandardScheme extends StandardScheme<querySysBankInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySysBankInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySysBankInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySysBankInfo_argsTupleSchemeFactory implements SchemeFactory {
      public querySysBankInfo_argsTupleScheme getScheme() {
        return new querySysBankInfo_argsTupleScheme();
      }
    }

    private static class querySysBankInfo_argsTupleScheme extends TupleScheme<querySysBankInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class querySysBankInfo_result implements org.apache.thrift.TBase<querySysBankInfo_result, querySysBankInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySysBankInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySysBankInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySysBankInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySysBankInfo_resultTupleSchemeFactory());
    }

    public SysBankInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySysBankInfo_result.class, metaDataMap);
    }

    public querySysBankInfo_result() {
    }

    public querySysBankInfo_result(
      SysBankInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySysBankInfo_result(querySysBankInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysBankInfo(other.success);
      }
    }

    public querySysBankInfo_result deepCopy() {
      return new querySysBankInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SysBankInfo getSuccess() {
      return this.success;
    }

    public querySysBankInfo_result setSuccess(SysBankInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysBankInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySysBankInfo_result)
        return this.equals((querySysBankInfo_result)that);
      return false;
    }

    public boolean equals(querySysBankInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySysBankInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySysBankInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySysBankInfo_resultStandardSchemeFactory implements SchemeFactory {
      public querySysBankInfo_resultStandardScheme getScheme() {
        return new querySysBankInfo_resultStandardScheme();
      }
    }

    private static class querySysBankInfo_resultStandardScheme extends StandardScheme<querySysBankInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySysBankInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysBankInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySysBankInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySysBankInfo_resultTupleSchemeFactory implements SchemeFactory {
      public querySysBankInfo_resultTupleScheme getScheme() {
        return new querySysBankInfo_resultTupleScheme();
      }
    }

    private static class querySysBankInfo_resultTupleScheme extends TupleScheme<querySysBankInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SysBankInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryAllSysBankInfo_args implements org.apache.thrift.TBase<queryAllSysBankInfo_args, queryAllSysBankInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllSysBankInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllSysBankInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_BANK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysBankInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAllSysBankInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAllSysBankInfo_argsTupleSchemeFactory());
    }

    public SysBankInfo sysBankInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_BANK_INFO((short)1, "sysBankInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_BANK_INFO
            return SYS_BANK_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_BANK_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysBankInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllSysBankInfo_args.class, metaDataMap);
    }

    public queryAllSysBankInfo_args() {
    }

    public queryAllSysBankInfo_args(
      SysBankInfo sysBankInfo)
    {
      this();
      this.sysBankInfo = sysBankInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllSysBankInfo_args(queryAllSysBankInfo_args other) {
      if (other.isSetSysBankInfo()) {
        this.sysBankInfo = new SysBankInfo(other.sysBankInfo);
      }
    }

    public queryAllSysBankInfo_args deepCopy() {
      return new queryAllSysBankInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysBankInfo = null;
    }

    public SysBankInfo getSysBankInfo() {
      return this.sysBankInfo;
    }

    public queryAllSysBankInfo_args setSysBankInfo(SysBankInfo sysBankInfo) {
      this.sysBankInfo = sysBankInfo;
      return this;
    }

    public void unsetSysBankInfo() {
      this.sysBankInfo = null;
    }

    /** Returns true if field sysBankInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysBankInfo() {
      return this.sysBankInfo != null;
    }

    public void setSysBankInfoIsSet(boolean value) {
      if (!value) {
        this.sysBankInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_BANK_INFO:
        if (value == null) {
          unsetSysBankInfo();
        } else {
          setSysBankInfo((SysBankInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_BANK_INFO:
        return getSysBankInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_BANK_INFO:
        return isSetSysBankInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllSysBankInfo_args)
        return this.equals((queryAllSysBankInfo_args)that);
      return false;
    }

    public boolean equals(queryAllSysBankInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysBankInfo = true && this.isSetSysBankInfo();
      boolean that_present_sysBankInfo = true && that.isSetSysBankInfo();
      if (this_present_sysBankInfo || that_present_sysBankInfo) {
        if (!(this_present_sysBankInfo && that_present_sysBankInfo))
          return false;
        if (!this.sysBankInfo.equals(that.sysBankInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysBankInfo = true && (isSetSysBankInfo());
      list.add(present_sysBankInfo);
      if (present_sysBankInfo)
        list.add(sysBankInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAllSysBankInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysBankInfo()).compareTo(other.isSetSysBankInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysBankInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysBankInfo, other.sysBankInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAllSysBankInfo_args(");
      boolean first = true;

      sb.append("sysBankInfo:");
      if (this.sysBankInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysBankInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysBankInfo != null) {
        sysBankInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllSysBankInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryAllSysBankInfo_argsStandardScheme getScheme() {
        return new queryAllSysBankInfo_argsStandardScheme();
      }
    }

    private static class queryAllSysBankInfo_argsStandardScheme extends StandardScheme<queryAllSysBankInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllSysBankInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_BANK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysBankInfo = new SysBankInfo();
                struct.sysBankInfo.read(iprot);
                struct.setSysBankInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllSysBankInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysBankInfo != null) {
          oprot.writeFieldBegin(SYS_BANK_INFO_FIELD_DESC);
          struct.sysBankInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllSysBankInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryAllSysBankInfo_argsTupleScheme getScheme() {
        return new queryAllSysBankInfo_argsTupleScheme();
      }
    }

    private static class queryAllSysBankInfo_argsTupleScheme extends TupleScheme<queryAllSysBankInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllSysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysBankInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysBankInfo()) {
          struct.sysBankInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllSysBankInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysBankInfo = new SysBankInfo();
          struct.sysBankInfo.read(iprot);
          struct.setSysBankInfoIsSet(true);
        }
      }
    }

  }

  public static class queryAllSysBankInfo_result implements org.apache.thrift.TBase<queryAllSysBankInfo_result, queryAllSysBankInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllSysBankInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllSysBankInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAllSysBankInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAllSysBankInfo_resultTupleSchemeFactory());
    }

    public List<SysBankInfoDto> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysBankInfoDto.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllSysBankInfo_result.class, metaDataMap);
    }

    public queryAllSysBankInfo_result() {
    }

    public queryAllSysBankInfo_result(
      List<SysBankInfoDto> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllSysBankInfo_result(queryAllSysBankInfo_result other) {
      if (other.isSetSuccess()) {
        List<SysBankInfoDto> __this__success = new ArrayList<SysBankInfoDto>(other.success.size());
        for (SysBankInfoDto other_element : other.success) {
          __this__success.add(new SysBankInfoDto(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryAllSysBankInfo_result deepCopy() {
      return new queryAllSysBankInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysBankInfoDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysBankInfoDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysBankInfoDto>();
      }
      this.success.add(elem);
    }

    public List<SysBankInfoDto> getSuccess() {
      return this.success;
    }

    public queryAllSysBankInfo_result setSuccess(List<SysBankInfoDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysBankInfoDto>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllSysBankInfo_result)
        return this.equals((queryAllSysBankInfo_result)that);
      return false;
    }

    public boolean equals(queryAllSysBankInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAllSysBankInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAllSysBankInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllSysBankInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryAllSysBankInfo_resultStandardScheme getScheme() {
        return new queryAllSysBankInfo_resultStandardScheme();
      }
    }

    private static class queryAllSysBankInfo_resultStandardScheme extends StandardScheme<queryAllSysBankInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllSysBankInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list766 = iprot.readListBegin();
                  struct.success = new ArrayList<SysBankInfoDto>(_list766.size);
                  SysBankInfoDto _elem767;
                  for (int _i768 = 0; _i768 < _list766.size; ++_i768)
                  {
                    _elem767 = new SysBankInfoDto();
                    _elem767.read(iprot);
                    struct.success.add(_elem767);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllSysBankInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysBankInfoDto _iter769 : struct.success)
            {
              _iter769.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllSysBankInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryAllSysBankInfo_resultTupleScheme getScheme() {
        return new queryAllSysBankInfo_resultTupleScheme();
      }
    }

    private static class queryAllSysBankInfo_resultTupleScheme extends TupleScheme<queryAllSysBankInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllSysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysBankInfoDto _iter770 : struct.success)
            {
              _iter770.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllSysBankInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list771 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysBankInfoDto>(_list771.size);
            SysBankInfoDto _elem772;
            for (int _i773 = 0; _i773 < _list771.size; ++_i773)
            {
              _elem772 = new SysBankInfoDto();
              _elem772.read(iprot);
              struct.success.add(_elem772);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchDelete_args implements org.apache.thrift.TBase<batchDelete_args, batchDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDelete_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDelete_argsTupleSchemeFactory());
    }

    public String ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDelete_args.class, metaDataMap);
    }

    public batchDelete_args() {
    }

    public batchDelete_args(
      String ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDelete_args(batchDelete_args other) {
      if (other.isSetIds()) {
        this.ids = other.ids;
      }
    }

    public batchDelete_args deepCopy() {
      return new batchDelete_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public String getIds() {
      return this.ids;
    }

    public batchDelete_args setIds(String ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDelete_args)
        return this.equals((batchDelete_args)that);
      return false;
    }

    public boolean equals(batchDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDelete_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDelete_argsStandardSchemeFactory implements SchemeFactory {
      public batchDelete_argsStandardScheme getScheme() {
        return new batchDelete_argsStandardScheme();
      }
    }

    private static class batchDelete_argsStandardScheme extends StandardScheme<batchDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ids = iprot.readString();
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          oprot.writeString(struct.ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDelete_argsTupleSchemeFactory implements SchemeFactory {
      public batchDelete_argsTupleScheme getScheme() {
        return new batchDelete_argsTupleScheme();
      }
    }

    private static class batchDelete_argsTupleScheme extends TupleScheme<batchDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          oprot.writeString(struct.ids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ids = iprot.readString();
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class batchDelete_result implements org.apache.thrift.TBase<batchDelete_result, batchDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDelete_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDelete_result.class, metaDataMap);
    }

    public batchDelete_result() {
    }

    public batchDelete_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDelete_result(batchDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public batchDelete_result deepCopy() {
      return new batchDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchDelete_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public batchDelete_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDelete_result)
        return this.equals((batchDelete_result)that);
      return false;
    }

    public boolean equals(batchDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDelete_resultStandardSchemeFactory implements SchemeFactory {
      public batchDelete_resultStandardScheme getScheme() {
        return new batchDelete_resultStandardScheme();
      }
    }

    private static class batchDelete_resultStandardScheme extends StandardScheme<batchDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDelete_resultTupleSchemeFactory implements SchemeFactory {
      public batchDelete_resultTupleScheme getScheme() {
        return new batchDelete_resultTupleScheme();
      }
    }

    private static class batchDelete_resultTupleScheme extends TupleScheme<batchDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

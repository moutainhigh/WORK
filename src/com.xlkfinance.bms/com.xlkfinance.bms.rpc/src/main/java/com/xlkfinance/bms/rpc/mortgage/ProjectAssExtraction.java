/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.mortgage;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-10")
public class ProjectAssExtraction implements org.apache.thrift.TBase<ProjectAssExtraction, ProjectAssExtraction._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectAssExtraction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectAssExtraction");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField APPLY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField APPLY_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applyUserName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APPLY_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("applyRemark", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPLY_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("applyDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HANDLE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleUserId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HANDLE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("handleUserName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HANDLE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDttm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField HANDLE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("handleRemark", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectAssExtractionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectAssExtractionTupleSchemeFactory());
  }

  public int pid; // required
  public int baseId; // required
  public int applyUserId; // required
  public String applyUserName; // required
  public String applyRemark; // required
  public String applyDttm; // required
  public int handleUserId; // required
  public String handleUserName; // required
  public String handleDttm; // required
  public String handleRemark; // required
  public int status; // required
  public int page; // required
  public int rows; // required
  public String itemName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    BASE_ID((short)2, "baseId"),
    APPLY_USER_ID((short)3, "applyUserId"),
    APPLY_USER_NAME((short)4, "applyUserName"),
    APPLY_REMARK((short)5, "applyRemark"),
    APPLY_DTTM((short)6, "applyDttm"),
    HANDLE_USER_ID((short)7, "handleUserId"),
    HANDLE_USER_NAME((short)8, "handleUserName"),
    HANDLE_DTTM((short)9, "handleDttm"),
    HANDLE_REMARK((short)10, "handleRemark"),
    STATUS((short)11, "status"),
    PAGE((short)12, "page"),
    ROWS((short)13, "rows"),
    ITEM_NAME((short)14, "itemName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // BASE_ID
          return BASE_ID;
        case 3: // APPLY_USER_ID
          return APPLY_USER_ID;
        case 4: // APPLY_USER_NAME
          return APPLY_USER_NAME;
        case 5: // APPLY_REMARK
          return APPLY_REMARK;
        case 6: // APPLY_DTTM
          return APPLY_DTTM;
        case 7: // HANDLE_USER_ID
          return HANDLE_USER_ID;
        case 8: // HANDLE_USER_NAME
          return HANDLE_USER_NAME;
        case 9: // HANDLE_DTTM
          return HANDLE_DTTM;
        case 10: // HANDLE_REMARK
          return HANDLE_REMARK;
        case 11: // STATUS
          return STATUS;
        case 12: // PAGE
          return PAGE;
        case 13: // ROWS
          return ROWS;
        case 14: // ITEM_NAME
          return ITEM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __BASEID_ISSET_ID = 1;
  private static final int __APPLYUSERID_ISSET_ID = 2;
  private static final int __HANDLEUSERID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("applyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("applyUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_REMARK, new org.apache.thrift.meta_data.FieldMetaData("applyRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_DTTM, new org.apache.thrift.meta_data.FieldMetaData("applyDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("handleUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("handleUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("handleDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("handleRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectAssExtraction.class, metaDataMap);
  }

  public ProjectAssExtraction() {
  }

  public ProjectAssExtraction(
    int pid,
    int baseId,
    int applyUserId,
    String applyUserName,
    String applyRemark,
    String applyDttm,
    int handleUserId,
    String handleUserName,
    String handleDttm,
    String handleRemark,
    int status,
    int page,
    int rows,
    String itemName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.baseId = baseId;
    setBaseIdIsSet(true);
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
    this.applyUserName = applyUserName;
    this.applyRemark = applyRemark;
    this.applyDttm = applyDttm;
    this.handleUserId = handleUserId;
    setHandleUserIdIsSet(true);
    this.handleUserName = handleUserName;
    this.handleDttm = handleDttm;
    this.handleRemark = handleRemark;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.itemName = itemName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectAssExtraction(ProjectAssExtraction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.baseId = other.baseId;
    this.applyUserId = other.applyUserId;
    if (other.isSetApplyUserName()) {
      this.applyUserName = other.applyUserName;
    }
    if (other.isSetApplyRemark()) {
      this.applyRemark = other.applyRemark;
    }
    if (other.isSetApplyDttm()) {
      this.applyDttm = other.applyDttm;
    }
    this.handleUserId = other.handleUserId;
    if (other.isSetHandleUserName()) {
      this.handleUserName = other.handleUserName;
    }
    if (other.isSetHandleDttm()) {
      this.handleDttm = other.handleDttm;
    }
    if (other.isSetHandleRemark()) {
      this.handleRemark = other.handleRemark;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
  }

  public ProjectAssExtraction deepCopy() {
    return new ProjectAssExtraction(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setBaseIdIsSet(false);
    this.baseId = 0;
    setApplyUserIdIsSet(false);
    this.applyUserId = 0;
    this.applyUserName = null;
    this.applyRemark = null;
    this.applyDttm = null;
    setHandleUserIdIsSet(false);
    this.handleUserId = 0;
    this.handleUserName = null;
    this.handleDttm = null;
    this.handleRemark = null;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.itemName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectAssExtraction setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getBaseId() {
    return this.baseId;
  }

  public ProjectAssExtraction setBaseId(int baseId) {
    this.baseId = baseId;
    setBaseIdIsSet(true);
    return this;
  }

  public void unsetBaseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseId() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  public void setBaseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
  }

  public int getApplyUserId() {
    return this.applyUserId;
  }

  public ProjectAssExtraction setApplyUserId(int applyUserId) {
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
    return this;
  }

  public void unsetApplyUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYUSERID_ISSET_ID);
  }

  /** Returns true if field applyUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYUSERID_ISSET_ID);
  }

  public void setApplyUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYUSERID_ISSET_ID, value);
  }

  public String getApplyUserName() {
    return this.applyUserName;
  }

  public ProjectAssExtraction setApplyUserName(String applyUserName) {
    this.applyUserName = applyUserName;
    return this;
  }

  public void unsetApplyUserName() {
    this.applyUserName = null;
  }

  /** Returns true if field applyUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserName() {
    return this.applyUserName != null;
  }

  public void setApplyUserNameIsSet(boolean value) {
    if (!value) {
      this.applyUserName = null;
    }
  }

  public String getApplyRemark() {
    return this.applyRemark;
  }

  public ProjectAssExtraction setApplyRemark(String applyRemark) {
    this.applyRemark = applyRemark;
    return this;
  }

  public void unsetApplyRemark() {
    this.applyRemark = null;
  }

  /** Returns true if field applyRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyRemark() {
    return this.applyRemark != null;
  }

  public void setApplyRemarkIsSet(boolean value) {
    if (!value) {
      this.applyRemark = null;
    }
  }

  public String getApplyDttm() {
    return this.applyDttm;
  }

  public ProjectAssExtraction setApplyDttm(String applyDttm) {
    this.applyDttm = applyDttm;
    return this;
  }

  public void unsetApplyDttm() {
    this.applyDttm = null;
  }

  /** Returns true if field applyDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyDttm() {
    return this.applyDttm != null;
  }

  public void setApplyDttmIsSet(boolean value) {
    if (!value) {
      this.applyDttm = null;
    }
  }

  public int getHandleUserId() {
    return this.handleUserId;
  }

  public ProjectAssExtraction setHandleUserId(int handleUserId) {
    this.handleUserId = handleUserId;
    setHandleUserIdIsSet(true);
    return this;
  }

  public void unsetHandleUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEUSERID_ISSET_ID);
  }

  /** Returns true if field handleUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEUSERID_ISSET_ID);
  }

  public void setHandleUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEUSERID_ISSET_ID, value);
  }

  public String getHandleUserName() {
    return this.handleUserName;
  }

  public ProjectAssExtraction setHandleUserName(String handleUserName) {
    this.handleUserName = handleUserName;
    return this;
  }

  public void unsetHandleUserName() {
    this.handleUserName = null;
  }

  /** Returns true if field handleUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleUserName() {
    return this.handleUserName != null;
  }

  public void setHandleUserNameIsSet(boolean value) {
    if (!value) {
      this.handleUserName = null;
    }
  }

  public String getHandleDttm() {
    return this.handleDttm;
  }

  public ProjectAssExtraction setHandleDttm(String handleDttm) {
    this.handleDttm = handleDttm;
    return this;
  }

  public void unsetHandleDttm() {
    this.handleDttm = null;
  }

  /** Returns true if field handleDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleDttm() {
    return this.handleDttm != null;
  }

  public void setHandleDttmIsSet(boolean value) {
    if (!value) {
      this.handleDttm = null;
    }
  }

  public String getHandleRemark() {
    return this.handleRemark;
  }

  public ProjectAssExtraction setHandleRemark(String handleRemark) {
    this.handleRemark = handleRemark;
    return this;
  }

  public void unsetHandleRemark() {
    this.handleRemark = null;
  }

  /** Returns true if field handleRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleRemark() {
    return this.handleRemark != null;
  }

  public void setHandleRemarkIsSet(boolean value) {
    if (!value) {
      this.handleRemark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectAssExtraction setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ProjectAssExtraction setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ProjectAssExtraction setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public ProjectAssExtraction setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case BASE_ID:
      if (value == null) {
        unsetBaseId();
      } else {
        setBaseId((Integer)value);
      }
      break;

    case APPLY_USER_ID:
      if (value == null) {
        unsetApplyUserId();
      } else {
        setApplyUserId((Integer)value);
      }
      break;

    case APPLY_USER_NAME:
      if (value == null) {
        unsetApplyUserName();
      } else {
        setApplyUserName((String)value);
      }
      break;

    case APPLY_REMARK:
      if (value == null) {
        unsetApplyRemark();
      } else {
        setApplyRemark((String)value);
      }
      break;

    case APPLY_DTTM:
      if (value == null) {
        unsetApplyDttm();
      } else {
        setApplyDttm((String)value);
      }
      break;

    case HANDLE_USER_ID:
      if (value == null) {
        unsetHandleUserId();
      } else {
        setHandleUserId((Integer)value);
      }
      break;

    case HANDLE_USER_NAME:
      if (value == null) {
        unsetHandleUserName();
      } else {
        setHandleUserName((String)value);
      }
      break;

    case HANDLE_DTTM:
      if (value == null) {
        unsetHandleDttm();
      } else {
        setHandleDttm((String)value);
      }
      break;

    case HANDLE_REMARK:
      if (value == null) {
        unsetHandleRemark();
      } else {
        setHandleRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case BASE_ID:
      return Integer.valueOf(getBaseId());

    case APPLY_USER_ID:
      return Integer.valueOf(getApplyUserId());

    case APPLY_USER_NAME:
      return getApplyUserName();

    case APPLY_REMARK:
      return getApplyRemark();

    case APPLY_DTTM:
      return getApplyDttm();

    case HANDLE_USER_ID:
      return Integer.valueOf(getHandleUserId());

    case HANDLE_USER_NAME:
      return getHandleUserName();

    case HANDLE_DTTM:
      return getHandleDttm();

    case HANDLE_REMARK:
      return getHandleRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case ITEM_NAME:
      return getItemName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case BASE_ID:
      return isSetBaseId();
    case APPLY_USER_ID:
      return isSetApplyUserId();
    case APPLY_USER_NAME:
      return isSetApplyUserName();
    case APPLY_REMARK:
      return isSetApplyRemark();
    case APPLY_DTTM:
      return isSetApplyDttm();
    case HANDLE_USER_ID:
      return isSetHandleUserId();
    case HANDLE_USER_NAME:
      return isSetHandleUserName();
    case HANDLE_DTTM:
      return isSetHandleDttm();
    case HANDLE_REMARK:
      return isSetHandleRemark();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case ITEM_NAME:
      return isSetItemName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectAssExtraction)
      return this.equals((ProjectAssExtraction)that);
    return false;
  }

  public boolean equals(ProjectAssExtraction that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_baseId = true;
    boolean that_present_baseId = true;
    if (this_present_baseId || that_present_baseId) {
      if (!(this_present_baseId && that_present_baseId))
        return false;
      if (this.baseId != that.baseId)
        return false;
    }

    boolean this_present_applyUserId = true;
    boolean that_present_applyUserId = true;
    if (this_present_applyUserId || that_present_applyUserId) {
      if (!(this_present_applyUserId && that_present_applyUserId))
        return false;
      if (this.applyUserId != that.applyUserId)
        return false;
    }

    boolean this_present_applyUserName = true && this.isSetApplyUserName();
    boolean that_present_applyUserName = true && that.isSetApplyUserName();
    if (this_present_applyUserName || that_present_applyUserName) {
      if (!(this_present_applyUserName && that_present_applyUserName))
        return false;
      if (!this.applyUserName.equals(that.applyUserName))
        return false;
    }

    boolean this_present_applyRemark = true && this.isSetApplyRemark();
    boolean that_present_applyRemark = true && that.isSetApplyRemark();
    if (this_present_applyRemark || that_present_applyRemark) {
      if (!(this_present_applyRemark && that_present_applyRemark))
        return false;
      if (!this.applyRemark.equals(that.applyRemark))
        return false;
    }

    boolean this_present_applyDttm = true && this.isSetApplyDttm();
    boolean that_present_applyDttm = true && that.isSetApplyDttm();
    if (this_present_applyDttm || that_present_applyDttm) {
      if (!(this_present_applyDttm && that_present_applyDttm))
        return false;
      if (!this.applyDttm.equals(that.applyDttm))
        return false;
    }

    boolean this_present_handleUserId = true;
    boolean that_present_handleUserId = true;
    if (this_present_handleUserId || that_present_handleUserId) {
      if (!(this_present_handleUserId && that_present_handleUserId))
        return false;
      if (this.handleUserId != that.handleUserId)
        return false;
    }

    boolean this_present_handleUserName = true && this.isSetHandleUserName();
    boolean that_present_handleUserName = true && that.isSetHandleUserName();
    if (this_present_handleUserName || that_present_handleUserName) {
      if (!(this_present_handleUserName && that_present_handleUserName))
        return false;
      if (!this.handleUserName.equals(that.handleUserName))
        return false;
    }

    boolean this_present_handleDttm = true && this.isSetHandleDttm();
    boolean that_present_handleDttm = true && that.isSetHandleDttm();
    if (this_present_handleDttm || that_present_handleDttm) {
      if (!(this_present_handleDttm && that_present_handleDttm))
        return false;
      if (!this.handleDttm.equals(that.handleDttm))
        return false;
    }

    boolean this_present_handleRemark = true && this.isSetHandleRemark();
    boolean that_present_handleRemark = true && that.isSetHandleRemark();
    if (this_present_handleRemark || that_present_handleRemark) {
      if (!(this_present_handleRemark && that_present_handleRemark))
        return false;
      if (!this.handleRemark.equals(that.handleRemark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_baseId = true;
    list.add(present_baseId);
    if (present_baseId)
      list.add(baseId);

    boolean present_applyUserId = true;
    list.add(present_applyUserId);
    if (present_applyUserId)
      list.add(applyUserId);

    boolean present_applyUserName = true && (isSetApplyUserName());
    list.add(present_applyUserName);
    if (present_applyUserName)
      list.add(applyUserName);

    boolean present_applyRemark = true && (isSetApplyRemark());
    list.add(present_applyRemark);
    if (present_applyRemark)
      list.add(applyRemark);

    boolean present_applyDttm = true && (isSetApplyDttm());
    list.add(present_applyDttm);
    if (present_applyDttm)
      list.add(applyDttm);

    boolean present_handleUserId = true;
    list.add(present_handleUserId);
    if (present_handleUserId)
      list.add(handleUserId);

    boolean present_handleUserName = true && (isSetHandleUserName());
    list.add(present_handleUserName);
    if (present_handleUserName)
      list.add(handleUserName);

    boolean present_handleDttm = true && (isSetHandleDttm());
    list.add(present_handleDttm);
    if (present_handleDttm)
      list.add(handleDttm);

    boolean present_handleRemark = true && (isSetHandleRemark());
    list.add(present_handleRemark);
    if (present_handleRemark)
      list.add(handleRemark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectAssExtraction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyUserId()).compareTo(other.isSetApplyUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyUserId, other.applyUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyUserName()).compareTo(other.isSetApplyUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyUserName, other.applyUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyRemark()).compareTo(other.isSetApplyRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyRemark, other.applyRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyDttm()).compareTo(other.isSetApplyDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyDttm, other.applyDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleUserId()).compareTo(other.isSetHandleUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleUserId, other.handleUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleUserName()).compareTo(other.isSetHandleUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleUserName, other.handleUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleDttm()).compareTo(other.isSetHandleDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDttm, other.handleDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleRemark()).compareTo(other.isSetHandleRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleRemark, other.handleRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectAssExtraction(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("baseId:");
    sb.append(this.baseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyUserId:");
    sb.append(this.applyUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyUserName:");
    if (this.applyUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.applyUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyRemark:");
    if (this.applyRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.applyRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyDttm:");
    if (this.applyDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.applyDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleUserId:");
    sb.append(this.handleUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleUserName:");
    if (this.handleUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.handleUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleDttm:");
    if (this.handleDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.handleDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleRemark:");
    if (this.handleRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.handleRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectAssExtractionStandardSchemeFactory implements SchemeFactory {
    public ProjectAssExtractionStandardScheme getScheme() {
      return new ProjectAssExtractionStandardScheme();
    }
  }

  private static class ProjectAssExtractionStandardScheme extends StandardScheme<ProjectAssExtraction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectAssExtraction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.baseId = iprot.readI32();
              struct.setBaseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyUserId = iprot.readI32();
              struct.setApplyUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPLY_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyUserName = iprot.readString();
              struct.setApplyUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPLY_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyRemark = iprot.readString();
              struct.setApplyRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPLY_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyDttm = iprot.readString();
              struct.setApplyDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HANDLE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleUserId = iprot.readI32();
              struct.setHandleUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HANDLE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleUserName = iprot.readString();
              struct.setHandleUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HANDLE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleDttm = iprot.readString();
              struct.setHandleDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HANDLE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleRemark = iprot.readString();
              struct.setHandleRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectAssExtraction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
      oprot.writeI32(struct.baseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.applyUserId);
      oprot.writeFieldEnd();
      if (struct.applyUserName != null) {
        oprot.writeFieldBegin(APPLY_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.applyUserName);
        oprot.writeFieldEnd();
      }
      if (struct.applyRemark != null) {
        oprot.writeFieldBegin(APPLY_REMARK_FIELD_DESC);
        oprot.writeString(struct.applyRemark);
        oprot.writeFieldEnd();
      }
      if (struct.applyDttm != null) {
        oprot.writeFieldBegin(APPLY_DTTM_FIELD_DESC);
        oprot.writeString(struct.applyDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HANDLE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.handleUserId);
      oprot.writeFieldEnd();
      if (struct.handleUserName != null) {
        oprot.writeFieldBegin(HANDLE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.handleUserName);
        oprot.writeFieldEnd();
      }
      if (struct.handleDttm != null) {
        oprot.writeFieldBegin(HANDLE_DTTM_FIELD_DESC);
        oprot.writeString(struct.handleDttm);
        oprot.writeFieldEnd();
      }
      if (struct.handleRemark != null) {
        oprot.writeFieldBegin(HANDLE_REMARK_FIELD_DESC);
        oprot.writeString(struct.handleRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectAssExtractionTupleSchemeFactory implements SchemeFactory {
    public ProjectAssExtractionTupleScheme getScheme() {
      return new ProjectAssExtractionTupleScheme();
    }
  }

  private static class ProjectAssExtractionTupleScheme extends TupleScheme<ProjectAssExtraction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectAssExtraction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetBaseId()) {
        optionals.set(1);
      }
      if (struct.isSetApplyUserId()) {
        optionals.set(2);
      }
      if (struct.isSetApplyUserName()) {
        optionals.set(3);
      }
      if (struct.isSetApplyRemark()) {
        optionals.set(4);
      }
      if (struct.isSetApplyDttm()) {
        optionals.set(5);
      }
      if (struct.isSetHandleUserId()) {
        optionals.set(6);
      }
      if (struct.isSetHandleUserName()) {
        optionals.set(7);
      }
      if (struct.isSetHandleDttm()) {
        optionals.set(8);
      }
      if (struct.isSetHandleRemark()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetPage()) {
        optionals.set(11);
      }
      if (struct.isSetRows()) {
        optionals.set(12);
      }
      if (struct.isSetItemName()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetBaseId()) {
        oprot.writeI32(struct.baseId);
      }
      if (struct.isSetApplyUserId()) {
        oprot.writeI32(struct.applyUserId);
      }
      if (struct.isSetApplyUserName()) {
        oprot.writeString(struct.applyUserName);
      }
      if (struct.isSetApplyRemark()) {
        oprot.writeString(struct.applyRemark);
      }
      if (struct.isSetApplyDttm()) {
        oprot.writeString(struct.applyDttm);
      }
      if (struct.isSetHandleUserId()) {
        oprot.writeI32(struct.handleUserId);
      }
      if (struct.isSetHandleUserName()) {
        oprot.writeString(struct.handleUserName);
      }
      if (struct.isSetHandleDttm()) {
        oprot.writeString(struct.handleDttm);
      }
      if (struct.isSetHandleRemark()) {
        oprot.writeString(struct.handleRemark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectAssExtraction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.baseId = iprot.readI32();
        struct.setBaseIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.applyUserId = iprot.readI32();
        struct.setApplyUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.applyUserName = iprot.readString();
        struct.setApplyUserNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.applyRemark = iprot.readString();
        struct.setApplyRemarkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.applyDttm = iprot.readString();
        struct.setApplyDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.handleUserId = iprot.readI32();
        struct.setHandleUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.handleUserName = iprot.readString();
        struct.setHandleUserNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.handleDttm = iprot.readString();
        struct.setHandleDttmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.handleRemark = iprot.readString();
        struct.setHandleRemarkIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
    }
  }

}


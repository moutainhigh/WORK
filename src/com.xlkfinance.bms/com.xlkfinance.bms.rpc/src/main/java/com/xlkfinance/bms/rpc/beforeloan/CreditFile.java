/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class CreditFile implements org.apache.thrift.TBase<CreditFile, CreditFile._Fields>, java.io.Serializable, Cloneable, Comparable<CreditFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditFile");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creditId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSource", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_SOURCE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSourceText", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("fileProperty", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDesc", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreditFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreditFileTupleSchemeFactory());
  }

  public int pid; // required
  public int creditId; // required
  public int fileId; // required
  public int fileSource; // required
  public String fileSourceText; // required
  public String fileProperty; // required
  public String fileDesc; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CREDIT_ID((short)2, "creditId"),
    FILE_ID((short)3, "fileId"),
    FILE_SOURCE((short)4, "fileSource"),
    FILE_SOURCE_TEXT((short)5, "fileSourceText"),
    FILE_PROPERTY((short)6, "fileProperty"),
    FILE_DESC((short)7, "fileDesc"),
    STATUS((short)8, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CREDIT_ID
          return CREDIT_ID;
        case 3: // FILE_ID
          return FILE_ID;
        case 4: // FILE_SOURCE
          return FILE_SOURCE;
        case 5: // FILE_SOURCE_TEXT
          return FILE_SOURCE_TEXT;
        case 6: // FILE_PROPERTY
          return FILE_PROPERTY;
        case 7: // FILE_DESC
          return FILE_DESC;
        case 8: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREDITID_ISSET_ID = 1;
  private static final int __FILEID_ISSET_ID = 2;
  private static final int __FILESOURCE_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("creditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("fileSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_SOURCE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("fileSourceText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("fileProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("fileDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditFile.class, metaDataMap);
  }

  public CreditFile() {
  }

  public CreditFile(
    int pid,
    int creditId,
    int fileId,
    int fileSource,
    String fileSourceText,
    String fileProperty,
    String fileDesc,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.creditId = creditId;
    setCreditIdIsSet(true);
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.fileSource = fileSource;
    setFileSourceIsSet(true);
    this.fileSourceText = fileSourceText;
    this.fileProperty = fileProperty;
    this.fileDesc = fileDesc;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditFile(CreditFile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.creditId = other.creditId;
    this.fileId = other.fileId;
    this.fileSource = other.fileSource;
    if (other.isSetFileSourceText()) {
      this.fileSourceText = other.fileSourceText;
    }
    if (other.isSetFileProperty()) {
      this.fileProperty = other.fileProperty;
    }
    if (other.isSetFileDesc()) {
      this.fileDesc = other.fileDesc;
    }
    this.status = other.status;
  }

  public CreditFile deepCopy() {
    return new CreditFile(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setCreditIdIsSet(false);
    this.creditId = 0;
    setFileIdIsSet(false);
    this.fileId = 0;
    setFileSourceIsSet(false);
    this.fileSource = 0;
    this.fileSourceText = null;
    this.fileProperty = null;
    this.fileDesc = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CreditFile setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCreditId() {
    return this.creditId;
  }

  public CreditFile setCreditId(int creditId) {
    this.creditId = creditId;
    setCreditIdIsSet(true);
    return this;
  }

  public void unsetCreditId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITID_ISSET_ID);
  }

  /** Returns true if field creditId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITID_ISSET_ID);
  }

  public void setCreditIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITID_ISSET_ID, value);
  }

  public int getFileId() {
    return this.fileId;
  }

  public CreditFile setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public int getFileSource() {
    return this.fileSource;
  }

  public CreditFile setFileSource(int fileSource) {
    this.fileSource = fileSource;
    setFileSourceIsSet(true);
    return this;
  }

  public void unsetFileSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESOURCE_ISSET_ID);
  }

  /** Returns true if field fileSource is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSource() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESOURCE_ISSET_ID);
  }

  public void setFileSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESOURCE_ISSET_ID, value);
  }

  public String getFileSourceText() {
    return this.fileSourceText;
  }

  public CreditFile setFileSourceText(String fileSourceText) {
    this.fileSourceText = fileSourceText;
    return this;
  }

  public void unsetFileSourceText() {
    this.fileSourceText = null;
  }

  /** Returns true if field fileSourceText is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSourceText() {
    return this.fileSourceText != null;
  }

  public void setFileSourceTextIsSet(boolean value) {
    if (!value) {
      this.fileSourceText = null;
    }
  }

  public String getFileProperty() {
    return this.fileProperty;
  }

  public CreditFile setFileProperty(String fileProperty) {
    this.fileProperty = fileProperty;
    return this;
  }

  public void unsetFileProperty() {
    this.fileProperty = null;
  }

  /** Returns true if field fileProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetFileProperty() {
    return this.fileProperty != null;
  }

  public void setFilePropertyIsSet(boolean value) {
    if (!value) {
      this.fileProperty = null;
    }
  }

  public String getFileDesc() {
    return this.fileDesc;
  }

  public CreditFile setFileDesc(String fileDesc) {
    this.fileDesc = fileDesc;
    return this;
  }

  public void unsetFileDesc() {
    this.fileDesc = null;
  }

  /** Returns true if field fileDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFileDesc() {
    return this.fileDesc != null;
  }

  public void setFileDescIsSet(boolean value) {
    if (!value) {
      this.fileDesc = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CreditFile setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CREDIT_ID:
      if (value == null) {
        unsetCreditId();
      } else {
        setCreditId((Integer)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case FILE_SOURCE:
      if (value == null) {
        unsetFileSource();
      } else {
        setFileSource((Integer)value);
      }
      break;

    case FILE_SOURCE_TEXT:
      if (value == null) {
        unsetFileSourceText();
      } else {
        setFileSourceText((String)value);
      }
      break;

    case FILE_PROPERTY:
      if (value == null) {
        unsetFileProperty();
      } else {
        setFileProperty((String)value);
      }
      break;

    case FILE_DESC:
      if (value == null) {
        unsetFileDesc();
      } else {
        setFileDesc((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CREDIT_ID:
      return Integer.valueOf(getCreditId());

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case FILE_SOURCE:
      return Integer.valueOf(getFileSource());

    case FILE_SOURCE_TEXT:
      return getFileSourceText();

    case FILE_PROPERTY:
      return getFileProperty();

    case FILE_DESC:
      return getFileDesc();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CREDIT_ID:
      return isSetCreditId();
    case FILE_ID:
      return isSetFileId();
    case FILE_SOURCE:
      return isSetFileSource();
    case FILE_SOURCE_TEXT:
      return isSetFileSourceText();
    case FILE_PROPERTY:
      return isSetFileProperty();
    case FILE_DESC:
      return isSetFileDesc();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditFile)
      return this.equals((CreditFile)that);
    return false;
  }

  public boolean equals(CreditFile that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_creditId = true;
    boolean that_present_creditId = true;
    if (this_present_creditId || that_present_creditId) {
      if (!(this_present_creditId && that_present_creditId))
        return false;
      if (this.creditId != that.creditId)
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_fileSource = true;
    boolean that_present_fileSource = true;
    if (this_present_fileSource || that_present_fileSource) {
      if (!(this_present_fileSource && that_present_fileSource))
        return false;
      if (this.fileSource != that.fileSource)
        return false;
    }

    boolean this_present_fileSourceText = true && this.isSetFileSourceText();
    boolean that_present_fileSourceText = true && that.isSetFileSourceText();
    if (this_present_fileSourceText || that_present_fileSourceText) {
      if (!(this_present_fileSourceText && that_present_fileSourceText))
        return false;
      if (!this.fileSourceText.equals(that.fileSourceText))
        return false;
    }

    boolean this_present_fileProperty = true && this.isSetFileProperty();
    boolean that_present_fileProperty = true && that.isSetFileProperty();
    if (this_present_fileProperty || that_present_fileProperty) {
      if (!(this_present_fileProperty && that_present_fileProperty))
        return false;
      if (!this.fileProperty.equals(that.fileProperty))
        return false;
    }

    boolean this_present_fileDesc = true && this.isSetFileDesc();
    boolean that_present_fileDesc = true && that.isSetFileDesc();
    if (this_present_fileDesc || that_present_fileDesc) {
      if (!(this_present_fileDesc && that_present_fileDesc))
        return false;
      if (!this.fileDesc.equals(that.fileDesc))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_creditId = true;
    list.add(present_creditId);
    if (present_creditId)
      list.add(creditId);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_fileSource = true;
    list.add(present_fileSource);
    if (present_fileSource)
      list.add(fileSource);

    boolean present_fileSourceText = true && (isSetFileSourceText());
    list.add(present_fileSourceText);
    if (present_fileSourceText)
      list.add(fileSourceText);

    boolean present_fileProperty = true && (isSetFileProperty());
    list.add(present_fileProperty);
    if (present_fileProperty)
      list.add(fileProperty);

    boolean present_fileDesc = true && (isSetFileDesc());
    list.add(present_fileDesc);
    if (present_fileDesc)
      list.add(fileDesc);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreditFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditId()).compareTo(other.isSetCreditId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditId, other.creditId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSource()).compareTo(other.isSetFileSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSource, other.fileSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSourceText()).compareTo(other.isSetFileSourceText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSourceText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSourceText, other.fileSourceText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileProperty()).compareTo(other.isSetFileProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileProperty, other.fileProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileDesc()).compareTo(other.isSetFileDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDesc, other.fileDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreditFile(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditId:");
    sb.append(this.creditId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSource:");
    sb.append(this.fileSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSourceText:");
    if (this.fileSourceText == null) {
      sb.append("null");
    } else {
      sb.append(this.fileSourceText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileProperty:");
    if (this.fileProperty == null) {
      sb.append("null");
    } else {
      sb.append(this.fileProperty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileDesc:");
    if (this.fileDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.fileDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditFileStandardSchemeFactory implements SchemeFactory {
    public CreditFileStandardScheme getScheme() {
      return new CreditFileStandardScheme();
    }
  }

  private static class CreditFileStandardScheme extends StandardScheme<CreditFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREDIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditId = iprot.readI32();
              struct.setCreditIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSource = iprot.readI32();
              struct.setFileSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_SOURCE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileSourceText = iprot.readString();
              struct.setFileSourceTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileProperty = iprot.readString();
              struct.setFilePropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileDesc = iprot.readString();
              struct.setFileDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_ID_FIELD_DESC);
      oprot.writeI32(struct.creditId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.fileSource);
      oprot.writeFieldEnd();
      if (struct.fileSourceText != null) {
        oprot.writeFieldBegin(FILE_SOURCE_TEXT_FIELD_DESC);
        oprot.writeString(struct.fileSourceText);
        oprot.writeFieldEnd();
      }
      if (struct.fileProperty != null) {
        oprot.writeFieldBegin(FILE_PROPERTY_FIELD_DESC);
        oprot.writeString(struct.fileProperty);
        oprot.writeFieldEnd();
      }
      if (struct.fileDesc != null) {
        oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
        oprot.writeString(struct.fileDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditFileTupleSchemeFactory implements SchemeFactory {
    public CreditFileTupleScheme getScheme() {
      return new CreditFileTupleScheme();
    }
  }

  private static class CreditFileTupleScheme extends TupleScheme<CreditFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCreditId()) {
        optionals.set(1);
      }
      if (struct.isSetFileId()) {
        optionals.set(2);
      }
      if (struct.isSetFileSource()) {
        optionals.set(3);
      }
      if (struct.isSetFileSourceText()) {
        optionals.set(4);
      }
      if (struct.isSetFileProperty()) {
        optionals.set(5);
      }
      if (struct.isSetFileDesc()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCreditId()) {
        oprot.writeI32(struct.creditId);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetFileSource()) {
        oprot.writeI32(struct.fileSource);
      }
      if (struct.isSetFileSourceText()) {
        oprot.writeString(struct.fileSourceText);
      }
      if (struct.isSetFileProperty()) {
        oprot.writeString(struct.fileProperty);
      }
      if (struct.isSetFileDesc()) {
        oprot.writeString(struct.fileDesc);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.creditId = iprot.readI32();
        struct.setCreditIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileSource = iprot.readI32();
        struct.setFileSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileSourceText = iprot.readString();
        struct.setFileSourceTextIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileProperty = iprot.readString();
        struct.setFilePropertyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fileDesc = iprot.readString();
        struct.setFileDescIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-14")
public class ProjectPartnerRefund implements org.apache.thrift.TBase<ProjectPartnerRefund, ProjectPartnerRefund._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectPartnerRefund> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectPartnerRefund");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PARTNER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CURR_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currNo", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CURR_PLAN_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currPlanRefundDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CURR_SHOULD_CAPITAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("currShouldCapitalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CURR_SHOULD_XI_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("currShouldXiFee", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CURR_SHOULD_MANAGE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("currShouldManageFee", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CURR_SHOULD_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("currShouldOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CURR_SHOULD_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("currShouldTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CURR_REAL_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currRealRefundDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CURR_REAL_CAPITAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("currRealCapitalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CURR_REAL_XI_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("currRealXiFee", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField CURR_REAL_MANAGE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("currRealManageFee", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField CURR_REAL_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("currRealOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CURR_REAL_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("currRealTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField CURR_OVERDUE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("currOverdueStatus", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CURR_OVERDUE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("currOverdueDays", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField OWE_CAPITAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oweCapitalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField CURR_CAPITAL_MONEY_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("currCapitalMoneyFile", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField CURR_XI_FEE_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("currXiFeeFile", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField IS_SETTLEMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("isSettlementStatus", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField IS_FORBIT_FIELD_DESC = new org.apache.thrift.protocol.TField("isForbit", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField REFUND_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundStatus", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField PARTNER_REAL_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRealRefundDate", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PARTNER_REFUND_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRefundFile", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PARTNER_INTERESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerInterests", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField REFUND_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("refundRemark", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)33);
  private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.LIST, (short)34);
  private static final org.apache.thrift.protocol.TField CURR_OVERDUE_STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("currOverdueStatusList", org.apache.thrift.protocol.TType.LIST, (short)35);
  private static final org.apache.thrift.protocol.TField REFUND_STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("refundStatusList", org.apache.thrift.protocol.TType.LIST, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectPartnerRefundStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectPartnerRefundTupleSchemeFactory());
  }

  public int pid; // required
  public int partnerId; // required
  public int projectId; // required
  public String partnerNo; // required
  public String loanId; // required
  public int currNo; // required
  public String currPlanRefundDate; // required
  public double currShouldCapitalMoney; // required
  public double currShouldXiFee; // required
  public double currShouldManageFee; // required
  public double currShouldOtherFee; // required
  public double currShouldTotalMoney; // required
  public String currRealRefundDate; // required
  public double currRealCapitalMoney; // required
  public double currRealXiFee; // required
  public double currRealManageFee; // required
  public double currRealOtherFee; // required
  public double currRealTotalMoney; // required
  public int currOverdueStatus; // required
  public int currOverdueDays; // required
  public double oweCapitalMoney; // required
  public double currCapitalMoneyFile; // required
  public double currXiFeeFile; // required
  public int isSettlementStatus; // required
  public int isForbit; // required
  public int refundStatus; // required
  public String partnerRealRefundDate; // required
  public String partnerRefundFile; // required
  public String partnerInterests; // required
  public String refundRemark; // required
  public String createTime; // required
  public String updateTime; // required
  public List<Integer> userIds; // required
  public List<Integer> pids; // required
  public List<Integer> currOverdueStatusList; // required
  public List<Integer> refundStatusList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PARTNER_ID((short)2, "partnerId"),
    PROJECT_ID((short)3, "projectId"),
    PARTNER_NO((short)4, "partnerNo"),
    LOAN_ID((short)5, "loanId"),
    CURR_NO((short)6, "currNo"),
    CURR_PLAN_REFUND_DATE((short)7, "currPlanRefundDate"),
    CURR_SHOULD_CAPITAL_MONEY((short)8, "currShouldCapitalMoney"),
    CURR_SHOULD_XI_FEE((short)9, "currShouldXiFee"),
    CURR_SHOULD_MANAGE_FEE((short)10, "currShouldManageFee"),
    CURR_SHOULD_OTHER_FEE((short)11, "currShouldOtherFee"),
    CURR_SHOULD_TOTAL_MONEY((short)12, "currShouldTotalMoney"),
    CURR_REAL_REFUND_DATE((short)13, "currRealRefundDate"),
    CURR_REAL_CAPITAL_MONEY((short)14, "currRealCapitalMoney"),
    CURR_REAL_XI_FEE((short)15, "currRealXiFee"),
    CURR_REAL_MANAGE_FEE((short)16, "currRealManageFee"),
    CURR_REAL_OTHER_FEE((short)17, "currRealOtherFee"),
    CURR_REAL_TOTAL_MONEY((short)18, "currRealTotalMoney"),
    CURR_OVERDUE_STATUS((short)19, "currOverdueStatus"),
    CURR_OVERDUE_DAYS((short)20, "currOverdueDays"),
    OWE_CAPITAL_MONEY((short)21, "oweCapitalMoney"),
    CURR_CAPITAL_MONEY_FILE((short)22, "currCapitalMoneyFile"),
    CURR_XI_FEE_FILE((short)23, "currXiFeeFile"),
    IS_SETTLEMENT_STATUS((short)24, "isSettlementStatus"),
    IS_FORBIT((short)25, "isForbit"),
    REFUND_STATUS((short)26, "refundStatus"),
    PARTNER_REAL_REFUND_DATE((short)27, "partnerRealRefundDate"),
    PARTNER_REFUND_FILE((short)28, "partnerRefundFile"),
    PARTNER_INTERESTS((short)29, "partnerInterests"),
    REFUND_REMARK((short)30, "refundRemark"),
    CREATE_TIME((short)31, "createTime"),
    UPDATE_TIME((short)32, "updateTime"),
    USER_IDS((short)33, "userIds"),
    PIDS((short)34, "pids"),
    CURR_OVERDUE_STATUS_LIST((short)35, "currOverdueStatusList"),
    REFUND_STATUS_LIST((short)36, "refundStatusList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PARTNER_ID
          return PARTNER_ID;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // PARTNER_NO
          return PARTNER_NO;
        case 5: // LOAN_ID
          return LOAN_ID;
        case 6: // CURR_NO
          return CURR_NO;
        case 7: // CURR_PLAN_REFUND_DATE
          return CURR_PLAN_REFUND_DATE;
        case 8: // CURR_SHOULD_CAPITAL_MONEY
          return CURR_SHOULD_CAPITAL_MONEY;
        case 9: // CURR_SHOULD_XI_FEE
          return CURR_SHOULD_XI_FEE;
        case 10: // CURR_SHOULD_MANAGE_FEE
          return CURR_SHOULD_MANAGE_FEE;
        case 11: // CURR_SHOULD_OTHER_FEE
          return CURR_SHOULD_OTHER_FEE;
        case 12: // CURR_SHOULD_TOTAL_MONEY
          return CURR_SHOULD_TOTAL_MONEY;
        case 13: // CURR_REAL_REFUND_DATE
          return CURR_REAL_REFUND_DATE;
        case 14: // CURR_REAL_CAPITAL_MONEY
          return CURR_REAL_CAPITAL_MONEY;
        case 15: // CURR_REAL_XI_FEE
          return CURR_REAL_XI_FEE;
        case 16: // CURR_REAL_MANAGE_FEE
          return CURR_REAL_MANAGE_FEE;
        case 17: // CURR_REAL_OTHER_FEE
          return CURR_REAL_OTHER_FEE;
        case 18: // CURR_REAL_TOTAL_MONEY
          return CURR_REAL_TOTAL_MONEY;
        case 19: // CURR_OVERDUE_STATUS
          return CURR_OVERDUE_STATUS;
        case 20: // CURR_OVERDUE_DAYS
          return CURR_OVERDUE_DAYS;
        case 21: // OWE_CAPITAL_MONEY
          return OWE_CAPITAL_MONEY;
        case 22: // CURR_CAPITAL_MONEY_FILE
          return CURR_CAPITAL_MONEY_FILE;
        case 23: // CURR_XI_FEE_FILE
          return CURR_XI_FEE_FILE;
        case 24: // IS_SETTLEMENT_STATUS
          return IS_SETTLEMENT_STATUS;
        case 25: // IS_FORBIT
          return IS_FORBIT;
        case 26: // REFUND_STATUS
          return REFUND_STATUS;
        case 27: // PARTNER_REAL_REFUND_DATE
          return PARTNER_REAL_REFUND_DATE;
        case 28: // PARTNER_REFUND_FILE
          return PARTNER_REFUND_FILE;
        case 29: // PARTNER_INTERESTS
          return PARTNER_INTERESTS;
        case 30: // REFUND_REMARK
          return REFUND_REMARK;
        case 31: // CREATE_TIME
          return CREATE_TIME;
        case 32: // UPDATE_TIME
          return UPDATE_TIME;
        case 33: // USER_IDS
          return USER_IDS;
        case 34: // PIDS
          return PIDS;
        case 35: // CURR_OVERDUE_STATUS_LIST
          return CURR_OVERDUE_STATUS_LIST;
        case 36: // REFUND_STATUS_LIST
          return REFUND_STATUS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PARTNERID_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private static final int __CURRNO_ISSET_ID = 3;
  private static final int __CURRSHOULDCAPITALMONEY_ISSET_ID = 4;
  private static final int __CURRSHOULDXIFEE_ISSET_ID = 5;
  private static final int __CURRSHOULDMANAGEFEE_ISSET_ID = 6;
  private static final int __CURRSHOULDOTHERFEE_ISSET_ID = 7;
  private static final int __CURRSHOULDTOTALMONEY_ISSET_ID = 8;
  private static final int __CURRREALCAPITALMONEY_ISSET_ID = 9;
  private static final int __CURRREALXIFEE_ISSET_ID = 10;
  private static final int __CURRREALMANAGEFEE_ISSET_ID = 11;
  private static final int __CURRREALOTHERFEE_ISSET_ID = 12;
  private static final int __CURRREALTOTALMONEY_ISSET_ID = 13;
  private static final int __CURROVERDUESTATUS_ISSET_ID = 14;
  private static final int __CURROVERDUEDAYS_ISSET_ID = 15;
  private static final int __OWECAPITALMONEY_ISSET_ID = 16;
  private static final int __CURRCAPITALMONEYFILE_ISSET_ID = 17;
  private static final int __CURRXIFEEFILE_ISSET_ID = 18;
  private static final int __ISSETTLEMENTSTATUS_ISSET_ID = 19;
  private static final int __ISFORBIT_ISSET_ID = 20;
  private static final int __REFUNDSTATUS_ISSET_ID = 21;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_NO, new org.apache.thrift.meta_data.FieldMetaData("partnerNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURR_NO, new org.apache.thrift.meta_data.FieldMetaData("currNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURR_PLAN_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("currPlanRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURR_SHOULD_CAPITAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("currShouldCapitalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_SHOULD_XI_FEE, new org.apache.thrift.meta_data.FieldMetaData("currShouldXiFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_SHOULD_MANAGE_FEE, new org.apache.thrift.meta_data.FieldMetaData("currShouldManageFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_SHOULD_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("currShouldOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_SHOULD_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("currShouldTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_REAL_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("currRealRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURR_REAL_CAPITAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("currRealCapitalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_REAL_XI_FEE, new org.apache.thrift.meta_data.FieldMetaData("currRealXiFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_REAL_MANAGE_FEE, new org.apache.thrift.meta_data.FieldMetaData("currRealManageFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_REAL_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("currRealOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_REAL_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("currRealTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_OVERDUE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("currOverdueStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURR_OVERDUE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("currOverdueDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OWE_CAPITAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oweCapitalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_CAPITAL_MONEY_FILE, new org.apache.thrift.meta_data.FieldMetaData("currCapitalMoneyFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_XI_FEE_FILE, new org.apache.thrift.meta_data.FieldMetaData("currXiFeeFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_SETTLEMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("isSettlementStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FORBIT, new org.apache.thrift.meta_data.FieldMetaData("isForbit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_STATUS, new org.apache.thrift.meta_data.FieldMetaData("refundStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_REAL_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("partnerRealRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_REFUND_FILE, new org.apache.thrift.meta_data.FieldMetaData("partnerRefundFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_INTERESTS, new org.apache.thrift.meta_data.FieldMetaData("partnerInterests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_REMARK, new org.apache.thrift.meta_data.FieldMetaData("refundRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CURR_OVERDUE_STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("currOverdueStatusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REFUND_STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("refundStatusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectPartnerRefund.class, metaDataMap);
  }

  public ProjectPartnerRefund() {
  }

  public ProjectPartnerRefund(
    int pid,
    int partnerId,
    int projectId,
    String partnerNo,
    String loanId,
    int currNo,
    String currPlanRefundDate,
    double currShouldCapitalMoney,
    double currShouldXiFee,
    double currShouldManageFee,
    double currShouldOtherFee,
    double currShouldTotalMoney,
    String currRealRefundDate,
    double currRealCapitalMoney,
    double currRealXiFee,
    double currRealManageFee,
    double currRealOtherFee,
    double currRealTotalMoney,
    int currOverdueStatus,
    int currOverdueDays,
    double oweCapitalMoney,
    double currCapitalMoneyFile,
    double currXiFeeFile,
    int isSettlementStatus,
    int isForbit,
    int refundStatus,
    String partnerRealRefundDate,
    String partnerRefundFile,
    String partnerInterests,
    String refundRemark,
    String createTime,
    String updateTime,
    List<Integer> userIds,
    List<Integer> pids,
    List<Integer> currOverdueStatusList,
    List<Integer> refundStatusList)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.partnerNo = partnerNo;
    this.loanId = loanId;
    this.currNo = currNo;
    setCurrNoIsSet(true);
    this.currPlanRefundDate = currPlanRefundDate;
    this.currShouldCapitalMoney = currShouldCapitalMoney;
    setCurrShouldCapitalMoneyIsSet(true);
    this.currShouldXiFee = currShouldXiFee;
    setCurrShouldXiFeeIsSet(true);
    this.currShouldManageFee = currShouldManageFee;
    setCurrShouldManageFeeIsSet(true);
    this.currShouldOtherFee = currShouldOtherFee;
    setCurrShouldOtherFeeIsSet(true);
    this.currShouldTotalMoney = currShouldTotalMoney;
    setCurrShouldTotalMoneyIsSet(true);
    this.currRealRefundDate = currRealRefundDate;
    this.currRealCapitalMoney = currRealCapitalMoney;
    setCurrRealCapitalMoneyIsSet(true);
    this.currRealXiFee = currRealXiFee;
    setCurrRealXiFeeIsSet(true);
    this.currRealManageFee = currRealManageFee;
    setCurrRealManageFeeIsSet(true);
    this.currRealOtherFee = currRealOtherFee;
    setCurrRealOtherFeeIsSet(true);
    this.currRealTotalMoney = currRealTotalMoney;
    setCurrRealTotalMoneyIsSet(true);
    this.currOverdueStatus = currOverdueStatus;
    setCurrOverdueStatusIsSet(true);
    this.currOverdueDays = currOverdueDays;
    setCurrOverdueDaysIsSet(true);
    this.oweCapitalMoney = oweCapitalMoney;
    setOweCapitalMoneyIsSet(true);
    this.currCapitalMoneyFile = currCapitalMoneyFile;
    setCurrCapitalMoneyFileIsSet(true);
    this.currXiFeeFile = currXiFeeFile;
    setCurrXiFeeFileIsSet(true);
    this.isSettlementStatus = isSettlementStatus;
    setIsSettlementStatusIsSet(true);
    this.isForbit = isForbit;
    setIsForbitIsSet(true);
    this.refundStatus = refundStatus;
    setRefundStatusIsSet(true);
    this.partnerRealRefundDate = partnerRealRefundDate;
    this.partnerRefundFile = partnerRefundFile;
    this.partnerInterests = partnerInterests;
    this.refundRemark = refundRemark;
    this.createTime = createTime;
    this.updateTime = updateTime;
    this.userIds = userIds;
    this.pids = pids;
    this.currOverdueStatusList = currOverdueStatusList;
    this.refundStatusList = refundStatusList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectPartnerRefund(ProjectPartnerRefund other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.partnerId = other.partnerId;
    this.projectId = other.projectId;
    if (other.isSetPartnerNo()) {
      this.partnerNo = other.partnerNo;
    }
    if (other.isSetLoanId()) {
      this.loanId = other.loanId;
    }
    this.currNo = other.currNo;
    if (other.isSetCurrPlanRefundDate()) {
      this.currPlanRefundDate = other.currPlanRefundDate;
    }
    this.currShouldCapitalMoney = other.currShouldCapitalMoney;
    this.currShouldXiFee = other.currShouldXiFee;
    this.currShouldManageFee = other.currShouldManageFee;
    this.currShouldOtherFee = other.currShouldOtherFee;
    this.currShouldTotalMoney = other.currShouldTotalMoney;
    if (other.isSetCurrRealRefundDate()) {
      this.currRealRefundDate = other.currRealRefundDate;
    }
    this.currRealCapitalMoney = other.currRealCapitalMoney;
    this.currRealXiFee = other.currRealXiFee;
    this.currRealManageFee = other.currRealManageFee;
    this.currRealOtherFee = other.currRealOtherFee;
    this.currRealTotalMoney = other.currRealTotalMoney;
    this.currOverdueStatus = other.currOverdueStatus;
    this.currOverdueDays = other.currOverdueDays;
    this.oweCapitalMoney = other.oweCapitalMoney;
    this.currCapitalMoneyFile = other.currCapitalMoneyFile;
    this.currXiFeeFile = other.currXiFeeFile;
    this.isSettlementStatus = other.isSettlementStatus;
    this.isForbit = other.isForbit;
    this.refundStatus = other.refundStatus;
    if (other.isSetPartnerRealRefundDate()) {
      this.partnerRealRefundDate = other.partnerRealRefundDate;
    }
    if (other.isSetPartnerRefundFile()) {
      this.partnerRefundFile = other.partnerRefundFile;
    }
    if (other.isSetPartnerInterests()) {
      this.partnerInterests = other.partnerInterests;
    }
    if (other.isSetRefundRemark()) {
      this.refundRemark = other.refundRemark;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetPids()) {
      List<Integer> __this__pids = new ArrayList<Integer>(other.pids);
      this.pids = __this__pids;
    }
    if (other.isSetCurrOverdueStatusList()) {
      List<Integer> __this__currOverdueStatusList = new ArrayList<Integer>(other.currOverdueStatusList);
      this.currOverdueStatusList = __this__currOverdueStatusList;
    }
    if (other.isSetRefundStatusList()) {
      List<Integer> __this__refundStatusList = new ArrayList<Integer>(other.refundStatusList);
      this.refundStatusList = __this__refundStatusList;
    }
  }

  public ProjectPartnerRefund deepCopy() {
    return new ProjectPartnerRefund(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setPartnerIdIsSet(false);
    this.partnerId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.partnerNo = null;
    this.loanId = null;
    setCurrNoIsSet(false);
    this.currNo = 0;
    this.currPlanRefundDate = null;
    setCurrShouldCapitalMoneyIsSet(false);
    this.currShouldCapitalMoney = 0.0;
    setCurrShouldXiFeeIsSet(false);
    this.currShouldXiFee = 0.0;
    setCurrShouldManageFeeIsSet(false);
    this.currShouldManageFee = 0.0;
    setCurrShouldOtherFeeIsSet(false);
    this.currShouldOtherFee = 0.0;
    setCurrShouldTotalMoneyIsSet(false);
    this.currShouldTotalMoney = 0.0;
    this.currRealRefundDate = null;
    setCurrRealCapitalMoneyIsSet(false);
    this.currRealCapitalMoney = 0.0;
    setCurrRealXiFeeIsSet(false);
    this.currRealXiFee = 0.0;
    setCurrRealManageFeeIsSet(false);
    this.currRealManageFee = 0.0;
    setCurrRealOtherFeeIsSet(false);
    this.currRealOtherFee = 0.0;
    setCurrRealTotalMoneyIsSet(false);
    this.currRealTotalMoney = 0.0;
    setCurrOverdueStatusIsSet(false);
    this.currOverdueStatus = 0;
    setCurrOverdueDaysIsSet(false);
    this.currOverdueDays = 0;
    setOweCapitalMoneyIsSet(false);
    this.oweCapitalMoney = 0.0;
    setCurrCapitalMoneyFileIsSet(false);
    this.currCapitalMoneyFile = 0.0;
    setCurrXiFeeFileIsSet(false);
    this.currXiFeeFile = 0.0;
    setIsSettlementStatusIsSet(false);
    this.isSettlementStatus = 0;
    setIsForbitIsSet(false);
    this.isForbit = 0;
    setRefundStatusIsSet(false);
    this.refundStatus = 0;
    this.partnerRealRefundDate = null;
    this.partnerRefundFile = null;
    this.partnerInterests = null;
    this.refundRemark = null;
    this.createTime = null;
    this.updateTime = null;
    this.userIds = null;
    this.pids = null;
    this.currOverdueStatusList = null;
    this.refundStatusList = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectPartnerRefund setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getPartnerId() {
    return this.partnerId;
  }

  public ProjectPartnerRefund setPartnerId(int partnerId) {
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
    return this;
  }

  public void unsetPartnerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERID_ISSET_ID);
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERID_ISSET_ID);
  }

  public void setPartnerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectPartnerRefund setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getPartnerNo() {
    return this.partnerNo;
  }

  public ProjectPartnerRefund setPartnerNo(String partnerNo) {
    this.partnerNo = partnerNo;
    return this;
  }

  public void unsetPartnerNo() {
    this.partnerNo = null;
  }

  /** Returns true if field partnerNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerNo() {
    return this.partnerNo != null;
  }

  public void setPartnerNoIsSet(boolean value) {
    if (!value) {
      this.partnerNo = null;
    }
  }

  public String getLoanId() {
    return this.loanId;
  }

  public ProjectPartnerRefund setLoanId(String loanId) {
    this.loanId = loanId;
    return this;
  }

  public void unsetLoanId() {
    this.loanId = null;
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return this.loanId != null;
  }

  public void setLoanIdIsSet(boolean value) {
    if (!value) {
      this.loanId = null;
    }
  }

  public int getCurrNo() {
    return this.currNo;
  }

  public ProjectPartnerRefund setCurrNo(int currNo) {
    this.currNo = currNo;
    setCurrNoIsSet(true);
    return this;
  }

  public void unsetCurrNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRNO_ISSET_ID);
  }

  /** Returns true if field currNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrNo() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRNO_ISSET_ID);
  }

  public void setCurrNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRNO_ISSET_ID, value);
  }

  public String getCurrPlanRefundDate() {
    return this.currPlanRefundDate;
  }

  public ProjectPartnerRefund setCurrPlanRefundDate(String currPlanRefundDate) {
    this.currPlanRefundDate = currPlanRefundDate;
    return this;
  }

  public void unsetCurrPlanRefundDate() {
    this.currPlanRefundDate = null;
  }

  /** Returns true if field currPlanRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrPlanRefundDate() {
    return this.currPlanRefundDate != null;
  }

  public void setCurrPlanRefundDateIsSet(boolean value) {
    if (!value) {
      this.currPlanRefundDate = null;
    }
  }

  public double getCurrShouldCapitalMoney() {
    return this.currShouldCapitalMoney;
  }

  public ProjectPartnerRefund setCurrShouldCapitalMoney(double currShouldCapitalMoney) {
    this.currShouldCapitalMoney = currShouldCapitalMoney;
    setCurrShouldCapitalMoneyIsSet(true);
    return this;
  }

  public void unsetCurrShouldCapitalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRSHOULDCAPITALMONEY_ISSET_ID);
  }

  /** Returns true if field currShouldCapitalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrShouldCapitalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRSHOULDCAPITALMONEY_ISSET_ID);
  }

  public void setCurrShouldCapitalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRSHOULDCAPITALMONEY_ISSET_ID, value);
  }

  public double getCurrShouldXiFee() {
    return this.currShouldXiFee;
  }

  public ProjectPartnerRefund setCurrShouldXiFee(double currShouldXiFee) {
    this.currShouldXiFee = currShouldXiFee;
    setCurrShouldXiFeeIsSet(true);
    return this;
  }

  public void unsetCurrShouldXiFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRSHOULDXIFEE_ISSET_ID);
  }

  /** Returns true if field currShouldXiFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrShouldXiFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRSHOULDXIFEE_ISSET_ID);
  }

  public void setCurrShouldXiFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRSHOULDXIFEE_ISSET_ID, value);
  }

  public double getCurrShouldManageFee() {
    return this.currShouldManageFee;
  }

  public ProjectPartnerRefund setCurrShouldManageFee(double currShouldManageFee) {
    this.currShouldManageFee = currShouldManageFee;
    setCurrShouldManageFeeIsSet(true);
    return this;
  }

  public void unsetCurrShouldManageFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRSHOULDMANAGEFEE_ISSET_ID);
  }

  /** Returns true if field currShouldManageFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrShouldManageFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRSHOULDMANAGEFEE_ISSET_ID);
  }

  public void setCurrShouldManageFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRSHOULDMANAGEFEE_ISSET_ID, value);
  }

  public double getCurrShouldOtherFee() {
    return this.currShouldOtherFee;
  }

  public ProjectPartnerRefund setCurrShouldOtherFee(double currShouldOtherFee) {
    this.currShouldOtherFee = currShouldOtherFee;
    setCurrShouldOtherFeeIsSet(true);
    return this;
  }

  public void unsetCurrShouldOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRSHOULDOTHERFEE_ISSET_ID);
  }

  /** Returns true if field currShouldOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrShouldOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRSHOULDOTHERFEE_ISSET_ID);
  }

  public void setCurrShouldOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRSHOULDOTHERFEE_ISSET_ID, value);
  }

  public double getCurrShouldTotalMoney() {
    return this.currShouldTotalMoney;
  }

  public ProjectPartnerRefund setCurrShouldTotalMoney(double currShouldTotalMoney) {
    this.currShouldTotalMoney = currShouldTotalMoney;
    setCurrShouldTotalMoneyIsSet(true);
    return this;
  }

  public void unsetCurrShouldTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRSHOULDTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field currShouldTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrShouldTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRSHOULDTOTALMONEY_ISSET_ID);
  }

  public void setCurrShouldTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRSHOULDTOTALMONEY_ISSET_ID, value);
  }

  public String getCurrRealRefundDate() {
    return this.currRealRefundDate;
  }

  public ProjectPartnerRefund setCurrRealRefundDate(String currRealRefundDate) {
    this.currRealRefundDate = currRealRefundDate;
    return this;
  }

  public void unsetCurrRealRefundDate() {
    this.currRealRefundDate = null;
  }

  /** Returns true if field currRealRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrRealRefundDate() {
    return this.currRealRefundDate != null;
  }

  public void setCurrRealRefundDateIsSet(boolean value) {
    if (!value) {
      this.currRealRefundDate = null;
    }
  }

  public double getCurrRealCapitalMoney() {
    return this.currRealCapitalMoney;
  }

  public ProjectPartnerRefund setCurrRealCapitalMoney(double currRealCapitalMoney) {
    this.currRealCapitalMoney = currRealCapitalMoney;
    setCurrRealCapitalMoneyIsSet(true);
    return this;
  }

  public void unsetCurrRealCapitalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRREALCAPITALMONEY_ISSET_ID);
  }

  /** Returns true if field currRealCapitalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrRealCapitalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRREALCAPITALMONEY_ISSET_ID);
  }

  public void setCurrRealCapitalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRREALCAPITALMONEY_ISSET_ID, value);
  }

  public double getCurrRealXiFee() {
    return this.currRealXiFee;
  }

  public ProjectPartnerRefund setCurrRealXiFee(double currRealXiFee) {
    this.currRealXiFee = currRealXiFee;
    setCurrRealXiFeeIsSet(true);
    return this;
  }

  public void unsetCurrRealXiFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRREALXIFEE_ISSET_ID);
  }

  /** Returns true if field currRealXiFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrRealXiFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRREALXIFEE_ISSET_ID);
  }

  public void setCurrRealXiFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRREALXIFEE_ISSET_ID, value);
  }

  public double getCurrRealManageFee() {
    return this.currRealManageFee;
  }

  public ProjectPartnerRefund setCurrRealManageFee(double currRealManageFee) {
    this.currRealManageFee = currRealManageFee;
    setCurrRealManageFeeIsSet(true);
    return this;
  }

  public void unsetCurrRealManageFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRREALMANAGEFEE_ISSET_ID);
  }

  /** Returns true if field currRealManageFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrRealManageFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRREALMANAGEFEE_ISSET_ID);
  }

  public void setCurrRealManageFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRREALMANAGEFEE_ISSET_ID, value);
  }

  public double getCurrRealOtherFee() {
    return this.currRealOtherFee;
  }

  public ProjectPartnerRefund setCurrRealOtherFee(double currRealOtherFee) {
    this.currRealOtherFee = currRealOtherFee;
    setCurrRealOtherFeeIsSet(true);
    return this;
  }

  public void unsetCurrRealOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRREALOTHERFEE_ISSET_ID);
  }

  /** Returns true if field currRealOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrRealOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRREALOTHERFEE_ISSET_ID);
  }

  public void setCurrRealOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRREALOTHERFEE_ISSET_ID, value);
  }

  public double getCurrRealTotalMoney() {
    return this.currRealTotalMoney;
  }

  public ProjectPartnerRefund setCurrRealTotalMoney(double currRealTotalMoney) {
    this.currRealTotalMoney = currRealTotalMoney;
    setCurrRealTotalMoneyIsSet(true);
    return this;
  }

  public void unsetCurrRealTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRREALTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field currRealTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrRealTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRREALTOTALMONEY_ISSET_ID);
  }

  public void setCurrRealTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRREALTOTALMONEY_ISSET_ID, value);
  }

  public int getCurrOverdueStatus() {
    return this.currOverdueStatus;
  }

  public ProjectPartnerRefund setCurrOverdueStatus(int currOverdueStatus) {
    this.currOverdueStatus = currOverdueStatus;
    setCurrOverdueStatusIsSet(true);
    return this;
  }

  public void unsetCurrOverdueStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURROVERDUESTATUS_ISSET_ID);
  }

  /** Returns true if field currOverdueStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrOverdueStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CURROVERDUESTATUS_ISSET_ID);
  }

  public void setCurrOverdueStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURROVERDUESTATUS_ISSET_ID, value);
  }

  public int getCurrOverdueDays() {
    return this.currOverdueDays;
  }

  public ProjectPartnerRefund setCurrOverdueDays(int currOverdueDays) {
    this.currOverdueDays = currOverdueDays;
    setCurrOverdueDaysIsSet(true);
    return this;
  }

  public void unsetCurrOverdueDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURROVERDUEDAYS_ISSET_ID);
  }

  /** Returns true if field currOverdueDays is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrOverdueDays() {
    return EncodingUtils.testBit(__isset_bitfield, __CURROVERDUEDAYS_ISSET_ID);
  }

  public void setCurrOverdueDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURROVERDUEDAYS_ISSET_ID, value);
  }

  public double getOweCapitalMoney() {
    return this.oweCapitalMoney;
  }

  public ProjectPartnerRefund setOweCapitalMoney(double oweCapitalMoney) {
    this.oweCapitalMoney = oweCapitalMoney;
    setOweCapitalMoneyIsSet(true);
    return this;
  }

  public void unsetOweCapitalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWECAPITALMONEY_ISSET_ID);
  }

  /** Returns true if field oweCapitalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOweCapitalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OWECAPITALMONEY_ISSET_ID);
  }

  public void setOweCapitalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWECAPITALMONEY_ISSET_ID, value);
  }

  public double getCurrCapitalMoneyFile() {
    return this.currCapitalMoneyFile;
  }

  public ProjectPartnerRefund setCurrCapitalMoneyFile(double currCapitalMoneyFile) {
    this.currCapitalMoneyFile = currCapitalMoneyFile;
    setCurrCapitalMoneyFileIsSet(true);
    return this;
  }

  public void unsetCurrCapitalMoneyFile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRCAPITALMONEYFILE_ISSET_ID);
  }

  /** Returns true if field currCapitalMoneyFile is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrCapitalMoneyFile() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRCAPITALMONEYFILE_ISSET_ID);
  }

  public void setCurrCapitalMoneyFileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRCAPITALMONEYFILE_ISSET_ID, value);
  }

  public double getCurrXiFeeFile() {
    return this.currXiFeeFile;
  }

  public ProjectPartnerRefund setCurrXiFeeFile(double currXiFeeFile) {
    this.currXiFeeFile = currXiFeeFile;
    setCurrXiFeeFileIsSet(true);
    return this;
  }

  public void unsetCurrXiFeeFile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRXIFEEFILE_ISSET_ID);
  }

  /** Returns true if field currXiFeeFile is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrXiFeeFile() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRXIFEEFILE_ISSET_ID);
  }

  public void setCurrXiFeeFileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRXIFEEFILE_ISSET_ID, value);
  }

  public int getIsSettlementStatus() {
    return this.isSettlementStatus;
  }

  public ProjectPartnerRefund setIsSettlementStatus(int isSettlementStatus) {
    this.isSettlementStatus = isSettlementStatus;
    setIsSettlementStatusIsSet(true);
    return this;
  }

  public void unsetIsSettlementStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSETTLEMENTSTATUS_ISSET_ID);
  }

  /** Returns true if field isSettlementStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSettlementStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSETTLEMENTSTATUS_ISSET_ID);
  }

  public void setIsSettlementStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSETTLEMENTSTATUS_ISSET_ID, value);
  }

  public int getIsForbit() {
    return this.isForbit;
  }

  public ProjectPartnerRefund setIsForbit(int isForbit) {
    this.isForbit = isForbit;
    setIsForbitIsSet(true);
    return this;
  }

  public void unsetIsForbit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFORBIT_ISSET_ID);
  }

  /** Returns true if field isForbit is set (has been assigned a value) and false otherwise */
  public boolean isSetIsForbit() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFORBIT_ISSET_ID);
  }

  public void setIsForbitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFORBIT_ISSET_ID, value);
  }

  public int getRefundStatus() {
    return this.refundStatus;
  }

  public ProjectPartnerRefund setRefundStatus(int refundStatus) {
    this.refundStatus = refundStatus;
    setRefundStatusIsSet(true);
    return this;
  }

  public void unsetRefundStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDSTATUS_ISSET_ID);
  }

  /** Returns true if field refundStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDSTATUS_ISSET_ID);
  }

  public void setRefundStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDSTATUS_ISSET_ID, value);
  }

  public String getPartnerRealRefundDate() {
    return this.partnerRealRefundDate;
  }

  public ProjectPartnerRefund setPartnerRealRefundDate(String partnerRealRefundDate) {
    this.partnerRealRefundDate = partnerRealRefundDate;
    return this;
  }

  public void unsetPartnerRealRefundDate() {
    this.partnerRealRefundDate = null;
  }

  /** Returns true if field partnerRealRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerRealRefundDate() {
    return this.partnerRealRefundDate != null;
  }

  public void setPartnerRealRefundDateIsSet(boolean value) {
    if (!value) {
      this.partnerRealRefundDate = null;
    }
  }

  public String getPartnerRefundFile() {
    return this.partnerRefundFile;
  }

  public ProjectPartnerRefund setPartnerRefundFile(String partnerRefundFile) {
    this.partnerRefundFile = partnerRefundFile;
    return this;
  }

  public void unsetPartnerRefundFile() {
    this.partnerRefundFile = null;
  }

  /** Returns true if field partnerRefundFile is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerRefundFile() {
    return this.partnerRefundFile != null;
  }

  public void setPartnerRefundFileIsSet(boolean value) {
    if (!value) {
      this.partnerRefundFile = null;
    }
  }

  public String getPartnerInterests() {
    return this.partnerInterests;
  }

  public ProjectPartnerRefund setPartnerInterests(String partnerInterests) {
    this.partnerInterests = partnerInterests;
    return this;
  }

  public void unsetPartnerInterests() {
    this.partnerInterests = null;
  }

  /** Returns true if field partnerInterests is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerInterests() {
    return this.partnerInterests != null;
  }

  public void setPartnerInterestsIsSet(boolean value) {
    if (!value) {
      this.partnerInterests = null;
    }
  }

  public String getRefundRemark() {
    return this.refundRemark;
  }

  public ProjectPartnerRefund setRefundRemark(String refundRemark) {
    this.refundRemark = refundRemark;
    return this;
  }

  public void unsetRefundRemark() {
    this.refundRemark = null;
  }

  /** Returns true if field refundRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundRemark() {
    return this.refundRemark != null;
  }

  public void setRefundRemarkIsSet(boolean value) {
    if (!value) {
      this.refundRemark = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProjectPartnerRefund setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProjectPartnerRefund setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ProjectPartnerRefund setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPidsSize() {
    return (this.pids == null) ? 0 : this.pids.size();
  }

  public java.util.Iterator<Integer> getPidsIterator() {
    return (this.pids == null) ? null : this.pids.iterator();
  }

  public void addToPids(int elem) {
    if (this.pids == null) {
      this.pids = new ArrayList<Integer>();
    }
    this.pids.add(elem);
  }

  public List<Integer> getPids() {
    return this.pids;
  }

  public ProjectPartnerRefund setPids(List<Integer> pids) {
    this.pids = pids;
    return this;
  }

  public void unsetPids() {
    this.pids = null;
  }

  /** Returns true if field pids is set (has been assigned a value) and false otherwise */
  public boolean isSetPids() {
    return this.pids != null;
  }

  public void setPidsIsSet(boolean value) {
    if (!value) {
      this.pids = null;
    }
  }

  public int getCurrOverdueStatusListSize() {
    return (this.currOverdueStatusList == null) ? 0 : this.currOverdueStatusList.size();
  }

  public java.util.Iterator<Integer> getCurrOverdueStatusListIterator() {
    return (this.currOverdueStatusList == null) ? null : this.currOverdueStatusList.iterator();
  }

  public void addToCurrOverdueStatusList(int elem) {
    if (this.currOverdueStatusList == null) {
      this.currOverdueStatusList = new ArrayList<Integer>();
    }
    this.currOverdueStatusList.add(elem);
  }

  public List<Integer> getCurrOverdueStatusList() {
    return this.currOverdueStatusList;
  }

  public ProjectPartnerRefund setCurrOverdueStatusList(List<Integer> currOverdueStatusList) {
    this.currOverdueStatusList = currOverdueStatusList;
    return this;
  }

  public void unsetCurrOverdueStatusList() {
    this.currOverdueStatusList = null;
  }

  /** Returns true if field currOverdueStatusList is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrOverdueStatusList() {
    return this.currOverdueStatusList != null;
  }

  public void setCurrOverdueStatusListIsSet(boolean value) {
    if (!value) {
      this.currOverdueStatusList = null;
    }
  }

  public int getRefundStatusListSize() {
    return (this.refundStatusList == null) ? 0 : this.refundStatusList.size();
  }

  public java.util.Iterator<Integer> getRefundStatusListIterator() {
    return (this.refundStatusList == null) ? null : this.refundStatusList.iterator();
  }

  public void addToRefundStatusList(int elem) {
    if (this.refundStatusList == null) {
      this.refundStatusList = new ArrayList<Integer>();
    }
    this.refundStatusList.add(elem);
  }

  public List<Integer> getRefundStatusList() {
    return this.refundStatusList;
  }

  public ProjectPartnerRefund setRefundStatusList(List<Integer> refundStatusList) {
    this.refundStatusList = refundStatusList;
    return this;
  }

  public void unsetRefundStatusList() {
    this.refundStatusList = null;
  }

  /** Returns true if field refundStatusList is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundStatusList() {
    return this.refundStatusList != null;
  }

  public void setRefundStatusListIsSet(boolean value) {
    if (!value) {
      this.refundStatusList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PARTNER_NO:
      if (value == null) {
        unsetPartnerNo();
      } else {
        setPartnerNo((String)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((String)value);
      }
      break;

    case CURR_NO:
      if (value == null) {
        unsetCurrNo();
      } else {
        setCurrNo((Integer)value);
      }
      break;

    case CURR_PLAN_REFUND_DATE:
      if (value == null) {
        unsetCurrPlanRefundDate();
      } else {
        setCurrPlanRefundDate((String)value);
      }
      break;

    case CURR_SHOULD_CAPITAL_MONEY:
      if (value == null) {
        unsetCurrShouldCapitalMoney();
      } else {
        setCurrShouldCapitalMoney((Double)value);
      }
      break;

    case CURR_SHOULD_XI_FEE:
      if (value == null) {
        unsetCurrShouldXiFee();
      } else {
        setCurrShouldXiFee((Double)value);
      }
      break;

    case CURR_SHOULD_MANAGE_FEE:
      if (value == null) {
        unsetCurrShouldManageFee();
      } else {
        setCurrShouldManageFee((Double)value);
      }
      break;

    case CURR_SHOULD_OTHER_FEE:
      if (value == null) {
        unsetCurrShouldOtherFee();
      } else {
        setCurrShouldOtherFee((Double)value);
      }
      break;

    case CURR_SHOULD_TOTAL_MONEY:
      if (value == null) {
        unsetCurrShouldTotalMoney();
      } else {
        setCurrShouldTotalMoney((Double)value);
      }
      break;

    case CURR_REAL_REFUND_DATE:
      if (value == null) {
        unsetCurrRealRefundDate();
      } else {
        setCurrRealRefundDate((String)value);
      }
      break;

    case CURR_REAL_CAPITAL_MONEY:
      if (value == null) {
        unsetCurrRealCapitalMoney();
      } else {
        setCurrRealCapitalMoney((Double)value);
      }
      break;

    case CURR_REAL_XI_FEE:
      if (value == null) {
        unsetCurrRealXiFee();
      } else {
        setCurrRealXiFee((Double)value);
      }
      break;

    case CURR_REAL_MANAGE_FEE:
      if (value == null) {
        unsetCurrRealManageFee();
      } else {
        setCurrRealManageFee((Double)value);
      }
      break;

    case CURR_REAL_OTHER_FEE:
      if (value == null) {
        unsetCurrRealOtherFee();
      } else {
        setCurrRealOtherFee((Double)value);
      }
      break;

    case CURR_REAL_TOTAL_MONEY:
      if (value == null) {
        unsetCurrRealTotalMoney();
      } else {
        setCurrRealTotalMoney((Double)value);
      }
      break;

    case CURR_OVERDUE_STATUS:
      if (value == null) {
        unsetCurrOverdueStatus();
      } else {
        setCurrOverdueStatus((Integer)value);
      }
      break;

    case CURR_OVERDUE_DAYS:
      if (value == null) {
        unsetCurrOverdueDays();
      } else {
        setCurrOverdueDays((Integer)value);
      }
      break;

    case OWE_CAPITAL_MONEY:
      if (value == null) {
        unsetOweCapitalMoney();
      } else {
        setOweCapitalMoney((Double)value);
      }
      break;

    case CURR_CAPITAL_MONEY_FILE:
      if (value == null) {
        unsetCurrCapitalMoneyFile();
      } else {
        setCurrCapitalMoneyFile((Double)value);
      }
      break;

    case CURR_XI_FEE_FILE:
      if (value == null) {
        unsetCurrXiFeeFile();
      } else {
        setCurrXiFeeFile((Double)value);
      }
      break;

    case IS_SETTLEMENT_STATUS:
      if (value == null) {
        unsetIsSettlementStatus();
      } else {
        setIsSettlementStatus((Integer)value);
      }
      break;

    case IS_FORBIT:
      if (value == null) {
        unsetIsForbit();
      } else {
        setIsForbit((Integer)value);
      }
      break;

    case REFUND_STATUS:
      if (value == null) {
        unsetRefundStatus();
      } else {
        setRefundStatus((Integer)value);
      }
      break;

    case PARTNER_REAL_REFUND_DATE:
      if (value == null) {
        unsetPartnerRealRefundDate();
      } else {
        setPartnerRealRefundDate((String)value);
      }
      break;

    case PARTNER_REFUND_FILE:
      if (value == null) {
        unsetPartnerRefundFile();
      } else {
        setPartnerRefundFile((String)value);
      }
      break;

    case PARTNER_INTERESTS:
      if (value == null) {
        unsetPartnerInterests();
      } else {
        setPartnerInterests((String)value);
      }
      break;

    case REFUND_REMARK:
      if (value == null) {
        unsetRefundRemark();
      } else {
        setRefundRemark((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PIDS:
      if (value == null) {
        unsetPids();
      } else {
        setPids((List<Integer>)value);
      }
      break;

    case CURR_OVERDUE_STATUS_LIST:
      if (value == null) {
        unsetCurrOverdueStatusList();
      } else {
        setCurrOverdueStatusList((List<Integer>)value);
      }
      break;

    case REFUND_STATUS_LIST:
      if (value == null) {
        unsetRefundStatusList();
      } else {
        setRefundStatusList((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PARTNER_ID:
      return Integer.valueOf(getPartnerId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PARTNER_NO:
      return getPartnerNo();

    case LOAN_ID:
      return getLoanId();

    case CURR_NO:
      return Integer.valueOf(getCurrNo());

    case CURR_PLAN_REFUND_DATE:
      return getCurrPlanRefundDate();

    case CURR_SHOULD_CAPITAL_MONEY:
      return Double.valueOf(getCurrShouldCapitalMoney());

    case CURR_SHOULD_XI_FEE:
      return Double.valueOf(getCurrShouldXiFee());

    case CURR_SHOULD_MANAGE_FEE:
      return Double.valueOf(getCurrShouldManageFee());

    case CURR_SHOULD_OTHER_FEE:
      return Double.valueOf(getCurrShouldOtherFee());

    case CURR_SHOULD_TOTAL_MONEY:
      return Double.valueOf(getCurrShouldTotalMoney());

    case CURR_REAL_REFUND_DATE:
      return getCurrRealRefundDate();

    case CURR_REAL_CAPITAL_MONEY:
      return Double.valueOf(getCurrRealCapitalMoney());

    case CURR_REAL_XI_FEE:
      return Double.valueOf(getCurrRealXiFee());

    case CURR_REAL_MANAGE_FEE:
      return Double.valueOf(getCurrRealManageFee());

    case CURR_REAL_OTHER_FEE:
      return Double.valueOf(getCurrRealOtherFee());

    case CURR_REAL_TOTAL_MONEY:
      return Double.valueOf(getCurrRealTotalMoney());

    case CURR_OVERDUE_STATUS:
      return Integer.valueOf(getCurrOverdueStatus());

    case CURR_OVERDUE_DAYS:
      return Integer.valueOf(getCurrOverdueDays());

    case OWE_CAPITAL_MONEY:
      return Double.valueOf(getOweCapitalMoney());

    case CURR_CAPITAL_MONEY_FILE:
      return Double.valueOf(getCurrCapitalMoneyFile());

    case CURR_XI_FEE_FILE:
      return Double.valueOf(getCurrXiFeeFile());

    case IS_SETTLEMENT_STATUS:
      return Integer.valueOf(getIsSettlementStatus());

    case IS_FORBIT:
      return Integer.valueOf(getIsForbit());

    case REFUND_STATUS:
      return Integer.valueOf(getRefundStatus());

    case PARTNER_REAL_REFUND_DATE:
      return getPartnerRealRefundDate();

    case PARTNER_REFUND_FILE:
      return getPartnerRefundFile();

    case PARTNER_INTERESTS:
      return getPartnerInterests();

    case REFUND_REMARK:
      return getRefundRemark();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case USER_IDS:
      return getUserIds();

    case PIDS:
      return getPids();

    case CURR_OVERDUE_STATUS_LIST:
      return getCurrOverdueStatusList();

    case REFUND_STATUS_LIST:
      return getRefundStatusList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PARTNER_ID:
      return isSetPartnerId();
    case PROJECT_ID:
      return isSetProjectId();
    case PARTNER_NO:
      return isSetPartnerNo();
    case LOAN_ID:
      return isSetLoanId();
    case CURR_NO:
      return isSetCurrNo();
    case CURR_PLAN_REFUND_DATE:
      return isSetCurrPlanRefundDate();
    case CURR_SHOULD_CAPITAL_MONEY:
      return isSetCurrShouldCapitalMoney();
    case CURR_SHOULD_XI_FEE:
      return isSetCurrShouldXiFee();
    case CURR_SHOULD_MANAGE_FEE:
      return isSetCurrShouldManageFee();
    case CURR_SHOULD_OTHER_FEE:
      return isSetCurrShouldOtherFee();
    case CURR_SHOULD_TOTAL_MONEY:
      return isSetCurrShouldTotalMoney();
    case CURR_REAL_REFUND_DATE:
      return isSetCurrRealRefundDate();
    case CURR_REAL_CAPITAL_MONEY:
      return isSetCurrRealCapitalMoney();
    case CURR_REAL_XI_FEE:
      return isSetCurrRealXiFee();
    case CURR_REAL_MANAGE_FEE:
      return isSetCurrRealManageFee();
    case CURR_REAL_OTHER_FEE:
      return isSetCurrRealOtherFee();
    case CURR_REAL_TOTAL_MONEY:
      return isSetCurrRealTotalMoney();
    case CURR_OVERDUE_STATUS:
      return isSetCurrOverdueStatus();
    case CURR_OVERDUE_DAYS:
      return isSetCurrOverdueDays();
    case OWE_CAPITAL_MONEY:
      return isSetOweCapitalMoney();
    case CURR_CAPITAL_MONEY_FILE:
      return isSetCurrCapitalMoneyFile();
    case CURR_XI_FEE_FILE:
      return isSetCurrXiFeeFile();
    case IS_SETTLEMENT_STATUS:
      return isSetIsSettlementStatus();
    case IS_FORBIT:
      return isSetIsForbit();
    case REFUND_STATUS:
      return isSetRefundStatus();
    case PARTNER_REAL_REFUND_DATE:
      return isSetPartnerRealRefundDate();
    case PARTNER_REFUND_FILE:
      return isSetPartnerRefundFile();
    case PARTNER_INTERESTS:
      return isSetPartnerInterests();
    case REFUND_REMARK:
      return isSetRefundRemark();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case USER_IDS:
      return isSetUserIds();
    case PIDS:
      return isSetPids();
    case CURR_OVERDUE_STATUS_LIST:
      return isSetCurrOverdueStatusList();
    case REFUND_STATUS_LIST:
      return isSetRefundStatusList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectPartnerRefund)
      return this.equals((ProjectPartnerRefund)that);
    return false;
  }

  public boolean equals(ProjectPartnerRefund that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_partnerId = true;
    boolean that_present_partnerId = true;
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (this.partnerId != that.partnerId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_partnerNo = true && this.isSetPartnerNo();
    boolean that_present_partnerNo = true && that.isSetPartnerNo();
    if (this_present_partnerNo || that_present_partnerNo) {
      if (!(this_present_partnerNo && that_present_partnerNo))
        return false;
      if (!this.partnerNo.equals(that.partnerNo))
        return false;
    }

    boolean this_present_loanId = true && this.isSetLoanId();
    boolean that_present_loanId = true && that.isSetLoanId();
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (!this.loanId.equals(that.loanId))
        return false;
    }

    boolean this_present_currNo = true;
    boolean that_present_currNo = true;
    if (this_present_currNo || that_present_currNo) {
      if (!(this_present_currNo && that_present_currNo))
        return false;
      if (this.currNo != that.currNo)
        return false;
    }

    boolean this_present_currPlanRefundDate = true && this.isSetCurrPlanRefundDate();
    boolean that_present_currPlanRefundDate = true && that.isSetCurrPlanRefundDate();
    if (this_present_currPlanRefundDate || that_present_currPlanRefundDate) {
      if (!(this_present_currPlanRefundDate && that_present_currPlanRefundDate))
        return false;
      if (!this.currPlanRefundDate.equals(that.currPlanRefundDate))
        return false;
    }

    boolean this_present_currShouldCapitalMoney = true;
    boolean that_present_currShouldCapitalMoney = true;
    if (this_present_currShouldCapitalMoney || that_present_currShouldCapitalMoney) {
      if (!(this_present_currShouldCapitalMoney && that_present_currShouldCapitalMoney))
        return false;
      if (this.currShouldCapitalMoney != that.currShouldCapitalMoney)
        return false;
    }

    boolean this_present_currShouldXiFee = true;
    boolean that_present_currShouldXiFee = true;
    if (this_present_currShouldXiFee || that_present_currShouldXiFee) {
      if (!(this_present_currShouldXiFee && that_present_currShouldXiFee))
        return false;
      if (this.currShouldXiFee != that.currShouldXiFee)
        return false;
    }

    boolean this_present_currShouldManageFee = true;
    boolean that_present_currShouldManageFee = true;
    if (this_present_currShouldManageFee || that_present_currShouldManageFee) {
      if (!(this_present_currShouldManageFee && that_present_currShouldManageFee))
        return false;
      if (this.currShouldManageFee != that.currShouldManageFee)
        return false;
    }

    boolean this_present_currShouldOtherFee = true;
    boolean that_present_currShouldOtherFee = true;
    if (this_present_currShouldOtherFee || that_present_currShouldOtherFee) {
      if (!(this_present_currShouldOtherFee && that_present_currShouldOtherFee))
        return false;
      if (this.currShouldOtherFee != that.currShouldOtherFee)
        return false;
    }

    boolean this_present_currShouldTotalMoney = true;
    boolean that_present_currShouldTotalMoney = true;
    if (this_present_currShouldTotalMoney || that_present_currShouldTotalMoney) {
      if (!(this_present_currShouldTotalMoney && that_present_currShouldTotalMoney))
        return false;
      if (this.currShouldTotalMoney != that.currShouldTotalMoney)
        return false;
    }

    boolean this_present_currRealRefundDate = true && this.isSetCurrRealRefundDate();
    boolean that_present_currRealRefundDate = true && that.isSetCurrRealRefundDate();
    if (this_present_currRealRefundDate || that_present_currRealRefundDate) {
      if (!(this_present_currRealRefundDate && that_present_currRealRefundDate))
        return false;
      if (!this.currRealRefundDate.equals(that.currRealRefundDate))
        return false;
    }

    boolean this_present_currRealCapitalMoney = true;
    boolean that_present_currRealCapitalMoney = true;
    if (this_present_currRealCapitalMoney || that_present_currRealCapitalMoney) {
      if (!(this_present_currRealCapitalMoney && that_present_currRealCapitalMoney))
        return false;
      if (this.currRealCapitalMoney != that.currRealCapitalMoney)
        return false;
    }

    boolean this_present_currRealXiFee = true;
    boolean that_present_currRealXiFee = true;
    if (this_present_currRealXiFee || that_present_currRealXiFee) {
      if (!(this_present_currRealXiFee && that_present_currRealXiFee))
        return false;
      if (this.currRealXiFee != that.currRealXiFee)
        return false;
    }

    boolean this_present_currRealManageFee = true;
    boolean that_present_currRealManageFee = true;
    if (this_present_currRealManageFee || that_present_currRealManageFee) {
      if (!(this_present_currRealManageFee && that_present_currRealManageFee))
        return false;
      if (this.currRealManageFee != that.currRealManageFee)
        return false;
    }

    boolean this_present_currRealOtherFee = true;
    boolean that_present_currRealOtherFee = true;
    if (this_present_currRealOtherFee || that_present_currRealOtherFee) {
      if (!(this_present_currRealOtherFee && that_present_currRealOtherFee))
        return false;
      if (this.currRealOtherFee != that.currRealOtherFee)
        return false;
    }

    boolean this_present_currRealTotalMoney = true;
    boolean that_present_currRealTotalMoney = true;
    if (this_present_currRealTotalMoney || that_present_currRealTotalMoney) {
      if (!(this_present_currRealTotalMoney && that_present_currRealTotalMoney))
        return false;
      if (this.currRealTotalMoney != that.currRealTotalMoney)
        return false;
    }

    boolean this_present_currOverdueStatus = true;
    boolean that_present_currOverdueStatus = true;
    if (this_present_currOverdueStatus || that_present_currOverdueStatus) {
      if (!(this_present_currOverdueStatus && that_present_currOverdueStatus))
        return false;
      if (this.currOverdueStatus != that.currOverdueStatus)
        return false;
    }

    boolean this_present_currOverdueDays = true;
    boolean that_present_currOverdueDays = true;
    if (this_present_currOverdueDays || that_present_currOverdueDays) {
      if (!(this_present_currOverdueDays && that_present_currOverdueDays))
        return false;
      if (this.currOverdueDays != that.currOverdueDays)
        return false;
    }

    boolean this_present_oweCapitalMoney = true;
    boolean that_present_oweCapitalMoney = true;
    if (this_present_oweCapitalMoney || that_present_oweCapitalMoney) {
      if (!(this_present_oweCapitalMoney && that_present_oweCapitalMoney))
        return false;
      if (this.oweCapitalMoney != that.oweCapitalMoney)
        return false;
    }

    boolean this_present_currCapitalMoneyFile = true;
    boolean that_present_currCapitalMoneyFile = true;
    if (this_present_currCapitalMoneyFile || that_present_currCapitalMoneyFile) {
      if (!(this_present_currCapitalMoneyFile && that_present_currCapitalMoneyFile))
        return false;
      if (this.currCapitalMoneyFile != that.currCapitalMoneyFile)
        return false;
    }

    boolean this_present_currXiFeeFile = true;
    boolean that_present_currXiFeeFile = true;
    if (this_present_currXiFeeFile || that_present_currXiFeeFile) {
      if (!(this_present_currXiFeeFile && that_present_currXiFeeFile))
        return false;
      if (this.currXiFeeFile != that.currXiFeeFile)
        return false;
    }

    boolean this_present_isSettlementStatus = true;
    boolean that_present_isSettlementStatus = true;
    if (this_present_isSettlementStatus || that_present_isSettlementStatus) {
      if (!(this_present_isSettlementStatus && that_present_isSettlementStatus))
        return false;
      if (this.isSettlementStatus != that.isSettlementStatus)
        return false;
    }

    boolean this_present_isForbit = true;
    boolean that_present_isForbit = true;
    if (this_present_isForbit || that_present_isForbit) {
      if (!(this_present_isForbit && that_present_isForbit))
        return false;
      if (this.isForbit != that.isForbit)
        return false;
    }

    boolean this_present_refundStatus = true;
    boolean that_present_refundStatus = true;
    if (this_present_refundStatus || that_present_refundStatus) {
      if (!(this_present_refundStatus && that_present_refundStatus))
        return false;
      if (this.refundStatus != that.refundStatus)
        return false;
    }

    boolean this_present_partnerRealRefundDate = true && this.isSetPartnerRealRefundDate();
    boolean that_present_partnerRealRefundDate = true && that.isSetPartnerRealRefundDate();
    if (this_present_partnerRealRefundDate || that_present_partnerRealRefundDate) {
      if (!(this_present_partnerRealRefundDate && that_present_partnerRealRefundDate))
        return false;
      if (!this.partnerRealRefundDate.equals(that.partnerRealRefundDate))
        return false;
    }

    boolean this_present_partnerRefundFile = true && this.isSetPartnerRefundFile();
    boolean that_present_partnerRefundFile = true && that.isSetPartnerRefundFile();
    if (this_present_partnerRefundFile || that_present_partnerRefundFile) {
      if (!(this_present_partnerRefundFile && that_present_partnerRefundFile))
        return false;
      if (!this.partnerRefundFile.equals(that.partnerRefundFile))
        return false;
    }

    boolean this_present_partnerInterests = true && this.isSetPartnerInterests();
    boolean that_present_partnerInterests = true && that.isSetPartnerInterests();
    if (this_present_partnerInterests || that_present_partnerInterests) {
      if (!(this_present_partnerInterests && that_present_partnerInterests))
        return false;
      if (!this.partnerInterests.equals(that.partnerInterests))
        return false;
    }

    boolean this_present_refundRemark = true && this.isSetRefundRemark();
    boolean that_present_refundRemark = true && that.isSetRefundRemark();
    if (this_present_refundRemark || that_present_refundRemark) {
      if (!(this_present_refundRemark && that_present_refundRemark))
        return false;
      if (!this.refundRemark.equals(that.refundRemark))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_pids = true && this.isSetPids();
    boolean that_present_pids = true && that.isSetPids();
    if (this_present_pids || that_present_pids) {
      if (!(this_present_pids && that_present_pids))
        return false;
      if (!this.pids.equals(that.pids))
        return false;
    }

    boolean this_present_currOverdueStatusList = true && this.isSetCurrOverdueStatusList();
    boolean that_present_currOverdueStatusList = true && that.isSetCurrOverdueStatusList();
    if (this_present_currOverdueStatusList || that_present_currOverdueStatusList) {
      if (!(this_present_currOverdueStatusList && that_present_currOverdueStatusList))
        return false;
      if (!this.currOverdueStatusList.equals(that.currOverdueStatusList))
        return false;
    }

    boolean this_present_refundStatusList = true && this.isSetRefundStatusList();
    boolean that_present_refundStatusList = true && that.isSetRefundStatusList();
    if (this_present_refundStatusList || that_present_refundStatusList) {
      if (!(this_present_refundStatusList && that_present_refundStatusList))
        return false;
      if (!this.refundStatusList.equals(that.refundStatusList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_partnerId = true;
    list.add(present_partnerId);
    if (present_partnerId)
      list.add(partnerId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_partnerNo = true && (isSetPartnerNo());
    list.add(present_partnerNo);
    if (present_partnerNo)
      list.add(partnerNo);

    boolean present_loanId = true && (isSetLoanId());
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_currNo = true;
    list.add(present_currNo);
    if (present_currNo)
      list.add(currNo);

    boolean present_currPlanRefundDate = true && (isSetCurrPlanRefundDate());
    list.add(present_currPlanRefundDate);
    if (present_currPlanRefundDate)
      list.add(currPlanRefundDate);

    boolean present_currShouldCapitalMoney = true;
    list.add(present_currShouldCapitalMoney);
    if (present_currShouldCapitalMoney)
      list.add(currShouldCapitalMoney);

    boolean present_currShouldXiFee = true;
    list.add(present_currShouldXiFee);
    if (present_currShouldXiFee)
      list.add(currShouldXiFee);

    boolean present_currShouldManageFee = true;
    list.add(present_currShouldManageFee);
    if (present_currShouldManageFee)
      list.add(currShouldManageFee);

    boolean present_currShouldOtherFee = true;
    list.add(present_currShouldOtherFee);
    if (present_currShouldOtherFee)
      list.add(currShouldOtherFee);

    boolean present_currShouldTotalMoney = true;
    list.add(present_currShouldTotalMoney);
    if (present_currShouldTotalMoney)
      list.add(currShouldTotalMoney);

    boolean present_currRealRefundDate = true && (isSetCurrRealRefundDate());
    list.add(present_currRealRefundDate);
    if (present_currRealRefundDate)
      list.add(currRealRefundDate);

    boolean present_currRealCapitalMoney = true;
    list.add(present_currRealCapitalMoney);
    if (present_currRealCapitalMoney)
      list.add(currRealCapitalMoney);

    boolean present_currRealXiFee = true;
    list.add(present_currRealXiFee);
    if (present_currRealXiFee)
      list.add(currRealXiFee);

    boolean present_currRealManageFee = true;
    list.add(present_currRealManageFee);
    if (present_currRealManageFee)
      list.add(currRealManageFee);

    boolean present_currRealOtherFee = true;
    list.add(present_currRealOtherFee);
    if (present_currRealOtherFee)
      list.add(currRealOtherFee);

    boolean present_currRealTotalMoney = true;
    list.add(present_currRealTotalMoney);
    if (present_currRealTotalMoney)
      list.add(currRealTotalMoney);

    boolean present_currOverdueStatus = true;
    list.add(present_currOverdueStatus);
    if (present_currOverdueStatus)
      list.add(currOverdueStatus);

    boolean present_currOverdueDays = true;
    list.add(present_currOverdueDays);
    if (present_currOverdueDays)
      list.add(currOverdueDays);

    boolean present_oweCapitalMoney = true;
    list.add(present_oweCapitalMoney);
    if (present_oweCapitalMoney)
      list.add(oweCapitalMoney);

    boolean present_currCapitalMoneyFile = true;
    list.add(present_currCapitalMoneyFile);
    if (present_currCapitalMoneyFile)
      list.add(currCapitalMoneyFile);

    boolean present_currXiFeeFile = true;
    list.add(present_currXiFeeFile);
    if (present_currXiFeeFile)
      list.add(currXiFeeFile);

    boolean present_isSettlementStatus = true;
    list.add(present_isSettlementStatus);
    if (present_isSettlementStatus)
      list.add(isSettlementStatus);

    boolean present_isForbit = true;
    list.add(present_isForbit);
    if (present_isForbit)
      list.add(isForbit);

    boolean present_refundStatus = true;
    list.add(present_refundStatus);
    if (present_refundStatus)
      list.add(refundStatus);

    boolean present_partnerRealRefundDate = true && (isSetPartnerRealRefundDate());
    list.add(present_partnerRealRefundDate);
    if (present_partnerRealRefundDate)
      list.add(partnerRealRefundDate);

    boolean present_partnerRefundFile = true && (isSetPartnerRefundFile());
    list.add(present_partnerRefundFile);
    if (present_partnerRefundFile)
      list.add(partnerRefundFile);

    boolean present_partnerInterests = true && (isSetPartnerInterests());
    list.add(present_partnerInterests);
    if (present_partnerInterests)
      list.add(partnerInterests);

    boolean present_refundRemark = true && (isSetRefundRemark());
    list.add(present_refundRemark);
    if (present_refundRemark)
      list.add(refundRemark);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_pids = true && (isSetPids());
    list.add(present_pids);
    if (present_pids)
      list.add(pids);

    boolean present_currOverdueStatusList = true && (isSetCurrOverdueStatusList());
    list.add(present_currOverdueStatusList);
    if (present_currOverdueStatusList)
      list.add(currOverdueStatusList);

    boolean present_refundStatusList = true && (isSetRefundStatusList());
    list.add(present_refundStatusList);
    if (present_refundStatusList)
      list.add(refundStatusList);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectPartnerRefund other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerNo()).compareTo(other.isSetPartnerNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerNo, other.partnerNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrNo()).compareTo(other.isSetCurrNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currNo, other.currNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrPlanRefundDate()).compareTo(other.isSetCurrPlanRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrPlanRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currPlanRefundDate, other.currPlanRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrShouldCapitalMoney()).compareTo(other.isSetCurrShouldCapitalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrShouldCapitalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currShouldCapitalMoney, other.currShouldCapitalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrShouldXiFee()).compareTo(other.isSetCurrShouldXiFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrShouldXiFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currShouldXiFee, other.currShouldXiFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrShouldManageFee()).compareTo(other.isSetCurrShouldManageFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrShouldManageFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currShouldManageFee, other.currShouldManageFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrShouldOtherFee()).compareTo(other.isSetCurrShouldOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrShouldOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currShouldOtherFee, other.currShouldOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrShouldTotalMoney()).compareTo(other.isSetCurrShouldTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrShouldTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currShouldTotalMoney, other.currShouldTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrRealRefundDate()).compareTo(other.isSetCurrRealRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrRealRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currRealRefundDate, other.currRealRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrRealCapitalMoney()).compareTo(other.isSetCurrRealCapitalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrRealCapitalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currRealCapitalMoney, other.currRealCapitalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrRealXiFee()).compareTo(other.isSetCurrRealXiFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrRealXiFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currRealXiFee, other.currRealXiFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrRealManageFee()).compareTo(other.isSetCurrRealManageFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrRealManageFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currRealManageFee, other.currRealManageFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrRealOtherFee()).compareTo(other.isSetCurrRealOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrRealOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currRealOtherFee, other.currRealOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrRealTotalMoney()).compareTo(other.isSetCurrRealTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrRealTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currRealTotalMoney, other.currRealTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrOverdueStatus()).compareTo(other.isSetCurrOverdueStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrOverdueStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currOverdueStatus, other.currOverdueStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrOverdueDays()).compareTo(other.isSetCurrOverdueDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrOverdueDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currOverdueDays, other.currOverdueDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOweCapitalMoney()).compareTo(other.isSetOweCapitalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOweCapitalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oweCapitalMoney, other.oweCapitalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrCapitalMoneyFile()).compareTo(other.isSetCurrCapitalMoneyFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrCapitalMoneyFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currCapitalMoneyFile, other.currCapitalMoneyFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrXiFeeFile()).compareTo(other.isSetCurrXiFeeFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrXiFeeFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currXiFeeFile, other.currXiFeeFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSettlementStatus()).compareTo(other.isSetIsSettlementStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSettlementStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSettlementStatus, other.isSettlementStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsForbit()).compareTo(other.isSetIsForbit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsForbit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isForbit, other.isForbit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundStatus()).compareTo(other.isSetRefundStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundStatus, other.refundStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerRealRefundDate()).compareTo(other.isSetPartnerRealRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerRealRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRealRefundDate, other.partnerRealRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerRefundFile()).compareTo(other.isSetPartnerRefundFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerRefundFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRefundFile, other.partnerRefundFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerInterests()).compareTo(other.isSetPartnerInterests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerInterests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerInterests, other.partnerInterests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundRemark()).compareTo(other.isSetRefundRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundRemark, other.refundRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrOverdueStatusList()).compareTo(other.isSetCurrOverdueStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrOverdueStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currOverdueStatusList, other.currOverdueStatusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundStatusList()).compareTo(other.isSetRefundStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundStatusList, other.refundStatusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectPartnerRefund(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    sb.append(this.partnerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerNo:");
    if (this.partnerNo == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    if (this.loanId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currNo:");
    sb.append(this.currNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currPlanRefundDate:");
    if (this.currPlanRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.currPlanRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currShouldCapitalMoney:");
    sb.append(this.currShouldCapitalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currShouldXiFee:");
    sb.append(this.currShouldXiFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currShouldManageFee:");
    sb.append(this.currShouldManageFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currShouldOtherFee:");
    sb.append(this.currShouldOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currShouldTotalMoney:");
    sb.append(this.currShouldTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currRealRefundDate:");
    if (this.currRealRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.currRealRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currRealCapitalMoney:");
    sb.append(this.currRealCapitalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currRealXiFee:");
    sb.append(this.currRealXiFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currRealManageFee:");
    sb.append(this.currRealManageFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currRealOtherFee:");
    sb.append(this.currRealOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currRealTotalMoney:");
    sb.append(this.currRealTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currOverdueStatus:");
    sb.append(this.currOverdueStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currOverdueDays:");
    sb.append(this.currOverdueDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oweCapitalMoney:");
    sb.append(this.oweCapitalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currCapitalMoneyFile:");
    sb.append(this.currCapitalMoneyFile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currXiFeeFile:");
    sb.append(this.currXiFeeFile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSettlementStatus:");
    sb.append(this.isSettlementStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isForbit:");
    sb.append(this.isForbit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundStatus:");
    sb.append(this.refundStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerRealRefundDate:");
    if (this.partnerRealRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerRealRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerRefundFile:");
    if (this.partnerRefundFile == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerRefundFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerInterests:");
    if (this.partnerInterests == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerInterests);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundRemark:");
    if (this.refundRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.refundRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pids:");
    if (this.pids == null) {
      sb.append("null");
    } else {
      sb.append(this.pids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currOverdueStatusList:");
    if (this.currOverdueStatusList == null) {
      sb.append("null");
    } else {
      sb.append(this.currOverdueStatusList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundStatusList:");
    if (this.refundStatusList == null) {
      sb.append("null");
    } else {
      sb.append(this.refundStatusList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectPartnerRefundStandardSchemeFactory implements SchemeFactory {
    public ProjectPartnerRefundStandardScheme getScheme() {
      return new ProjectPartnerRefundStandardScheme();
    }
  }

  private static class ProjectPartnerRefundStandardScheme extends StandardScheme<ProjectPartnerRefund> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectPartnerRefund struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerId = iprot.readI32();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTNER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerNo = iprot.readString();
              struct.setPartnerNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanId = iprot.readString();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURR_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currNo = iprot.readI32();
              struct.setCurrNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURR_PLAN_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currPlanRefundDate = iprot.readString();
              struct.setCurrPlanRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURR_SHOULD_CAPITAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currShouldCapitalMoney = iprot.readDouble();
              struct.setCurrShouldCapitalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURR_SHOULD_XI_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currShouldXiFee = iprot.readDouble();
              struct.setCurrShouldXiFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CURR_SHOULD_MANAGE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currShouldManageFee = iprot.readDouble();
              struct.setCurrShouldManageFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CURR_SHOULD_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currShouldOtherFee = iprot.readDouble();
              struct.setCurrShouldOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CURR_SHOULD_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currShouldTotalMoney = iprot.readDouble();
              struct.setCurrShouldTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CURR_REAL_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currRealRefundDate = iprot.readString();
              struct.setCurrRealRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURR_REAL_CAPITAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currRealCapitalMoney = iprot.readDouble();
              struct.setCurrRealCapitalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CURR_REAL_XI_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currRealXiFee = iprot.readDouble();
              struct.setCurrRealXiFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CURR_REAL_MANAGE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currRealManageFee = iprot.readDouble();
              struct.setCurrRealManageFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CURR_REAL_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currRealOtherFee = iprot.readDouble();
              struct.setCurrRealOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CURR_REAL_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currRealTotalMoney = iprot.readDouble();
              struct.setCurrRealTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CURR_OVERDUE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currOverdueStatus = iprot.readI32();
              struct.setCurrOverdueStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CURR_OVERDUE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currOverdueDays = iprot.readI32();
              struct.setCurrOverdueDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OWE_CAPITAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oweCapitalMoney = iprot.readDouble();
              struct.setOweCapitalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CURR_CAPITAL_MONEY_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currCapitalMoneyFile = iprot.readDouble();
              struct.setCurrCapitalMoneyFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CURR_XI_FEE_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currXiFeeFile = iprot.readDouble();
              struct.setCurrXiFeeFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_SETTLEMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSettlementStatus = iprot.readI32();
              struct.setIsSettlementStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_FORBIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isForbit = iprot.readI32();
              struct.setIsForbitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REFUND_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundStatus = iprot.readI32();
              struct.setRefundStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PARTNER_REAL_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerRealRefundDate = iprot.readString();
              struct.setPartnerRealRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PARTNER_REFUND_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerRefundFile = iprot.readString();
              struct.setPartnerRefundFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PARTNER_INTERESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerInterests = iprot.readString();
              struct.setPartnerInterestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // REFUND_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundRemark = iprot.readString();
              struct.setRefundRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list80.size);
                int _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = iprot.readI32();
                  struct.userIds.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.pids = new ArrayList<Integer>(_list83.size);
                int _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = iprot.readI32();
                  struct.pids.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CURR_OVERDUE_STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                struct.currOverdueStatusList = new ArrayList<Integer>(_list86.size);
                int _elem87;
                for (int _i88 = 0; _i88 < _list86.size; ++_i88)
                {
                  _elem87 = iprot.readI32();
                  struct.currOverdueStatusList.add(_elem87);
                }
                iprot.readListEnd();
              }
              struct.setCurrOverdueStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // REFUND_STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list89 = iprot.readListBegin();
                struct.refundStatusList = new ArrayList<Integer>(_list89.size);
                int _elem90;
                for (int _i91 = 0; _i91 < _list89.size; ++_i91)
                {
                  _elem90 = iprot.readI32();
                  struct.refundStatusList.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setRefundStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectPartnerRefund struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
      oprot.writeI32(struct.partnerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.partnerNo != null) {
        oprot.writeFieldBegin(PARTNER_NO_FIELD_DESC);
        oprot.writeString(struct.partnerNo);
        oprot.writeFieldEnd();
      }
      if (struct.loanId != null) {
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeString(struct.loanId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURR_NO_FIELD_DESC);
      oprot.writeI32(struct.currNo);
      oprot.writeFieldEnd();
      if (struct.currPlanRefundDate != null) {
        oprot.writeFieldBegin(CURR_PLAN_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.currPlanRefundDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURR_SHOULD_CAPITAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.currShouldCapitalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_SHOULD_XI_FEE_FIELD_DESC);
      oprot.writeDouble(struct.currShouldXiFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_SHOULD_MANAGE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.currShouldManageFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_SHOULD_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.currShouldOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_SHOULD_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.currShouldTotalMoney);
      oprot.writeFieldEnd();
      if (struct.currRealRefundDate != null) {
        oprot.writeFieldBegin(CURR_REAL_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.currRealRefundDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURR_REAL_CAPITAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.currRealCapitalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_REAL_XI_FEE_FIELD_DESC);
      oprot.writeDouble(struct.currRealXiFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_REAL_MANAGE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.currRealManageFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_REAL_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.currRealOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_REAL_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.currRealTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_OVERDUE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.currOverdueStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_OVERDUE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.currOverdueDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OWE_CAPITAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oweCapitalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_CAPITAL_MONEY_FILE_FIELD_DESC);
      oprot.writeDouble(struct.currCapitalMoneyFile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_XI_FEE_FILE_FIELD_DESC);
      oprot.writeDouble(struct.currXiFeeFile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SETTLEMENT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.isSettlementStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FORBIT_FIELD_DESC);
      oprot.writeI32(struct.isForbit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_STATUS_FIELD_DESC);
      oprot.writeI32(struct.refundStatus);
      oprot.writeFieldEnd();
      if (struct.partnerRealRefundDate != null) {
        oprot.writeFieldBegin(PARTNER_REAL_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.partnerRealRefundDate);
        oprot.writeFieldEnd();
      }
      if (struct.partnerRefundFile != null) {
        oprot.writeFieldBegin(PARTNER_REFUND_FILE_FIELD_DESC);
        oprot.writeString(struct.partnerRefundFile);
        oprot.writeFieldEnd();
      }
      if (struct.partnerInterests != null) {
        oprot.writeFieldBegin(PARTNER_INTERESTS_FIELD_DESC);
        oprot.writeString(struct.partnerInterests);
        oprot.writeFieldEnd();
      }
      if (struct.refundRemark != null) {
        oprot.writeFieldBegin(REFUND_REMARK_FIELD_DESC);
        oprot.writeString(struct.refundRemark);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter92 : struct.userIds)
          {
            oprot.writeI32(_iter92);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pids != null) {
        oprot.writeFieldBegin(PIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pids.size()));
          for (int _iter93 : struct.pids)
          {
            oprot.writeI32(_iter93);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.currOverdueStatusList != null) {
        oprot.writeFieldBegin(CURR_OVERDUE_STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.currOverdueStatusList.size()));
          for (int _iter94 : struct.currOverdueStatusList)
          {
            oprot.writeI32(_iter94);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refundStatusList != null) {
        oprot.writeFieldBegin(REFUND_STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.refundStatusList.size()));
          for (int _iter95 : struct.refundStatusList)
          {
            oprot.writeI32(_iter95);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectPartnerRefundTupleSchemeFactory implements SchemeFactory {
    public ProjectPartnerRefundTupleScheme getScheme() {
      return new ProjectPartnerRefundTupleScheme();
    }
  }

  private static class ProjectPartnerRefundTupleScheme extends TupleScheme<ProjectPartnerRefund> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectPartnerRefund struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetPartnerNo()) {
        optionals.set(3);
      }
      if (struct.isSetLoanId()) {
        optionals.set(4);
      }
      if (struct.isSetCurrNo()) {
        optionals.set(5);
      }
      if (struct.isSetCurrPlanRefundDate()) {
        optionals.set(6);
      }
      if (struct.isSetCurrShouldCapitalMoney()) {
        optionals.set(7);
      }
      if (struct.isSetCurrShouldXiFee()) {
        optionals.set(8);
      }
      if (struct.isSetCurrShouldManageFee()) {
        optionals.set(9);
      }
      if (struct.isSetCurrShouldOtherFee()) {
        optionals.set(10);
      }
      if (struct.isSetCurrShouldTotalMoney()) {
        optionals.set(11);
      }
      if (struct.isSetCurrRealRefundDate()) {
        optionals.set(12);
      }
      if (struct.isSetCurrRealCapitalMoney()) {
        optionals.set(13);
      }
      if (struct.isSetCurrRealXiFee()) {
        optionals.set(14);
      }
      if (struct.isSetCurrRealManageFee()) {
        optionals.set(15);
      }
      if (struct.isSetCurrRealOtherFee()) {
        optionals.set(16);
      }
      if (struct.isSetCurrRealTotalMoney()) {
        optionals.set(17);
      }
      if (struct.isSetCurrOverdueStatus()) {
        optionals.set(18);
      }
      if (struct.isSetCurrOverdueDays()) {
        optionals.set(19);
      }
      if (struct.isSetOweCapitalMoney()) {
        optionals.set(20);
      }
      if (struct.isSetCurrCapitalMoneyFile()) {
        optionals.set(21);
      }
      if (struct.isSetCurrXiFeeFile()) {
        optionals.set(22);
      }
      if (struct.isSetIsSettlementStatus()) {
        optionals.set(23);
      }
      if (struct.isSetIsForbit()) {
        optionals.set(24);
      }
      if (struct.isSetRefundStatus()) {
        optionals.set(25);
      }
      if (struct.isSetPartnerRealRefundDate()) {
        optionals.set(26);
      }
      if (struct.isSetPartnerRefundFile()) {
        optionals.set(27);
      }
      if (struct.isSetPartnerInterests()) {
        optionals.set(28);
      }
      if (struct.isSetRefundRemark()) {
        optionals.set(29);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(30);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(31);
      }
      if (struct.isSetUserIds()) {
        optionals.set(32);
      }
      if (struct.isSetPids()) {
        optionals.set(33);
      }
      if (struct.isSetCurrOverdueStatusList()) {
        optionals.set(34);
      }
      if (struct.isSetRefundStatusList()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeI32(struct.partnerId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetPartnerNo()) {
        oprot.writeString(struct.partnerNo);
      }
      if (struct.isSetLoanId()) {
        oprot.writeString(struct.loanId);
      }
      if (struct.isSetCurrNo()) {
        oprot.writeI32(struct.currNo);
      }
      if (struct.isSetCurrPlanRefundDate()) {
        oprot.writeString(struct.currPlanRefundDate);
      }
      if (struct.isSetCurrShouldCapitalMoney()) {
        oprot.writeDouble(struct.currShouldCapitalMoney);
      }
      if (struct.isSetCurrShouldXiFee()) {
        oprot.writeDouble(struct.currShouldXiFee);
      }
      if (struct.isSetCurrShouldManageFee()) {
        oprot.writeDouble(struct.currShouldManageFee);
      }
      if (struct.isSetCurrShouldOtherFee()) {
        oprot.writeDouble(struct.currShouldOtherFee);
      }
      if (struct.isSetCurrShouldTotalMoney()) {
        oprot.writeDouble(struct.currShouldTotalMoney);
      }
      if (struct.isSetCurrRealRefundDate()) {
        oprot.writeString(struct.currRealRefundDate);
      }
      if (struct.isSetCurrRealCapitalMoney()) {
        oprot.writeDouble(struct.currRealCapitalMoney);
      }
      if (struct.isSetCurrRealXiFee()) {
        oprot.writeDouble(struct.currRealXiFee);
      }
      if (struct.isSetCurrRealManageFee()) {
        oprot.writeDouble(struct.currRealManageFee);
      }
      if (struct.isSetCurrRealOtherFee()) {
        oprot.writeDouble(struct.currRealOtherFee);
      }
      if (struct.isSetCurrRealTotalMoney()) {
        oprot.writeDouble(struct.currRealTotalMoney);
      }
      if (struct.isSetCurrOverdueStatus()) {
        oprot.writeI32(struct.currOverdueStatus);
      }
      if (struct.isSetCurrOverdueDays()) {
        oprot.writeI32(struct.currOverdueDays);
      }
      if (struct.isSetOweCapitalMoney()) {
        oprot.writeDouble(struct.oweCapitalMoney);
      }
      if (struct.isSetCurrCapitalMoneyFile()) {
        oprot.writeDouble(struct.currCapitalMoneyFile);
      }
      if (struct.isSetCurrXiFeeFile()) {
        oprot.writeDouble(struct.currXiFeeFile);
      }
      if (struct.isSetIsSettlementStatus()) {
        oprot.writeI32(struct.isSettlementStatus);
      }
      if (struct.isSetIsForbit()) {
        oprot.writeI32(struct.isForbit);
      }
      if (struct.isSetRefundStatus()) {
        oprot.writeI32(struct.refundStatus);
      }
      if (struct.isSetPartnerRealRefundDate()) {
        oprot.writeString(struct.partnerRealRefundDate);
      }
      if (struct.isSetPartnerRefundFile()) {
        oprot.writeString(struct.partnerRefundFile);
      }
      if (struct.isSetPartnerInterests()) {
        oprot.writeString(struct.partnerInterests);
      }
      if (struct.isSetRefundRemark()) {
        oprot.writeString(struct.refundRemark);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter96 : struct.userIds)
          {
            oprot.writeI32(_iter96);
          }
        }
      }
      if (struct.isSetPids()) {
        {
          oprot.writeI32(struct.pids.size());
          for (int _iter97 : struct.pids)
          {
            oprot.writeI32(_iter97);
          }
        }
      }
      if (struct.isSetCurrOverdueStatusList()) {
        {
          oprot.writeI32(struct.currOverdueStatusList.size());
          for (int _iter98 : struct.currOverdueStatusList)
          {
            oprot.writeI32(_iter98);
          }
        }
      }
      if (struct.isSetRefundStatusList()) {
        {
          oprot.writeI32(struct.refundStatusList.size());
          for (int _iter99 : struct.refundStatusList)
          {
            oprot.writeI32(_iter99);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectPartnerRefund struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerId = iprot.readI32();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partnerNo = iprot.readString();
        struct.setPartnerNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loanId = iprot.readString();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currNo = iprot.readI32();
        struct.setCurrNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.currPlanRefundDate = iprot.readString();
        struct.setCurrPlanRefundDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currShouldCapitalMoney = iprot.readDouble();
        struct.setCurrShouldCapitalMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.currShouldXiFee = iprot.readDouble();
        struct.setCurrShouldXiFeeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.currShouldManageFee = iprot.readDouble();
        struct.setCurrShouldManageFeeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.currShouldOtherFee = iprot.readDouble();
        struct.setCurrShouldOtherFeeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.currShouldTotalMoney = iprot.readDouble();
        struct.setCurrShouldTotalMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.currRealRefundDate = iprot.readString();
        struct.setCurrRealRefundDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.currRealCapitalMoney = iprot.readDouble();
        struct.setCurrRealCapitalMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.currRealXiFee = iprot.readDouble();
        struct.setCurrRealXiFeeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.currRealManageFee = iprot.readDouble();
        struct.setCurrRealManageFeeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.currRealOtherFee = iprot.readDouble();
        struct.setCurrRealOtherFeeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.currRealTotalMoney = iprot.readDouble();
        struct.setCurrRealTotalMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.currOverdueStatus = iprot.readI32();
        struct.setCurrOverdueStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.currOverdueDays = iprot.readI32();
        struct.setCurrOverdueDaysIsSet(true);
      }
      if (incoming.get(20)) {
        struct.oweCapitalMoney = iprot.readDouble();
        struct.setOweCapitalMoneyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.currCapitalMoneyFile = iprot.readDouble();
        struct.setCurrCapitalMoneyFileIsSet(true);
      }
      if (incoming.get(22)) {
        struct.currXiFeeFile = iprot.readDouble();
        struct.setCurrXiFeeFileIsSet(true);
      }
      if (incoming.get(23)) {
        struct.isSettlementStatus = iprot.readI32();
        struct.setIsSettlementStatusIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isForbit = iprot.readI32();
        struct.setIsForbitIsSet(true);
      }
      if (incoming.get(25)) {
        struct.refundStatus = iprot.readI32();
        struct.setRefundStatusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.partnerRealRefundDate = iprot.readString();
        struct.setPartnerRealRefundDateIsSet(true);
      }
      if (incoming.get(27)) {
        struct.partnerRefundFile = iprot.readString();
        struct.setPartnerRefundFileIsSet(true);
      }
      if (incoming.get(28)) {
        struct.partnerInterests = iprot.readString();
        struct.setPartnerInterestsIsSet(true);
      }
      if (incoming.get(29)) {
        struct.refundRemark = iprot.readString();
        struct.setRefundRemarkIsSet(true);
      }
      if (incoming.get(30)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(32)) {
        {
          org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list100.size);
          int _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = iprot.readI32();
            struct.userIds.add(_elem101);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(33)) {
        {
          org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.pids = new ArrayList<Integer>(_list103.size);
          int _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = iprot.readI32();
            struct.pids.add(_elem104);
          }
        }
        struct.setPidsIsSet(true);
      }
      if (incoming.get(34)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.currOverdueStatusList = new ArrayList<Integer>(_list106.size);
          int _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = iprot.readI32();
            struct.currOverdueStatusList.add(_elem107);
          }
        }
        struct.setCurrOverdueStatusListIsSet(true);
      }
      if (incoming.get(35)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.refundStatusList = new ArrayList<Integer>(_list109.size);
          int _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = iprot.readI32();
            struct.refundStatusList.add(_elem110);
          }
        }
        struct.setRefundStatusListIsSet(true);
      }
    }
  }

}


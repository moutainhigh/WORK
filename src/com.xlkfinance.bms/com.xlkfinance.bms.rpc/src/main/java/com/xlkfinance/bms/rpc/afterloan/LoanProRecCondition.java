/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class LoanProRecCondition implements org.apache.thrift.TBase<LoanProRecCondition, LoanProRecCondition._Fields>, java.io.Serializable, Cloneable, Comparable<LoanProRecCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanProRecCondition");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REC_CYCLE_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("recCycleNums", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REALTIME_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("realtimeIds", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanProRecConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanProRecConditionTupleSchemeFactory());
  }

  public int loanId; // required
  public List<String> recCycleNums; // required
  public List<String> realtimeIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    REC_CYCLE_NUMS((short)2, "recCycleNums"),
    REALTIME_IDS((short)3, "realtimeIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // REC_CYCLE_NUMS
          return REC_CYCLE_NUMS;
        case 3: // REALTIME_IDS
          return REALTIME_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_CYCLE_NUMS, new org.apache.thrift.meta_data.FieldMetaData("recCycleNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REALTIME_IDS, new org.apache.thrift.meta_data.FieldMetaData("realtimeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanProRecCondition.class, metaDataMap);
  }

  public LoanProRecCondition() {
  }

  public LoanProRecCondition(
    int loanId,
    List<String> recCycleNums,
    List<String> realtimeIds)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.recCycleNums = recCycleNums;
    this.realtimeIds = realtimeIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanProRecCondition(LoanProRecCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    if (other.isSetRecCycleNums()) {
      List<String> __this__recCycleNums = new ArrayList<String>(other.recCycleNums);
      this.recCycleNums = __this__recCycleNums;
    }
    if (other.isSetRealtimeIds()) {
      List<String> __this__realtimeIds = new ArrayList<String>(other.realtimeIds);
      this.realtimeIds = __this__realtimeIds;
    }
  }

  public LoanProRecCondition deepCopy() {
    return new LoanProRecCondition(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.recCycleNums = null;
    this.realtimeIds = null;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public LoanProRecCondition setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getRecCycleNumsSize() {
    return (this.recCycleNums == null) ? 0 : this.recCycleNums.size();
  }

  public java.util.Iterator<String> getRecCycleNumsIterator() {
    return (this.recCycleNums == null) ? null : this.recCycleNums.iterator();
  }

  public void addToRecCycleNums(String elem) {
    if (this.recCycleNums == null) {
      this.recCycleNums = new ArrayList<String>();
    }
    this.recCycleNums.add(elem);
  }

  public List<String> getRecCycleNums() {
    return this.recCycleNums;
  }

  public LoanProRecCondition setRecCycleNums(List<String> recCycleNums) {
    this.recCycleNums = recCycleNums;
    return this;
  }

  public void unsetRecCycleNums() {
    this.recCycleNums = null;
  }

  /** Returns true if field recCycleNums is set (has been assigned a value) and false otherwise */
  public boolean isSetRecCycleNums() {
    return this.recCycleNums != null;
  }

  public void setRecCycleNumsIsSet(boolean value) {
    if (!value) {
      this.recCycleNums = null;
    }
  }

  public int getRealtimeIdsSize() {
    return (this.realtimeIds == null) ? 0 : this.realtimeIds.size();
  }

  public java.util.Iterator<String> getRealtimeIdsIterator() {
    return (this.realtimeIds == null) ? null : this.realtimeIds.iterator();
  }

  public void addToRealtimeIds(String elem) {
    if (this.realtimeIds == null) {
      this.realtimeIds = new ArrayList<String>();
    }
    this.realtimeIds.add(elem);
  }

  public List<String> getRealtimeIds() {
    return this.realtimeIds;
  }

  public LoanProRecCondition setRealtimeIds(List<String> realtimeIds) {
    this.realtimeIds = realtimeIds;
    return this;
  }

  public void unsetRealtimeIds() {
    this.realtimeIds = null;
  }

  /** Returns true if field realtimeIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRealtimeIds() {
    return this.realtimeIds != null;
  }

  public void setRealtimeIdsIsSet(boolean value) {
    if (!value) {
      this.realtimeIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case REC_CYCLE_NUMS:
      if (value == null) {
        unsetRecCycleNums();
      } else {
        setRecCycleNums((List<String>)value);
      }
      break;

    case REALTIME_IDS:
      if (value == null) {
        unsetRealtimeIds();
      } else {
        setRealtimeIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case REC_CYCLE_NUMS:
      return getRecCycleNums();

    case REALTIME_IDS:
      return getRealtimeIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case REC_CYCLE_NUMS:
      return isSetRecCycleNums();
    case REALTIME_IDS:
      return isSetRealtimeIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanProRecCondition)
      return this.equals((LoanProRecCondition)that);
    return false;
  }

  public boolean equals(LoanProRecCondition that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_recCycleNums = true && this.isSetRecCycleNums();
    boolean that_present_recCycleNums = true && that.isSetRecCycleNums();
    if (this_present_recCycleNums || that_present_recCycleNums) {
      if (!(this_present_recCycleNums && that_present_recCycleNums))
        return false;
      if (!this.recCycleNums.equals(that.recCycleNums))
        return false;
    }

    boolean this_present_realtimeIds = true && this.isSetRealtimeIds();
    boolean that_present_realtimeIds = true && that.isSetRealtimeIds();
    if (this_present_realtimeIds || that_present_realtimeIds) {
      if (!(this_present_realtimeIds && that_present_realtimeIds))
        return false;
      if (!this.realtimeIds.equals(that.realtimeIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_recCycleNums = true && (isSetRecCycleNums());
    list.add(present_recCycleNums);
    if (present_recCycleNums)
      list.add(recCycleNums);

    boolean present_realtimeIds = true && (isSetRealtimeIds());
    list.add(present_realtimeIds);
    if (present_realtimeIds)
      list.add(realtimeIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanProRecCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecCycleNums()).compareTo(other.isSetRecCycleNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecCycleNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recCycleNums, other.recCycleNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtimeIds()).compareTo(other.isSetRealtimeIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtimeIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtimeIds, other.realtimeIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanProRecCondition(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recCycleNums:");
    if (this.recCycleNums == null) {
      sb.append("null");
    } else {
      sb.append(this.recCycleNums);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realtimeIds:");
    if (this.realtimeIds == null) {
      sb.append("null");
    } else {
      sb.append(this.realtimeIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanProRecConditionStandardSchemeFactory implements SchemeFactory {
    public LoanProRecConditionStandardScheme getScheme() {
      return new LoanProRecConditionStandardScheme();
    }
  }

  private static class LoanProRecConditionStandardScheme extends StandardScheme<LoanProRecCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanProRecCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REC_CYCLE_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.recCycleNums = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.recCycleNums.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRecCycleNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REALTIME_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.realtimeIds = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.realtimeIds.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setRealtimeIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanProRecCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.recCycleNums != null) {
        oprot.writeFieldBegin(REC_CYCLE_NUMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.recCycleNums.size()));
          for (String _iter6 : struct.recCycleNums)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.realtimeIds != null) {
        oprot.writeFieldBegin(REALTIME_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.realtimeIds.size()));
          for (String _iter7 : struct.realtimeIds)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanProRecConditionTupleSchemeFactory implements SchemeFactory {
    public LoanProRecConditionTupleScheme getScheme() {
      return new LoanProRecConditionTupleScheme();
    }
  }

  private static class LoanProRecConditionTupleScheme extends TupleScheme<LoanProRecCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanProRecCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetRecCycleNums()) {
        optionals.set(1);
      }
      if (struct.isSetRealtimeIds()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetRecCycleNums()) {
        {
          oprot.writeI32(struct.recCycleNums.size());
          for (String _iter8 : struct.recCycleNums)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetRealtimeIds()) {
        {
          oprot.writeI32(struct.realtimeIds.size());
          for (String _iter9 : struct.realtimeIds)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanProRecCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.recCycleNums = new ArrayList<String>(_list10.size);
          String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.recCycleNums.add(_elem11);
          }
        }
        struct.setRecCycleNumsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.realtimeIds = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.realtimeIds.add(_elem14);
          }
        }
        struct.setRealtimeIdsIsSet(true);
      }
    }
  }

}


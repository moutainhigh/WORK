/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class LoanDivertinfo implements org.apache.thrift.TBase<LoanDivertinfo, LoanDivertinfo._Fields>, java.io.Serializable, Cloneable, Comparable<LoanDivertinfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanDivertinfo");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DIVERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("divertId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DIVERT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFine", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFineEndDt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REGULATORY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryUserId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_PAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFinePayDt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_PAY_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFinePayAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField PLAN_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planBeginDt", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFineBeginDt", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanDivertinfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanDivertinfoTupleSchemeFactory());
  }

  public int pId; // required
  public String projectName; // required
  public String projectNumber; // required
  public int loanId; // required
  public int divertId; // required
  public int projectId; // required
  public double divertAmt; // required
  public double divertFine; // required
  public String divertFineEndDt; // required
  public int regulatoryUserId; // required
  public String remark; // required
  public int reviewStatus; // required
  public int status; // required
  public String divertFinePayDt; // required
  public double divertFinePayAmt; // required
  public String planBeginDt; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public String divertFineBeginDt; // required
  public String planOutLoanDt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    LOAN_ID((short)4, "loanId"),
    DIVERT_ID((short)5, "divertId"),
    PROJECT_ID((short)6, "projectId"),
    DIVERT_AMT((short)7, "divertAmt"),
    DIVERT_FINE((short)8, "divertFine"),
    DIVERT_FINE_END_DT((short)9, "divertFineEndDt"),
    REGULATORY_USER_ID((short)10, "regulatoryUserId"),
    REMARK((short)11, "remark"),
    REVIEW_STATUS((short)12, "reviewStatus"),
    STATUS((short)13, "status"),
    DIVERT_FINE_PAY_DT((short)14, "divertFinePayDt"),
    DIVERT_FINE_PAY_AMT((short)15, "divertFinePayAmt"),
    PLAN_BEGIN_DT((short)16, "planBeginDt"),
    REQUEST_STATUS((short)17, "requestStatus"),
    REQUEST_DTTM((short)18, "requestDttm"),
    COMPLETE_DTTM((short)19, "completeDttm"),
    DIVERT_FINE_BEGIN_DT((short)20, "divertFineBeginDt"),
    PLAN_OUT_LOAN_DT((short)21, "planOutLoanDt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // LOAN_ID
          return LOAN_ID;
        case 5: // DIVERT_ID
          return DIVERT_ID;
        case 6: // PROJECT_ID
          return PROJECT_ID;
        case 7: // DIVERT_AMT
          return DIVERT_AMT;
        case 8: // DIVERT_FINE
          return DIVERT_FINE;
        case 9: // DIVERT_FINE_END_DT
          return DIVERT_FINE_END_DT;
        case 10: // REGULATORY_USER_ID
          return REGULATORY_USER_ID;
        case 11: // REMARK
          return REMARK;
        case 12: // REVIEW_STATUS
          return REVIEW_STATUS;
        case 13: // STATUS
          return STATUS;
        case 14: // DIVERT_FINE_PAY_DT
          return DIVERT_FINE_PAY_DT;
        case 15: // DIVERT_FINE_PAY_AMT
          return DIVERT_FINE_PAY_AMT;
        case 16: // PLAN_BEGIN_DT
          return PLAN_BEGIN_DT;
        case 17: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 18: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 19: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 20: // DIVERT_FINE_BEGIN_DT
          return DIVERT_FINE_BEGIN_DT;
        case 21: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __DIVERTID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private static final int __DIVERTAMT_ISSET_ID = 4;
  private static final int __DIVERTFINE_ISSET_ID = 5;
  private static final int __REGULATORYUSERID_ISSET_ID = 6;
  private static final int __REVIEWSTATUS_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __DIVERTFINEPAYAMT_ISSET_ID = 9;
  private static final int __REQUESTSTATUS_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIVERT_ID, new org.apache.thrift.meta_data.FieldMetaData("divertId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIVERT_AMT, new org.apache.thrift.meta_data.FieldMetaData("divertAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIVERT_FINE, new org.apache.thrift.meta_data.FieldMetaData("divertFine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIVERT_FINE_END_DT, new org.apache.thrift.meta_data.FieldMetaData("divertFineEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("regulatoryUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIVERT_FINE_PAY_DT, new org.apache.thrift.meta_data.FieldMetaData("divertFinePayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_FINE_PAY_AMT, new org.apache.thrift.meta_data.FieldMetaData("divertFinePayAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("planBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_FINE_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("divertFineBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanDivertinfo.class, metaDataMap);
  }

  public LoanDivertinfo() {
  }

  public LoanDivertinfo(
    int pId,
    String projectName,
    String projectNumber,
    int loanId,
    int divertId,
    int projectId,
    double divertAmt,
    double divertFine,
    String divertFineEndDt,
    int regulatoryUserId,
    String remark,
    int reviewStatus,
    int status,
    String divertFinePayDt,
    double divertFinePayAmt,
    String planBeginDt,
    int requestStatus,
    String requestDttm,
    String completeDttm,
    String divertFineBeginDt,
    String planOutLoanDt)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.divertId = divertId;
    setDivertIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.divertAmt = divertAmt;
    setDivertAmtIsSet(true);
    this.divertFine = divertFine;
    setDivertFineIsSet(true);
    this.divertFineEndDt = divertFineEndDt;
    this.regulatoryUserId = regulatoryUserId;
    setRegulatoryUserIdIsSet(true);
    this.remark = remark;
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.divertFinePayDt = divertFinePayDt;
    this.divertFinePayAmt = divertFinePayAmt;
    setDivertFinePayAmtIsSet(true);
    this.planBeginDt = planBeginDt;
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.divertFineBeginDt = divertFineBeginDt;
    this.planOutLoanDt = planOutLoanDt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanDivertinfo(LoanDivertinfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.loanId = other.loanId;
    this.divertId = other.divertId;
    this.projectId = other.projectId;
    this.divertAmt = other.divertAmt;
    this.divertFine = other.divertFine;
    if (other.isSetDivertFineEndDt()) {
      this.divertFineEndDt = other.divertFineEndDt;
    }
    this.regulatoryUserId = other.regulatoryUserId;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.reviewStatus = other.reviewStatus;
    this.status = other.status;
    if (other.isSetDivertFinePayDt()) {
      this.divertFinePayDt = other.divertFinePayDt;
    }
    this.divertFinePayAmt = other.divertFinePayAmt;
    if (other.isSetPlanBeginDt()) {
      this.planBeginDt = other.planBeginDt;
    }
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    if (other.isSetDivertFineBeginDt()) {
      this.divertFineBeginDt = other.divertFineBeginDt;
    }
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
  }

  public LoanDivertinfo deepCopy() {
    return new LoanDivertinfo(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    this.projectName = null;
    this.projectNumber = null;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setDivertIdIsSet(false);
    this.divertId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setDivertAmtIsSet(false);
    this.divertAmt = 0.0;
    setDivertFineIsSet(false);
    this.divertFine = 0.0;
    this.divertFineEndDt = null;
    setRegulatoryUserIdIsSet(false);
    this.regulatoryUserId = 0;
    this.remark = null;
    setReviewStatusIsSet(false);
    this.reviewStatus = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.divertFinePayDt = null;
    setDivertFinePayAmtIsSet(false);
    this.divertFinePayAmt = 0.0;
    this.planBeginDt = null;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.completeDttm = null;
    this.divertFineBeginDt = null;
    this.planOutLoanDt = null;
  }

  public int getPId() {
    return this.pId;
  }

  public LoanDivertinfo setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public LoanDivertinfo setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public LoanDivertinfo setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getLoanId() {
    return this.loanId;
  }

  public LoanDivertinfo setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getDivertId() {
    return this.divertId;
  }

  public LoanDivertinfo setDivertId(int divertId) {
    this.divertId = divertId;
    setDivertIdIsSet(true);
    return this;
  }

  public void unsetDivertId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTID_ISSET_ID);
  }

  /** Returns true if field divertId is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTID_ISSET_ID);
  }

  public void setDivertIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public LoanDivertinfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getDivertAmt() {
    return this.divertAmt;
  }

  public LoanDivertinfo setDivertAmt(double divertAmt) {
    this.divertAmt = divertAmt;
    setDivertAmtIsSet(true);
    return this;
  }

  public void unsetDivertAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTAMT_ISSET_ID);
  }

  /** Returns true if field divertAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTAMT_ISSET_ID);
  }

  public void setDivertAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTAMT_ISSET_ID, value);
  }

  public double getDivertFine() {
    return this.divertFine;
  }

  public LoanDivertinfo setDivertFine(double divertFine) {
    this.divertFine = divertFine;
    setDivertFineIsSet(true);
    return this;
  }

  public void unsetDivertFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTFINE_ISSET_ID);
  }

  /** Returns true if field divertFine is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFine() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTFINE_ISSET_ID);
  }

  public void setDivertFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTFINE_ISSET_ID, value);
  }

  public String getDivertFineEndDt() {
    return this.divertFineEndDt;
  }

  public LoanDivertinfo setDivertFineEndDt(String divertFineEndDt) {
    this.divertFineEndDt = divertFineEndDt;
    return this;
  }

  public void unsetDivertFineEndDt() {
    this.divertFineEndDt = null;
  }

  /** Returns true if field divertFineEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFineEndDt() {
    return this.divertFineEndDt != null;
  }

  public void setDivertFineEndDtIsSet(boolean value) {
    if (!value) {
      this.divertFineEndDt = null;
    }
  }

  public int getRegulatoryUserId() {
    return this.regulatoryUserId;
  }

  public LoanDivertinfo setRegulatoryUserId(int regulatoryUserId) {
    this.regulatoryUserId = regulatoryUserId;
    setRegulatoryUserIdIsSet(true);
    return this;
  }

  public void unsetRegulatoryUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID);
  }

  /** Returns true if field regulatoryUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID);
  }

  public void setRegulatoryUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public LoanDivertinfo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getReviewStatus() {
    return this.reviewStatus;
  }

  public LoanDivertinfo setReviewStatus(int reviewStatus) {
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    return this;
  }

  public void unsetReviewStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  /** Returns true if field reviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  public void setReviewStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public LoanDivertinfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getDivertFinePayDt() {
    return this.divertFinePayDt;
  }

  public LoanDivertinfo setDivertFinePayDt(String divertFinePayDt) {
    this.divertFinePayDt = divertFinePayDt;
    return this;
  }

  public void unsetDivertFinePayDt() {
    this.divertFinePayDt = null;
  }

  /** Returns true if field divertFinePayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFinePayDt() {
    return this.divertFinePayDt != null;
  }

  public void setDivertFinePayDtIsSet(boolean value) {
    if (!value) {
      this.divertFinePayDt = null;
    }
  }

  public double getDivertFinePayAmt() {
    return this.divertFinePayAmt;
  }

  public LoanDivertinfo setDivertFinePayAmt(double divertFinePayAmt) {
    this.divertFinePayAmt = divertFinePayAmt;
    setDivertFinePayAmtIsSet(true);
    return this;
  }

  public void unsetDivertFinePayAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTFINEPAYAMT_ISSET_ID);
  }

  /** Returns true if field divertFinePayAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFinePayAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTFINEPAYAMT_ISSET_ID);
  }

  public void setDivertFinePayAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTFINEPAYAMT_ISSET_ID, value);
  }

  public String getPlanBeginDt() {
    return this.planBeginDt;
  }

  public LoanDivertinfo setPlanBeginDt(String planBeginDt) {
    this.planBeginDt = planBeginDt;
    return this;
  }

  public void unsetPlanBeginDt() {
    this.planBeginDt = null;
  }

  /** Returns true if field planBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanBeginDt() {
    return this.planBeginDt != null;
  }

  public void setPlanBeginDtIsSet(boolean value) {
    if (!value) {
      this.planBeginDt = null;
    }
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public LoanDivertinfo setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public LoanDivertinfo setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public LoanDivertinfo setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public String getDivertFineBeginDt() {
    return this.divertFineBeginDt;
  }

  public LoanDivertinfo setDivertFineBeginDt(String divertFineBeginDt) {
    this.divertFineBeginDt = divertFineBeginDt;
    return this;
  }

  public void unsetDivertFineBeginDt() {
    this.divertFineBeginDt = null;
  }

  /** Returns true if field divertFineBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFineBeginDt() {
    return this.divertFineBeginDt != null;
  }

  public void setDivertFineBeginDtIsSet(boolean value) {
    if (!value) {
      this.divertFineBeginDt = null;
    }
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public LoanDivertinfo setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case DIVERT_ID:
      if (value == null) {
        unsetDivertId();
      } else {
        setDivertId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case DIVERT_AMT:
      if (value == null) {
        unsetDivertAmt();
      } else {
        setDivertAmt((Double)value);
      }
      break;

    case DIVERT_FINE:
      if (value == null) {
        unsetDivertFine();
      } else {
        setDivertFine((Double)value);
      }
      break;

    case DIVERT_FINE_END_DT:
      if (value == null) {
        unsetDivertFineEndDt();
      } else {
        setDivertFineEndDt((String)value);
      }
      break;

    case REGULATORY_USER_ID:
      if (value == null) {
        unsetRegulatoryUserId();
      } else {
        setRegulatoryUserId((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case REVIEW_STATUS:
      if (value == null) {
        unsetReviewStatus();
      } else {
        setReviewStatus((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case DIVERT_FINE_PAY_DT:
      if (value == null) {
        unsetDivertFinePayDt();
      } else {
        setDivertFinePayDt((String)value);
      }
      break;

    case DIVERT_FINE_PAY_AMT:
      if (value == null) {
        unsetDivertFinePayAmt();
      } else {
        setDivertFinePayAmt((Double)value);
      }
      break;

    case PLAN_BEGIN_DT:
      if (value == null) {
        unsetPlanBeginDt();
      } else {
        setPlanBeginDt((String)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case DIVERT_FINE_BEGIN_DT:
      if (value == null) {
        unsetDivertFineBeginDt();
      } else {
        setDivertFineBeginDt((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case DIVERT_ID:
      return Integer.valueOf(getDivertId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case DIVERT_AMT:
      return Double.valueOf(getDivertAmt());

    case DIVERT_FINE:
      return Double.valueOf(getDivertFine());

    case DIVERT_FINE_END_DT:
      return getDivertFineEndDt();

    case REGULATORY_USER_ID:
      return Integer.valueOf(getRegulatoryUserId());

    case REMARK:
      return getRemark();

    case REVIEW_STATUS:
      return Integer.valueOf(getReviewStatus());

    case STATUS:
      return Integer.valueOf(getStatus());

    case DIVERT_FINE_PAY_DT:
      return getDivertFinePayDt();

    case DIVERT_FINE_PAY_AMT:
      return Double.valueOf(getDivertFinePayAmt());

    case PLAN_BEGIN_DT:
      return getPlanBeginDt();

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case DIVERT_FINE_BEGIN_DT:
      return getDivertFineBeginDt();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case LOAN_ID:
      return isSetLoanId();
    case DIVERT_ID:
      return isSetDivertId();
    case PROJECT_ID:
      return isSetProjectId();
    case DIVERT_AMT:
      return isSetDivertAmt();
    case DIVERT_FINE:
      return isSetDivertFine();
    case DIVERT_FINE_END_DT:
      return isSetDivertFineEndDt();
    case REGULATORY_USER_ID:
      return isSetRegulatoryUserId();
    case REMARK:
      return isSetRemark();
    case REVIEW_STATUS:
      return isSetReviewStatus();
    case STATUS:
      return isSetStatus();
    case DIVERT_FINE_PAY_DT:
      return isSetDivertFinePayDt();
    case DIVERT_FINE_PAY_AMT:
      return isSetDivertFinePayAmt();
    case PLAN_BEGIN_DT:
      return isSetPlanBeginDt();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case DIVERT_FINE_BEGIN_DT:
      return isSetDivertFineBeginDt();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanDivertinfo)
      return this.equals((LoanDivertinfo)that);
    return false;
  }

  public boolean equals(LoanDivertinfo that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_divertId = true;
    boolean that_present_divertId = true;
    if (this_present_divertId || that_present_divertId) {
      if (!(this_present_divertId && that_present_divertId))
        return false;
      if (this.divertId != that.divertId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_divertAmt = true;
    boolean that_present_divertAmt = true;
    if (this_present_divertAmt || that_present_divertAmt) {
      if (!(this_present_divertAmt && that_present_divertAmt))
        return false;
      if (this.divertAmt != that.divertAmt)
        return false;
    }

    boolean this_present_divertFine = true;
    boolean that_present_divertFine = true;
    if (this_present_divertFine || that_present_divertFine) {
      if (!(this_present_divertFine && that_present_divertFine))
        return false;
      if (this.divertFine != that.divertFine)
        return false;
    }

    boolean this_present_divertFineEndDt = true && this.isSetDivertFineEndDt();
    boolean that_present_divertFineEndDt = true && that.isSetDivertFineEndDt();
    if (this_present_divertFineEndDt || that_present_divertFineEndDt) {
      if (!(this_present_divertFineEndDt && that_present_divertFineEndDt))
        return false;
      if (!this.divertFineEndDt.equals(that.divertFineEndDt))
        return false;
    }

    boolean this_present_regulatoryUserId = true;
    boolean that_present_regulatoryUserId = true;
    if (this_present_regulatoryUserId || that_present_regulatoryUserId) {
      if (!(this_present_regulatoryUserId && that_present_regulatoryUserId))
        return false;
      if (this.regulatoryUserId != that.regulatoryUserId)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_reviewStatus = true;
    boolean that_present_reviewStatus = true;
    if (this_present_reviewStatus || that_present_reviewStatus) {
      if (!(this_present_reviewStatus && that_present_reviewStatus))
        return false;
      if (this.reviewStatus != that.reviewStatus)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_divertFinePayDt = true && this.isSetDivertFinePayDt();
    boolean that_present_divertFinePayDt = true && that.isSetDivertFinePayDt();
    if (this_present_divertFinePayDt || that_present_divertFinePayDt) {
      if (!(this_present_divertFinePayDt && that_present_divertFinePayDt))
        return false;
      if (!this.divertFinePayDt.equals(that.divertFinePayDt))
        return false;
    }

    boolean this_present_divertFinePayAmt = true;
    boolean that_present_divertFinePayAmt = true;
    if (this_present_divertFinePayAmt || that_present_divertFinePayAmt) {
      if (!(this_present_divertFinePayAmt && that_present_divertFinePayAmt))
        return false;
      if (this.divertFinePayAmt != that.divertFinePayAmt)
        return false;
    }

    boolean this_present_planBeginDt = true && this.isSetPlanBeginDt();
    boolean that_present_planBeginDt = true && that.isSetPlanBeginDt();
    if (this_present_planBeginDt || that_present_planBeginDt) {
      if (!(this_present_planBeginDt && that_present_planBeginDt))
        return false;
      if (!this.planBeginDt.equals(that.planBeginDt))
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_divertFineBeginDt = true && this.isSetDivertFineBeginDt();
    boolean that_present_divertFineBeginDt = true && that.isSetDivertFineBeginDt();
    if (this_present_divertFineBeginDt || that_present_divertFineBeginDt) {
      if (!(this_present_divertFineBeginDt && that_present_divertFineBeginDt))
        return false;
      if (!this.divertFineBeginDt.equals(that.divertFineBeginDt))
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_divertId = true;
    list.add(present_divertId);
    if (present_divertId)
      list.add(divertId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_divertAmt = true;
    list.add(present_divertAmt);
    if (present_divertAmt)
      list.add(divertAmt);

    boolean present_divertFine = true;
    list.add(present_divertFine);
    if (present_divertFine)
      list.add(divertFine);

    boolean present_divertFineEndDt = true && (isSetDivertFineEndDt());
    list.add(present_divertFineEndDt);
    if (present_divertFineEndDt)
      list.add(divertFineEndDt);

    boolean present_regulatoryUserId = true;
    list.add(present_regulatoryUserId);
    if (present_regulatoryUserId)
      list.add(regulatoryUserId);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_reviewStatus = true;
    list.add(present_reviewStatus);
    if (present_reviewStatus)
      list.add(reviewStatus);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_divertFinePayDt = true && (isSetDivertFinePayDt());
    list.add(present_divertFinePayDt);
    if (present_divertFinePayDt)
      list.add(divertFinePayDt);

    boolean present_divertFinePayAmt = true;
    list.add(present_divertFinePayAmt);
    if (present_divertFinePayAmt)
      list.add(divertFinePayAmt);

    boolean present_planBeginDt = true && (isSetPlanBeginDt());
    list.add(present_planBeginDt);
    if (present_planBeginDt)
      list.add(planBeginDt);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_divertFineBeginDt = true && (isSetDivertFineBeginDt());
    list.add(present_divertFineBeginDt);
    if (present_divertFineBeginDt)
      list.add(divertFineBeginDt);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanDivertinfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertId()).compareTo(other.isSetDivertId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertId, other.divertId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertAmt()).compareTo(other.isSetDivertAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertAmt, other.divertAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFine()).compareTo(other.isSetDivertFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFine, other.divertFine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFineEndDt()).compareTo(other.isSetDivertFineEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFineEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFineEndDt, other.divertFineEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryUserId()).compareTo(other.isSetRegulatoryUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryUserId, other.regulatoryUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewStatus()).compareTo(other.isSetReviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewStatus, other.reviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFinePayDt()).compareTo(other.isSetDivertFinePayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFinePayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFinePayDt, other.divertFinePayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFinePayAmt()).compareTo(other.isSetDivertFinePayAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFinePayAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFinePayAmt, other.divertFinePayAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanBeginDt()).compareTo(other.isSetPlanBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planBeginDt, other.planBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFineBeginDt()).compareTo(other.isSetDivertFineBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFineBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFineBeginDt, other.divertFineBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanDivertinfo(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertId:");
    sb.append(this.divertId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertAmt:");
    sb.append(this.divertAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFine:");
    sb.append(this.divertFine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFineEndDt:");
    if (this.divertFineEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFineEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryUserId:");
    sb.append(this.regulatoryUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewStatus:");
    sb.append(this.reviewStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFinePayDt:");
    if (this.divertFinePayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFinePayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFinePayAmt:");
    sb.append(this.divertFinePayAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planBeginDt:");
    if (this.planBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFineBeginDt:");
    if (this.divertFineBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFineBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanDivertinfoStandardSchemeFactory implements SchemeFactory {
    public LoanDivertinfoStandardScheme getScheme() {
      return new LoanDivertinfoStandardScheme();
    }
  }

  private static class LoanDivertinfoStandardScheme extends StandardScheme<LoanDivertinfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanDivertinfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIVERT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.divertId = iprot.readI32();
              struct.setDivertIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIVERT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.divertAmt = iprot.readDouble();
              struct.setDivertAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DIVERT_FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.divertFine = iprot.readDouble();
              struct.setDivertFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DIVERT_FINE_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFineEndDt = iprot.readString();
              struct.setDivertFineEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REGULATORY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regulatoryUserId = iprot.readI32();
              struct.setRegulatoryUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reviewStatus = iprot.readI32();
              struct.setReviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DIVERT_FINE_PAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFinePayDt = iprot.readString();
              struct.setDivertFinePayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DIVERT_FINE_PAY_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.divertFinePayAmt = iprot.readDouble();
              struct.setDivertFinePayAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PLAN_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planBeginDt = iprot.readString();
              struct.setPlanBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DIVERT_FINE_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFineBeginDt = iprot.readString();
              struct.setDivertFineBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanDivertinfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIVERT_ID_FIELD_DESC);
      oprot.writeI32(struct.divertId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIVERT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.divertAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIVERT_FINE_FIELD_DESC);
      oprot.writeDouble(struct.divertFine);
      oprot.writeFieldEnd();
      if (struct.divertFineEndDt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_END_DT_FIELD_DESC);
        oprot.writeString(struct.divertFineEndDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGULATORY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.regulatoryUserId);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVIEW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.reviewStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.divertFinePayDt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_PAY_DT_FIELD_DESC);
        oprot.writeString(struct.divertFinePayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIVERT_FINE_PAY_AMT_FIELD_DESC);
      oprot.writeDouble(struct.divertFinePayAmt);
      oprot.writeFieldEnd();
      if (struct.planBeginDt != null) {
        oprot.writeFieldBegin(PLAN_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.planBeginDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      if (struct.divertFineBeginDt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.divertFineBeginDt);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanDivertinfoTupleSchemeFactory implements SchemeFactory {
    public LoanDivertinfoTupleScheme getScheme() {
      return new LoanDivertinfoTupleScheme();
    }
  }

  private static class LoanDivertinfoTupleScheme extends TupleScheme<LoanDivertinfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanDivertinfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetLoanId()) {
        optionals.set(3);
      }
      if (struct.isSetDivertId()) {
        optionals.set(4);
      }
      if (struct.isSetProjectId()) {
        optionals.set(5);
      }
      if (struct.isSetDivertAmt()) {
        optionals.set(6);
      }
      if (struct.isSetDivertFine()) {
        optionals.set(7);
      }
      if (struct.isSetDivertFineEndDt()) {
        optionals.set(8);
      }
      if (struct.isSetRegulatoryUserId()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetReviewStatus()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetDivertFinePayDt()) {
        optionals.set(13);
      }
      if (struct.isSetDivertFinePayAmt()) {
        optionals.set(14);
      }
      if (struct.isSetPlanBeginDt()) {
        optionals.set(15);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(16);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(17);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(18);
      }
      if (struct.isSetDivertFineBeginDt()) {
        optionals.set(19);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetDivertId()) {
        oprot.writeI32(struct.divertId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetDivertAmt()) {
        oprot.writeDouble(struct.divertAmt);
      }
      if (struct.isSetDivertFine()) {
        oprot.writeDouble(struct.divertFine);
      }
      if (struct.isSetDivertFineEndDt()) {
        oprot.writeString(struct.divertFineEndDt);
      }
      if (struct.isSetRegulatoryUserId()) {
        oprot.writeI32(struct.regulatoryUserId);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetReviewStatus()) {
        oprot.writeI32(struct.reviewStatus);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetDivertFinePayDt()) {
        oprot.writeString(struct.divertFinePayDt);
      }
      if (struct.isSetDivertFinePayAmt()) {
        oprot.writeDouble(struct.divertFinePayAmt);
      }
      if (struct.isSetPlanBeginDt()) {
        oprot.writeString(struct.planBeginDt);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetDivertFineBeginDt()) {
        oprot.writeString(struct.divertFineBeginDt);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanDivertinfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.divertId = iprot.readI32();
        struct.setDivertIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.divertAmt = iprot.readDouble();
        struct.setDivertAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.divertFine = iprot.readDouble();
        struct.setDivertFineIsSet(true);
      }
      if (incoming.get(8)) {
        struct.divertFineEndDt = iprot.readString();
        struct.setDivertFineEndDtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.regulatoryUserId = iprot.readI32();
        struct.setRegulatoryUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reviewStatus = iprot.readI32();
        struct.setReviewStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.divertFinePayDt = iprot.readString();
        struct.setDivertFinePayDtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.divertFinePayAmt = iprot.readDouble();
        struct.setDivertFinePayAmtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.planBeginDt = iprot.readString();
        struct.setPlanBeginDtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(18)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(19)) {
        struct.divertFineBeginDt = iprot.readString();
        struct.setDivertFineBeginDtIsSet(true);
      }
      if (incoming.get(20)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
    }
  }

}


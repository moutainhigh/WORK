/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-6-10")
public class RefundFeesReport implements org.apache.thrift.TBase<RefundFeesReport, RefundFeesReport._Fields>, java.io.Serializable, Cloneable, Comparable<RefundFeesReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundFeesReport");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField RETURN_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnFee", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CONFIRM_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CONFIRM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CONFIRM_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmEndDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COLLECT_FEES_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFeesDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COLLECT_FEES_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFeesEndDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CHINA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chinaName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDays", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField SUM_RETURN_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("sumReturnFee", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REC_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recLoanDate", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField REC_INTEREST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recInterestDate", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField CONSULTINGFEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("consultingfeeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField EXTENSION_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDays", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField PLAN_CONSULTING_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("planConsultingMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField PLAN_EXTENSION_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("planExtensionMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField PLAN_RETRUN_CONSULTING_FIELD_DESC = new org.apache.thrift.protocol.TField("planRetrunConsulting", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField REC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("recMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField AC_EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("acExtensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField REAL_LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("realLoanDays", org.apache.thrift.protocol.TType.I32, (short)34);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundFeesReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundFeesReportTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public int businessSource; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public double returnFee; // required
  public double confirmMoney; // required
  public String confirmDate; // required
  public String confirmEndDate; // required
  public String businessSourceStr; // required
  public String collectFeesDate; // required
  public String collectFeesEndDate; // required
  public String pmUserName; // required
  public String chinaName; // required
  public double loanAmount; // required
  public int loanDays; // required
  public double poundage; // required
  public String projectNumber; // required
  public int isChechan; // required
  public String sumReturnFee; // required
  public String recLoanDate; // required
  public String recInterestDate; // required
  public double extensionFee; // required
  public double extensionFeeRate; // required
  public double consultingfeeRate; // required
  public int extensionDays; // required
  public double planConsultingMoney; // required
  public double planExtensionMoney; // required
  public double planRetrunConsulting; // required
  public String loanDate; // required
  public double recMoney; // required
  public double acExtensionFee; // required
  public int realLoanDays; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    BUSINESS_SOURCE((short)3, "businessSource"),
    PAGE((short)4, "page"),
    ROWS((short)5, "rows"),
    USER_IDS((short)6, "userIds"),
    RETURN_FEE((short)7, "returnFee"),
    CONFIRM_MONEY((short)8, "confirmMoney"),
    CONFIRM_DATE((short)9, "confirmDate"),
    CONFIRM_END_DATE((short)10, "confirmEndDate"),
    BUSINESS_SOURCE_STR((short)11, "businessSourceStr"),
    COLLECT_FEES_DATE((short)12, "collectFeesDate"),
    COLLECT_FEES_END_DATE((short)13, "collectFeesEndDate"),
    PM_USER_NAME((short)14, "pmUserName"),
    CHINA_NAME((short)15, "chinaName"),
    LOAN_AMOUNT((short)16, "loanAmount"),
    LOAN_DAYS((short)17, "loanDays"),
    POUNDAGE((short)18, "poundage"),
    PROJECT_NUMBER((short)19, "projectNumber"),
    IS_CHECHAN((short)20, "isChechan"),
    SUM_RETURN_FEE((short)21, "sumReturnFee"),
    REC_LOAN_DATE((short)22, "recLoanDate"),
    REC_INTEREST_DATE((short)23, "recInterestDate"),
    EXTENSION_FEE((short)24, "extensionFee"),
    EXTENSION_FEE_RATE((short)25, "extensionFeeRate"),
    CONSULTINGFEE_RATE((short)26, "consultingfeeRate"),
    EXTENSION_DAYS((short)27, "extensionDays"),
    PLAN_CONSULTING_MONEY((short)28, "planConsultingMoney"),
    PLAN_EXTENSION_MONEY((short)29, "planExtensionMoney"),
    PLAN_RETRUN_CONSULTING((short)30, "planRetrunConsulting"),
    LOAN_DATE((short)31, "loanDate"),
    REC_MONEY((short)32, "recMoney"),
    AC_EXTENSION_FEE((short)33, "acExtensionFee"),
    REAL_LOAN_DAYS((short)34, "realLoanDays");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 4: // PAGE
          return PAGE;
        case 5: // ROWS
          return ROWS;
        case 6: // USER_IDS
          return USER_IDS;
        case 7: // RETURN_FEE
          return RETURN_FEE;
        case 8: // CONFIRM_MONEY
          return CONFIRM_MONEY;
        case 9: // CONFIRM_DATE
          return CONFIRM_DATE;
        case 10: // CONFIRM_END_DATE
          return CONFIRM_END_DATE;
        case 11: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 12: // COLLECT_FEES_DATE
          return COLLECT_FEES_DATE;
        case 13: // COLLECT_FEES_END_DATE
          return COLLECT_FEES_END_DATE;
        case 14: // PM_USER_NAME
          return PM_USER_NAME;
        case 15: // CHINA_NAME
          return CHINA_NAME;
        case 16: // LOAN_AMOUNT
          return LOAN_AMOUNT;
        case 17: // LOAN_DAYS
          return LOAN_DAYS;
        case 18: // POUNDAGE
          return POUNDAGE;
        case 19: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 20: // IS_CHECHAN
          return IS_CHECHAN;
        case 21: // SUM_RETURN_FEE
          return SUM_RETURN_FEE;
        case 22: // REC_LOAN_DATE
          return REC_LOAN_DATE;
        case 23: // REC_INTEREST_DATE
          return REC_INTEREST_DATE;
        case 24: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 25: // EXTENSION_FEE_RATE
          return EXTENSION_FEE_RATE;
        case 26: // CONSULTINGFEE_RATE
          return CONSULTINGFEE_RATE;
        case 27: // EXTENSION_DAYS
          return EXTENSION_DAYS;
        case 28: // PLAN_CONSULTING_MONEY
          return PLAN_CONSULTING_MONEY;
        case 29: // PLAN_EXTENSION_MONEY
          return PLAN_EXTENSION_MONEY;
        case 30: // PLAN_RETRUN_CONSULTING
          return PLAN_RETRUN_CONSULTING;
        case 31: // LOAN_DATE
          return LOAN_DATE;
        case 32: // REC_MONEY
          return REC_MONEY;
        case 33: // AC_EXTENSION_FEE
          return AC_EXTENSION_FEE;
        case 34: // REAL_LOAN_DAYS
          return REAL_LOAN_DAYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __BUSINESSSOURCE_ISSET_ID = 1;
  private static final int __PAGE_ISSET_ID = 2;
  private static final int __ROWS_ISSET_ID = 3;
  private static final int __RETURNFEE_ISSET_ID = 4;
  private static final int __CONFIRMMONEY_ISSET_ID = 5;
  private static final int __LOANAMOUNT_ISSET_ID = 6;
  private static final int __LOANDAYS_ISSET_ID = 7;
  private static final int __POUNDAGE_ISSET_ID = 8;
  private static final int __ISCHECHAN_ISSET_ID = 9;
  private static final int __EXTENSIONFEE_ISSET_ID = 10;
  private static final int __EXTENSIONFEERATE_ISSET_ID = 11;
  private static final int __CONSULTINGFEERATE_ISSET_ID = 12;
  private static final int __EXTENSIONDAYS_ISSET_ID = 13;
  private static final int __PLANCONSULTINGMONEY_ISSET_ID = 14;
  private static final int __PLANEXTENSIONMONEY_ISSET_ID = 15;
  private static final int __PLANRETRUNCONSULTING_ISSET_ID = 16;
  private static final int __RECMONEY_ISSET_ID = 17;
  private static final int __ACEXTENSIONFEE_ISSET_ID = 18;
  private static final int __REALLOANDAYS_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RETURN_FEE, new org.apache.thrift.meta_data.FieldMetaData("returnFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONFIRM_MONEY, new org.apache.thrift.meta_data.FieldMetaData("confirmMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONFIRM_DATE, new org.apache.thrift.meta_data.FieldMetaData("confirmDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRM_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("confirmEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECT_FEES_DATE, new org.apache.thrift.meta_data.FieldMetaData("collectFeesDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECT_FEES_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("collectFeesEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHINA_NAME, new org.apache.thrift.meta_data.FieldMetaData("chinaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("loanAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("loanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUM_RETURN_FEE, new org.apache.thrift.meta_data.FieldMetaData("sumReturnFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("recLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_INTEREST_DATE, new org.apache.thrift.meta_data.FieldMetaData("recInterestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("extensionFeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONSULTINGFEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("consultingfeeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_DAYS, new org.apache.thrift.meta_data.FieldMetaData("extensionDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_CONSULTING_MONEY, new org.apache.thrift.meta_data.FieldMetaData("planConsultingMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_EXTENSION_MONEY, new org.apache.thrift.meta_data.FieldMetaData("planExtensionMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAN_RETRUN_CONSULTING, new org.apache.thrift.meta_data.FieldMetaData("planRetrunConsulting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("recMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AC_EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("acExtensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("realLoanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundFeesReport.class, metaDataMap);
  }

  public RefundFeesReport() {
    this.page = 1;

    this.rows = 10;

  }

  public RefundFeesReport(
    int projectId,
    String projectName,
    int businessSource,
    int page,
    int rows,
    List<Integer> userIds,
    double returnFee,
    double confirmMoney,
    String confirmDate,
    String confirmEndDate,
    String businessSourceStr,
    String collectFeesDate,
    String collectFeesEndDate,
    String pmUserName,
    String chinaName,
    double loanAmount,
    int loanDays,
    double poundage,
    String projectNumber,
    int isChechan,
    String sumReturnFee,
    String recLoanDate,
    String recInterestDate,
    double extensionFee,
    double extensionFeeRate,
    double consultingfeeRate,
    int extensionDays,
    double planConsultingMoney,
    double planExtensionMoney,
    double planRetrunConsulting,
    String loanDate,
    double recMoney,
    double acExtensionFee,
    int realLoanDays)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.returnFee = returnFee;
    setReturnFeeIsSet(true);
    this.confirmMoney = confirmMoney;
    setConfirmMoneyIsSet(true);
    this.confirmDate = confirmDate;
    this.confirmEndDate = confirmEndDate;
    this.businessSourceStr = businessSourceStr;
    this.collectFeesDate = collectFeesDate;
    this.collectFeesEndDate = collectFeesEndDate;
    this.pmUserName = pmUserName;
    this.chinaName = chinaName;
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.projectNumber = projectNumber;
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.sumReturnFee = sumReturnFee;
    this.recLoanDate = recLoanDate;
    this.recInterestDate = recInterestDate;
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.extensionFeeRate = extensionFeeRate;
    setExtensionFeeRateIsSet(true);
    this.consultingfeeRate = consultingfeeRate;
    setConsultingfeeRateIsSet(true);
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    this.planConsultingMoney = planConsultingMoney;
    setPlanConsultingMoneyIsSet(true);
    this.planExtensionMoney = planExtensionMoney;
    setPlanExtensionMoneyIsSet(true);
    this.planRetrunConsulting = planRetrunConsulting;
    setPlanRetrunConsultingIsSet(true);
    this.loanDate = loanDate;
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    this.acExtensionFee = acExtensionFee;
    setAcExtensionFeeIsSet(true);
    this.realLoanDays = realLoanDays;
    setRealLoanDaysIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundFeesReport(RefundFeesReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.businessSource = other.businessSource;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.returnFee = other.returnFee;
    this.confirmMoney = other.confirmMoney;
    if (other.isSetConfirmDate()) {
      this.confirmDate = other.confirmDate;
    }
    if (other.isSetConfirmEndDate()) {
      this.confirmEndDate = other.confirmEndDate;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetCollectFeesDate()) {
      this.collectFeesDate = other.collectFeesDate;
    }
    if (other.isSetCollectFeesEndDate()) {
      this.collectFeesEndDate = other.collectFeesEndDate;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetChinaName()) {
      this.chinaName = other.chinaName;
    }
    this.loanAmount = other.loanAmount;
    this.loanDays = other.loanDays;
    this.poundage = other.poundage;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.isChechan = other.isChechan;
    if (other.isSetSumReturnFee()) {
      this.sumReturnFee = other.sumReturnFee;
    }
    if (other.isSetRecLoanDate()) {
      this.recLoanDate = other.recLoanDate;
    }
    if (other.isSetRecInterestDate()) {
      this.recInterestDate = other.recInterestDate;
    }
    this.extensionFee = other.extensionFee;
    this.extensionFeeRate = other.extensionFeeRate;
    this.consultingfeeRate = other.consultingfeeRate;
    this.extensionDays = other.extensionDays;
    this.planConsultingMoney = other.planConsultingMoney;
    this.planExtensionMoney = other.planExtensionMoney;
    this.planRetrunConsulting = other.planRetrunConsulting;
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    this.recMoney = other.recMoney;
    this.acExtensionFee = other.acExtensionFee;
    this.realLoanDays = other.realLoanDays;
  }

  public RefundFeesReport deepCopy() {
    return new RefundFeesReport(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    setReturnFeeIsSet(false);
    this.returnFee = 0.0;
    setConfirmMoneyIsSet(false);
    this.confirmMoney = 0.0;
    this.confirmDate = null;
    this.confirmEndDate = null;
    this.businessSourceStr = null;
    this.collectFeesDate = null;
    this.collectFeesEndDate = null;
    this.pmUserName = null;
    this.chinaName = null;
    setLoanAmountIsSet(false);
    this.loanAmount = 0.0;
    setLoanDaysIsSet(false);
    this.loanDays = 0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    this.projectNumber = null;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    this.sumReturnFee = null;
    this.recLoanDate = null;
    this.recInterestDate = null;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    setExtensionFeeRateIsSet(false);
    this.extensionFeeRate = 0.0;
    setConsultingfeeRateIsSet(false);
    this.consultingfeeRate = 0.0;
    setExtensionDaysIsSet(false);
    this.extensionDays = 0;
    setPlanConsultingMoneyIsSet(false);
    this.planConsultingMoney = 0.0;
    setPlanExtensionMoneyIsSet(false);
    this.planExtensionMoney = 0.0;
    setPlanRetrunConsultingIsSet(false);
    this.planRetrunConsulting = 0.0;
    this.loanDate = null;
    setRecMoneyIsSet(false);
    this.recMoney = 0.0;
    setAcExtensionFeeIsSet(false);
    this.acExtensionFee = 0.0;
    setRealLoanDaysIsSet(false);
    this.realLoanDays = 0;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RefundFeesReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RefundFeesReport setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public RefundFeesReport setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public RefundFeesReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RefundFeesReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public RefundFeesReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public double getReturnFee() {
    return this.returnFee;
  }

  public RefundFeesReport setReturnFee(double returnFee) {
    this.returnFee = returnFee;
    setReturnFeeIsSet(true);
    return this;
  }

  public void unsetReturnFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNFEE_ISSET_ID);
  }

  /** Returns true if field returnFee is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFee() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNFEE_ISSET_ID);
  }

  public void setReturnFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNFEE_ISSET_ID, value);
  }

  public double getConfirmMoney() {
    return this.confirmMoney;
  }

  public RefundFeesReport setConfirmMoney(double confirmMoney) {
    this.confirmMoney = confirmMoney;
    setConfirmMoneyIsSet(true);
    return this;
  }

  public void unsetConfirmMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID);
  }

  /** Returns true if field confirmMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID);
  }

  public void setConfirmMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID, value);
  }

  public String getConfirmDate() {
    return this.confirmDate;
  }

  public RefundFeesReport setConfirmDate(String confirmDate) {
    this.confirmDate = confirmDate;
    return this;
  }

  public void unsetConfirmDate() {
    this.confirmDate = null;
  }

  /** Returns true if field confirmDate is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmDate() {
    return this.confirmDate != null;
  }

  public void setConfirmDateIsSet(boolean value) {
    if (!value) {
      this.confirmDate = null;
    }
  }

  public String getConfirmEndDate() {
    return this.confirmEndDate;
  }

  public RefundFeesReport setConfirmEndDate(String confirmEndDate) {
    this.confirmEndDate = confirmEndDate;
    return this;
  }

  public void unsetConfirmEndDate() {
    this.confirmEndDate = null;
  }

  /** Returns true if field confirmEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmEndDate() {
    return this.confirmEndDate != null;
  }

  public void setConfirmEndDateIsSet(boolean value) {
    if (!value) {
      this.confirmEndDate = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public RefundFeesReport setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public String getCollectFeesDate() {
    return this.collectFeesDate;
  }

  public RefundFeesReport setCollectFeesDate(String collectFeesDate) {
    this.collectFeesDate = collectFeesDate;
    return this;
  }

  public void unsetCollectFeesDate() {
    this.collectFeesDate = null;
  }

  /** Returns true if field collectFeesDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFeesDate() {
    return this.collectFeesDate != null;
  }

  public void setCollectFeesDateIsSet(boolean value) {
    if (!value) {
      this.collectFeesDate = null;
    }
  }

  public String getCollectFeesEndDate() {
    return this.collectFeesEndDate;
  }

  public RefundFeesReport setCollectFeesEndDate(String collectFeesEndDate) {
    this.collectFeesEndDate = collectFeesEndDate;
    return this;
  }

  public void unsetCollectFeesEndDate() {
    this.collectFeesEndDate = null;
  }

  /** Returns true if field collectFeesEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFeesEndDate() {
    return this.collectFeesEndDate != null;
  }

  public void setCollectFeesEndDateIsSet(boolean value) {
    if (!value) {
      this.collectFeesEndDate = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public RefundFeesReport setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getChinaName() {
    return this.chinaName;
  }

  public RefundFeesReport setChinaName(String chinaName) {
    this.chinaName = chinaName;
    return this;
  }

  public void unsetChinaName() {
    this.chinaName = null;
  }

  /** Returns true if field chinaName is set (has been assigned a value) and false otherwise */
  public boolean isSetChinaName() {
    return this.chinaName != null;
  }

  public void setChinaNameIsSet(boolean value) {
    if (!value) {
      this.chinaName = null;
    }
  }

  public double getLoanAmount() {
    return this.loanAmount;
  }

  public RefundFeesReport setLoanAmount(double loanAmount) {
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    return this;
  }

  public void unsetLoanAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  /** Returns true if field loanAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  public void setLoanAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID, value);
  }

  public int getLoanDays() {
    return this.loanDays;
  }

  public RefundFeesReport setLoanDays(int loanDays) {
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    return this;
  }

  public void unsetLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  /** Returns true if field loanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  public void setLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANDAYS_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public RefundFeesReport setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public RefundFeesReport setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public RefundFeesReport setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public String getSumReturnFee() {
    return this.sumReturnFee;
  }

  public RefundFeesReport setSumReturnFee(String sumReturnFee) {
    this.sumReturnFee = sumReturnFee;
    return this;
  }

  public void unsetSumReturnFee() {
    this.sumReturnFee = null;
  }

  /** Returns true if field sumReturnFee is set (has been assigned a value) and false otherwise */
  public boolean isSetSumReturnFee() {
    return this.sumReturnFee != null;
  }

  public void setSumReturnFeeIsSet(boolean value) {
    if (!value) {
      this.sumReturnFee = null;
    }
  }

  public String getRecLoanDate() {
    return this.recLoanDate;
  }

  public RefundFeesReport setRecLoanDate(String recLoanDate) {
    this.recLoanDate = recLoanDate;
    return this;
  }

  public void unsetRecLoanDate() {
    this.recLoanDate = null;
  }

  /** Returns true if field recLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecLoanDate() {
    return this.recLoanDate != null;
  }

  public void setRecLoanDateIsSet(boolean value) {
    if (!value) {
      this.recLoanDate = null;
    }
  }

  public String getRecInterestDate() {
    return this.recInterestDate;
  }

  public RefundFeesReport setRecInterestDate(String recInterestDate) {
    this.recInterestDate = recInterestDate;
    return this;
  }

  public void unsetRecInterestDate() {
    this.recInterestDate = null;
  }

  /** Returns true if field recInterestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecInterestDate() {
    return this.recInterestDate != null;
  }

  public void setRecInterestDateIsSet(boolean value) {
    if (!value) {
      this.recInterestDate = null;
    }
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public RefundFeesReport setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public double getExtensionFeeRate() {
    return this.extensionFeeRate;
  }

  public RefundFeesReport setExtensionFeeRate(double extensionFeeRate) {
    this.extensionFeeRate = extensionFeeRate;
    setExtensionFeeRateIsSet(true);
    return this;
  }

  public void unsetExtensionFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEERATE_ISSET_ID);
  }

  /** Returns true if field extensionFeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEERATE_ISSET_ID);
  }

  public void setExtensionFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEERATE_ISSET_ID, value);
  }

  public double getConsultingfeeRate() {
    return this.consultingfeeRate;
  }

  public RefundFeesReport setConsultingfeeRate(double consultingfeeRate) {
    this.consultingfeeRate = consultingfeeRate;
    setConsultingfeeRateIsSet(true);
    return this;
  }

  public void unsetConsultingfeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSULTINGFEERATE_ISSET_ID);
  }

  /** Returns true if field consultingfeeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetConsultingfeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSULTINGFEERATE_ISSET_ID);
  }

  public void setConsultingfeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSULTINGFEERATE_ISSET_ID, value);
  }

  public int getExtensionDays() {
    return this.extensionDays;
  }

  public RefundFeesReport setExtensionDays(int extensionDays) {
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    return this;
  }

  public void unsetExtensionDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  /** Returns true if field extensionDays is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDays() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  public void setExtensionDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID, value);
  }

  public double getPlanConsultingMoney() {
    return this.planConsultingMoney;
  }

  public RefundFeesReport setPlanConsultingMoney(double planConsultingMoney) {
    this.planConsultingMoney = planConsultingMoney;
    setPlanConsultingMoneyIsSet(true);
    return this;
  }

  public void unsetPlanConsultingMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCONSULTINGMONEY_ISSET_ID);
  }

  /** Returns true if field planConsultingMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanConsultingMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCONSULTINGMONEY_ISSET_ID);
  }

  public void setPlanConsultingMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCONSULTINGMONEY_ISSET_ID, value);
  }

  public double getPlanExtensionMoney() {
    return this.planExtensionMoney;
  }

  public RefundFeesReport setPlanExtensionMoney(double planExtensionMoney) {
    this.planExtensionMoney = planExtensionMoney;
    setPlanExtensionMoneyIsSet(true);
    return this;
  }

  public void unsetPlanExtensionMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANEXTENSIONMONEY_ISSET_ID);
  }

  /** Returns true if field planExtensionMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanExtensionMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANEXTENSIONMONEY_ISSET_ID);
  }

  public void setPlanExtensionMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANEXTENSIONMONEY_ISSET_ID, value);
  }

  public double getPlanRetrunConsulting() {
    return this.planRetrunConsulting;
  }

  public RefundFeesReport setPlanRetrunConsulting(double planRetrunConsulting) {
    this.planRetrunConsulting = planRetrunConsulting;
    setPlanRetrunConsultingIsSet(true);
    return this;
  }

  public void unsetPlanRetrunConsulting() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANRETRUNCONSULTING_ISSET_ID);
  }

  /** Returns true if field planRetrunConsulting is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRetrunConsulting() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANRETRUNCONSULTING_ISSET_ID);
  }

  public void setPlanRetrunConsultingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANRETRUNCONSULTING_ISSET_ID, value);
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public RefundFeesReport setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public double getRecMoney() {
    return this.recMoney;
  }

  public RefundFeesReport setRecMoney(double recMoney) {
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    return this;
  }

  public void unsetRecMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  /** Returns true if field recMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRecMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  public void setRecMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECMONEY_ISSET_ID, value);
  }

  public double getAcExtensionFee() {
    return this.acExtensionFee;
  }

  public RefundFeesReport setAcExtensionFee(double acExtensionFee) {
    this.acExtensionFee = acExtensionFee;
    setAcExtensionFeeIsSet(true);
    return this;
  }

  public void unsetAcExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACEXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field acExtensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetAcExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __ACEXTENSIONFEE_ISSET_ID);
  }

  public void setAcExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACEXTENSIONFEE_ISSET_ID, value);
  }

  public int getRealLoanDays() {
    return this.realLoanDays;
  }

  public RefundFeesReport setRealLoanDays(int realLoanDays) {
    this.realLoanDays = realLoanDays;
    setRealLoanDaysIsSet(true);
    return this;
  }

  public void unsetRealLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALLOANDAYS_ISSET_ID);
  }

  /** Returns true if field realLoanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetRealLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __REALLOANDAYS_ISSET_ID);
  }

  public void setRealLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALLOANDAYS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case RETURN_FEE:
      if (value == null) {
        unsetReturnFee();
      } else {
        setReturnFee((Double)value);
      }
      break;

    case CONFIRM_MONEY:
      if (value == null) {
        unsetConfirmMoney();
      } else {
        setConfirmMoney((Double)value);
      }
      break;

    case CONFIRM_DATE:
      if (value == null) {
        unsetConfirmDate();
      } else {
        setConfirmDate((String)value);
      }
      break;

    case CONFIRM_END_DATE:
      if (value == null) {
        unsetConfirmEndDate();
      } else {
        setConfirmEndDate((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case COLLECT_FEES_DATE:
      if (value == null) {
        unsetCollectFeesDate();
      } else {
        setCollectFeesDate((String)value);
      }
      break;

    case COLLECT_FEES_END_DATE:
      if (value == null) {
        unsetCollectFeesEndDate();
      } else {
        setCollectFeesEndDate((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case CHINA_NAME:
      if (value == null) {
        unsetChinaName();
      } else {
        setChinaName((String)value);
      }
      break;

    case LOAN_AMOUNT:
      if (value == null) {
        unsetLoanAmount();
      } else {
        setLoanAmount((Double)value);
      }
      break;

    case LOAN_DAYS:
      if (value == null) {
        unsetLoanDays();
      } else {
        setLoanDays((Integer)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case SUM_RETURN_FEE:
      if (value == null) {
        unsetSumReturnFee();
      } else {
        setSumReturnFee((String)value);
      }
      break;

    case REC_LOAN_DATE:
      if (value == null) {
        unsetRecLoanDate();
      } else {
        setRecLoanDate((String)value);
      }
      break;

    case REC_INTEREST_DATE:
      if (value == null) {
        unsetRecInterestDate();
      } else {
        setRecInterestDate((String)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case EXTENSION_FEE_RATE:
      if (value == null) {
        unsetExtensionFeeRate();
      } else {
        setExtensionFeeRate((Double)value);
      }
      break;

    case CONSULTINGFEE_RATE:
      if (value == null) {
        unsetConsultingfeeRate();
      } else {
        setConsultingfeeRate((Double)value);
      }
      break;

    case EXTENSION_DAYS:
      if (value == null) {
        unsetExtensionDays();
      } else {
        setExtensionDays((Integer)value);
      }
      break;

    case PLAN_CONSULTING_MONEY:
      if (value == null) {
        unsetPlanConsultingMoney();
      } else {
        setPlanConsultingMoney((Double)value);
      }
      break;

    case PLAN_EXTENSION_MONEY:
      if (value == null) {
        unsetPlanExtensionMoney();
      } else {
        setPlanExtensionMoney((Double)value);
      }
      break;

    case PLAN_RETRUN_CONSULTING:
      if (value == null) {
        unsetPlanRetrunConsulting();
      } else {
        setPlanRetrunConsulting((Double)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case REC_MONEY:
      if (value == null) {
        unsetRecMoney();
      } else {
        setRecMoney((Double)value);
      }
      break;

    case AC_EXTENSION_FEE:
      if (value == null) {
        unsetAcExtensionFee();
      } else {
        setAcExtensionFee((Double)value);
      }
      break;

    case REAL_LOAN_DAYS:
      if (value == null) {
        unsetRealLoanDays();
      } else {
        setRealLoanDays((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case RETURN_FEE:
      return Double.valueOf(getReturnFee());

    case CONFIRM_MONEY:
      return Double.valueOf(getConfirmMoney());

    case CONFIRM_DATE:
      return getConfirmDate();

    case CONFIRM_END_DATE:
      return getConfirmEndDate();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case COLLECT_FEES_DATE:
      return getCollectFeesDate();

    case COLLECT_FEES_END_DATE:
      return getCollectFeesEndDate();

    case PM_USER_NAME:
      return getPmUserName();

    case CHINA_NAME:
      return getChinaName();

    case LOAN_AMOUNT:
      return Double.valueOf(getLoanAmount());

    case LOAN_DAYS:
      return Integer.valueOf(getLoanDays());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case SUM_RETURN_FEE:
      return getSumReturnFee();

    case REC_LOAN_DATE:
      return getRecLoanDate();

    case REC_INTEREST_DATE:
      return getRecInterestDate();

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case EXTENSION_FEE_RATE:
      return Double.valueOf(getExtensionFeeRate());

    case CONSULTINGFEE_RATE:
      return Double.valueOf(getConsultingfeeRate());

    case EXTENSION_DAYS:
      return Integer.valueOf(getExtensionDays());

    case PLAN_CONSULTING_MONEY:
      return Double.valueOf(getPlanConsultingMoney());

    case PLAN_EXTENSION_MONEY:
      return Double.valueOf(getPlanExtensionMoney());

    case PLAN_RETRUN_CONSULTING:
      return Double.valueOf(getPlanRetrunConsulting());

    case LOAN_DATE:
      return getLoanDate();

    case REC_MONEY:
      return Double.valueOf(getRecMoney());

    case AC_EXTENSION_FEE:
      return Double.valueOf(getAcExtensionFee());

    case REAL_LOAN_DAYS:
      return Integer.valueOf(getRealLoanDays());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case RETURN_FEE:
      return isSetReturnFee();
    case CONFIRM_MONEY:
      return isSetConfirmMoney();
    case CONFIRM_DATE:
      return isSetConfirmDate();
    case CONFIRM_END_DATE:
      return isSetConfirmEndDate();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case COLLECT_FEES_DATE:
      return isSetCollectFeesDate();
    case COLLECT_FEES_END_DATE:
      return isSetCollectFeesEndDate();
    case PM_USER_NAME:
      return isSetPmUserName();
    case CHINA_NAME:
      return isSetChinaName();
    case LOAN_AMOUNT:
      return isSetLoanAmount();
    case LOAN_DAYS:
      return isSetLoanDays();
    case POUNDAGE:
      return isSetPoundage();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case IS_CHECHAN:
      return isSetIsChechan();
    case SUM_RETURN_FEE:
      return isSetSumReturnFee();
    case REC_LOAN_DATE:
      return isSetRecLoanDate();
    case REC_INTEREST_DATE:
      return isSetRecInterestDate();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case EXTENSION_FEE_RATE:
      return isSetExtensionFeeRate();
    case CONSULTINGFEE_RATE:
      return isSetConsultingfeeRate();
    case EXTENSION_DAYS:
      return isSetExtensionDays();
    case PLAN_CONSULTING_MONEY:
      return isSetPlanConsultingMoney();
    case PLAN_EXTENSION_MONEY:
      return isSetPlanExtensionMoney();
    case PLAN_RETRUN_CONSULTING:
      return isSetPlanRetrunConsulting();
    case LOAN_DATE:
      return isSetLoanDate();
    case REC_MONEY:
      return isSetRecMoney();
    case AC_EXTENSION_FEE:
      return isSetAcExtensionFee();
    case REAL_LOAN_DAYS:
      return isSetRealLoanDays();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundFeesReport)
      return this.equals((RefundFeesReport)that);
    return false;
  }

  public boolean equals(RefundFeesReport that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_returnFee = true;
    boolean that_present_returnFee = true;
    if (this_present_returnFee || that_present_returnFee) {
      if (!(this_present_returnFee && that_present_returnFee))
        return false;
      if (this.returnFee != that.returnFee)
        return false;
    }

    boolean this_present_confirmMoney = true;
    boolean that_present_confirmMoney = true;
    if (this_present_confirmMoney || that_present_confirmMoney) {
      if (!(this_present_confirmMoney && that_present_confirmMoney))
        return false;
      if (this.confirmMoney != that.confirmMoney)
        return false;
    }

    boolean this_present_confirmDate = true && this.isSetConfirmDate();
    boolean that_present_confirmDate = true && that.isSetConfirmDate();
    if (this_present_confirmDate || that_present_confirmDate) {
      if (!(this_present_confirmDate && that_present_confirmDate))
        return false;
      if (!this.confirmDate.equals(that.confirmDate))
        return false;
    }

    boolean this_present_confirmEndDate = true && this.isSetConfirmEndDate();
    boolean that_present_confirmEndDate = true && that.isSetConfirmEndDate();
    if (this_present_confirmEndDate || that_present_confirmEndDate) {
      if (!(this_present_confirmEndDate && that_present_confirmEndDate))
        return false;
      if (!this.confirmEndDate.equals(that.confirmEndDate))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_collectFeesDate = true && this.isSetCollectFeesDate();
    boolean that_present_collectFeesDate = true && that.isSetCollectFeesDate();
    if (this_present_collectFeesDate || that_present_collectFeesDate) {
      if (!(this_present_collectFeesDate && that_present_collectFeesDate))
        return false;
      if (!this.collectFeesDate.equals(that.collectFeesDate))
        return false;
    }

    boolean this_present_collectFeesEndDate = true && this.isSetCollectFeesEndDate();
    boolean that_present_collectFeesEndDate = true && that.isSetCollectFeesEndDate();
    if (this_present_collectFeesEndDate || that_present_collectFeesEndDate) {
      if (!(this_present_collectFeesEndDate && that_present_collectFeesEndDate))
        return false;
      if (!this.collectFeesEndDate.equals(that.collectFeesEndDate))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_chinaName = true && this.isSetChinaName();
    boolean that_present_chinaName = true && that.isSetChinaName();
    if (this_present_chinaName || that_present_chinaName) {
      if (!(this_present_chinaName && that_present_chinaName))
        return false;
      if (!this.chinaName.equals(that.chinaName))
        return false;
    }

    boolean this_present_loanAmount = true;
    boolean that_present_loanAmount = true;
    if (this_present_loanAmount || that_present_loanAmount) {
      if (!(this_present_loanAmount && that_present_loanAmount))
        return false;
      if (this.loanAmount != that.loanAmount)
        return false;
    }

    boolean this_present_loanDays = true;
    boolean that_present_loanDays = true;
    if (this_present_loanDays || that_present_loanDays) {
      if (!(this_present_loanDays && that_present_loanDays))
        return false;
      if (this.loanDays != that.loanDays)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_sumReturnFee = true && this.isSetSumReturnFee();
    boolean that_present_sumReturnFee = true && that.isSetSumReturnFee();
    if (this_present_sumReturnFee || that_present_sumReturnFee) {
      if (!(this_present_sumReturnFee && that_present_sumReturnFee))
        return false;
      if (!this.sumReturnFee.equals(that.sumReturnFee))
        return false;
    }

    boolean this_present_recLoanDate = true && this.isSetRecLoanDate();
    boolean that_present_recLoanDate = true && that.isSetRecLoanDate();
    if (this_present_recLoanDate || that_present_recLoanDate) {
      if (!(this_present_recLoanDate && that_present_recLoanDate))
        return false;
      if (!this.recLoanDate.equals(that.recLoanDate))
        return false;
    }

    boolean this_present_recInterestDate = true && this.isSetRecInterestDate();
    boolean that_present_recInterestDate = true && that.isSetRecInterestDate();
    if (this_present_recInterestDate || that_present_recInterestDate) {
      if (!(this_present_recInterestDate && that_present_recInterestDate))
        return false;
      if (!this.recInterestDate.equals(that.recInterestDate))
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_extensionFeeRate = true;
    boolean that_present_extensionFeeRate = true;
    if (this_present_extensionFeeRate || that_present_extensionFeeRate) {
      if (!(this_present_extensionFeeRate && that_present_extensionFeeRate))
        return false;
      if (this.extensionFeeRate != that.extensionFeeRate)
        return false;
    }

    boolean this_present_consultingfeeRate = true;
    boolean that_present_consultingfeeRate = true;
    if (this_present_consultingfeeRate || that_present_consultingfeeRate) {
      if (!(this_present_consultingfeeRate && that_present_consultingfeeRate))
        return false;
      if (this.consultingfeeRate != that.consultingfeeRate)
        return false;
    }

    boolean this_present_extensionDays = true;
    boolean that_present_extensionDays = true;
    if (this_present_extensionDays || that_present_extensionDays) {
      if (!(this_present_extensionDays && that_present_extensionDays))
        return false;
      if (this.extensionDays != that.extensionDays)
        return false;
    }

    boolean this_present_planConsultingMoney = true;
    boolean that_present_planConsultingMoney = true;
    if (this_present_planConsultingMoney || that_present_planConsultingMoney) {
      if (!(this_present_planConsultingMoney && that_present_planConsultingMoney))
        return false;
      if (this.planConsultingMoney != that.planConsultingMoney)
        return false;
    }

    boolean this_present_planExtensionMoney = true;
    boolean that_present_planExtensionMoney = true;
    if (this_present_planExtensionMoney || that_present_planExtensionMoney) {
      if (!(this_present_planExtensionMoney && that_present_planExtensionMoney))
        return false;
      if (this.planExtensionMoney != that.planExtensionMoney)
        return false;
    }

    boolean this_present_planRetrunConsulting = true;
    boolean that_present_planRetrunConsulting = true;
    if (this_present_planRetrunConsulting || that_present_planRetrunConsulting) {
      if (!(this_present_planRetrunConsulting && that_present_planRetrunConsulting))
        return false;
      if (this.planRetrunConsulting != that.planRetrunConsulting)
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_recMoney = true;
    boolean that_present_recMoney = true;
    if (this_present_recMoney || that_present_recMoney) {
      if (!(this_present_recMoney && that_present_recMoney))
        return false;
      if (this.recMoney != that.recMoney)
        return false;
    }

    boolean this_present_acExtensionFee = true;
    boolean that_present_acExtensionFee = true;
    if (this_present_acExtensionFee || that_present_acExtensionFee) {
      if (!(this_present_acExtensionFee && that_present_acExtensionFee))
        return false;
      if (this.acExtensionFee != that.acExtensionFee)
        return false;
    }

    boolean this_present_realLoanDays = true;
    boolean that_present_realLoanDays = true;
    if (this_present_realLoanDays || that_present_realLoanDays) {
      if (!(this_present_realLoanDays && that_present_realLoanDays))
        return false;
      if (this.realLoanDays != that.realLoanDays)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_returnFee = true;
    list.add(present_returnFee);
    if (present_returnFee)
      list.add(returnFee);

    boolean present_confirmMoney = true;
    list.add(present_confirmMoney);
    if (present_confirmMoney)
      list.add(confirmMoney);

    boolean present_confirmDate = true && (isSetConfirmDate());
    list.add(present_confirmDate);
    if (present_confirmDate)
      list.add(confirmDate);

    boolean present_confirmEndDate = true && (isSetConfirmEndDate());
    list.add(present_confirmEndDate);
    if (present_confirmEndDate)
      list.add(confirmEndDate);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_collectFeesDate = true && (isSetCollectFeesDate());
    list.add(present_collectFeesDate);
    if (present_collectFeesDate)
      list.add(collectFeesDate);

    boolean present_collectFeesEndDate = true && (isSetCollectFeesEndDate());
    list.add(present_collectFeesEndDate);
    if (present_collectFeesEndDate)
      list.add(collectFeesEndDate);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_chinaName = true && (isSetChinaName());
    list.add(present_chinaName);
    if (present_chinaName)
      list.add(chinaName);

    boolean present_loanAmount = true;
    list.add(present_loanAmount);
    if (present_loanAmount)
      list.add(loanAmount);

    boolean present_loanDays = true;
    list.add(present_loanDays);
    if (present_loanDays)
      list.add(loanDays);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_sumReturnFee = true && (isSetSumReturnFee());
    list.add(present_sumReturnFee);
    if (present_sumReturnFee)
      list.add(sumReturnFee);

    boolean present_recLoanDate = true && (isSetRecLoanDate());
    list.add(present_recLoanDate);
    if (present_recLoanDate)
      list.add(recLoanDate);

    boolean present_recInterestDate = true && (isSetRecInterestDate());
    list.add(present_recInterestDate);
    if (present_recInterestDate)
      list.add(recInterestDate);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_extensionFeeRate = true;
    list.add(present_extensionFeeRate);
    if (present_extensionFeeRate)
      list.add(extensionFeeRate);

    boolean present_consultingfeeRate = true;
    list.add(present_consultingfeeRate);
    if (present_consultingfeeRate)
      list.add(consultingfeeRate);

    boolean present_extensionDays = true;
    list.add(present_extensionDays);
    if (present_extensionDays)
      list.add(extensionDays);

    boolean present_planConsultingMoney = true;
    list.add(present_planConsultingMoney);
    if (present_planConsultingMoney)
      list.add(planConsultingMoney);

    boolean present_planExtensionMoney = true;
    list.add(present_planExtensionMoney);
    if (present_planExtensionMoney)
      list.add(planExtensionMoney);

    boolean present_planRetrunConsulting = true;
    list.add(present_planRetrunConsulting);
    if (present_planRetrunConsulting)
      list.add(planRetrunConsulting);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_recMoney = true;
    list.add(present_recMoney);
    if (present_recMoney)
      list.add(recMoney);

    boolean present_acExtensionFee = true;
    list.add(present_acExtensionFee);
    if (present_acExtensionFee)
      list.add(acExtensionFee);

    boolean present_realLoanDays = true;
    list.add(present_realLoanDays);
    if (present_realLoanDays)
      list.add(realLoanDays);

    return list.hashCode();
  }

  @Override
  public int compareTo(RefundFeesReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFee()).compareTo(other.isSetReturnFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnFee, other.returnFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmMoney()).compareTo(other.isSetConfirmMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmMoney, other.confirmMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmDate()).compareTo(other.isSetConfirmDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmDate, other.confirmDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmEndDate()).compareTo(other.isSetConfirmEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmEndDate, other.confirmEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFeesDate()).compareTo(other.isSetCollectFeesDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFeesDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFeesDate, other.collectFeesDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFeesEndDate()).compareTo(other.isSetCollectFeesEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFeesEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFeesEndDate, other.collectFeesEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChinaName()).compareTo(other.isSetChinaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chinaName, other.chinaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmount()).compareTo(other.isSetLoanAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmount, other.loanAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDays()).compareTo(other.isSetLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDays, other.loanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumReturnFee()).compareTo(other.isSetSumReturnFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumReturnFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumReturnFee, other.sumReturnFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecLoanDate()).compareTo(other.isSetRecLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recLoanDate, other.recLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecInterestDate()).compareTo(other.isSetRecInterestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecInterestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recInterestDate, other.recInterestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFeeRate()).compareTo(other.isSetExtensionFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFeeRate, other.extensionFeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsultingfeeRate()).compareTo(other.isSetConsultingfeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsultingfeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consultingfeeRate, other.consultingfeeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDays()).compareTo(other.isSetExtensionDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDays, other.extensionDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanConsultingMoney()).compareTo(other.isSetPlanConsultingMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanConsultingMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planConsultingMoney, other.planConsultingMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanExtensionMoney()).compareTo(other.isSetPlanExtensionMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanExtensionMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planExtensionMoney, other.planExtensionMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRetrunConsulting()).compareTo(other.isSetPlanRetrunConsulting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRetrunConsulting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRetrunConsulting, other.planRetrunConsulting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecMoney()).compareTo(other.isSetRecMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recMoney, other.recMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcExtensionFee()).compareTo(other.isSetAcExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acExtensionFee, other.acExtensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealLoanDays()).compareTo(other.isSetRealLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realLoanDays, other.realLoanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundFeesReport(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnFee:");
    sb.append(this.returnFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmMoney:");
    sb.append(this.confirmMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmDate:");
    if (this.confirmDate == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmEndDate:");
    if (this.confirmEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFeesDate:");
    if (this.collectFeesDate == null) {
      sb.append("null");
    } else {
      sb.append(this.collectFeesDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFeesEndDate:");
    if (this.collectFeesEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.collectFeesEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chinaName:");
    if (this.chinaName == null) {
      sb.append("null");
    } else {
      sb.append(this.chinaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmount:");
    sb.append(this.loanAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDays:");
    sb.append(this.loanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sumReturnFee:");
    if (this.sumReturnFee == null) {
      sb.append("null");
    } else {
      sb.append(this.sumReturnFee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recLoanDate:");
    if (this.recLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recInterestDate:");
    if (this.recInterestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recInterestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFeeRate:");
    sb.append(this.extensionFeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consultingfeeRate:");
    sb.append(this.consultingfeeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDays:");
    sb.append(this.extensionDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planConsultingMoney:");
    sb.append(this.planConsultingMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planExtensionMoney:");
    sb.append(this.planExtensionMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRetrunConsulting:");
    sb.append(this.planRetrunConsulting);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recMoney:");
    sb.append(this.recMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acExtensionFee:");
    sb.append(this.acExtensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realLoanDays:");
    sb.append(this.realLoanDays);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundFeesReportStandardSchemeFactory implements SchemeFactory {
    public RefundFeesReportStandardScheme getScheme() {
      return new RefundFeesReportStandardScheme();
    }
  }

  private static class RefundFeesReportStandardScheme extends StandardScheme<RefundFeesReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundFeesReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list72.size);
                int _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readI32();
                  struct.userIds.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RETURN_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.returnFee = iprot.readDouble();
              struct.setReturnFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONFIRM_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confirmMoney = iprot.readDouble();
              struct.setConfirmMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONFIRM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmDate = iprot.readString();
              struct.setConfirmDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONFIRM_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmEndDate = iprot.readString();
              struct.setConfirmEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COLLECT_FEES_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectFeesDate = iprot.readString();
              struct.setCollectFeesDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COLLECT_FEES_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectFeesEndDate = iprot.readString();
              struct.setCollectFeesEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHINA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chinaName = iprot.readString();
              struct.setChinaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmount = iprot.readDouble();
              struct.setLoanAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanDays = iprot.readI32();
              struct.setLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SUM_RETURN_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sumReturnFee = iprot.readString();
              struct.setSumReturnFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REC_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recLoanDate = iprot.readString();
              struct.setRecLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REC_INTEREST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recInterestDate = iprot.readString();
              struct.setRecInterestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EXTENSION_FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFeeRate = iprot.readDouble();
              struct.setExtensionFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CONSULTINGFEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consultingfeeRate = iprot.readDouble();
              struct.setConsultingfeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // EXTENSION_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionDays = iprot.readI32();
              struct.setExtensionDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PLAN_CONSULTING_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planConsultingMoney = iprot.readDouble();
              struct.setPlanConsultingMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PLAN_EXTENSION_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planExtensionMoney = iprot.readDouble();
              struct.setPlanExtensionMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PLAN_RETRUN_CONSULTING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planRetrunConsulting = iprot.readDouble();
              struct.setPlanRetrunConsultingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // REC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recMoney = iprot.readDouble();
              struct.setRecMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // AC_EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.acExtensionFee = iprot.readDouble();
              struct.setAcExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // REAL_LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.realLoanDays = iprot.readI32();
              struct.setRealLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundFeesReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter75 : struct.userIds)
          {
            oprot.writeI32(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETURN_FEE_FIELD_DESC);
      oprot.writeDouble(struct.returnFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.confirmMoney);
      oprot.writeFieldEnd();
      if (struct.confirmDate != null) {
        oprot.writeFieldBegin(CONFIRM_DATE_FIELD_DESC);
        oprot.writeString(struct.confirmDate);
        oprot.writeFieldEnd();
      }
      if (struct.confirmEndDate != null) {
        oprot.writeFieldBegin(CONFIRM_END_DATE_FIELD_DESC);
        oprot.writeString(struct.confirmEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.collectFeesDate != null) {
        oprot.writeFieldBegin(COLLECT_FEES_DATE_FIELD_DESC);
        oprot.writeString(struct.collectFeesDate);
        oprot.writeFieldEnd();
      }
      if (struct.collectFeesEndDate != null) {
        oprot.writeFieldBegin(COLLECT_FEES_END_DATE_FIELD_DESC);
        oprot.writeString(struct.collectFeesEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.chinaName != null) {
        oprot.writeFieldBegin(CHINA_NAME_FIELD_DESC);
        oprot.writeString(struct.chinaName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.loanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      if (struct.sumReturnFee != null) {
        oprot.writeFieldBegin(SUM_RETURN_FEE_FIELD_DESC);
        oprot.writeString(struct.sumReturnFee);
        oprot.writeFieldEnd();
      }
      if (struct.recLoanDate != null) {
        oprot.writeFieldBegin(REC_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.recLoanDate);
        oprot.writeFieldEnd();
      }
      if (struct.recInterestDate != null) {
        oprot.writeFieldBegin(REC_INTEREST_DATE_FIELD_DESC);
        oprot.writeString(struct.recInterestDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFeeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONSULTINGFEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.consultingfeeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_DAYS_FIELD_DESC);
      oprot.writeI32(struct.extensionDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_CONSULTING_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.planConsultingMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_EXTENSION_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.planExtensionMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_RETRUN_CONSULTING_FIELD_DESC);
      oprot.writeDouble(struct.planRetrunConsulting);
      oprot.writeFieldEnd();
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.recMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AC_EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.acExtensionFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.realLoanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundFeesReportTupleSchemeFactory implements SchemeFactory {
    public RefundFeesReportTupleScheme getScheme() {
      return new RefundFeesReportTupleScheme();
    }
  }

  private static class RefundFeesReportTupleScheme extends TupleScheme<RefundFeesReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundFeesReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(2);
      }
      if (struct.isSetPage()) {
        optionals.set(3);
      }
      if (struct.isSetRows()) {
        optionals.set(4);
      }
      if (struct.isSetUserIds()) {
        optionals.set(5);
      }
      if (struct.isSetReturnFee()) {
        optionals.set(6);
      }
      if (struct.isSetConfirmMoney()) {
        optionals.set(7);
      }
      if (struct.isSetConfirmDate()) {
        optionals.set(8);
      }
      if (struct.isSetConfirmEndDate()) {
        optionals.set(9);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(10);
      }
      if (struct.isSetCollectFeesDate()) {
        optionals.set(11);
      }
      if (struct.isSetCollectFeesEndDate()) {
        optionals.set(12);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(13);
      }
      if (struct.isSetChinaName()) {
        optionals.set(14);
      }
      if (struct.isSetLoanAmount()) {
        optionals.set(15);
      }
      if (struct.isSetLoanDays()) {
        optionals.set(16);
      }
      if (struct.isSetPoundage()) {
        optionals.set(17);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(18);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(19);
      }
      if (struct.isSetSumReturnFee()) {
        optionals.set(20);
      }
      if (struct.isSetRecLoanDate()) {
        optionals.set(21);
      }
      if (struct.isSetRecInterestDate()) {
        optionals.set(22);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(23);
      }
      if (struct.isSetExtensionFeeRate()) {
        optionals.set(24);
      }
      if (struct.isSetConsultingfeeRate()) {
        optionals.set(25);
      }
      if (struct.isSetExtensionDays()) {
        optionals.set(26);
      }
      if (struct.isSetPlanConsultingMoney()) {
        optionals.set(27);
      }
      if (struct.isSetPlanExtensionMoney()) {
        optionals.set(28);
      }
      if (struct.isSetPlanRetrunConsulting()) {
        optionals.set(29);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(30);
      }
      if (struct.isSetRecMoney()) {
        optionals.set(31);
      }
      if (struct.isSetAcExtensionFee()) {
        optionals.set(32);
      }
      if (struct.isSetRealLoanDays()) {
        optionals.set(33);
      }
      oprot.writeBitSet(optionals, 34);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter76 : struct.userIds)
          {
            oprot.writeI32(_iter76);
          }
        }
      }
      if (struct.isSetReturnFee()) {
        oprot.writeDouble(struct.returnFee);
      }
      if (struct.isSetConfirmMoney()) {
        oprot.writeDouble(struct.confirmMoney);
      }
      if (struct.isSetConfirmDate()) {
        oprot.writeString(struct.confirmDate);
      }
      if (struct.isSetConfirmEndDate()) {
        oprot.writeString(struct.confirmEndDate);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetCollectFeesDate()) {
        oprot.writeString(struct.collectFeesDate);
      }
      if (struct.isSetCollectFeesEndDate()) {
        oprot.writeString(struct.collectFeesEndDate);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetChinaName()) {
        oprot.writeString(struct.chinaName);
      }
      if (struct.isSetLoanAmount()) {
        oprot.writeDouble(struct.loanAmount);
      }
      if (struct.isSetLoanDays()) {
        oprot.writeI32(struct.loanDays);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetSumReturnFee()) {
        oprot.writeString(struct.sumReturnFee);
      }
      if (struct.isSetRecLoanDate()) {
        oprot.writeString(struct.recLoanDate);
      }
      if (struct.isSetRecInterestDate()) {
        oprot.writeString(struct.recInterestDate);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetExtensionFeeRate()) {
        oprot.writeDouble(struct.extensionFeeRate);
      }
      if (struct.isSetConsultingfeeRate()) {
        oprot.writeDouble(struct.consultingfeeRate);
      }
      if (struct.isSetExtensionDays()) {
        oprot.writeI32(struct.extensionDays);
      }
      if (struct.isSetPlanConsultingMoney()) {
        oprot.writeDouble(struct.planConsultingMoney);
      }
      if (struct.isSetPlanExtensionMoney()) {
        oprot.writeDouble(struct.planExtensionMoney);
      }
      if (struct.isSetPlanRetrunConsulting()) {
        oprot.writeDouble(struct.planRetrunConsulting);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetRecMoney()) {
        oprot.writeDouble(struct.recMoney);
      }
      if (struct.isSetAcExtensionFee()) {
        oprot.writeDouble(struct.acExtensionFee);
      }
      if (struct.isSetRealLoanDays()) {
        oprot.writeI32(struct.realLoanDays);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundFeesReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(34);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list77.size);
          int _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readI32();
            struct.userIds.add(_elem78);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.returnFee = iprot.readDouble();
        struct.setReturnFeeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.confirmMoney = iprot.readDouble();
        struct.setConfirmMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.confirmDate = iprot.readString();
        struct.setConfirmDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.confirmEndDate = iprot.readString();
        struct.setConfirmEndDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(11)) {
        struct.collectFeesDate = iprot.readString();
        struct.setCollectFeesDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.collectFeesEndDate = iprot.readString();
        struct.setCollectFeesEndDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.chinaName = iprot.readString();
        struct.setChinaNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanAmount = iprot.readDouble();
        struct.setLoanAmountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.loanDays = iprot.readI32();
        struct.setLoanDaysIsSet(true);
      }
      if (incoming.get(17)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(18)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(19)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(20)) {
        struct.sumReturnFee = iprot.readString();
        struct.setSumReturnFeeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.recLoanDate = iprot.readString();
        struct.setRecLoanDateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.recInterestDate = iprot.readString();
        struct.setRecInterestDateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.extensionFeeRate = iprot.readDouble();
        struct.setExtensionFeeRateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.consultingfeeRate = iprot.readDouble();
        struct.setConsultingfeeRateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.extensionDays = iprot.readI32();
        struct.setExtensionDaysIsSet(true);
      }
      if (incoming.get(27)) {
        struct.planConsultingMoney = iprot.readDouble();
        struct.setPlanConsultingMoneyIsSet(true);
      }
      if (incoming.get(28)) {
        struct.planExtensionMoney = iprot.readDouble();
        struct.setPlanExtensionMoneyIsSet(true);
      }
      if (incoming.get(29)) {
        struct.planRetrunConsulting = iprot.readDouble();
        struct.setPlanRetrunConsultingIsSet(true);
      }
      if (incoming.get(30)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(31)) {
        struct.recMoney = iprot.readDouble();
        struct.setRecMoneyIsSet(true);
      }
      if (incoming.get(32)) {
        struct.acExtensionFee = iprot.readDouble();
        struct.setAcExtensionFeeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.realLoanDays = iprot.readI32();
        struct.setRealLoanDaysIsSet(true);
      }
    }
  }

}


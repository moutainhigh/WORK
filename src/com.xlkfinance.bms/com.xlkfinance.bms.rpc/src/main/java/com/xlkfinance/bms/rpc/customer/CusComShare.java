/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComShare implements org.apache.thrift.TBase<CusComShare, CusComShare._Fields>, java.io.Serializable, Cloneable, Comparable<CusComShare> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComShare");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SHARE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SHARE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shareName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INV_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("invMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField INV_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("invWay", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SHARE_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("shareRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CUS_COM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SHARE_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shareTypeName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INV_WAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("invWayName", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComShareStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComShareTupleSchemeFactory());
  }

  public int pid; // required
  public CusComBase cusComBase; // required
  public int shareType; // required
  public String shareName; // required
  public double invMoney; // required
  public int invWay; // required
  public double shareRatio; // required
  public String remark; // required
  public int status; // required
  public int cusComId; // required
  public String shareTypeName; // required
  public String invWayName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_COM_BASE((short)2, "cusComBase"),
    SHARE_TYPE((short)4, "shareType"),
    SHARE_NAME((short)5, "shareName"),
    INV_MONEY((short)6, "invMoney"),
    INV_WAY((short)7, "invWay"),
    SHARE_RATIO((short)8, "shareRatio"),
    REMARK((short)3, "remark"),
    STATUS((short)9, "status"),
    CUS_COM_ID((short)10, "cusComId"),
    SHARE_TYPE_NAME((short)11, "shareTypeName"),
    INV_WAY_NAME((short)12, "invWayName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 4: // SHARE_TYPE
          return SHARE_TYPE;
        case 5: // SHARE_NAME
          return SHARE_NAME;
        case 6: // INV_MONEY
          return INV_MONEY;
        case 7: // INV_WAY
          return INV_WAY;
        case 8: // SHARE_RATIO
          return SHARE_RATIO;
        case 3: // REMARK
          return REMARK;
        case 9: // STATUS
          return STATUS;
        case 10: // CUS_COM_ID
          return CUS_COM_ID;
        case 11: // SHARE_TYPE_NAME
          return SHARE_TYPE_NAME;
        case 12: // INV_WAY_NAME
          return INV_WAY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __SHARETYPE_ISSET_ID = 1;
  private static final int __INVMONEY_ISSET_ID = 2;
  private static final int __INVWAY_ISSET_ID = 3;
  private static final int __SHARERATIO_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __CUSCOMID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.SHARE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("shareType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_NAME, new org.apache.thrift.meta_data.FieldMetaData("shareName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INV_MONEY, new org.apache.thrift.meta_data.FieldMetaData("invMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INV_WAY, new org.apache.thrift.meta_data.FieldMetaData("invWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_RATIO, new org.apache.thrift.meta_data.FieldMetaData("shareRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_ID, new org.apache.thrift.meta_data.FieldMetaData("cusComId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("shareTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INV_WAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("invWayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComShare.class, metaDataMap);
  }

  public CusComShare() {
  }

  public CusComShare(
    int pid,
    CusComBase cusComBase,
    int shareType,
    String shareName,
    double invMoney,
    int invWay,
    double shareRatio,
    String remark,
    int status,
    int cusComId,
    String shareTypeName,
    String invWayName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusComBase = cusComBase;
    this.shareType = shareType;
    setShareTypeIsSet(true);
    this.shareName = shareName;
    this.invMoney = invMoney;
    setInvMoneyIsSet(true);
    this.invWay = invWay;
    setInvWayIsSet(true);
    this.shareRatio = shareRatio;
    setShareRatioIsSet(true);
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.cusComId = cusComId;
    setCusComIdIsSet(true);
    this.shareTypeName = shareTypeName;
    this.invWayName = invWayName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComShare(CusComShare other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    this.shareType = other.shareType;
    if (other.isSetShareName()) {
      this.shareName = other.shareName;
    }
    this.invMoney = other.invMoney;
    this.invWay = other.invWay;
    this.shareRatio = other.shareRatio;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    this.cusComId = other.cusComId;
    if (other.isSetShareTypeName()) {
      this.shareTypeName = other.shareTypeName;
    }
    if (other.isSetInvWayName()) {
      this.invWayName = other.invWayName;
    }
  }

  public CusComShare deepCopy() {
    return new CusComShare(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusComBase = null;
    setShareTypeIsSet(false);
    this.shareType = 0;
    this.shareName = null;
    setInvMoneyIsSet(false);
    this.invMoney = 0.0;
    setInvWayIsSet(false);
    this.invWay = 0;
    setShareRatioIsSet(false);
    this.shareRatio = 0.0;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    setCusComIdIsSet(false);
    this.cusComId = 0;
    this.shareTypeName = null;
    this.invWayName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComShare setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComShare setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public int getShareType() {
    return this.shareType;
  }

  public CusComShare setShareType(int shareType) {
    this.shareType = shareType;
    setShareTypeIsSet(true);
    return this;
  }

  public void unsetShareType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARETYPE_ISSET_ID);
  }

  /** Returns true if field shareType is set (has been assigned a value) and false otherwise */
  public boolean isSetShareType() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARETYPE_ISSET_ID);
  }

  public void setShareTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARETYPE_ISSET_ID, value);
  }

  public String getShareName() {
    return this.shareName;
  }

  public CusComShare setShareName(String shareName) {
    this.shareName = shareName;
    return this;
  }

  public void unsetShareName() {
    this.shareName = null;
  }

  /** Returns true if field shareName is set (has been assigned a value) and false otherwise */
  public boolean isSetShareName() {
    return this.shareName != null;
  }

  public void setShareNameIsSet(boolean value) {
    if (!value) {
      this.shareName = null;
    }
  }

  public double getInvMoney() {
    return this.invMoney;
  }

  public CusComShare setInvMoney(double invMoney) {
    this.invMoney = invMoney;
    setInvMoneyIsSet(true);
    return this;
  }

  public void unsetInvMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVMONEY_ISSET_ID);
  }

  /** Returns true if field invMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetInvMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __INVMONEY_ISSET_ID);
  }

  public void setInvMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVMONEY_ISSET_ID, value);
  }

  public int getInvWay() {
    return this.invWay;
  }

  public CusComShare setInvWay(int invWay) {
    this.invWay = invWay;
    setInvWayIsSet(true);
    return this;
  }

  public void unsetInvWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVWAY_ISSET_ID);
  }

  /** Returns true if field invWay is set (has been assigned a value) and false otherwise */
  public boolean isSetInvWay() {
    return EncodingUtils.testBit(__isset_bitfield, __INVWAY_ISSET_ID);
  }

  public void setInvWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVWAY_ISSET_ID, value);
  }

  public double getShareRatio() {
    return this.shareRatio;
  }

  public CusComShare setShareRatio(double shareRatio) {
    this.shareRatio = shareRatio;
    setShareRatioIsSet(true);
    return this;
  }

  public void unsetShareRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARERATIO_ISSET_ID);
  }

  /** Returns true if field shareRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetShareRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARERATIO_ISSET_ID);
  }

  public void setShareRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARERATIO_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public CusComShare setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusComShare setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getCusComId() {
    return this.cusComId;
  }

  public CusComShare setCusComId(int cusComId) {
    this.cusComId = cusComId;
    setCusComIdIsSet(true);
    return this;
  }

  public void unsetCusComId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSCOMID_ISSET_ID);
  }

  /** Returns true if field cusComId is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComId() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSCOMID_ISSET_ID);
  }

  public void setCusComIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSCOMID_ISSET_ID, value);
  }

  public String getShareTypeName() {
    return this.shareTypeName;
  }

  public CusComShare setShareTypeName(String shareTypeName) {
    this.shareTypeName = shareTypeName;
    return this;
  }

  public void unsetShareTypeName() {
    this.shareTypeName = null;
  }

  /** Returns true if field shareTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetShareTypeName() {
    return this.shareTypeName != null;
  }

  public void setShareTypeNameIsSet(boolean value) {
    if (!value) {
      this.shareTypeName = null;
    }
  }

  public String getInvWayName() {
    return this.invWayName;
  }

  public CusComShare setInvWayName(String invWayName) {
    this.invWayName = invWayName;
    return this;
  }

  public void unsetInvWayName() {
    this.invWayName = null;
  }

  /** Returns true if field invWayName is set (has been assigned a value) and false otherwise */
  public boolean isSetInvWayName() {
    return this.invWayName != null;
  }

  public void setInvWayNameIsSet(boolean value) {
    if (!value) {
      this.invWayName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case SHARE_TYPE:
      if (value == null) {
        unsetShareType();
      } else {
        setShareType((Integer)value);
      }
      break;

    case SHARE_NAME:
      if (value == null) {
        unsetShareName();
      } else {
        setShareName((String)value);
      }
      break;

    case INV_MONEY:
      if (value == null) {
        unsetInvMoney();
      } else {
        setInvMoney((Double)value);
      }
      break;

    case INV_WAY:
      if (value == null) {
        unsetInvWay();
      } else {
        setInvWay((Integer)value);
      }
      break;

    case SHARE_RATIO:
      if (value == null) {
        unsetShareRatio();
      } else {
        setShareRatio((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CUS_COM_ID:
      if (value == null) {
        unsetCusComId();
      } else {
        setCusComId((Integer)value);
      }
      break;

    case SHARE_TYPE_NAME:
      if (value == null) {
        unsetShareTypeName();
      } else {
        setShareTypeName((String)value);
      }
      break;

    case INV_WAY_NAME:
      if (value == null) {
        unsetInvWayName();
      } else {
        setInvWayName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_COM_BASE:
      return getCusComBase();

    case SHARE_TYPE:
      return Integer.valueOf(getShareType());

    case SHARE_NAME:
      return getShareName();

    case INV_MONEY:
      return Double.valueOf(getInvMoney());

    case INV_WAY:
      return Integer.valueOf(getInvWay());

    case SHARE_RATIO:
      return Double.valueOf(getShareRatio());

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CUS_COM_ID:
      return Integer.valueOf(getCusComId());

    case SHARE_TYPE_NAME:
      return getShareTypeName();

    case INV_WAY_NAME:
      return getInvWayName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_COM_BASE:
      return isSetCusComBase();
    case SHARE_TYPE:
      return isSetShareType();
    case SHARE_NAME:
      return isSetShareName();
    case INV_MONEY:
      return isSetInvMoney();
    case INV_WAY:
      return isSetInvWay();
    case SHARE_RATIO:
      return isSetShareRatio();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case CUS_COM_ID:
      return isSetCusComId();
    case SHARE_TYPE_NAME:
      return isSetShareTypeName();
    case INV_WAY_NAME:
      return isSetInvWayName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComShare)
      return this.equals((CusComShare)that);
    return false;
  }

  public boolean equals(CusComShare that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_shareType = true;
    boolean that_present_shareType = true;
    if (this_present_shareType || that_present_shareType) {
      if (!(this_present_shareType && that_present_shareType))
        return false;
      if (this.shareType != that.shareType)
        return false;
    }

    boolean this_present_shareName = true && this.isSetShareName();
    boolean that_present_shareName = true && that.isSetShareName();
    if (this_present_shareName || that_present_shareName) {
      if (!(this_present_shareName && that_present_shareName))
        return false;
      if (!this.shareName.equals(that.shareName))
        return false;
    }

    boolean this_present_invMoney = true;
    boolean that_present_invMoney = true;
    if (this_present_invMoney || that_present_invMoney) {
      if (!(this_present_invMoney && that_present_invMoney))
        return false;
      if (this.invMoney != that.invMoney)
        return false;
    }

    boolean this_present_invWay = true;
    boolean that_present_invWay = true;
    if (this_present_invWay || that_present_invWay) {
      if (!(this_present_invWay && that_present_invWay))
        return false;
      if (this.invWay != that.invWay)
        return false;
    }

    boolean this_present_shareRatio = true;
    boolean that_present_shareRatio = true;
    if (this_present_shareRatio || that_present_shareRatio) {
      if (!(this_present_shareRatio && that_present_shareRatio))
        return false;
      if (this.shareRatio != that.shareRatio)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_cusComId = true;
    boolean that_present_cusComId = true;
    if (this_present_cusComId || that_present_cusComId) {
      if (!(this_present_cusComId && that_present_cusComId))
        return false;
      if (this.cusComId != that.cusComId)
        return false;
    }

    boolean this_present_shareTypeName = true && this.isSetShareTypeName();
    boolean that_present_shareTypeName = true && that.isSetShareTypeName();
    if (this_present_shareTypeName || that_present_shareTypeName) {
      if (!(this_present_shareTypeName && that_present_shareTypeName))
        return false;
      if (!this.shareTypeName.equals(that.shareTypeName))
        return false;
    }

    boolean this_present_invWayName = true && this.isSetInvWayName();
    boolean that_present_invWayName = true && that.isSetInvWayName();
    if (this_present_invWayName || that_present_invWayName) {
      if (!(this_present_invWayName && that_present_invWayName))
        return false;
      if (!this.invWayName.equals(that.invWayName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_shareType = true;
    list.add(present_shareType);
    if (present_shareType)
      list.add(shareType);

    boolean present_shareName = true && (isSetShareName());
    list.add(present_shareName);
    if (present_shareName)
      list.add(shareName);

    boolean present_invMoney = true;
    list.add(present_invMoney);
    if (present_invMoney)
      list.add(invMoney);

    boolean present_invWay = true;
    list.add(present_invWay);
    if (present_invWay)
      list.add(invWay);

    boolean present_shareRatio = true;
    list.add(present_shareRatio);
    if (present_shareRatio)
      list.add(shareRatio);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_cusComId = true;
    list.add(present_cusComId);
    if (present_cusComId)
      list.add(cusComId);

    boolean present_shareTypeName = true && (isSetShareTypeName());
    list.add(present_shareTypeName);
    if (present_shareTypeName)
      list.add(shareTypeName);

    boolean present_invWayName = true && (isSetInvWayName());
    list.add(present_invWayName);
    if (present_invWayName)
      list.add(invWayName);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComShare other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareType()).compareTo(other.isSetShareType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareType, other.shareType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareName()).compareTo(other.isSetShareName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareName, other.shareName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvMoney()).compareTo(other.isSetInvMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invMoney, other.invMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvWay()).compareTo(other.isSetInvWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invWay, other.invWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareRatio()).compareTo(other.isSetShareRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareRatio, other.shareRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComId()).compareTo(other.isSetCusComId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComId, other.cusComId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareTypeName()).compareTo(other.isSetShareTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareTypeName, other.shareTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvWayName()).compareTo(other.isSetInvWayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvWayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invWayName, other.invWayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComShare(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareType:");
    sb.append(this.shareType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareName:");
    if (this.shareName == null) {
      sb.append("null");
    } else {
      sb.append(this.shareName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invMoney:");
    sb.append(this.invMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invWay:");
    sb.append(this.invWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareRatio:");
    sb.append(this.shareRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComId:");
    sb.append(this.cusComId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareTypeName:");
    if (this.shareTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.shareTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invWayName:");
    if (this.invWayName == null) {
      sb.append("null");
    } else {
      sb.append(this.invWayName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComShareStandardSchemeFactory implements SchemeFactory {
    public CusComShareStandardScheme getScheme() {
      return new CusComShareStandardScheme();
    }
  }

  private static class CusComShareStandardScheme extends StandardScheme<CusComShare> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComShare struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareType = iprot.readI32();
              struct.setShareTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHARE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareName = iprot.readString();
              struct.setShareNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INV_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.invMoney = iprot.readDouble();
              struct.setInvMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INV_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.invWay = iprot.readI32();
              struct.setInvWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHARE_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shareRatio = iprot.readDouble();
              struct.setShareRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CUS_COM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusComId = iprot.readI32();
              struct.setCusComIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHARE_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareTypeName = iprot.readString();
              struct.setShareTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INV_WAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invWayName = iprot.readString();
              struct.setInvWayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComShare struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHARE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.shareType);
      oprot.writeFieldEnd();
      if (struct.shareName != null) {
        oprot.writeFieldBegin(SHARE_NAME_FIELD_DESC);
        oprot.writeString(struct.shareName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INV_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.invMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INV_WAY_FIELD_DESC);
      oprot.writeI32(struct.invWay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.shareRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_COM_ID_FIELD_DESC);
      oprot.writeI32(struct.cusComId);
      oprot.writeFieldEnd();
      if (struct.shareTypeName != null) {
        oprot.writeFieldBegin(SHARE_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.shareTypeName);
        oprot.writeFieldEnd();
      }
      if (struct.invWayName != null) {
        oprot.writeFieldBegin(INV_WAY_NAME_FIELD_DESC);
        oprot.writeString(struct.invWayName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComShareTupleSchemeFactory implements SchemeFactory {
    public CusComShareTupleScheme getScheme() {
      return new CusComShareTupleScheme();
    }
  }

  private static class CusComShareTupleScheme extends TupleScheme<CusComShare> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComShare struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusComBase()) {
        optionals.set(1);
      }
      if (struct.isSetShareType()) {
        optionals.set(2);
      }
      if (struct.isSetShareName()) {
        optionals.set(3);
      }
      if (struct.isSetInvMoney()) {
        optionals.set(4);
      }
      if (struct.isSetInvWay()) {
        optionals.set(5);
      }
      if (struct.isSetShareRatio()) {
        optionals.set(6);
      }
      if (struct.isSetRemark()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetCusComId()) {
        optionals.set(9);
      }
      if (struct.isSetShareTypeName()) {
        optionals.set(10);
      }
      if (struct.isSetInvWayName()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetShareType()) {
        oprot.writeI32(struct.shareType);
      }
      if (struct.isSetShareName()) {
        oprot.writeString(struct.shareName);
      }
      if (struct.isSetInvMoney()) {
        oprot.writeDouble(struct.invMoney);
      }
      if (struct.isSetInvWay()) {
        oprot.writeI32(struct.invWay);
      }
      if (struct.isSetShareRatio()) {
        oprot.writeDouble(struct.shareRatio);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCusComId()) {
        oprot.writeI32(struct.cusComId);
      }
      if (struct.isSetShareTypeName()) {
        oprot.writeString(struct.shareTypeName);
      }
      if (struct.isSetInvWayName()) {
        oprot.writeString(struct.invWayName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComShare struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shareType = iprot.readI32();
        struct.setShareTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shareName = iprot.readString();
        struct.setShareNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.invMoney = iprot.readDouble();
        struct.setInvMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.invWay = iprot.readI32();
        struct.setInvWayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shareRatio = iprot.readDouble();
        struct.setShareRatioIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cusComId = iprot.readI32();
        struct.setCusComIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.shareTypeName = iprot.readString();
        struct.setShareTypeNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.invWayName = iprot.readString();
        struct.setInvWayNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class ReconciliationItem implements org.apache.thrift.TBase<ReconciliationItem, ReconciliationItem._Fields>, java.io.Serializable, Cloneable, Comparable<ReconciliationItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReconciliationItem");

  private static final org.apache.thrift.protocol.TField PEPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("pepayDt", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_YL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_yl", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_YF_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_yf", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("mangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MANG_COST_YL_FIELD_DESC = new org.apache.thrift.protocol.TField("mangCost_yl", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MANG_COST_YF_FIELD_DESC = new org.apache.thrift.protocol.TField("mangCost_yf", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField INTEREST_YL_FIELD_DESC = new org.apache.thrift.protocol.TField("interest_yl", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField INTEREST_YF_FIELD_DESC = new org.apache.thrift.protocol.TField("interest_yf", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("otherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OTHER_COST_YL_FIELD_DESC = new org.apache.thrift.protocol.TField("otherCost_yl", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField OTHER_COST_YF_FIELD_DESC = new org.apache.thrift.protocol.TField("otherCost_yf", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField REALTIME_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("realtimePlan", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField REALTIME_PLAN_YL_FIELD_DESC = new org.apache.thrift.protocol.TField("realtimePlan_yl", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField REALTIME_PLAN_YF_FIELD_DESC = new org.apache.thrift.protocol.TField("realtimePlan_yf", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField OVERDUE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdue", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField OPER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operType", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REALTIME_PLAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realtimePlanName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REF_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("refPid", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleNum", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReconciliationItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReconciliationItemTupleSchemeFactory());
  }

  public String pepayDt; // required
  public double principal; // required
  public double principal_yl; // required
  public double principal_yf; // required
  public double mangCost; // required
  public double mangCost_yl; // required
  public double mangCost_yf; // required
  public double interest; // required
  public double interest_yl; // required
  public double interest_yf; // required
  public double otherCost; // required
  public double otherCost_yl; // required
  public double otherCost_yf; // required
  public double realtimePlan; // required
  public double realtimePlan_yl; // required
  public double realtimePlan_yf; // required
  public boolean overdue; // required
  public int operType; // required
  public String realtimePlanName; // required
  public int refPid; // required
  public int cycleNum; // required
  public int loanId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PEPAY_DT((short)1, "pepayDt"),
    PRINCIPAL((short)2, "principal"),
    PRINCIPAL_YL((short)3, "principal_yl"),
    PRINCIPAL_YF((short)4, "principal_yf"),
    MANG_COST((short)5, "mangCost"),
    MANG_COST_YL((short)6, "mangCost_yl"),
    MANG_COST_YF((short)7, "mangCost_yf"),
    INTEREST((short)8, "interest"),
    INTEREST_YL((short)9, "interest_yl"),
    INTEREST_YF((short)10, "interest_yf"),
    OTHER_COST((short)11, "otherCost"),
    OTHER_COST_YL((short)12, "otherCost_yl"),
    OTHER_COST_YF((short)13, "otherCost_yf"),
    REALTIME_PLAN((short)14, "realtimePlan"),
    REALTIME_PLAN_YL((short)15, "realtimePlan_yl"),
    REALTIME_PLAN_YF((short)16, "realtimePlan_yf"),
    OVERDUE((short)17, "overdue"),
    OPER_TYPE((short)18, "operType"),
    REALTIME_PLAN_NAME((short)19, "realtimePlanName"),
    REF_PID((short)20, "refPid"),
    CYCLE_NUM((short)21, "cycleNum"),
    LOAN_ID((short)22, "loanId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PEPAY_DT
          return PEPAY_DT;
        case 2: // PRINCIPAL
          return PRINCIPAL;
        case 3: // PRINCIPAL_YL
          return PRINCIPAL_YL;
        case 4: // PRINCIPAL_YF
          return PRINCIPAL_YF;
        case 5: // MANG_COST
          return MANG_COST;
        case 6: // MANG_COST_YL
          return MANG_COST_YL;
        case 7: // MANG_COST_YF
          return MANG_COST_YF;
        case 8: // INTEREST
          return INTEREST;
        case 9: // INTEREST_YL
          return INTEREST_YL;
        case 10: // INTEREST_YF
          return INTEREST_YF;
        case 11: // OTHER_COST
          return OTHER_COST;
        case 12: // OTHER_COST_YL
          return OTHER_COST_YL;
        case 13: // OTHER_COST_YF
          return OTHER_COST_YF;
        case 14: // REALTIME_PLAN
          return REALTIME_PLAN;
        case 15: // REALTIME_PLAN_YL
          return REALTIME_PLAN_YL;
        case 16: // REALTIME_PLAN_YF
          return REALTIME_PLAN_YF;
        case 17: // OVERDUE
          return OVERDUE;
        case 18: // OPER_TYPE
          return OPER_TYPE;
        case 19: // REALTIME_PLAN_NAME
          return REALTIME_PLAN_NAME;
        case 20: // REF_PID
          return REF_PID;
        case 21: // CYCLE_NUM
          return CYCLE_NUM;
        case 22: // LOAN_ID
          return LOAN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRINCIPAL_ISSET_ID = 0;
  private static final int __PRINCIPAL_YL_ISSET_ID = 1;
  private static final int __PRINCIPAL_YF_ISSET_ID = 2;
  private static final int __MANGCOST_ISSET_ID = 3;
  private static final int __MANGCOST_YL_ISSET_ID = 4;
  private static final int __MANGCOST_YF_ISSET_ID = 5;
  private static final int __INTEREST_ISSET_ID = 6;
  private static final int __INTEREST_YL_ISSET_ID = 7;
  private static final int __INTEREST_YF_ISSET_ID = 8;
  private static final int __OTHERCOST_ISSET_ID = 9;
  private static final int __OTHERCOST_YL_ISSET_ID = 10;
  private static final int __OTHERCOST_YF_ISSET_ID = 11;
  private static final int __REALTIMEPLAN_ISSET_ID = 12;
  private static final int __REALTIMEPLAN_YL_ISSET_ID = 13;
  private static final int __REALTIMEPLAN_YF_ISSET_ID = 14;
  private static final int __OVERDUE_ISSET_ID = 15;
  private static final int __OPERTYPE_ISSET_ID = 16;
  private static final int __REFPID_ISSET_ID = 17;
  private static final int __CYCLENUM_ISSET_ID = 18;
  private static final int __LOANID_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PEPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("pepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_YL, new org.apache.thrift.meta_data.FieldMetaData("principal_yl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_YF, new org.apache.thrift.meta_data.FieldMetaData("principal_yf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("mangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MANG_COST_YL, new org.apache.thrift.meta_data.FieldMetaData("mangCost_yl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MANG_COST_YF, new org.apache.thrift.meta_data.FieldMetaData("mangCost_yf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST_YL, new org.apache.thrift.meta_data.FieldMetaData("interest_yl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST_YF, new org.apache.thrift.meta_data.FieldMetaData("interest_yf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("otherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OTHER_COST_YL, new org.apache.thrift.meta_data.FieldMetaData("otherCost_yl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OTHER_COST_YF, new org.apache.thrift.meta_data.FieldMetaData("otherCost_yf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REALTIME_PLAN, new org.apache.thrift.meta_data.FieldMetaData("realtimePlan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REALTIME_PLAN_YL, new org.apache.thrift.meta_data.FieldMetaData("realtimePlan_yl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REALTIME_PLAN_YF, new org.apache.thrift.meta_data.FieldMetaData("realtimePlan_yf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE, new org.apache.thrift.meta_data.FieldMetaData("overdue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REALTIME_PLAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("realtimePlanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_PID, new org.apache.thrift.meta_data.FieldMetaData("refPid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("cycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReconciliationItem.class, metaDataMap);
  }

  public ReconciliationItem() {
  }

  public ReconciliationItem(
    String pepayDt,
    double principal,
    double principal_yl,
    double principal_yf,
    double mangCost,
    double mangCost_yl,
    double mangCost_yf,
    double interest,
    double interest_yl,
    double interest_yf,
    double otherCost,
    double otherCost_yl,
    double otherCost_yf,
    double realtimePlan,
    double realtimePlan_yl,
    double realtimePlan_yf,
    boolean overdue,
    int operType,
    String realtimePlanName,
    int refPid,
    int cycleNum,
    int loanId)
  {
    this();
    this.pepayDt = pepayDt;
    this.principal = principal;
    setPrincipalIsSet(true);
    this.principal_yl = principal_yl;
    setPrincipal_ylIsSet(true);
    this.principal_yf = principal_yf;
    setPrincipal_yfIsSet(true);
    this.mangCost = mangCost;
    setMangCostIsSet(true);
    this.mangCost_yl = mangCost_yl;
    setMangCost_ylIsSet(true);
    this.mangCost_yf = mangCost_yf;
    setMangCost_yfIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.interest_yl = interest_yl;
    setInterest_ylIsSet(true);
    this.interest_yf = interest_yf;
    setInterest_yfIsSet(true);
    this.otherCost = otherCost;
    setOtherCostIsSet(true);
    this.otherCost_yl = otherCost_yl;
    setOtherCost_ylIsSet(true);
    this.otherCost_yf = otherCost_yf;
    setOtherCost_yfIsSet(true);
    this.realtimePlan = realtimePlan;
    setRealtimePlanIsSet(true);
    this.realtimePlan_yl = realtimePlan_yl;
    setRealtimePlan_ylIsSet(true);
    this.realtimePlan_yf = realtimePlan_yf;
    setRealtimePlan_yfIsSet(true);
    this.overdue = overdue;
    setOverdueIsSet(true);
    this.operType = operType;
    setOperTypeIsSet(true);
    this.realtimePlanName = realtimePlanName;
    this.refPid = refPid;
    setRefPidIsSet(true);
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReconciliationItem(ReconciliationItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPepayDt()) {
      this.pepayDt = other.pepayDt;
    }
    this.principal = other.principal;
    this.principal_yl = other.principal_yl;
    this.principal_yf = other.principal_yf;
    this.mangCost = other.mangCost;
    this.mangCost_yl = other.mangCost_yl;
    this.mangCost_yf = other.mangCost_yf;
    this.interest = other.interest;
    this.interest_yl = other.interest_yl;
    this.interest_yf = other.interest_yf;
    this.otherCost = other.otherCost;
    this.otherCost_yl = other.otherCost_yl;
    this.otherCost_yf = other.otherCost_yf;
    this.realtimePlan = other.realtimePlan;
    this.realtimePlan_yl = other.realtimePlan_yl;
    this.realtimePlan_yf = other.realtimePlan_yf;
    this.overdue = other.overdue;
    this.operType = other.operType;
    if (other.isSetRealtimePlanName()) {
      this.realtimePlanName = other.realtimePlanName;
    }
    this.refPid = other.refPid;
    this.cycleNum = other.cycleNum;
    this.loanId = other.loanId;
  }

  public ReconciliationItem deepCopy() {
    return new ReconciliationItem(this);
  }

  @Override
  public void clear() {
    this.pepayDt = null;
    setPrincipalIsSet(false);
    this.principal = 0.0;
    setPrincipal_ylIsSet(false);
    this.principal_yl = 0.0;
    setPrincipal_yfIsSet(false);
    this.principal_yf = 0.0;
    setMangCostIsSet(false);
    this.mangCost = 0.0;
    setMangCost_ylIsSet(false);
    this.mangCost_yl = 0.0;
    setMangCost_yfIsSet(false);
    this.mangCost_yf = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    setInterest_ylIsSet(false);
    this.interest_yl = 0.0;
    setInterest_yfIsSet(false);
    this.interest_yf = 0.0;
    setOtherCostIsSet(false);
    this.otherCost = 0.0;
    setOtherCost_ylIsSet(false);
    this.otherCost_yl = 0.0;
    setOtherCost_yfIsSet(false);
    this.otherCost_yf = 0.0;
    setRealtimePlanIsSet(false);
    this.realtimePlan = 0.0;
    setRealtimePlan_ylIsSet(false);
    this.realtimePlan_yl = 0.0;
    setRealtimePlan_yfIsSet(false);
    this.realtimePlan_yf = 0.0;
    setOverdueIsSet(false);
    this.overdue = false;
    setOperTypeIsSet(false);
    this.operType = 0;
    this.realtimePlanName = null;
    setRefPidIsSet(false);
    this.refPid = 0;
    setCycleNumIsSet(false);
    this.cycleNum = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
  }

  public String getPepayDt() {
    return this.pepayDt;
  }

  public ReconciliationItem setPepayDt(String pepayDt) {
    this.pepayDt = pepayDt;
    return this;
  }

  public void unsetPepayDt() {
    this.pepayDt = null;
  }

  /** Returns true if field pepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPepayDt() {
    return this.pepayDt != null;
  }

  public void setPepayDtIsSet(boolean value) {
    if (!value) {
      this.pepayDt = null;
    }
  }

  public double getPrincipal() {
    return this.principal;
  }

  public ReconciliationItem setPrincipal(double principal) {
    this.principal = principal;
    setPrincipalIsSet(true);
    return this;
  }

  public void unsetPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  public void setPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPAL_ISSET_ID, value);
  }

  public double getPrincipal_yl() {
    return this.principal_yl;
  }

  public ReconciliationItem setPrincipal_yl(double principal_yl) {
    this.principal_yl = principal_yl;
    setPrincipal_ylIsSet(true);
    return this;
  }

  public void unsetPrincipal_yl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPAL_YL_ISSET_ID);
  }

  /** Returns true if field principal_yl is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_yl() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPAL_YL_ISSET_ID);
  }

  public void setPrincipal_ylIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPAL_YL_ISSET_ID, value);
  }

  public double getPrincipal_yf() {
    return this.principal_yf;
  }

  public ReconciliationItem setPrincipal_yf(double principal_yf) {
    this.principal_yf = principal_yf;
    setPrincipal_yfIsSet(true);
    return this;
  }

  public void unsetPrincipal_yf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPAL_YF_ISSET_ID);
  }

  /** Returns true if field principal_yf is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_yf() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPAL_YF_ISSET_ID);
  }

  public void setPrincipal_yfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPAL_YF_ISSET_ID, value);
  }

  public double getMangCost() {
    return this.mangCost;
  }

  public ReconciliationItem setMangCost(double mangCost) {
    this.mangCost = mangCost;
    setMangCostIsSet(true);
    return this;
  }

  public void unsetMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANGCOST_ISSET_ID);
  }

  /** Returns true if field mangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __MANGCOST_ISSET_ID);
  }

  public void setMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANGCOST_ISSET_ID, value);
  }

  public double getMangCost_yl() {
    return this.mangCost_yl;
  }

  public ReconciliationItem setMangCost_yl(double mangCost_yl) {
    this.mangCost_yl = mangCost_yl;
    setMangCost_ylIsSet(true);
    return this;
  }

  public void unsetMangCost_yl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANGCOST_YL_ISSET_ID);
  }

  /** Returns true if field mangCost_yl is set (has been assigned a value) and false otherwise */
  public boolean isSetMangCost_yl() {
    return EncodingUtils.testBit(__isset_bitfield, __MANGCOST_YL_ISSET_ID);
  }

  public void setMangCost_ylIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANGCOST_YL_ISSET_ID, value);
  }

  public double getMangCost_yf() {
    return this.mangCost_yf;
  }

  public ReconciliationItem setMangCost_yf(double mangCost_yf) {
    this.mangCost_yf = mangCost_yf;
    setMangCost_yfIsSet(true);
    return this;
  }

  public void unsetMangCost_yf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANGCOST_YF_ISSET_ID);
  }

  /** Returns true if field mangCost_yf is set (has been assigned a value) and false otherwise */
  public boolean isSetMangCost_yf() {
    return EncodingUtils.testBit(__isset_bitfield, __MANGCOST_YF_ISSET_ID);
  }

  public void setMangCost_yfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANGCOST_YF_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public ReconciliationItem setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public double getInterest_yl() {
    return this.interest_yl;
  }

  public ReconciliationItem setInterest_yl(double interest_yl) {
    this.interest_yl = interest_yl;
    setInterest_ylIsSet(true);
    return this;
  }

  public void unsetInterest_yl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_YL_ISSET_ID);
  }

  /** Returns true if field interest_yl is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest_yl() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_YL_ISSET_ID);
  }

  public void setInterest_ylIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_YL_ISSET_ID, value);
  }

  public double getInterest_yf() {
    return this.interest_yf;
  }

  public ReconciliationItem setInterest_yf(double interest_yf) {
    this.interest_yf = interest_yf;
    setInterest_yfIsSet(true);
    return this;
  }

  public void unsetInterest_yf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_YF_ISSET_ID);
  }

  /** Returns true if field interest_yf is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest_yf() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_YF_ISSET_ID);
  }

  public void setInterest_yfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_YF_ISSET_ID, value);
  }

  public double getOtherCost() {
    return this.otherCost;
  }

  public ReconciliationItem setOtherCost(double otherCost) {
    this.otherCost = otherCost;
    setOtherCostIsSet(true);
    return this;
  }

  public void unsetOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERCOST_ISSET_ID);
  }

  /** Returns true if field otherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERCOST_ISSET_ID);
  }

  public void setOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERCOST_ISSET_ID, value);
  }

  public double getOtherCost_yl() {
    return this.otherCost_yl;
  }

  public ReconciliationItem setOtherCost_yl(double otherCost_yl) {
    this.otherCost_yl = otherCost_yl;
    setOtherCost_ylIsSet(true);
    return this;
  }

  public void unsetOtherCost_yl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERCOST_YL_ISSET_ID);
  }

  /** Returns true if field otherCost_yl is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherCost_yl() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERCOST_YL_ISSET_ID);
  }

  public void setOtherCost_ylIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERCOST_YL_ISSET_ID, value);
  }

  public double getOtherCost_yf() {
    return this.otherCost_yf;
  }

  public ReconciliationItem setOtherCost_yf(double otherCost_yf) {
    this.otherCost_yf = otherCost_yf;
    setOtherCost_yfIsSet(true);
    return this;
  }

  public void unsetOtherCost_yf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERCOST_YF_ISSET_ID);
  }

  /** Returns true if field otherCost_yf is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherCost_yf() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERCOST_YF_ISSET_ID);
  }

  public void setOtherCost_yfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERCOST_YF_ISSET_ID, value);
  }

  public double getRealtimePlan() {
    return this.realtimePlan;
  }

  public ReconciliationItem setRealtimePlan(double realtimePlan) {
    this.realtimePlan = realtimePlan;
    setRealtimePlanIsSet(true);
    return this;
  }

  public void unsetRealtimePlan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTIMEPLAN_ISSET_ID);
  }

  /** Returns true if field realtimePlan is set (has been assigned a value) and false otherwise */
  public boolean isSetRealtimePlan() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTIMEPLAN_ISSET_ID);
  }

  public void setRealtimePlanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTIMEPLAN_ISSET_ID, value);
  }

  public double getRealtimePlan_yl() {
    return this.realtimePlan_yl;
  }

  public ReconciliationItem setRealtimePlan_yl(double realtimePlan_yl) {
    this.realtimePlan_yl = realtimePlan_yl;
    setRealtimePlan_ylIsSet(true);
    return this;
  }

  public void unsetRealtimePlan_yl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTIMEPLAN_YL_ISSET_ID);
  }

  /** Returns true if field realtimePlan_yl is set (has been assigned a value) and false otherwise */
  public boolean isSetRealtimePlan_yl() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTIMEPLAN_YL_ISSET_ID);
  }

  public void setRealtimePlan_ylIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTIMEPLAN_YL_ISSET_ID, value);
  }

  public double getRealtimePlan_yf() {
    return this.realtimePlan_yf;
  }

  public ReconciliationItem setRealtimePlan_yf(double realtimePlan_yf) {
    this.realtimePlan_yf = realtimePlan_yf;
    setRealtimePlan_yfIsSet(true);
    return this;
  }

  public void unsetRealtimePlan_yf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTIMEPLAN_YF_ISSET_ID);
  }

  /** Returns true if field realtimePlan_yf is set (has been assigned a value) and false otherwise */
  public boolean isSetRealtimePlan_yf() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTIMEPLAN_YF_ISSET_ID);
  }

  public void setRealtimePlan_yfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTIMEPLAN_YF_ISSET_ID, value);
  }

  public boolean isOverdue() {
    return this.overdue;
  }

  public ReconciliationItem setOverdue(boolean overdue) {
    this.overdue = overdue;
    setOverdueIsSet(true);
    return this;
  }

  public void unsetOverdue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUE_ISSET_ID);
  }

  /** Returns true if field overdue is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdue() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUE_ISSET_ID);
  }

  public void setOverdueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUE_ISSET_ID, value);
  }

  public int getOperType() {
    return this.operType;
  }

  public ReconciliationItem setOperType(int operType) {
    this.operType = operType;
    setOperTypeIsSet(true);
    return this;
  }

  public void unsetOperType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERTYPE_ISSET_ID);
  }

  /** Returns true if field operType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperType() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERTYPE_ISSET_ID);
  }

  public void setOperTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERTYPE_ISSET_ID, value);
  }

  public String getRealtimePlanName() {
    return this.realtimePlanName;
  }

  public ReconciliationItem setRealtimePlanName(String realtimePlanName) {
    this.realtimePlanName = realtimePlanName;
    return this;
  }

  public void unsetRealtimePlanName() {
    this.realtimePlanName = null;
  }

  /** Returns true if field realtimePlanName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealtimePlanName() {
    return this.realtimePlanName != null;
  }

  public void setRealtimePlanNameIsSet(boolean value) {
    if (!value) {
      this.realtimePlanName = null;
    }
  }

  public int getRefPid() {
    return this.refPid;
  }

  public ReconciliationItem setRefPid(int refPid) {
    this.refPid = refPid;
    setRefPidIsSet(true);
    return this;
  }

  public void unsetRefPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFPID_ISSET_ID);
  }

  /** Returns true if field refPid is set (has been assigned a value) and false otherwise */
  public boolean isSetRefPid() {
    return EncodingUtils.testBit(__isset_bitfield, __REFPID_ISSET_ID);
  }

  public void setRefPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFPID_ISSET_ID, value);
  }

  public int getCycleNum() {
    return this.cycleNum;
  }

  public ReconciliationItem setCycleNum(int cycleNum) {
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    return this;
  }

  public void unsetCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  /** Returns true if field cycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  public void setCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLENUM_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public ReconciliationItem setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PEPAY_DT:
      if (value == null) {
        unsetPepayDt();
      } else {
        setPepayDt((String)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unsetPrincipal();
      } else {
        setPrincipal((Double)value);
      }
      break;

    case PRINCIPAL_YL:
      if (value == null) {
        unsetPrincipal_yl();
      } else {
        setPrincipal_yl((Double)value);
      }
      break;

    case PRINCIPAL_YF:
      if (value == null) {
        unsetPrincipal_yf();
      } else {
        setPrincipal_yf((Double)value);
      }
      break;

    case MANG_COST:
      if (value == null) {
        unsetMangCost();
      } else {
        setMangCost((Double)value);
      }
      break;

    case MANG_COST_YL:
      if (value == null) {
        unsetMangCost_yl();
      } else {
        setMangCost_yl((Double)value);
      }
      break;

    case MANG_COST_YF:
      if (value == null) {
        unsetMangCost_yf();
      } else {
        setMangCost_yf((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case INTEREST_YL:
      if (value == null) {
        unsetInterest_yl();
      } else {
        setInterest_yl((Double)value);
      }
      break;

    case INTEREST_YF:
      if (value == null) {
        unsetInterest_yf();
      } else {
        setInterest_yf((Double)value);
      }
      break;

    case OTHER_COST:
      if (value == null) {
        unsetOtherCost();
      } else {
        setOtherCost((Double)value);
      }
      break;

    case OTHER_COST_YL:
      if (value == null) {
        unsetOtherCost_yl();
      } else {
        setOtherCost_yl((Double)value);
      }
      break;

    case OTHER_COST_YF:
      if (value == null) {
        unsetOtherCost_yf();
      } else {
        setOtherCost_yf((Double)value);
      }
      break;

    case REALTIME_PLAN:
      if (value == null) {
        unsetRealtimePlan();
      } else {
        setRealtimePlan((Double)value);
      }
      break;

    case REALTIME_PLAN_YL:
      if (value == null) {
        unsetRealtimePlan_yl();
      } else {
        setRealtimePlan_yl((Double)value);
      }
      break;

    case REALTIME_PLAN_YF:
      if (value == null) {
        unsetRealtimePlan_yf();
      } else {
        setRealtimePlan_yf((Double)value);
      }
      break;

    case OVERDUE:
      if (value == null) {
        unsetOverdue();
      } else {
        setOverdue((Boolean)value);
      }
      break;

    case OPER_TYPE:
      if (value == null) {
        unsetOperType();
      } else {
        setOperType((Integer)value);
      }
      break;

    case REALTIME_PLAN_NAME:
      if (value == null) {
        unsetRealtimePlanName();
      } else {
        setRealtimePlanName((String)value);
      }
      break;

    case REF_PID:
      if (value == null) {
        unsetRefPid();
      } else {
        setRefPid((Integer)value);
      }
      break;

    case CYCLE_NUM:
      if (value == null) {
        unsetCycleNum();
      } else {
        setCycleNum((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PEPAY_DT:
      return getPepayDt();

    case PRINCIPAL:
      return Double.valueOf(getPrincipal());

    case PRINCIPAL_YL:
      return Double.valueOf(getPrincipal_yl());

    case PRINCIPAL_YF:
      return Double.valueOf(getPrincipal_yf());

    case MANG_COST:
      return Double.valueOf(getMangCost());

    case MANG_COST_YL:
      return Double.valueOf(getMangCost_yl());

    case MANG_COST_YF:
      return Double.valueOf(getMangCost_yf());

    case INTEREST:
      return Double.valueOf(getInterest());

    case INTEREST_YL:
      return Double.valueOf(getInterest_yl());

    case INTEREST_YF:
      return Double.valueOf(getInterest_yf());

    case OTHER_COST:
      return Double.valueOf(getOtherCost());

    case OTHER_COST_YL:
      return Double.valueOf(getOtherCost_yl());

    case OTHER_COST_YF:
      return Double.valueOf(getOtherCost_yf());

    case REALTIME_PLAN:
      return Double.valueOf(getRealtimePlan());

    case REALTIME_PLAN_YL:
      return Double.valueOf(getRealtimePlan_yl());

    case REALTIME_PLAN_YF:
      return Double.valueOf(getRealtimePlan_yf());

    case OVERDUE:
      return Boolean.valueOf(isOverdue());

    case OPER_TYPE:
      return Integer.valueOf(getOperType());

    case REALTIME_PLAN_NAME:
      return getRealtimePlanName();

    case REF_PID:
      return Integer.valueOf(getRefPid());

    case CYCLE_NUM:
      return Integer.valueOf(getCycleNum());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PEPAY_DT:
      return isSetPepayDt();
    case PRINCIPAL:
      return isSetPrincipal();
    case PRINCIPAL_YL:
      return isSetPrincipal_yl();
    case PRINCIPAL_YF:
      return isSetPrincipal_yf();
    case MANG_COST:
      return isSetMangCost();
    case MANG_COST_YL:
      return isSetMangCost_yl();
    case MANG_COST_YF:
      return isSetMangCost_yf();
    case INTEREST:
      return isSetInterest();
    case INTEREST_YL:
      return isSetInterest_yl();
    case INTEREST_YF:
      return isSetInterest_yf();
    case OTHER_COST:
      return isSetOtherCost();
    case OTHER_COST_YL:
      return isSetOtherCost_yl();
    case OTHER_COST_YF:
      return isSetOtherCost_yf();
    case REALTIME_PLAN:
      return isSetRealtimePlan();
    case REALTIME_PLAN_YL:
      return isSetRealtimePlan_yl();
    case REALTIME_PLAN_YF:
      return isSetRealtimePlan_yf();
    case OVERDUE:
      return isSetOverdue();
    case OPER_TYPE:
      return isSetOperType();
    case REALTIME_PLAN_NAME:
      return isSetRealtimePlanName();
    case REF_PID:
      return isSetRefPid();
    case CYCLE_NUM:
      return isSetCycleNum();
    case LOAN_ID:
      return isSetLoanId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReconciliationItem)
      return this.equals((ReconciliationItem)that);
    return false;
  }

  public boolean equals(ReconciliationItem that) {
    if (that == null)
      return false;

    boolean this_present_pepayDt = true && this.isSetPepayDt();
    boolean that_present_pepayDt = true && that.isSetPepayDt();
    if (this_present_pepayDt || that_present_pepayDt) {
      if (!(this_present_pepayDt && that_present_pepayDt))
        return false;
      if (!this.pepayDt.equals(that.pepayDt))
        return false;
    }

    boolean this_present_principal = true;
    boolean that_present_principal = true;
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (this.principal != that.principal)
        return false;
    }

    boolean this_present_principal_yl = true;
    boolean that_present_principal_yl = true;
    if (this_present_principal_yl || that_present_principal_yl) {
      if (!(this_present_principal_yl && that_present_principal_yl))
        return false;
      if (this.principal_yl != that.principal_yl)
        return false;
    }

    boolean this_present_principal_yf = true;
    boolean that_present_principal_yf = true;
    if (this_present_principal_yf || that_present_principal_yf) {
      if (!(this_present_principal_yf && that_present_principal_yf))
        return false;
      if (this.principal_yf != that.principal_yf)
        return false;
    }

    boolean this_present_mangCost = true;
    boolean that_present_mangCost = true;
    if (this_present_mangCost || that_present_mangCost) {
      if (!(this_present_mangCost && that_present_mangCost))
        return false;
      if (this.mangCost != that.mangCost)
        return false;
    }

    boolean this_present_mangCost_yl = true;
    boolean that_present_mangCost_yl = true;
    if (this_present_mangCost_yl || that_present_mangCost_yl) {
      if (!(this_present_mangCost_yl && that_present_mangCost_yl))
        return false;
      if (this.mangCost_yl != that.mangCost_yl)
        return false;
    }

    boolean this_present_mangCost_yf = true;
    boolean that_present_mangCost_yf = true;
    if (this_present_mangCost_yf || that_present_mangCost_yf) {
      if (!(this_present_mangCost_yf && that_present_mangCost_yf))
        return false;
      if (this.mangCost_yf != that.mangCost_yf)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_interest_yl = true;
    boolean that_present_interest_yl = true;
    if (this_present_interest_yl || that_present_interest_yl) {
      if (!(this_present_interest_yl && that_present_interest_yl))
        return false;
      if (this.interest_yl != that.interest_yl)
        return false;
    }

    boolean this_present_interest_yf = true;
    boolean that_present_interest_yf = true;
    if (this_present_interest_yf || that_present_interest_yf) {
      if (!(this_present_interest_yf && that_present_interest_yf))
        return false;
      if (this.interest_yf != that.interest_yf)
        return false;
    }

    boolean this_present_otherCost = true;
    boolean that_present_otherCost = true;
    if (this_present_otherCost || that_present_otherCost) {
      if (!(this_present_otherCost && that_present_otherCost))
        return false;
      if (this.otherCost != that.otherCost)
        return false;
    }

    boolean this_present_otherCost_yl = true;
    boolean that_present_otherCost_yl = true;
    if (this_present_otherCost_yl || that_present_otherCost_yl) {
      if (!(this_present_otherCost_yl && that_present_otherCost_yl))
        return false;
      if (this.otherCost_yl != that.otherCost_yl)
        return false;
    }

    boolean this_present_otherCost_yf = true;
    boolean that_present_otherCost_yf = true;
    if (this_present_otherCost_yf || that_present_otherCost_yf) {
      if (!(this_present_otherCost_yf && that_present_otherCost_yf))
        return false;
      if (this.otherCost_yf != that.otherCost_yf)
        return false;
    }

    boolean this_present_realtimePlan = true;
    boolean that_present_realtimePlan = true;
    if (this_present_realtimePlan || that_present_realtimePlan) {
      if (!(this_present_realtimePlan && that_present_realtimePlan))
        return false;
      if (this.realtimePlan != that.realtimePlan)
        return false;
    }

    boolean this_present_realtimePlan_yl = true;
    boolean that_present_realtimePlan_yl = true;
    if (this_present_realtimePlan_yl || that_present_realtimePlan_yl) {
      if (!(this_present_realtimePlan_yl && that_present_realtimePlan_yl))
        return false;
      if (this.realtimePlan_yl != that.realtimePlan_yl)
        return false;
    }

    boolean this_present_realtimePlan_yf = true;
    boolean that_present_realtimePlan_yf = true;
    if (this_present_realtimePlan_yf || that_present_realtimePlan_yf) {
      if (!(this_present_realtimePlan_yf && that_present_realtimePlan_yf))
        return false;
      if (this.realtimePlan_yf != that.realtimePlan_yf)
        return false;
    }

    boolean this_present_overdue = true;
    boolean that_present_overdue = true;
    if (this_present_overdue || that_present_overdue) {
      if (!(this_present_overdue && that_present_overdue))
        return false;
      if (this.overdue != that.overdue)
        return false;
    }

    boolean this_present_operType = true;
    boolean that_present_operType = true;
    if (this_present_operType || that_present_operType) {
      if (!(this_present_operType && that_present_operType))
        return false;
      if (this.operType != that.operType)
        return false;
    }

    boolean this_present_realtimePlanName = true && this.isSetRealtimePlanName();
    boolean that_present_realtimePlanName = true && that.isSetRealtimePlanName();
    if (this_present_realtimePlanName || that_present_realtimePlanName) {
      if (!(this_present_realtimePlanName && that_present_realtimePlanName))
        return false;
      if (!this.realtimePlanName.equals(that.realtimePlanName))
        return false;
    }

    boolean this_present_refPid = true;
    boolean that_present_refPid = true;
    if (this_present_refPid || that_present_refPid) {
      if (!(this_present_refPid && that_present_refPid))
        return false;
      if (this.refPid != that.refPid)
        return false;
    }

    boolean this_present_cycleNum = true;
    boolean that_present_cycleNum = true;
    if (this_present_cycleNum || that_present_cycleNum) {
      if (!(this_present_cycleNum && that_present_cycleNum))
        return false;
      if (this.cycleNum != that.cycleNum)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pepayDt = true && (isSetPepayDt());
    list.add(present_pepayDt);
    if (present_pepayDt)
      list.add(pepayDt);

    boolean present_principal = true;
    list.add(present_principal);
    if (present_principal)
      list.add(principal);

    boolean present_principal_yl = true;
    list.add(present_principal_yl);
    if (present_principal_yl)
      list.add(principal_yl);

    boolean present_principal_yf = true;
    list.add(present_principal_yf);
    if (present_principal_yf)
      list.add(principal_yf);

    boolean present_mangCost = true;
    list.add(present_mangCost);
    if (present_mangCost)
      list.add(mangCost);

    boolean present_mangCost_yl = true;
    list.add(present_mangCost_yl);
    if (present_mangCost_yl)
      list.add(mangCost_yl);

    boolean present_mangCost_yf = true;
    list.add(present_mangCost_yf);
    if (present_mangCost_yf)
      list.add(mangCost_yf);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_interest_yl = true;
    list.add(present_interest_yl);
    if (present_interest_yl)
      list.add(interest_yl);

    boolean present_interest_yf = true;
    list.add(present_interest_yf);
    if (present_interest_yf)
      list.add(interest_yf);

    boolean present_otherCost = true;
    list.add(present_otherCost);
    if (present_otherCost)
      list.add(otherCost);

    boolean present_otherCost_yl = true;
    list.add(present_otherCost_yl);
    if (present_otherCost_yl)
      list.add(otherCost_yl);

    boolean present_otherCost_yf = true;
    list.add(present_otherCost_yf);
    if (present_otherCost_yf)
      list.add(otherCost_yf);

    boolean present_realtimePlan = true;
    list.add(present_realtimePlan);
    if (present_realtimePlan)
      list.add(realtimePlan);

    boolean present_realtimePlan_yl = true;
    list.add(present_realtimePlan_yl);
    if (present_realtimePlan_yl)
      list.add(realtimePlan_yl);

    boolean present_realtimePlan_yf = true;
    list.add(present_realtimePlan_yf);
    if (present_realtimePlan_yf)
      list.add(realtimePlan_yf);

    boolean present_overdue = true;
    list.add(present_overdue);
    if (present_overdue)
      list.add(overdue);

    boolean present_operType = true;
    list.add(present_operType);
    if (present_operType)
      list.add(operType);

    boolean present_realtimePlanName = true && (isSetRealtimePlanName());
    list.add(present_realtimePlanName);
    if (present_realtimePlanName)
      list.add(realtimePlanName);

    boolean present_refPid = true;
    list.add(present_refPid);
    if (present_refPid)
      list.add(refPid);

    boolean present_cycleNum = true;
    list.add(present_cycleNum);
    if (present_cycleNum)
      list.add(cycleNum);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReconciliationItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPepayDt()).compareTo(other.isSetPepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pepayDt, other.pepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal_yl()).compareTo(other.isSetPrincipal_yl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_yl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_yl, other.principal_yl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal_yf()).compareTo(other.isSetPrincipal_yf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_yf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_yf, other.principal_yf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMangCost()).compareTo(other.isSetMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mangCost, other.mangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMangCost_yl()).compareTo(other.isSetMangCost_yl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMangCost_yl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mangCost_yl, other.mangCost_yl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMangCost_yf()).compareTo(other.isSetMangCost_yf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMangCost_yf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mangCost_yf, other.mangCost_yf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest_yl()).compareTo(other.isSetInterest_yl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest_yl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest_yl, other.interest_yl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest_yf()).compareTo(other.isSetInterest_yf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest_yf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest_yf, other.interest_yf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherCost()).compareTo(other.isSetOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherCost, other.otherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherCost_yl()).compareTo(other.isSetOtherCost_yl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherCost_yl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherCost_yl, other.otherCost_yl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherCost_yf()).compareTo(other.isSetOtherCost_yf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherCost_yf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherCost_yf, other.otherCost_yf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtimePlan()).compareTo(other.isSetRealtimePlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtimePlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtimePlan, other.realtimePlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtimePlan_yl()).compareTo(other.isSetRealtimePlan_yl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtimePlan_yl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtimePlan_yl, other.realtimePlan_yl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtimePlan_yf()).compareTo(other.isSetRealtimePlan_yf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtimePlan_yf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtimePlan_yf, other.realtimePlan_yf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdue()).compareTo(other.isSetOverdue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdue, other.overdue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperType()).compareTo(other.isSetOperType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operType, other.operType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtimePlanName()).compareTo(other.isSetRealtimePlanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtimePlanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtimePlanName, other.realtimePlanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefPid()).compareTo(other.isSetRefPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refPid, other.refPid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleNum()).compareTo(other.isSetCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleNum, other.cycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReconciliationItem(");
    boolean first = true;

    sb.append("pepayDt:");
    if (this.pepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.pepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal:");
    sb.append(this.principal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal_yl:");
    sb.append(this.principal_yl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal_yf:");
    sb.append(this.principal_yf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mangCost:");
    sb.append(this.mangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mangCost_yl:");
    sb.append(this.mangCost_yl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mangCost_yf:");
    sb.append(this.mangCost_yf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest_yl:");
    sb.append(this.interest_yl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest_yf:");
    sb.append(this.interest_yf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherCost:");
    sb.append(this.otherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherCost_yl:");
    sb.append(this.otherCost_yl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherCost_yf:");
    sb.append(this.otherCost_yf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realtimePlan:");
    sb.append(this.realtimePlan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realtimePlan_yl:");
    sb.append(this.realtimePlan_yl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realtimePlan_yf:");
    sb.append(this.realtimePlan_yf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdue:");
    sb.append(this.overdue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operType:");
    sb.append(this.operType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realtimePlanName:");
    if (this.realtimePlanName == null) {
      sb.append("null");
    } else {
      sb.append(this.realtimePlanName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refPid:");
    sb.append(this.refPid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleNum:");
    sb.append(this.cycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReconciliationItemStandardSchemeFactory implements SchemeFactory {
    public ReconciliationItemStandardScheme getScheme() {
      return new ReconciliationItemStandardScheme();
    }
  }

  private static class ReconciliationItemStandardScheme extends StandardScheme<ReconciliationItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReconciliationItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PEPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pepayDt = iprot.readString();
              struct.setPepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principal = iprot.readDouble();
              struct.setPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRINCIPAL_YL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principal_yl = iprot.readDouble();
              struct.setPrincipal_ylIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRINCIPAL_YF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principal_yf = iprot.readDouble();
              struct.setPrincipal_yfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mangCost = iprot.readDouble();
              struct.setMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MANG_COST_YL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mangCost_yl = iprot.readDouble();
              struct.setMangCost_ylIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MANG_COST_YF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mangCost_yf = iprot.readDouble();
              struct.setMangCost_yfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INTEREST_YL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest_yl = iprot.readDouble();
              struct.setInterest_ylIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INTEREST_YF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest_yf = iprot.readDouble();
              struct.setInterest_yfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.otherCost = iprot.readDouble();
              struct.setOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OTHER_COST_YL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.otherCost_yl = iprot.readDouble();
              struct.setOtherCost_ylIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OTHER_COST_YF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.otherCost_yf = iprot.readDouble();
              struct.setOtherCost_yfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REALTIME_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realtimePlan = iprot.readDouble();
              struct.setRealtimePlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REALTIME_PLAN_YL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realtimePlan_yl = iprot.readDouble();
              struct.setRealtimePlan_ylIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REALTIME_PLAN_YF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realtimePlan_yf = iprot.readDouble();
              struct.setRealtimePlan_yfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OVERDUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.overdue = iprot.readBool();
              struct.setOverdueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OPER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operType = iprot.readI32();
              struct.setOperTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REALTIME_PLAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realtimePlanName = iprot.readString();
              struct.setRealtimePlanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REF_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refPid = iprot.readI32();
              struct.setRefPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycleNum = iprot.readI32();
              struct.setCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReconciliationItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pepayDt != null) {
        oprot.writeFieldBegin(PEPAY_DT_FIELD_DESC);
        oprot.writeString(struct.pepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.principal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_YL_FIELD_DESC);
      oprot.writeDouble(struct.principal_yl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_YF_FIELD_DESC);
      oprot.writeDouble(struct.principal_yf);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.mangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANG_COST_YL_FIELD_DESC);
      oprot.writeDouble(struct.mangCost_yl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANG_COST_YF_FIELD_DESC);
      oprot.writeDouble(struct.mangCost_yf);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_YL_FIELD_DESC);
      oprot.writeDouble(struct.interest_yl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_YF_FIELD_DESC);
      oprot.writeDouble(struct.interest_yf);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.otherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_COST_YL_FIELD_DESC);
      oprot.writeDouble(struct.otherCost_yl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_COST_YF_FIELD_DESC);
      oprot.writeDouble(struct.otherCost_yf);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REALTIME_PLAN_FIELD_DESC);
      oprot.writeDouble(struct.realtimePlan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REALTIME_PLAN_YL_FIELD_DESC);
      oprot.writeDouble(struct.realtimePlan_yl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REALTIME_PLAN_YF_FIELD_DESC);
      oprot.writeDouble(struct.realtimePlan_yf);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FIELD_DESC);
      oprot.writeBool(struct.overdue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.operType);
      oprot.writeFieldEnd();
      if (struct.realtimePlanName != null) {
        oprot.writeFieldBegin(REALTIME_PLAN_NAME_FIELD_DESC);
        oprot.writeString(struct.realtimePlanName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_PID_FIELD_DESC);
      oprot.writeI32(struct.refPid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.cycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReconciliationItemTupleSchemeFactory implements SchemeFactory {
    public ReconciliationItemTupleScheme getScheme() {
      return new ReconciliationItemTupleScheme();
    }
  }

  private static class ReconciliationItemTupleScheme extends TupleScheme<ReconciliationItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReconciliationItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPepayDt()) {
        optionals.set(0);
      }
      if (struct.isSetPrincipal()) {
        optionals.set(1);
      }
      if (struct.isSetPrincipal_yl()) {
        optionals.set(2);
      }
      if (struct.isSetPrincipal_yf()) {
        optionals.set(3);
      }
      if (struct.isSetMangCost()) {
        optionals.set(4);
      }
      if (struct.isSetMangCost_yl()) {
        optionals.set(5);
      }
      if (struct.isSetMangCost_yf()) {
        optionals.set(6);
      }
      if (struct.isSetInterest()) {
        optionals.set(7);
      }
      if (struct.isSetInterest_yl()) {
        optionals.set(8);
      }
      if (struct.isSetInterest_yf()) {
        optionals.set(9);
      }
      if (struct.isSetOtherCost()) {
        optionals.set(10);
      }
      if (struct.isSetOtherCost_yl()) {
        optionals.set(11);
      }
      if (struct.isSetOtherCost_yf()) {
        optionals.set(12);
      }
      if (struct.isSetRealtimePlan()) {
        optionals.set(13);
      }
      if (struct.isSetRealtimePlan_yl()) {
        optionals.set(14);
      }
      if (struct.isSetRealtimePlan_yf()) {
        optionals.set(15);
      }
      if (struct.isSetOverdue()) {
        optionals.set(16);
      }
      if (struct.isSetOperType()) {
        optionals.set(17);
      }
      if (struct.isSetRealtimePlanName()) {
        optionals.set(18);
      }
      if (struct.isSetRefPid()) {
        optionals.set(19);
      }
      if (struct.isSetCycleNum()) {
        optionals.set(20);
      }
      if (struct.isSetLoanId()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetPepayDt()) {
        oprot.writeString(struct.pepayDt);
      }
      if (struct.isSetPrincipal()) {
        oprot.writeDouble(struct.principal);
      }
      if (struct.isSetPrincipal_yl()) {
        oprot.writeDouble(struct.principal_yl);
      }
      if (struct.isSetPrincipal_yf()) {
        oprot.writeDouble(struct.principal_yf);
      }
      if (struct.isSetMangCost()) {
        oprot.writeDouble(struct.mangCost);
      }
      if (struct.isSetMangCost_yl()) {
        oprot.writeDouble(struct.mangCost_yl);
      }
      if (struct.isSetMangCost_yf()) {
        oprot.writeDouble(struct.mangCost_yf);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetInterest_yl()) {
        oprot.writeDouble(struct.interest_yl);
      }
      if (struct.isSetInterest_yf()) {
        oprot.writeDouble(struct.interest_yf);
      }
      if (struct.isSetOtherCost()) {
        oprot.writeDouble(struct.otherCost);
      }
      if (struct.isSetOtherCost_yl()) {
        oprot.writeDouble(struct.otherCost_yl);
      }
      if (struct.isSetOtherCost_yf()) {
        oprot.writeDouble(struct.otherCost_yf);
      }
      if (struct.isSetRealtimePlan()) {
        oprot.writeDouble(struct.realtimePlan);
      }
      if (struct.isSetRealtimePlan_yl()) {
        oprot.writeDouble(struct.realtimePlan_yl);
      }
      if (struct.isSetRealtimePlan_yf()) {
        oprot.writeDouble(struct.realtimePlan_yf);
      }
      if (struct.isSetOverdue()) {
        oprot.writeBool(struct.overdue);
      }
      if (struct.isSetOperType()) {
        oprot.writeI32(struct.operType);
      }
      if (struct.isSetRealtimePlanName()) {
        oprot.writeString(struct.realtimePlanName);
      }
      if (struct.isSetRefPid()) {
        oprot.writeI32(struct.refPid);
      }
      if (struct.isSetCycleNum()) {
        oprot.writeI32(struct.cycleNum);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReconciliationItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.pepayDt = iprot.readString();
        struct.setPepayDtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.principal = iprot.readDouble();
        struct.setPrincipalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.principal_yl = iprot.readDouble();
        struct.setPrincipal_ylIsSet(true);
      }
      if (incoming.get(3)) {
        struct.principal_yf = iprot.readDouble();
        struct.setPrincipal_yfIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mangCost = iprot.readDouble();
        struct.setMangCostIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mangCost_yl = iprot.readDouble();
        struct.setMangCost_ylIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mangCost_yf = iprot.readDouble();
        struct.setMangCost_yfIsSet(true);
      }
      if (incoming.get(7)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.interest_yl = iprot.readDouble();
        struct.setInterest_ylIsSet(true);
      }
      if (incoming.get(9)) {
        struct.interest_yf = iprot.readDouble();
        struct.setInterest_yfIsSet(true);
      }
      if (incoming.get(10)) {
        struct.otherCost = iprot.readDouble();
        struct.setOtherCostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.otherCost_yl = iprot.readDouble();
        struct.setOtherCost_ylIsSet(true);
      }
      if (incoming.get(12)) {
        struct.otherCost_yf = iprot.readDouble();
        struct.setOtherCost_yfIsSet(true);
      }
      if (incoming.get(13)) {
        struct.realtimePlan = iprot.readDouble();
        struct.setRealtimePlanIsSet(true);
      }
      if (incoming.get(14)) {
        struct.realtimePlan_yl = iprot.readDouble();
        struct.setRealtimePlan_ylIsSet(true);
      }
      if (incoming.get(15)) {
        struct.realtimePlan_yf = iprot.readDouble();
        struct.setRealtimePlan_yfIsSet(true);
      }
      if (incoming.get(16)) {
        struct.overdue = iprot.readBool();
        struct.setOverdueIsSet(true);
      }
      if (incoming.get(17)) {
        struct.operType = iprot.readI32();
        struct.setOperTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.realtimePlanName = iprot.readString();
        struct.setRealtimePlanNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.refPid = iprot.readI32();
        struct.setRefPidIsSet(true);
      }
      if (incoming.get(20)) {
        struct.cycleNum = iprot.readI32();
        struct.setCycleNumIsSet(true);
      }
      if (incoming.get(21)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-3")
public class ProjectDTO implements org.apache.thrift.TBase<ProjectDTO, ProjectDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BEGIN_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("beginRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField END_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("endRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField APPLY_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("applyLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceNo", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField DECLARATION_FIELD_DESC = new org.apache.thrift.protocol.TField("declaration", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField NEXT_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("nextUsers", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LOAN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanType", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CAPITAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("capitalName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField RECORD_CLERK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordClerkId", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField LOAN_WORK_PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanWorkProcess", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField NEXT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nextUserName", org.apache.thrift.protocol.TType.STRING, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int acctId; // required
  public int projectType; // required
  public String projectName; // required
  public String projectNumber; // required
  public int pmUserId; // required
  public String realName; // required
  public String beginRequestDttm; // required
  public String endRequestDttm; // required
  public String acctName; // required
  public String businessSourceStr; // required
  public double applyLoanMoney; // required
  public int productId; // required
  public int productType; // required
  public List<Integer> userIds; // required
  public int foreclosureStatus; // required
  public int businessSourceNo; // required
  public String declaration; // required
  public double loanMoney; // required
  public String nextUsers; // required
  public String loanType; // required
  public String capitalName; // required
  public int page; // required
  public int rows; // required
  public int isChechan; // required
  public int recordClerkId; // required
  public String requestDttm; // required
  public String productName; // required
  public String loanWorkProcess; // required
  public String nextUserName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACCT_ID((short)2, "acctId"),
    PROJECT_TYPE((short)3, "projectType"),
    PROJECT_NAME((short)4, "projectName"),
    PROJECT_NUMBER((short)5, "projectNumber"),
    PM_USER_ID((short)6, "pmUserId"),
    REAL_NAME((short)7, "realName"),
    BEGIN_REQUEST_DTTM((short)8, "beginRequestDttm"),
    END_REQUEST_DTTM((short)9, "endRequestDttm"),
    ACCT_NAME((short)10, "acctName"),
    BUSINESS_SOURCE_STR((short)11, "businessSourceStr"),
    APPLY_LOAN_MONEY((short)12, "applyLoanMoney"),
    PRODUCT_ID((short)13, "productId"),
    PRODUCT_TYPE((short)14, "productType"),
    USER_IDS((short)15, "userIds"),
    FORECLOSURE_STATUS((short)16, "foreclosureStatus"),
    BUSINESS_SOURCE_NO((short)17, "businessSourceNo"),
    DECLARATION((short)18, "declaration"),
    LOAN_MONEY((short)19, "loanMoney"),
    NEXT_USERS((short)20, "nextUsers"),
    LOAN_TYPE((short)21, "loanType"),
    CAPITAL_NAME((short)22, "capitalName"),
    PAGE((short)23, "page"),
    ROWS((short)24, "rows"),
    IS_CHECHAN((short)25, "isChechan"),
    RECORD_CLERK_ID((short)26, "recordClerkId"),
    REQUEST_DTTM((short)27, "requestDttm"),
    PRODUCT_NAME((short)28, "productName"),
    LOAN_WORK_PROCESS((short)29, "loanWorkProcess"),
    NEXT_USER_NAME((short)30, "nextUserName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACCT_ID
          return ACCT_ID;
        case 3: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 6: // PM_USER_ID
          return PM_USER_ID;
        case 7: // REAL_NAME
          return REAL_NAME;
        case 8: // BEGIN_REQUEST_DTTM
          return BEGIN_REQUEST_DTTM;
        case 9: // END_REQUEST_DTTM
          return END_REQUEST_DTTM;
        case 10: // ACCT_NAME
          return ACCT_NAME;
        case 11: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 12: // APPLY_LOAN_MONEY
          return APPLY_LOAN_MONEY;
        case 13: // PRODUCT_ID
          return PRODUCT_ID;
        case 14: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 15: // USER_IDS
          return USER_IDS;
        case 16: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 17: // BUSINESS_SOURCE_NO
          return BUSINESS_SOURCE_NO;
        case 18: // DECLARATION
          return DECLARATION;
        case 19: // LOAN_MONEY
          return LOAN_MONEY;
        case 20: // NEXT_USERS
          return NEXT_USERS;
        case 21: // LOAN_TYPE
          return LOAN_TYPE;
        case 22: // CAPITAL_NAME
          return CAPITAL_NAME;
        case 23: // PAGE
          return PAGE;
        case 24: // ROWS
          return ROWS;
        case 25: // IS_CHECHAN
          return IS_CHECHAN;
        case 26: // RECORD_CLERK_ID
          return RECORD_CLERK_ID;
        case 27: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 28: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 29: // LOAN_WORK_PROCESS
          return LOAN_WORK_PROCESS;
        case 30: // NEXT_USER_NAME
          return NEXT_USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTID_ISSET_ID = 1;
  private static final int __PROJECTTYPE_ISSET_ID = 2;
  private static final int __PMUSERID_ISSET_ID = 3;
  private static final int __APPLYLOANMONEY_ISSET_ID = 4;
  private static final int __PRODUCTID_ISSET_ID = 5;
  private static final int __PRODUCTTYPE_ISSET_ID = 6;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 7;
  private static final int __BUSINESSSOURCENO_ISSET_ID = 8;
  private static final int __LOANMONEY_ISSET_ID = 9;
  private static final int __PAGE_ISSET_ID = 10;
  private static final int __ROWS_ISSET_ID = 11;
  private static final int __ISCHECHAN_ISSET_ID = 12;
  private static final int __RECORDCLERKID_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("beginRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("endRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("applyLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NO, new org.apache.thrift.meta_data.FieldMetaData("businessSourceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DECLARATION, new org.apache.thrift.meta_data.FieldMetaData("declaration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEXT_USERS, new org.apache.thrift.meta_data.FieldMetaData("nextUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("loanType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAPITAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("capitalName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORD_CLERK_ID, new org.apache.thrift.meta_data.FieldMetaData("recordClerkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_WORK_PROCESS, new org.apache.thrift.meta_data.FieldMetaData("loanWorkProcess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("nextUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectDTO.class, metaDataMap);
  }

  public ProjectDTO() {
  }

  public ProjectDTO(
    int pid,
    int acctId,
    int projectType,
    String projectName,
    String projectNumber,
    int pmUserId,
    String realName,
    String beginRequestDttm,
    String endRequestDttm,
    String acctName,
    String businessSourceStr,
    double applyLoanMoney,
    int productId,
    int productType,
    List<Integer> userIds,
    int foreclosureStatus,
    int businessSourceNo,
    String declaration,
    double loanMoney,
    String nextUsers,
    String loanType,
    String capitalName,
    int page,
    int rows,
    int isChechan,
    int recordClerkId,
    String requestDttm,
    String productName,
    String loanWorkProcess,
    String nextUserName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.realName = realName;
    this.beginRequestDttm = beginRequestDttm;
    this.endRequestDttm = endRequestDttm;
    this.acctName = acctName;
    this.businessSourceStr = businessSourceStr;
    this.applyLoanMoney = applyLoanMoney;
    setApplyLoanMoneyIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.productType = productType;
    setProductTypeIsSet(true);
    this.userIds = userIds;
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    this.declaration = declaration;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.nextUsers = nextUsers;
    this.loanType = loanType;
    this.capitalName = capitalName;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.recordClerkId = recordClerkId;
    setRecordClerkIdIsSet(true);
    this.requestDttm = requestDttm;
    this.productName = productName;
    this.loanWorkProcess = loanWorkProcess;
    this.nextUserName = nextUserName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectDTO(ProjectDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.acctId = other.acctId;
    this.projectType = other.projectType;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.pmUserId = other.pmUserId;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetBeginRequestDttm()) {
      this.beginRequestDttm = other.beginRequestDttm;
    }
    if (other.isSetEndRequestDttm()) {
      this.endRequestDttm = other.endRequestDttm;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    this.applyLoanMoney = other.applyLoanMoney;
    this.productId = other.productId;
    this.productType = other.productType;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.foreclosureStatus = other.foreclosureStatus;
    this.businessSourceNo = other.businessSourceNo;
    if (other.isSetDeclaration()) {
      this.declaration = other.declaration;
    }
    this.loanMoney = other.loanMoney;
    if (other.isSetNextUsers()) {
      this.nextUsers = other.nextUsers;
    }
    if (other.isSetLoanType()) {
      this.loanType = other.loanType;
    }
    if (other.isSetCapitalName()) {
      this.capitalName = other.capitalName;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.isChechan = other.isChechan;
    this.recordClerkId = other.recordClerkId;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetLoanWorkProcess()) {
      this.loanWorkProcess = other.loanWorkProcess;
    }
    if (other.isSetNextUserName()) {
      this.nextUserName = other.nextUserName;
    }
  }

  public ProjectDTO deepCopy() {
    return new ProjectDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
    this.projectName = null;
    this.projectNumber = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.realName = null;
    this.beginRequestDttm = null;
    this.endRequestDttm = null;
    this.acctName = null;
    this.businessSourceStr = null;
    setApplyLoanMoneyIsSet(false);
    this.applyLoanMoney = 0.0;
    setProductIdIsSet(false);
    this.productId = 0;
    setProductTypeIsSet(false);
    this.productType = 0;
    this.userIds = null;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    setBusinessSourceNoIsSet(false);
    this.businessSourceNo = 0;
    this.declaration = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.nextUsers = null;
    this.loanType = null;
    this.capitalName = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    setRecordClerkIdIsSet(false);
    this.recordClerkId = 0;
    this.requestDttm = null;
    this.productName = null;
    this.loanWorkProcess = null;
    this.nextUserName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public ProjectDTO setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public ProjectDTO setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ProjectDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ProjectDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public ProjectDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public ProjectDTO setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getBeginRequestDttm() {
    return this.beginRequestDttm;
  }

  public ProjectDTO setBeginRequestDttm(String beginRequestDttm) {
    this.beginRequestDttm = beginRequestDttm;
    return this;
  }

  public void unsetBeginRequestDttm() {
    this.beginRequestDttm = null;
  }

  /** Returns true if field beginRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginRequestDttm() {
    return this.beginRequestDttm != null;
  }

  public void setBeginRequestDttmIsSet(boolean value) {
    if (!value) {
      this.beginRequestDttm = null;
    }
  }

  public String getEndRequestDttm() {
    return this.endRequestDttm;
  }

  public ProjectDTO setEndRequestDttm(String endRequestDttm) {
    this.endRequestDttm = endRequestDttm;
    return this;
  }

  public void unsetEndRequestDttm() {
    this.endRequestDttm = null;
  }

  /** Returns true if field endRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetEndRequestDttm() {
    return this.endRequestDttm != null;
  }

  public void setEndRequestDttmIsSet(boolean value) {
    if (!value) {
      this.endRequestDttm = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public ProjectDTO setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public ProjectDTO setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public double getApplyLoanMoney() {
    return this.applyLoanMoney;
  }

  public ProjectDTO setApplyLoanMoney(double applyLoanMoney) {
    this.applyLoanMoney = applyLoanMoney;
    setApplyLoanMoneyIsSet(true);
    return this;
  }

  public void unsetApplyLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYLOANMONEY_ISSET_ID);
  }

  /** Returns true if field applyLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYLOANMONEY_ISSET_ID);
  }

  public void setApplyLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYLOANMONEY_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public ProjectDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public int getProductType() {
    return this.productType;
  }

  public ProjectDTO setProductType(int productType) {
    this.productType = productType;
    setProductTypeIsSet(true);
    return this;
  }

  public void unsetProductType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  public void setProductTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ProjectDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public ProjectDTO setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public int getBusinessSourceNo() {
    return this.businessSourceNo;
  }

  public ProjectDTO setBusinessSourceNo(int businessSourceNo) {
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    return this;
  }

  public void unsetBusinessSourceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID);
  }

  /** Returns true if field businessSourceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID);
  }

  public void setBusinessSourceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID, value);
  }

  public String getDeclaration() {
    return this.declaration;
  }

  public ProjectDTO setDeclaration(String declaration) {
    this.declaration = declaration;
    return this;
  }

  public void unsetDeclaration() {
    this.declaration = null;
  }

  /** Returns true if field declaration is set (has been assigned a value) and false otherwise */
  public boolean isSetDeclaration() {
    return this.declaration != null;
  }

  public void setDeclarationIsSet(boolean value) {
    if (!value) {
      this.declaration = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public ProjectDTO setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getNextUsers() {
    return this.nextUsers;
  }

  public ProjectDTO setNextUsers(String nextUsers) {
    this.nextUsers = nextUsers;
    return this;
  }

  public void unsetNextUsers() {
    this.nextUsers = null;
  }

  /** Returns true if field nextUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetNextUsers() {
    return this.nextUsers != null;
  }

  public void setNextUsersIsSet(boolean value) {
    if (!value) {
      this.nextUsers = null;
    }
  }

  public String getLoanType() {
    return this.loanType;
  }

  public ProjectDTO setLoanType(String loanType) {
    this.loanType = loanType;
    return this;
  }

  public void unsetLoanType() {
    this.loanType = null;
  }

  /** Returns true if field loanType is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanType() {
    return this.loanType != null;
  }

  public void setLoanTypeIsSet(boolean value) {
    if (!value) {
      this.loanType = null;
    }
  }

  public String getCapitalName() {
    return this.capitalName;
  }

  public ProjectDTO setCapitalName(String capitalName) {
    this.capitalName = capitalName;
    return this;
  }

  public void unsetCapitalName() {
    this.capitalName = null;
  }

  /** Returns true if field capitalName is set (has been assigned a value) and false otherwise */
  public boolean isSetCapitalName() {
    return this.capitalName != null;
  }

  public void setCapitalNameIsSet(boolean value) {
    if (!value) {
      this.capitalName = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ProjectDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ProjectDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public ProjectDTO setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public int getRecordClerkId() {
    return this.recordClerkId;
  }

  public ProjectDTO setRecordClerkId(int recordClerkId) {
    this.recordClerkId = recordClerkId;
    setRecordClerkIdIsSet(true);
    return this;
  }

  public void unsetRecordClerkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDCLERKID_ISSET_ID);
  }

  /** Returns true if field recordClerkId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordClerkId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDCLERKID_ISSET_ID);
  }

  public void setRecordClerkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDCLERKID_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public ProjectDTO setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public ProjectDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getLoanWorkProcess() {
    return this.loanWorkProcess;
  }

  public ProjectDTO setLoanWorkProcess(String loanWorkProcess) {
    this.loanWorkProcess = loanWorkProcess;
    return this;
  }

  public void unsetLoanWorkProcess() {
    this.loanWorkProcess = null;
  }

  /** Returns true if field loanWorkProcess is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanWorkProcess() {
    return this.loanWorkProcess != null;
  }

  public void setLoanWorkProcessIsSet(boolean value) {
    if (!value) {
      this.loanWorkProcess = null;
    }
  }

  public String getNextUserName() {
    return this.nextUserName;
  }

  public ProjectDTO setNextUserName(String nextUserName) {
    this.nextUserName = nextUserName;
    return this;
  }

  public void unsetNextUserName() {
    this.nextUserName = null;
  }

  /** Returns true if field nextUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetNextUserName() {
    return this.nextUserName != null;
  }

  public void setNextUserNameIsSet(boolean value) {
    if (!value) {
      this.nextUserName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case BEGIN_REQUEST_DTTM:
      if (value == null) {
        unsetBeginRequestDttm();
      } else {
        setBeginRequestDttm((String)value);
      }
      break;

    case END_REQUEST_DTTM:
      if (value == null) {
        unsetEndRequestDttm();
      } else {
        setEndRequestDttm((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case APPLY_LOAN_MONEY:
      if (value == null) {
        unsetApplyLoanMoney();
      } else {
        setApplyLoanMoney((Double)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case BUSINESS_SOURCE_NO:
      if (value == null) {
        unsetBusinessSourceNo();
      } else {
        setBusinessSourceNo((Integer)value);
      }
      break;

    case DECLARATION:
      if (value == null) {
        unsetDeclaration();
      } else {
        setDeclaration((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case NEXT_USERS:
      if (value == null) {
        unsetNextUsers();
      } else {
        setNextUsers((String)value);
      }
      break;

    case LOAN_TYPE:
      if (value == null) {
        unsetLoanType();
      } else {
        setLoanType((String)value);
      }
      break;

    case CAPITAL_NAME:
      if (value == null) {
        unsetCapitalName();
      } else {
        setCapitalName((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case RECORD_CLERK_ID:
      if (value == null) {
        unsetRecordClerkId();
      } else {
        setRecordClerkId((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case LOAN_WORK_PROCESS:
      if (value == null) {
        unsetLoanWorkProcess();
      } else {
        setLoanWorkProcess((String)value);
      }
      break;

    case NEXT_USER_NAME:
      if (value == null) {
        unsetNextUserName();
      } else {
        setNextUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case REAL_NAME:
      return getRealName();

    case BEGIN_REQUEST_DTTM:
      return getBeginRequestDttm();

    case END_REQUEST_DTTM:
      return getEndRequestDttm();

    case ACCT_NAME:
      return getAcctName();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case APPLY_LOAN_MONEY:
      return Double.valueOf(getApplyLoanMoney());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case PRODUCT_TYPE:
      return Integer.valueOf(getProductType());

    case USER_IDS:
      return getUserIds();

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case BUSINESS_SOURCE_NO:
      return Integer.valueOf(getBusinessSourceNo());

    case DECLARATION:
      return getDeclaration();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case NEXT_USERS:
      return getNextUsers();

    case LOAN_TYPE:
      return getLoanType();

    case CAPITAL_NAME:
      return getCapitalName();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case RECORD_CLERK_ID:
      return Integer.valueOf(getRecordClerkId());

    case REQUEST_DTTM:
      return getRequestDttm();

    case PRODUCT_NAME:
      return getProductName();

    case LOAN_WORK_PROCESS:
      return getLoanWorkProcess();

    case NEXT_USER_NAME:
      return getNextUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACCT_ID:
      return isSetAcctId();
    case PROJECT_TYPE:
      return isSetProjectType();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PM_USER_ID:
      return isSetPmUserId();
    case REAL_NAME:
      return isSetRealName();
    case BEGIN_REQUEST_DTTM:
      return isSetBeginRequestDttm();
    case END_REQUEST_DTTM:
      return isSetEndRequestDttm();
    case ACCT_NAME:
      return isSetAcctName();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case APPLY_LOAN_MONEY:
      return isSetApplyLoanMoney();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_TYPE:
      return isSetProductType();
    case USER_IDS:
      return isSetUserIds();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case BUSINESS_SOURCE_NO:
      return isSetBusinessSourceNo();
    case DECLARATION:
      return isSetDeclaration();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case NEXT_USERS:
      return isSetNextUsers();
    case LOAN_TYPE:
      return isSetLoanType();
    case CAPITAL_NAME:
      return isSetCapitalName();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case IS_CHECHAN:
      return isSetIsChechan();
    case RECORD_CLERK_ID:
      return isSetRecordClerkId();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case PRODUCT_NAME:
      return isSetProductName();
    case LOAN_WORK_PROCESS:
      return isSetLoanWorkProcess();
    case NEXT_USER_NAME:
      return isSetNextUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectDTO)
      return this.equals((ProjectDTO)that);
    return false;
  }

  public boolean equals(ProjectDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_beginRequestDttm = true && this.isSetBeginRequestDttm();
    boolean that_present_beginRequestDttm = true && that.isSetBeginRequestDttm();
    if (this_present_beginRequestDttm || that_present_beginRequestDttm) {
      if (!(this_present_beginRequestDttm && that_present_beginRequestDttm))
        return false;
      if (!this.beginRequestDttm.equals(that.beginRequestDttm))
        return false;
    }

    boolean this_present_endRequestDttm = true && this.isSetEndRequestDttm();
    boolean that_present_endRequestDttm = true && that.isSetEndRequestDttm();
    if (this_present_endRequestDttm || that_present_endRequestDttm) {
      if (!(this_present_endRequestDttm && that_present_endRequestDttm))
        return false;
      if (!this.endRequestDttm.equals(that.endRequestDttm))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_applyLoanMoney = true;
    boolean that_present_applyLoanMoney = true;
    if (this_present_applyLoanMoney || that_present_applyLoanMoney) {
      if (!(this_present_applyLoanMoney && that_present_applyLoanMoney))
        return false;
      if (this.applyLoanMoney != that.applyLoanMoney)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_productType = true;
    boolean that_present_productType = true;
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (this.productType != that.productType)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_businessSourceNo = true;
    boolean that_present_businessSourceNo = true;
    if (this_present_businessSourceNo || that_present_businessSourceNo) {
      if (!(this_present_businessSourceNo && that_present_businessSourceNo))
        return false;
      if (this.businessSourceNo != that.businessSourceNo)
        return false;
    }

    boolean this_present_declaration = true && this.isSetDeclaration();
    boolean that_present_declaration = true && that.isSetDeclaration();
    if (this_present_declaration || that_present_declaration) {
      if (!(this_present_declaration && that_present_declaration))
        return false;
      if (!this.declaration.equals(that.declaration))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_nextUsers = true && this.isSetNextUsers();
    boolean that_present_nextUsers = true && that.isSetNextUsers();
    if (this_present_nextUsers || that_present_nextUsers) {
      if (!(this_present_nextUsers && that_present_nextUsers))
        return false;
      if (!this.nextUsers.equals(that.nextUsers))
        return false;
    }

    boolean this_present_loanType = true && this.isSetLoanType();
    boolean that_present_loanType = true && that.isSetLoanType();
    if (this_present_loanType || that_present_loanType) {
      if (!(this_present_loanType && that_present_loanType))
        return false;
      if (!this.loanType.equals(that.loanType))
        return false;
    }

    boolean this_present_capitalName = true && this.isSetCapitalName();
    boolean that_present_capitalName = true && that.isSetCapitalName();
    if (this_present_capitalName || that_present_capitalName) {
      if (!(this_present_capitalName && that_present_capitalName))
        return false;
      if (!this.capitalName.equals(that.capitalName))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_recordClerkId = true;
    boolean that_present_recordClerkId = true;
    if (this_present_recordClerkId || that_present_recordClerkId) {
      if (!(this_present_recordClerkId && that_present_recordClerkId))
        return false;
      if (this.recordClerkId != that.recordClerkId)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_loanWorkProcess = true && this.isSetLoanWorkProcess();
    boolean that_present_loanWorkProcess = true && that.isSetLoanWorkProcess();
    if (this_present_loanWorkProcess || that_present_loanWorkProcess) {
      if (!(this_present_loanWorkProcess && that_present_loanWorkProcess))
        return false;
      if (!this.loanWorkProcess.equals(that.loanWorkProcess))
        return false;
    }

    boolean this_present_nextUserName = true && this.isSetNextUserName();
    boolean that_present_nextUserName = true && that.isSetNextUserName();
    if (this_present_nextUserName || that_present_nextUserName) {
      if (!(this_present_nextUserName && that_present_nextUserName))
        return false;
      if (!this.nextUserName.equals(that.nextUserName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_beginRequestDttm = true && (isSetBeginRequestDttm());
    list.add(present_beginRequestDttm);
    if (present_beginRequestDttm)
      list.add(beginRequestDttm);

    boolean present_endRequestDttm = true && (isSetEndRequestDttm());
    list.add(present_endRequestDttm);
    if (present_endRequestDttm)
      list.add(endRequestDttm);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_applyLoanMoney = true;
    list.add(present_applyLoanMoney);
    if (present_applyLoanMoney)
      list.add(applyLoanMoney);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productType = true;
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_businessSourceNo = true;
    list.add(present_businessSourceNo);
    if (present_businessSourceNo)
      list.add(businessSourceNo);

    boolean present_declaration = true && (isSetDeclaration());
    list.add(present_declaration);
    if (present_declaration)
      list.add(declaration);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_nextUsers = true && (isSetNextUsers());
    list.add(present_nextUsers);
    if (present_nextUsers)
      list.add(nextUsers);

    boolean present_loanType = true && (isSetLoanType());
    list.add(present_loanType);
    if (present_loanType)
      list.add(loanType);

    boolean present_capitalName = true && (isSetCapitalName());
    list.add(present_capitalName);
    if (present_capitalName)
      list.add(capitalName);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_recordClerkId = true;
    list.add(present_recordClerkId);
    if (present_recordClerkId)
      list.add(recordClerkId);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_loanWorkProcess = true && (isSetLoanWorkProcess());
    list.add(present_loanWorkProcess);
    if (present_loanWorkProcess)
      list.add(loanWorkProcess);

    boolean present_nextUserName = true && (isSetNextUserName());
    list.add(present_nextUserName);
    if (present_nextUserName)
      list.add(nextUserName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginRequestDttm()).compareTo(other.isSetBeginRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginRequestDttm, other.beginRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndRequestDttm()).compareTo(other.isSetEndRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRequestDttm, other.endRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyLoanMoney()).compareTo(other.isSetApplyLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyLoanMoney, other.applyLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceNo()).compareTo(other.isSetBusinessSourceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceNo, other.businessSourceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeclaration()).compareTo(other.isSetDeclaration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeclaration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.declaration, other.declaration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextUsers()).compareTo(other.isSetNextUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextUsers, other.nextUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanType()).compareTo(other.isSetLoanType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanType, other.loanType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapitalName()).compareTo(other.isSetCapitalName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapitalName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capitalName, other.capitalName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordClerkId()).compareTo(other.isSetRecordClerkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordClerkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordClerkId, other.recordClerkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanWorkProcess()).compareTo(other.isSetLoanWorkProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanWorkProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanWorkProcess, other.loanWorkProcess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextUserName()).compareTo(other.isSetNextUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextUserName, other.nextUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginRequestDttm:");
    if (this.beginRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.beginRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endRequestDttm:");
    if (this.endRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.endRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyLoanMoney:");
    sb.append(this.applyLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    sb.append(this.productType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceNo:");
    sb.append(this.businessSourceNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("declaration:");
    if (this.declaration == null) {
      sb.append("null");
    } else {
      sb.append(this.declaration);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextUsers:");
    if (this.nextUsers == null) {
      sb.append("null");
    } else {
      sb.append(this.nextUsers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanType:");
    if (this.loanType == null) {
      sb.append("null");
    } else {
      sb.append(this.loanType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("capitalName:");
    if (this.capitalName == null) {
      sb.append("null");
    } else {
      sb.append(this.capitalName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordClerkId:");
    sb.append(this.recordClerkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanWorkProcess:");
    if (this.loanWorkProcess == null) {
      sb.append("null");
    } else {
      sb.append(this.loanWorkProcess);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextUserName:");
    if (this.nextUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.nextUserName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectDTOStandardSchemeFactory implements SchemeFactory {
    public ProjectDTOStandardScheme getScheme() {
      return new ProjectDTOStandardScheme();
    }
  }

  private static class ProjectDTOStandardScheme extends StandardScheme<ProjectDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BEGIN_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginRequestDttm = iprot.readString();
              struct.setBeginRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endRequestDttm = iprot.readString();
              struct.setEndRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // APPLY_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.applyLoanMoney = iprot.readDouble();
              struct.setApplyLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = iprot.readI32();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BUSINESS_SOURCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSourceNo = iprot.readI32();
              struct.setBusinessSourceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DECLARATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.declaration = iprot.readString();
              struct.setDeclarationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NEXT_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextUsers = iprot.readString();
              struct.setNextUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanType = iprot.readString();
              struct.setLoanTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CAPITAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.capitalName = iprot.readString();
              struct.setCapitalNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // RECORD_CLERK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordClerkId = iprot.readI32();
              struct.setRecordClerkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LOAN_WORK_PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanWorkProcess = iprot.readString();
              struct.setLoanWorkProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // NEXT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextUserName = iprot.readString();
              struct.setNextUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.beginRequestDttm != null) {
        oprot.writeFieldBegin(BEGIN_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.beginRequestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.endRequestDttm != null) {
        oprot.writeFieldBegin(END_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.endRequestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.applyLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.productType);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter3 : struct.userIds)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_SOURCE_NO_FIELD_DESC);
      oprot.writeI32(struct.businessSourceNo);
      oprot.writeFieldEnd();
      if (struct.declaration != null) {
        oprot.writeFieldBegin(DECLARATION_FIELD_DESC);
        oprot.writeString(struct.declaration);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.nextUsers != null) {
        oprot.writeFieldBegin(NEXT_USERS_FIELD_DESC);
        oprot.writeString(struct.nextUsers);
        oprot.writeFieldEnd();
      }
      if (struct.loanType != null) {
        oprot.writeFieldBegin(LOAN_TYPE_FIELD_DESC);
        oprot.writeString(struct.loanType);
        oprot.writeFieldEnd();
      }
      if (struct.capitalName != null) {
        oprot.writeFieldBegin(CAPITAL_NAME_FIELD_DESC);
        oprot.writeString(struct.capitalName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_CLERK_ID_FIELD_DESC);
      oprot.writeI32(struct.recordClerkId);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.loanWorkProcess != null) {
        oprot.writeFieldBegin(LOAN_WORK_PROCESS_FIELD_DESC);
        oprot.writeString(struct.loanWorkProcess);
        oprot.writeFieldEnd();
      }
      if (struct.nextUserName != null) {
        oprot.writeFieldBegin(NEXT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.nextUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectDTOTupleSchemeFactory implements SchemeFactory {
    public ProjectDTOTupleScheme getScheme() {
      return new ProjectDTOTupleScheme();
    }
  }

  private static class ProjectDTOTupleScheme extends TupleScheme<ProjectDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAcctId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectType()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(4);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(5);
      }
      if (struct.isSetRealName()) {
        optionals.set(6);
      }
      if (struct.isSetBeginRequestDttm()) {
        optionals.set(7);
      }
      if (struct.isSetEndRequestDttm()) {
        optionals.set(8);
      }
      if (struct.isSetAcctName()) {
        optionals.set(9);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(10);
      }
      if (struct.isSetApplyLoanMoney()) {
        optionals.set(11);
      }
      if (struct.isSetProductId()) {
        optionals.set(12);
      }
      if (struct.isSetProductType()) {
        optionals.set(13);
      }
      if (struct.isSetUserIds()) {
        optionals.set(14);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(15);
      }
      if (struct.isSetBusinessSourceNo()) {
        optionals.set(16);
      }
      if (struct.isSetDeclaration()) {
        optionals.set(17);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(18);
      }
      if (struct.isSetNextUsers()) {
        optionals.set(19);
      }
      if (struct.isSetLoanType()) {
        optionals.set(20);
      }
      if (struct.isSetCapitalName()) {
        optionals.set(21);
      }
      if (struct.isSetPage()) {
        optionals.set(22);
      }
      if (struct.isSetRows()) {
        optionals.set(23);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(24);
      }
      if (struct.isSetRecordClerkId()) {
        optionals.set(25);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(26);
      }
      if (struct.isSetProductName()) {
        optionals.set(27);
      }
      if (struct.isSetLoanWorkProcess()) {
        optionals.set(28);
      }
      if (struct.isSetNextUserName()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetBeginRequestDttm()) {
        oprot.writeString(struct.beginRequestDttm);
      }
      if (struct.isSetEndRequestDttm()) {
        oprot.writeString(struct.endRequestDttm);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetApplyLoanMoney()) {
        oprot.writeDouble(struct.applyLoanMoney);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter4 : struct.userIds)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetBusinessSourceNo()) {
        oprot.writeI32(struct.businessSourceNo);
      }
      if (struct.isSetDeclaration()) {
        oprot.writeString(struct.declaration);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetNextUsers()) {
        oprot.writeString(struct.nextUsers);
      }
      if (struct.isSetLoanType()) {
        oprot.writeString(struct.loanType);
      }
      if (struct.isSetCapitalName()) {
        oprot.writeString(struct.capitalName);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetRecordClerkId()) {
        oprot.writeI32(struct.recordClerkId);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetLoanWorkProcess()) {
        oprot.writeString(struct.loanWorkProcess);
      }
      if (struct.isSetNextUserName()) {
        oprot.writeString(struct.nextUserName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.beginRequestDttm = iprot.readString();
        struct.setBeginRequestDttmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endRequestDttm = iprot.readString();
        struct.setEndRequestDttmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(11)) {
        struct.applyLoanMoney = iprot.readDouble();
        struct.setApplyLoanMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.productType = iprot.readI32();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.userIds.add(_elem6);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.businessSourceNo = iprot.readI32();
        struct.setBusinessSourceNoIsSet(true);
      }
      if (incoming.get(17)) {
        struct.declaration = iprot.readString();
        struct.setDeclarationIsSet(true);
      }
      if (incoming.get(18)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(19)) {
        struct.nextUsers = iprot.readString();
        struct.setNextUsersIsSet(true);
      }
      if (incoming.get(20)) {
        struct.loanType = iprot.readString();
        struct.setLoanTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.capitalName = iprot.readString();
        struct.setCapitalNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(23)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(25)) {
        struct.recordClerkId = iprot.readI32();
        struct.setRecordClerkIdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(27)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.loanWorkProcess = iprot.readString();
        struct.setLoanWorkProcessIsSet(true);
      }
      if (incoming.get(29)) {
        struct.nextUserName = iprot.readString();
        struct.setNextUserNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-8")
public class RefuseProjectReport implements org.apache.thrift.TBase<RefuseProjectReport, RefuseProjectReport._Fields>, java.io.Serializable, Cloneable, Comparable<RefuseProjectReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefuseProjectReport");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REFUSE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseUserName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REFUSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REFUSE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseReason", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REFUSE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTimeStart", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REFUSE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTimeEnd", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefuseProjectReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefuseProjectReportTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNumber; // required
  public String businessSourceStr; // required
  public String productName; // required
  public int productId; // required
  public String acctName; // required
  public double loanMoney; // required
  public String refuseUserName; // required
  public String refuseTime; // required
  public String refuseReason; // required
  public String refuseTimeStart; // required
  public String refuseTimeEnd; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    BUSINESS_SOURCE_STR((short)4, "businessSourceStr"),
    PRODUCT_NAME((short)5, "productName"),
    PRODUCT_ID((short)6, "productId"),
    ACCT_NAME((short)7, "acctName"),
    LOAN_MONEY((short)8, "loanMoney"),
    REFUSE_USER_NAME((short)9, "refuseUserName"),
    REFUSE_TIME((short)10, "refuseTime"),
    REFUSE_REASON((short)11, "refuseReason"),
    REFUSE_TIME_START((short)12, "refuseTimeStart"),
    REFUSE_TIME_END((short)13, "refuseTimeEnd"),
    PAGE((short)14, "page"),
    ROWS((short)15, "rows"),
    USER_IDS((short)16, "userIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 5: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 6: // PRODUCT_ID
          return PRODUCT_ID;
        case 7: // ACCT_NAME
          return ACCT_NAME;
        case 8: // LOAN_MONEY
          return LOAN_MONEY;
        case 9: // REFUSE_USER_NAME
          return REFUSE_USER_NAME;
        case 10: // REFUSE_TIME
          return REFUSE_TIME;
        case 11: // REFUSE_REASON
          return REFUSE_REASON;
        case 12: // REFUSE_TIME_START
          return REFUSE_TIME_START;
        case 13: // REFUSE_TIME_END
          return REFUSE_TIME_END;
        case 14: // PAGE
          return PAGE;
        case 15: // ROWS
          return ROWS;
        case 16: // USER_IDS
          return USER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __PRODUCTID_ISSET_ID = 1;
  private static final int __LOANMONEY_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUSE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("refuseUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("refuseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_REASON, new org.apache.thrift.meta_data.FieldMetaData("refuseReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("refuseTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("refuseTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefuseProjectReport.class, metaDataMap);
  }

  public RefuseProjectReport() {
    this.page = 1;

    this.rows = 10;

  }

  public RefuseProjectReport(
    int projectId,
    String projectName,
    String projectNumber,
    String businessSourceStr,
    String productName,
    int productId,
    String acctName,
    double loanMoney,
    String refuseUserName,
    String refuseTime,
    String refuseReason,
    String refuseTimeStart,
    String refuseTimeEnd,
    int page,
    int rows,
    List<Integer> userIds)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.businessSourceStr = businessSourceStr;
    this.productName = productName;
    this.productId = productId;
    setProductIdIsSet(true);
    this.acctName = acctName;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.refuseUserName = refuseUserName;
    this.refuseTime = refuseTime;
    this.refuseReason = refuseReason;
    this.refuseTimeStart = refuseTimeStart;
    this.refuseTimeEnd = refuseTimeEnd;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefuseProjectReport(RefuseProjectReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.productId = other.productId;
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    this.loanMoney = other.loanMoney;
    if (other.isSetRefuseUserName()) {
      this.refuseUserName = other.refuseUserName;
    }
    if (other.isSetRefuseTime()) {
      this.refuseTime = other.refuseTime;
    }
    if (other.isSetRefuseReason()) {
      this.refuseReason = other.refuseReason;
    }
    if (other.isSetRefuseTimeStart()) {
      this.refuseTimeStart = other.refuseTimeStart;
    }
    if (other.isSetRefuseTimeEnd()) {
      this.refuseTimeEnd = other.refuseTimeEnd;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
  }

  public RefuseProjectReport deepCopy() {
    return new RefuseProjectReport(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.businessSourceStr = null;
    this.productName = null;
    setProductIdIsSet(false);
    this.productId = 0;
    this.acctName = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.refuseUserName = null;
    this.refuseTime = null;
    this.refuseReason = null;
    this.refuseTimeStart = null;
    this.refuseTimeEnd = null;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RefuseProjectReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RefuseProjectReport setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public RefuseProjectReport setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public RefuseProjectReport setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public RefuseProjectReport setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getProductId() {
    return this.productId;
  }

  public RefuseProjectReport setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getAcctName() {
    return this.acctName;
  }

  public RefuseProjectReport setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public RefuseProjectReport setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getRefuseUserName() {
    return this.refuseUserName;
  }

  public RefuseProjectReport setRefuseUserName(String refuseUserName) {
    this.refuseUserName = refuseUserName;
    return this;
  }

  public void unsetRefuseUserName() {
    this.refuseUserName = null;
  }

  /** Returns true if field refuseUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseUserName() {
    return this.refuseUserName != null;
  }

  public void setRefuseUserNameIsSet(boolean value) {
    if (!value) {
      this.refuseUserName = null;
    }
  }

  public String getRefuseTime() {
    return this.refuseTime;
  }

  public RefuseProjectReport setRefuseTime(String refuseTime) {
    this.refuseTime = refuseTime;
    return this;
  }

  public void unsetRefuseTime() {
    this.refuseTime = null;
  }

  /** Returns true if field refuseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTime() {
    return this.refuseTime != null;
  }

  public void setRefuseTimeIsSet(boolean value) {
    if (!value) {
      this.refuseTime = null;
    }
  }

  public String getRefuseReason() {
    return this.refuseReason;
  }

  public RefuseProjectReport setRefuseReason(String refuseReason) {
    this.refuseReason = refuseReason;
    return this;
  }

  public void unsetRefuseReason() {
    this.refuseReason = null;
  }

  /** Returns true if field refuseReason is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseReason() {
    return this.refuseReason != null;
  }

  public void setRefuseReasonIsSet(boolean value) {
    if (!value) {
      this.refuseReason = null;
    }
  }

  public String getRefuseTimeStart() {
    return this.refuseTimeStart;
  }

  public RefuseProjectReport setRefuseTimeStart(String refuseTimeStart) {
    this.refuseTimeStart = refuseTimeStart;
    return this;
  }

  public void unsetRefuseTimeStart() {
    this.refuseTimeStart = null;
  }

  /** Returns true if field refuseTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTimeStart() {
    return this.refuseTimeStart != null;
  }

  public void setRefuseTimeStartIsSet(boolean value) {
    if (!value) {
      this.refuseTimeStart = null;
    }
  }

  public String getRefuseTimeEnd() {
    return this.refuseTimeEnd;
  }

  public RefuseProjectReport setRefuseTimeEnd(String refuseTimeEnd) {
    this.refuseTimeEnd = refuseTimeEnd;
    return this;
  }

  public void unsetRefuseTimeEnd() {
    this.refuseTimeEnd = null;
  }

  /** Returns true if field refuseTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTimeEnd() {
    return this.refuseTimeEnd != null;
  }

  public void setRefuseTimeEndIsSet(boolean value) {
    if (!value) {
      this.refuseTimeEnd = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public RefuseProjectReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RefuseProjectReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public RefuseProjectReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case REFUSE_USER_NAME:
      if (value == null) {
        unsetRefuseUserName();
      } else {
        setRefuseUserName((String)value);
      }
      break;

    case REFUSE_TIME:
      if (value == null) {
        unsetRefuseTime();
      } else {
        setRefuseTime((String)value);
      }
      break;

    case REFUSE_REASON:
      if (value == null) {
        unsetRefuseReason();
      } else {
        setRefuseReason((String)value);
      }
      break;

    case REFUSE_TIME_START:
      if (value == null) {
        unsetRefuseTimeStart();
      } else {
        setRefuseTimeStart((String)value);
      }
      break;

    case REFUSE_TIME_END:
      if (value == null) {
        unsetRefuseTimeEnd();
      } else {
        setRefuseTimeEnd((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case PRODUCT_NAME:
      return getProductName();

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case ACCT_NAME:
      return getAcctName();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case REFUSE_USER_NAME:
      return getRefuseUserName();

    case REFUSE_TIME:
      return getRefuseTime();

    case REFUSE_REASON:
      return getRefuseReason();

    case REFUSE_TIME_START:
      return getRefuseTimeStart();

    case REFUSE_TIME_END:
      return getRefuseTimeEnd();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case PRODUCT_NAME:
      return isSetProductName();
    case PRODUCT_ID:
      return isSetProductId();
    case ACCT_NAME:
      return isSetAcctName();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case REFUSE_USER_NAME:
      return isSetRefuseUserName();
    case REFUSE_TIME:
      return isSetRefuseTime();
    case REFUSE_REASON:
      return isSetRefuseReason();
    case REFUSE_TIME_START:
      return isSetRefuseTimeStart();
    case REFUSE_TIME_END:
      return isSetRefuseTimeEnd();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefuseProjectReport)
      return this.equals((RefuseProjectReport)that);
    return false;
  }

  public boolean equals(RefuseProjectReport that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_refuseUserName = true && this.isSetRefuseUserName();
    boolean that_present_refuseUserName = true && that.isSetRefuseUserName();
    if (this_present_refuseUserName || that_present_refuseUserName) {
      if (!(this_present_refuseUserName && that_present_refuseUserName))
        return false;
      if (!this.refuseUserName.equals(that.refuseUserName))
        return false;
    }

    boolean this_present_refuseTime = true && this.isSetRefuseTime();
    boolean that_present_refuseTime = true && that.isSetRefuseTime();
    if (this_present_refuseTime || that_present_refuseTime) {
      if (!(this_present_refuseTime && that_present_refuseTime))
        return false;
      if (!this.refuseTime.equals(that.refuseTime))
        return false;
    }

    boolean this_present_refuseReason = true && this.isSetRefuseReason();
    boolean that_present_refuseReason = true && that.isSetRefuseReason();
    if (this_present_refuseReason || that_present_refuseReason) {
      if (!(this_present_refuseReason && that_present_refuseReason))
        return false;
      if (!this.refuseReason.equals(that.refuseReason))
        return false;
    }

    boolean this_present_refuseTimeStart = true && this.isSetRefuseTimeStart();
    boolean that_present_refuseTimeStart = true && that.isSetRefuseTimeStart();
    if (this_present_refuseTimeStart || that_present_refuseTimeStart) {
      if (!(this_present_refuseTimeStart && that_present_refuseTimeStart))
        return false;
      if (!this.refuseTimeStart.equals(that.refuseTimeStart))
        return false;
    }

    boolean this_present_refuseTimeEnd = true && this.isSetRefuseTimeEnd();
    boolean that_present_refuseTimeEnd = true && that.isSetRefuseTimeEnd();
    if (this_present_refuseTimeEnd || that_present_refuseTimeEnd) {
      if (!(this_present_refuseTimeEnd && that_present_refuseTimeEnd))
        return false;
      if (!this.refuseTimeEnd.equals(that.refuseTimeEnd))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_refuseUserName = true && (isSetRefuseUserName());
    list.add(present_refuseUserName);
    if (present_refuseUserName)
      list.add(refuseUserName);

    boolean present_refuseTime = true && (isSetRefuseTime());
    list.add(present_refuseTime);
    if (present_refuseTime)
      list.add(refuseTime);

    boolean present_refuseReason = true && (isSetRefuseReason());
    list.add(present_refuseReason);
    if (present_refuseReason)
      list.add(refuseReason);

    boolean present_refuseTimeStart = true && (isSetRefuseTimeStart());
    list.add(present_refuseTimeStart);
    if (present_refuseTimeStart)
      list.add(refuseTimeStart);

    boolean present_refuseTimeEnd = true && (isSetRefuseTimeEnd());
    list.add(present_refuseTimeEnd);
    if (present_refuseTimeEnd)
      list.add(refuseTimeEnd);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(RefuseProjectReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseUserName()).compareTo(other.isSetRefuseUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseUserName, other.refuseUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTime()).compareTo(other.isSetRefuseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTime, other.refuseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseReason()).compareTo(other.isSetRefuseReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseReason, other.refuseReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTimeStart()).compareTo(other.isSetRefuseTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTimeStart, other.refuseTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTimeEnd()).compareTo(other.isSetRefuseTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTimeEnd, other.refuseTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefuseProjectReport(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refuseUserName:");
    if (this.refuseUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.refuseUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refuseTime:");
    if (this.refuseTime == null) {
      sb.append("null");
    } else {
      sb.append(this.refuseTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refuseReason:");
    if (this.refuseReason == null) {
      sb.append("null");
    } else {
      sb.append(this.refuseReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refuseTimeStart:");
    if (this.refuseTimeStart == null) {
      sb.append("null");
    } else {
      sb.append(this.refuseTimeStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refuseTimeEnd:");
    if (this.refuseTimeEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.refuseTimeEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefuseProjectReportStandardSchemeFactory implements SchemeFactory {
    public RefuseProjectReportStandardScheme getScheme() {
      return new RefuseProjectReportStandardScheme();
    }
  }

  private static class RefuseProjectReportStandardScheme extends StandardScheme<RefuseProjectReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefuseProjectReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REFUSE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseUserName = iprot.readString();
              struct.setRefuseUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REFUSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseTime = iprot.readString();
              struct.setRefuseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REFUSE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseReason = iprot.readString();
              struct.setRefuseReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REFUSE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseTimeStart = iprot.readString();
              struct.setRefuseTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REFUSE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseTimeEnd = iprot.readString();
              struct.setRefuseTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list96.size);
                int _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readI32();
                  struct.userIds.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefuseProjectReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.refuseUserName != null) {
        oprot.writeFieldBegin(REFUSE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.refuseUserName);
        oprot.writeFieldEnd();
      }
      if (struct.refuseTime != null) {
        oprot.writeFieldBegin(REFUSE_TIME_FIELD_DESC);
        oprot.writeString(struct.refuseTime);
        oprot.writeFieldEnd();
      }
      if (struct.refuseReason != null) {
        oprot.writeFieldBegin(REFUSE_REASON_FIELD_DESC);
        oprot.writeString(struct.refuseReason);
        oprot.writeFieldEnd();
      }
      if (struct.refuseTimeStart != null) {
        oprot.writeFieldBegin(REFUSE_TIME_START_FIELD_DESC);
        oprot.writeString(struct.refuseTimeStart);
        oprot.writeFieldEnd();
      }
      if (struct.refuseTimeEnd != null) {
        oprot.writeFieldBegin(REFUSE_TIME_END_FIELD_DESC);
        oprot.writeString(struct.refuseTimeEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter99 : struct.userIds)
          {
            oprot.writeI32(_iter99);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefuseProjectReportTupleSchemeFactory implements SchemeFactory {
    public RefuseProjectReportTupleScheme getScheme() {
      return new RefuseProjectReportTupleScheme();
    }
  }

  private static class RefuseProjectReportTupleScheme extends TupleScheme<RefuseProjectReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefuseProjectReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(3);
      }
      if (struct.isSetProductName()) {
        optionals.set(4);
      }
      if (struct.isSetProductId()) {
        optionals.set(5);
      }
      if (struct.isSetAcctName()) {
        optionals.set(6);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(7);
      }
      if (struct.isSetRefuseUserName()) {
        optionals.set(8);
      }
      if (struct.isSetRefuseTime()) {
        optionals.set(9);
      }
      if (struct.isSetRefuseReason()) {
        optionals.set(10);
      }
      if (struct.isSetRefuseTimeStart()) {
        optionals.set(11);
      }
      if (struct.isSetRefuseTimeEnd()) {
        optionals.set(12);
      }
      if (struct.isSetPage()) {
        optionals.set(13);
      }
      if (struct.isSetRows()) {
        optionals.set(14);
      }
      if (struct.isSetUserIds()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetRefuseUserName()) {
        oprot.writeString(struct.refuseUserName);
      }
      if (struct.isSetRefuseTime()) {
        oprot.writeString(struct.refuseTime);
      }
      if (struct.isSetRefuseReason()) {
        oprot.writeString(struct.refuseReason);
      }
      if (struct.isSetRefuseTimeStart()) {
        oprot.writeString(struct.refuseTimeStart);
      }
      if (struct.isSetRefuseTimeEnd()) {
        oprot.writeString(struct.refuseTimeEnd);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter100 : struct.userIds)
          {
            oprot.writeI32(_iter100);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefuseProjectReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.refuseUserName = iprot.readString();
        struct.setRefuseUserNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.refuseTime = iprot.readString();
        struct.setRefuseTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.refuseReason = iprot.readString();
        struct.setRefuseReasonIsSet(true);
      }
      if (incoming.get(11)) {
        struct.refuseTimeStart = iprot.readString();
        struct.setRefuseTimeStartIsSet(true);
      }
      if (incoming.get(12)) {
        struct.refuseTimeEnd = iprot.readString();
        struct.setRefuseTimeEndIsSet(true);
      }
      if (incoming.get(13)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list101.size);
          int _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readI32();
            struct.userIds.add(_elem102);
          }
        }
        struct.setUserIdsIsSet(true);
      }
    }
  }

}


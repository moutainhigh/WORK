/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.fddafterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizStorageInfo implements org.apache.thrift.TBase<BizStorageInfo, BizStorageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BizStorageInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizStorageInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MORTGAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDesc", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createName", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizStorageInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizStorageInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int mortgageId; // required
  public String fileName; // required
  public String registerTime; // required
  public String fileDesc; // required
  public int createId; // required
  public String createDate; // required
  public int status; // required
  public int page; // required
  public int rows; // required
  public String createName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    MORTGAGE_ID((short)3, "mortgageId"),
    FILE_NAME((short)4, "fileName"),
    REGISTER_TIME((short)5, "registerTime"),
    FILE_DESC((short)6, "fileDesc"),
    CREATE_ID((short)7, "createId"),
    CREATE_DATE((short)8, "createDate"),
    STATUS((short)9, "status"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    CREATE_NAME((short)12, "createName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // MORTGAGE_ID
          return MORTGAGE_ID;
        case 4: // FILE_NAME
          return FILE_NAME;
        case 5: // REGISTER_TIME
          return REGISTER_TIME;
        case 6: // FILE_DESC
          return FILE_DESC;
        case 7: // CREATE_ID
          return CREATE_ID;
        case 8: // CREATE_DATE
          return CREATE_DATE;
        case 9: // STATUS
          return STATUS;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // CREATE_NAME
          return CREATE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __MORTGAGEID_ISSET_ID = 2;
  private static final int __CREATEID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("mortgageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("registerTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("fileDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_ID, new org.apache.thrift.meta_data.FieldMetaData("createId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("createName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizStorageInfo.class, metaDataMap);
  }

  public BizStorageInfo() {
    this.page = 1;

    this.rows = 10;

  }

  public BizStorageInfo(
    int pid,
    int projectId,
    int mortgageId,
    String fileName,
    String registerTime,
    String fileDesc,
    int createId,
    String createDate,
    int status,
    int page,
    int rows,
    String createName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.mortgageId = mortgageId;
    setMortgageIdIsSet(true);
    this.fileName = fileName;
    this.registerTime = registerTime;
    this.fileDesc = fileDesc;
    this.createId = createId;
    setCreateIdIsSet(true);
    this.createDate = createDate;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.createName = createName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizStorageInfo(BizStorageInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.mortgageId = other.mortgageId;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetRegisterTime()) {
      this.registerTime = other.registerTime;
    }
    if (other.isSetFileDesc()) {
      this.fileDesc = other.fileDesc;
    }
    this.createId = other.createId;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreateName()) {
      this.createName = other.createName;
    }
  }

  public BizStorageInfo deepCopy() {
    return new BizStorageInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setMortgageIdIsSet(false);
    this.mortgageId = 0;
    this.fileName = null;
    this.registerTime = null;
    this.fileDesc = null;
    setCreateIdIsSet(false);
    this.createId = 0;
    this.createDate = null;
    setStatusIsSet(false);
    this.status = 0;
    this.page = 1;

    this.rows = 10;

    this.createName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizStorageInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizStorageInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getMortgageId() {
    return this.mortgageId;
  }

  public BizStorageInfo setMortgageId(int mortgageId) {
    this.mortgageId = mortgageId;
    setMortgageIdIsSet(true);
    return this;
  }

  public void unsetMortgageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGEID_ISSET_ID);
  }

  /** Returns true if field mortgageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageId() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGEID_ISSET_ID);
  }

  public void setMortgageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGEID_ISSET_ID, value);
  }

  public String getFileName() {
    return this.fileName;
  }

  public BizStorageInfo setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getRegisterTime() {
    return this.registerTime;
  }

  public BizStorageInfo setRegisterTime(String registerTime) {
    this.registerTime = registerTime;
    return this;
  }

  public void unsetRegisterTime() {
    this.registerTime = null;
  }

  /** Returns true if field registerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterTime() {
    return this.registerTime != null;
  }

  public void setRegisterTimeIsSet(boolean value) {
    if (!value) {
      this.registerTime = null;
    }
  }

  public String getFileDesc() {
    return this.fileDesc;
  }

  public BizStorageInfo setFileDesc(String fileDesc) {
    this.fileDesc = fileDesc;
    return this;
  }

  public void unsetFileDesc() {
    this.fileDesc = null;
  }

  /** Returns true if field fileDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFileDesc() {
    return this.fileDesc != null;
  }

  public void setFileDescIsSet(boolean value) {
    if (!value) {
      this.fileDesc = null;
    }
  }

  public int getCreateId() {
    return this.createId;
  }

  public BizStorageInfo setCreateId(int createId) {
    this.createId = createId;
    setCreateIdIsSet(true);
    return this;
  }

  public void unsetCreateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  /** Returns true if field createId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  public void setCreateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEID_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public BizStorageInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizStorageInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public BizStorageInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public BizStorageInfo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreateName() {
    return this.createName;
  }

  public BizStorageInfo setCreateName(String createName) {
    this.createName = createName;
    return this;
  }

  public void unsetCreateName() {
    this.createName = null;
  }

  /** Returns true if field createName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateName() {
    return this.createName != null;
  }

  public void setCreateNameIsSet(boolean value) {
    if (!value) {
      this.createName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MORTGAGE_ID:
      if (value == null) {
        unsetMortgageId();
      } else {
        setMortgageId((Integer)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case REGISTER_TIME:
      if (value == null) {
        unsetRegisterTime();
      } else {
        setRegisterTime((String)value);
      }
      break;

    case FILE_DESC:
      if (value == null) {
        unsetFileDesc();
      } else {
        setFileDesc((String)value);
      }
      break;

    case CREATE_ID:
      if (value == null) {
        unsetCreateId();
      } else {
        setCreateId((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATE_NAME:
      if (value == null) {
        unsetCreateName();
      } else {
        setCreateName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MORTGAGE_ID:
      return Integer.valueOf(getMortgageId());

    case FILE_NAME:
      return getFileName();

    case REGISTER_TIME:
      return getRegisterTime();

    case FILE_DESC:
      return getFileDesc();

    case CREATE_ID:
      return Integer.valueOf(getCreateId());

    case CREATE_DATE:
      return getCreateDate();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATE_NAME:
      return getCreateName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case MORTGAGE_ID:
      return isSetMortgageId();
    case FILE_NAME:
      return isSetFileName();
    case REGISTER_TIME:
      return isSetRegisterTime();
    case FILE_DESC:
      return isSetFileDesc();
    case CREATE_ID:
      return isSetCreateId();
    case CREATE_DATE:
      return isSetCreateDate();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATE_NAME:
      return isSetCreateName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizStorageInfo)
      return this.equals((BizStorageInfo)that);
    return false;
  }

  public boolean equals(BizStorageInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_mortgageId = true;
    boolean that_present_mortgageId = true;
    if (this_present_mortgageId || that_present_mortgageId) {
      if (!(this_present_mortgageId && that_present_mortgageId))
        return false;
      if (this.mortgageId != that.mortgageId)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_registerTime = true && this.isSetRegisterTime();
    boolean that_present_registerTime = true && that.isSetRegisterTime();
    if (this_present_registerTime || that_present_registerTime) {
      if (!(this_present_registerTime && that_present_registerTime))
        return false;
      if (!this.registerTime.equals(that.registerTime))
        return false;
    }

    boolean this_present_fileDesc = true && this.isSetFileDesc();
    boolean that_present_fileDesc = true && that.isSetFileDesc();
    if (this_present_fileDesc || that_present_fileDesc) {
      if (!(this_present_fileDesc && that_present_fileDesc))
        return false;
      if (!this.fileDesc.equals(that.fileDesc))
        return false;
    }

    boolean this_present_createId = true;
    boolean that_present_createId = true;
    if (this_present_createId || that_present_createId) {
      if (!(this_present_createId && that_present_createId))
        return false;
      if (this.createId != that.createId)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_createName = true && this.isSetCreateName();
    boolean that_present_createName = true && that.isSetCreateName();
    if (this_present_createName || that_present_createName) {
      if (!(this_present_createName && that_present_createName))
        return false;
      if (!this.createName.equals(that.createName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_mortgageId = true;
    list.add(present_mortgageId);
    if (present_mortgageId)
      list.add(mortgageId);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_registerTime = true && (isSetRegisterTime());
    list.add(present_registerTime);
    if (present_registerTime)
      list.add(registerTime);

    boolean present_fileDesc = true && (isSetFileDesc());
    list.add(present_fileDesc);
    if (present_fileDesc)
      list.add(fileDesc);

    boolean present_createId = true;
    list.add(present_createId);
    if (present_createId)
      list.add(createId);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_createName = true && (isSetCreateName());
    list.add(present_createName);
    if (present_createName)
      list.add(createName);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizStorageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageId()).compareTo(other.isSetMortgageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageId, other.mortgageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterTime()).compareTo(other.isSetRegisterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTime, other.registerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileDesc()).compareTo(other.isSetFileDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDesc, other.fileDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateId()).compareTo(other.isSetCreateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createId, other.createId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateName()).compareTo(other.isSetCreateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createName, other.createName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizStorageInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageId:");
    sb.append(this.mortgageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerTime:");
    if (this.registerTime == null) {
      sb.append("null");
    } else {
      sb.append(this.registerTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileDesc:");
    if (this.fileDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.fileDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createId:");
    sb.append(this.createId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createName:");
    if (this.createName == null) {
      sb.append("null");
    } else {
      sb.append(this.createName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizStorageInfoStandardSchemeFactory implements SchemeFactory {
    public BizStorageInfoStandardScheme getScheme() {
      return new BizStorageInfoStandardScheme();
    }
  }

  private static class BizStorageInfoStandardScheme extends StandardScheme<BizStorageInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizStorageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MORTGAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageId = iprot.readI32();
              struct.setMortgageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerTime = iprot.readString();
              struct.setRegisterTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileDesc = iprot.readString();
              struct.setFileDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createId = iprot.readI32();
              struct.setCreateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createName = iprot.readString();
              struct.setCreateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizStorageInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.mortgageId);
      oprot.writeFieldEnd();
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.registerTime != null) {
        oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
        oprot.writeString(struct.registerTime);
        oprot.writeFieldEnd();
      }
      if (struct.fileDesc != null) {
        oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
        oprot.writeString(struct.fileDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_ID_FIELD_DESC);
      oprot.writeI32(struct.createId);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.createName != null) {
        oprot.writeFieldBegin(CREATE_NAME_FIELD_DESC);
        oprot.writeString(struct.createName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizStorageInfoTupleSchemeFactory implements SchemeFactory {
    public BizStorageInfoTupleScheme getScheme() {
      return new BizStorageInfoTupleScheme();
    }
  }

  private static class BizStorageInfoTupleScheme extends TupleScheme<BizStorageInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizStorageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetMortgageId()) {
        optionals.set(2);
      }
      if (struct.isSetFileName()) {
        optionals.set(3);
      }
      if (struct.isSetRegisterTime()) {
        optionals.set(4);
      }
      if (struct.isSetFileDesc()) {
        optionals.set(5);
      }
      if (struct.isSetCreateId()) {
        optionals.set(6);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetCreateName()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetMortgageId()) {
        oprot.writeI32(struct.mortgageId);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetRegisterTime()) {
        oprot.writeString(struct.registerTime);
      }
      if (struct.isSetFileDesc()) {
        oprot.writeString(struct.fileDesc);
      }
      if (struct.isSetCreateId()) {
        oprot.writeI32(struct.createId);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreateName()) {
        oprot.writeString(struct.createName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizStorageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mortgageId = iprot.readI32();
        struct.setMortgageIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.registerTime = iprot.readString();
        struct.setRegisterTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileDesc = iprot.readString();
        struct.setFileDescIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createId = iprot.readI32();
        struct.setCreateIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createName = iprot.readString();
        struct.setCreateNameIsSet(true);
      }
    }
  }

}


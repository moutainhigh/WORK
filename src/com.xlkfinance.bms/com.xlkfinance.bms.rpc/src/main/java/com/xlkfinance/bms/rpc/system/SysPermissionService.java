/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysPermissionService {

  public interface Iface {

    public int addSysPermission(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteSysPermission(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteSysPermissionByMenuId(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateSysPermission(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateSysPermissionByMenuId(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<SysPermission> getSysPermissionList(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<SysPermission> getSysPermissionByParameter(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<SysRole> getPermisRoleList(int pageNum, int pageSize, SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int getPermisRoleListTotal(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<SysRole> getNotHaveRoleOfPermisList(int pageNum, int pageSize, SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteRoleOfPermisById(Map<String,String> parameter) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int addRoleOfPermisById(Map<String,String> parameter) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int getSysPermissionCount(SysPermission sysPermission) throws org.apache.thrift.TException;

    public int srarchSysPermissionCount(SysPermission sysPermission) throws org.apache.thrift.TException;

    public SysPermission getPermisByName(String permisName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSysPermission(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSysPermission(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSysPermissionByMenuId(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSysPermission(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSysPermissionByMenuId(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysPermissionList(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysPermissionByParameter(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPermisRoleList(int pageNum, int pageSize, SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPermisRoleListTotal(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNotHaveRoleOfPermisList(int pageNum, int pageSize, SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRoleOfPermisById(Map<String,String> parameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRoleOfPermisById(Map<String,String> parameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysPermissionCount(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void srarchSysPermissionCount(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPermisByName(String permisName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addSysPermission(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addSysPermission(sysPermission);
      return recv_addSysPermission();
    }

    public void send_addSysPermission(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      addSysPermission_args args = new addSysPermission_args();
      args.setSysPermission(sysPermission);
      sendBase("addSysPermission", args);
    }

    public int recv_addSysPermission() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addSysPermission_result result = new addSysPermission_result();
      receiveBase(result, "addSysPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSysPermission failed: unknown result");
    }

    public int deleteSysPermission(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteSysPermission(sysPermission);
      return recv_deleteSysPermission();
    }

    public void send_deleteSysPermission(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      deleteSysPermission_args args = new deleteSysPermission_args();
      args.setSysPermission(sysPermission);
      sendBase("deleteSysPermission", args);
    }

    public int recv_deleteSysPermission() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteSysPermission_result result = new deleteSysPermission_result();
      receiveBase(result, "deleteSysPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSysPermission failed: unknown result");
    }

    public int deleteSysPermissionByMenuId(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteSysPermissionByMenuId(sysPermission);
      return recv_deleteSysPermissionByMenuId();
    }

    public void send_deleteSysPermissionByMenuId(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      deleteSysPermissionByMenuId_args args = new deleteSysPermissionByMenuId_args();
      args.setSysPermission(sysPermission);
      sendBase("deleteSysPermissionByMenuId", args);
    }

    public int recv_deleteSysPermissionByMenuId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteSysPermissionByMenuId_result result = new deleteSysPermissionByMenuId_result();
      receiveBase(result, "deleteSysPermissionByMenuId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSysPermissionByMenuId failed: unknown result");
    }

    public int updateSysPermission(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateSysPermission(sysPermission);
      return recv_updateSysPermission();
    }

    public void send_updateSysPermission(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      updateSysPermission_args args = new updateSysPermission_args();
      args.setSysPermission(sysPermission);
      sendBase("updateSysPermission", args);
    }

    public int recv_updateSysPermission() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateSysPermission_result result = new updateSysPermission_result();
      receiveBase(result, "updateSysPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSysPermission failed: unknown result");
    }

    public int updateSysPermissionByMenuId(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateSysPermissionByMenuId(sysPermission);
      return recv_updateSysPermissionByMenuId();
    }

    public void send_updateSysPermissionByMenuId(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      updateSysPermissionByMenuId_args args = new updateSysPermissionByMenuId_args();
      args.setSysPermission(sysPermission);
      sendBase("updateSysPermissionByMenuId", args);
    }

    public int recv_updateSysPermissionByMenuId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateSysPermissionByMenuId_result result = new updateSysPermissionByMenuId_result();
      receiveBase(result, "updateSysPermissionByMenuId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSysPermissionByMenuId failed: unknown result");
    }

    public List<SysPermission> getSysPermissionList(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getSysPermissionList(sysPermission);
      return recv_getSysPermissionList();
    }

    public void send_getSysPermissionList(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      getSysPermissionList_args args = new getSysPermissionList_args();
      args.setSysPermission(sysPermission);
      sendBase("getSysPermissionList", args);
    }

    public List<SysPermission> recv_getSysPermissionList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getSysPermissionList_result result = new getSysPermissionList_result();
      receiveBase(result, "getSysPermissionList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysPermissionList failed: unknown result");
    }

    public List<SysPermission> getSysPermissionByParameter(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getSysPermissionByParameter(sysPermission);
      return recv_getSysPermissionByParameter();
    }

    public void send_getSysPermissionByParameter(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      getSysPermissionByParameter_args args = new getSysPermissionByParameter_args();
      args.setSysPermission(sysPermission);
      sendBase("getSysPermissionByParameter", args);
    }

    public List<SysPermission> recv_getSysPermissionByParameter() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getSysPermissionByParameter_result result = new getSysPermissionByParameter_result();
      receiveBase(result, "getSysPermissionByParameter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysPermissionByParameter failed: unknown result");
    }

    public List<SysRole> getPermisRoleList(int pageNum, int pageSize, SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getPermisRoleList(pageNum, pageSize, sysPermission);
      return recv_getPermisRoleList();
    }

    public void send_getPermisRoleList(int pageNum, int pageSize, SysPermission sysPermission) throws org.apache.thrift.TException
    {
      getPermisRoleList_args args = new getPermisRoleList_args();
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      args.setSysPermission(sysPermission);
      sendBase("getPermisRoleList", args);
    }

    public List<SysRole> recv_getPermisRoleList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getPermisRoleList_result result = new getPermisRoleList_result();
      receiveBase(result, "getPermisRoleList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPermisRoleList failed: unknown result");
    }

    public int getPermisRoleListTotal(SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getPermisRoleListTotal(sysPermission);
      return recv_getPermisRoleListTotal();
    }

    public void send_getPermisRoleListTotal(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      getPermisRoleListTotal_args args = new getPermisRoleListTotal_args();
      args.setSysPermission(sysPermission);
      sendBase("getPermisRoleListTotal", args);
    }

    public int recv_getPermisRoleListTotal() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getPermisRoleListTotal_result result = new getPermisRoleListTotal_result();
      receiveBase(result, "getPermisRoleListTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPermisRoleListTotal failed: unknown result");
    }

    public List<SysRole> getNotHaveRoleOfPermisList(int pageNum, int pageSize, SysPermission sysPermission) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getNotHaveRoleOfPermisList(pageNum, pageSize, sysPermission);
      return recv_getNotHaveRoleOfPermisList();
    }

    public void send_getNotHaveRoleOfPermisList(int pageNum, int pageSize, SysPermission sysPermission) throws org.apache.thrift.TException
    {
      getNotHaveRoleOfPermisList_args args = new getNotHaveRoleOfPermisList_args();
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      args.setSysPermission(sysPermission);
      sendBase("getNotHaveRoleOfPermisList", args);
    }

    public List<SysRole> recv_getNotHaveRoleOfPermisList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getNotHaveRoleOfPermisList_result result = new getNotHaveRoleOfPermisList_result();
      receiveBase(result, "getNotHaveRoleOfPermisList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotHaveRoleOfPermisList failed: unknown result");
    }

    public int deleteRoleOfPermisById(Map<String,String> parameter) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteRoleOfPermisById(parameter);
      return recv_deleteRoleOfPermisById();
    }

    public void send_deleteRoleOfPermisById(Map<String,String> parameter) throws org.apache.thrift.TException
    {
      deleteRoleOfPermisById_args args = new deleteRoleOfPermisById_args();
      args.setParameter(parameter);
      sendBase("deleteRoleOfPermisById", args);
    }

    public int recv_deleteRoleOfPermisById() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteRoleOfPermisById_result result = new deleteRoleOfPermisById_result();
      receiveBase(result, "deleteRoleOfPermisById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteRoleOfPermisById failed: unknown result");
    }

    public int addRoleOfPermisById(Map<String,String> parameter) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addRoleOfPermisById(parameter);
      return recv_addRoleOfPermisById();
    }

    public void send_addRoleOfPermisById(Map<String,String> parameter) throws org.apache.thrift.TException
    {
      addRoleOfPermisById_args args = new addRoleOfPermisById_args();
      args.setParameter(parameter);
      sendBase("addRoleOfPermisById", args);
    }

    public int recv_addRoleOfPermisById() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addRoleOfPermisById_result result = new addRoleOfPermisById_result();
      receiveBase(result, "addRoleOfPermisById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRoleOfPermisById failed: unknown result");
    }

    public int getSysPermissionCount(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      send_getSysPermissionCount(sysPermission);
      return recv_getSysPermissionCount();
    }

    public void send_getSysPermissionCount(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      getSysPermissionCount_args args = new getSysPermissionCount_args();
      args.setSysPermission(sysPermission);
      sendBase("getSysPermissionCount", args);
    }

    public int recv_getSysPermissionCount() throws org.apache.thrift.TException
    {
      getSysPermissionCount_result result = new getSysPermissionCount_result();
      receiveBase(result, "getSysPermissionCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysPermissionCount failed: unknown result");
    }

    public int srarchSysPermissionCount(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      send_srarchSysPermissionCount(sysPermission);
      return recv_srarchSysPermissionCount();
    }

    public void send_srarchSysPermissionCount(SysPermission sysPermission) throws org.apache.thrift.TException
    {
      srarchSysPermissionCount_args args = new srarchSysPermissionCount_args();
      args.setSysPermission(sysPermission);
      sendBase("srarchSysPermissionCount", args);
    }

    public int recv_srarchSysPermissionCount() throws org.apache.thrift.TException
    {
      srarchSysPermissionCount_result result = new srarchSysPermissionCount_result();
      receiveBase(result, "srarchSysPermissionCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "srarchSysPermissionCount failed: unknown result");
    }

    public SysPermission getPermisByName(String permisName) throws org.apache.thrift.TException
    {
      send_getPermisByName(permisName);
      return recv_getPermisByName();
    }

    public void send_getPermisByName(String permisName) throws org.apache.thrift.TException
    {
      getPermisByName_args args = new getPermisByName_args();
      args.setPermisName(permisName);
      sendBase("getPermisByName", args);
    }

    public SysPermission recv_getPermisByName() throws org.apache.thrift.TException
    {
      getPermisByName_result result = new getPermisByName_result();
      receiveBase(result, "getPermisByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPermisByName failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSysPermission(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSysPermission_call method_call = new addSysPermission_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSysPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public addSysPermission_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSysPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSysPermission_args args = new addSysPermission_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSysPermission();
      }
    }

    public void deleteSysPermission(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSysPermission_call method_call = new deleteSysPermission_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSysPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public deleteSysPermission_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSysPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSysPermission_args args = new deleteSysPermission_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSysPermission();
      }
    }

    public void deleteSysPermissionByMenuId(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSysPermissionByMenuId_call method_call = new deleteSysPermissionByMenuId_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSysPermissionByMenuId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public deleteSysPermissionByMenuId_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSysPermissionByMenuId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSysPermissionByMenuId_args args = new deleteSysPermissionByMenuId_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSysPermissionByMenuId();
      }
    }

    public void updateSysPermission(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSysPermission_call method_call = new updateSysPermission_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSysPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public updateSysPermission_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSysPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSysPermission_args args = new updateSysPermission_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSysPermission();
      }
    }

    public void updateSysPermissionByMenuId(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSysPermissionByMenuId_call method_call = new updateSysPermissionByMenuId_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSysPermissionByMenuId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public updateSysPermissionByMenuId_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSysPermissionByMenuId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSysPermissionByMenuId_args args = new updateSysPermissionByMenuId_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSysPermissionByMenuId();
      }
    }

    public void getSysPermissionList(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysPermissionList_call method_call = new getSysPermissionList_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysPermissionList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public getSysPermissionList_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysPermissionList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysPermissionList_args args = new getSysPermissionList_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysPermission> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysPermissionList();
      }
    }

    public void getSysPermissionByParameter(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysPermissionByParameter_call method_call = new getSysPermissionByParameter_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysPermissionByParameter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public getSysPermissionByParameter_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysPermissionByParameter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysPermissionByParameter_args args = new getSysPermissionByParameter_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysPermission> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysPermissionByParameter();
      }
    }

    public void getPermisRoleList(int pageNum, int pageSize, SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPermisRoleList_call method_call = new getPermisRoleList_call(pageNum, pageSize, sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPermisRoleList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNum;
      private int pageSize;
      private SysPermission sysPermission;
      public getPermisRoleList_call(int pageNum, int pageSize, SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
        this.pageSize = pageSize;
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPermisRoleList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPermisRoleList_args args = new getPermisRoleList_args();
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysRole> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPermisRoleList();
      }
    }

    public void getPermisRoleListTotal(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPermisRoleListTotal_call method_call = new getPermisRoleListTotal_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPermisRoleListTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public getPermisRoleListTotal_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPermisRoleListTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPermisRoleListTotal_args args = new getPermisRoleListTotal_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPermisRoleListTotal();
      }
    }

    public void getNotHaveRoleOfPermisList(int pageNum, int pageSize, SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotHaveRoleOfPermisList_call method_call = new getNotHaveRoleOfPermisList_call(pageNum, pageSize, sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotHaveRoleOfPermisList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNum;
      private int pageSize;
      private SysPermission sysPermission;
      public getNotHaveRoleOfPermisList_call(int pageNum, int pageSize, SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
        this.pageSize = pageSize;
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotHaveRoleOfPermisList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotHaveRoleOfPermisList_args args = new getNotHaveRoleOfPermisList_args();
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysRole> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNotHaveRoleOfPermisList();
      }
    }

    public void deleteRoleOfPermisById(Map<String,String> parameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRoleOfPermisById_call method_call = new deleteRoleOfPermisById_call(parameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRoleOfPermisById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> parameter;
      public deleteRoleOfPermisById_call(Map<String,String> parameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parameter = parameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRoleOfPermisById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRoleOfPermisById_args args = new deleteRoleOfPermisById_args();
        args.setParameter(parameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteRoleOfPermisById();
      }
    }

    public void addRoleOfPermisById(Map<String,String> parameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRoleOfPermisById_call method_call = new addRoleOfPermisById_call(parameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRoleOfPermisById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> parameter;
      public addRoleOfPermisById_call(Map<String,String> parameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parameter = parameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRoleOfPermisById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRoleOfPermisById_args args = new addRoleOfPermisById_args();
        args.setParameter(parameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRoleOfPermisById();
      }
    }

    public void getSysPermissionCount(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysPermissionCount_call method_call = new getSysPermissionCount_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysPermissionCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public getSysPermissionCount_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysPermissionCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysPermissionCount_args args = new getSysPermissionCount_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysPermissionCount();
      }
    }

    public void srarchSysPermissionCount(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      srarchSysPermissionCount_call method_call = new srarchSysPermissionCount_call(sysPermission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class srarchSysPermissionCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysPermission sysPermission;
      public srarchSysPermissionCount_call(SysPermission sysPermission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysPermission = sysPermission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("srarchSysPermissionCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        srarchSysPermissionCount_args args = new srarchSysPermissionCount_args();
        args.setSysPermission(sysPermission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_srarchSysPermissionCount();
      }
    }

    public void getPermisByName(String permisName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPermisByName_call method_call = new getPermisByName_call(permisName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPermisByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String permisName;
      public getPermisByName_call(String permisName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.permisName = permisName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPermisByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPermisByName_args args = new getPermisByName_args();
        args.setPermisName(permisName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysPermission getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPermisByName();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSysPermission", new addSysPermission());
      processMap.put("deleteSysPermission", new deleteSysPermission());
      processMap.put("deleteSysPermissionByMenuId", new deleteSysPermissionByMenuId());
      processMap.put("updateSysPermission", new updateSysPermission());
      processMap.put("updateSysPermissionByMenuId", new updateSysPermissionByMenuId());
      processMap.put("getSysPermissionList", new getSysPermissionList());
      processMap.put("getSysPermissionByParameter", new getSysPermissionByParameter());
      processMap.put("getPermisRoleList", new getPermisRoleList());
      processMap.put("getPermisRoleListTotal", new getPermisRoleListTotal());
      processMap.put("getNotHaveRoleOfPermisList", new getNotHaveRoleOfPermisList());
      processMap.put("deleteRoleOfPermisById", new deleteRoleOfPermisById());
      processMap.put("addRoleOfPermisById", new addRoleOfPermisById());
      processMap.put("getSysPermissionCount", new getSysPermissionCount());
      processMap.put("srarchSysPermissionCount", new srarchSysPermissionCount());
      processMap.put("getPermisByName", new getPermisByName());
      return processMap;
    }

    public static class addSysPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSysPermission_args> {
      public addSysPermission() {
        super("addSysPermission");
      }

      public addSysPermission_args getEmptyArgsInstance() {
        return new addSysPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSysPermission_result getResult(I iface, addSysPermission_args args) throws org.apache.thrift.TException {
        addSysPermission_result result = new addSysPermission_result();
        try {
          result.success = iface.addSysPermission(args.sysPermission);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteSysPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSysPermission_args> {
      public deleteSysPermission() {
        super("deleteSysPermission");
      }

      public deleteSysPermission_args getEmptyArgsInstance() {
        return new deleteSysPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSysPermission_result getResult(I iface, deleteSysPermission_args args) throws org.apache.thrift.TException {
        deleteSysPermission_result result = new deleteSysPermission_result();
        try {
          result.success = iface.deleteSysPermission(args.sysPermission);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteSysPermissionByMenuId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSysPermissionByMenuId_args> {
      public deleteSysPermissionByMenuId() {
        super("deleteSysPermissionByMenuId");
      }

      public deleteSysPermissionByMenuId_args getEmptyArgsInstance() {
        return new deleteSysPermissionByMenuId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSysPermissionByMenuId_result getResult(I iface, deleteSysPermissionByMenuId_args args) throws org.apache.thrift.TException {
        deleteSysPermissionByMenuId_result result = new deleteSysPermissionByMenuId_result();
        try {
          result.success = iface.deleteSysPermissionByMenuId(args.sysPermission);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateSysPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSysPermission_args> {
      public updateSysPermission() {
        super("updateSysPermission");
      }

      public updateSysPermission_args getEmptyArgsInstance() {
        return new updateSysPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSysPermission_result getResult(I iface, updateSysPermission_args args) throws org.apache.thrift.TException {
        updateSysPermission_result result = new updateSysPermission_result();
        try {
          result.success = iface.updateSysPermission(args.sysPermission);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateSysPermissionByMenuId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSysPermissionByMenuId_args> {
      public updateSysPermissionByMenuId() {
        super("updateSysPermissionByMenuId");
      }

      public updateSysPermissionByMenuId_args getEmptyArgsInstance() {
        return new updateSysPermissionByMenuId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSysPermissionByMenuId_result getResult(I iface, updateSysPermissionByMenuId_args args) throws org.apache.thrift.TException {
        updateSysPermissionByMenuId_result result = new updateSysPermissionByMenuId_result();
        try {
          result.success = iface.updateSysPermissionByMenuId(args.sysPermission);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getSysPermissionList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysPermissionList_args> {
      public getSysPermissionList() {
        super("getSysPermissionList");
      }

      public getSysPermissionList_args getEmptyArgsInstance() {
        return new getSysPermissionList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysPermissionList_result getResult(I iface, getSysPermissionList_args args) throws org.apache.thrift.TException {
        getSysPermissionList_result result = new getSysPermissionList_result();
        try {
          result.success = iface.getSysPermissionList(args.sysPermission);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getSysPermissionByParameter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysPermissionByParameter_args> {
      public getSysPermissionByParameter() {
        super("getSysPermissionByParameter");
      }

      public getSysPermissionByParameter_args getEmptyArgsInstance() {
        return new getSysPermissionByParameter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysPermissionByParameter_result getResult(I iface, getSysPermissionByParameter_args args) throws org.apache.thrift.TException {
        getSysPermissionByParameter_result result = new getSysPermissionByParameter_result();
        try {
          result.success = iface.getSysPermissionByParameter(args.sysPermission);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getPermisRoleList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPermisRoleList_args> {
      public getPermisRoleList() {
        super("getPermisRoleList");
      }

      public getPermisRoleList_args getEmptyArgsInstance() {
        return new getPermisRoleList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPermisRoleList_result getResult(I iface, getPermisRoleList_args args) throws org.apache.thrift.TException {
        getPermisRoleList_result result = new getPermisRoleList_result();
        try {
          result.success = iface.getPermisRoleList(args.pageNum, args.pageSize, args.sysPermission);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getPermisRoleListTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPermisRoleListTotal_args> {
      public getPermisRoleListTotal() {
        super("getPermisRoleListTotal");
      }

      public getPermisRoleListTotal_args getEmptyArgsInstance() {
        return new getPermisRoleListTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPermisRoleListTotal_result getResult(I iface, getPermisRoleListTotal_args args) throws org.apache.thrift.TException {
        getPermisRoleListTotal_result result = new getPermisRoleListTotal_result();
        try {
          result.success = iface.getPermisRoleListTotal(args.sysPermission);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getNotHaveRoleOfPermisList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotHaveRoleOfPermisList_args> {
      public getNotHaveRoleOfPermisList() {
        super("getNotHaveRoleOfPermisList");
      }

      public getNotHaveRoleOfPermisList_args getEmptyArgsInstance() {
        return new getNotHaveRoleOfPermisList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNotHaveRoleOfPermisList_result getResult(I iface, getNotHaveRoleOfPermisList_args args) throws org.apache.thrift.TException {
        getNotHaveRoleOfPermisList_result result = new getNotHaveRoleOfPermisList_result();
        try {
          result.success = iface.getNotHaveRoleOfPermisList(args.pageNum, args.pageSize, args.sysPermission);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteRoleOfPermisById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRoleOfPermisById_args> {
      public deleteRoleOfPermisById() {
        super("deleteRoleOfPermisById");
      }

      public deleteRoleOfPermisById_args getEmptyArgsInstance() {
        return new deleteRoleOfPermisById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRoleOfPermisById_result getResult(I iface, deleteRoleOfPermisById_args args) throws org.apache.thrift.TException {
        deleteRoleOfPermisById_result result = new deleteRoleOfPermisById_result();
        try {
          result.success = iface.deleteRoleOfPermisById(args.parameter);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addRoleOfPermisById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRoleOfPermisById_args> {
      public addRoleOfPermisById() {
        super("addRoleOfPermisById");
      }

      public addRoleOfPermisById_args getEmptyArgsInstance() {
        return new addRoleOfPermisById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRoleOfPermisById_result getResult(I iface, addRoleOfPermisById_args args) throws org.apache.thrift.TException {
        addRoleOfPermisById_result result = new addRoleOfPermisById_result();
        try {
          result.success = iface.addRoleOfPermisById(args.parameter);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getSysPermissionCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysPermissionCount_args> {
      public getSysPermissionCount() {
        super("getSysPermissionCount");
      }

      public getSysPermissionCount_args getEmptyArgsInstance() {
        return new getSysPermissionCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysPermissionCount_result getResult(I iface, getSysPermissionCount_args args) throws org.apache.thrift.TException {
        getSysPermissionCount_result result = new getSysPermissionCount_result();
        result.success = iface.getSysPermissionCount(args.sysPermission);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class srarchSysPermissionCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, srarchSysPermissionCount_args> {
      public srarchSysPermissionCount() {
        super("srarchSysPermissionCount");
      }

      public srarchSysPermissionCount_args getEmptyArgsInstance() {
        return new srarchSysPermissionCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public srarchSysPermissionCount_result getResult(I iface, srarchSysPermissionCount_args args) throws org.apache.thrift.TException {
        srarchSysPermissionCount_result result = new srarchSysPermissionCount_result();
        result.success = iface.srarchSysPermissionCount(args.sysPermission);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPermisByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPermisByName_args> {
      public getPermisByName() {
        super("getPermisByName");
      }

      public getPermisByName_args getEmptyArgsInstance() {
        return new getPermisByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPermisByName_result getResult(I iface, getPermisByName_args args) throws org.apache.thrift.TException {
        getPermisByName_result result = new getPermisByName_result();
        result.success = iface.getPermisByName(args.permisName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSysPermission", new addSysPermission());
      processMap.put("deleteSysPermission", new deleteSysPermission());
      processMap.put("deleteSysPermissionByMenuId", new deleteSysPermissionByMenuId());
      processMap.put("updateSysPermission", new updateSysPermission());
      processMap.put("updateSysPermissionByMenuId", new updateSysPermissionByMenuId());
      processMap.put("getSysPermissionList", new getSysPermissionList());
      processMap.put("getSysPermissionByParameter", new getSysPermissionByParameter());
      processMap.put("getPermisRoleList", new getPermisRoleList());
      processMap.put("getPermisRoleListTotal", new getPermisRoleListTotal());
      processMap.put("getNotHaveRoleOfPermisList", new getNotHaveRoleOfPermisList());
      processMap.put("deleteRoleOfPermisById", new deleteRoleOfPermisById());
      processMap.put("addRoleOfPermisById", new addRoleOfPermisById());
      processMap.put("getSysPermissionCount", new getSysPermissionCount());
      processMap.put("srarchSysPermissionCount", new srarchSysPermissionCount());
      processMap.put("getPermisByName", new getPermisByName());
      return processMap;
    }

    public static class addSysPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSysPermission_args, Integer> {
      public addSysPermission() {
        super("addSysPermission");
      }

      public addSysPermission_args getEmptyArgsInstance() {
        return new addSysPermission_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addSysPermission_result result = new addSysPermission_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSysPermission_result result = new addSysPermission_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSysPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addSysPermission(args.sysPermission,resultHandler);
      }
    }

    public static class deleteSysPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSysPermission_args, Integer> {
      public deleteSysPermission() {
        super("deleteSysPermission");
      }

      public deleteSysPermission_args getEmptyArgsInstance() {
        return new deleteSysPermission_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteSysPermission_result result = new deleteSysPermission_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSysPermission_result result = new deleteSysPermission_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSysPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteSysPermission(args.sysPermission,resultHandler);
      }
    }

    public static class deleteSysPermissionByMenuId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSysPermissionByMenuId_args, Integer> {
      public deleteSysPermissionByMenuId() {
        super("deleteSysPermissionByMenuId");
      }

      public deleteSysPermissionByMenuId_args getEmptyArgsInstance() {
        return new deleteSysPermissionByMenuId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteSysPermissionByMenuId_result result = new deleteSysPermissionByMenuId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSysPermissionByMenuId_result result = new deleteSysPermissionByMenuId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSysPermissionByMenuId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteSysPermissionByMenuId(args.sysPermission,resultHandler);
      }
    }

    public static class updateSysPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSysPermission_args, Integer> {
      public updateSysPermission() {
        super("updateSysPermission");
      }

      public updateSysPermission_args getEmptyArgsInstance() {
        return new updateSysPermission_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateSysPermission_result result = new updateSysPermission_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSysPermission_result result = new updateSysPermission_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSysPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateSysPermission(args.sysPermission,resultHandler);
      }
    }

    public static class updateSysPermissionByMenuId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSysPermissionByMenuId_args, Integer> {
      public updateSysPermissionByMenuId() {
        super("updateSysPermissionByMenuId");
      }

      public updateSysPermissionByMenuId_args getEmptyArgsInstance() {
        return new updateSysPermissionByMenuId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateSysPermissionByMenuId_result result = new updateSysPermissionByMenuId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSysPermissionByMenuId_result result = new updateSysPermissionByMenuId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSysPermissionByMenuId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateSysPermissionByMenuId(args.sysPermission,resultHandler);
      }
    }

    public static class getSysPermissionList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysPermissionList_args, List<SysPermission>> {
      public getSysPermissionList() {
        super("getSysPermissionList");
      }

      public getSysPermissionList_args getEmptyArgsInstance() {
        return new getSysPermissionList_args();
      }

      public AsyncMethodCallback<List<SysPermission>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysPermission>>() { 
          public void onComplete(List<SysPermission> o) {
            getSysPermissionList_result result = new getSysPermissionList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysPermissionList_result result = new getSysPermissionList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysPermissionList_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysPermission>> resultHandler) throws TException {
        iface.getSysPermissionList(args.sysPermission,resultHandler);
      }
    }

    public static class getSysPermissionByParameter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysPermissionByParameter_args, List<SysPermission>> {
      public getSysPermissionByParameter() {
        super("getSysPermissionByParameter");
      }

      public getSysPermissionByParameter_args getEmptyArgsInstance() {
        return new getSysPermissionByParameter_args();
      }

      public AsyncMethodCallback<List<SysPermission>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysPermission>>() { 
          public void onComplete(List<SysPermission> o) {
            getSysPermissionByParameter_result result = new getSysPermissionByParameter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysPermissionByParameter_result result = new getSysPermissionByParameter_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysPermissionByParameter_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysPermission>> resultHandler) throws TException {
        iface.getSysPermissionByParameter(args.sysPermission,resultHandler);
      }
    }

    public static class getPermisRoleList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPermisRoleList_args, List<SysRole>> {
      public getPermisRoleList() {
        super("getPermisRoleList");
      }

      public getPermisRoleList_args getEmptyArgsInstance() {
        return new getPermisRoleList_args();
      }

      public AsyncMethodCallback<List<SysRole>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysRole>>() { 
          public void onComplete(List<SysRole> o) {
            getPermisRoleList_result result = new getPermisRoleList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPermisRoleList_result result = new getPermisRoleList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPermisRoleList_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysRole>> resultHandler) throws TException {
        iface.getPermisRoleList(args.pageNum, args.pageSize, args.sysPermission,resultHandler);
      }
    }

    public static class getPermisRoleListTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPermisRoleListTotal_args, Integer> {
      public getPermisRoleListTotal() {
        super("getPermisRoleListTotal");
      }

      public getPermisRoleListTotal_args getEmptyArgsInstance() {
        return new getPermisRoleListTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getPermisRoleListTotal_result result = new getPermisRoleListTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPermisRoleListTotal_result result = new getPermisRoleListTotal_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPermisRoleListTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getPermisRoleListTotal(args.sysPermission,resultHandler);
      }
    }

    public static class getNotHaveRoleOfPermisList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotHaveRoleOfPermisList_args, List<SysRole>> {
      public getNotHaveRoleOfPermisList() {
        super("getNotHaveRoleOfPermisList");
      }

      public getNotHaveRoleOfPermisList_args getEmptyArgsInstance() {
        return new getNotHaveRoleOfPermisList_args();
      }

      public AsyncMethodCallback<List<SysRole>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysRole>>() { 
          public void onComplete(List<SysRole> o) {
            getNotHaveRoleOfPermisList_result result = new getNotHaveRoleOfPermisList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNotHaveRoleOfPermisList_result result = new getNotHaveRoleOfPermisList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotHaveRoleOfPermisList_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysRole>> resultHandler) throws TException {
        iface.getNotHaveRoleOfPermisList(args.pageNum, args.pageSize, args.sysPermission,resultHandler);
      }
    }

    public static class deleteRoleOfPermisById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRoleOfPermisById_args, Integer> {
      public deleteRoleOfPermisById() {
        super("deleteRoleOfPermisById");
      }

      public deleteRoleOfPermisById_args getEmptyArgsInstance() {
        return new deleteRoleOfPermisById_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteRoleOfPermisById_result result = new deleteRoleOfPermisById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRoleOfPermisById_result result = new deleteRoleOfPermisById_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRoleOfPermisById_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteRoleOfPermisById(args.parameter,resultHandler);
      }
    }

    public static class addRoleOfPermisById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRoleOfPermisById_args, Integer> {
      public addRoleOfPermisById() {
        super("addRoleOfPermisById");
      }

      public addRoleOfPermisById_args getEmptyArgsInstance() {
        return new addRoleOfPermisById_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addRoleOfPermisById_result result = new addRoleOfPermisById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRoleOfPermisById_result result = new addRoleOfPermisById_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRoleOfPermisById_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addRoleOfPermisById(args.parameter,resultHandler);
      }
    }

    public static class getSysPermissionCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysPermissionCount_args, Integer> {
      public getSysPermissionCount() {
        super("getSysPermissionCount");
      }

      public getSysPermissionCount_args getEmptyArgsInstance() {
        return new getSysPermissionCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getSysPermissionCount_result result = new getSysPermissionCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysPermissionCount_result result = new getSysPermissionCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysPermissionCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getSysPermissionCount(args.sysPermission,resultHandler);
      }
    }

    public static class srarchSysPermissionCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, srarchSysPermissionCount_args, Integer> {
      public srarchSysPermissionCount() {
        super("srarchSysPermissionCount");
      }

      public srarchSysPermissionCount_args getEmptyArgsInstance() {
        return new srarchSysPermissionCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            srarchSysPermissionCount_result result = new srarchSysPermissionCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            srarchSysPermissionCount_result result = new srarchSysPermissionCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, srarchSysPermissionCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.srarchSysPermissionCount(args.sysPermission,resultHandler);
      }
    }

    public static class getPermisByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPermisByName_args, SysPermission> {
      public getPermisByName() {
        super("getPermisByName");
      }

      public getPermisByName_args getEmptyArgsInstance() {
        return new getPermisByName_args();
      }

      public AsyncMethodCallback<SysPermission> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SysPermission>() { 
          public void onComplete(SysPermission o) {
            getPermisByName_result result = new getPermisByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPermisByName_result result = new getPermisByName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPermisByName_args args, org.apache.thrift.async.AsyncMethodCallback<SysPermission> resultHandler) throws TException {
        iface.getPermisByName(args.permisName,resultHandler);
      }
    }

  }

  public static class addSysPermission_args implements org.apache.thrift.TBase<addSysPermission_args, addSysPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSysPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysPermission_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysPermission_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysPermission_args.class, metaDataMap);
    }

    public addSysPermission_args() {
    }

    public addSysPermission_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysPermission_args(addSysPermission_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public addSysPermission_args deepCopy() {
      return new addSysPermission_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public addSysPermission_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysPermission_args)
        return this.equals((addSysPermission_args)that);
      return false;
    }

    public boolean equals(addSysPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysPermission_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysPermission_argsStandardSchemeFactory implements SchemeFactory {
      public addSysPermission_argsStandardScheme getScheme() {
        return new addSysPermission_argsStandardScheme();
      }
    }

    private static class addSysPermission_argsStandardScheme extends StandardScheme<addSysPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysPermission_argsTupleSchemeFactory implements SchemeFactory {
      public addSysPermission_argsTupleScheme getScheme() {
        return new addSysPermission_argsTupleScheme();
      }
    }

    private static class addSysPermission_argsTupleScheme extends TupleScheme<addSysPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class addSysPermission_result implements org.apache.thrift.TBase<addSysPermission_result, addSysPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSysPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysPermission_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysPermission_result.class, metaDataMap);
    }

    public addSysPermission_result() {
    }

    public addSysPermission_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysPermission_result(addSysPermission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addSysPermission_result deepCopy() {
      return new addSysPermission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addSysPermission_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addSysPermission_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysPermission_result)
        return this.equals((addSysPermission_result)that);
      return false;
    }

    public boolean equals(addSysPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysPermission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysPermission_resultStandardSchemeFactory implements SchemeFactory {
      public addSysPermission_resultStandardScheme getScheme() {
        return new addSysPermission_resultStandardScheme();
      }
    }

    private static class addSysPermission_resultStandardScheme extends StandardScheme<addSysPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysPermission_resultTupleSchemeFactory implements SchemeFactory {
      public addSysPermission_resultTupleScheme getScheme() {
        return new addSysPermission_resultTupleScheme();
      }
    }

    private static class addSysPermission_resultTupleScheme extends TupleScheme<addSysPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteSysPermission_args implements org.apache.thrift.TBase<deleteSysPermission_args, deleteSysPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSysPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSysPermission_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSysPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSysPermission_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSysPermission_args.class, metaDataMap);
    }

    public deleteSysPermission_args() {
    }

    public deleteSysPermission_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSysPermission_args(deleteSysPermission_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public deleteSysPermission_args deepCopy() {
      return new deleteSysPermission_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public deleteSysPermission_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSysPermission_args)
        return this.equals((deleteSysPermission_args)that);
      return false;
    }

    public boolean equals(deleteSysPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSysPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSysPermission_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSysPermission_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSysPermission_argsStandardScheme getScheme() {
        return new deleteSysPermission_argsStandardScheme();
      }
    }

    private static class deleteSysPermission_argsStandardScheme extends StandardScheme<deleteSysPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSysPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSysPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSysPermission_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSysPermission_argsTupleScheme getScheme() {
        return new deleteSysPermission_argsTupleScheme();
      }
    }

    private static class deleteSysPermission_argsTupleScheme extends TupleScheme<deleteSysPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSysPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSysPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class deleteSysPermission_result implements org.apache.thrift.TBase<deleteSysPermission_result, deleteSysPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSysPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSysPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSysPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSysPermission_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSysPermission_result.class, metaDataMap);
    }

    public deleteSysPermission_result() {
    }

    public deleteSysPermission_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSysPermission_result(deleteSysPermission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteSysPermission_result deepCopy() {
      return new deleteSysPermission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteSysPermission_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteSysPermission_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSysPermission_result)
        return this.equals((deleteSysPermission_result)that);
      return false;
    }

    public boolean equals(deleteSysPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSysPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSysPermission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSysPermission_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSysPermission_resultStandardScheme getScheme() {
        return new deleteSysPermission_resultStandardScheme();
      }
    }

    private static class deleteSysPermission_resultStandardScheme extends StandardScheme<deleteSysPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSysPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSysPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSysPermission_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSysPermission_resultTupleScheme getScheme() {
        return new deleteSysPermission_resultTupleScheme();
      }
    }

    private static class deleteSysPermission_resultTupleScheme extends TupleScheme<deleteSysPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSysPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSysPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteSysPermissionByMenuId_args implements org.apache.thrift.TBase<deleteSysPermissionByMenuId_args, deleteSysPermissionByMenuId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSysPermissionByMenuId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSysPermissionByMenuId_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSysPermissionByMenuId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSysPermissionByMenuId_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSysPermissionByMenuId_args.class, metaDataMap);
    }

    public deleteSysPermissionByMenuId_args() {
    }

    public deleteSysPermissionByMenuId_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSysPermissionByMenuId_args(deleteSysPermissionByMenuId_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public deleteSysPermissionByMenuId_args deepCopy() {
      return new deleteSysPermissionByMenuId_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public deleteSysPermissionByMenuId_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSysPermissionByMenuId_args)
        return this.equals((deleteSysPermissionByMenuId_args)that);
      return false;
    }

    public boolean equals(deleteSysPermissionByMenuId_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSysPermissionByMenuId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSysPermissionByMenuId_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSysPermissionByMenuId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSysPermissionByMenuId_argsStandardScheme getScheme() {
        return new deleteSysPermissionByMenuId_argsStandardScheme();
      }
    }

    private static class deleteSysPermissionByMenuId_argsStandardScheme extends StandardScheme<deleteSysPermissionByMenuId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSysPermissionByMenuId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSysPermissionByMenuId_argsTupleScheme getScheme() {
        return new deleteSysPermissionByMenuId_argsTupleScheme();
      }
    }

    private static class deleteSysPermissionByMenuId_argsTupleScheme extends TupleScheme<deleteSysPermissionByMenuId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class deleteSysPermissionByMenuId_result implements org.apache.thrift.TBase<deleteSysPermissionByMenuId_result, deleteSysPermissionByMenuId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSysPermissionByMenuId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSysPermissionByMenuId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSysPermissionByMenuId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSysPermissionByMenuId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSysPermissionByMenuId_result.class, metaDataMap);
    }

    public deleteSysPermissionByMenuId_result() {
    }

    public deleteSysPermissionByMenuId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSysPermissionByMenuId_result(deleteSysPermissionByMenuId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteSysPermissionByMenuId_result deepCopy() {
      return new deleteSysPermissionByMenuId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteSysPermissionByMenuId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteSysPermissionByMenuId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSysPermissionByMenuId_result)
        return this.equals((deleteSysPermissionByMenuId_result)that);
      return false;
    }

    public boolean equals(deleteSysPermissionByMenuId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSysPermissionByMenuId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSysPermissionByMenuId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSysPermissionByMenuId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSysPermissionByMenuId_resultStandardScheme getScheme() {
        return new deleteSysPermissionByMenuId_resultStandardScheme();
      }
    }

    private static class deleteSysPermissionByMenuId_resultStandardScheme extends StandardScheme<deleteSysPermissionByMenuId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSysPermissionByMenuId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSysPermissionByMenuId_resultTupleScheme getScheme() {
        return new deleteSysPermissionByMenuId_resultTupleScheme();
      }
    }

    private static class deleteSysPermissionByMenuId_resultTupleScheme extends TupleScheme<deleteSysPermissionByMenuId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateSysPermission_args implements org.apache.thrift.TBase<updateSysPermission_args, updateSysPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysPermission_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysPermission_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysPermission_args.class, metaDataMap);
    }

    public updateSysPermission_args() {
    }

    public updateSysPermission_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysPermission_args(updateSysPermission_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public updateSysPermission_args deepCopy() {
      return new updateSysPermission_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public updateSysPermission_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysPermission_args)
        return this.equals((updateSysPermission_args)that);
      return false;
    }

    public boolean equals(updateSysPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysPermission_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysPermission_argsStandardSchemeFactory implements SchemeFactory {
      public updateSysPermission_argsStandardScheme getScheme() {
        return new updateSysPermission_argsStandardScheme();
      }
    }

    private static class updateSysPermission_argsStandardScheme extends StandardScheme<updateSysPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysPermission_argsTupleSchemeFactory implements SchemeFactory {
      public updateSysPermission_argsTupleScheme getScheme() {
        return new updateSysPermission_argsTupleScheme();
      }
    }

    private static class updateSysPermission_argsTupleScheme extends TupleScheme<updateSysPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class updateSysPermission_result implements org.apache.thrift.TBase<updateSysPermission_result, updateSysPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysPermission_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysPermission_result.class, metaDataMap);
    }

    public updateSysPermission_result() {
    }

    public updateSysPermission_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysPermission_result(updateSysPermission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateSysPermission_result deepCopy() {
      return new updateSysPermission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateSysPermission_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateSysPermission_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysPermission_result)
        return this.equals((updateSysPermission_result)that);
      return false;
    }

    public boolean equals(updateSysPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysPermission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysPermission_resultStandardSchemeFactory implements SchemeFactory {
      public updateSysPermission_resultStandardScheme getScheme() {
        return new updateSysPermission_resultStandardScheme();
      }
    }

    private static class updateSysPermission_resultStandardScheme extends StandardScheme<updateSysPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysPermission_resultTupleSchemeFactory implements SchemeFactory {
      public updateSysPermission_resultTupleScheme getScheme() {
        return new updateSysPermission_resultTupleScheme();
      }
    }

    private static class updateSysPermission_resultTupleScheme extends TupleScheme<updateSysPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateSysPermissionByMenuId_args implements org.apache.thrift.TBase<updateSysPermissionByMenuId_args, updateSysPermissionByMenuId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysPermissionByMenuId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysPermissionByMenuId_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysPermissionByMenuId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysPermissionByMenuId_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysPermissionByMenuId_args.class, metaDataMap);
    }

    public updateSysPermissionByMenuId_args() {
    }

    public updateSysPermissionByMenuId_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysPermissionByMenuId_args(updateSysPermissionByMenuId_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public updateSysPermissionByMenuId_args deepCopy() {
      return new updateSysPermissionByMenuId_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public updateSysPermissionByMenuId_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysPermissionByMenuId_args)
        return this.equals((updateSysPermissionByMenuId_args)that);
      return false;
    }

    public boolean equals(updateSysPermissionByMenuId_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysPermissionByMenuId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysPermissionByMenuId_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysPermissionByMenuId_argsStandardSchemeFactory implements SchemeFactory {
      public updateSysPermissionByMenuId_argsStandardScheme getScheme() {
        return new updateSysPermissionByMenuId_argsStandardScheme();
      }
    }

    private static class updateSysPermissionByMenuId_argsStandardScheme extends StandardScheme<updateSysPermissionByMenuId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysPermissionByMenuId_argsTupleSchemeFactory implements SchemeFactory {
      public updateSysPermissionByMenuId_argsTupleScheme getScheme() {
        return new updateSysPermissionByMenuId_argsTupleScheme();
      }
    }

    private static class updateSysPermissionByMenuId_argsTupleScheme extends TupleScheme<updateSysPermissionByMenuId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysPermissionByMenuId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class updateSysPermissionByMenuId_result implements org.apache.thrift.TBase<updateSysPermissionByMenuId_result, updateSysPermissionByMenuId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysPermissionByMenuId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysPermissionByMenuId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysPermissionByMenuId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysPermissionByMenuId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysPermissionByMenuId_result.class, metaDataMap);
    }

    public updateSysPermissionByMenuId_result() {
    }

    public updateSysPermissionByMenuId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysPermissionByMenuId_result(updateSysPermissionByMenuId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateSysPermissionByMenuId_result deepCopy() {
      return new updateSysPermissionByMenuId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateSysPermissionByMenuId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateSysPermissionByMenuId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysPermissionByMenuId_result)
        return this.equals((updateSysPermissionByMenuId_result)that);
      return false;
    }

    public boolean equals(updateSysPermissionByMenuId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysPermissionByMenuId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysPermissionByMenuId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysPermissionByMenuId_resultStandardSchemeFactory implements SchemeFactory {
      public updateSysPermissionByMenuId_resultStandardScheme getScheme() {
        return new updateSysPermissionByMenuId_resultStandardScheme();
      }
    }

    private static class updateSysPermissionByMenuId_resultStandardScheme extends StandardScheme<updateSysPermissionByMenuId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysPermissionByMenuId_resultTupleSchemeFactory implements SchemeFactory {
      public updateSysPermissionByMenuId_resultTupleScheme getScheme() {
        return new updateSysPermissionByMenuId_resultTupleScheme();
      }
    }

    private static class updateSysPermissionByMenuId_resultTupleScheme extends TupleScheme<updateSysPermissionByMenuId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysPermissionByMenuId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getSysPermissionList_args implements org.apache.thrift.TBase<getSysPermissionList_args, getSysPermissionList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysPermissionList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysPermissionList_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysPermissionList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysPermissionList_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysPermissionList_args.class, metaDataMap);
    }

    public getSysPermissionList_args() {
    }

    public getSysPermissionList_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysPermissionList_args(getSysPermissionList_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public getSysPermissionList_args deepCopy() {
      return new getSysPermissionList_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public getSysPermissionList_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysPermissionList_args)
        return this.equals((getSysPermissionList_args)that);
      return false;
    }

    public boolean equals(getSysPermissionList_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysPermissionList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysPermissionList_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysPermissionList_argsStandardSchemeFactory implements SchemeFactory {
      public getSysPermissionList_argsStandardScheme getScheme() {
        return new getSysPermissionList_argsStandardScheme();
      }
    }

    private static class getSysPermissionList_argsStandardScheme extends StandardScheme<getSysPermissionList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysPermissionList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysPermissionList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysPermissionList_argsTupleSchemeFactory implements SchemeFactory {
      public getSysPermissionList_argsTupleScheme getScheme() {
        return new getSysPermissionList_argsTupleScheme();
      }
    }

    private static class getSysPermissionList_argsTupleScheme extends TupleScheme<getSysPermissionList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysPermissionList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysPermissionList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class getSysPermissionList_result implements org.apache.thrift.TBase<getSysPermissionList_result, getSysPermissionList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysPermissionList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysPermissionList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysPermissionList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysPermissionList_resultTupleSchemeFactory());
    }

    public List<SysPermission> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysPermissionList_result.class, metaDataMap);
    }

    public getSysPermissionList_result() {
    }

    public getSysPermissionList_result(
      List<SysPermission> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysPermissionList_result(getSysPermissionList_result other) {
      if (other.isSetSuccess()) {
        List<SysPermission> __this__success = new ArrayList<SysPermission>(other.success.size());
        for (SysPermission other_element : other.success) {
          __this__success.add(new SysPermission(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getSysPermissionList_result deepCopy() {
      return new getSysPermissionList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysPermission> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysPermission elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysPermission>();
      }
      this.success.add(elem);
    }

    public List<SysPermission> getSuccess() {
      return this.success;
    }

    public getSysPermissionList_result setSuccess(List<SysPermission> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getSysPermissionList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysPermission>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysPermissionList_result)
        return this.equals((getSysPermissionList_result)that);
      return false;
    }

    public boolean equals(getSysPermissionList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysPermissionList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysPermissionList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysPermissionList_resultStandardSchemeFactory implements SchemeFactory {
      public getSysPermissionList_resultStandardScheme getScheme() {
        return new getSysPermissionList_resultStandardScheme();
      }
    }

    private static class getSysPermissionList_resultStandardScheme extends StandardScheme<getSysPermissionList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysPermissionList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<SysPermission>(_list88.size);
                  SysPermission _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new SysPermission();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysPermissionList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysPermission _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysPermissionList_resultTupleSchemeFactory implements SchemeFactory {
      public getSysPermissionList_resultTupleScheme getScheme() {
        return new getSysPermissionList_resultTupleScheme();
      }
    }

    private static class getSysPermissionList_resultTupleScheme extends TupleScheme<getSysPermissionList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysPermissionList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysPermission _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysPermissionList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysPermission>(_list93.size);
            SysPermission _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new SysPermission();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getSysPermissionByParameter_args implements org.apache.thrift.TBase<getSysPermissionByParameter_args, getSysPermissionByParameter_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysPermissionByParameter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysPermissionByParameter_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysPermissionByParameter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysPermissionByParameter_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysPermissionByParameter_args.class, metaDataMap);
    }

    public getSysPermissionByParameter_args() {
    }

    public getSysPermissionByParameter_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysPermissionByParameter_args(getSysPermissionByParameter_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public getSysPermissionByParameter_args deepCopy() {
      return new getSysPermissionByParameter_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public getSysPermissionByParameter_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysPermissionByParameter_args)
        return this.equals((getSysPermissionByParameter_args)that);
      return false;
    }

    public boolean equals(getSysPermissionByParameter_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysPermissionByParameter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysPermissionByParameter_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysPermissionByParameter_argsStandardSchemeFactory implements SchemeFactory {
      public getSysPermissionByParameter_argsStandardScheme getScheme() {
        return new getSysPermissionByParameter_argsStandardScheme();
      }
    }

    private static class getSysPermissionByParameter_argsStandardScheme extends StandardScheme<getSysPermissionByParameter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysPermissionByParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysPermissionByParameter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysPermissionByParameter_argsTupleSchemeFactory implements SchemeFactory {
      public getSysPermissionByParameter_argsTupleScheme getScheme() {
        return new getSysPermissionByParameter_argsTupleScheme();
      }
    }

    private static class getSysPermissionByParameter_argsTupleScheme extends TupleScheme<getSysPermissionByParameter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysPermissionByParameter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysPermissionByParameter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class getSysPermissionByParameter_result implements org.apache.thrift.TBase<getSysPermissionByParameter_result, getSysPermissionByParameter_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysPermissionByParameter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysPermissionByParameter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysPermissionByParameter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysPermissionByParameter_resultTupleSchemeFactory());
    }

    public List<SysPermission> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysPermissionByParameter_result.class, metaDataMap);
    }

    public getSysPermissionByParameter_result() {
    }

    public getSysPermissionByParameter_result(
      List<SysPermission> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysPermissionByParameter_result(getSysPermissionByParameter_result other) {
      if (other.isSetSuccess()) {
        List<SysPermission> __this__success = new ArrayList<SysPermission>(other.success.size());
        for (SysPermission other_element : other.success) {
          __this__success.add(new SysPermission(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getSysPermissionByParameter_result deepCopy() {
      return new getSysPermissionByParameter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysPermission> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysPermission elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysPermission>();
      }
      this.success.add(elem);
    }

    public List<SysPermission> getSuccess() {
      return this.success;
    }

    public getSysPermissionByParameter_result setSuccess(List<SysPermission> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getSysPermissionByParameter_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysPermission>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysPermissionByParameter_result)
        return this.equals((getSysPermissionByParameter_result)that);
      return false;
    }

    public boolean equals(getSysPermissionByParameter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysPermissionByParameter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysPermissionByParameter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysPermissionByParameter_resultStandardSchemeFactory implements SchemeFactory {
      public getSysPermissionByParameter_resultStandardScheme getScheme() {
        return new getSysPermissionByParameter_resultStandardScheme();
      }
    }

    private static class getSysPermissionByParameter_resultStandardScheme extends StandardScheme<getSysPermissionByParameter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysPermissionByParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<SysPermission>(_list96.size);
                  SysPermission _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new SysPermission();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysPermissionByParameter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysPermission _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysPermissionByParameter_resultTupleSchemeFactory implements SchemeFactory {
      public getSysPermissionByParameter_resultTupleScheme getScheme() {
        return new getSysPermissionByParameter_resultTupleScheme();
      }
    }

    private static class getSysPermissionByParameter_resultTupleScheme extends TupleScheme<getSysPermissionByParameter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysPermissionByParameter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysPermission _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysPermissionByParameter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysPermission>(_list101.size);
            SysPermission _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new SysPermission();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getPermisRoleList_args implements org.apache.thrift.TBase<getPermisRoleList_args, getPermisRoleList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPermisRoleList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermisRoleList_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermisRoleList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermisRoleList_argsTupleSchemeFactory());
    }

    public int pageNum; // required
    public int pageSize; // required
    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum"),
      PAGE_SIZE((short)2, "pageSize"),
      SYS_PERMISSION((short)3, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          case 3: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermisRoleList_args.class, metaDataMap);
    }

    public getPermisRoleList_args() {
    }

    public getPermisRoleList_args(
      int pageNum,
      int pageSize,
      SysPermission sysPermission)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermisRoleList_args(getPermisRoleList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public getPermisRoleList_args deepCopy() {
      return new getPermisRoleList_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.sysPermission = null;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getPermisRoleList_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getPermisRoleList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public getPermisRoleList_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermisRoleList_args)
        return this.equals((getPermisRoleList_args)that);
      return false;
    }

    public boolean equals(getPermisRoleList_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermisRoleList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermisRoleList_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermisRoleList_argsStandardSchemeFactory implements SchemeFactory {
      public getPermisRoleList_argsStandardScheme getScheme() {
        return new getPermisRoleList_argsStandardScheme();
      }
    }

    private static class getPermisRoleList_argsStandardScheme extends StandardScheme<getPermisRoleList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermisRoleList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermisRoleList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermisRoleList_argsTupleSchemeFactory implements SchemeFactory {
      public getPermisRoleList_argsTupleScheme getScheme() {
        return new getPermisRoleList_argsTupleScheme();
      }
    }

    private static class getPermisRoleList_argsTupleScheme extends TupleScheme<getPermisRoleList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermisRoleList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        if (struct.isSetPageSize()) {
          optionals.set(1);
        }
        if (struct.isSetSysPermission()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermisRoleList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class getPermisRoleList_result implements org.apache.thrift.TBase<getPermisRoleList_result, getPermisRoleList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPermisRoleList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermisRoleList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermisRoleList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermisRoleList_resultTupleSchemeFactory());
    }

    public List<SysRole> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRole.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermisRoleList_result.class, metaDataMap);
    }

    public getPermisRoleList_result() {
    }

    public getPermisRoleList_result(
      List<SysRole> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermisRoleList_result(getPermisRoleList_result other) {
      if (other.isSetSuccess()) {
        List<SysRole> __this__success = new ArrayList<SysRole>(other.success.size());
        for (SysRole other_element : other.success) {
          __this__success.add(new SysRole(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getPermisRoleList_result deepCopy() {
      return new getPermisRoleList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysRole> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysRole elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysRole>();
      }
      this.success.add(elem);
    }

    public List<SysRole> getSuccess() {
      return this.success;
    }

    public getPermisRoleList_result setSuccess(List<SysRole> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getPermisRoleList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysRole>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermisRoleList_result)
        return this.equals((getPermisRoleList_result)that);
      return false;
    }

    public boolean equals(getPermisRoleList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermisRoleList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermisRoleList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermisRoleList_resultStandardSchemeFactory implements SchemeFactory {
      public getPermisRoleList_resultStandardScheme getScheme() {
        return new getPermisRoleList_resultStandardScheme();
      }
    }

    private static class getPermisRoleList_resultStandardScheme extends StandardScheme<getPermisRoleList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermisRoleList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<SysRole>(_list104.size);
                  SysRole _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new SysRole();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermisRoleList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysRole _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermisRoleList_resultTupleSchemeFactory implements SchemeFactory {
      public getPermisRoleList_resultTupleScheme getScheme() {
        return new getPermisRoleList_resultTupleScheme();
      }
    }

    private static class getPermisRoleList_resultTupleScheme extends TupleScheme<getPermisRoleList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermisRoleList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysRole _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermisRoleList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysRole>(_list109.size);
            SysRole _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new SysRole();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getPermisRoleListTotal_args implements org.apache.thrift.TBase<getPermisRoleListTotal_args, getPermisRoleListTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPermisRoleListTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermisRoleListTotal_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermisRoleListTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermisRoleListTotal_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermisRoleListTotal_args.class, metaDataMap);
    }

    public getPermisRoleListTotal_args() {
    }

    public getPermisRoleListTotal_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermisRoleListTotal_args(getPermisRoleListTotal_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public getPermisRoleListTotal_args deepCopy() {
      return new getPermisRoleListTotal_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public getPermisRoleListTotal_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermisRoleListTotal_args)
        return this.equals((getPermisRoleListTotal_args)that);
      return false;
    }

    public boolean equals(getPermisRoleListTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermisRoleListTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermisRoleListTotal_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermisRoleListTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getPermisRoleListTotal_argsStandardScheme getScheme() {
        return new getPermisRoleListTotal_argsStandardScheme();
      }
    }

    private static class getPermisRoleListTotal_argsStandardScheme extends StandardScheme<getPermisRoleListTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermisRoleListTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermisRoleListTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermisRoleListTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getPermisRoleListTotal_argsTupleScheme getScheme() {
        return new getPermisRoleListTotal_argsTupleScheme();
      }
    }

    private static class getPermisRoleListTotal_argsTupleScheme extends TupleScheme<getPermisRoleListTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermisRoleListTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermisRoleListTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class getPermisRoleListTotal_result implements org.apache.thrift.TBase<getPermisRoleListTotal_result, getPermisRoleListTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPermisRoleListTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermisRoleListTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermisRoleListTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermisRoleListTotal_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermisRoleListTotal_result.class, metaDataMap);
    }

    public getPermisRoleListTotal_result() {
    }

    public getPermisRoleListTotal_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermisRoleListTotal_result(getPermisRoleListTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getPermisRoleListTotal_result deepCopy() {
      return new getPermisRoleListTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getPermisRoleListTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getPermisRoleListTotal_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermisRoleListTotal_result)
        return this.equals((getPermisRoleListTotal_result)that);
      return false;
    }

    public boolean equals(getPermisRoleListTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermisRoleListTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermisRoleListTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermisRoleListTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getPermisRoleListTotal_resultStandardScheme getScheme() {
        return new getPermisRoleListTotal_resultStandardScheme();
      }
    }

    private static class getPermisRoleListTotal_resultStandardScheme extends StandardScheme<getPermisRoleListTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermisRoleListTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermisRoleListTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermisRoleListTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getPermisRoleListTotal_resultTupleScheme getScheme() {
        return new getPermisRoleListTotal_resultTupleScheme();
      }
    }

    private static class getPermisRoleListTotal_resultTupleScheme extends TupleScheme<getPermisRoleListTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermisRoleListTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermisRoleListTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getNotHaveRoleOfPermisList_args implements org.apache.thrift.TBase<getNotHaveRoleOfPermisList_args, getNotHaveRoleOfPermisList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotHaveRoleOfPermisList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotHaveRoleOfPermisList_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotHaveRoleOfPermisList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotHaveRoleOfPermisList_argsTupleSchemeFactory());
    }

    public int pageNum; // required
    public int pageSize; // required
    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum"),
      PAGE_SIZE((short)2, "pageSize"),
      SYS_PERMISSION((short)3, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          case 3: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotHaveRoleOfPermisList_args.class, metaDataMap);
    }

    public getNotHaveRoleOfPermisList_args() {
    }

    public getNotHaveRoleOfPermisList_args(
      int pageNum,
      int pageSize,
      SysPermission sysPermission)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotHaveRoleOfPermisList_args(getNotHaveRoleOfPermisList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public getNotHaveRoleOfPermisList_args deepCopy() {
      return new getNotHaveRoleOfPermisList_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.sysPermission = null;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getNotHaveRoleOfPermisList_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getNotHaveRoleOfPermisList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public getNotHaveRoleOfPermisList_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotHaveRoleOfPermisList_args)
        return this.equals((getNotHaveRoleOfPermisList_args)that);
      return false;
    }

    public boolean equals(getNotHaveRoleOfPermisList_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNotHaveRoleOfPermisList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotHaveRoleOfPermisList_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotHaveRoleOfPermisList_argsStandardSchemeFactory implements SchemeFactory {
      public getNotHaveRoleOfPermisList_argsStandardScheme getScheme() {
        return new getNotHaveRoleOfPermisList_argsStandardScheme();
      }
    }

    private static class getNotHaveRoleOfPermisList_argsStandardScheme extends StandardScheme<getNotHaveRoleOfPermisList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotHaveRoleOfPermisList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotHaveRoleOfPermisList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotHaveRoleOfPermisList_argsTupleSchemeFactory implements SchemeFactory {
      public getNotHaveRoleOfPermisList_argsTupleScheme getScheme() {
        return new getNotHaveRoleOfPermisList_argsTupleScheme();
      }
    }

    private static class getNotHaveRoleOfPermisList_argsTupleScheme extends TupleScheme<getNotHaveRoleOfPermisList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotHaveRoleOfPermisList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        if (struct.isSetPageSize()) {
          optionals.set(1);
        }
        if (struct.isSetSysPermission()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotHaveRoleOfPermisList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class getNotHaveRoleOfPermisList_result implements org.apache.thrift.TBase<getNotHaveRoleOfPermisList_result, getNotHaveRoleOfPermisList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotHaveRoleOfPermisList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotHaveRoleOfPermisList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNotHaveRoleOfPermisList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNotHaveRoleOfPermisList_resultTupleSchemeFactory());
    }

    public List<SysRole> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRole.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotHaveRoleOfPermisList_result.class, metaDataMap);
    }

    public getNotHaveRoleOfPermisList_result() {
    }

    public getNotHaveRoleOfPermisList_result(
      List<SysRole> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotHaveRoleOfPermisList_result(getNotHaveRoleOfPermisList_result other) {
      if (other.isSetSuccess()) {
        List<SysRole> __this__success = new ArrayList<SysRole>(other.success.size());
        for (SysRole other_element : other.success) {
          __this__success.add(new SysRole(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getNotHaveRoleOfPermisList_result deepCopy() {
      return new getNotHaveRoleOfPermisList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysRole> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysRole elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysRole>();
      }
      this.success.add(elem);
    }

    public List<SysRole> getSuccess() {
      return this.success;
    }

    public getNotHaveRoleOfPermisList_result setSuccess(List<SysRole> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getNotHaveRoleOfPermisList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysRole>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotHaveRoleOfPermisList_result)
        return this.equals((getNotHaveRoleOfPermisList_result)that);
      return false;
    }

    public boolean equals(getNotHaveRoleOfPermisList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNotHaveRoleOfPermisList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNotHaveRoleOfPermisList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotHaveRoleOfPermisList_resultStandardSchemeFactory implements SchemeFactory {
      public getNotHaveRoleOfPermisList_resultStandardScheme getScheme() {
        return new getNotHaveRoleOfPermisList_resultStandardScheme();
      }
    }

    private static class getNotHaveRoleOfPermisList_resultStandardScheme extends StandardScheme<getNotHaveRoleOfPermisList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotHaveRoleOfPermisList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<SysRole>(_list112.size);
                  SysRole _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new SysRole();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotHaveRoleOfPermisList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysRole _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotHaveRoleOfPermisList_resultTupleSchemeFactory implements SchemeFactory {
      public getNotHaveRoleOfPermisList_resultTupleScheme getScheme() {
        return new getNotHaveRoleOfPermisList_resultTupleScheme();
      }
    }

    private static class getNotHaveRoleOfPermisList_resultTupleScheme extends TupleScheme<getNotHaveRoleOfPermisList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotHaveRoleOfPermisList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysRole _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotHaveRoleOfPermisList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysRole>(_list117.size);
            SysRole _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new SysRole();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteRoleOfPermisById_args implements org.apache.thrift.TBase<deleteRoleOfPermisById_args, deleteRoleOfPermisById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRoleOfPermisById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRoleOfPermisById_args");

    private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRoleOfPermisById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRoleOfPermisById_argsTupleSchemeFactory());
    }

    public Map<String,String> parameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMETER((short)1, "parameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMETER
            return PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRoleOfPermisById_args.class, metaDataMap);
    }

    public deleteRoleOfPermisById_args() {
    }

    public deleteRoleOfPermisById_args(
      Map<String,String> parameter)
    {
      this();
      this.parameter = parameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRoleOfPermisById_args(deleteRoleOfPermisById_args other) {
      if (other.isSetParameter()) {
        Map<String,String> __this__parameter = new HashMap<String,String>(other.parameter);
        this.parameter = __this__parameter;
      }
    }

    public deleteRoleOfPermisById_args deepCopy() {
      return new deleteRoleOfPermisById_args(this);
    }

    @Override
    public void clear() {
      this.parameter = null;
    }

    public int getParameterSize() {
      return (this.parameter == null) ? 0 : this.parameter.size();
    }

    public void putToParameter(String key, String val) {
      if (this.parameter == null) {
        this.parameter = new HashMap<String,String>();
      }
      this.parameter.put(key, val);
    }

    public Map<String,String> getParameter() {
      return this.parameter;
    }

    public deleteRoleOfPermisById_args setParameter(Map<String,String> parameter) {
      this.parameter = parameter;
      return this;
    }

    public void unsetParameter() {
      this.parameter = null;
    }

    /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
    public boolean isSetParameter() {
      return this.parameter != null;
    }

    public void setParameterIsSet(boolean value) {
      if (!value) {
        this.parameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMETER:
        if (value == null) {
          unsetParameter();
        } else {
          setParameter((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMETER:
        return getParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMETER:
        return isSetParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRoleOfPermisById_args)
        return this.equals((deleteRoleOfPermisById_args)that);
      return false;
    }

    public boolean equals(deleteRoleOfPermisById_args that) {
      if (that == null)
        return false;

      boolean this_present_parameter = true && this.isSetParameter();
      boolean that_present_parameter = true && that.isSetParameter();
      if (this_present_parameter || that_present_parameter) {
        if (!(this_present_parameter && that_present_parameter))
          return false;
        if (!this.parameter.equals(that.parameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_parameter = true && (isSetParameter());
      list.add(present_parameter);
      if (present_parameter)
        list.add(parameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRoleOfPermisById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRoleOfPermisById_args(");
      boolean first = true;

      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRoleOfPermisById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRoleOfPermisById_argsStandardScheme getScheme() {
        return new deleteRoleOfPermisById_argsStandardScheme();
      }
    }

    private static class deleteRoleOfPermisById_argsStandardScheme extends StandardScheme<deleteRoleOfPermisById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                  struct.parameter = new HashMap<String,String>(2*_map120.size);
                  String _key121;
                  String _val122;
                  for (int _i123 = 0; _i123 < _map120.size; ++_i123)
                  {
                    _key121 = iprot.readString();
                    _val122 = iprot.readString();
                    struct.parameter.put(_key121, _val122);
                  }
                  iprot.readMapEnd();
                }
                struct.setParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parameter != null) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameter.size()));
            for (Map.Entry<String, String> _iter124 : struct.parameter.entrySet())
            {
              oprot.writeString(_iter124.getKey());
              oprot.writeString(_iter124.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRoleOfPermisById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRoleOfPermisById_argsTupleScheme getScheme() {
        return new deleteRoleOfPermisById_argsTupleScheme();
      }
    }

    private static class deleteRoleOfPermisById_argsTupleScheme extends TupleScheme<deleteRoleOfPermisById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParameter()) {
          {
            oprot.writeI32(struct.parameter.size());
            for (Map.Entry<String, String> _iter125 : struct.parameter.entrySet())
            {
              oprot.writeString(_iter125.getKey());
              oprot.writeString(_iter125.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parameter = new HashMap<String,String>(2*_map126.size);
            String _key127;
            String _val128;
            for (int _i129 = 0; _i129 < _map126.size; ++_i129)
            {
              _key127 = iprot.readString();
              _val128 = iprot.readString();
              struct.parameter.put(_key127, _val128);
            }
          }
          struct.setParameterIsSet(true);
        }
      }
    }

  }

  public static class deleteRoleOfPermisById_result implements org.apache.thrift.TBase<deleteRoleOfPermisById_result, deleteRoleOfPermisById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRoleOfPermisById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRoleOfPermisById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRoleOfPermisById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRoleOfPermisById_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRoleOfPermisById_result.class, metaDataMap);
    }

    public deleteRoleOfPermisById_result() {
    }

    public deleteRoleOfPermisById_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRoleOfPermisById_result(deleteRoleOfPermisById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteRoleOfPermisById_result deepCopy() {
      return new deleteRoleOfPermisById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteRoleOfPermisById_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteRoleOfPermisById_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRoleOfPermisById_result)
        return this.equals((deleteRoleOfPermisById_result)that);
      return false;
    }

    public boolean equals(deleteRoleOfPermisById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRoleOfPermisById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRoleOfPermisById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRoleOfPermisById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRoleOfPermisById_resultStandardScheme getScheme() {
        return new deleteRoleOfPermisById_resultStandardScheme();
      }
    }

    private static class deleteRoleOfPermisById_resultStandardScheme extends StandardScheme<deleteRoleOfPermisById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRoleOfPermisById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRoleOfPermisById_resultTupleScheme getScheme() {
        return new deleteRoleOfPermisById_resultTupleScheme();
      }
    }

    private static class deleteRoleOfPermisById_resultTupleScheme extends TupleScheme<deleteRoleOfPermisById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class addRoleOfPermisById_args implements org.apache.thrift.TBase<addRoleOfPermisById_args, addRoleOfPermisById_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRoleOfPermisById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRoleOfPermisById_args");

    private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRoleOfPermisById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRoleOfPermisById_argsTupleSchemeFactory());
    }

    public Map<String,String> parameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMETER((short)1, "parameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMETER
            return PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRoleOfPermisById_args.class, metaDataMap);
    }

    public addRoleOfPermisById_args() {
    }

    public addRoleOfPermisById_args(
      Map<String,String> parameter)
    {
      this();
      this.parameter = parameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRoleOfPermisById_args(addRoleOfPermisById_args other) {
      if (other.isSetParameter()) {
        Map<String,String> __this__parameter = new HashMap<String,String>(other.parameter);
        this.parameter = __this__parameter;
      }
    }

    public addRoleOfPermisById_args deepCopy() {
      return new addRoleOfPermisById_args(this);
    }

    @Override
    public void clear() {
      this.parameter = null;
    }

    public int getParameterSize() {
      return (this.parameter == null) ? 0 : this.parameter.size();
    }

    public void putToParameter(String key, String val) {
      if (this.parameter == null) {
        this.parameter = new HashMap<String,String>();
      }
      this.parameter.put(key, val);
    }

    public Map<String,String> getParameter() {
      return this.parameter;
    }

    public addRoleOfPermisById_args setParameter(Map<String,String> parameter) {
      this.parameter = parameter;
      return this;
    }

    public void unsetParameter() {
      this.parameter = null;
    }

    /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
    public boolean isSetParameter() {
      return this.parameter != null;
    }

    public void setParameterIsSet(boolean value) {
      if (!value) {
        this.parameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMETER:
        if (value == null) {
          unsetParameter();
        } else {
          setParameter((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMETER:
        return getParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMETER:
        return isSetParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRoleOfPermisById_args)
        return this.equals((addRoleOfPermisById_args)that);
      return false;
    }

    public boolean equals(addRoleOfPermisById_args that) {
      if (that == null)
        return false;

      boolean this_present_parameter = true && this.isSetParameter();
      boolean that_present_parameter = true && that.isSetParameter();
      if (this_present_parameter || that_present_parameter) {
        if (!(this_present_parameter && that_present_parameter))
          return false;
        if (!this.parameter.equals(that.parameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_parameter = true && (isSetParameter());
      list.add(present_parameter);
      if (present_parameter)
        list.add(parameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRoleOfPermisById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRoleOfPermisById_args(");
      boolean first = true;

      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRoleOfPermisById_argsStandardSchemeFactory implements SchemeFactory {
      public addRoleOfPermisById_argsStandardScheme getScheme() {
        return new addRoleOfPermisById_argsStandardScheme();
      }
    }

    private static class addRoleOfPermisById_argsStandardScheme extends StandardScheme<addRoleOfPermisById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map130 = iprot.readMapBegin();
                  struct.parameter = new HashMap<String,String>(2*_map130.size);
                  String _key131;
                  String _val132;
                  for (int _i133 = 0; _i133 < _map130.size; ++_i133)
                  {
                    _key131 = iprot.readString();
                    _val132 = iprot.readString();
                    struct.parameter.put(_key131, _val132);
                  }
                  iprot.readMapEnd();
                }
                struct.setParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parameter != null) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameter.size()));
            for (Map.Entry<String, String> _iter134 : struct.parameter.entrySet())
            {
              oprot.writeString(_iter134.getKey());
              oprot.writeString(_iter134.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRoleOfPermisById_argsTupleSchemeFactory implements SchemeFactory {
      public addRoleOfPermisById_argsTupleScheme getScheme() {
        return new addRoleOfPermisById_argsTupleScheme();
      }
    }

    private static class addRoleOfPermisById_argsTupleScheme extends TupleScheme<addRoleOfPermisById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParameter()) {
          {
            oprot.writeI32(struct.parameter.size());
            for (Map.Entry<String, String> _iter135 : struct.parameter.entrySet())
            {
              oprot.writeString(_iter135.getKey());
              oprot.writeString(_iter135.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRoleOfPermisById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map136 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parameter = new HashMap<String,String>(2*_map136.size);
            String _key137;
            String _val138;
            for (int _i139 = 0; _i139 < _map136.size; ++_i139)
            {
              _key137 = iprot.readString();
              _val138 = iprot.readString();
              struct.parameter.put(_key137, _val138);
            }
          }
          struct.setParameterIsSet(true);
        }
      }
    }

  }

  public static class addRoleOfPermisById_result implements org.apache.thrift.TBase<addRoleOfPermisById_result, addRoleOfPermisById_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRoleOfPermisById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRoleOfPermisById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRoleOfPermisById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRoleOfPermisById_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRoleOfPermisById_result.class, metaDataMap);
    }

    public addRoleOfPermisById_result() {
    }

    public addRoleOfPermisById_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRoleOfPermisById_result(addRoleOfPermisById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addRoleOfPermisById_result deepCopy() {
      return new addRoleOfPermisById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addRoleOfPermisById_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addRoleOfPermisById_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRoleOfPermisById_result)
        return this.equals((addRoleOfPermisById_result)that);
      return false;
    }

    public boolean equals(addRoleOfPermisById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRoleOfPermisById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRoleOfPermisById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRoleOfPermisById_resultStandardSchemeFactory implements SchemeFactory {
      public addRoleOfPermisById_resultStandardScheme getScheme() {
        return new addRoleOfPermisById_resultStandardScheme();
      }
    }

    private static class addRoleOfPermisById_resultStandardScheme extends StandardScheme<addRoleOfPermisById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRoleOfPermisById_resultTupleSchemeFactory implements SchemeFactory {
      public addRoleOfPermisById_resultTupleScheme getScheme() {
        return new addRoleOfPermisById_resultTupleScheme();
      }
    }

    private static class addRoleOfPermisById_resultTupleScheme extends TupleScheme<addRoleOfPermisById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRoleOfPermisById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getSysPermissionCount_args implements org.apache.thrift.TBase<getSysPermissionCount_args, getSysPermissionCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysPermissionCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysPermissionCount_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysPermissionCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysPermissionCount_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysPermissionCount_args.class, metaDataMap);
    }

    public getSysPermissionCount_args() {
    }

    public getSysPermissionCount_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysPermissionCount_args(getSysPermissionCount_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public getSysPermissionCount_args deepCopy() {
      return new getSysPermissionCount_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public getSysPermissionCount_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysPermissionCount_args)
        return this.equals((getSysPermissionCount_args)that);
      return false;
    }

    public boolean equals(getSysPermissionCount_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysPermissionCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysPermissionCount_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysPermissionCount_argsStandardSchemeFactory implements SchemeFactory {
      public getSysPermissionCount_argsStandardScheme getScheme() {
        return new getSysPermissionCount_argsStandardScheme();
      }
    }

    private static class getSysPermissionCount_argsStandardScheme extends StandardScheme<getSysPermissionCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysPermissionCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysPermissionCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysPermissionCount_argsTupleSchemeFactory implements SchemeFactory {
      public getSysPermissionCount_argsTupleScheme getScheme() {
        return new getSysPermissionCount_argsTupleScheme();
      }
    }

    private static class getSysPermissionCount_argsTupleScheme extends TupleScheme<getSysPermissionCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysPermissionCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysPermissionCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class getSysPermissionCount_result implements org.apache.thrift.TBase<getSysPermissionCount_result, getSysPermissionCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysPermissionCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysPermissionCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysPermissionCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysPermissionCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysPermissionCount_result.class, metaDataMap);
    }

    public getSysPermissionCount_result() {
    }

    public getSysPermissionCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysPermissionCount_result(getSysPermissionCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSysPermissionCount_result deepCopy() {
      return new getSysPermissionCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getSysPermissionCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysPermissionCount_result)
        return this.equals((getSysPermissionCount_result)that);
      return false;
    }

    public boolean equals(getSysPermissionCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysPermissionCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysPermissionCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysPermissionCount_resultStandardSchemeFactory implements SchemeFactory {
      public getSysPermissionCount_resultStandardScheme getScheme() {
        return new getSysPermissionCount_resultStandardScheme();
      }
    }

    private static class getSysPermissionCount_resultStandardScheme extends StandardScheme<getSysPermissionCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysPermissionCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysPermissionCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysPermissionCount_resultTupleSchemeFactory implements SchemeFactory {
      public getSysPermissionCount_resultTupleScheme getScheme() {
        return new getSysPermissionCount_resultTupleScheme();
      }
    }

    private static class getSysPermissionCount_resultTupleScheme extends TupleScheme<getSysPermissionCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysPermissionCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysPermissionCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class srarchSysPermissionCount_args implements org.apache.thrift.TBase<srarchSysPermissionCount_args, srarchSysPermissionCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<srarchSysPermissionCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("srarchSysPermissionCount_args");

    private static final org.apache.thrift.protocol.TField SYS_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermission", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new srarchSysPermissionCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new srarchSysPermissionCount_argsTupleSchemeFactory());
    }

    public SysPermission sysPermission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_PERMISSION((short)1, "sysPermission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_PERMISSION
            return SYS_PERMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("sysPermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(srarchSysPermissionCount_args.class, metaDataMap);
    }

    public srarchSysPermissionCount_args() {
    }

    public srarchSysPermissionCount_args(
      SysPermission sysPermission)
    {
      this();
      this.sysPermission = sysPermission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public srarchSysPermissionCount_args(srarchSysPermissionCount_args other) {
      if (other.isSetSysPermission()) {
        this.sysPermission = new SysPermission(other.sysPermission);
      }
    }

    public srarchSysPermissionCount_args deepCopy() {
      return new srarchSysPermissionCount_args(this);
    }

    @Override
    public void clear() {
      this.sysPermission = null;
    }

    public SysPermission getSysPermission() {
      return this.sysPermission;
    }

    public srarchSysPermissionCount_args setSysPermission(SysPermission sysPermission) {
      this.sysPermission = sysPermission;
      return this;
    }

    public void unsetSysPermission() {
      this.sysPermission = null;
    }

    /** Returns true if field sysPermission is set (has been assigned a value) and false otherwise */
    public boolean isSetSysPermission() {
      return this.sysPermission != null;
    }

    public void setSysPermissionIsSet(boolean value) {
      if (!value) {
        this.sysPermission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_PERMISSION:
        if (value == null) {
          unsetSysPermission();
        } else {
          setSysPermission((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_PERMISSION:
        return getSysPermission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_PERMISSION:
        return isSetSysPermission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof srarchSysPermissionCount_args)
        return this.equals((srarchSysPermissionCount_args)that);
      return false;
    }

    public boolean equals(srarchSysPermissionCount_args that) {
      if (that == null)
        return false;

      boolean this_present_sysPermission = true && this.isSetSysPermission();
      boolean that_present_sysPermission = true && that.isSetSysPermission();
      if (this_present_sysPermission || that_present_sysPermission) {
        if (!(this_present_sysPermission && that_present_sysPermission))
          return false;
        if (!this.sysPermission.equals(that.sysPermission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysPermission = true && (isSetSysPermission());
      list.add(present_sysPermission);
      if (present_sysPermission)
        list.add(sysPermission);

      return list.hashCode();
    }

    @Override
    public int compareTo(srarchSysPermissionCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysPermission()).compareTo(other.isSetSysPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPermission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermission, other.sysPermission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("srarchSysPermissionCount_args(");
      boolean first = true;

      sb.append("sysPermission:");
      if (this.sysPermission == null) {
        sb.append("null");
      } else {
        sb.append(this.sysPermission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysPermission != null) {
        sysPermission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class srarchSysPermissionCount_argsStandardSchemeFactory implements SchemeFactory {
      public srarchSysPermissionCount_argsStandardScheme getScheme() {
        return new srarchSysPermissionCount_argsStandardScheme();
      }
    }

    private static class srarchSysPermissionCount_argsStandardScheme extends StandardScheme<srarchSysPermissionCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, srarchSysPermissionCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_PERMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysPermission = new SysPermission();
                struct.sysPermission.read(iprot);
                struct.setSysPermissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, srarchSysPermissionCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysPermission != null) {
          oprot.writeFieldBegin(SYS_PERMISSION_FIELD_DESC);
          struct.sysPermission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class srarchSysPermissionCount_argsTupleSchemeFactory implements SchemeFactory {
      public srarchSysPermissionCount_argsTupleScheme getScheme() {
        return new srarchSysPermissionCount_argsTupleScheme();
      }
    }

    private static class srarchSysPermissionCount_argsTupleScheme extends TupleScheme<srarchSysPermissionCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, srarchSysPermissionCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysPermission()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysPermission()) {
          struct.sysPermission.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, srarchSysPermissionCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysPermission = new SysPermission();
          struct.sysPermission.read(iprot);
          struct.setSysPermissionIsSet(true);
        }
      }
    }

  }

  public static class srarchSysPermissionCount_result implements org.apache.thrift.TBase<srarchSysPermissionCount_result, srarchSysPermissionCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<srarchSysPermissionCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("srarchSysPermissionCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new srarchSysPermissionCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new srarchSysPermissionCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(srarchSysPermissionCount_result.class, metaDataMap);
    }

    public srarchSysPermissionCount_result() {
    }

    public srarchSysPermissionCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public srarchSysPermissionCount_result(srarchSysPermissionCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public srarchSysPermissionCount_result deepCopy() {
      return new srarchSysPermissionCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public srarchSysPermissionCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof srarchSysPermissionCount_result)
        return this.equals((srarchSysPermissionCount_result)that);
      return false;
    }

    public boolean equals(srarchSysPermissionCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(srarchSysPermissionCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("srarchSysPermissionCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class srarchSysPermissionCount_resultStandardSchemeFactory implements SchemeFactory {
      public srarchSysPermissionCount_resultStandardScheme getScheme() {
        return new srarchSysPermissionCount_resultStandardScheme();
      }
    }

    private static class srarchSysPermissionCount_resultStandardScheme extends StandardScheme<srarchSysPermissionCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, srarchSysPermissionCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, srarchSysPermissionCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class srarchSysPermissionCount_resultTupleSchemeFactory implements SchemeFactory {
      public srarchSysPermissionCount_resultTupleScheme getScheme() {
        return new srarchSysPermissionCount_resultTupleScheme();
      }
    }

    private static class srarchSysPermissionCount_resultTupleScheme extends TupleScheme<srarchSysPermissionCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, srarchSysPermissionCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, srarchSysPermissionCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPermisByName_args implements org.apache.thrift.TBase<getPermisByName_args, getPermisByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPermisByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermisByName_args");

    private static final org.apache.thrift.protocol.TField PERMIS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("permisName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermisByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermisByName_argsTupleSchemeFactory());
    }

    public String permisName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERMIS_NAME((short)1, "permisName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERMIS_NAME
            return PERMIS_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERMIS_NAME, new org.apache.thrift.meta_data.FieldMetaData("permisName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermisByName_args.class, metaDataMap);
    }

    public getPermisByName_args() {
    }

    public getPermisByName_args(
      String permisName)
    {
      this();
      this.permisName = permisName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermisByName_args(getPermisByName_args other) {
      if (other.isSetPermisName()) {
        this.permisName = other.permisName;
      }
    }

    public getPermisByName_args deepCopy() {
      return new getPermisByName_args(this);
    }

    @Override
    public void clear() {
      this.permisName = null;
    }

    public String getPermisName() {
      return this.permisName;
    }

    public getPermisByName_args setPermisName(String permisName) {
      this.permisName = permisName;
      return this;
    }

    public void unsetPermisName() {
      this.permisName = null;
    }

    /** Returns true if field permisName is set (has been assigned a value) and false otherwise */
    public boolean isSetPermisName() {
      return this.permisName != null;
    }

    public void setPermisNameIsSet(boolean value) {
      if (!value) {
        this.permisName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PERMIS_NAME:
        if (value == null) {
          unsetPermisName();
        } else {
          setPermisName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PERMIS_NAME:
        return getPermisName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PERMIS_NAME:
        return isSetPermisName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermisByName_args)
        return this.equals((getPermisByName_args)that);
      return false;
    }

    public boolean equals(getPermisByName_args that) {
      if (that == null)
        return false;

      boolean this_present_permisName = true && this.isSetPermisName();
      boolean that_present_permisName = true && that.isSetPermisName();
      if (this_present_permisName || that_present_permisName) {
        if (!(this_present_permisName && that_present_permisName))
          return false;
        if (!this.permisName.equals(that.permisName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_permisName = true && (isSetPermisName());
      list.add(present_permisName);
      if (present_permisName)
        list.add(permisName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermisByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPermisName()).compareTo(other.isSetPermisName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermisName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permisName, other.permisName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermisByName_args(");
      boolean first = true;

      sb.append("permisName:");
      if (this.permisName == null) {
        sb.append("null");
      } else {
        sb.append(this.permisName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermisByName_argsStandardSchemeFactory implements SchemeFactory {
      public getPermisByName_argsStandardScheme getScheme() {
        return new getPermisByName_argsStandardScheme();
      }
    }

    private static class getPermisByName_argsStandardScheme extends StandardScheme<getPermisByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermisByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERMIS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.permisName = iprot.readString();
                struct.setPermisNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermisByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.permisName != null) {
          oprot.writeFieldBegin(PERMIS_NAME_FIELD_DESC);
          oprot.writeString(struct.permisName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermisByName_argsTupleSchemeFactory implements SchemeFactory {
      public getPermisByName_argsTupleScheme getScheme() {
        return new getPermisByName_argsTupleScheme();
      }
    }

    private static class getPermisByName_argsTupleScheme extends TupleScheme<getPermisByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermisByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPermisName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPermisName()) {
          oprot.writeString(struct.permisName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermisByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.permisName = iprot.readString();
          struct.setPermisNameIsSet(true);
        }
      }
    }

  }

  public static class getPermisByName_result implements org.apache.thrift.TBase<getPermisByName_result, getPermisByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPermisByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermisByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermisByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermisByName_resultTupleSchemeFactory());
    }

    public SysPermission success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermisByName_result.class, metaDataMap);
    }

    public getPermisByName_result() {
    }

    public getPermisByName_result(
      SysPermission success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermisByName_result(getPermisByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysPermission(other.success);
      }
    }

    public getPermisByName_result deepCopy() {
      return new getPermisByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SysPermission getSuccess() {
      return this.success;
    }

    public getPermisByName_result setSuccess(SysPermission success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysPermission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermisByName_result)
        return this.equals((getPermisByName_result)that);
      return false;
    }

    public boolean equals(getPermisByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPermisByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermisByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermisByName_resultStandardSchemeFactory implements SchemeFactory {
      public getPermisByName_resultStandardScheme getScheme() {
        return new getPermisByName_resultStandardScheme();
      }
    }

    private static class getPermisByName_resultStandardScheme extends StandardScheme<getPermisByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermisByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysPermission();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermisByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermisByName_resultTupleSchemeFactory implements SchemeFactory {
      public getPermisByName_resultTupleScheme getScheme() {
        return new getPermisByName_resultTupleScheme();
      }
    }

    private static class getPermisByName_resultTupleScheme extends TupleScheme<getPermisByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermisByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermisByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SysPermission();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

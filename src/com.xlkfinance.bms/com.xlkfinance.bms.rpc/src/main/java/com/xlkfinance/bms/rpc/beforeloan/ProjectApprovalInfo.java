/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ProjectApprovalInfo implements org.apache.thrift.TBase<ProjectApprovalInfo, ProjectApprovalInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectApprovalInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectApprovalInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INFO_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("infoType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INFO_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("infoTypeText", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INFO_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("infoContent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPROVAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalUserId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField APPROVAL_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IS_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("isConfirm", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CONFIRM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmUserId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INTEREST_CHG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("interestChgId", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectApprovalInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectApprovalInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int infoType; // required
  public String infoTypeText; // required
  public String infoContent; // required
  public int approvalUserId; // required
  public String approvalUserName; // required
  public int status; // required
  public int isConfirm; // required
  public int confirmUserId; // required
  public String pids; // required
  public int interestChgId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    INFO_TYPE((short)3, "infoType"),
    INFO_TYPE_TEXT((short)4, "infoTypeText"),
    INFO_CONTENT((short)5, "infoContent"),
    APPROVAL_USER_ID((short)6, "approvalUserId"),
    APPROVAL_USER_NAME((short)7, "approvalUserName"),
    STATUS((short)8, "status"),
    IS_CONFIRM((short)9, "isConfirm"),
    CONFIRM_USER_ID((short)10, "confirmUserId"),
    PIDS((short)11, "pids"),
    INTEREST_CHG_ID((short)12, "interestChgId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // INFO_TYPE
          return INFO_TYPE;
        case 4: // INFO_TYPE_TEXT
          return INFO_TYPE_TEXT;
        case 5: // INFO_CONTENT
          return INFO_CONTENT;
        case 6: // APPROVAL_USER_ID
          return APPROVAL_USER_ID;
        case 7: // APPROVAL_USER_NAME
          return APPROVAL_USER_NAME;
        case 8: // STATUS
          return STATUS;
        case 9: // IS_CONFIRM
          return IS_CONFIRM;
        case 10: // CONFIRM_USER_ID
          return CONFIRM_USER_ID;
        case 11: // PIDS
          return PIDS;
        case 12: // INTEREST_CHG_ID
          return INTEREST_CHG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __INFOTYPE_ISSET_ID = 2;
  private static final int __APPROVALUSERID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __ISCONFIRM_ISSET_ID = 5;
  private static final int __CONFIRMUSERID_ISSET_ID = 6;
  private static final int __INTERESTCHGID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INFO_TYPE, new org.apache.thrift.meta_data.FieldMetaData("infoType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INFO_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("infoTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFO_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("infoContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("approvalUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVAL_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("approvalUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("isConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIRM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("confirmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEREST_CHG_ID, new org.apache.thrift.meta_data.FieldMetaData("interestChgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectApprovalInfo.class, metaDataMap);
  }

  public ProjectApprovalInfo() {
  }

  public ProjectApprovalInfo(
    int pid,
    int projectId,
    int infoType,
    String infoTypeText,
    String infoContent,
    int approvalUserId,
    String approvalUserName,
    int status,
    int isConfirm,
    int confirmUserId,
    String pids,
    int interestChgId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.infoType = infoType;
    setInfoTypeIsSet(true);
    this.infoTypeText = infoTypeText;
    this.infoContent = infoContent;
    this.approvalUserId = approvalUserId;
    setApprovalUserIdIsSet(true);
    this.approvalUserName = approvalUserName;
    this.status = status;
    setStatusIsSet(true);
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
    this.confirmUserId = confirmUserId;
    setConfirmUserIdIsSet(true);
    this.pids = pids;
    this.interestChgId = interestChgId;
    setInterestChgIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectApprovalInfo(ProjectApprovalInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.infoType = other.infoType;
    if (other.isSetInfoTypeText()) {
      this.infoTypeText = other.infoTypeText;
    }
    if (other.isSetInfoContent()) {
      this.infoContent = other.infoContent;
    }
    this.approvalUserId = other.approvalUserId;
    if (other.isSetApprovalUserName()) {
      this.approvalUserName = other.approvalUserName;
    }
    this.status = other.status;
    this.isConfirm = other.isConfirm;
    this.confirmUserId = other.confirmUserId;
    if (other.isSetPids()) {
      this.pids = other.pids;
    }
    this.interestChgId = other.interestChgId;
  }

  public ProjectApprovalInfo deepCopy() {
    return new ProjectApprovalInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setInfoTypeIsSet(false);
    this.infoType = 0;
    this.infoTypeText = null;
    this.infoContent = null;
    setApprovalUserIdIsSet(false);
    this.approvalUserId = 0;
    this.approvalUserName = null;
    setStatusIsSet(false);
    this.status = 0;
    setIsConfirmIsSet(false);
    this.isConfirm = 0;
    setConfirmUserIdIsSet(false);
    this.confirmUserId = 0;
    this.pids = null;
    setInterestChgIdIsSet(false);
    this.interestChgId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectApprovalInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectApprovalInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getInfoType() {
    return this.infoType;
  }

  public ProjectApprovalInfo setInfoType(int infoType) {
    this.infoType = infoType;
    setInfoTypeIsSet(true);
    return this;
  }

  public void unsetInfoType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INFOTYPE_ISSET_ID);
  }

  /** Returns true if field infoType is set (has been assigned a value) and false otherwise */
  public boolean isSetInfoType() {
    return EncodingUtils.testBit(__isset_bitfield, __INFOTYPE_ISSET_ID);
  }

  public void setInfoTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INFOTYPE_ISSET_ID, value);
  }

  public String getInfoTypeText() {
    return this.infoTypeText;
  }

  public ProjectApprovalInfo setInfoTypeText(String infoTypeText) {
    this.infoTypeText = infoTypeText;
    return this;
  }

  public void unsetInfoTypeText() {
    this.infoTypeText = null;
  }

  /** Returns true if field infoTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetInfoTypeText() {
    return this.infoTypeText != null;
  }

  public void setInfoTypeTextIsSet(boolean value) {
    if (!value) {
      this.infoTypeText = null;
    }
  }

  public String getInfoContent() {
    return this.infoContent;
  }

  public ProjectApprovalInfo setInfoContent(String infoContent) {
    this.infoContent = infoContent;
    return this;
  }

  public void unsetInfoContent() {
    this.infoContent = null;
  }

  /** Returns true if field infoContent is set (has been assigned a value) and false otherwise */
  public boolean isSetInfoContent() {
    return this.infoContent != null;
  }

  public void setInfoContentIsSet(boolean value) {
    if (!value) {
      this.infoContent = null;
    }
  }

  public int getApprovalUserId() {
    return this.approvalUserId;
  }

  public ProjectApprovalInfo setApprovalUserId(int approvalUserId) {
    this.approvalUserId = approvalUserId;
    setApprovalUserIdIsSet(true);
    return this;
  }

  public void unsetApprovalUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVALUSERID_ISSET_ID);
  }

  /** Returns true if field approvalUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVALUSERID_ISSET_ID);
  }

  public void setApprovalUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVALUSERID_ISSET_ID, value);
  }

  public String getApprovalUserName() {
    return this.approvalUserName;
  }

  public ProjectApprovalInfo setApprovalUserName(String approvalUserName) {
    this.approvalUserName = approvalUserName;
    return this;
  }

  public void unsetApprovalUserName() {
    this.approvalUserName = null;
  }

  /** Returns true if field approvalUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalUserName() {
    return this.approvalUserName != null;
  }

  public void setApprovalUserNameIsSet(boolean value) {
    if (!value) {
      this.approvalUserName = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectApprovalInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getIsConfirm() {
    return this.isConfirm;
  }

  public ProjectApprovalInfo setIsConfirm(int isConfirm) {
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
    return this;
  }

  public void unsetIsConfirm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  /** Returns true if field isConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetIsConfirm() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  public void setIsConfirmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCONFIRM_ISSET_ID, value);
  }

  public int getConfirmUserId() {
    return this.confirmUserId;
  }

  public ProjectApprovalInfo setConfirmUserId(int confirmUserId) {
    this.confirmUserId = confirmUserId;
    setConfirmUserIdIsSet(true);
    return this;
  }

  public void unsetConfirmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMUSERID_ISSET_ID);
  }

  /** Returns true if field confirmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMUSERID_ISSET_ID);
  }

  public void setConfirmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMUSERID_ISSET_ID, value);
  }

  public String getPids() {
    return this.pids;
  }

  public ProjectApprovalInfo setPids(String pids) {
    this.pids = pids;
    return this;
  }

  public void unsetPids() {
    this.pids = null;
  }

  /** Returns true if field pids is set (has been assigned a value) and false otherwise */
  public boolean isSetPids() {
    return this.pids != null;
  }

  public void setPidsIsSet(boolean value) {
    if (!value) {
      this.pids = null;
    }
  }

  public int getInterestChgId() {
    return this.interestChgId;
  }

  public ProjectApprovalInfo setInterestChgId(int interestChgId) {
    this.interestChgId = interestChgId;
    setInterestChgIdIsSet(true);
    return this;
  }

  public void unsetInterestChgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
  }

  /** Returns true if field interestChgId is set (has been assigned a value) and false otherwise */
  public boolean isSetInterestChgId() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
  }

  public void setInterestChgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case INFO_TYPE:
      if (value == null) {
        unsetInfoType();
      } else {
        setInfoType((Integer)value);
      }
      break;

    case INFO_TYPE_TEXT:
      if (value == null) {
        unsetInfoTypeText();
      } else {
        setInfoTypeText((String)value);
      }
      break;

    case INFO_CONTENT:
      if (value == null) {
        unsetInfoContent();
      } else {
        setInfoContent((String)value);
      }
      break;

    case APPROVAL_USER_ID:
      if (value == null) {
        unsetApprovalUserId();
      } else {
        setApprovalUserId((Integer)value);
      }
      break;

    case APPROVAL_USER_NAME:
      if (value == null) {
        unsetApprovalUserName();
      } else {
        setApprovalUserName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case IS_CONFIRM:
      if (value == null) {
        unsetIsConfirm();
      } else {
        setIsConfirm((Integer)value);
      }
      break;

    case CONFIRM_USER_ID:
      if (value == null) {
        unsetConfirmUserId();
      } else {
        setConfirmUserId((Integer)value);
      }
      break;

    case PIDS:
      if (value == null) {
        unsetPids();
      } else {
        setPids((String)value);
      }
      break;

    case INTEREST_CHG_ID:
      if (value == null) {
        unsetInterestChgId();
      } else {
        setInterestChgId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case INFO_TYPE:
      return Integer.valueOf(getInfoType());

    case INFO_TYPE_TEXT:
      return getInfoTypeText();

    case INFO_CONTENT:
      return getInfoContent();

    case APPROVAL_USER_ID:
      return Integer.valueOf(getApprovalUserId());

    case APPROVAL_USER_NAME:
      return getApprovalUserName();

    case STATUS:
      return Integer.valueOf(getStatus());

    case IS_CONFIRM:
      return Integer.valueOf(getIsConfirm());

    case CONFIRM_USER_ID:
      return Integer.valueOf(getConfirmUserId());

    case PIDS:
      return getPids();

    case INTEREST_CHG_ID:
      return Integer.valueOf(getInterestChgId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case INFO_TYPE:
      return isSetInfoType();
    case INFO_TYPE_TEXT:
      return isSetInfoTypeText();
    case INFO_CONTENT:
      return isSetInfoContent();
    case APPROVAL_USER_ID:
      return isSetApprovalUserId();
    case APPROVAL_USER_NAME:
      return isSetApprovalUserName();
    case STATUS:
      return isSetStatus();
    case IS_CONFIRM:
      return isSetIsConfirm();
    case CONFIRM_USER_ID:
      return isSetConfirmUserId();
    case PIDS:
      return isSetPids();
    case INTEREST_CHG_ID:
      return isSetInterestChgId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectApprovalInfo)
      return this.equals((ProjectApprovalInfo)that);
    return false;
  }

  public boolean equals(ProjectApprovalInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_infoType = true;
    boolean that_present_infoType = true;
    if (this_present_infoType || that_present_infoType) {
      if (!(this_present_infoType && that_present_infoType))
        return false;
      if (this.infoType != that.infoType)
        return false;
    }

    boolean this_present_infoTypeText = true && this.isSetInfoTypeText();
    boolean that_present_infoTypeText = true && that.isSetInfoTypeText();
    if (this_present_infoTypeText || that_present_infoTypeText) {
      if (!(this_present_infoTypeText && that_present_infoTypeText))
        return false;
      if (!this.infoTypeText.equals(that.infoTypeText))
        return false;
    }

    boolean this_present_infoContent = true && this.isSetInfoContent();
    boolean that_present_infoContent = true && that.isSetInfoContent();
    if (this_present_infoContent || that_present_infoContent) {
      if (!(this_present_infoContent && that_present_infoContent))
        return false;
      if (!this.infoContent.equals(that.infoContent))
        return false;
    }

    boolean this_present_approvalUserId = true;
    boolean that_present_approvalUserId = true;
    if (this_present_approvalUserId || that_present_approvalUserId) {
      if (!(this_present_approvalUserId && that_present_approvalUserId))
        return false;
      if (this.approvalUserId != that.approvalUserId)
        return false;
    }

    boolean this_present_approvalUserName = true && this.isSetApprovalUserName();
    boolean that_present_approvalUserName = true && that.isSetApprovalUserName();
    if (this_present_approvalUserName || that_present_approvalUserName) {
      if (!(this_present_approvalUserName && that_present_approvalUserName))
        return false;
      if (!this.approvalUserName.equals(that.approvalUserName))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_isConfirm = true;
    boolean that_present_isConfirm = true;
    if (this_present_isConfirm || that_present_isConfirm) {
      if (!(this_present_isConfirm && that_present_isConfirm))
        return false;
      if (this.isConfirm != that.isConfirm)
        return false;
    }

    boolean this_present_confirmUserId = true;
    boolean that_present_confirmUserId = true;
    if (this_present_confirmUserId || that_present_confirmUserId) {
      if (!(this_present_confirmUserId && that_present_confirmUserId))
        return false;
      if (this.confirmUserId != that.confirmUserId)
        return false;
    }

    boolean this_present_pids = true && this.isSetPids();
    boolean that_present_pids = true && that.isSetPids();
    if (this_present_pids || that_present_pids) {
      if (!(this_present_pids && that_present_pids))
        return false;
      if (!this.pids.equals(that.pids))
        return false;
    }

    boolean this_present_interestChgId = true;
    boolean that_present_interestChgId = true;
    if (this_present_interestChgId || that_present_interestChgId) {
      if (!(this_present_interestChgId && that_present_interestChgId))
        return false;
      if (this.interestChgId != that.interestChgId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_infoType = true;
    list.add(present_infoType);
    if (present_infoType)
      list.add(infoType);

    boolean present_infoTypeText = true && (isSetInfoTypeText());
    list.add(present_infoTypeText);
    if (present_infoTypeText)
      list.add(infoTypeText);

    boolean present_infoContent = true && (isSetInfoContent());
    list.add(present_infoContent);
    if (present_infoContent)
      list.add(infoContent);

    boolean present_approvalUserId = true;
    list.add(present_approvalUserId);
    if (present_approvalUserId)
      list.add(approvalUserId);

    boolean present_approvalUserName = true && (isSetApprovalUserName());
    list.add(present_approvalUserName);
    if (present_approvalUserName)
      list.add(approvalUserName);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_isConfirm = true;
    list.add(present_isConfirm);
    if (present_isConfirm)
      list.add(isConfirm);

    boolean present_confirmUserId = true;
    list.add(present_confirmUserId);
    if (present_confirmUserId)
      list.add(confirmUserId);

    boolean present_pids = true && (isSetPids());
    list.add(present_pids);
    if (present_pids)
      list.add(pids);

    boolean present_interestChgId = true;
    list.add(present_interestChgId);
    if (present_interestChgId)
      list.add(interestChgId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectApprovalInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfoType()).compareTo(other.isSetInfoType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfoType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoType, other.infoType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfoTypeText()).compareTo(other.isSetInfoTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfoTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoTypeText, other.infoTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfoContent()).compareTo(other.isSetInfoContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfoContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoContent, other.infoContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalUserId()).compareTo(other.isSetApprovalUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalUserId, other.approvalUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalUserName()).compareTo(other.isSetApprovalUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalUserName, other.approvalUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsConfirm()).compareTo(other.isSetIsConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isConfirm, other.isConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmUserId()).compareTo(other.isSetConfirmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmUserId, other.confirmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterestChgId()).compareTo(other.isSetInterestChgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterestChgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestChgId, other.interestChgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectApprovalInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("infoType:");
    sb.append(this.infoType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("infoTypeText:");
    if (this.infoTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.infoTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("infoContent:");
    if (this.infoContent == null) {
      sb.append("null");
    } else {
      sb.append(this.infoContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalUserId:");
    sb.append(this.approvalUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalUserName:");
    if (this.approvalUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isConfirm:");
    sb.append(this.isConfirm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmUserId:");
    sb.append(this.confirmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pids:");
    if (this.pids == null) {
      sb.append("null");
    } else {
      sb.append(this.pids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interestChgId:");
    sb.append(this.interestChgId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectApprovalInfoStandardSchemeFactory implements SchemeFactory {
    public ProjectApprovalInfoStandardScheme getScheme() {
      return new ProjectApprovalInfoStandardScheme();
    }
  }

  private static class ProjectApprovalInfoStandardScheme extends StandardScheme<ProjectApprovalInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectApprovalInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INFO_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.infoType = iprot.readI32();
              struct.setInfoTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INFO_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.infoTypeText = iprot.readString();
              struct.setInfoTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INFO_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.infoContent = iprot.readString();
              struct.setInfoContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPROVAL_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approvalUserId = iprot.readI32();
              struct.setApprovalUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APPROVAL_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalUserName = iprot.readString();
              struct.setApprovalUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isConfirm = iprot.readI32();
              struct.setIsConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONFIRM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.confirmUserId = iprot.readI32();
              struct.setConfirmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pids = iprot.readString();
              struct.setPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INTEREST_CHG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interestChgId = iprot.readI32();
              struct.setInterestChgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectApprovalInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INFO_TYPE_FIELD_DESC);
      oprot.writeI32(struct.infoType);
      oprot.writeFieldEnd();
      if (struct.infoTypeText != null) {
        oprot.writeFieldBegin(INFO_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.infoTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.infoContent != null) {
        oprot.writeFieldBegin(INFO_CONTENT_FIELD_DESC);
        oprot.writeString(struct.infoContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPROVAL_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.approvalUserId);
      oprot.writeFieldEnd();
      if (struct.approvalUserName != null) {
        oprot.writeFieldBegin(APPROVAL_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.approvalUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CONFIRM_FIELD_DESC);
      oprot.writeI32(struct.isConfirm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.confirmUserId);
      oprot.writeFieldEnd();
      if (struct.pids != null) {
        oprot.writeFieldBegin(PIDS_FIELD_DESC);
        oprot.writeString(struct.pids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTEREST_CHG_ID_FIELD_DESC);
      oprot.writeI32(struct.interestChgId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectApprovalInfoTupleSchemeFactory implements SchemeFactory {
    public ProjectApprovalInfoTupleScheme getScheme() {
      return new ProjectApprovalInfoTupleScheme();
    }
  }

  private static class ProjectApprovalInfoTupleScheme extends TupleScheme<ProjectApprovalInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectApprovalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetInfoType()) {
        optionals.set(2);
      }
      if (struct.isSetInfoTypeText()) {
        optionals.set(3);
      }
      if (struct.isSetInfoContent()) {
        optionals.set(4);
      }
      if (struct.isSetApprovalUserId()) {
        optionals.set(5);
      }
      if (struct.isSetApprovalUserName()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetIsConfirm()) {
        optionals.set(8);
      }
      if (struct.isSetConfirmUserId()) {
        optionals.set(9);
      }
      if (struct.isSetPids()) {
        optionals.set(10);
      }
      if (struct.isSetInterestChgId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetInfoType()) {
        oprot.writeI32(struct.infoType);
      }
      if (struct.isSetInfoTypeText()) {
        oprot.writeString(struct.infoTypeText);
      }
      if (struct.isSetInfoContent()) {
        oprot.writeString(struct.infoContent);
      }
      if (struct.isSetApprovalUserId()) {
        oprot.writeI32(struct.approvalUserId);
      }
      if (struct.isSetApprovalUserName()) {
        oprot.writeString(struct.approvalUserName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetIsConfirm()) {
        oprot.writeI32(struct.isConfirm);
      }
      if (struct.isSetConfirmUserId()) {
        oprot.writeI32(struct.confirmUserId);
      }
      if (struct.isSetPids()) {
        oprot.writeString(struct.pids);
      }
      if (struct.isSetInterestChgId()) {
        oprot.writeI32(struct.interestChgId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectApprovalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.infoType = iprot.readI32();
        struct.setInfoTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.infoTypeText = iprot.readString();
        struct.setInfoTypeTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.infoContent = iprot.readString();
        struct.setInfoContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.approvalUserId = iprot.readI32();
        struct.setApprovalUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.approvalUserName = iprot.readString();
        struct.setApprovalUserNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isConfirm = iprot.readI32();
        struct.setIsConfirmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.confirmUserId = iprot.readI32();
        struct.setConfirmUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pids = iprot.readString();
        struct.setPidsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.interestChgId = iprot.readI32();
        struct.setInterestChgIdIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 财务对账余额转入收入 Bean
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class LoanRecIntoDTO implements org.apache.thrift.TBase<LoanRecIntoDTO, LoanRecIntoDTO._Fields>, java.io.Serializable, Cloneable, Comparable<LoanRecIntoDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanRecIntoDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTUAL_INTO_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualIntoAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField INTO_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("intoDt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RECEIVABLES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablesId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanRecIntoDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanRecIntoDTOTupleSchemeFactory());
  }

  public int pid; // required
  public double actualIntoAmt; // required
  public String intoDt; // required
  public String remark; // required
  public int loanId; // required
  public int status; // required
  public int userId; // required
  public int receivablesId; // required
  public int bankId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACTUAL_INTO_AMT((short)2, "actualIntoAmt"),
    INTO_DT((short)3, "intoDt"),
    REMARK((short)4, "remark"),
    LOAN_ID((short)5, "loanId"),
    STATUS((short)6, "status"),
    USER_ID((short)7, "userId"),
    RECEIVABLES_ID((short)8, "receivablesId"),
    BANK_ID((short)9, "bankId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACTUAL_INTO_AMT
          return ACTUAL_INTO_AMT;
        case 3: // INTO_DT
          return INTO_DT;
        case 4: // REMARK
          return REMARK;
        case 5: // LOAN_ID
          return LOAN_ID;
        case 6: // STATUS
          return STATUS;
        case 7: // USER_ID
          return USER_ID;
        case 8: // RECEIVABLES_ID
          return RECEIVABLES_ID;
        case 9: // BANK_ID
          return BANK_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACTUALINTOAMT_ISSET_ID = 1;
  private static final int __LOANID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __USERID_ISSET_ID = 4;
  private static final int __RECEIVABLESID_ISSET_ID = 5;
  private static final int __BANKID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_INTO_AMT, new org.apache.thrift.meta_data.FieldMetaData("actualIntoAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTO_DT, new org.apache.thrift.meta_data.FieldMetaData("intoDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVABLES_ID, new org.apache.thrift.meta_data.FieldMetaData("receivablesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanRecIntoDTO.class, metaDataMap);
  }

  public LoanRecIntoDTO() {
  }

  public LoanRecIntoDTO(
    int pid,
    double actualIntoAmt,
    String intoDt,
    String remark,
    int loanId,
    int status,
    int userId,
    int receivablesId,
    int bankId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.actualIntoAmt = actualIntoAmt;
    setActualIntoAmtIsSet(true);
    this.intoDt = intoDt;
    this.remark = remark;
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.receivablesId = receivablesId;
    setReceivablesIdIsSet(true);
    this.bankId = bankId;
    setBankIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanRecIntoDTO(LoanRecIntoDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.actualIntoAmt = other.actualIntoAmt;
    if (other.isSetIntoDt()) {
      this.intoDt = other.intoDt;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.loanId = other.loanId;
    this.status = other.status;
    this.userId = other.userId;
    this.receivablesId = other.receivablesId;
    this.bankId = other.bankId;
  }

  public LoanRecIntoDTO deepCopy() {
    return new LoanRecIntoDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setActualIntoAmtIsSet(false);
    this.actualIntoAmt = 0.0;
    this.intoDt = null;
    this.remark = null;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setReceivablesIdIsSet(false);
    this.receivablesId = 0;
    setBankIdIsSet(false);
    this.bankId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public LoanRecIntoDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getActualIntoAmt() {
    return this.actualIntoAmt;
  }

  public LoanRecIntoDTO setActualIntoAmt(double actualIntoAmt) {
    this.actualIntoAmt = actualIntoAmt;
    setActualIntoAmtIsSet(true);
    return this;
  }

  public void unsetActualIntoAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALINTOAMT_ISSET_ID);
  }

  /** Returns true if field actualIntoAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualIntoAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALINTOAMT_ISSET_ID);
  }

  public void setActualIntoAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALINTOAMT_ISSET_ID, value);
  }

  public String getIntoDt() {
    return this.intoDt;
  }

  public LoanRecIntoDTO setIntoDt(String intoDt) {
    this.intoDt = intoDt;
    return this;
  }

  public void unsetIntoDt() {
    this.intoDt = null;
  }

  /** Returns true if field intoDt is set (has been assigned a value) and false otherwise */
  public boolean isSetIntoDt() {
    return this.intoDt != null;
  }

  public void setIntoDtIsSet(boolean value) {
    if (!value) {
      this.intoDt = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public LoanRecIntoDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getLoanId() {
    return this.loanId;
  }

  public LoanRecIntoDTO setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public LoanRecIntoDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public LoanRecIntoDTO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getReceivablesId() {
    return this.receivablesId;
  }

  public LoanRecIntoDTO setReceivablesId(int receivablesId) {
    this.receivablesId = receivablesId;
    setReceivablesIdIsSet(true);
    return this;
  }

  public void unsetReceivablesId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID);
  }

  /** Returns true if field receivablesId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivablesId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID);
  }

  public void setReceivablesIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID, value);
  }

  public int getBankId() {
    return this.bankId;
  }

  public LoanRecIntoDTO setBankId(int bankId) {
    this.bankId = bankId;
    setBankIdIsSet(true);
    return this;
  }

  public void unsetBankId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKID_ISSET_ID);
  }

  /** Returns true if field bankId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankId() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKID_ISSET_ID);
  }

  public void setBankIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACTUAL_INTO_AMT:
      if (value == null) {
        unsetActualIntoAmt();
      } else {
        setActualIntoAmt((Double)value);
      }
      break;

    case INTO_DT:
      if (value == null) {
        unsetIntoDt();
      } else {
        setIntoDt((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case RECEIVABLES_ID:
      if (value == null) {
        unsetReceivablesId();
      } else {
        setReceivablesId((Integer)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankId();
      } else {
        setBankId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACTUAL_INTO_AMT:
      return Double.valueOf(getActualIntoAmt());

    case INTO_DT:
      return getIntoDt();

    case REMARK:
      return getRemark();

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case RECEIVABLES_ID:
      return Integer.valueOf(getReceivablesId());

    case BANK_ID:
      return Integer.valueOf(getBankId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACTUAL_INTO_AMT:
      return isSetActualIntoAmt();
    case INTO_DT:
      return isSetIntoDt();
    case REMARK:
      return isSetRemark();
    case LOAN_ID:
      return isSetLoanId();
    case STATUS:
      return isSetStatus();
    case USER_ID:
      return isSetUserId();
    case RECEIVABLES_ID:
      return isSetReceivablesId();
    case BANK_ID:
      return isSetBankId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanRecIntoDTO)
      return this.equals((LoanRecIntoDTO)that);
    return false;
  }

  public boolean equals(LoanRecIntoDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_actualIntoAmt = true;
    boolean that_present_actualIntoAmt = true;
    if (this_present_actualIntoAmt || that_present_actualIntoAmt) {
      if (!(this_present_actualIntoAmt && that_present_actualIntoAmt))
        return false;
      if (this.actualIntoAmt != that.actualIntoAmt)
        return false;
    }

    boolean this_present_intoDt = true && this.isSetIntoDt();
    boolean that_present_intoDt = true && that.isSetIntoDt();
    if (this_present_intoDt || that_present_intoDt) {
      if (!(this_present_intoDt && that_present_intoDt))
        return false;
      if (!this.intoDt.equals(that.intoDt))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_receivablesId = true;
    boolean that_present_receivablesId = true;
    if (this_present_receivablesId || that_present_receivablesId) {
      if (!(this_present_receivablesId && that_present_receivablesId))
        return false;
      if (this.receivablesId != that.receivablesId)
        return false;
    }

    boolean this_present_bankId = true;
    boolean that_present_bankId = true;
    if (this_present_bankId || that_present_bankId) {
      if (!(this_present_bankId && that_present_bankId))
        return false;
      if (this.bankId != that.bankId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_actualIntoAmt = true;
    list.add(present_actualIntoAmt);
    if (present_actualIntoAmt)
      list.add(actualIntoAmt);

    boolean present_intoDt = true && (isSetIntoDt());
    list.add(present_intoDt);
    if (present_intoDt)
      list.add(intoDt);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_receivablesId = true;
    list.add(present_receivablesId);
    if (present_receivablesId)
      list.add(receivablesId);

    boolean present_bankId = true;
    list.add(present_bankId);
    if (present_bankId)
      list.add(bankId);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanRecIntoDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualIntoAmt()).compareTo(other.isSetActualIntoAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualIntoAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualIntoAmt, other.actualIntoAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntoDt()).compareTo(other.isSetIntoDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntoDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intoDt, other.intoDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivablesId()).compareTo(other.isSetReceivablesId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivablesId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablesId, other.receivablesId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanRecIntoDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualIntoAmt:");
    sb.append(this.actualIntoAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intoDt:");
    if (this.intoDt == null) {
      sb.append("null");
    } else {
      sb.append(this.intoDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivablesId:");
    sb.append(this.receivablesId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankId:");
    sb.append(this.bankId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanRecIntoDTOStandardSchemeFactory implements SchemeFactory {
    public LoanRecIntoDTOStandardScheme getScheme() {
      return new LoanRecIntoDTOStandardScheme();
    }
  }

  private static class LoanRecIntoDTOStandardScheme extends StandardScheme<LoanRecIntoDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanRecIntoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTUAL_INTO_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualIntoAmt = iprot.readDouble();
              struct.setActualIntoAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTO_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intoDt = iprot.readString();
              struct.setIntoDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECEIVABLES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receivablesId = iprot.readI32();
              struct.setReceivablesIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankId = iprot.readI32();
              struct.setBankIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanRecIntoDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_INTO_AMT_FIELD_DESC);
      oprot.writeDouble(struct.actualIntoAmt);
      oprot.writeFieldEnd();
      if (struct.intoDt != null) {
        oprot.writeFieldBegin(INTO_DT_FIELD_DESC);
        oprot.writeString(struct.intoDt);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVABLES_ID_FIELD_DESC);
      oprot.writeI32(struct.receivablesId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
      oprot.writeI32(struct.bankId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanRecIntoDTOTupleSchemeFactory implements SchemeFactory {
    public LoanRecIntoDTOTupleScheme getScheme() {
      return new LoanRecIntoDTOTupleScheme();
    }
  }

  private static class LoanRecIntoDTOTupleScheme extends TupleScheme<LoanRecIntoDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanRecIntoDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetActualIntoAmt()) {
        optionals.set(1);
      }
      if (struct.isSetIntoDt()) {
        optionals.set(2);
      }
      if (struct.isSetRemark()) {
        optionals.set(3);
      }
      if (struct.isSetLoanId()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetUserId()) {
        optionals.set(6);
      }
      if (struct.isSetReceivablesId()) {
        optionals.set(7);
      }
      if (struct.isSetBankId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetActualIntoAmt()) {
        oprot.writeDouble(struct.actualIntoAmt);
      }
      if (struct.isSetIntoDt()) {
        oprot.writeString(struct.intoDt);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetReceivablesId()) {
        oprot.writeI32(struct.receivablesId);
      }
      if (struct.isSetBankId()) {
        oprot.writeI32(struct.bankId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanRecIntoDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.actualIntoAmt = iprot.readDouble();
        struct.setActualIntoAmtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.intoDt = iprot.readString();
        struct.setIntoDtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.receivablesId = iprot.readI32();
        struct.setReceivablesIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankId = iprot.readI32();
        struct.setBankIdIsSet(true);
      }
    }
  }

}


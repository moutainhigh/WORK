/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class BizProjectRegHistory implements org.apache.thrift.TBase<BizProjectRegHistory, BizProjectRegHistory._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectRegHistory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectRegHistory");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REGULATORY_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryPlanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTUAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actualUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTUAL_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualBeginDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REGUALATORY_SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatorySubject", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REGUALATORY_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryContent", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REGUALATORY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryResult", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField REGUALATORY_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryMsg", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REGUALATORY_MSG_OT1_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryMsgOt1", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REGUALATORY_MSG_OT2_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryMsgOt2", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ACTUAL_USER_ID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("actualUserIdString", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REGUALATORY_RESULT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryResultStr", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectRegHistoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectRegHistoryTupleSchemeFactory());
  }

  public int pid; // required
  public int regulatoryPlanId; // required
  public int actualUserId; // required
  public String actualBeginDt; // required
  public String regualatorySubject; // required
  public String regualatoryContent; // required
  public int regualatoryResult; // required
  public String regualatoryMsg; // required
  public String regualatoryMsgOt1; // required
  public String regualatoryMsgOt2; // required
  public String remark; // required
  public int status; // required
  public String actualUserIdString; // required
  public String regualatoryResultStr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    REGULATORY_PLAN_ID((short)2, "regulatoryPlanId"),
    ACTUAL_USER_ID((short)3, "actualUserId"),
    ACTUAL_BEGIN_DT((short)4, "actualBeginDt"),
    REGUALATORY_SUBJECT((short)5, "regualatorySubject"),
    REGUALATORY_CONTENT((short)6, "regualatoryContent"),
    REGUALATORY_RESULT((short)7, "regualatoryResult"),
    REGUALATORY_MSG((short)8, "regualatoryMsg"),
    REGUALATORY_MSG_OT1((short)9, "regualatoryMsgOt1"),
    REGUALATORY_MSG_OT2((short)10, "regualatoryMsgOt2"),
    REMARK((short)11, "remark"),
    STATUS((short)12, "status"),
    ACTUAL_USER_ID_STRING((short)13, "actualUserIdString"),
    REGUALATORY_RESULT_STR((short)14, "regualatoryResultStr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // REGULATORY_PLAN_ID
          return REGULATORY_PLAN_ID;
        case 3: // ACTUAL_USER_ID
          return ACTUAL_USER_ID;
        case 4: // ACTUAL_BEGIN_DT
          return ACTUAL_BEGIN_DT;
        case 5: // REGUALATORY_SUBJECT
          return REGUALATORY_SUBJECT;
        case 6: // REGUALATORY_CONTENT
          return REGUALATORY_CONTENT;
        case 7: // REGUALATORY_RESULT
          return REGUALATORY_RESULT;
        case 8: // REGUALATORY_MSG
          return REGUALATORY_MSG;
        case 9: // REGUALATORY_MSG_OT1
          return REGUALATORY_MSG_OT1;
        case 10: // REGUALATORY_MSG_OT2
          return REGUALATORY_MSG_OT2;
        case 11: // REMARK
          return REMARK;
        case 12: // STATUS
          return STATUS;
        case 13: // ACTUAL_USER_ID_STRING
          return ACTUAL_USER_ID_STRING;
        case 14: // REGUALATORY_RESULT_STR
          return REGUALATORY_RESULT_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REGULATORYPLANID_ISSET_ID = 1;
  private static final int __ACTUALUSERID_ISSET_ID = 2;
  private static final int __REGUALATORYRESULT_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGULATORY_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("regulatoryPlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("actualUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("actualBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("regualatorySubject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("regualatoryContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("regualatoryResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGUALATORY_MSG, new org.apache.thrift.meta_data.FieldMetaData("regualatoryMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_MSG_OT1, new org.apache.thrift.meta_data.FieldMetaData("regualatoryMsgOt1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_MSG_OT2, new org.apache.thrift.meta_data.FieldMetaData("regualatoryMsgOt2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_USER_ID_STRING, new org.apache.thrift.meta_data.FieldMetaData("actualUserIdString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_RESULT_STR, new org.apache.thrift.meta_data.FieldMetaData("regualatoryResultStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectRegHistory.class, metaDataMap);
  }

  public BizProjectRegHistory() {
  }

  public BizProjectRegHistory(
    int pid,
    int regulatoryPlanId,
    int actualUserId,
    String actualBeginDt,
    String regualatorySubject,
    String regualatoryContent,
    int regualatoryResult,
    String regualatoryMsg,
    String regualatoryMsgOt1,
    String regualatoryMsgOt2,
    String remark,
    int status,
    String actualUserIdString,
    String regualatoryResultStr)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.regulatoryPlanId = regulatoryPlanId;
    setRegulatoryPlanIdIsSet(true);
    this.actualUserId = actualUserId;
    setActualUserIdIsSet(true);
    this.actualBeginDt = actualBeginDt;
    this.regualatorySubject = regualatorySubject;
    this.regualatoryContent = regualatoryContent;
    this.regualatoryResult = regualatoryResult;
    setRegualatoryResultIsSet(true);
    this.regualatoryMsg = regualatoryMsg;
    this.regualatoryMsgOt1 = regualatoryMsgOt1;
    this.regualatoryMsgOt2 = regualatoryMsgOt2;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.actualUserIdString = actualUserIdString;
    this.regualatoryResultStr = regualatoryResultStr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectRegHistory(BizProjectRegHistory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.regulatoryPlanId = other.regulatoryPlanId;
    this.actualUserId = other.actualUserId;
    if (other.isSetActualBeginDt()) {
      this.actualBeginDt = other.actualBeginDt;
    }
    if (other.isSetRegualatorySubject()) {
      this.regualatorySubject = other.regualatorySubject;
    }
    if (other.isSetRegualatoryContent()) {
      this.regualatoryContent = other.regualatoryContent;
    }
    this.regualatoryResult = other.regualatoryResult;
    if (other.isSetRegualatoryMsg()) {
      this.regualatoryMsg = other.regualatoryMsg;
    }
    if (other.isSetRegualatoryMsgOt1()) {
      this.regualatoryMsgOt1 = other.regualatoryMsgOt1;
    }
    if (other.isSetRegualatoryMsgOt2()) {
      this.regualatoryMsgOt2 = other.regualatoryMsgOt2;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetActualUserIdString()) {
      this.actualUserIdString = other.actualUserIdString;
    }
    if (other.isSetRegualatoryResultStr()) {
      this.regualatoryResultStr = other.regualatoryResultStr;
    }
  }

  public BizProjectRegHistory deepCopy() {
    return new BizProjectRegHistory(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setRegulatoryPlanIdIsSet(false);
    this.regulatoryPlanId = 0;
    setActualUserIdIsSet(false);
    this.actualUserId = 0;
    this.actualBeginDt = null;
    this.regualatorySubject = null;
    this.regualatoryContent = null;
    setRegualatoryResultIsSet(false);
    this.regualatoryResult = 0;
    this.regualatoryMsg = null;
    this.regualatoryMsgOt1 = null;
    this.regualatoryMsgOt2 = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.actualUserIdString = null;
    this.regualatoryResultStr = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectRegHistory setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getRegulatoryPlanId() {
    return this.regulatoryPlanId;
  }

  public BizProjectRegHistory setRegulatoryPlanId(int regulatoryPlanId) {
    this.regulatoryPlanId = regulatoryPlanId;
    setRegulatoryPlanIdIsSet(true);
    return this;
  }

  public void unsetRegulatoryPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID);
  }

  /** Returns true if field regulatoryPlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID);
  }

  public void setRegulatoryPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID, value);
  }

  public int getActualUserId() {
    return this.actualUserId;
  }

  public BizProjectRegHistory setActualUserId(int actualUserId) {
    this.actualUserId = actualUserId;
    setActualUserIdIsSet(true);
    return this;
  }

  public void unsetActualUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALUSERID_ISSET_ID);
  }

  /** Returns true if field actualUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetActualUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALUSERID_ISSET_ID);
  }

  public void setActualUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALUSERID_ISSET_ID, value);
  }

  public String getActualBeginDt() {
    return this.actualBeginDt;
  }

  public BizProjectRegHistory setActualBeginDt(String actualBeginDt) {
    this.actualBeginDt = actualBeginDt;
    return this;
  }

  public void unsetActualBeginDt() {
    this.actualBeginDt = null;
  }

  /** Returns true if field actualBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualBeginDt() {
    return this.actualBeginDt != null;
  }

  public void setActualBeginDtIsSet(boolean value) {
    if (!value) {
      this.actualBeginDt = null;
    }
  }

  public String getRegualatorySubject() {
    return this.regualatorySubject;
  }

  public BizProjectRegHistory setRegualatorySubject(String regualatorySubject) {
    this.regualatorySubject = regualatorySubject;
    return this;
  }

  public void unsetRegualatorySubject() {
    this.regualatorySubject = null;
  }

  /** Returns true if field regualatorySubject is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatorySubject() {
    return this.regualatorySubject != null;
  }

  public void setRegualatorySubjectIsSet(boolean value) {
    if (!value) {
      this.regualatorySubject = null;
    }
  }

  public String getRegualatoryContent() {
    return this.regualatoryContent;
  }

  public BizProjectRegHistory setRegualatoryContent(String regualatoryContent) {
    this.regualatoryContent = regualatoryContent;
    return this;
  }

  public void unsetRegualatoryContent() {
    this.regualatoryContent = null;
  }

  /** Returns true if field regualatoryContent is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryContent() {
    return this.regualatoryContent != null;
  }

  public void setRegualatoryContentIsSet(boolean value) {
    if (!value) {
      this.regualatoryContent = null;
    }
  }

  public int getRegualatoryResult() {
    return this.regualatoryResult;
  }

  public BizProjectRegHistory setRegualatoryResult(int regualatoryResult) {
    this.regualatoryResult = regualatoryResult;
    setRegualatoryResultIsSet(true);
    return this;
  }

  public void unsetRegualatoryResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGUALATORYRESULT_ISSET_ID);
  }

  /** Returns true if field regualatoryResult is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryResult() {
    return EncodingUtils.testBit(__isset_bitfield, __REGUALATORYRESULT_ISSET_ID);
  }

  public void setRegualatoryResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGUALATORYRESULT_ISSET_ID, value);
  }

  public String getRegualatoryMsg() {
    return this.regualatoryMsg;
  }

  public BizProjectRegHistory setRegualatoryMsg(String regualatoryMsg) {
    this.regualatoryMsg = regualatoryMsg;
    return this;
  }

  public void unsetRegualatoryMsg() {
    this.regualatoryMsg = null;
  }

  /** Returns true if field regualatoryMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryMsg() {
    return this.regualatoryMsg != null;
  }

  public void setRegualatoryMsgIsSet(boolean value) {
    if (!value) {
      this.regualatoryMsg = null;
    }
  }

  public String getRegualatoryMsgOt1() {
    return this.regualatoryMsgOt1;
  }

  public BizProjectRegHistory setRegualatoryMsgOt1(String regualatoryMsgOt1) {
    this.regualatoryMsgOt1 = regualatoryMsgOt1;
    return this;
  }

  public void unsetRegualatoryMsgOt1() {
    this.regualatoryMsgOt1 = null;
  }

  /** Returns true if field regualatoryMsgOt1 is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryMsgOt1() {
    return this.regualatoryMsgOt1 != null;
  }

  public void setRegualatoryMsgOt1IsSet(boolean value) {
    if (!value) {
      this.regualatoryMsgOt1 = null;
    }
  }

  public String getRegualatoryMsgOt2() {
    return this.regualatoryMsgOt2;
  }

  public BizProjectRegHistory setRegualatoryMsgOt2(String regualatoryMsgOt2) {
    this.regualatoryMsgOt2 = regualatoryMsgOt2;
    return this;
  }

  public void unsetRegualatoryMsgOt2() {
    this.regualatoryMsgOt2 = null;
  }

  /** Returns true if field regualatoryMsgOt2 is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryMsgOt2() {
    return this.regualatoryMsgOt2 != null;
  }

  public void setRegualatoryMsgOt2IsSet(boolean value) {
    if (!value) {
      this.regualatoryMsgOt2 = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public BizProjectRegHistory setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProjectRegHistory setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getActualUserIdString() {
    return this.actualUserIdString;
  }

  public BizProjectRegHistory setActualUserIdString(String actualUserIdString) {
    this.actualUserIdString = actualUserIdString;
    return this;
  }

  public void unsetActualUserIdString() {
    this.actualUserIdString = null;
  }

  /** Returns true if field actualUserIdString is set (has been assigned a value) and false otherwise */
  public boolean isSetActualUserIdString() {
    return this.actualUserIdString != null;
  }

  public void setActualUserIdStringIsSet(boolean value) {
    if (!value) {
      this.actualUserIdString = null;
    }
  }

  public String getRegualatoryResultStr() {
    return this.regualatoryResultStr;
  }

  public BizProjectRegHistory setRegualatoryResultStr(String regualatoryResultStr) {
    this.regualatoryResultStr = regualatoryResultStr;
    return this;
  }

  public void unsetRegualatoryResultStr() {
    this.regualatoryResultStr = null;
  }

  /** Returns true if field regualatoryResultStr is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryResultStr() {
    return this.regualatoryResultStr != null;
  }

  public void setRegualatoryResultStrIsSet(boolean value) {
    if (!value) {
      this.regualatoryResultStr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REGULATORY_PLAN_ID:
      if (value == null) {
        unsetRegulatoryPlanId();
      } else {
        setRegulatoryPlanId((Integer)value);
      }
      break;

    case ACTUAL_USER_ID:
      if (value == null) {
        unsetActualUserId();
      } else {
        setActualUserId((Integer)value);
      }
      break;

    case ACTUAL_BEGIN_DT:
      if (value == null) {
        unsetActualBeginDt();
      } else {
        setActualBeginDt((String)value);
      }
      break;

    case REGUALATORY_SUBJECT:
      if (value == null) {
        unsetRegualatorySubject();
      } else {
        setRegualatorySubject((String)value);
      }
      break;

    case REGUALATORY_CONTENT:
      if (value == null) {
        unsetRegualatoryContent();
      } else {
        setRegualatoryContent((String)value);
      }
      break;

    case REGUALATORY_RESULT:
      if (value == null) {
        unsetRegualatoryResult();
      } else {
        setRegualatoryResult((Integer)value);
      }
      break;

    case REGUALATORY_MSG:
      if (value == null) {
        unsetRegualatoryMsg();
      } else {
        setRegualatoryMsg((String)value);
      }
      break;

    case REGUALATORY_MSG_OT1:
      if (value == null) {
        unsetRegualatoryMsgOt1();
      } else {
        setRegualatoryMsgOt1((String)value);
      }
      break;

    case REGUALATORY_MSG_OT2:
      if (value == null) {
        unsetRegualatoryMsgOt2();
      } else {
        setRegualatoryMsgOt2((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ACTUAL_USER_ID_STRING:
      if (value == null) {
        unsetActualUserIdString();
      } else {
        setActualUserIdString((String)value);
      }
      break;

    case REGUALATORY_RESULT_STR:
      if (value == null) {
        unsetRegualatoryResultStr();
      } else {
        setRegualatoryResultStr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case REGULATORY_PLAN_ID:
      return Integer.valueOf(getRegulatoryPlanId());

    case ACTUAL_USER_ID:
      return Integer.valueOf(getActualUserId());

    case ACTUAL_BEGIN_DT:
      return getActualBeginDt();

    case REGUALATORY_SUBJECT:
      return getRegualatorySubject();

    case REGUALATORY_CONTENT:
      return getRegualatoryContent();

    case REGUALATORY_RESULT:
      return Integer.valueOf(getRegualatoryResult());

    case REGUALATORY_MSG:
      return getRegualatoryMsg();

    case REGUALATORY_MSG_OT1:
      return getRegualatoryMsgOt1();

    case REGUALATORY_MSG_OT2:
      return getRegualatoryMsgOt2();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case ACTUAL_USER_ID_STRING:
      return getActualUserIdString();

    case REGUALATORY_RESULT_STR:
      return getRegualatoryResultStr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case REGULATORY_PLAN_ID:
      return isSetRegulatoryPlanId();
    case ACTUAL_USER_ID:
      return isSetActualUserId();
    case ACTUAL_BEGIN_DT:
      return isSetActualBeginDt();
    case REGUALATORY_SUBJECT:
      return isSetRegualatorySubject();
    case REGUALATORY_CONTENT:
      return isSetRegualatoryContent();
    case REGUALATORY_RESULT:
      return isSetRegualatoryResult();
    case REGUALATORY_MSG:
      return isSetRegualatoryMsg();
    case REGUALATORY_MSG_OT1:
      return isSetRegualatoryMsgOt1();
    case REGUALATORY_MSG_OT2:
      return isSetRegualatoryMsgOt2();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case ACTUAL_USER_ID_STRING:
      return isSetActualUserIdString();
    case REGUALATORY_RESULT_STR:
      return isSetRegualatoryResultStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectRegHistory)
      return this.equals((BizProjectRegHistory)that);
    return false;
  }

  public boolean equals(BizProjectRegHistory that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_regulatoryPlanId = true;
    boolean that_present_regulatoryPlanId = true;
    if (this_present_regulatoryPlanId || that_present_regulatoryPlanId) {
      if (!(this_present_regulatoryPlanId && that_present_regulatoryPlanId))
        return false;
      if (this.regulatoryPlanId != that.regulatoryPlanId)
        return false;
    }

    boolean this_present_actualUserId = true;
    boolean that_present_actualUserId = true;
    if (this_present_actualUserId || that_present_actualUserId) {
      if (!(this_present_actualUserId && that_present_actualUserId))
        return false;
      if (this.actualUserId != that.actualUserId)
        return false;
    }

    boolean this_present_actualBeginDt = true && this.isSetActualBeginDt();
    boolean that_present_actualBeginDt = true && that.isSetActualBeginDt();
    if (this_present_actualBeginDt || that_present_actualBeginDt) {
      if (!(this_present_actualBeginDt && that_present_actualBeginDt))
        return false;
      if (!this.actualBeginDt.equals(that.actualBeginDt))
        return false;
    }

    boolean this_present_regualatorySubject = true && this.isSetRegualatorySubject();
    boolean that_present_regualatorySubject = true && that.isSetRegualatorySubject();
    if (this_present_regualatorySubject || that_present_regualatorySubject) {
      if (!(this_present_regualatorySubject && that_present_regualatorySubject))
        return false;
      if (!this.regualatorySubject.equals(that.regualatorySubject))
        return false;
    }

    boolean this_present_regualatoryContent = true && this.isSetRegualatoryContent();
    boolean that_present_regualatoryContent = true && that.isSetRegualatoryContent();
    if (this_present_regualatoryContent || that_present_regualatoryContent) {
      if (!(this_present_regualatoryContent && that_present_regualatoryContent))
        return false;
      if (!this.regualatoryContent.equals(that.regualatoryContent))
        return false;
    }

    boolean this_present_regualatoryResult = true;
    boolean that_present_regualatoryResult = true;
    if (this_present_regualatoryResult || that_present_regualatoryResult) {
      if (!(this_present_regualatoryResult && that_present_regualatoryResult))
        return false;
      if (this.regualatoryResult != that.regualatoryResult)
        return false;
    }

    boolean this_present_regualatoryMsg = true && this.isSetRegualatoryMsg();
    boolean that_present_regualatoryMsg = true && that.isSetRegualatoryMsg();
    if (this_present_regualatoryMsg || that_present_regualatoryMsg) {
      if (!(this_present_regualatoryMsg && that_present_regualatoryMsg))
        return false;
      if (!this.regualatoryMsg.equals(that.regualatoryMsg))
        return false;
    }

    boolean this_present_regualatoryMsgOt1 = true && this.isSetRegualatoryMsgOt1();
    boolean that_present_regualatoryMsgOt1 = true && that.isSetRegualatoryMsgOt1();
    if (this_present_regualatoryMsgOt1 || that_present_regualatoryMsgOt1) {
      if (!(this_present_regualatoryMsgOt1 && that_present_regualatoryMsgOt1))
        return false;
      if (!this.regualatoryMsgOt1.equals(that.regualatoryMsgOt1))
        return false;
    }

    boolean this_present_regualatoryMsgOt2 = true && this.isSetRegualatoryMsgOt2();
    boolean that_present_regualatoryMsgOt2 = true && that.isSetRegualatoryMsgOt2();
    if (this_present_regualatoryMsgOt2 || that_present_regualatoryMsgOt2) {
      if (!(this_present_regualatoryMsgOt2 && that_present_regualatoryMsgOt2))
        return false;
      if (!this.regualatoryMsgOt2.equals(that.regualatoryMsgOt2))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_actualUserIdString = true && this.isSetActualUserIdString();
    boolean that_present_actualUserIdString = true && that.isSetActualUserIdString();
    if (this_present_actualUserIdString || that_present_actualUserIdString) {
      if (!(this_present_actualUserIdString && that_present_actualUserIdString))
        return false;
      if (!this.actualUserIdString.equals(that.actualUserIdString))
        return false;
    }

    boolean this_present_regualatoryResultStr = true && this.isSetRegualatoryResultStr();
    boolean that_present_regualatoryResultStr = true && that.isSetRegualatoryResultStr();
    if (this_present_regualatoryResultStr || that_present_regualatoryResultStr) {
      if (!(this_present_regualatoryResultStr && that_present_regualatoryResultStr))
        return false;
      if (!this.regualatoryResultStr.equals(that.regualatoryResultStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_regulatoryPlanId = true;
    list.add(present_regulatoryPlanId);
    if (present_regulatoryPlanId)
      list.add(regulatoryPlanId);

    boolean present_actualUserId = true;
    list.add(present_actualUserId);
    if (present_actualUserId)
      list.add(actualUserId);

    boolean present_actualBeginDt = true && (isSetActualBeginDt());
    list.add(present_actualBeginDt);
    if (present_actualBeginDt)
      list.add(actualBeginDt);

    boolean present_regualatorySubject = true && (isSetRegualatorySubject());
    list.add(present_regualatorySubject);
    if (present_regualatorySubject)
      list.add(regualatorySubject);

    boolean present_regualatoryContent = true && (isSetRegualatoryContent());
    list.add(present_regualatoryContent);
    if (present_regualatoryContent)
      list.add(regualatoryContent);

    boolean present_regualatoryResult = true;
    list.add(present_regualatoryResult);
    if (present_regualatoryResult)
      list.add(regualatoryResult);

    boolean present_regualatoryMsg = true && (isSetRegualatoryMsg());
    list.add(present_regualatoryMsg);
    if (present_regualatoryMsg)
      list.add(regualatoryMsg);

    boolean present_regualatoryMsgOt1 = true && (isSetRegualatoryMsgOt1());
    list.add(present_regualatoryMsgOt1);
    if (present_regualatoryMsgOt1)
      list.add(regualatoryMsgOt1);

    boolean present_regualatoryMsgOt2 = true && (isSetRegualatoryMsgOt2());
    list.add(present_regualatoryMsgOt2);
    if (present_regualatoryMsgOt2)
      list.add(regualatoryMsgOt2);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_actualUserIdString = true && (isSetActualUserIdString());
    list.add(present_actualUserIdString);
    if (present_actualUserIdString)
      list.add(actualUserIdString);

    boolean present_regualatoryResultStr = true && (isSetRegualatoryResultStr());
    list.add(present_regualatoryResultStr);
    if (present_regualatoryResultStr)
      list.add(regualatoryResultStr);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectRegHistory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryPlanId()).compareTo(other.isSetRegulatoryPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryPlanId, other.regulatoryPlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualUserId()).compareTo(other.isSetActualUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualUserId, other.actualUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualBeginDt()).compareTo(other.isSetActualBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualBeginDt, other.actualBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatorySubject()).compareTo(other.isSetRegualatorySubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatorySubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatorySubject, other.regualatorySubject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryContent()).compareTo(other.isSetRegualatoryContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryContent, other.regualatoryContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryResult()).compareTo(other.isSetRegualatoryResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryResult, other.regualatoryResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryMsg()).compareTo(other.isSetRegualatoryMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryMsg, other.regualatoryMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryMsgOt1()).compareTo(other.isSetRegualatoryMsgOt1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryMsgOt1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryMsgOt1, other.regualatoryMsgOt1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryMsgOt2()).compareTo(other.isSetRegualatoryMsgOt2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryMsgOt2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryMsgOt2, other.regualatoryMsgOt2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualUserIdString()).compareTo(other.isSetActualUserIdString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualUserIdString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualUserIdString, other.actualUserIdString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryResultStr()).compareTo(other.isSetRegualatoryResultStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryResultStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryResultStr, other.regualatoryResultStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectRegHistory(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryPlanId:");
    sb.append(this.regulatoryPlanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualUserId:");
    sb.append(this.actualUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualBeginDt:");
    if (this.actualBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.actualBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatorySubject:");
    if (this.regualatorySubject == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatorySubject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryContent:");
    if (this.regualatoryContent == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryResult:");
    sb.append(this.regualatoryResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryMsg:");
    if (this.regualatoryMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryMsgOt1:");
    if (this.regualatoryMsgOt1 == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryMsgOt1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryMsgOt2:");
    if (this.regualatoryMsgOt2 == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryMsgOt2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualUserIdString:");
    if (this.actualUserIdString == null) {
      sb.append("null");
    } else {
      sb.append(this.actualUserIdString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryResultStr:");
    if (this.regualatoryResultStr == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryResultStr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectRegHistoryStandardSchemeFactory implements SchemeFactory {
    public BizProjectRegHistoryStandardScheme getScheme() {
      return new BizProjectRegHistoryStandardScheme();
    }
  }

  private static class BizProjectRegHistoryStandardScheme extends StandardScheme<BizProjectRegHistory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectRegHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGULATORY_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regulatoryPlanId = iprot.readI32();
              struct.setRegulatoryPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTUAL_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actualUserId = iprot.readI32();
              struct.setActualUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTUAL_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualBeginDt = iprot.readString();
              struct.setActualBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGUALATORY_SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatorySubject = iprot.readString();
              struct.setRegualatorySubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGUALATORY_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryContent = iprot.readString();
              struct.setRegualatoryContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REGUALATORY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regualatoryResult = iprot.readI32();
              struct.setRegualatoryResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REGUALATORY_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryMsg = iprot.readString();
              struct.setRegualatoryMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REGUALATORY_MSG_OT1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryMsgOt1 = iprot.readString();
              struct.setRegualatoryMsgOt1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REGUALATORY_MSG_OT2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryMsgOt2 = iprot.readString();
              struct.setRegualatoryMsgOt2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTUAL_USER_ID_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualUserIdString = iprot.readString();
              struct.setActualUserIdStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REGUALATORY_RESULT_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryResultStr = iprot.readString();
              struct.setRegualatoryResultStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectRegHistory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGULATORY_PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.regulatoryPlanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.actualUserId);
      oprot.writeFieldEnd();
      if (struct.actualBeginDt != null) {
        oprot.writeFieldBegin(ACTUAL_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.actualBeginDt);
        oprot.writeFieldEnd();
      }
      if (struct.regualatorySubject != null) {
        oprot.writeFieldBegin(REGUALATORY_SUBJECT_FIELD_DESC);
        oprot.writeString(struct.regualatorySubject);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryContent != null) {
        oprot.writeFieldBegin(REGUALATORY_CONTENT_FIELD_DESC);
        oprot.writeString(struct.regualatoryContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGUALATORY_RESULT_FIELD_DESC);
      oprot.writeI32(struct.regualatoryResult);
      oprot.writeFieldEnd();
      if (struct.regualatoryMsg != null) {
        oprot.writeFieldBegin(REGUALATORY_MSG_FIELD_DESC);
        oprot.writeString(struct.regualatoryMsg);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryMsgOt1 != null) {
        oprot.writeFieldBegin(REGUALATORY_MSG_OT1_FIELD_DESC);
        oprot.writeString(struct.regualatoryMsgOt1);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryMsgOt2 != null) {
        oprot.writeFieldBegin(REGUALATORY_MSG_OT2_FIELD_DESC);
        oprot.writeString(struct.regualatoryMsgOt2);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.actualUserIdString != null) {
        oprot.writeFieldBegin(ACTUAL_USER_ID_STRING_FIELD_DESC);
        oprot.writeString(struct.actualUserIdString);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryResultStr != null) {
        oprot.writeFieldBegin(REGUALATORY_RESULT_STR_FIELD_DESC);
        oprot.writeString(struct.regualatoryResultStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectRegHistoryTupleSchemeFactory implements SchemeFactory {
    public BizProjectRegHistoryTupleScheme getScheme() {
      return new BizProjectRegHistoryTupleScheme();
    }
  }

  private static class BizProjectRegHistoryTupleScheme extends TupleScheme<BizProjectRegHistory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectRegHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetRegulatoryPlanId()) {
        optionals.set(1);
      }
      if (struct.isSetActualUserId()) {
        optionals.set(2);
      }
      if (struct.isSetActualBeginDt()) {
        optionals.set(3);
      }
      if (struct.isSetRegualatorySubject()) {
        optionals.set(4);
      }
      if (struct.isSetRegualatoryContent()) {
        optionals.set(5);
      }
      if (struct.isSetRegualatoryResult()) {
        optionals.set(6);
      }
      if (struct.isSetRegualatoryMsg()) {
        optionals.set(7);
      }
      if (struct.isSetRegualatoryMsgOt1()) {
        optionals.set(8);
      }
      if (struct.isSetRegualatoryMsgOt2()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetActualUserIdString()) {
        optionals.set(12);
      }
      if (struct.isSetRegualatoryResultStr()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetRegulatoryPlanId()) {
        oprot.writeI32(struct.regulatoryPlanId);
      }
      if (struct.isSetActualUserId()) {
        oprot.writeI32(struct.actualUserId);
      }
      if (struct.isSetActualBeginDt()) {
        oprot.writeString(struct.actualBeginDt);
      }
      if (struct.isSetRegualatorySubject()) {
        oprot.writeString(struct.regualatorySubject);
      }
      if (struct.isSetRegualatoryContent()) {
        oprot.writeString(struct.regualatoryContent);
      }
      if (struct.isSetRegualatoryResult()) {
        oprot.writeI32(struct.regualatoryResult);
      }
      if (struct.isSetRegualatoryMsg()) {
        oprot.writeString(struct.regualatoryMsg);
      }
      if (struct.isSetRegualatoryMsgOt1()) {
        oprot.writeString(struct.regualatoryMsgOt1);
      }
      if (struct.isSetRegualatoryMsgOt2()) {
        oprot.writeString(struct.regualatoryMsgOt2);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetActualUserIdString()) {
        oprot.writeString(struct.actualUserIdString);
      }
      if (struct.isSetRegualatoryResultStr()) {
        oprot.writeString(struct.regualatoryResultStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectRegHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.regulatoryPlanId = iprot.readI32();
        struct.setRegulatoryPlanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.actualUserId = iprot.readI32();
        struct.setActualUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actualBeginDt = iprot.readString();
        struct.setActualBeginDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.regualatorySubject = iprot.readString();
        struct.setRegualatorySubjectIsSet(true);
      }
      if (incoming.get(5)) {
        struct.regualatoryContent = iprot.readString();
        struct.setRegualatoryContentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.regualatoryResult = iprot.readI32();
        struct.setRegualatoryResultIsSet(true);
      }
      if (incoming.get(7)) {
        struct.regualatoryMsg = iprot.readString();
        struct.setRegualatoryMsgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.regualatoryMsgOt1 = iprot.readString();
        struct.setRegualatoryMsgOt1IsSet(true);
      }
      if (incoming.get(9)) {
        struct.regualatoryMsgOt2 = iprot.readString();
        struct.setRegualatoryMsgOt2IsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.actualUserIdString = iprot.readString();
        struct.setActualUserIdStringIsSet(true);
      }
      if (incoming.get(13)) {
        struct.regualatoryResultStr = iprot.readString();
        struct.setRegualatoryResultStrIsSet(true);
      }
    }
  }

}


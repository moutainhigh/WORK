/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class CheckDocumentIndexDTO implements org.apache.thrift.TBase<CheckDocumentIndexDTO, CheckDocumentIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CheckDocumentIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckDocumentIndexDTO");

  private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatus", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CHECK_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attachmentId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REC_FEE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("recFeeStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField COLLECT_FILE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFileDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField COLLECT_FILE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFileRemark", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COLLECT_FILE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFileStatus", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationStatus", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationApprovalStatus", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField PROJECT_FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectForeclosureStatus", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField PERFORM_JOB_REMARK_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("performJobRemarkDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PERFORM_JOB_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("performJobRemark", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PERFORM_JOB_REMARK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("performJobRemarkStatus", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField RE_CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reCheckStatus", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField RE_CHECK_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("reCheckRemark", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField REFUND_FILE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFileStatus", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDays", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField LOAN_REPAYMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRepaymentStatus", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatusStr", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)45);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CheckDocumentIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CheckDocumentIndexDTOTupleSchemeFactory());
  }

  public int checkDocumentId; // required
  public int projectId; // required
  public int checkStatus; // required
  public int approvalStatus; // required
  public String checkDate; // required
  public String remark; // required
  public int attachmentId; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String projectNumber; // required
  public String projectName; // required
  public int recFeeStatus; // required
  public String createrDate; // required
  public String collectFileDate; // required
  public String collectFileRemark; // required
  public int collectFileStatus; // required
  public int checkLitigationId; // required
  public int checkLitigationStatus; // required
  public int checkLitigationApprovalStatus; // required
  public int projectForeclosureStatus; // required
  public String performJobRemarkDate; // required
  public String performJobRemark; // required
  public int performJobRemarkStatus; // required
  public int reCheckStatus; // required
  public String reCheckRemark; // required
  public int refundFileStatus; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public int isChechan; // required
  public String housePropertyCard; // required
  public double loanMoney; // required
  public int loanDays; // required
  public int loanRepaymentStatus; // required
  public String checkStatusStr; // required
  public String pmUserName; // required
  public int pmUserId; // required
  public int projectSource; // required
  public int productId; // required
  public String productName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHECK_DOCUMENT_ID((short)1, "checkDocumentId"),
    PROJECT_ID((short)3, "projectId"),
    CHECK_STATUS((short)4, "checkStatus"),
    APPROVAL_STATUS((short)5, "approvalStatus"),
    CHECK_DATE((short)6, "checkDate"),
    REMARK((short)7, "remark"),
    ATTACHMENT_ID((short)8, "attachmentId"),
    CREATER_ID((short)9, "createrId"),
    UPDATE_ID((short)10, "updateId"),
    UPDATE_DATE((short)11, "updateDate"),
    PAGE((short)12, "page"),
    ROWS((short)13, "rows"),
    USER_IDS((short)14, "userIds"),
    PROJECT_NUMBER((short)15, "projectNumber"),
    PROJECT_NAME((short)16, "projectName"),
    REC_FEE_STATUS((short)17, "recFeeStatus"),
    CREATER_DATE((short)18, "createrDate"),
    COLLECT_FILE_DATE((short)19, "collectFileDate"),
    COLLECT_FILE_REMARK((short)20, "collectFileRemark"),
    COLLECT_FILE_STATUS((short)21, "collectFileStatus"),
    CHECK_LITIGATION_ID((short)22, "checkLitigationId"),
    CHECK_LITIGATION_STATUS((short)23, "checkLitigationStatus"),
    CHECK_LITIGATION_APPROVAL_STATUS((short)24, "checkLitigationApprovalStatus"),
    PROJECT_FORECLOSURE_STATUS((short)25, "projectForeclosureStatus"),
    PERFORM_JOB_REMARK_DATE((short)26, "performJobRemarkDate"),
    PERFORM_JOB_REMARK((short)27, "performJobRemark"),
    PERFORM_JOB_REMARK_STATUS((short)28, "performJobRemarkStatus"),
    RE_CHECK_STATUS((short)29, "reCheckStatus"),
    RE_CHECK_REMARK((short)30, "reCheckRemark"),
    REFUND_FILE_STATUS((short)31, "refundFileStatus"),
    HOUSE_NAME((short)32, "houseName"),
    BUYER_NAME((short)33, "buyerName"),
    SELLER_NAME((short)34, "sellerName"),
    IS_CHECHAN((short)35, "isChechan"),
    HOUSE_PROPERTY_CARD((short)36, "housePropertyCard"),
    LOAN_MONEY((short)37, "loanMoney"),
    LOAN_DAYS((short)38, "loanDays"),
    LOAN_REPAYMENT_STATUS((short)39, "loanRepaymentStatus"),
    CHECK_STATUS_STR((short)40, "checkStatusStr"),
    PM_USER_NAME((short)41, "pmUserName"),
    PM_USER_ID((short)42, "pmUserId"),
    PROJECT_SOURCE((short)43, "projectSource"),
    PRODUCT_ID((short)44, "productId"),
    PRODUCT_NAME((short)45, "productName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHECK_DOCUMENT_ID
          return CHECK_DOCUMENT_ID;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // CHECK_STATUS
          return CHECK_STATUS;
        case 5: // APPROVAL_STATUS
          return APPROVAL_STATUS;
        case 6: // CHECK_DATE
          return CHECK_DATE;
        case 7: // REMARK
          return REMARK;
        case 8: // ATTACHMENT_ID
          return ATTACHMENT_ID;
        case 9: // CREATER_ID
          return CREATER_ID;
        case 10: // UPDATE_ID
          return UPDATE_ID;
        case 11: // UPDATE_DATE
          return UPDATE_DATE;
        case 12: // PAGE
          return PAGE;
        case 13: // ROWS
          return ROWS;
        case 14: // USER_IDS
          return USER_IDS;
        case 15: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 16: // PROJECT_NAME
          return PROJECT_NAME;
        case 17: // REC_FEE_STATUS
          return REC_FEE_STATUS;
        case 18: // CREATER_DATE
          return CREATER_DATE;
        case 19: // COLLECT_FILE_DATE
          return COLLECT_FILE_DATE;
        case 20: // COLLECT_FILE_REMARK
          return COLLECT_FILE_REMARK;
        case 21: // COLLECT_FILE_STATUS
          return COLLECT_FILE_STATUS;
        case 22: // CHECK_LITIGATION_ID
          return CHECK_LITIGATION_ID;
        case 23: // CHECK_LITIGATION_STATUS
          return CHECK_LITIGATION_STATUS;
        case 24: // CHECK_LITIGATION_APPROVAL_STATUS
          return CHECK_LITIGATION_APPROVAL_STATUS;
        case 25: // PROJECT_FORECLOSURE_STATUS
          return PROJECT_FORECLOSURE_STATUS;
        case 26: // PERFORM_JOB_REMARK_DATE
          return PERFORM_JOB_REMARK_DATE;
        case 27: // PERFORM_JOB_REMARK
          return PERFORM_JOB_REMARK;
        case 28: // PERFORM_JOB_REMARK_STATUS
          return PERFORM_JOB_REMARK_STATUS;
        case 29: // RE_CHECK_STATUS
          return RE_CHECK_STATUS;
        case 30: // RE_CHECK_REMARK
          return RE_CHECK_REMARK;
        case 31: // REFUND_FILE_STATUS
          return REFUND_FILE_STATUS;
        case 32: // HOUSE_NAME
          return HOUSE_NAME;
        case 33: // BUYER_NAME
          return BUYER_NAME;
        case 34: // SELLER_NAME
          return SELLER_NAME;
        case 35: // IS_CHECHAN
          return IS_CHECHAN;
        case 36: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 37: // LOAN_MONEY
          return LOAN_MONEY;
        case 38: // LOAN_DAYS
          return LOAN_DAYS;
        case 39: // LOAN_REPAYMENT_STATUS
          return LOAN_REPAYMENT_STATUS;
        case 40: // CHECK_STATUS_STR
          return CHECK_STATUS_STR;
        case 41: // PM_USER_NAME
          return PM_USER_NAME;
        case 42: // PM_USER_ID
          return PM_USER_ID;
        case 43: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 44: // PRODUCT_ID
          return PRODUCT_ID;
        case 45: // PRODUCT_NAME
          return PRODUCT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHECKDOCUMENTID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __CHECKSTATUS_ISSET_ID = 2;
  private static final int __APPROVALSTATUS_ISSET_ID = 3;
  private static final int __ATTACHMENTID_ISSET_ID = 4;
  private static final int __CREATERID_ISSET_ID = 5;
  private static final int __UPDATEID_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __RECFEESTATUS_ISSET_ID = 9;
  private static final int __COLLECTFILESTATUS_ISSET_ID = 10;
  private static final int __CHECKLITIGATIONID_ISSET_ID = 11;
  private static final int __CHECKLITIGATIONSTATUS_ISSET_ID = 12;
  private static final int __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID = 13;
  private static final int __PROJECTFORECLOSURESTATUS_ISSET_ID = 14;
  private static final int __PERFORMJOBREMARKSTATUS_ISSET_ID = 15;
  private static final int __RECHECKSTATUS_ISSET_ID = 16;
  private static final int __REFUNDFILESTATUS_ISSET_ID = 17;
  private static final int __ISCHECHAN_ISSET_ID = 18;
  private static final int __LOANMONEY_ISSET_ID = 19;
  private static final int __LOANDAYS_ISSET_ID = 20;
  private static final int __LOANREPAYMENTSTATUS_ISSET_ID = 21;
  private static final int __PMUSERID_ISSET_ID = 22;
  private static final int __PROJECTSOURCE_ISSET_ID = 23;
  private static final int __PRODUCTID_ISSET_ID = 24;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHECK_DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("approvalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_DATE, new org.apache.thrift.meta_data.FieldMetaData("checkDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("attachmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_FEE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("recFeeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECT_FILE_DATE, new org.apache.thrift.meta_data.FieldMetaData("collectFileDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECT_FILE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("collectFileRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECT_FILE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("collectFileStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_LITIGATION_ID, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_LITIGATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_LITIGATION_APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationApprovalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("projectForeclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERFORM_JOB_REMARK_DATE, new org.apache.thrift.meta_data.FieldMetaData("performJobRemarkDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERFORM_JOB_REMARK, new org.apache.thrift.meta_data.FieldMetaData("performJobRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERFORM_JOB_REMARK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("performJobRemarkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reCheckStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_CHECK_REMARK, new org.apache.thrift.meta_data.FieldMetaData("reCheckRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_FILE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("refundFileStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("loanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_REPAYMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("loanRepaymentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_STATUS_STR, new org.apache.thrift.meta_data.FieldMetaData("checkStatusStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckDocumentIndexDTO.class, metaDataMap);
  }

  public CheckDocumentIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public CheckDocumentIndexDTO(
    int checkDocumentId,
    int projectId,
    int checkStatus,
    int approvalStatus,
    String checkDate,
    String remark,
    int attachmentId,
    int createrId,
    int updateId,
    String updateDate,
    int page,
    int rows,
    List<Integer> userIds,
    String projectNumber,
    String projectName,
    int recFeeStatus,
    String createrDate,
    String collectFileDate,
    String collectFileRemark,
    int collectFileStatus,
    int checkLitigationId,
    int checkLitigationStatus,
    int checkLitigationApprovalStatus,
    int projectForeclosureStatus,
    String performJobRemarkDate,
    String performJobRemark,
    int performJobRemarkStatus,
    int reCheckStatus,
    String reCheckRemark,
    int refundFileStatus,
    String houseName,
    String buyerName,
    String sellerName,
    int isChechan,
    String housePropertyCard,
    double loanMoney,
    int loanDays,
    int loanRepaymentStatus,
    String checkStatusStr,
    String pmUserName,
    int pmUserId,
    int projectSource,
    int productId,
    String productName)
  {
    this();
    this.checkDocumentId = checkDocumentId;
    setCheckDocumentIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    this.checkDate = checkDate;
    this.remark = remark;
    this.attachmentId = attachmentId;
    setAttachmentIdIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    this.createrDate = createrDate;
    this.collectFileDate = collectFileDate;
    this.collectFileRemark = collectFileRemark;
    this.collectFileStatus = collectFileStatus;
    setCollectFileStatusIsSet(true);
    this.checkLitigationId = checkLitigationId;
    setCheckLitigationIdIsSet(true);
    this.checkLitigationStatus = checkLitigationStatus;
    setCheckLitigationStatusIsSet(true);
    this.checkLitigationApprovalStatus = checkLitigationApprovalStatus;
    setCheckLitigationApprovalStatusIsSet(true);
    this.projectForeclosureStatus = projectForeclosureStatus;
    setProjectForeclosureStatusIsSet(true);
    this.performJobRemarkDate = performJobRemarkDate;
    this.performJobRemark = performJobRemark;
    this.performJobRemarkStatus = performJobRemarkStatus;
    setPerformJobRemarkStatusIsSet(true);
    this.reCheckStatus = reCheckStatus;
    setReCheckStatusIsSet(true);
    this.reCheckRemark = reCheckRemark;
    this.refundFileStatus = refundFileStatus;
    setRefundFileStatusIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.housePropertyCard = housePropertyCard;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    this.loanRepaymentStatus = loanRepaymentStatus;
    setLoanRepaymentStatusIsSet(true);
    this.checkStatusStr = checkStatusStr;
    this.pmUserName = pmUserName;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.productName = productName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CheckDocumentIndexDTO(CheckDocumentIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.checkDocumentId = other.checkDocumentId;
    this.projectId = other.projectId;
    this.checkStatus = other.checkStatus;
    this.approvalStatus = other.approvalStatus;
    if (other.isSetCheckDate()) {
      this.checkDate = other.checkDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.attachmentId = other.attachmentId;
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.recFeeStatus = other.recFeeStatus;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    if (other.isSetCollectFileDate()) {
      this.collectFileDate = other.collectFileDate;
    }
    if (other.isSetCollectFileRemark()) {
      this.collectFileRemark = other.collectFileRemark;
    }
    this.collectFileStatus = other.collectFileStatus;
    this.checkLitigationId = other.checkLitigationId;
    this.checkLitigationStatus = other.checkLitigationStatus;
    this.checkLitigationApprovalStatus = other.checkLitigationApprovalStatus;
    this.projectForeclosureStatus = other.projectForeclosureStatus;
    if (other.isSetPerformJobRemarkDate()) {
      this.performJobRemarkDate = other.performJobRemarkDate;
    }
    if (other.isSetPerformJobRemark()) {
      this.performJobRemark = other.performJobRemark;
    }
    this.performJobRemarkStatus = other.performJobRemarkStatus;
    this.reCheckStatus = other.reCheckStatus;
    if (other.isSetReCheckRemark()) {
      this.reCheckRemark = other.reCheckRemark;
    }
    this.refundFileStatus = other.refundFileStatus;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.isChechan = other.isChechan;
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    this.loanMoney = other.loanMoney;
    this.loanDays = other.loanDays;
    this.loanRepaymentStatus = other.loanRepaymentStatus;
    if (other.isSetCheckStatusStr()) {
      this.checkStatusStr = other.checkStatusStr;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    this.pmUserId = other.pmUserId;
    this.projectSource = other.projectSource;
    this.productId = other.productId;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
  }

  public CheckDocumentIndexDTO deepCopy() {
    return new CheckDocumentIndexDTO(this);
  }

  @Override
  public void clear() {
    setCheckDocumentIdIsSet(false);
    this.checkDocumentId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setCheckStatusIsSet(false);
    this.checkStatus = 0;
    setApprovalStatusIsSet(false);
    this.approvalStatus = 0;
    this.checkDate = null;
    this.remark = null;
    setAttachmentIdIsSet(false);
    this.attachmentId = 0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.projectNumber = null;
    this.projectName = null;
    setRecFeeStatusIsSet(false);
    this.recFeeStatus = 0;
    this.createrDate = null;
    this.collectFileDate = null;
    this.collectFileRemark = null;
    setCollectFileStatusIsSet(false);
    this.collectFileStatus = 0;
    setCheckLitigationIdIsSet(false);
    this.checkLitigationId = 0;
    setCheckLitigationStatusIsSet(false);
    this.checkLitigationStatus = 0;
    setCheckLitigationApprovalStatusIsSet(false);
    this.checkLitigationApprovalStatus = 0;
    setProjectForeclosureStatusIsSet(false);
    this.projectForeclosureStatus = 0;
    this.performJobRemarkDate = null;
    this.performJobRemark = null;
    setPerformJobRemarkStatusIsSet(false);
    this.performJobRemarkStatus = 0;
    setReCheckStatusIsSet(false);
    this.reCheckStatus = 0;
    this.reCheckRemark = null;
    setRefundFileStatusIsSet(false);
    this.refundFileStatus = 0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    this.housePropertyCard = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setLoanDaysIsSet(false);
    this.loanDays = 0;
    setLoanRepaymentStatusIsSet(false);
    this.loanRepaymentStatus = 0;
    this.checkStatusStr = null;
    this.pmUserName = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.productName = null;
  }

  public int getCheckDocumentId() {
    return this.checkDocumentId;
  }

  public CheckDocumentIndexDTO setCheckDocumentId(int checkDocumentId) {
    this.checkDocumentId = checkDocumentId;
    setCheckDocumentIdIsSet(true);
    return this;
  }

  public void unsetCheckDocumentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKDOCUMENTID_ISSET_ID);
  }

  /** Returns true if field checkDocumentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDocumentId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKDOCUMENTID_ISSET_ID);
  }

  public void setCheckDocumentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKDOCUMENTID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CheckDocumentIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getCheckStatus() {
    return this.checkStatus;
  }

  public CheckDocumentIndexDTO setCheckStatus(int checkStatus) {
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    return this;
  }

  public void unsetCheckStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  /** Returns true if field checkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  public void setCheckStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID, value);
  }

  public int getApprovalStatus() {
    return this.approvalStatus;
  }

  public CheckDocumentIndexDTO setApprovalStatus(int approvalStatus) {
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    return this;
  }

  public void unsetApprovalStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  /** Returns true if field approvalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  public void setApprovalStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID, value);
  }

  public String getCheckDate() {
    return this.checkDate;
  }

  public CheckDocumentIndexDTO setCheckDate(String checkDate) {
    this.checkDate = checkDate;
    return this;
  }

  public void unsetCheckDate() {
    this.checkDate = null;
  }

  /** Returns true if field checkDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDate() {
    return this.checkDate != null;
  }

  public void setCheckDateIsSet(boolean value) {
    if (!value) {
      this.checkDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CheckDocumentIndexDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getAttachmentId() {
    return this.attachmentId;
  }

  public CheckDocumentIndexDTO setAttachmentId(int attachmentId) {
    this.attachmentId = attachmentId;
    setAttachmentIdIsSet(true);
    return this;
  }

  public void unsetAttachmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTACHMENTID_ISSET_ID);
  }

  /** Returns true if field attachmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __ATTACHMENTID_ISSET_ID);
  }

  public void setAttachmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTACHMENTID_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public CheckDocumentIndexDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public CheckDocumentIndexDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public CheckDocumentIndexDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CheckDocumentIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CheckDocumentIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CheckDocumentIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public CheckDocumentIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public CheckDocumentIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getRecFeeStatus() {
    return this.recFeeStatus;
  }

  public CheckDocumentIndexDTO setRecFeeStatus(int recFeeStatus) {
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    return this;
  }

  public void unsetRecFeeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  /** Returns true if field recFeeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRecFeeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  public void setRecFeeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public CheckDocumentIndexDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public String getCollectFileDate() {
    return this.collectFileDate;
  }

  public CheckDocumentIndexDTO setCollectFileDate(String collectFileDate) {
    this.collectFileDate = collectFileDate;
    return this;
  }

  public void unsetCollectFileDate() {
    this.collectFileDate = null;
  }

  /** Returns true if field collectFileDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFileDate() {
    return this.collectFileDate != null;
  }

  public void setCollectFileDateIsSet(boolean value) {
    if (!value) {
      this.collectFileDate = null;
    }
  }

  public String getCollectFileRemark() {
    return this.collectFileRemark;
  }

  public CheckDocumentIndexDTO setCollectFileRemark(String collectFileRemark) {
    this.collectFileRemark = collectFileRemark;
    return this;
  }

  public void unsetCollectFileRemark() {
    this.collectFileRemark = null;
  }

  /** Returns true if field collectFileRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFileRemark() {
    return this.collectFileRemark != null;
  }

  public void setCollectFileRemarkIsSet(boolean value) {
    if (!value) {
      this.collectFileRemark = null;
    }
  }

  public int getCollectFileStatus() {
    return this.collectFileStatus;
  }

  public CheckDocumentIndexDTO setCollectFileStatus(int collectFileStatus) {
    this.collectFileStatus = collectFileStatus;
    setCollectFileStatusIsSet(true);
    return this;
  }

  public void unsetCollectFileStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTFILESTATUS_ISSET_ID);
  }

  /** Returns true if field collectFileStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFileStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTFILESTATUS_ISSET_ID);
  }

  public void setCollectFileStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTFILESTATUS_ISSET_ID, value);
  }

  public int getCheckLitigationId() {
    return this.checkLitigationId;
  }

  public CheckDocumentIndexDTO setCheckLitigationId(int checkLitigationId) {
    this.checkLitigationId = checkLitigationId;
    setCheckLitigationIdIsSet(true);
    return this;
  }

  public void unsetCheckLitigationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKLITIGATIONID_ISSET_ID);
  }

  /** Returns true if field checkLitigationId is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckLitigationId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKLITIGATIONID_ISSET_ID);
  }

  public void setCheckLitigationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKLITIGATIONID_ISSET_ID, value);
  }

  public int getCheckLitigationStatus() {
    return this.checkLitigationStatus;
  }

  public CheckDocumentIndexDTO setCheckLitigationStatus(int checkLitigationStatus) {
    this.checkLitigationStatus = checkLitigationStatus;
    setCheckLitigationStatusIsSet(true);
    return this;
  }

  public void unsetCheckLitigationStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKLITIGATIONSTATUS_ISSET_ID);
  }

  /** Returns true if field checkLitigationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckLitigationStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKLITIGATIONSTATUS_ISSET_ID);
  }

  public void setCheckLitigationStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKLITIGATIONSTATUS_ISSET_ID, value);
  }

  public int getCheckLitigationApprovalStatus() {
    return this.checkLitigationApprovalStatus;
  }

  public CheckDocumentIndexDTO setCheckLitigationApprovalStatus(int checkLitigationApprovalStatus) {
    this.checkLitigationApprovalStatus = checkLitigationApprovalStatus;
    setCheckLitigationApprovalStatusIsSet(true);
    return this;
  }

  public void unsetCheckLitigationApprovalStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID);
  }

  /** Returns true if field checkLitigationApprovalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckLitigationApprovalStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID);
  }

  public void setCheckLitigationApprovalStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKLITIGATIONAPPROVALSTATUS_ISSET_ID, value);
  }

  public int getProjectForeclosureStatus() {
    return this.projectForeclosureStatus;
  }

  public CheckDocumentIndexDTO setProjectForeclosureStatus(int projectForeclosureStatus) {
    this.projectForeclosureStatus = projectForeclosureStatus;
    setProjectForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetProjectForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTFORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field projectForeclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTFORECLOSURESTATUS_ISSET_ID);
  }

  public void setProjectForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTFORECLOSURESTATUS_ISSET_ID, value);
  }

  public String getPerformJobRemarkDate() {
    return this.performJobRemarkDate;
  }

  public CheckDocumentIndexDTO setPerformJobRemarkDate(String performJobRemarkDate) {
    this.performJobRemarkDate = performJobRemarkDate;
    return this;
  }

  public void unsetPerformJobRemarkDate() {
    this.performJobRemarkDate = null;
  }

  /** Returns true if field performJobRemarkDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPerformJobRemarkDate() {
    return this.performJobRemarkDate != null;
  }

  public void setPerformJobRemarkDateIsSet(boolean value) {
    if (!value) {
      this.performJobRemarkDate = null;
    }
  }

  public String getPerformJobRemark() {
    return this.performJobRemark;
  }

  public CheckDocumentIndexDTO setPerformJobRemark(String performJobRemark) {
    this.performJobRemark = performJobRemark;
    return this;
  }

  public void unsetPerformJobRemark() {
    this.performJobRemark = null;
  }

  /** Returns true if field performJobRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetPerformJobRemark() {
    return this.performJobRemark != null;
  }

  public void setPerformJobRemarkIsSet(boolean value) {
    if (!value) {
      this.performJobRemark = null;
    }
  }

  public int getPerformJobRemarkStatus() {
    return this.performJobRemarkStatus;
  }

  public CheckDocumentIndexDTO setPerformJobRemarkStatus(int performJobRemarkStatus) {
    this.performJobRemarkStatus = performJobRemarkStatus;
    setPerformJobRemarkStatusIsSet(true);
    return this;
  }

  public void unsetPerformJobRemarkStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERFORMJOBREMARKSTATUS_ISSET_ID);
  }

  /** Returns true if field performJobRemarkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPerformJobRemarkStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PERFORMJOBREMARKSTATUS_ISSET_ID);
  }

  public void setPerformJobRemarkStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERFORMJOBREMARKSTATUS_ISSET_ID, value);
  }

  public int getReCheckStatus() {
    return this.reCheckStatus;
  }

  public CheckDocumentIndexDTO setReCheckStatus(int reCheckStatus) {
    this.reCheckStatus = reCheckStatus;
    setReCheckStatusIsSet(true);
    return this;
  }

  public void unsetReCheckStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECHECKSTATUS_ISSET_ID);
  }

  /** Returns true if field reCheckStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReCheckStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECHECKSTATUS_ISSET_ID);
  }

  public void setReCheckStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECHECKSTATUS_ISSET_ID, value);
  }

  public String getReCheckRemark() {
    return this.reCheckRemark;
  }

  public CheckDocumentIndexDTO setReCheckRemark(String reCheckRemark) {
    this.reCheckRemark = reCheckRemark;
    return this;
  }

  public void unsetReCheckRemark() {
    this.reCheckRemark = null;
  }

  /** Returns true if field reCheckRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetReCheckRemark() {
    return this.reCheckRemark != null;
  }

  public void setReCheckRemarkIsSet(boolean value) {
    if (!value) {
      this.reCheckRemark = null;
    }
  }

  public int getRefundFileStatus() {
    return this.refundFileStatus;
  }

  public CheckDocumentIndexDTO setRefundFileStatus(int refundFileStatus) {
    this.refundFileStatus = refundFileStatus;
    setRefundFileStatusIsSet(true);
    return this;
  }

  public void unsetRefundFileStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDFILESTATUS_ISSET_ID);
  }

  /** Returns true if field refundFileStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundFileStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDFILESTATUS_ISSET_ID);
  }

  public void setRefundFileStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDFILESTATUS_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public CheckDocumentIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public CheckDocumentIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public CheckDocumentIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public CheckDocumentIndexDTO setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public CheckDocumentIndexDTO setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public CheckDocumentIndexDTO setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public int getLoanDays() {
    return this.loanDays;
  }

  public CheckDocumentIndexDTO setLoanDays(int loanDays) {
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    return this;
  }

  public void unsetLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  /** Returns true if field loanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  public void setLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANDAYS_ISSET_ID, value);
  }

  public int getLoanRepaymentStatus() {
    return this.loanRepaymentStatus;
  }

  public CheckDocumentIndexDTO setLoanRepaymentStatus(int loanRepaymentStatus) {
    this.loanRepaymentStatus = loanRepaymentStatus;
    setLoanRepaymentStatusIsSet(true);
    return this;
  }

  public void unsetLoanRepaymentStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANREPAYMENTSTATUS_ISSET_ID);
  }

  /** Returns true if field loanRepaymentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRepaymentStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANREPAYMENTSTATUS_ISSET_ID);
  }

  public void setLoanRepaymentStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANREPAYMENTSTATUS_ISSET_ID, value);
  }

  public String getCheckStatusStr() {
    return this.checkStatusStr;
  }

  public CheckDocumentIndexDTO setCheckStatusStr(String checkStatusStr) {
    this.checkStatusStr = checkStatusStr;
    return this;
  }

  public void unsetCheckStatusStr() {
    this.checkStatusStr = null;
  }

  /** Returns true if field checkStatusStr is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatusStr() {
    return this.checkStatusStr != null;
  }

  public void setCheckStatusStrIsSet(boolean value) {
    if (!value) {
      this.checkStatusStr = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public CheckDocumentIndexDTO setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public CheckDocumentIndexDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public CheckDocumentIndexDTO setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public CheckDocumentIndexDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public CheckDocumentIndexDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHECK_DOCUMENT_ID:
      if (value == null) {
        unsetCheckDocumentId();
      } else {
        setCheckDocumentId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case CHECK_STATUS:
      if (value == null) {
        unsetCheckStatus();
      } else {
        setCheckStatus((Integer)value);
      }
      break;

    case APPROVAL_STATUS:
      if (value == null) {
        unsetApprovalStatus();
      } else {
        setApprovalStatus((Integer)value);
      }
      break;

    case CHECK_DATE:
      if (value == null) {
        unsetCheckDate();
      } else {
        setCheckDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ATTACHMENT_ID:
      if (value == null) {
        unsetAttachmentId();
      } else {
        setAttachmentId((Integer)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case REC_FEE_STATUS:
      if (value == null) {
        unsetRecFeeStatus();
      } else {
        setRecFeeStatus((Integer)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case COLLECT_FILE_DATE:
      if (value == null) {
        unsetCollectFileDate();
      } else {
        setCollectFileDate((String)value);
      }
      break;

    case COLLECT_FILE_REMARK:
      if (value == null) {
        unsetCollectFileRemark();
      } else {
        setCollectFileRemark((String)value);
      }
      break;

    case COLLECT_FILE_STATUS:
      if (value == null) {
        unsetCollectFileStatus();
      } else {
        setCollectFileStatus((Integer)value);
      }
      break;

    case CHECK_LITIGATION_ID:
      if (value == null) {
        unsetCheckLitigationId();
      } else {
        setCheckLitigationId((Integer)value);
      }
      break;

    case CHECK_LITIGATION_STATUS:
      if (value == null) {
        unsetCheckLitigationStatus();
      } else {
        setCheckLitigationStatus((Integer)value);
      }
      break;

    case CHECK_LITIGATION_APPROVAL_STATUS:
      if (value == null) {
        unsetCheckLitigationApprovalStatus();
      } else {
        setCheckLitigationApprovalStatus((Integer)value);
      }
      break;

    case PROJECT_FORECLOSURE_STATUS:
      if (value == null) {
        unsetProjectForeclosureStatus();
      } else {
        setProjectForeclosureStatus((Integer)value);
      }
      break;

    case PERFORM_JOB_REMARK_DATE:
      if (value == null) {
        unsetPerformJobRemarkDate();
      } else {
        setPerformJobRemarkDate((String)value);
      }
      break;

    case PERFORM_JOB_REMARK:
      if (value == null) {
        unsetPerformJobRemark();
      } else {
        setPerformJobRemark((String)value);
      }
      break;

    case PERFORM_JOB_REMARK_STATUS:
      if (value == null) {
        unsetPerformJobRemarkStatus();
      } else {
        setPerformJobRemarkStatus((Integer)value);
      }
      break;

    case RE_CHECK_STATUS:
      if (value == null) {
        unsetReCheckStatus();
      } else {
        setReCheckStatus((Integer)value);
      }
      break;

    case RE_CHECK_REMARK:
      if (value == null) {
        unsetReCheckRemark();
      } else {
        setReCheckRemark((String)value);
      }
      break;

    case REFUND_FILE_STATUS:
      if (value == null) {
        unsetRefundFileStatus();
      } else {
        setRefundFileStatus((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case LOAN_DAYS:
      if (value == null) {
        unsetLoanDays();
      } else {
        setLoanDays((Integer)value);
      }
      break;

    case LOAN_REPAYMENT_STATUS:
      if (value == null) {
        unsetLoanRepaymentStatus();
      } else {
        setLoanRepaymentStatus((Integer)value);
      }
      break;

    case CHECK_STATUS_STR:
      if (value == null) {
        unsetCheckStatusStr();
      } else {
        setCheckStatusStr((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHECK_DOCUMENT_ID:
      return Integer.valueOf(getCheckDocumentId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case CHECK_STATUS:
      return Integer.valueOf(getCheckStatus());

    case APPROVAL_STATUS:
      return Integer.valueOf(getApprovalStatus());

    case CHECK_DATE:
      return getCheckDate();

    case REMARK:
      return getRemark();

    case ATTACHMENT_ID:
      return Integer.valueOf(getAttachmentId());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case REC_FEE_STATUS:
      return Integer.valueOf(getRecFeeStatus());

    case CREATER_DATE:
      return getCreaterDate();

    case COLLECT_FILE_DATE:
      return getCollectFileDate();

    case COLLECT_FILE_REMARK:
      return getCollectFileRemark();

    case COLLECT_FILE_STATUS:
      return Integer.valueOf(getCollectFileStatus());

    case CHECK_LITIGATION_ID:
      return Integer.valueOf(getCheckLitigationId());

    case CHECK_LITIGATION_STATUS:
      return Integer.valueOf(getCheckLitigationStatus());

    case CHECK_LITIGATION_APPROVAL_STATUS:
      return Integer.valueOf(getCheckLitigationApprovalStatus());

    case PROJECT_FORECLOSURE_STATUS:
      return Integer.valueOf(getProjectForeclosureStatus());

    case PERFORM_JOB_REMARK_DATE:
      return getPerformJobRemarkDate();

    case PERFORM_JOB_REMARK:
      return getPerformJobRemark();

    case PERFORM_JOB_REMARK_STATUS:
      return Integer.valueOf(getPerformJobRemarkStatus());

    case RE_CHECK_STATUS:
      return Integer.valueOf(getReCheckStatus());

    case RE_CHECK_REMARK:
      return getReCheckRemark();

    case REFUND_FILE_STATUS:
      return Integer.valueOf(getRefundFileStatus());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case LOAN_DAYS:
      return Integer.valueOf(getLoanDays());

    case LOAN_REPAYMENT_STATUS:
      return Integer.valueOf(getLoanRepaymentStatus());

    case CHECK_STATUS_STR:
      return getCheckStatusStr();

    case PM_USER_NAME:
      return getPmUserName();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case PRODUCT_NAME:
      return getProductName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHECK_DOCUMENT_ID:
      return isSetCheckDocumentId();
    case PROJECT_ID:
      return isSetProjectId();
    case CHECK_STATUS:
      return isSetCheckStatus();
    case APPROVAL_STATUS:
      return isSetApprovalStatus();
    case CHECK_DATE:
      return isSetCheckDate();
    case REMARK:
      return isSetRemark();
    case ATTACHMENT_ID:
      return isSetAttachmentId();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case REC_FEE_STATUS:
      return isSetRecFeeStatus();
    case CREATER_DATE:
      return isSetCreaterDate();
    case COLLECT_FILE_DATE:
      return isSetCollectFileDate();
    case COLLECT_FILE_REMARK:
      return isSetCollectFileRemark();
    case COLLECT_FILE_STATUS:
      return isSetCollectFileStatus();
    case CHECK_LITIGATION_ID:
      return isSetCheckLitigationId();
    case CHECK_LITIGATION_STATUS:
      return isSetCheckLitigationStatus();
    case CHECK_LITIGATION_APPROVAL_STATUS:
      return isSetCheckLitigationApprovalStatus();
    case PROJECT_FORECLOSURE_STATUS:
      return isSetProjectForeclosureStatus();
    case PERFORM_JOB_REMARK_DATE:
      return isSetPerformJobRemarkDate();
    case PERFORM_JOB_REMARK:
      return isSetPerformJobRemark();
    case PERFORM_JOB_REMARK_STATUS:
      return isSetPerformJobRemarkStatus();
    case RE_CHECK_STATUS:
      return isSetReCheckStatus();
    case RE_CHECK_REMARK:
      return isSetReCheckRemark();
    case REFUND_FILE_STATUS:
      return isSetRefundFileStatus();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case IS_CHECHAN:
      return isSetIsChechan();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case LOAN_DAYS:
      return isSetLoanDays();
    case LOAN_REPAYMENT_STATUS:
      return isSetLoanRepaymentStatus();
    case CHECK_STATUS_STR:
      return isSetCheckStatusStr();
    case PM_USER_NAME:
      return isSetPmUserName();
    case PM_USER_ID:
      return isSetPmUserId();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CheckDocumentIndexDTO)
      return this.equals((CheckDocumentIndexDTO)that);
    return false;
  }

  public boolean equals(CheckDocumentIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_checkDocumentId = true;
    boolean that_present_checkDocumentId = true;
    if (this_present_checkDocumentId || that_present_checkDocumentId) {
      if (!(this_present_checkDocumentId && that_present_checkDocumentId))
        return false;
      if (this.checkDocumentId != that.checkDocumentId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_checkStatus = true;
    boolean that_present_checkStatus = true;
    if (this_present_checkStatus || that_present_checkStatus) {
      if (!(this_present_checkStatus && that_present_checkStatus))
        return false;
      if (this.checkStatus != that.checkStatus)
        return false;
    }

    boolean this_present_approvalStatus = true;
    boolean that_present_approvalStatus = true;
    if (this_present_approvalStatus || that_present_approvalStatus) {
      if (!(this_present_approvalStatus && that_present_approvalStatus))
        return false;
      if (this.approvalStatus != that.approvalStatus)
        return false;
    }

    boolean this_present_checkDate = true && this.isSetCheckDate();
    boolean that_present_checkDate = true && that.isSetCheckDate();
    if (this_present_checkDate || that_present_checkDate) {
      if (!(this_present_checkDate && that_present_checkDate))
        return false;
      if (!this.checkDate.equals(that.checkDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_attachmentId = true;
    boolean that_present_attachmentId = true;
    if (this_present_attachmentId || that_present_attachmentId) {
      if (!(this_present_attachmentId && that_present_attachmentId))
        return false;
      if (this.attachmentId != that.attachmentId)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_recFeeStatus = true;
    boolean that_present_recFeeStatus = true;
    if (this_present_recFeeStatus || that_present_recFeeStatus) {
      if (!(this_present_recFeeStatus && that_present_recFeeStatus))
        return false;
      if (this.recFeeStatus != that.recFeeStatus)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_collectFileDate = true && this.isSetCollectFileDate();
    boolean that_present_collectFileDate = true && that.isSetCollectFileDate();
    if (this_present_collectFileDate || that_present_collectFileDate) {
      if (!(this_present_collectFileDate && that_present_collectFileDate))
        return false;
      if (!this.collectFileDate.equals(that.collectFileDate))
        return false;
    }

    boolean this_present_collectFileRemark = true && this.isSetCollectFileRemark();
    boolean that_present_collectFileRemark = true && that.isSetCollectFileRemark();
    if (this_present_collectFileRemark || that_present_collectFileRemark) {
      if (!(this_present_collectFileRemark && that_present_collectFileRemark))
        return false;
      if (!this.collectFileRemark.equals(that.collectFileRemark))
        return false;
    }

    boolean this_present_collectFileStatus = true;
    boolean that_present_collectFileStatus = true;
    if (this_present_collectFileStatus || that_present_collectFileStatus) {
      if (!(this_present_collectFileStatus && that_present_collectFileStatus))
        return false;
      if (this.collectFileStatus != that.collectFileStatus)
        return false;
    }

    boolean this_present_checkLitigationId = true;
    boolean that_present_checkLitigationId = true;
    if (this_present_checkLitigationId || that_present_checkLitigationId) {
      if (!(this_present_checkLitigationId && that_present_checkLitigationId))
        return false;
      if (this.checkLitigationId != that.checkLitigationId)
        return false;
    }

    boolean this_present_checkLitigationStatus = true;
    boolean that_present_checkLitigationStatus = true;
    if (this_present_checkLitigationStatus || that_present_checkLitigationStatus) {
      if (!(this_present_checkLitigationStatus && that_present_checkLitigationStatus))
        return false;
      if (this.checkLitigationStatus != that.checkLitigationStatus)
        return false;
    }

    boolean this_present_checkLitigationApprovalStatus = true;
    boolean that_present_checkLitigationApprovalStatus = true;
    if (this_present_checkLitigationApprovalStatus || that_present_checkLitigationApprovalStatus) {
      if (!(this_present_checkLitigationApprovalStatus && that_present_checkLitigationApprovalStatus))
        return false;
      if (this.checkLitigationApprovalStatus != that.checkLitigationApprovalStatus)
        return false;
    }

    boolean this_present_projectForeclosureStatus = true;
    boolean that_present_projectForeclosureStatus = true;
    if (this_present_projectForeclosureStatus || that_present_projectForeclosureStatus) {
      if (!(this_present_projectForeclosureStatus && that_present_projectForeclosureStatus))
        return false;
      if (this.projectForeclosureStatus != that.projectForeclosureStatus)
        return false;
    }

    boolean this_present_performJobRemarkDate = true && this.isSetPerformJobRemarkDate();
    boolean that_present_performJobRemarkDate = true && that.isSetPerformJobRemarkDate();
    if (this_present_performJobRemarkDate || that_present_performJobRemarkDate) {
      if (!(this_present_performJobRemarkDate && that_present_performJobRemarkDate))
        return false;
      if (!this.performJobRemarkDate.equals(that.performJobRemarkDate))
        return false;
    }

    boolean this_present_performJobRemark = true && this.isSetPerformJobRemark();
    boolean that_present_performJobRemark = true && that.isSetPerformJobRemark();
    if (this_present_performJobRemark || that_present_performJobRemark) {
      if (!(this_present_performJobRemark && that_present_performJobRemark))
        return false;
      if (!this.performJobRemark.equals(that.performJobRemark))
        return false;
    }

    boolean this_present_performJobRemarkStatus = true;
    boolean that_present_performJobRemarkStatus = true;
    if (this_present_performJobRemarkStatus || that_present_performJobRemarkStatus) {
      if (!(this_present_performJobRemarkStatus && that_present_performJobRemarkStatus))
        return false;
      if (this.performJobRemarkStatus != that.performJobRemarkStatus)
        return false;
    }

    boolean this_present_reCheckStatus = true;
    boolean that_present_reCheckStatus = true;
    if (this_present_reCheckStatus || that_present_reCheckStatus) {
      if (!(this_present_reCheckStatus && that_present_reCheckStatus))
        return false;
      if (this.reCheckStatus != that.reCheckStatus)
        return false;
    }

    boolean this_present_reCheckRemark = true && this.isSetReCheckRemark();
    boolean that_present_reCheckRemark = true && that.isSetReCheckRemark();
    if (this_present_reCheckRemark || that_present_reCheckRemark) {
      if (!(this_present_reCheckRemark && that_present_reCheckRemark))
        return false;
      if (!this.reCheckRemark.equals(that.reCheckRemark))
        return false;
    }

    boolean this_present_refundFileStatus = true;
    boolean that_present_refundFileStatus = true;
    if (this_present_refundFileStatus || that_present_refundFileStatus) {
      if (!(this_present_refundFileStatus && that_present_refundFileStatus))
        return false;
      if (this.refundFileStatus != that.refundFileStatus)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_loanDays = true;
    boolean that_present_loanDays = true;
    if (this_present_loanDays || that_present_loanDays) {
      if (!(this_present_loanDays && that_present_loanDays))
        return false;
      if (this.loanDays != that.loanDays)
        return false;
    }

    boolean this_present_loanRepaymentStatus = true;
    boolean that_present_loanRepaymentStatus = true;
    if (this_present_loanRepaymentStatus || that_present_loanRepaymentStatus) {
      if (!(this_present_loanRepaymentStatus && that_present_loanRepaymentStatus))
        return false;
      if (this.loanRepaymentStatus != that.loanRepaymentStatus)
        return false;
    }

    boolean this_present_checkStatusStr = true && this.isSetCheckStatusStr();
    boolean that_present_checkStatusStr = true && that.isSetCheckStatusStr();
    if (this_present_checkStatusStr || that_present_checkStatusStr) {
      if (!(this_present_checkStatusStr && that_present_checkStatusStr))
        return false;
      if (!this.checkStatusStr.equals(that.checkStatusStr))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_checkDocumentId = true;
    list.add(present_checkDocumentId);
    if (present_checkDocumentId)
      list.add(checkDocumentId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_checkStatus = true;
    list.add(present_checkStatus);
    if (present_checkStatus)
      list.add(checkStatus);

    boolean present_approvalStatus = true;
    list.add(present_approvalStatus);
    if (present_approvalStatus)
      list.add(approvalStatus);

    boolean present_checkDate = true && (isSetCheckDate());
    list.add(present_checkDate);
    if (present_checkDate)
      list.add(checkDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_attachmentId = true;
    list.add(present_attachmentId);
    if (present_attachmentId)
      list.add(attachmentId);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_recFeeStatus = true;
    list.add(present_recFeeStatus);
    if (present_recFeeStatus)
      list.add(recFeeStatus);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_collectFileDate = true && (isSetCollectFileDate());
    list.add(present_collectFileDate);
    if (present_collectFileDate)
      list.add(collectFileDate);

    boolean present_collectFileRemark = true && (isSetCollectFileRemark());
    list.add(present_collectFileRemark);
    if (present_collectFileRemark)
      list.add(collectFileRemark);

    boolean present_collectFileStatus = true;
    list.add(present_collectFileStatus);
    if (present_collectFileStatus)
      list.add(collectFileStatus);

    boolean present_checkLitigationId = true;
    list.add(present_checkLitigationId);
    if (present_checkLitigationId)
      list.add(checkLitigationId);

    boolean present_checkLitigationStatus = true;
    list.add(present_checkLitigationStatus);
    if (present_checkLitigationStatus)
      list.add(checkLitigationStatus);

    boolean present_checkLitigationApprovalStatus = true;
    list.add(present_checkLitigationApprovalStatus);
    if (present_checkLitigationApprovalStatus)
      list.add(checkLitigationApprovalStatus);

    boolean present_projectForeclosureStatus = true;
    list.add(present_projectForeclosureStatus);
    if (present_projectForeclosureStatus)
      list.add(projectForeclosureStatus);

    boolean present_performJobRemarkDate = true && (isSetPerformJobRemarkDate());
    list.add(present_performJobRemarkDate);
    if (present_performJobRemarkDate)
      list.add(performJobRemarkDate);

    boolean present_performJobRemark = true && (isSetPerformJobRemark());
    list.add(present_performJobRemark);
    if (present_performJobRemark)
      list.add(performJobRemark);

    boolean present_performJobRemarkStatus = true;
    list.add(present_performJobRemarkStatus);
    if (present_performJobRemarkStatus)
      list.add(performJobRemarkStatus);

    boolean present_reCheckStatus = true;
    list.add(present_reCheckStatus);
    if (present_reCheckStatus)
      list.add(reCheckStatus);

    boolean present_reCheckRemark = true && (isSetReCheckRemark());
    list.add(present_reCheckRemark);
    if (present_reCheckRemark)
      list.add(reCheckRemark);

    boolean present_refundFileStatus = true;
    list.add(present_refundFileStatus);
    if (present_refundFileStatus)
      list.add(refundFileStatus);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_loanDays = true;
    list.add(present_loanDays);
    if (present_loanDays)
      list.add(loanDays);

    boolean present_loanRepaymentStatus = true;
    list.add(present_loanRepaymentStatus);
    if (present_loanRepaymentStatus)
      list.add(loanRepaymentStatus);

    boolean present_checkStatusStr = true && (isSetCheckStatusStr());
    list.add(present_checkStatusStr);
    if (present_checkStatusStr)
      list.add(checkStatusStr);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    return list.hashCode();
  }

  @Override
  public int compareTo(CheckDocumentIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCheckDocumentId()).compareTo(other.isSetCheckDocumentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDocumentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentId, other.checkDocumentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatus()).compareTo(other.isSetCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatus, other.checkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalStatus()).compareTo(other.isSetApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalStatus, other.approvalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckDate()).compareTo(other.isSetCheckDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDate, other.checkDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachmentId()).compareTo(other.isSetAttachmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachmentId, other.attachmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecFeeStatus()).compareTo(other.isSetRecFeeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecFeeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recFeeStatus, other.recFeeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFileDate()).compareTo(other.isSetCollectFileDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFileDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFileDate, other.collectFileDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFileRemark()).compareTo(other.isSetCollectFileRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFileRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFileRemark, other.collectFileRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFileStatus()).compareTo(other.isSetCollectFileStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFileStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFileStatus, other.collectFileStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckLitigationId()).compareTo(other.isSetCheckLitigationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckLitigationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationId, other.checkLitigationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckLitigationStatus()).compareTo(other.isSetCheckLitigationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckLitigationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationStatus, other.checkLitigationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckLitigationApprovalStatus()).compareTo(other.isSetCheckLitigationApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckLitigationApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationApprovalStatus, other.checkLitigationApprovalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectForeclosureStatus()).compareTo(other.isSetProjectForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectForeclosureStatus, other.projectForeclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerformJobRemarkDate()).compareTo(other.isSetPerformJobRemarkDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerformJobRemarkDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.performJobRemarkDate, other.performJobRemarkDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerformJobRemark()).compareTo(other.isSetPerformJobRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerformJobRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.performJobRemark, other.performJobRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerformJobRemarkStatus()).compareTo(other.isSetPerformJobRemarkStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerformJobRemarkStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.performJobRemarkStatus, other.performJobRemarkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReCheckStatus()).compareTo(other.isSetReCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reCheckStatus, other.reCheckStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReCheckRemark()).compareTo(other.isSetReCheckRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReCheckRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reCheckRemark, other.reCheckRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundFileStatus()).compareTo(other.isSetRefundFileStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundFileStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFileStatus, other.refundFileStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDays()).compareTo(other.isSetLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDays, other.loanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRepaymentStatus()).compareTo(other.isSetLoanRepaymentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRepaymentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRepaymentStatus, other.loanRepaymentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatusStr()).compareTo(other.isSetCheckStatusStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatusStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatusStr, other.checkStatusStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CheckDocumentIndexDTO(");
    boolean first = true;

    sb.append("checkDocumentId:");
    sb.append(this.checkDocumentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatus:");
    sb.append(this.checkStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalStatus:");
    sb.append(this.approvalStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkDate:");
    if (this.checkDate == null) {
      sb.append("null");
    } else {
      sb.append(this.checkDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachmentId:");
    sb.append(this.attachmentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recFeeStatus:");
    sb.append(this.recFeeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFileDate:");
    if (this.collectFileDate == null) {
      sb.append("null");
    } else {
      sb.append(this.collectFileDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFileRemark:");
    if (this.collectFileRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.collectFileRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFileStatus:");
    sb.append(this.collectFileStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkLitigationId:");
    sb.append(this.checkLitigationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkLitigationStatus:");
    sb.append(this.checkLitigationStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkLitigationApprovalStatus:");
    sb.append(this.checkLitigationApprovalStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectForeclosureStatus:");
    sb.append(this.projectForeclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("performJobRemarkDate:");
    if (this.performJobRemarkDate == null) {
      sb.append("null");
    } else {
      sb.append(this.performJobRemarkDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("performJobRemark:");
    if (this.performJobRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.performJobRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("performJobRemarkStatus:");
    sb.append(this.performJobRemarkStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reCheckStatus:");
    sb.append(this.reCheckStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reCheckRemark:");
    if (this.reCheckRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.reCheckRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundFileStatus:");
    sb.append(this.refundFileStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDays:");
    sb.append(this.loanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRepaymentStatus:");
    sb.append(this.loanRepaymentStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatusStr:");
    if (this.checkStatusStr == null) {
      sb.append("null");
    } else {
      sb.append(this.checkStatusStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CheckDocumentIndexDTOStandardSchemeFactory implements SchemeFactory {
    public CheckDocumentIndexDTOStandardScheme getScheme() {
      return new CheckDocumentIndexDTOStandardScheme();
    }
  }

  private static class CheckDocumentIndexDTOStandardScheme extends StandardScheme<CheckDocumentIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CheckDocumentIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHECK_DOCUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkDocumentId = iprot.readI32();
              struct.setCheckDocumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkStatus = iprot.readI32();
              struct.setCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approvalStatus = iprot.readI32();
              struct.setApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHECK_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkDate = iprot.readString();
              struct.setCheckDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTACHMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.attachmentId = iprot.readI32();
              struct.setAttachmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list224.size);
                int _elem225;
                for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                {
                  _elem225 = iprot.readI32();
                  struct.userIds.add(_elem225);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REC_FEE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recFeeStatus = iprot.readI32();
              struct.setRecFeeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COLLECT_FILE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectFileDate = iprot.readString();
              struct.setCollectFileDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COLLECT_FILE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectFileRemark = iprot.readString();
              struct.setCollectFileRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COLLECT_FILE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collectFileStatus = iprot.readI32();
              struct.setCollectFileStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CHECK_LITIGATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkLitigationId = iprot.readI32();
              struct.setCheckLitigationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CHECK_LITIGATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkLitigationStatus = iprot.readI32();
              struct.setCheckLitigationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CHECK_LITIGATION_APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkLitigationApprovalStatus = iprot.readI32();
              struct.setCheckLitigationApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PROJECT_FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectForeclosureStatus = iprot.readI32();
              struct.setProjectForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PERFORM_JOB_REMARK_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.performJobRemarkDate = iprot.readString();
              struct.setPerformJobRemarkDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PERFORM_JOB_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.performJobRemark = iprot.readString();
              struct.setPerformJobRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PERFORM_JOB_REMARK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.performJobRemarkStatus = iprot.readI32();
              struct.setPerformJobRemarkStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // RE_CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reCheckStatus = iprot.readI32();
              struct.setReCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // RE_CHECK_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reCheckRemark = iprot.readString();
              struct.setReCheckRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // REFUND_FILE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundFileStatus = iprot.readI32();
              struct.setRefundFileStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanDays = iprot.readI32();
              struct.setLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // LOAN_REPAYMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanRepaymentStatus = iprot.readI32();
              struct.setLoanRepaymentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CHECK_STATUS_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkStatusStr = iprot.readString();
              struct.setCheckStatusStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CheckDocumentIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHECK_DOCUMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.checkDocumentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPROVAL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.approvalStatus);
      oprot.writeFieldEnd();
      if (struct.checkDate != null) {
        oprot.writeFieldBegin(CHECK_DATE_FIELD_DESC);
        oprot.writeString(struct.checkDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ATTACHMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.attachmentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter227 : struct.userIds)
          {
            oprot.writeI32(_iter227);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_FEE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.recFeeStatus);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      if (struct.collectFileDate != null) {
        oprot.writeFieldBegin(COLLECT_FILE_DATE_FIELD_DESC);
        oprot.writeString(struct.collectFileDate);
        oprot.writeFieldEnd();
      }
      if (struct.collectFileRemark != null) {
        oprot.writeFieldBegin(COLLECT_FILE_REMARK_FIELD_DESC);
        oprot.writeString(struct.collectFileRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLLECT_FILE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.collectFileStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_LITIGATION_ID_FIELD_DESC);
      oprot.writeI32(struct.checkLitigationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_LITIGATION_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkLitigationStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_LITIGATION_APPROVAL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkLitigationApprovalStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.projectForeclosureStatus);
      oprot.writeFieldEnd();
      if (struct.performJobRemarkDate != null) {
        oprot.writeFieldBegin(PERFORM_JOB_REMARK_DATE_FIELD_DESC);
        oprot.writeString(struct.performJobRemarkDate);
        oprot.writeFieldEnd();
      }
      if (struct.performJobRemark != null) {
        oprot.writeFieldBegin(PERFORM_JOB_REMARK_FIELD_DESC);
        oprot.writeString(struct.performJobRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERFORM_JOB_REMARK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.performJobRemarkStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RE_CHECK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.reCheckStatus);
      oprot.writeFieldEnd();
      if (struct.reCheckRemark != null) {
        oprot.writeFieldBegin(RE_CHECK_REMARK_FIELD_DESC);
        oprot.writeString(struct.reCheckRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_FILE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.refundFileStatus);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.loanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_REPAYMENT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.loanRepaymentStatus);
      oprot.writeFieldEnd();
      if (struct.checkStatusStr != null) {
        oprot.writeFieldBegin(CHECK_STATUS_STR_FIELD_DESC);
        oprot.writeString(struct.checkStatusStr);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CheckDocumentIndexDTOTupleSchemeFactory implements SchemeFactory {
    public CheckDocumentIndexDTOTupleScheme getScheme() {
      return new CheckDocumentIndexDTOTupleScheme();
    }
  }

  private static class CheckDocumentIndexDTOTupleScheme extends TupleScheme<CheckDocumentIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CheckDocumentIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCheckDocumentId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetCheckStatus()) {
        optionals.set(2);
      }
      if (struct.isSetApprovalStatus()) {
        optionals.set(3);
      }
      if (struct.isSetCheckDate()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetAttachmentId()) {
        optionals.set(6);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetUserIds()) {
        optionals.set(12);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(13);
      }
      if (struct.isSetProjectName()) {
        optionals.set(14);
      }
      if (struct.isSetRecFeeStatus()) {
        optionals.set(15);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(16);
      }
      if (struct.isSetCollectFileDate()) {
        optionals.set(17);
      }
      if (struct.isSetCollectFileRemark()) {
        optionals.set(18);
      }
      if (struct.isSetCollectFileStatus()) {
        optionals.set(19);
      }
      if (struct.isSetCheckLitigationId()) {
        optionals.set(20);
      }
      if (struct.isSetCheckLitigationStatus()) {
        optionals.set(21);
      }
      if (struct.isSetCheckLitigationApprovalStatus()) {
        optionals.set(22);
      }
      if (struct.isSetProjectForeclosureStatus()) {
        optionals.set(23);
      }
      if (struct.isSetPerformJobRemarkDate()) {
        optionals.set(24);
      }
      if (struct.isSetPerformJobRemark()) {
        optionals.set(25);
      }
      if (struct.isSetPerformJobRemarkStatus()) {
        optionals.set(26);
      }
      if (struct.isSetReCheckStatus()) {
        optionals.set(27);
      }
      if (struct.isSetReCheckRemark()) {
        optionals.set(28);
      }
      if (struct.isSetRefundFileStatus()) {
        optionals.set(29);
      }
      if (struct.isSetHouseName()) {
        optionals.set(30);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(31);
      }
      if (struct.isSetSellerName()) {
        optionals.set(32);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(33);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(34);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(35);
      }
      if (struct.isSetLoanDays()) {
        optionals.set(36);
      }
      if (struct.isSetLoanRepaymentStatus()) {
        optionals.set(37);
      }
      if (struct.isSetCheckStatusStr()) {
        optionals.set(38);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(39);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(40);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(41);
      }
      if (struct.isSetProductId()) {
        optionals.set(42);
      }
      if (struct.isSetProductName()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSetCheckDocumentId()) {
        oprot.writeI32(struct.checkDocumentId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetCheckStatus()) {
        oprot.writeI32(struct.checkStatus);
      }
      if (struct.isSetApprovalStatus()) {
        oprot.writeI32(struct.approvalStatus);
      }
      if (struct.isSetCheckDate()) {
        oprot.writeString(struct.checkDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetAttachmentId()) {
        oprot.writeI32(struct.attachmentId);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter228 : struct.userIds)
          {
            oprot.writeI32(_iter228);
          }
        }
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetRecFeeStatus()) {
        oprot.writeI32(struct.recFeeStatus);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetCollectFileDate()) {
        oprot.writeString(struct.collectFileDate);
      }
      if (struct.isSetCollectFileRemark()) {
        oprot.writeString(struct.collectFileRemark);
      }
      if (struct.isSetCollectFileStatus()) {
        oprot.writeI32(struct.collectFileStatus);
      }
      if (struct.isSetCheckLitigationId()) {
        oprot.writeI32(struct.checkLitigationId);
      }
      if (struct.isSetCheckLitigationStatus()) {
        oprot.writeI32(struct.checkLitigationStatus);
      }
      if (struct.isSetCheckLitigationApprovalStatus()) {
        oprot.writeI32(struct.checkLitigationApprovalStatus);
      }
      if (struct.isSetProjectForeclosureStatus()) {
        oprot.writeI32(struct.projectForeclosureStatus);
      }
      if (struct.isSetPerformJobRemarkDate()) {
        oprot.writeString(struct.performJobRemarkDate);
      }
      if (struct.isSetPerformJobRemark()) {
        oprot.writeString(struct.performJobRemark);
      }
      if (struct.isSetPerformJobRemarkStatus()) {
        oprot.writeI32(struct.performJobRemarkStatus);
      }
      if (struct.isSetReCheckStatus()) {
        oprot.writeI32(struct.reCheckStatus);
      }
      if (struct.isSetReCheckRemark()) {
        oprot.writeString(struct.reCheckRemark);
      }
      if (struct.isSetRefundFileStatus()) {
        oprot.writeI32(struct.refundFileStatus);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetLoanDays()) {
        oprot.writeI32(struct.loanDays);
      }
      if (struct.isSetLoanRepaymentStatus()) {
        oprot.writeI32(struct.loanRepaymentStatus);
      }
      if (struct.isSetCheckStatusStr()) {
        oprot.writeString(struct.checkStatusStr);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CheckDocumentIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct.checkDocumentId = iprot.readI32();
        struct.setCheckDocumentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.checkStatus = iprot.readI32();
        struct.setCheckStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.approvalStatus = iprot.readI32();
        struct.setApprovalStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.checkDate = iprot.readString();
        struct.setCheckDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.attachmentId = iprot.readI32();
        struct.setAttachmentIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list229.size);
          int _elem230;
          for (int _i231 = 0; _i231 < _list229.size; ++_i231)
          {
            _elem230 = iprot.readI32();
            struct.userIds.add(_elem230);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(14)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.recFeeStatus = iprot.readI32();
        struct.setRecFeeStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.collectFileDate = iprot.readString();
        struct.setCollectFileDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.collectFileRemark = iprot.readString();
        struct.setCollectFileRemarkIsSet(true);
      }
      if (incoming.get(19)) {
        struct.collectFileStatus = iprot.readI32();
        struct.setCollectFileStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.checkLitigationId = iprot.readI32();
        struct.setCheckLitigationIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.checkLitigationStatus = iprot.readI32();
        struct.setCheckLitigationStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.checkLitigationApprovalStatus = iprot.readI32();
        struct.setCheckLitigationApprovalStatusIsSet(true);
      }
      if (incoming.get(23)) {
        struct.projectForeclosureStatus = iprot.readI32();
        struct.setProjectForeclosureStatusIsSet(true);
      }
      if (incoming.get(24)) {
        struct.performJobRemarkDate = iprot.readString();
        struct.setPerformJobRemarkDateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.performJobRemark = iprot.readString();
        struct.setPerformJobRemarkIsSet(true);
      }
      if (incoming.get(26)) {
        struct.performJobRemarkStatus = iprot.readI32();
        struct.setPerformJobRemarkStatusIsSet(true);
      }
      if (incoming.get(27)) {
        struct.reCheckStatus = iprot.readI32();
        struct.setReCheckStatusIsSet(true);
      }
      if (incoming.get(28)) {
        struct.reCheckRemark = iprot.readString();
        struct.setReCheckRemarkIsSet(true);
      }
      if (incoming.get(29)) {
        struct.refundFileStatus = iprot.readI32();
        struct.setRefundFileStatusIsSet(true);
      }
      if (incoming.get(30)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(31)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(32)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(33)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(34)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(35)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(36)) {
        struct.loanDays = iprot.readI32();
        struct.setLoanDaysIsSet(true);
      }
      if (incoming.get(37)) {
        struct.loanRepaymentStatus = iprot.readI32();
        struct.setLoanRepaymentStatusIsSet(true);
      }
      if (incoming.get(38)) {
        struct.checkStatusStr = iprot.readString();
        struct.setCheckStatusStrIsSet(true);
      }
      if (incoming.get(39)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(40)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(41)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(42)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(43)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
    }
  }

}


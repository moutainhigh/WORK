/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComBalanceSheetMeta implements org.apache.thrift.TBase<CusComBalanceSheetMeta, CusComBalanceSheetMeta._Fields>, java.io.Serializable, Cloneable, Comparable<CusComBalanceSheetMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComBalanceSheetMeta");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNTS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountsCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNTS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accountsName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_SUBTRACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("isSubtraction", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("isInput", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_CACL_FIELD_DESC = new org.apache.thrift.protocol.TField("isCacl", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BS_REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bsReportId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComBalanceSheetMetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComBalanceSheetMetaTupleSchemeFactory());
  }

  public int pid; // required
  public int accountsCode; // required
  public String accountsName; // required
  public int lineNum; // required
  public int isSubtraction; // required
  public int isInput; // required
  public int isCacl; // required
  public int status; // required
  public int bsReportId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACCOUNTS_CODE((short)2, "accountsCode"),
    ACCOUNTS_NAME((short)3, "accountsName"),
    LINE_NUM((short)4, "lineNum"),
    IS_SUBTRACTION((short)5, "isSubtraction"),
    IS_INPUT((short)6, "isInput"),
    IS_CACL((short)7, "isCacl"),
    STATUS((short)8, "status"),
    BS_REPORT_ID((short)9, "bsReportId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACCOUNTS_CODE
          return ACCOUNTS_CODE;
        case 3: // ACCOUNTS_NAME
          return ACCOUNTS_NAME;
        case 4: // LINE_NUM
          return LINE_NUM;
        case 5: // IS_SUBTRACTION
          return IS_SUBTRACTION;
        case 6: // IS_INPUT
          return IS_INPUT;
        case 7: // IS_CACL
          return IS_CACL;
        case 8: // STATUS
          return STATUS;
        case 9: // BS_REPORT_ID
          return BS_REPORT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCOUNTSCODE_ISSET_ID = 1;
  private static final int __LINENUM_ISSET_ID = 2;
  private static final int __ISSUBTRACTION_ISSET_ID = 3;
  private static final int __ISINPUT_ISSET_ID = 4;
  private static final int __ISCACL_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __BSREPORTID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNTS_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountsCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNTS_NAME, new org.apache.thrift.meta_data.FieldMetaData("accountsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_NUM, new org.apache.thrift.meta_data.FieldMetaData("lineNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SUBTRACTION, new org.apache.thrift.meta_data.FieldMetaData("isSubtraction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_INPUT, new org.apache.thrift.meta_data.FieldMetaData("isInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CACL, new org.apache.thrift.meta_data.FieldMetaData("isCacl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BS_REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("bsReportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComBalanceSheetMeta.class, metaDataMap);
  }

  public CusComBalanceSheetMeta() {
  }

  public CusComBalanceSheetMeta(
    int pid,
    int accountsCode,
    String accountsName,
    int lineNum,
    int isSubtraction,
    int isInput,
    int isCacl,
    int status,
    int bsReportId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.accountsCode = accountsCode;
    setAccountsCodeIsSet(true);
    this.accountsName = accountsName;
    this.lineNum = lineNum;
    setLineNumIsSet(true);
    this.isSubtraction = isSubtraction;
    setIsSubtractionIsSet(true);
    this.isInput = isInput;
    setIsInputIsSet(true);
    this.isCacl = isCacl;
    setIsCaclIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.bsReportId = bsReportId;
    setBsReportIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComBalanceSheetMeta(CusComBalanceSheetMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.accountsCode = other.accountsCode;
    if (other.isSetAccountsName()) {
      this.accountsName = other.accountsName;
    }
    this.lineNum = other.lineNum;
    this.isSubtraction = other.isSubtraction;
    this.isInput = other.isInput;
    this.isCacl = other.isCacl;
    this.status = other.status;
    this.bsReportId = other.bsReportId;
  }

  public CusComBalanceSheetMeta deepCopy() {
    return new CusComBalanceSheetMeta(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setAccountsCodeIsSet(false);
    this.accountsCode = 0;
    this.accountsName = null;
    setLineNumIsSet(false);
    this.lineNum = 0;
    setIsSubtractionIsSet(false);
    this.isSubtraction = 0;
    setIsInputIsSet(false);
    this.isInput = 0;
    setIsCaclIsSet(false);
    this.isCacl = 0;
    setStatusIsSet(false);
    this.status = 0;
    setBsReportIdIsSet(false);
    this.bsReportId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComBalanceSheetMeta setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getAccountsCode() {
    return this.accountsCode;
  }

  public CusComBalanceSheetMeta setAccountsCode(int accountsCode) {
    this.accountsCode = accountsCode;
    setAccountsCodeIsSet(true);
    return this;
  }

  public void unsetAccountsCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTSCODE_ISSET_ID);
  }

  /** Returns true if field accountsCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountsCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTSCODE_ISSET_ID);
  }

  public void setAccountsCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTSCODE_ISSET_ID, value);
  }

  public String getAccountsName() {
    return this.accountsName;
  }

  public CusComBalanceSheetMeta setAccountsName(String accountsName) {
    this.accountsName = accountsName;
    return this;
  }

  public void unsetAccountsName() {
    this.accountsName = null;
  }

  /** Returns true if field accountsName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountsName() {
    return this.accountsName != null;
  }

  public void setAccountsNameIsSet(boolean value) {
    if (!value) {
      this.accountsName = null;
    }
  }

  public int getLineNum() {
    return this.lineNum;
  }

  public CusComBalanceSheetMeta setLineNum(int lineNum) {
    this.lineNum = lineNum;
    setLineNumIsSet(true);
    return this;
  }

  public void unsetLineNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINENUM_ISSET_ID);
  }

  /** Returns true if field lineNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLineNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LINENUM_ISSET_ID);
  }

  public void setLineNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINENUM_ISSET_ID, value);
  }

  public int getIsSubtraction() {
    return this.isSubtraction;
  }

  public CusComBalanceSheetMeta setIsSubtraction(int isSubtraction) {
    this.isSubtraction = isSubtraction;
    setIsSubtractionIsSet(true);
    return this;
  }

  public void unsetIsSubtraction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUBTRACTION_ISSET_ID);
  }

  /** Returns true if field isSubtraction is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSubtraction() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUBTRACTION_ISSET_ID);
  }

  public void setIsSubtractionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUBTRACTION_ISSET_ID, value);
  }

  public int getIsInput() {
    return this.isInput;
  }

  public CusComBalanceSheetMeta setIsInput(int isInput) {
    this.isInput = isInput;
    setIsInputIsSet(true);
    return this;
  }

  public void unsetIsInput() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISINPUT_ISSET_ID);
  }

  /** Returns true if field isInput is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInput() {
    return EncodingUtils.testBit(__isset_bitfield, __ISINPUT_ISSET_ID);
  }

  public void setIsInputIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISINPUT_ISSET_ID, value);
  }

  public int getIsCacl() {
    return this.isCacl;
  }

  public CusComBalanceSheetMeta setIsCacl(int isCacl) {
    this.isCacl = isCacl;
    setIsCaclIsSet(true);
    return this;
  }

  public void unsetIsCacl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCACL_ISSET_ID);
  }

  /** Returns true if field isCacl is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCacl() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCACL_ISSET_ID);
  }

  public void setIsCaclIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCACL_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusComBalanceSheetMeta setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getBsReportId() {
    return this.bsReportId;
  }

  public CusComBalanceSheetMeta setBsReportId(int bsReportId) {
    this.bsReportId = bsReportId;
    setBsReportIdIsSet(true);
    return this;
  }

  public void unsetBsReportId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BSREPORTID_ISSET_ID);
  }

  /** Returns true if field bsReportId is set (has been assigned a value) and false otherwise */
  public boolean isSetBsReportId() {
    return EncodingUtils.testBit(__isset_bitfield, __BSREPORTID_ISSET_ID);
  }

  public void setBsReportIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BSREPORTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACCOUNTS_CODE:
      if (value == null) {
        unsetAccountsCode();
      } else {
        setAccountsCode((Integer)value);
      }
      break;

    case ACCOUNTS_NAME:
      if (value == null) {
        unsetAccountsName();
      } else {
        setAccountsName((String)value);
      }
      break;

    case LINE_NUM:
      if (value == null) {
        unsetLineNum();
      } else {
        setLineNum((Integer)value);
      }
      break;

    case IS_SUBTRACTION:
      if (value == null) {
        unsetIsSubtraction();
      } else {
        setIsSubtraction((Integer)value);
      }
      break;

    case IS_INPUT:
      if (value == null) {
        unsetIsInput();
      } else {
        setIsInput((Integer)value);
      }
      break;

    case IS_CACL:
      if (value == null) {
        unsetIsCacl();
      } else {
        setIsCacl((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case BS_REPORT_ID:
      if (value == null) {
        unsetBsReportId();
      } else {
        setBsReportId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACCOUNTS_CODE:
      return Integer.valueOf(getAccountsCode());

    case ACCOUNTS_NAME:
      return getAccountsName();

    case LINE_NUM:
      return Integer.valueOf(getLineNum());

    case IS_SUBTRACTION:
      return Integer.valueOf(getIsSubtraction());

    case IS_INPUT:
      return Integer.valueOf(getIsInput());

    case IS_CACL:
      return Integer.valueOf(getIsCacl());

    case STATUS:
      return Integer.valueOf(getStatus());

    case BS_REPORT_ID:
      return Integer.valueOf(getBsReportId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACCOUNTS_CODE:
      return isSetAccountsCode();
    case ACCOUNTS_NAME:
      return isSetAccountsName();
    case LINE_NUM:
      return isSetLineNum();
    case IS_SUBTRACTION:
      return isSetIsSubtraction();
    case IS_INPUT:
      return isSetIsInput();
    case IS_CACL:
      return isSetIsCacl();
    case STATUS:
      return isSetStatus();
    case BS_REPORT_ID:
      return isSetBsReportId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComBalanceSheetMeta)
      return this.equals((CusComBalanceSheetMeta)that);
    return false;
  }

  public boolean equals(CusComBalanceSheetMeta that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_accountsCode = true;
    boolean that_present_accountsCode = true;
    if (this_present_accountsCode || that_present_accountsCode) {
      if (!(this_present_accountsCode && that_present_accountsCode))
        return false;
      if (this.accountsCode != that.accountsCode)
        return false;
    }

    boolean this_present_accountsName = true && this.isSetAccountsName();
    boolean that_present_accountsName = true && that.isSetAccountsName();
    if (this_present_accountsName || that_present_accountsName) {
      if (!(this_present_accountsName && that_present_accountsName))
        return false;
      if (!this.accountsName.equals(that.accountsName))
        return false;
    }

    boolean this_present_lineNum = true;
    boolean that_present_lineNum = true;
    if (this_present_lineNum || that_present_lineNum) {
      if (!(this_present_lineNum && that_present_lineNum))
        return false;
      if (this.lineNum != that.lineNum)
        return false;
    }

    boolean this_present_isSubtraction = true;
    boolean that_present_isSubtraction = true;
    if (this_present_isSubtraction || that_present_isSubtraction) {
      if (!(this_present_isSubtraction && that_present_isSubtraction))
        return false;
      if (this.isSubtraction != that.isSubtraction)
        return false;
    }

    boolean this_present_isInput = true;
    boolean that_present_isInput = true;
    if (this_present_isInput || that_present_isInput) {
      if (!(this_present_isInput && that_present_isInput))
        return false;
      if (this.isInput != that.isInput)
        return false;
    }

    boolean this_present_isCacl = true;
    boolean that_present_isCacl = true;
    if (this_present_isCacl || that_present_isCacl) {
      if (!(this_present_isCacl && that_present_isCacl))
        return false;
      if (this.isCacl != that.isCacl)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_bsReportId = true;
    boolean that_present_bsReportId = true;
    if (this_present_bsReportId || that_present_bsReportId) {
      if (!(this_present_bsReportId && that_present_bsReportId))
        return false;
      if (this.bsReportId != that.bsReportId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_accountsCode = true;
    list.add(present_accountsCode);
    if (present_accountsCode)
      list.add(accountsCode);

    boolean present_accountsName = true && (isSetAccountsName());
    list.add(present_accountsName);
    if (present_accountsName)
      list.add(accountsName);

    boolean present_lineNum = true;
    list.add(present_lineNum);
    if (present_lineNum)
      list.add(lineNum);

    boolean present_isSubtraction = true;
    list.add(present_isSubtraction);
    if (present_isSubtraction)
      list.add(isSubtraction);

    boolean present_isInput = true;
    list.add(present_isInput);
    if (present_isInput)
      list.add(isInput);

    boolean present_isCacl = true;
    list.add(present_isCacl);
    if (present_isCacl)
      list.add(isCacl);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_bsReportId = true;
    list.add(present_bsReportId);
    if (present_bsReportId)
      list.add(bsReportId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComBalanceSheetMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountsCode()).compareTo(other.isSetAccountsCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountsCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountsCode, other.accountsCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountsName()).compareTo(other.isSetAccountsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountsName, other.accountsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineNum()).compareTo(other.isSetLineNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNum, other.lineNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSubtraction()).compareTo(other.isSetIsSubtraction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSubtraction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSubtraction, other.isSubtraction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInput()).compareTo(other.isSetIsInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInput, other.isInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCacl()).compareTo(other.isSetIsCacl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCacl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCacl, other.isCacl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBsReportId()).compareTo(other.isSetBsReportId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBsReportId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsReportId, other.bsReportId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComBalanceSheetMeta(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountsCode:");
    sb.append(this.accountsCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountsName:");
    if (this.accountsName == null) {
      sb.append("null");
    } else {
      sb.append(this.accountsName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineNum:");
    sb.append(this.lineNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSubtraction:");
    sb.append(this.isSubtraction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInput:");
    sb.append(this.isInput);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCacl:");
    sb.append(this.isCacl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bsReportId:");
    sb.append(this.bsReportId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComBalanceSheetMetaStandardSchemeFactory implements SchemeFactory {
    public CusComBalanceSheetMetaStandardScheme getScheme() {
      return new CusComBalanceSheetMetaStandardScheme();
    }
  }

  private static class CusComBalanceSheetMetaStandardScheme extends StandardScheme<CusComBalanceSheetMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComBalanceSheetMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNTS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountsCode = iprot.readI32();
              struct.setAccountsCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOUNTS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountsName = iprot.readString();
              struct.setAccountsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lineNum = iprot.readI32();
              struct.setLineNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_SUBTRACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSubtraction = iprot.readI32();
              struct.setIsSubtractionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isInput = iprot.readI32();
              struct.setIsInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_CACL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isCacl = iprot.readI32();
              struct.setIsCaclIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BS_REPORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bsReportId = iprot.readI32();
              struct.setBsReportIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComBalanceSheetMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNTS_CODE_FIELD_DESC);
      oprot.writeI32(struct.accountsCode);
      oprot.writeFieldEnd();
      if (struct.accountsName != null) {
        oprot.writeFieldBegin(ACCOUNTS_NAME_FIELD_DESC);
        oprot.writeString(struct.accountsName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LINE_NUM_FIELD_DESC);
      oprot.writeI32(struct.lineNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SUBTRACTION_FIELD_DESC);
      oprot.writeI32(struct.isSubtraction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_INPUT_FIELD_DESC);
      oprot.writeI32(struct.isInput);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CACL_FIELD_DESC);
      oprot.writeI32(struct.isCacl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BS_REPORT_ID_FIELD_DESC);
      oprot.writeI32(struct.bsReportId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComBalanceSheetMetaTupleSchemeFactory implements SchemeFactory {
    public CusComBalanceSheetMetaTupleScheme getScheme() {
      return new CusComBalanceSheetMetaTupleScheme();
    }
  }

  private static class CusComBalanceSheetMetaTupleScheme extends TupleScheme<CusComBalanceSheetMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComBalanceSheetMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAccountsCode()) {
        optionals.set(1);
      }
      if (struct.isSetAccountsName()) {
        optionals.set(2);
      }
      if (struct.isSetLineNum()) {
        optionals.set(3);
      }
      if (struct.isSetIsSubtraction()) {
        optionals.set(4);
      }
      if (struct.isSetIsInput()) {
        optionals.set(5);
      }
      if (struct.isSetIsCacl()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetBsReportId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAccountsCode()) {
        oprot.writeI32(struct.accountsCode);
      }
      if (struct.isSetAccountsName()) {
        oprot.writeString(struct.accountsName);
      }
      if (struct.isSetLineNum()) {
        oprot.writeI32(struct.lineNum);
      }
      if (struct.isSetIsSubtraction()) {
        oprot.writeI32(struct.isSubtraction);
      }
      if (struct.isSetIsInput()) {
        oprot.writeI32(struct.isInput);
      }
      if (struct.isSetIsCacl()) {
        oprot.writeI32(struct.isCacl);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetBsReportId()) {
        oprot.writeI32(struct.bsReportId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComBalanceSheetMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.accountsCode = iprot.readI32();
        struct.setAccountsCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accountsName = iprot.readString();
        struct.setAccountsNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lineNum = iprot.readI32();
        struct.setLineNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isSubtraction = iprot.readI32();
        struct.setIsSubtractionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isInput = iprot.readI32();
        struct.setIsInputIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isCacl = iprot.readI32();
        struct.setIsCaclIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bsReportId = iprot.readI32();
        struct.setBsReportIdIsSet(true);
      }
    }
  }

}


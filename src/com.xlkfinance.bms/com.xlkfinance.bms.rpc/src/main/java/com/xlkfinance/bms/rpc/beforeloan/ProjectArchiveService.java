/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ProjectArchiveService {

  public interface Iface {

    public int saveBizProjectArchive(BizProjectArchive bizProjectArchive) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateBizProjectArchive(BizProjectArchive bizProjectArchive) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public BizProjectArchive obtainBizProjectArchiveByPID(int pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<BizProjectArchive> obtainBizProjectArchiveByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteBizProjectArchiveByPid(int pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int saveBizProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<ProjectArchiveFileDTO> obtainBizProjectArchiveFileByArchiveId(int archiveId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public ProjectArchiveFileDTO obtainProjectArchiveFileDTOByFileId(int fileId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteBizProjectArchiveFileByArchiveId(int archiveId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteBizProjectArchiveFileByFileId(int fileId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveBizProjectArchive(BizProjectArchive bizProjectArchive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizProjectArchive(BizProjectArchive bizProjectArchive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainBizProjectArchiveByPID(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainBizProjectArchiveByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBizProjectArchiveByPid(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBizProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainBizProjectArchiveFileByArchiveId(int archiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainProjectArchiveFileDTOByFileId(int fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBizProjectArchiveFileByArchiveId(int archiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBizProjectArchiveFileByFileId(int fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int saveBizProjectArchive(BizProjectArchive bizProjectArchive) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveBizProjectArchive(bizProjectArchive);
      return recv_saveBizProjectArchive();
    }

    public void send_saveBizProjectArchive(BizProjectArchive bizProjectArchive) throws org.apache.thrift.TException
    {
      saveBizProjectArchive_args args = new saveBizProjectArchive_args();
      args.setBizProjectArchive(bizProjectArchive);
      sendBase("saveBizProjectArchive", args);
    }

    public int recv_saveBizProjectArchive() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveBizProjectArchive_result result = new saveBizProjectArchive_result();
      receiveBase(result, "saveBizProjectArchive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveBizProjectArchive failed: unknown result");
    }

    public int updateBizProjectArchive(BizProjectArchive bizProjectArchive) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateBizProjectArchive(bizProjectArchive);
      return recv_updateBizProjectArchive();
    }

    public void send_updateBizProjectArchive(BizProjectArchive bizProjectArchive) throws org.apache.thrift.TException
    {
      updateBizProjectArchive_args args = new updateBizProjectArchive_args();
      args.setBizProjectArchive(bizProjectArchive);
      sendBase("updateBizProjectArchive", args);
    }

    public int recv_updateBizProjectArchive() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateBizProjectArchive_result result = new updateBizProjectArchive_result();
      receiveBase(result, "updateBizProjectArchive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizProjectArchive failed: unknown result");
    }

    public BizProjectArchive obtainBizProjectArchiveByPID(int pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainBizProjectArchiveByPID(pid);
      return recv_obtainBizProjectArchiveByPID();
    }

    public void send_obtainBizProjectArchiveByPID(int pid) throws org.apache.thrift.TException
    {
      obtainBizProjectArchiveByPID_args args = new obtainBizProjectArchiveByPID_args();
      args.setPid(pid);
      sendBase("obtainBizProjectArchiveByPID", args);
    }

    public BizProjectArchive recv_obtainBizProjectArchiveByPID() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainBizProjectArchiveByPID_result result = new obtainBizProjectArchiveByPID_result();
      receiveBase(result, "obtainBizProjectArchiveByPID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainBizProjectArchiveByPID failed: unknown result");
    }

    public List<BizProjectArchive> obtainBizProjectArchiveByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainBizProjectArchiveByProjectId(projectId);
      return recv_obtainBizProjectArchiveByProjectId();
    }

    public void send_obtainBizProjectArchiveByProjectId(int projectId) throws org.apache.thrift.TException
    {
      obtainBizProjectArchiveByProjectId_args args = new obtainBizProjectArchiveByProjectId_args();
      args.setProjectId(projectId);
      sendBase("obtainBizProjectArchiveByProjectId", args);
    }

    public List<BizProjectArchive> recv_obtainBizProjectArchiveByProjectId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainBizProjectArchiveByProjectId_result result = new obtainBizProjectArchiveByProjectId_result();
      receiveBase(result, "obtainBizProjectArchiveByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainBizProjectArchiveByProjectId failed: unknown result");
    }

    public int deleteBizProjectArchiveByPid(int pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteBizProjectArchiveByPid(pid);
      return recv_deleteBizProjectArchiveByPid();
    }

    public void send_deleteBizProjectArchiveByPid(int pid) throws org.apache.thrift.TException
    {
      deleteBizProjectArchiveByPid_args args = new deleteBizProjectArchiveByPid_args();
      args.setPid(pid);
      sendBase("deleteBizProjectArchiveByPid", args);
    }

    public int recv_deleteBizProjectArchiveByPid() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteBizProjectArchiveByPid_result result = new deleteBizProjectArchiveByPid_result();
      receiveBase(result, "deleteBizProjectArchiveByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBizProjectArchiveByPid failed: unknown result");
    }

    public int saveBizProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveBizProjectArchiveFile(bizProjectArchiveFile);
      return recv_saveBizProjectArchiveFile();
    }

    public void send_saveBizProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) throws org.apache.thrift.TException
    {
      saveBizProjectArchiveFile_args args = new saveBizProjectArchiveFile_args();
      args.setBizProjectArchiveFile(bizProjectArchiveFile);
      sendBase("saveBizProjectArchiveFile", args);
    }

    public int recv_saveBizProjectArchiveFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveBizProjectArchiveFile_result result = new saveBizProjectArchiveFile_result();
      receiveBase(result, "saveBizProjectArchiveFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveBizProjectArchiveFile failed: unknown result");
    }

    public List<ProjectArchiveFileDTO> obtainBizProjectArchiveFileByArchiveId(int archiveId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainBizProjectArchiveFileByArchiveId(archiveId);
      return recv_obtainBizProjectArchiveFileByArchiveId();
    }

    public void send_obtainBizProjectArchiveFileByArchiveId(int archiveId) throws org.apache.thrift.TException
    {
      obtainBizProjectArchiveFileByArchiveId_args args = new obtainBizProjectArchiveFileByArchiveId_args();
      args.setArchiveId(archiveId);
      sendBase("obtainBizProjectArchiveFileByArchiveId", args);
    }

    public List<ProjectArchiveFileDTO> recv_obtainBizProjectArchiveFileByArchiveId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainBizProjectArchiveFileByArchiveId_result result = new obtainBizProjectArchiveFileByArchiveId_result();
      receiveBase(result, "obtainBizProjectArchiveFileByArchiveId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainBizProjectArchiveFileByArchiveId failed: unknown result");
    }

    public ProjectArchiveFileDTO obtainProjectArchiveFileDTOByFileId(int fileId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainProjectArchiveFileDTOByFileId(fileId);
      return recv_obtainProjectArchiveFileDTOByFileId();
    }

    public void send_obtainProjectArchiveFileDTOByFileId(int fileId) throws org.apache.thrift.TException
    {
      obtainProjectArchiveFileDTOByFileId_args args = new obtainProjectArchiveFileDTOByFileId_args();
      args.setFileId(fileId);
      sendBase("obtainProjectArchiveFileDTOByFileId", args);
    }

    public ProjectArchiveFileDTO recv_obtainProjectArchiveFileDTOByFileId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainProjectArchiveFileDTOByFileId_result result = new obtainProjectArchiveFileDTOByFileId_result();
      receiveBase(result, "obtainProjectArchiveFileDTOByFileId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainProjectArchiveFileDTOByFileId failed: unknown result");
    }

    public int updateProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateProjectArchiveFile(bizProjectArchiveFile);
      return recv_updateProjectArchiveFile();
    }

    public void send_updateProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) throws org.apache.thrift.TException
    {
      updateProjectArchiveFile_args args = new updateProjectArchiveFile_args();
      args.setBizProjectArchiveFile(bizProjectArchiveFile);
      sendBase("updateProjectArchiveFile", args);
    }

    public int recv_updateProjectArchiveFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateProjectArchiveFile_result result = new updateProjectArchiveFile_result();
      receiveBase(result, "updateProjectArchiveFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProjectArchiveFile failed: unknown result");
    }

    public int deleteBizProjectArchiveFileByArchiveId(int archiveId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteBizProjectArchiveFileByArchiveId(archiveId);
      return recv_deleteBizProjectArchiveFileByArchiveId();
    }

    public void send_deleteBizProjectArchiveFileByArchiveId(int archiveId) throws org.apache.thrift.TException
    {
      deleteBizProjectArchiveFileByArchiveId_args args = new deleteBizProjectArchiveFileByArchiveId_args();
      args.setArchiveId(archiveId);
      sendBase("deleteBizProjectArchiveFileByArchiveId", args);
    }

    public int recv_deleteBizProjectArchiveFileByArchiveId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteBizProjectArchiveFileByArchiveId_result result = new deleteBizProjectArchiveFileByArchiveId_result();
      receiveBase(result, "deleteBizProjectArchiveFileByArchiveId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBizProjectArchiveFileByArchiveId failed: unknown result");
    }

    public int deleteBizProjectArchiveFileByFileId(int fileId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteBizProjectArchiveFileByFileId(fileId);
      return recv_deleteBizProjectArchiveFileByFileId();
    }

    public void send_deleteBizProjectArchiveFileByFileId(int fileId) throws org.apache.thrift.TException
    {
      deleteBizProjectArchiveFileByFileId_args args = new deleteBizProjectArchiveFileByFileId_args();
      args.setFileId(fileId);
      sendBase("deleteBizProjectArchiveFileByFileId", args);
    }

    public int recv_deleteBizProjectArchiveFileByFileId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteBizProjectArchiveFileByFileId_result result = new deleteBizProjectArchiveFileByFileId_result();
      receiveBase(result, "deleteBizProjectArchiveFileByFileId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBizProjectArchiveFileByFileId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveBizProjectArchive(BizProjectArchive bizProjectArchive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBizProjectArchive_call method_call = new saveBizProjectArchive_call(bizProjectArchive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBizProjectArchive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectArchive bizProjectArchive;
      public saveBizProjectArchive_call(BizProjectArchive bizProjectArchive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectArchive = bizProjectArchive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBizProjectArchive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBizProjectArchive_args args = new saveBizProjectArchive_args();
        args.setBizProjectArchive(bizProjectArchive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveBizProjectArchive();
      }
    }

    public void updateBizProjectArchive(BizProjectArchive bizProjectArchive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizProjectArchive_call method_call = new updateBizProjectArchive_call(bizProjectArchive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizProjectArchive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectArchive bizProjectArchive;
      public updateBizProjectArchive_call(BizProjectArchive bizProjectArchive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectArchive = bizProjectArchive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizProjectArchive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizProjectArchive_args args = new updateBizProjectArchive_args();
        args.setBizProjectArchive(bizProjectArchive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizProjectArchive();
      }
    }

    public void obtainBizProjectArchiveByPID(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainBizProjectArchiveByPID_call method_call = new obtainBizProjectArchiveByPID_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainBizProjectArchiveByPID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public obtainBizProjectArchiveByPID_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainBizProjectArchiveByPID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainBizProjectArchiveByPID_args args = new obtainBizProjectArchiveByPID_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BizProjectArchive getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainBizProjectArchiveByPID();
      }
    }

    public void obtainBizProjectArchiveByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainBizProjectArchiveByProjectId_call method_call = new obtainBizProjectArchiveByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainBizProjectArchiveByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public obtainBizProjectArchiveByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainBizProjectArchiveByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainBizProjectArchiveByProjectId_args args = new obtainBizProjectArchiveByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BizProjectArchive> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainBizProjectArchiveByProjectId();
      }
    }

    public void deleteBizProjectArchiveByPid(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBizProjectArchiveByPid_call method_call = new deleteBizProjectArchiveByPid_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBizProjectArchiveByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public deleteBizProjectArchiveByPid_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBizProjectArchiveByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBizProjectArchiveByPid_args args = new deleteBizProjectArchiveByPid_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBizProjectArchiveByPid();
      }
    }

    public void saveBizProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBizProjectArchiveFile_call method_call = new saveBizProjectArchiveFile_call(bizProjectArchiveFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBizProjectArchiveFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectArchiveFile bizProjectArchiveFile;
      public saveBizProjectArchiveFile_call(BizProjectArchiveFile bizProjectArchiveFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectArchiveFile = bizProjectArchiveFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBizProjectArchiveFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBizProjectArchiveFile_args args = new saveBizProjectArchiveFile_args();
        args.setBizProjectArchiveFile(bizProjectArchiveFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveBizProjectArchiveFile();
      }
    }

    public void obtainBizProjectArchiveFileByArchiveId(int archiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainBizProjectArchiveFileByArchiveId_call method_call = new obtainBizProjectArchiveFileByArchiveId_call(archiveId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainBizProjectArchiveFileByArchiveId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int archiveId;
      public obtainBizProjectArchiveFileByArchiveId_call(int archiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.archiveId = archiveId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainBizProjectArchiveFileByArchiveId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainBizProjectArchiveFileByArchiveId_args args = new obtainBizProjectArchiveFileByArchiveId_args();
        args.setArchiveId(archiveId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectArchiveFileDTO> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainBizProjectArchiveFileByArchiveId();
      }
    }

    public void obtainProjectArchiveFileDTOByFileId(int fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainProjectArchiveFileDTOByFileId_call method_call = new obtainProjectArchiveFileDTOByFileId_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainProjectArchiveFileDTOByFileId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int fileId;
      public obtainProjectArchiveFileDTOByFileId_call(int fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainProjectArchiveFileDTOByFileId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainProjectArchiveFileDTOByFileId_args args = new obtainProjectArchiveFileDTOByFileId_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProjectArchiveFileDTO getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainProjectArchiveFileDTOByFileId();
      }
    }

    public void updateProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProjectArchiveFile_call method_call = new updateProjectArchiveFile_call(bizProjectArchiveFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProjectArchiveFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizProjectArchiveFile bizProjectArchiveFile;
      public updateProjectArchiveFile_call(BizProjectArchiveFile bizProjectArchiveFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizProjectArchiveFile = bizProjectArchiveFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProjectArchiveFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProjectArchiveFile_args args = new updateProjectArchiveFile_args();
        args.setBizProjectArchiveFile(bizProjectArchiveFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProjectArchiveFile();
      }
    }

    public void deleteBizProjectArchiveFileByArchiveId(int archiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBizProjectArchiveFileByArchiveId_call method_call = new deleteBizProjectArchiveFileByArchiveId_call(archiveId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBizProjectArchiveFileByArchiveId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int archiveId;
      public deleteBizProjectArchiveFileByArchiveId_call(int archiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.archiveId = archiveId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBizProjectArchiveFileByArchiveId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBizProjectArchiveFileByArchiveId_args args = new deleteBizProjectArchiveFileByArchiveId_args();
        args.setArchiveId(archiveId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBizProjectArchiveFileByArchiveId();
      }
    }

    public void deleteBizProjectArchiveFileByFileId(int fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBizProjectArchiveFileByFileId_call method_call = new deleteBizProjectArchiveFileByFileId_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBizProjectArchiveFileByFileId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int fileId;
      public deleteBizProjectArchiveFileByFileId_call(int fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBizProjectArchiveFileByFileId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBizProjectArchiveFileByFileId_args args = new deleteBizProjectArchiveFileByFileId_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBizProjectArchiveFileByFileId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveBizProjectArchive", new saveBizProjectArchive());
      processMap.put("updateBizProjectArchive", new updateBizProjectArchive());
      processMap.put("obtainBizProjectArchiveByPID", new obtainBizProjectArchiveByPID());
      processMap.put("obtainBizProjectArchiveByProjectId", new obtainBizProjectArchiveByProjectId());
      processMap.put("deleteBizProjectArchiveByPid", new deleteBizProjectArchiveByPid());
      processMap.put("saveBizProjectArchiveFile", new saveBizProjectArchiveFile());
      processMap.put("obtainBizProjectArchiveFileByArchiveId", new obtainBizProjectArchiveFileByArchiveId());
      processMap.put("obtainProjectArchiveFileDTOByFileId", new obtainProjectArchiveFileDTOByFileId());
      processMap.put("updateProjectArchiveFile", new updateProjectArchiveFile());
      processMap.put("deleteBizProjectArchiveFileByArchiveId", new deleteBizProjectArchiveFileByArchiveId());
      processMap.put("deleteBizProjectArchiveFileByFileId", new deleteBizProjectArchiveFileByFileId());
      return processMap;
    }

    public static class saveBizProjectArchive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBizProjectArchive_args> {
      public saveBizProjectArchive() {
        super("saveBizProjectArchive");
      }

      public saveBizProjectArchive_args getEmptyArgsInstance() {
        return new saveBizProjectArchive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBizProjectArchive_result getResult(I iface, saveBizProjectArchive_args args) throws org.apache.thrift.TException {
        saveBizProjectArchive_result result = new saveBizProjectArchive_result();
        try {
          result.success = iface.saveBizProjectArchive(args.bizProjectArchive);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateBizProjectArchive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizProjectArchive_args> {
      public updateBizProjectArchive() {
        super("updateBizProjectArchive");
      }

      public updateBizProjectArchive_args getEmptyArgsInstance() {
        return new updateBizProjectArchive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizProjectArchive_result getResult(I iface, updateBizProjectArchive_args args) throws org.apache.thrift.TException {
        updateBizProjectArchive_result result = new updateBizProjectArchive_result();
        try {
          result.success = iface.updateBizProjectArchive(args.bizProjectArchive);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainBizProjectArchiveByPID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainBizProjectArchiveByPID_args> {
      public obtainBizProjectArchiveByPID() {
        super("obtainBizProjectArchiveByPID");
      }

      public obtainBizProjectArchiveByPID_args getEmptyArgsInstance() {
        return new obtainBizProjectArchiveByPID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainBizProjectArchiveByPID_result getResult(I iface, obtainBizProjectArchiveByPID_args args) throws org.apache.thrift.TException {
        obtainBizProjectArchiveByPID_result result = new obtainBizProjectArchiveByPID_result();
        try {
          result.success = iface.obtainBizProjectArchiveByPID(args.pid);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainBizProjectArchiveByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainBizProjectArchiveByProjectId_args> {
      public obtainBizProjectArchiveByProjectId() {
        super("obtainBizProjectArchiveByProjectId");
      }

      public obtainBizProjectArchiveByProjectId_args getEmptyArgsInstance() {
        return new obtainBizProjectArchiveByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainBizProjectArchiveByProjectId_result getResult(I iface, obtainBizProjectArchiveByProjectId_args args) throws org.apache.thrift.TException {
        obtainBizProjectArchiveByProjectId_result result = new obtainBizProjectArchiveByProjectId_result();
        try {
          result.success = iface.obtainBizProjectArchiveByProjectId(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteBizProjectArchiveByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBizProjectArchiveByPid_args> {
      public deleteBizProjectArchiveByPid() {
        super("deleteBizProjectArchiveByPid");
      }

      public deleteBizProjectArchiveByPid_args getEmptyArgsInstance() {
        return new deleteBizProjectArchiveByPid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBizProjectArchiveByPid_result getResult(I iface, deleteBizProjectArchiveByPid_args args) throws org.apache.thrift.TException {
        deleteBizProjectArchiveByPid_result result = new deleteBizProjectArchiveByPid_result();
        try {
          result.success = iface.deleteBizProjectArchiveByPid(args.pid);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveBizProjectArchiveFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBizProjectArchiveFile_args> {
      public saveBizProjectArchiveFile() {
        super("saveBizProjectArchiveFile");
      }

      public saveBizProjectArchiveFile_args getEmptyArgsInstance() {
        return new saveBizProjectArchiveFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBizProjectArchiveFile_result getResult(I iface, saveBizProjectArchiveFile_args args) throws org.apache.thrift.TException {
        saveBizProjectArchiveFile_result result = new saveBizProjectArchiveFile_result();
        try {
          result.success = iface.saveBizProjectArchiveFile(args.bizProjectArchiveFile);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainBizProjectArchiveFileByArchiveId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainBizProjectArchiveFileByArchiveId_args> {
      public obtainBizProjectArchiveFileByArchiveId() {
        super("obtainBizProjectArchiveFileByArchiveId");
      }

      public obtainBizProjectArchiveFileByArchiveId_args getEmptyArgsInstance() {
        return new obtainBizProjectArchiveFileByArchiveId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainBizProjectArchiveFileByArchiveId_result getResult(I iface, obtainBizProjectArchiveFileByArchiveId_args args) throws org.apache.thrift.TException {
        obtainBizProjectArchiveFileByArchiveId_result result = new obtainBizProjectArchiveFileByArchiveId_result();
        try {
          result.success = iface.obtainBizProjectArchiveFileByArchiveId(args.archiveId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainProjectArchiveFileDTOByFileId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainProjectArchiveFileDTOByFileId_args> {
      public obtainProjectArchiveFileDTOByFileId() {
        super("obtainProjectArchiveFileDTOByFileId");
      }

      public obtainProjectArchiveFileDTOByFileId_args getEmptyArgsInstance() {
        return new obtainProjectArchiveFileDTOByFileId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainProjectArchiveFileDTOByFileId_result getResult(I iface, obtainProjectArchiveFileDTOByFileId_args args) throws org.apache.thrift.TException {
        obtainProjectArchiveFileDTOByFileId_result result = new obtainProjectArchiveFileDTOByFileId_result();
        try {
          result.success = iface.obtainProjectArchiveFileDTOByFileId(args.fileId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateProjectArchiveFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProjectArchiveFile_args> {
      public updateProjectArchiveFile() {
        super("updateProjectArchiveFile");
      }

      public updateProjectArchiveFile_args getEmptyArgsInstance() {
        return new updateProjectArchiveFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProjectArchiveFile_result getResult(I iface, updateProjectArchiveFile_args args) throws org.apache.thrift.TException {
        updateProjectArchiveFile_result result = new updateProjectArchiveFile_result();
        try {
          result.success = iface.updateProjectArchiveFile(args.bizProjectArchiveFile);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteBizProjectArchiveFileByArchiveId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBizProjectArchiveFileByArchiveId_args> {
      public deleteBizProjectArchiveFileByArchiveId() {
        super("deleteBizProjectArchiveFileByArchiveId");
      }

      public deleteBizProjectArchiveFileByArchiveId_args getEmptyArgsInstance() {
        return new deleteBizProjectArchiveFileByArchiveId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBizProjectArchiveFileByArchiveId_result getResult(I iface, deleteBizProjectArchiveFileByArchiveId_args args) throws org.apache.thrift.TException {
        deleteBizProjectArchiveFileByArchiveId_result result = new deleteBizProjectArchiveFileByArchiveId_result();
        try {
          result.success = iface.deleteBizProjectArchiveFileByArchiveId(args.archiveId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteBizProjectArchiveFileByFileId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBizProjectArchiveFileByFileId_args> {
      public deleteBizProjectArchiveFileByFileId() {
        super("deleteBizProjectArchiveFileByFileId");
      }

      public deleteBizProjectArchiveFileByFileId_args getEmptyArgsInstance() {
        return new deleteBizProjectArchiveFileByFileId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBizProjectArchiveFileByFileId_result getResult(I iface, deleteBizProjectArchiveFileByFileId_args args) throws org.apache.thrift.TException {
        deleteBizProjectArchiveFileByFileId_result result = new deleteBizProjectArchiveFileByFileId_result();
        try {
          result.success = iface.deleteBizProjectArchiveFileByFileId(args.fileId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveBizProjectArchive", new saveBizProjectArchive());
      processMap.put("updateBizProjectArchive", new updateBizProjectArchive());
      processMap.put("obtainBizProjectArchiveByPID", new obtainBizProjectArchiveByPID());
      processMap.put("obtainBizProjectArchiveByProjectId", new obtainBizProjectArchiveByProjectId());
      processMap.put("deleteBizProjectArchiveByPid", new deleteBizProjectArchiveByPid());
      processMap.put("saveBizProjectArchiveFile", new saveBizProjectArchiveFile());
      processMap.put("obtainBizProjectArchiveFileByArchiveId", new obtainBizProjectArchiveFileByArchiveId());
      processMap.put("obtainProjectArchiveFileDTOByFileId", new obtainProjectArchiveFileDTOByFileId());
      processMap.put("updateProjectArchiveFile", new updateProjectArchiveFile());
      processMap.put("deleteBizProjectArchiveFileByArchiveId", new deleteBizProjectArchiveFileByArchiveId());
      processMap.put("deleteBizProjectArchiveFileByFileId", new deleteBizProjectArchiveFileByFileId());
      return processMap;
    }

    public static class saveBizProjectArchive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBizProjectArchive_args, Integer> {
      public saveBizProjectArchive() {
        super("saveBizProjectArchive");
      }

      public saveBizProjectArchive_args getEmptyArgsInstance() {
        return new saveBizProjectArchive_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveBizProjectArchive_result result = new saveBizProjectArchive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBizProjectArchive_result result = new saveBizProjectArchive_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBizProjectArchive_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveBizProjectArchive(args.bizProjectArchive,resultHandler);
      }
    }

    public static class updateBizProjectArchive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizProjectArchive_args, Integer> {
      public updateBizProjectArchive() {
        super("updateBizProjectArchive");
      }

      public updateBizProjectArchive_args getEmptyArgsInstance() {
        return new updateBizProjectArchive_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateBizProjectArchive_result result = new updateBizProjectArchive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizProjectArchive_result result = new updateBizProjectArchive_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizProjectArchive_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateBizProjectArchive(args.bizProjectArchive,resultHandler);
      }
    }

    public static class obtainBizProjectArchiveByPID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainBizProjectArchiveByPID_args, BizProjectArchive> {
      public obtainBizProjectArchiveByPID() {
        super("obtainBizProjectArchiveByPID");
      }

      public obtainBizProjectArchiveByPID_args getEmptyArgsInstance() {
        return new obtainBizProjectArchiveByPID_args();
      }

      public AsyncMethodCallback<BizProjectArchive> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BizProjectArchive>() { 
          public void onComplete(BizProjectArchive o) {
            obtainBizProjectArchiveByPID_result result = new obtainBizProjectArchiveByPID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainBizProjectArchiveByPID_result result = new obtainBizProjectArchiveByPID_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainBizProjectArchiveByPID_args args, org.apache.thrift.async.AsyncMethodCallback<BizProjectArchive> resultHandler) throws TException {
        iface.obtainBizProjectArchiveByPID(args.pid,resultHandler);
      }
    }

    public static class obtainBizProjectArchiveByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainBizProjectArchiveByProjectId_args, List<BizProjectArchive>> {
      public obtainBizProjectArchiveByProjectId() {
        super("obtainBizProjectArchiveByProjectId");
      }

      public obtainBizProjectArchiveByProjectId_args getEmptyArgsInstance() {
        return new obtainBizProjectArchiveByProjectId_args();
      }

      public AsyncMethodCallback<List<BizProjectArchive>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BizProjectArchive>>() { 
          public void onComplete(List<BizProjectArchive> o) {
            obtainBizProjectArchiveByProjectId_result result = new obtainBizProjectArchiveByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainBizProjectArchiveByProjectId_result result = new obtainBizProjectArchiveByProjectId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainBizProjectArchiveByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<List<BizProjectArchive>> resultHandler) throws TException {
        iface.obtainBizProjectArchiveByProjectId(args.projectId,resultHandler);
      }
    }

    public static class deleteBizProjectArchiveByPid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBizProjectArchiveByPid_args, Integer> {
      public deleteBizProjectArchiveByPid() {
        super("deleteBizProjectArchiveByPid");
      }

      public deleteBizProjectArchiveByPid_args getEmptyArgsInstance() {
        return new deleteBizProjectArchiveByPid_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteBizProjectArchiveByPid_result result = new deleteBizProjectArchiveByPid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBizProjectArchiveByPid_result result = new deleteBizProjectArchiveByPid_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBizProjectArchiveByPid_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteBizProjectArchiveByPid(args.pid,resultHandler);
      }
    }

    public static class saveBizProjectArchiveFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBizProjectArchiveFile_args, Integer> {
      public saveBizProjectArchiveFile() {
        super("saveBizProjectArchiveFile");
      }

      public saveBizProjectArchiveFile_args getEmptyArgsInstance() {
        return new saveBizProjectArchiveFile_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveBizProjectArchiveFile_result result = new saveBizProjectArchiveFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBizProjectArchiveFile_result result = new saveBizProjectArchiveFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBizProjectArchiveFile_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveBizProjectArchiveFile(args.bizProjectArchiveFile,resultHandler);
      }
    }

    public static class obtainBizProjectArchiveFileByArchiveId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainBizProjectArchiveFileByArchiveId_args, List<ProjectArchiveFileDTO>> {
      public obtainBizProjectArchiveFileByArchiveId() {
        super("obtainBizProjectArchiveFileByArchiveId");
      }

      public obtainBizProjectArchiveFileByArchiveId_args getEmptyArgsInstance() {
        return new obtainBizProjectArchiveFileByArchiveId_args();
      }

      public AsyncMethodCallback<List<ProjectArchiveFileDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectArchiveFileDTO>>() { 
          public void onComplete(List<ProjectArchiveFileDTO> o) {
            obtainBizProjectArchiveFileByArchiveId_result result = new obtainBizProjectArchiveFileByArchiveId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainBizProjectArchiveFileByArchiveId_result result = new obtainBizProjectArchiveFileByArchiveId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainBizProjectArchiveFileByArchiveId_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectArchiveFileDTO>> resultHandler) throws TException {
        iface.obtainBizProjectArchiveFileByArchiveId(args.archiveId,resultHandler);
      }
    }

    public static class obtainProjectArchiveFileDTOByFileId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainProjectArchiveFileDTOByFileId_args, ProjectArchiveFileDTO> {
      public obtainProjectArchiveFileDTOByFileId() {
        super("obtainProjectArchiveFileDTOByFileId");
      }

      public obtainProjectArchiveFileDTOByFileId_args getEmptyArgsInstance() {
        return new obtainProjectArchiveFileDTOByFileId_args();
      }

      public AsyncMethodCallback<ProjectArchiveFileDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProjectArchiveFileDTO>() { 
          public void onComplete(ProjectArchiveFileDTO o) {
            obtainProjectArchiveFileDTOByFileId_result result = new obtainProjectArchiveFileDTOByFileId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainProjectArchiveFileDTOByFileId_result result = new obtainProjectArchiveFileDTOByFileId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainProjectArchiveFileDTOByFileId_args args, org.apache.thrift.async.AsyncMethodCallback<ProjectArchiveFileDTO> resultHandler) throws TException {
        iface.obtainProjectArchiveFileDTOByFileId(args.fileId,resultHandler);
      }
    }

    public static class updateProjectArchiveFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProjectArchiveFile_args, Integer> {
      public updateProjectArchiveFile() {
        super("updateProjectArchiveFile");
      }

      public updateProjectArchiveFile_args getEmptyArgsInstance() {
        return new updateProjectArchiveFile_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateProjectArchiveFile_result result = new updateProjectArchiveFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProjectArchiveFile_result result = new updateProjectArchiveFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProjectArchiveFile_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateProjectArchiveFile(args.bizProjectArchiveFile,resultHandler);
      }
    }

    public static class deleteBizProjectArchiveFileByArchiveId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBizProjectArchiveFileByArchiveId_args, Integer> {
      public deleteBizProjectArchiveFileByArchiveId() {
        super("deleteBizProjectArchiveFileByArchiveId");
      }

      public deleteBizProjectArchiveFileByArchiveId_args getEmptyArgsInstance() {
        return new deleteBizProjectArchiveFileByArchiveId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteBizProjectArchiveFileByArchiveId_result result = new deleteBizProjectArchiveFileByArchiveId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBizProjectArchiveFileByArchiveId_result result = new deleteBizProjectArchiveFileByArchiveId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBizProjectArchiveFileByArchiveId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteBizProjectArchiveFileByArchiveId(args.archiveId,resultHandler);
      }
    }

    public static class deleteBizProjectArchiveFileByFileId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBizProjectArchiveFileByFileId_args, Integer> {
      public deleteBizProjectArchiveFileByFileId() {
        super("deleteBizProjectArchiveFileByFileId");
      }

      public deleteBizProjectArchiveFileByFileId_args getEmptyArgsInstance() {
        return new deleteBizProjectArchiveFileByFileId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteBizProjectArchiveFileByFileId_result result = new deleteBizProjectArchiveFileByFileId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBizProjectArchiveFileByFileId_result result = new deleteBizProjectArchiveFileByFileId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBizProjectArchiveFileByFileId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteBizProjectArchiveFileByFileId(args.fileId,resultHandler);
      }
    }

  }

  public static class saveBizProjectArchive_args implements org.apache.thrift.TBase<saveBizProjectArchive_args, saveBizProjectArchive_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectArchive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectArchive_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_ARCHIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectArchive", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectArchive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectArchive_argsTupleSchemeFactory());
    }

    public BizProjectArchive bizProjectArchive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_ARCHIVE((short)1, "bizProjectArchive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_ARCHIVE
            return BIZ_PROJECT_ARCHIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_ARCHIVE, new org.apache.thrift.meta_data.FieldMetaData("bizProjectArchive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectArchive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectArchive_args.class, metaDataMap);
    }

    public saveBizProjectArchive_args() {
    }

    public saveBizProjectArchive_args(
      BizProjectArchive bizProjectArchive)
    {
      this();
      this.bizProjectArchive = bizProjectArchive;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectArchive_args(saveBizProjectArchive_args other) {
      if (other.isSetBizProjectArchive()) {
        this.bizProjectArchive = new BizProjectArchive(other.bizProjectArchive);
      }
    }

    public saveBizProjectArchive_args deepCopy() {
      return new saveBizProjectArchive_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectArchive = null;
    }

    public BizProjectArchive getBizProjectArchive() {
      return this.bizProjectArchive;
    }

    public saveBizProjectArchive_args setBizProjectArchive(BizProjectArchive bizProjectArchive) {
      this.bizProjectArchive = bizProjectArchive;
      return this;
    }

    public void unsetBizProjectArchive() {
      this.bizProjectArchive = null;
    }

    /** Returns true if field bizProjectArchive is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectArchive() {
      return this.bizProjectArchive != null;
    }

    public void setBizProjectArchiveIsSet(boolean value) {
      if (!value) {
        this.bizProjectArchive = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE:
        if (value == null) {
          unsetBizProjectArchive();
        } else {
          setBizProjectArchive((BizProjectArchive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE:
        return getBizProjectArchive();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_ARCHIVE:
        return isSetBizProjectArchive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectArchive_args)
        return this.equals((saveBizProjectArchive_args)that);
      return false;
    }

    public boolean equals(saveBizProjectArchive_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectArchive = true && this.isSetBizProjectArchive();
      boolean that_present_bizProjectArchive = true && that.isSetBizProjectArchive();
      if (this_present_bizProjectArchive || that_present_bizProjectArchive) {
        if (!(this_present_bizProjectArchive && that_present_bizProjectArchive))
          return false;
        if (!this.bizProjectArchive.equals(that.bizProjectArchive))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectArchive = true && (isSetBizProjectArchive());
      list.add(present_bizProjectArchive);
      if (present_bizProjectArchive)
        list.add(bizProjectArchive);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectArchive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectArchive()).compareTo(other.isSetBizProjectArchive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectArchive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectArchive, other.bizProjectArchive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectArchive_args(");
      boolean first = true;

      sb.append("bizProjectArchive:");
      if (this.bizProjectArchive == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectArchive);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectArchive != null) {
        bizProjectArchive.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectArchive_argsStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectArchive_argsStandardScheme getScheme() {
        return new saveBizProjectArchive_argsStandardScheme();
      }
    }

    private static class saveBizProjectArchive_argsStandardScheme extends StandardScheme<saveBizProjectArchive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectArchive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_ARCHIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectArchive = new BizProjectArchive();
                struct.bizProjectArchive.read(iprot);
                struct.setBizProjectArchiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectArchive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectArchive != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_ARCHIVE_FIELD_DESC);
          struct.bizProjectArchive.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectArchive_argsTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectArchive_argsTupleScheme getScheme() {
        return new saveBizProjectArchive_argsTupleScheme();
      }
    }

    private static class saveBizProjectArchive_argsTupleScheme extends TupleScheme<saveBizProjectArchive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectArchive()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectArchive()) {
          struct.bizProjectArchive.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectArchive = new BizProjectArchive();
          struct.bizProjectArchive.read(iprot);
          struct.setBizProjectArchiveIsSet(true);
        }
      }
    }

  }

  public static class saveBizProjectArchive_result implements org.apache.thrift.TBase<saveBizProjectArchive_result, saveBizProjectArchive_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectArchive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectArchive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectArchive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectArchive_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectArchive_result.class, metaDataMap);
    }

    public saveBizProjectArchive_result() {
    }

    public saveBizProjectArchive_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectArchive_result(saveBizProjectArchive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveBizProjectArchive_result deepCopy() {
      return new saveBizProjectArchive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveBizProjectArchive_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveBizProjectArchive_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectArchive_result)
        return this.equals((saveBizProjectArchive_result)that);
      return false;
    }

    public boolean equals(saveBizProjectArchive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectArchive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectArchive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectArchive_resultStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectArchive_resultStandardScheme getScheme() {
        return new saveBizProjectArchive_resultStandardScheme();
      }
    }

    private static class saveBizProjectArchive_resultStandardScheme extends StandardScheme<saveBizProjectArchive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectArchive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectArchive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectArchive_resultTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectArchive_resultTupleScheme getScheme() {
        return new saveBizProjectArchive_resultTupleScheme();
      }
    }

    private static class saveBizProjectArchive_resultTupleScheme extends TupleScheme<saveBizProjectArchive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateBizProjectArchive_args implements org.apache.thrift.TBase<updateBizProjectArchive_args, updateBizProjectArchive_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizProjectArchive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizProjectArchive_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_ARCHIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectArchive", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizProjectArchive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizProjectArchive_argsTupleSchemeFactory());
    }

    public BizProjectArchive bizProjectArchive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_ARCHIVE((short)1, "bizProjectArchive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_ARCHIVE
            return BIZ_PROJECT_ARCHIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_ARCHIVE, new org.apache.thrift.meta_data.FieldMetaData("bizProjectArchive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectArchive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizProjectArchive_args.class, metaDataMap);
    }

    public updateBizProjectArchive_args() {
    }

    public updateBizProjectArchive_args(
      BizProjectArchive bizProjectArchive)
    {
      this();
      this.bizProjectArchive = bizProjectArchive;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizProjectArchive_args(updateBizProjectArchive_args other) {
      if (other.isSetBizProjectArchive()) {
        this.bizProjectArchive = new BizProjectArchive(other.bizProjectArchive);
      }
    }

    public updateBizProjectArchive_args deepCopy() {
      return new updateBizProjectArchive_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectArchive = null;
    }

    public BizProjectArchive getBizProjectArchive() {
      return this.bizProjectArchive;
    }

    public updateBizProjectArchive_args setBizProjectArchive(BizProjectArchive bizProjectArchive) {
      this.bizProjectArchive = bizProjectArchive;
      return this;
    }

    public void unsetBizProjectArchive() {
      this.bizProjectArchive = null;
    }

    /** Returns true if field bizProjectArchive is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectArchive() {
      return this.bizProjectArchive != null;
    }

    public void setBizProjectArchiveIsSet(boolean value) {
      if (!value) {
        this.bizProjectArchive = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE:
        if (value == null) {
          unsetBizProjectArchive();
        } else {
          setBizProjectArchive((BizProjectArchive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE:
        return getBizProjectArchive();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_ARCHIVE:
        return isSetBizProjectArchive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizProjectArchive_args)
        return this.equals((updateBizProjectArchive_args)that);
      return false;
    }

    public boolean equals(updateBizProjectArchive_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectArchive = true && this.isSetBizProjectArchive();
      boolean that_present_bizProjectArchive = true && that.isSetBizProjectArchive();
      if (this_present_bizProjectArchive || that_present_bizProjectArchive) {
        if (!(this_present_bizProjectArchive && that_present_bizProjectArchive))
          return false;
        if (!this.bizProjectArchive.equals(that.bizProjectArchive))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectArchive = true && (isSetBizProjectArchive());
      list.add(present_bizProjectArchive);
      if (present_bizProjectArchive)
        list.add(bizProjectArchive);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizProjectArchive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectArchive()).compareTo(other.isSetBizProjectArchive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectArchive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectArchive, other.bizProjectArchive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizProjectArchive_args(");
      boolean first = true;

      sb.append("bizProjectArchive:");
      if (this.bizProjectArchive == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectArchive);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectArchive != null) {
        bizProjectArchive.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizProjectArchive_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizProjectArchive_argsStandardScheme getScheme() {
        return new updateBizProjectArchive_argsStandardScheme();
      }
    }

    private static class updateBizProjectArchive_argsStandardScheme extends StandardScheme<updateBizProjectArchive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizProjectArchive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_ARCHIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectArchive = new BizProjectArchive();
                struct.bizProjectArchive.read(iprot);
                struct.setBizProjectArchiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizProjectArchive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectArchive != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_ARCHIVE_FIELD_DESC);
          struct.bizProjectArchive.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizProjectArchive_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizProjectArchive_argsTupleScheme getScheme() {
        return new updateBizProjectArchive_argsTupleScheme();
      }
    }

    private static class updateBizProjectArchive_argsTupleScheme extends TupleScheme<updateBizProjectArchive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizProjectArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectArchive()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectArchive()) {
          struct.bizProjectArchive.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizProjectArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectArchive = new BizProjectArchive();
          struct.bizProjectArchive.read(iprot);
          struct.setBizProjectArchiveIsSet(true);
        }
      }
    }

  }

  public static class updateBizProjectArchive_result implements org.apache.thrift.TBase<updateBizProjectArchive_result, updateBizProjectArchive_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizProjectArchive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizProjectArchive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizProjectArchive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizProjectArchive_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizProjectArchive_result.class, metaDataMap);
    }

    public updateBizProjectArchive_result() {
    }

    public updateBizProjectArchive_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizProjectArchive_result(updateBizProjectArchive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateBizProjectArchive_result deepCopy() {
      return new updateBizProjectArchive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateBizProjectArchive_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateBizProjectArchive_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizProjectArchive_result)
        return this.equals((updateBizProjectArchive_result)that);
      return false;
    }

    public boolean equals(updateBizProjectArchive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizProjectArchive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizProjectArchive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizProjectArchive_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizProjectArchive_resultStandardScheme getScheme() {
        return new updateBizProjectArchive_resultStandardScheme();
      }
    }

    private static class updateBizProjectArchive_resultStandardScheme extends StandardScheme<updateBizProjectArchive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizProjectArchive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizProjectArchive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizProjectArchive_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizProjectArchive_resultTupleScheme getScheme() {
        return new updateBizProjectArchive_resultTupleScheme();
      }
    }

    private static class updateBizProjectArchive_resultTupleScheme extends TupleScheme<updateBizProjectArchive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizProjectArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizProjectArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectArchiveByPID_args implements org.apache.thrift.TBase<obtainBizProjectArchiveByPID_args, obtainBizProjectArchiveByPID_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectArchiveByPID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectArchiveByPID_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectArchiveByPID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectArchiveByPID_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectArchiveByPID_args.class, metaDataMap);
    }

    public obtainBizProjectArchiveByPID_args() {
    }

    public obtainBizProjectArchiveByPID_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectArchiveByPID_args(obtainBizProjectArchiveByPID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public obtainBizProjectArchiveByPID_args deepCopy() {
      return new obtainBizProjectArchiveByPID_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public obtainBizProjectArchiveByPID_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectArchiveByPID_args)
        return this.equals((obtainBizProjectArchiveByPID_args)that);
      return false;
    }

    public boolean equals(obtainBizProjectArchiveByPID_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectArchiveByPID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectArchiveByPID_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectArchiveByPID_argsStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByPID_argsStandardScheme getScheme() {
        return new obtainBizProjectArchiveByPID_argsStandardScheme();
      }
    }

    private static class obtainBizProjectArchiveByPID_argsStandardScheme extends StandardScheme<obtainBizProjectArchiveByPID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectArchiveByPID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectArchiveByPID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectArchiveByPID_argsTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByPID_argsTupleScheme getScheme() {
        return new obtainBizProjectArchiveByPID_argsTupleScheme();
      }
    }

    private static class obtainBizProjectArchiveByPID_argsTupleScheme extends TupleScheme<obtainBizProjectArchiveByPID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByPID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByPID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectArchiveByPID_result implements org.apache.thrift.TBase<obtainBizProjectArchiveByPID_result, obtainBizProjectArchiveByPID_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectArchiveByPID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectArchiveByPID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectArchiveByPID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectArchiveByPID_resultTupleSchemeFactory());
    }

    public BizProjectArchive success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectArchive.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectArchiveByPID_result.class, metaDataMap);
    }

    public obtainBizProjectArchiveByPID_result() {
    }

    public obtainBizProjectArchiveByPID_result(
      BizProjectArchive success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectArchiveByPID_result(obtainBizProjectArchiveByPID_result other) {
      if (other.isSetSuccess()) {
        this.success = new BizProjectArchive(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainBizProjectArchiveByPID_result deepCopy() {
      return new obtainBizProjectArchiveByPID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BizProjectArchive getSuccess() {
      return this.success;
    }

    public obtainBizProjectArchiveByPID_result setSuccess(BizProjectArchive success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainBizProjectArchiveByPID_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BizProjectArchive)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectArchiveByPID_result)
        return this.equals((obtainBizProjectArchiveByPID_result)that);
      return false;
    }

    public boolean equals(obtainBizProjectArchiveByPID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectArchiveByPID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectArchiveByPID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectArchiveByPID_resultStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByPID_resultStandardScheme getScheme() {
        return new obtainBizProjectArchiveByPID_resultStandardScheme();
      }
    }

    private static class obtainBizProjectArchiveByPID_resultStandardScheme extends StandardScheme<obtainBizProjectArchiveByPID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectArchiveByPID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BizProjectArchive();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectArchiveByPID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectArchiveByPID_resultTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByPID_resultTupleScheme getScheme() {
        return new obtainBizProjectArchiveByPID_resultTupleScheme();
      }
    }

    private static class obtainBizProjectArchiveByPID_resultTupleScheme extends TupleScheme<obtainBizProjectArchiveByPID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByPID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByPID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BizProjectArchive();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectArchiveByProjectId_args implements org.apache.thrift.TBase<obtainBizProjectArchiveByProjectId_args, obtainBizProjectArchiveByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectArchiveByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectArchiveByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectArchiveByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectArchiveByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectArchiveByProjectId_args.class, metaDataMap);
    }

    public obtainBizProjectArchiveByProjectId_args() {
    }

    public obtainBizProjectArchiveByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectArchiveByProjectId_args(obtainBizProjectArchiveByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public obtainBizProjectArchiveByProjectId_args deepCopy() {
      return new obtainBizProjectArchiveByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public obtainBizProjectArchiveByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectArchiveByProjectId_args)
        return this.equals((obtainBizProjectArchiveByProjectId_args)that);
      return false;
    }

    public boolean equals(obtainBizProjectArchiveByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectArchiveByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectArchiveByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectArchiveByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByProjectId_argsStandardScheme getScheme() {
        return new obtainBizProjectArchiveByProjectId_argsStandardScheme();
      }
    }

    private static class obtainBizProjectArchiveByProjectId_argsStandardScheme extends StandardScheme<obtainBizProjectArchiveByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectArchiveByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectArchiveByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectArchiveByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByProjectId_argsTupleScheme getScheme() {
        return new obtainBizProjectArchiveByProjectId_argsTupleScheme();
      }
    }

    private static class obtainBizProjectArchiveByProjectId_argsTupleScheme extends TupleScheme<obtainBizProjectArchiveByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectArchiveByProjectId_result implements org.apache.thrift.TBase<obtainBizProjectArchiveByProjectId_result, obtainBizProjectArchiveByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectArchiveByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectArchiveByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectArchiveByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectArchiveByProjectId_resultTupleSchemeFactory());
    }

    public List<BizProjectArchive> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectArchive.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectArchiveByProjectId_result.class, metaDataMap);
    }

    public obtainBizProjectArchiveByProjectId_result() {
    }

    public obtainBizProjectArchiveByProjectId_result(
      List<BizProjectArchive> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectArchiveByProjectId_result(obtainBizProjectArchiveByProjectId_result other) {
      if (other.isSetSuccess()) {
        List<BizProjectArchive> __this__success = new ArrayList<BizProjectArchive>(other.success.size());
        for (BizProjectArchive other_element : other.success) {
          __this__success.add(new BizProjectArchive(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainBizProjectArchiveByProjectId_result deepCopy() {
      return new obtainBizProjectArchiveByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BizProjectArchive> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BizProjectArchive elem) {
      if (this.success == null) {
        this.success = new ArrayList<BizProjectArchive>();
      }
      this.success.add(elem);
    }

    public List<BizProjectArchive> getSuccess() {
      return this.success;
    }

    public obtainBizProjectArchiveByProjectId_result setSuccess(List<BizProjectArchive> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainBizProjectArchiveByProjectId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BizProjectArchive>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectArchiveByProjectId_result)
        return this.equals((obtainBizProjectArchiveByProjectId_result)that);
      return false;
    }

    public boolean equals(obtainBizProjectArchiveByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectArchiveByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectArchiveByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectArchiveByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByProjectId_resultStandardScheme getScheme() {
        return new obtainBizProjectArchiveByProjectId_resultStandardScheme();
      }
    }

    private static class obtainBizProjectArchiveByProjectId_resultStandardScheme extends StandardScheme<obtainBizProjectArchiveByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectArchiveByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                  struct.success = new ArrayList<BizProjectArchive>(_list320.size);
                  BizProjectArchive _elem321;
                  for (int _i322 = 0; _i322 < _list320.size; ++_i322)
                  {
                    _elem321 = new BizProjectArchive();
                    _elem321.read(iprot);
                    struct.success.add(_elem321);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectArchiveByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BizProjectArchive _iter323 : struct.success)
            {
              _iter323.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectArchiveByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveByProjectId_resultTupleScheme getScheme() {
        return new obtainBizProjectArchiveByProjectId_resultTupleScheme();
      }
    }

    private static class obtainBizProjectArchiveByProjectId_resultTupleScheme extends TupleScheme<obtainBizProjectArchiveByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BizProjectArchive _iter324 : struct.success)
            {
              _iter324.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BizProjectArchive>(_list325.size);
            BizProjectArchive _elem326;
            for (int _i327 = 0; _i327 < _list325.size; ++_i327)
            {
              _elem326 = new BizProjectArchive();
              _elem326.read(iprot);
              struct.success.add(_elem326);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectArchiveByPid_args implements org.apache.thrift.TBase<deleteBizProjectArchiveByPid_args, deleteBizProjectArchiveByPid_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectArchiveByPid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectArchiveByPid_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectArchiveByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectArchiveByPid_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectArchiveByPid_args.class, metaDataMap);
    }

    public deleteBizProjectArchiveByPid_args() {
    }

    public deleteBizProjectArchiveByPid_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectArchiveByPid_args(deleteBizProjectArchiveByPid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public deleteBizProjectArchiveByPid_args deepCopy() {
      return new deleteBizProjectArchiveByPid_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public deleteBizProjectArchiveByPid_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectArchiveByPid_args)
        return this.equals((deleteBizProjectArchiveByPid_args)that);
      return false;
    }

    public boolean equals(deleteBizProjectArchiveByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectArchiveByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectArchiveByPid_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectArchiveByPid_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveByPid_argsStandardScheme getScheme() {
        return new deleteBizProjectArchiveByPid_argsStandardScheme();
      }
    }

    private static class deleteBizProjectArchiveByPid_argsStandardScheme extends StandardScheme<deleteBizProjectArchiveByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectArchiveByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectArchiveByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectArchiveByPid_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveByPid_argsTupleScheme getScheme() {
        return new deleteBizProjectArchiveByPid_argsTupleScheme();
      }
    }

    private static class deleteBizProjectArchiveByPid_argsTupleScheme extends TupleScheme<deleteBizProjectArchiveByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectArchiveByPid_result implements org.apache.thrift.TBase<deleteBizProjectArchiveByPid_result, deleteBizProjectArchiveByPid_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectArchiveByPid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectArchiveByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectArchiveByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectArchiveByPid_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectArchiveByPid_result.class, metaDataMap);
    }

    public deleteBizProjectArchiveByPid_result() {
    }

    public deleteBizProjectArchiveByPid_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectArchiveByPid_result(deleteBizProjectArchiveByPid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteBizProjectArchiveByPid_result deepCopy() {
      return new deleteBizProjectArchiveByPid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteBizProjectArchiveByPid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteBizProjectArchiveByPid_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectArchiveByPid_result)
        return this.equals((deleteBizProjectArchiveByPid_result)that);
      return false;
    }

    public boolean equals(deleteBizProjectArchiveByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectArchiveByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectArchiveByPid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectArchiveByPid_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveByPid_resultStandardScheme getScheme() {
        return new deleteBizProjectArchiveByPid_resultStandardScheme();
      }
    }

    private static class deleteBizProjectArchiveByPid_resultStandardScheme extends StandardScheme<deleteBizProjectArchiveByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectArchiveByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectArchiveByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectArchiveByPid_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveByPid_resultTupleScheme getScheme() {
        return new deleteBizProjectArchiveByPid_resultTupleScheme();
      }
    }

    private static class deleteBizProjectArchiveByPid_resultTupleScheme extends TupleScheme<deleteBizProjectArchiveByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class saveBizProjectArchiveFile_args implements org.apache.thrift.TBase<saveBizProjectArchiveFile_args, saveBizProjectArchiveFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectArchiveFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectArchiveFile_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_ARCHIVE_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectArchiveFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectArchiveFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectArchiveFile_argsTupleSchemeFactory());
    }

    public BizProjectArchiveFile bizProjectArchiveFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_ARCHIVE_FILE((short)1, "bizProjectArchiveFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_ARCHIVE_FILE
            return BIZ_PROJECT_ARCHIVE_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_ARCHIVE_FILE, new org.apache.thrift.meta_data.FieldMetaData("bizProjectArchiveFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectArchiveFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectArchiveFile_args.class, metaDataMap);
    }

    public saveBizProjectArchiveFile_args() {
    }

    public saveBizProjectArchiveFile_args(
      BizProjectArchiveFile bizProjectArchiveFile)
    {
      this();
      this.bizProjectArchiveFile = bizProjectArchiveFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectArchiveFile_args(saveBizProjectArchiveFile_args other) {
      if (other.isSetBizProjectArchiveFile()) {
        this.bizProjectArchiveFile = new BizProjectArchiveFile(other.bizProjectArchiveFile);
      }
    }

    public saveBizProjectArchiveFile_args deepCopy() {
      return new saveBizProjectArchiveFile_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectArchiveFile = null;
    }

    public BizProjectArchiveFile getBizProjectArchiveFile() {
      return this.bizProjectArchiveFile;
    }

    public saveBizProjectArchiveFile_args setBizProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) {
      this.bizProjectArchiveFile = bizProjectArchiveFile;
      return this;
    }

    public void unsetBizProjectArchiveFile() {
      this.bizProjectArchiveFile = null;
    }

    /** Returns true if field bizProjectArchiveFile is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectArchiveFile() {
      return this.bizProjectArchiveFile != null;
    }

    public void setBizProjectArchiveFileIsSet(boolean value) {
      if (!value) {
        this.bizProjectArchiveFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE_FILE:
        if (value == null) {
          unsetBizProjectArchiveFile();
        } else {
          setBizProjectArchiveFile((BizProjectArchiveFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE_FILE:
        return getBizProjectArchiveFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_ARCHIVE_FILE:
        return isSetBizProjectArchiveFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectArchiveFile_args)
        return this.equals((saveBizProjectArchiveFile_args)that);
      return false;
    }

    public boolean equals(saveBizProjectArchiveFile_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectArchiveFile = true && this.isSetBizProjectArchiveFile();
      boolean that_present_bizProjectArchiveFile = true && that.isSetBizProjectArchiveFile();
      if (this_present_bizProjectArchiveFile || that_present_bizProjectArchiveFile) {
        if (!(this_present_bizProjectArchiveFile && that_present_bizProjectArchiveFile))
          return false;
        if (!this.bizProjectArchiveFile.equals(that.bizProjectArchiveFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectArchiveFile = true && (isSetBizProjectArchiveFile());
      list.add(present_bizProjectArchiveFile);
      if (present_bizProjectArchiveFile)
        list.add(bizProjectArchiveFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectArchiveFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectArchiveFile()).compareTo(other.isSetBizProjectArchiveFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectArchiveFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectArchiveFile, other.bizProjectArchiveFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectArchiveFile_args(");
      boolean first = true;

      sb.append("bizProjectArchiveFile:");
      if (this.bizProjectArchiveFile == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectArchiveFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectArchiveFile != null) {
        bizProjectArchiveFile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectArchiveFile_argsStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectArchiveFile_argsStandardScheme getScheme() {
        return new saveBizProjectArchiveFile_argsStandardScheme();
      }
    }

    private static class saveBizProjectArchiveFile_argsStandardScheme extends StandardScheme<saveBizProjectArchiveFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_ARCHIVE_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectArchiveFile = new BizProjectArchiveFile();
                struct.bizProjectArchiveFile.read(iprot);
                struct.setBizProjectArchiveFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectArchiveFile != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_ARCHIVE_FILE_FIELD_DESC);
          struct.bizProjectArchiveFile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectArchiveFile_argsTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectArchiveFile_argsTupleScheme getScheme() {
        return new saveBizProjectArchiveFile_argsTupleScheme();
      }
    }

    private static class saveBizProjectArchiveFile_argsTupleScheme extends TupleScheme<saveBizProjectArchiveFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectArchiveFile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectArchiveFile()) {
          struct.bizProjectArchiveFile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectArchiveFile = new BizProjectArchiveFile();
          struct.bizProjectArchiveFile.read(iprot);
          struct.setBizProjectArchiveFileIsSet(true);
        }
      }
    }

  }

  public static class saveBizProjectArchiveFile_result implements org.apache.thrift.TBase<saveBizProjectArchiveFile_result, saveBizProjectArchiveFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBizProjectArchiveFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBizProjectArchiveFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBizProjectArchiveFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBizProjectArchiveFile_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBizProjectArchiveFile_result.class, metaDataMap);
    }

    public saveBizProjectArchiveFile_result() {
    }

    public saveBizProjectArchiveFile_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBizProjectArchiveFile_result(saveBizProjectArchiveFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveBizProjectArchiveFile_result deepCopy() {
      return new saveBizProjectArchiveFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveBizProjectArchiveFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveBizProjectArchiveFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBizProjectArchiveFile_result)
        return this.equals((saveBizProjectArchiveFile_result)that);
      return false;
    }

    public boolean equals(saveBizProjectArchiveFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBizProjectArchiveFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBizProjectArchiveFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBizProjectArchiveFile_resultStandardSchemeFactory implements SchemeFactory {
      public saveBizProjectArchiveFile_resultStandardScheme getScheme() {
        return new saveBizProjectArchiveFile_resultStandardScheme();
      }
    }

    private static class saveBizProjectArchiveFile_resultStandardScheme extends StandardScheme<saveBizProjectArchiveFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBizProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBizProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBizProjectArchiveFile_resultTupleSchemeFactory implements SchemeFactory {
      public saveBizProjectArchiveFile_resultTupleScheme getScheme() {
        return new saveBizProjectArchiveFile_resultTupleScheme();
      }
    }

    private static class saveBizProjectArchiveFile_resultTupleScheme extends TupleScheme<saveBizProjectArchiveFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBizProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectArchiveFileByArchiveId_args implements org.apache.thrift.TBase<obtainBizProjectArchiveFileByArchiveId_args, obtainBizProjectArchiveFileByArchiveId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectArchiveFileByArchiveId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectArchiveFileByArchiveId_args");

    private static final org.apache.thrift.protocol.TField ARCHIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectArchiveFileByArchiveId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectArchiveFileByArchiveId_argsTupleSchemeFactory());
    }

    public int archiveId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARCHIVE_ID((short)1, "archiveId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARCHIVE_ID
            return ARCHIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARCHIVEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARCHIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("archiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectArchiveFileByArchiveId_args.class, metaDataMap);
    }

    public obtainBizProjectArchiveFileByArchiveId_args() {
    }

    public obtainBizProjectArchiveFileByArchiveId_args(
      int archiveId)
    {
      this();
      this.archiveId = archiveId;
      setArchiveIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectArchiveFileByArchiveId_args(obtainBizProjectArchiveFileByArchiveId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.archiveId = other.archiveId;
    }

    public obtainBizProjectArchiveFileByArchiveId_args deepCopy() {
      return new obtainBizProjectArchiveFileByArchiveId_args(this);
    }

    @Override
    public void clear() {
      setArchiveIdIsSet(false);
      this.archiveId = 0;
    }

    public int getArchiveId() {
      return this.archiveId;
    }

    public obtainBizProjectArchiveFileByArchiveId_args setArchiveId(int archiveId) {
      this.archiveId = archiveId;
      setArchiveIdIsSet(true);
      return this;
    }

    public void unsetArchiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEID_ISSET_ID);
    }

    /** Returns true if field archiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetArchiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEID_ISSET_ID);
    }

    public void setArchiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARCHIVE_ID:
        if (value == null) {
          unsetArchiveId();
        } else {
          setArchiveId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARCHIVE_ID:
        return Integer.valueOf(getArchiveId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARCHIVE_ID:
        return isSetArchiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectArchiveFileByArchiveId_args)
        return this.equals((obtainBizProjectArchiveFileByArchiveId_args)that);
      return false;
    }

    public boolean equals(obtainBizProjectArchiveFileByArchiveId_args that) {
      if (that == null)
        return false;

      boolean this_present_archiveId = true;
      boolean that_present_archiveId = true;
      if (this_present_archiveId || that_present_archiveId) {
        if (!(this_present_archiveId && that_present_archiveId))
          return false;
        if (this.archiveId != that.archiveId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_archiveId = true;
      list.add(present_archiveId);
      if (present_archiveId)
        list.add(archiveId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectArchiveFileByArchiveId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArchiveId()).compareTo(other.isSetArchiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveId, other.archiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectArchiveFileByArchiveId_args(");
      boolean first = true;

      sb.append("archiveId:");
      sb.append(this.archiveId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectArchiveFileByArchiveId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveFileByArchiveId_argsStandardScheme getScheme() {
        return new obtainBizProjectArchiveFileByArchiveId_argsStandardScheme();
      }
    }

    private static class obtainBizProjectArchiveFileByArchiveId_argsStandardScheme extends StandardScheme<obtainBizProjectArchiveFileByArchiveId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARCHIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.archiveId = iprot.readI32();
                struct.setArchiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ARCHIVE_ID_FIELD_DESC);
        oprot.writeI32(struct.archiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectArchiveFileByArchiveId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveFileByArchiveId_argsTupleScheme getScheme() {
        return new obtainBizProjectArchiveFileByArchiveId_argsTupleScheme();
      }
    }

    private static class obtainBizProjectArchiveFileByArchiveId_argsTupleScheme extends TupleScheme<obtainBizProjectArchiveFileByArchiveId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArchiveId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArchiveId()) {
          oprot.writeI32(struct.archiveId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.archiveId = iprot.readI32();
          struct.setArchiveIdIsSet(true);
        }
      }
    }

  }

  public static class obtainBizProjectArchiveFileByArchiveId_result implements org.apache.thrift.TBase<obtainBizProjectArchiveFileByArchiveId_result, obtainBizProjectArchiveFileByArchiveId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainBizProjectArchiveFileByArchiveId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainBizProjectArchiveFileByArchiveId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainBizProjectArchiveFileByArchiveId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainBizProjectArchiveFileByArchiveId_resultTupleSchemeFactory());
    }

    public List<ProjectArchiveFileDTO> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectArchiveFileDTO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainBizProjectArchiveFileByArchiveId_result.class, metaDataMap);
    }

    public obtainBizProjectArchiveFileByArchiveId_result() {
    }

    public obtainBizProjectArchiveFileByArchiveId_result(
      List<ProjectArchiveFileDTO> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainBizProjectArchiveFileByArchiveId_result(obtainBizProjectArchiveFileByArchiveId_result other) {
      if (other.isSetSuccess()) {
        List<ProjectArchiveFileDTO> __this__success = new ArrayList<ProjectArchiveFileDTO>(other.success.size());
        for (ProjectArchiveFileDTO other_element : other.success) {
          __this__success.add(new ProjectArchiveFileDTO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainBizProjectArchiveFileByArchiveId_result deepCopy() {
      return new obtainBizProjectArchiveFileByArchiveId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectArchiveFileDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectArchiveFileDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectArchiveFileDTO>();
      }
      this.success.add(elem);
    }

    public List<ProjectArchiveFileDTO> getSuccess() {
      return this.success;
    }

    public obtainBizProjectArchiveFileByArchiveId_result setSuccess(List<ProjectArchiveFileDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainBizProjectArchiveFileByArchiveId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectArchiveFileDTO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainBizProjectArchiveFileByArchiveId_result)
        return this.equals((obtainBizProjectArchiveFileByArchiveId_result)that);
      return false;
    }

    public boolean equals(obtainBizProjectArchiveFileByArchiveId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainBizProjectArchiveFileByArchiveId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainBizProjectArchiveFileByArchiveId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainBizProjectArchiveFileByArchiveId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveFileByArchiveId_resultStandardScheme getScheme() {
        return new obtainBizProjectArchiveFileByArchiveId_resultStandardScheme();
      }
    }

    private static class obtainBizProjectArchiveFileByArchiveId_resultStandardScheme extends StandardScheme<obtainBizProjectArchiveFileByArchiveId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectArchiveFileDTO>(_list328.size);
                  ProjectArchiveFileDTO _elem329;
                  for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                  {
                    _elem329 = new ProjectArchiveFileDTO();
                    _elem329.read(iprot);
                    struct.success.add(_elem329);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectArchiveFileDTO _iter331 : struct.success)
            {
              _iter331.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainBizProjectArchiveFileByArchiveId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainBizProjectArchiveFileByArchiveId_resultTupleScheme getScheme() {
        return new obtainBizProjectArchiveFileByArchiveId_resultTupleScheme();
      }
    }

    private static class obtainBizProjectArchiveFileByArchiveId_resultTupleScheme extends TupleScheme<obtainBizProjectArchiveFileByArchiveId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectArchiveFileDTO _iter332 : struct.success)
            {
              _iter332.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list333 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectArchiveFileDTO>(_list333.size);
            ProjectArchiveFileDTO _elem334;
            for (int _i335 = 0; _i335 < _list333.size; ++_i335)
            {
              _elem334 = new ProjectArchiveFileDTO();
              _elem334.read(iprot);
              struct.success.add(_elem334);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainProjectArchiveFileDTOByFileId_args implements org.apache.thrift.TBase<obtainProjectArchiveFileDTOByFileId_args, obtainProjectArchiveFileDTOByFileId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainProjectArchiveFileDTOByFileId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainProjectArchiveFileDTOByFileId_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainProjectArchiveFileDTOByFileId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainProjectArchiveFileDTOByFileId_argsTupleSchemeFactory());
    }

    public int fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainProjectArchiveFileDTOByFileId_args.class, metaDataMap);
    }

    public obtainProjectArchiveFileDTOByFileId_args() {
    }

    public obtainProjectArchiveFileDTOByFileId_args(
      int fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainProjectArchiveFileDTOByFileId_args(obtainProjectArchiveFileDTOByFileId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public obtainProjectArchiveFileDTOByFileId_args deepCopy() {
      return new obtainProjectArchiveFileDTOByFileId_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public int getFileId() {
      return this.fileId;
    }

    public obtainProjectArchiveFileDTOByFileId_args setFileId(int fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Integer.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainProjectArchiveFileDTOByFileId_args)
        return this.equals((obtainProjectArchiveFileDTOByFileId_args)that);
      return false;
    }

    public boolean equals(obtainProjectArchiveFileDTOByFileId_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainProjectArchiveFileDTOByFileId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainProjectArchiveFileDTOByFileId_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainProjectArchiveFileDTOByFileId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainProjectArchiveFileDTOByFileId_argsStandardScheme getScheme() {
        return new obtainProjectArchiveFileDTOByFileId_argsStandardScheme();
      }
    }

    private static class obtainProjectArchiveFileDTOByFileId_argsStandardScheme extends StandardScheme<obtainProjectArchiveFileDTOByFileId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainProjectArchiveFileDTOByFileId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileId = iprot.readI32();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainProjectArchiveFileDTOByFileId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI32(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainProjectArchiveFileDTOByFileId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainProjectArchiveFileDTOByFileId_argsTupleScheme getScheme() {
        return new obtainProjectArchiveFileDTOByFileId_argsTupleScheme();
      }
    }

    private static class obtainProjectArchiveFileDTOByFileId_argsTupleScheme extends TupleScheme<obtainProjectArchiveFileDTOByFileId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainProjectArchiveFileDTOByFileId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI32(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainProjectArchiveFileDTOByFileId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI32();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class obtainProjectArchiveFileDTOByFileId_result implements org.apache.thrift.TBase<obtainProjectArchiveFileDTOByFileId_result, obtainProjectArchiveFileDTOByFileId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainProjectArchiveFileDTOByFileId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainProjectArchiveFileDTOByFileId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainProjectArchiveFileDTOByFileId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainProjectArchiveFileDTOByFileId_resultTupleSchemeFactory());
    }

    public ProjectArchiveFileDTO success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectArchiveFileDTO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainProjectArchiveFileDTOByFileId_result.class, metaDataMap);
    }

    public obtainProjectArchiveFileDTOByFileId_result() {
    }

    public obtainProjectArchiveFileDTOByFileId_result(
      ProjectArchiveFileDTO success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainProjectArchiveFileDTOByFileId_result(obtainProjectArchiveFileDTOByFileId_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProjectArchiveFileDTO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainProjectArchiveFileDTOByFileId_result deepCopy() {
      return new obtainProjectArchiveFileDTOByFileId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProjectArchiveFileDTO getSuccess() {
      return this.success;
    }

    public obtainProjectArchiveFileDTOByFileId_result setSuccess(ProjectArchiveFileDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainProjectArchiveFileDTOByFileId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProjectArchiveFileDTO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainProjectArchiveFileDTOByFileId_result)
        return this.equals((obtainProjectArchiveFileDTOByFileId_result)that);
      return false;
    }

    public boolean equals(obtainProjectArchiveFileDTOByFileId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainProjectArchiveFileDTOByFileId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainProjectArchiveFileDTOByFileId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainProjectArchiveFileDTOByFileId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainProjectArchiveFileDTOByFileId_resultStandardScheme getScheme() {
        return new obtainProjectArchiveFileDTOByFileId_resultStandardScheme();
      }
    }

    private static class obtainProjectArchiveFileDTOByFileId_resultStandardScheme extends StandardScheme<obtainProjectArchiveFileDTOByFileId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainProjectArchiveFileDTOByFileId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProjectArchiveFileDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainProjectArchiveFileDTOByFileId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainProjectArchiveFileDTOByFileId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainProjectArchiveFileDTOByFileId_resultTupleScheme getScheme() {
        return new obtainProjectArchiveFileDTOByFileId_resultTupleScheme();
      }
    }

    private static class obtainProjectArchiveFileDTOByFileId_resultTupleScheme extends TupleScheme<obtainProjectArchiveFileDTOByFileId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainProjectArchiveFileDTOByFileId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainProjectArchiveFileDTOByFileId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProjectArchiveFileDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateProjectArchiveFile_args implements org.apache.thrift.TBase<updateProjectArchiveFile_args, updateProjectArchiveFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProjectArchiveFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProjectArchiveFile_args");

    private static final org.apache.thrift.protocol.TField BIZ_PROJECT_ARCHIVE_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("bizProjectArchiveFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProjectArchiveFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProjectArchiveFile_argsTupleSchemeFactory());
    }

    public BizProjectArchiveFile bizProjectArchiveFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_PROJECT_ARCHIVE_FILE((short)1, "bizProjectArchiveFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_PROJECT_ARCHIVE_FILE
            return BIZ_PROJECT_ARCHIVE_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_PROJECT_ARCHIVE_FILE, new org.apache.thrift.meta_data.FieldMetaData("bizProjectArchiveFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizProjectArchiveFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProjectArchiveFile_args.class, metaDataMap);
    }

    public updateProjectArchiveFile_args() {
    }

    public updateProjectArchiveFile_args(
      BizProjectArchiveFile bizProjectArchiveFile)
    {
      this();
      this.bizProjectArchiveFile = bizProjectArchiveFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProjectArchiveFile_args(updateProjectArchiveFile_args other) {
      if (other.isSetBizProjectArchiveFile()) {
        this.bizProjectArchiveFile = new BizProjectArchiveFile(other.bizProjectArchiveFile);
      }
    }

    public updateProjectArchiveFile_args deepCopy() {
      return new updateProjectArchiveFile_args(this);
    }

    @Override
    public void clear() {
      this.bizProjectArchiveFile = null;
    }

    public BizProjectArchiveFile getBizProjectArchiveFile() {
      return this.bizProjectArchiveFile;
    }

    public updateProjectArchiveFile_args setBizProjectArchiveFile(BizProjectArchiveFile bizProjectArchiveFile) {
      this.bizProjectArchiveFile = bizProjectArchiveFile;
      return this;
    }

    public void unsetBizProjectArchiveFile() {
      this.bizProjectArchiveFile = null;
    }

    /** Returns true if field bizProjectArchiveFile is set (has been assigned a value) and false otherwise */
    public boolean isSetBizProjectArchiveFile() {
      return this.bizProjectArchiveFile != null;
    }

    public void setBizProjectArchiveFileIsSet(boolean value) {
      if (!value) {
        this.bizProjectArchiveFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE_FILE:
        if (value == null) {
          unsetBizProjectArchiveFile();
        } else {
          setBizProjectArchiveFile((BizProjectArchiveFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_PROJECT_ARCHIVE_FILE:
        return getBizProjectArchiveFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_PROJECT_ARCHIVE_FILE:
        return isSetBizProjectArchiveFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProjectArchiveFile_args)
        return this.equals((updateProjectArchiveFile_args)that);
      return false;
    }

    public boolean equals(updateProjectArchiveFile_args that) {
      if (that == null)
        return false;

      boolean this_present_bizProjectArchiveFile = true && this.isSetBizProjectArchiveFile();
      boolean that_present_bizProjectArchiveFile = true && that.isSetBizProjectArchiveFile();
      if (this_present_bizProjectArchiveFile || that_present_bizProjectArchiveFile) {
        if (!(this_present_bizProjectArchiveFile && that_present_bizProjectArchiveFile))
          return false;
        if (!this.bizProjectArchiveFile.equals(that.bizProjectArchiveFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizProjectArchiveFile = true && (isSetBizProjectArchiveFile());
      list.add(present_bizProjectArchiveFile);
      if (present_bizProjectArchiveFile)
        list.add(bizProjectArchiveFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProjectArchiveFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizProjectArchiveFile()).compareTo(other.isSetBizProjectArchiveFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizProjectArchiveFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizProjectArchiveFile, other.bizProjectArchiveFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProjectArchiveFile_args(");
      boolean first = true;

      sb.append("bizProjectArchiveFile:");
      if (this.bizProjectArchiveFile == null) {
        sb.append("null");
      } else {
        sb.append(this.bizProjectArchiveFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizProjectArchiveFile != null) {
        bizProjectArchiveFile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProjectArchiveFile_argsStandardSchemeFactory implements SchemeFactory {
      public updateProjectArchiveFile_argsStandardScheme getScheme() {
        return new updateProjectArchiveFile_argsStandardScheme();
      }
    }

    private static class updateProjectArchiveFile_argsStandardScheme extends StandardScheme<updateProjectArchiveFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_PROJECT_ARCHIVE_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizProjectArchiveFile = new BizProjectArchiveFile();
                struct.bizProjectArchiveFile.read(iprot);
                struct.setBizProjectArchiveFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizProjectArchiveFile != null) {
          oprot.writeFieldBegin(BIZ_PROJECT_ARCHIVE_FILE_FIELD_DESC);
          struct.bizProjectArchiveFile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProjectArchiveFile_argsTupleSchemeFactory implements SchemeFactory {
      public updateProjectArchiveFile_argsTupleScheme getScheme() {
        return new updateProjectArchiveFile_argsTupleScheme();
      }
    }

    private static class updateProjectArchiveFile_argsTupleScheme extends TupleScheme<updateProjectArchiveFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizProjectArchiveFile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizProjectArchiveFile()) {
          struct.bizProjectArchiveFile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProjectArchiveFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizProjectArchiveFile = new BizProjectArchiveFile();
          struct.bizProjectArchiveFile.read(iprot);
          struct.setBizProjectArchiveFileIsSet(true);
        }
      }
    }

  }

  public static class updateProjectArchiveFile_result implements org.apache.thrift.TBase<updateProjectArchiveFile_result, updateProjectArchiveFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProjectArchiveFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProjectArchiveFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProjectArchiveFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProjectArchiveFile_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProjectArchiveFile_result.class, metaDataMap);
    }

    public updateProjectArchiveFile_result() {
    }

    public updateProjectArchiveFile_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProjectArchiveFile_result(updateProjectArchiveFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateProjectArchiveFile_result deepCopy() {
      return new updateProjectArchiveFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateProjectArchiveFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateProjectArchiveFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProjectArchiveFile_result)
        return this.equals((updateProjectArchiveFile_result)that);
      return false;
    }

    public boolean equals(updateProjectArchiveFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProjectArchiveFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProjectArchiveFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProjectArchiveFile_resultStandardSchemeFactory implements SchemeFactory {
      public updateProjectArchiveFile_resultStandardScheme getScheme() {
        return new updateProjectArchiveFile_resultStandardScheme();
      }
    }

    private static class updateProjectArchiveFile_resultStandardScheme extends StandardScheme<updateProjectArchiveFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProjectArchiveFile_resultTupleSchemeFactory implements SchemeFactory {
      public updateProjectArchiveFile_resultTupleScheme getScheme() {
        return new updateProjectArchiveFile_resultTupleScheme();
      }
    }

    private static class updateProjectArchiveFile_resultTupleScheme extends TupleScheme<updateProjectArchiveFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProjectArchiveFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectArchiveFileByArchiveId_args implements org.apache.thrift.TBase<deleteBizProjectArchiveFileByArchiveId_args, deleteBizProjectArchiveFileByArchiveId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectArchiveFileByArchiveId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectArchiveFileByArchiveId_args");

    private static final org.apache.thrift.protocol.TField ARCHIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectArchiveFileByArchiveId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectArchiveFileByArchiveId_argsTupleSchemeFactory());
    }

    public int archiveId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARCHIVE_ID((short)1, "archiveId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARCHIVE_ID
            return ARCHIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARCHIVEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARCHIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("archiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectArchiveFileByArchiveId_args.class, metaDataMap);
    }

    public deleteBizProjectArchiveFileByArchiveId_args() {
    }

    public deleteBizProjectArchiveFileByArchiveId_args(
      int archiveId)
    {
      this();
      this.archiveId = archiveId;
      setArchiveIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectArchiveFileByArchiveId_args(deleteBizProjectArchiveFileByArchiveId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.archiveId = other.archiveId;
    }

    public deleteBizProjectArchiveFileByArchiveId_args deepCopy() {
      return new deleteBizProjectArchiveFileByArchiveId_args(this);
    }

    @Override
    public void clear() {
      setArchiveIdIsSet(false);
      this.archiveId = 0;
    }

    public int getArchiveId() {
      return this.archiveId;
    }

    public deleteBizProjectArchiveFileByArchiveId_args setArchiveId(int archiveId) {
      this.archiveId = archiveId;
      setArchiveIdIsSet(true);
      return this;
    }

    public void unsetArchiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEID_ISSET_ID);
    }

    /** Returns true if field archiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetArchiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEID_ISSET_ID);
    }

    public void setArchiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARCHIVE_ID:
        if (value == null) {
          unsetArchiveId();
        } else {
          setArchiveId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARCHIVE_ID:
        return Integer.valueOf(getArchiveId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARCHIVE_ID:
        return isSetArchiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectArchiveFileByArchiveId_args)
        return this.equals((deleteBizProjectArchiveFileByArchiveId_args)that);
      return false;
    }

    public boolean equals(deleteBizProjectArchiveFileByArchiveId_args that) {
      if (that == null)
        return false;

      boolean this_present_archiveId = true;
      boolean that_present_archiveId = true;
      if (this_present_archiveId || that_present_archiveId) {
        if (!(this_present_archiveId && that_present_archiveId))
          return false;
        if (this.archiveId != that.archiveId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_archiveId = true;
      list.add(present_archiveId);
      if (present_archiveId)
        list.add(archiveId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectArchiveFileByArchiveId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArchiveId()).compareTo(other.isSetArchiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveId, other.archiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectArchiveFileByArchiveId_args(");
      boolean first = true;

      sb.append("archiveId:");
      sb.append(this.archiveId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectArchiveFileByArchiveId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByArchiveId_argsStandardScheme getScheme() {
        return new deleteBizProjectArchiveFileByArchiveId_argsStandardScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByArchiveId_argsStandardScheme extends StandardScheme<deleteBizProjectArchiveFileByArchiveId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARCHIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.archiveId = iprot.readI32();
                struct.setArchiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ARCHIVE_ID_FIELD_DESC);
        oprot.writeI32(struct.archiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectArchiveFileByArchiveId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByArchiveId_argsTupleScheme getScheme() {
        return new deleteBizProjectArchiveFileByArchiveId_argsTupleScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByArchiveId_argsTupleScheme extends TupleScheme<deleteBizProjectArchiveFileByArchiveId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArchiveId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArchiveId()) {
          oprot.writeI32(struct.archiveId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByArchiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.archiveId = iprot.readI32();
          struct.setArchiveIdIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectArchiveFileByArchiveId_result implements org.apache.thrift.TBase<deleteBizProjectArchiveFileByArchiveId_result, deleteBizProjectArchiveFileByArchiveId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectArchiveFileByArchiveId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectArchiveFileByArchiveId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectArchiveFileByArchiveId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectArchiveFileByArchiveId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectArchiveFileByArchiveId_result.class, metaDataMap);
    }

    public deleteBizProjectArchiveFileByArchiveId_result() {
    }

    public deleteBizProjectArchiveFileByArchiveId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectArchiveFileByArchiveId_result(deleteBizProjectArchiveFileByArchiveId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteBizProjectArchiveFileByArchiveId_result deepCopy() {
      return new deleteBizProjectArchiveFileByArchiveId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteBizProjectArchiveFileByArchiveId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteBizProjectArchiveFileByArchiveId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectArchiveFileByArchiveId_result)
        return this.equals((deleteBizProjectArchiveFileByArchiveId_result)that);
      return false;
    }

    public boolean equals(deleteBizProjectArchiveFileByArchiveId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectArchiveFileByArchiveId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectArchiveFileByArchiveId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectArchiveFileByArchiveId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByArchiveId_resultStandardScheme getScheme() {
        return new deleteBizProjectArchiveFileByArchiveId_resultStandardScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByArchiveId_resultStandardScheme extends StandardScheme<deleteBizProjectArchiveFileByArchiveId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectArchiveFileByArchiveId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByArchiveId_resultTupleScheme getScheme() {
        return new deleteBizProjectArchiveFileByArchiveId_resultTupleScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByArchiveId_resultTupleScheme extends TupleScheme<deleteBizProjectArchiveFileByArchiveId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByArchiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectArchiveFileByFileId_args implements org.apache.thrift.TBase<deleteBizProjectArchiveFileByFileId_args, deleteBizProjectArchiveFileByFileId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectArchiveFileByFileId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectArchiveFileByFileId_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectArchiveFileByFileId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectArchiveFileByFileId_argsTupleSchemeFactory());
    }

    public int fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectArchiveFileByFileId_args.class, metaDataMap);
    }

    public deleteBizProjectArchiveFileByFileId_args() {
    }

    public deleteBizProjectArchiveFileByFileId_args(
      int fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectArchiveFileByFileId_args(deleteBizProjectArchiveFileByFileId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public deleteBizProjectArchiveFileByFileId_args deepCopy() {
      return new deleteBizProjectArchiveFileByFileId_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public int getFileId() {
      return this.fileId;
    }

    public deleteBizProjectArchiveFileByFileId_args setFileId(int fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Integer.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectArchiveFileByFileId_args)
        return this.equals((deleteBizProjectArchiveFileByFileId_args)that);
      return false;
    }

    public boolean equals(deleteBizProjectArchiveFileByFileId_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectArchiveFileByFileId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectArchiveFileByFileId_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectArchiveFileByFileId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByFileId_argsStandardScheme getScheme() {
        return new deleteBizProjectArchiveFileByFileId_argsStandardScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByFileId_argsStandardScheme extends StandardScheme<deleteBizProjectArchiveFileByFileId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectArchiveFileByFileId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileId = iprot.readI32();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectArchiveFileByFileId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI32(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectArchiveFileByFileId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByFileId_argsTupleScheme getScheme() {
        return new deleteBizProjectArchiveFileByFileId_argsTupleScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByFileId_argsTupleScheme extends TupleScheme<deleteBizProjectArchiveFileByFileId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByFileId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI32(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByFileId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI32();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class deleteBizProjectArchiveFileByFileId_result implements org.apache.thrift.TBase<deleteBizProjectArchiveFileByFileId_result, deleteBizProjectArchiveFileByFileId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizProjectArchiveFileByFileId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizProjectArchiveFileByFileId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizProjectArchiveFileByFileId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizProjectArchiveFileByFileId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizProjectArchiveFileByFileId_result.class, metaDataMap);
    }

    public deleteBizProjectArchiveFileByFileId_result() {
    }

    public deleteBizProjectArchiveFileByFileId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizProjectArchiveFileByFileId_result(deleteBizProjectArchiveFileByFileId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteBizProjectArchiveFileByFileId_result deepCopy() {
      return new deleteBizProjectArchiveFileByFileId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteBizProjectArchiveFileByFileId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteBizProjectArchiveFileByFileId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizProjectArchiveFileByFileId_result)
        return this.equals((deleteBizProjectArchiveFileByFileId_result)that);
      return false;
    }

    public boolean equals(deleteBizProjectArchiveFileByFileId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizProjectArchiveFileByFileId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizProjectArchiveFileByFileId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizProjectArchiveFileByFileId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByFileId_resultStandardScheme getScheme() {
        return new deleteBizProjectArchiveFileByFileId_resultStandardScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByFileId_resultStandardScheme extends StandardScheme<deleteBizProjectArchiveFileByFileId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizProjectArchiveFileByFileId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizProjectArchiveFileByFileId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizProjectArchiveFileByFileId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBizProjectArchiveFileByFileId_resultTupleScheme getScheme() {
        return new deleteBizProjectArchiveFileByFileId_resultTupleScheme();
      }
    }

    private static class deleteBizProjectArchiveFileByFileId_resultTupleScheme extends TupleScheme<deleteBizProjectArchiveFileByFileId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByFileId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizProjectArchiveFileByFileId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

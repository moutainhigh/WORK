/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class BizInterviewInfoIndexDTO implements org.apache.thrift.TBase<BizInterviewInfoIndexDTO, BizInterviewInfoIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<BizInterviewInfoIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizInterviewInfoIndexDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WF_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("wfStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField INTERVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewStatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField NOTARIZATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizationStatus", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField NOTARIZATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizator", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MORTGAGE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MORTGATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgator", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrantTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrantUserName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrantStartTime", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrantEndTime", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField RECORD_CLERK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordClerkId", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField INTERVIEWER_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewer", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField INTERVIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewId", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField INTERVIEW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewTime", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField CUS_CARD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cusCardInfo", org.apache.thrift.protocol.TType.STRUCT, (short)32);
  private static final org.apache.thrift.protocol.TField INTERVIEW_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewPlace", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField NOTARIZATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizationId", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField MORTGAGE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageUser", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizInterviewInfoIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizInterviewInfoIndexDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public int wfStatus; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public String createrDate; // required
  public String acctName; // required
  public double loanMoney; // required
  public int foreclosureStatus; // required
  public int interviewStatus; // required
  public int notarizationStatus; // required
  public String notarizator; // required
  public int mortgageStatus; // required
  public String mortgator; // required
  public String hisWarrantTime; // required
  public String hisWarrantUserName; // required
  public int updateId; // required
  public String hisWarrantStartTime; // required
  public String hisWarrantEndTime; // required
  public int recordClerkId; // required
  public int isChechan; // required
  public int productType; // required
  public String interviewer; // required
  public int interviewId; // required
  public int pmUserId; // required
  public String pmUserName; // required
  public String interviewTime; // required
  public com.xlkfinance.bms.rpc.project.CusCardInfo cusCardInfo; // required
  public String interviewPlace; // required
  public int notarizationId; // required
  public int mortgageUser; // required
  public int projectType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PROJECT_NAME((short)4, "projectName"),
    WF_STATUS((short)5, "wfStatus"),
    CREATER_ID((short)6, "createrId"),
    USER_IDS((short)7, "userIds"),
    PAGE((short)8, "page"),
    ROWS((short)9, "rows"),
    CREATER_DATE((short)10, "createrDate"),
    ACCT_NAME((short)11, "acctName"),
    LOAN_MONEY((short)12, "loanMoney"),
    FORECLOSURE_STATUS((short)13, "foreclosureStatus"),
    INTERVIEW_STATUS((short)14, "interviewStatus"),
    NOTARIZATION_STATUS((short)15, "notarizationStatus"),
    NOTARIZATOR((short)16, "notarizator"),
    MORTGAGE_STATUS((short)17, "mortgageStatus"),
    MORTGATOR((short)18, "mortgator"),
    HIS_WARRANT_TIME((short)19, "hisWarrantTime"),
    HIS_WARRANT_USER_NAME((short)20, "hisWarrantUserName"),
    UPDATE_ID((short)21, "updateId"),
    HIS_WARRANT_START_TIME((short)22, "hisWarrantStartTime"),
    HIS_WARRANT_END_TIME((short)23, "hisWarrantEndTime"),
    RECORD_CLERK_ID((short)24, "recordClerkId"),
    IS_CHECHAN((short)25, "isChechan"),
    PRODUCT_TYPE((short)26, "productType"),
    INTERVIEWER((short)27, "interviewer"),
    INTERVIEW_ID((short)28, "interviewId"),
    PM_USER_ID((short)29, "pmUserId"),
    PM_USER_NAME((short)30, "pmUserName"),
    INTERVIEW_TIME((short)31, "interviewTime"),
    CUS_CARD_INFO((short)32, "cusCardInfo"),
    INTERVIEW_PLACE((short)33, "interviewPlace"),
    NOTARIZATION_ID((short)34, "notarizationId"),
    MORTGAGE_USER((short)35, "mortgageUser"),
    PROJECT_TYPE((short)36, "projectType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // WF_STATUS
          return WF_STATUS;
        case 6: // CREATER_ID
          return CREATER_ID;
        case 7: // USER_IDS
          return USER_IDS;
        case 8: // PAGE
          return PAGE;
        case 9: // ROWS
          return ROWS;
        case 10: // CREATER_DATE
          return CREATER_DATE;
        case 11: // ACCT_NAME
          return ACCT_NAME;
        case 12: // LOAN_MONEY
          return LOAN_MONEY;
        case 13: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 14: // INTERVIEW_STATUS
          return INTERVIEW_STATUS;
        case 15: // NOTARIZATION_STATUS
          return NOTARIZATION_STATUS;
        case 16: // NOTARIZATOR
          return NOTARIZATOR;
        case 17: // MORTGAGE_STATUS
          return MORTGAGE_STATUS;
        case 18: // MORTGATOR
          return MORTGATOR;
        case 19: // HIS_WARRANT_TIME
          return HIS_WARRANT_TIME;
        case 20: // HIS_WARRANT_USER_NAME
          return HIS_WARRANT_USER_NAME;
        case 21: // UPDATE_ID
          return UPDATE_ID;
        case 22: // HIS_WARRANT_START_TIME
          return HIS_WARRANT_START_TIME;
        case 23: // HIS_WARRANT_END_TIME
          return HIS_WARRANT_END_TIME;
        case 24: // RECORD_CLERK_ID
          return RECORD_CLERK_ID;
        case 25: // IS_CHECHAN
          return IS_CHECHAN;
        case 26: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 27: // INTERVIEWER
          return INTERVIEWER;
        case 28: // INTERVIEW_ID
          return INTERVIEW_ID;
        case 29: // PM_USER_ID
          return PM_USER_ID;
        case 30: // PM_USER_NAME
          return PM_USER_NAME;
        case 31: // INTERVIEW_TIME
          return INTERVIEW_TIME;
        case 32: // CUS_CARD_INFO
          return CUS_CARD_INFO;
        case 33: // INTERVIEW_PLACE
          return INTERVIEW_PLACE;
        case 34: // NOTARIZATION_ID
          return NOTARIZATION_ID;
        case 35: // MORTGAGE_USER
          return MORTGAGE_USER;
        case 36: // PROJECT_TYPE
          return PROJECT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __WFSTATUS_ISSET_ID = 2;
  private static final int __CREATERID_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private static final int __LOANMONEY_ISSET_ID = 6;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 7;
  private static final int __INTERVIEWSTATUS_ISSET_ID = 8;
  private static final int __NOTARIZATIONSTATUS_ISSET_ID = 9;
  private static final int __MORTGAGESTATUS_ISSET_ID = 10;
  private static final int __UPDATEID_ISSET_ID = 11;
  private static final int __RECORDCLERKID_ISSET_ID = 12;
  private static final int __ISCHECHAN_ISSET_ID = 13;
  private static final int __PRODUCTTYPE_ISSET_ID = 14;
  private static final int __INTERVIEWID_ISSET_ID = 15;
  private static final int __PMUSERID_ISSET_ID = 16;
  private static final int __NOTARIZATIONID_ISSET_ID = 17;
  private static final int __MORTGAGEUSER_ISSET_ID = 18;
  private static final int __PROJECTTYPE_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WF_STATUS, new org.apache.thrift.meta_data.FieldMetaData("wfStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("interviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTARIZATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("notarizationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTARIZATOR, new org.apache.thrift.meta_data.FieldMetaData("notarizator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("mortgageStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGATOR, new org.apache.thrift.meta_data.FieldMetaData("mortgator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIS_WARRANT_TIME, new org.apache.thrift.meta_data.FieldMetaData("hisWarrantTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIS_WARRANT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("hisWarrantUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIS_WARRANT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("hisWarrantStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIS_WARRANT_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("hisWarrantEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_CLERK_ID, new org.apache.thrift.meta_data.FieldMetaData("recordClerkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVIEWER, new org.apache.thrift.meta_data.FieldMetaData("interviewer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("interviewId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVIEW_TIME, new org.apache.thrift.meta_data.FieldMetaData("interviewTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_CARD_INFO, new org.apache.thrift.meta_data.FieldMetaData("cusCardInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.project.CusCardInfo.class)));
    tmpMap.put(_Fields.INTERVIEW_PLACE, new org.apache.thrift.meta_data.FieldMetaData("interviewPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTARIZATION_ID, new org.apache.thrift.meta_data.FieldMetaData("notarizationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_USER, new org.apache.thrift.meta_data.FieldMetaData("mortgageUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizInterviewInfoIndexDTO.class, metaDataMap);
  }

  public BizInterviewInfoIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public BizInterviewInfoIndexDTO(
    int pid,
    int projectId,
    String projectNumber,
    String projectName,
    int wfStatus,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows,
    String createrDate,
    String acctName,
    double loanMoney,
    int foreclosureStatus,
    int interviewStatus,
    int notarizationStatus,
    String notarizator,
    int mortgageStatus,
    String mortgator,
    String hisWarrantTime,
    String hisWarrantUserName,
    int updateId,
    String hisWarrantStartTime,
    String hisWarrantEndTime,
    int recordClerkId,
    int isChechan,
    int productType,
    String interviewer,
    int interviewId,
    int pmUserId,
    String pmUserName,
    String interviewTime,
    com.xlkfinance.bms.rpc.project.CusCardInfo cusCardInfo,
    String interviewPlace,
    int notarizationId,
    int mortgageUser,
    int projectType)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.wfStatus = wfStatus;
    setWfStatusIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.createrDate = createrDate;
    this.acctName = acctName;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.interviewStatus = interviewStatus;
    setInterviewStatusIsSet(true);
    this.notarizationStatus = notarizationStatus;
    setNotarizationStatusIsSet(true);
    this.notarizator = notarizator;
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
    this.mortgator = mortgator;
    this.hisWarrantTime = hisWarrantTime;
    this.hisWarrantUserName = hisWarrantUserName;
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.hisWarrantStartTime = hisWarrantStartTime;
    this.hisWarrantEndTime = hisWarrantEndTime;
    this.recordClerkId = recordClerkId;
    setRecordClerkIdIsSet(true);
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.productType = productType;
    setProductTypeIsSet(true);
    this.interviewer = interviewer;
    this.interviewId = interviewId;
    setInterviewIdIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.pmUserName = pmUserName;
    this.interviewTime = interviewTime;
    this.cusCardInfo = cusCardInfo;
    this.interviewPlace = interviewPlace;
    this.notarizationId = notarizationId;
    setNotarizationIdIsSet(true);
    this.mortgageUser = mortgageUser;
    setMortgageUserIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizInterviewInfoIndexDTO(BizInterviewInfoIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.wfStatus = other.wfStatus;
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    this.loanMoney = other.loanMoney;
    this.foreclosureStatus = other.foreclosureStatus;
    this.interviewStatus = other.interviewStatus;
    this.notarizationStatus = other.notarizationStatus;
    if (other.isSetNotarizator()) {
      this.notarizator = other.notarizator;
    }
    this.mortgageStatus = other.mortgageStatus;
    if (other.isSetMortgator()) {
      this.mortgator = other.mortgator;
    }
    if (other.isSetHisWarrantTime()) {
      this.hisWarrantTime = other.hisWarrantTime;
    }
    if (other.isSetHisWarrantUserName()) {
      this.hisWarrantUserName = other.hisWarrantUserName;
    }
    this.updateId = other.updateId;
    if (other.isSetHisWarrantStartTime()) {
      this.hisWarrantStartTime = other.hisWarrantStartTime;
    }
    if (other.isSetHisWarrantEndTime()) {
      this.hisWarrantEndTime = other.hisWarrantEndTime;
    }
    this.recordClerkId = other.recordClerkId;
    this.isChechan = other.isChechan;
    this.productType = other.productType;
    if (other.isSetInterviewer()) {
      this.interviewer = other.interviewer;
    }
    this.interviewId = other.interviewId;
    this.pmUserId = other.pmUserId;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetInterviewTime()) {
      this.interviewTime = other.interviewTime;
    }
    if (other.isSetCusCardInfo()) {
      this.cusCardInfo = new com.xlkfinance.bms.rpc.project.CusCardInfo(other.cusCardInfo);
    }
    if (other.isSetInterviewPlace()) {
      this.interviewPlace = other.interviewPlace;
    }
    this.notarizationId = other.notarizationId;
    this.mortgageUser = other.mortgageUser;
    this.projectType = other.projectType;
  }

  public BizInterviewInfoIndexDTO deepCopy() {
    return new BizInterviewInfoIndexDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setWfStatusIsSet(false);
    this.wfStatus = 0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    this.createrDate = null;
    this.acctName = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    setInterviewStatusIsSet(false);
    this.interviewStatus = 0;
    setNotarizationStatusIsSet(false);
    this.notarizationStatus = 0;
    this.notarizator = null;
    setMortgageStatusIsSet(false);
    this.mortgageStatus = 0;
    this.mortgator = null;
    this.hisWarrantTime = null;
    this.hisWarrantUserName = null;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.hisWarrantStartTime = null;
    this.hisWarrantEndTime = null;
    setRecordClerkIdIsSet(false);
    this.recordClerkId = 0;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    setProductTypeIsSet(false);
    this.productType = 0;
    this.interviewer = null;
    setInterviewIdIsSet(false);
    this.interviewId = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.pmUserName = null;
    this.interviewTime = null;
    this.cusCardInfo = null;
    this.interviewPlace = null;
    setNotarizationIdIsSet(false);
    this.notarizationId = 0;
    setMortgageUserIsSet(false);
    this.mortgageUser = 0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public BizInterviewInfoIndexDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizInterviewInfoIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public BizInterviewInfoIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public BizInterviewInfoIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getWfStatus() {
    return this.wfStatus;
  }

  public BizInterviewInfoIndexDTO setWfStatus(int wfStatus) {
    this.wfStatus = wfStatus;
    setWfStatusIsSet(true);
    return this;
  }

  public void unsetWfStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WFSTATUS_ISSET_ID);
  }

  /** Returns true if field wfStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWfStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __WFSTATUS_ISSET_ID);
  }

  public void setWfStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WFSTATUS_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizInterviewInfoIndexDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public BizInterviewInfoIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public BizInterviewInfoIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public BizInterviewInfoIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public BizInterviewInfoIndexDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public BizInterviewInfoIndexDTO setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public BizInterviewInfoIndexDTO setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public BizInterviewInfoIndexDTO setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public int getInterviewStatus() {
    return this.interviewStatus;
  }

  public BizInterviewInfoIndexDTO setInterviewStatus(int interviewStatus) {
    this.interviewStatus = interviewStatus;
    setInterviewStatusIsSet(true);
    return this;
  }

  public void unsetInterviewStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVIEWSTATUS_ISSET_ID);
  }

  /** Returns true if field interviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVIEWSTATUS_ISSET_ID);
  }

  public void setInterviewStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVIEWSTATUS_ISSET_ID, value);
  }

  public int getNotarizationStatus() {
    return this.notarizationStatus;
  }

  public BizInterviewInfoIndexDTO setNotarizationStatus(int notarizationStatus) {
    this.notarizationStatus = notarizationStatus;
    setNotarizationStatusIsSet(true);
    return this;
  }

  public void unsetNotarizationStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTARIZATIONSTATUS_ISSET_ID);
  }

  /** Returns true if field notarizationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizationStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTARIZATIONSTATUS_ISSET_ID);
  }

  public void setNotarizationStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTARIZATIONSTATUS_ISSET_ID, value);
  }

  public String getNotarizator() {
    return this.notarizator;
  }

  public BizInterviewInfoIndexDTO setNotarizator(String notarizator) {
    this.notarizator = notarizator;
    return this;
  }

  public void unsetNotarizator() {
    this.notarizator = null;
  }

  /** Returns true if field notarizator is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizator() {
    return this.notarizator != null;
  }

  public void setNotarizatorIsSet(boolean value) {
    if (!value) {
      this.notarizator = null;
    }
  }

  public int getMortgageStatus() {
    return this.mortgageStatus;
  }

  public BizInterviewInfoIndexDTO setMortgageStatus(int mortgageStatus) {
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
    return this;
  }

  public void unsetMortgageStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  /** Returns true if field mortgageStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  public void setMortgageStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID, value);
  }

  public String getMortgator() {
    return this.mortgator;
  }

  public BizInterviewInfoIndexDTO setMortgator(String mortgator) {
    this.mortgator = mortgator;
    return this;
  }

  public void unsetMortgator() {
    this.mortgator = null;
  }

  /** Returns true if field mortgator is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgator() {
    return this.mortgator != null;
  }

  public void setMortgatorIsSet(boolean value) {
    if (!value) {
      this.mortgator = null;
    }
  }

  public String getHisWarrantTime() {
    return this.hisWarrantTime;
  }

  public BizInterviewInfoIndexDTO setHisWarrantTime(String hisWarrantTime) {
    this.hisWarrantTime = hisWarrantTime;
    return this;
  }

  public void unsetHisWarrantTime() {
    this.hisWarrantTime = null;
  }

  /** Returns true if field hisWarrantTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrantTime() {
    return this.hisWarrantTime != null;
  }

  public void setHisWarrantTimeIsSet(boolean value) {
    if (!value) {
      this.hisWarrantTime = null;
    }
  }

  public String getHisWarrantUserName() {
    return this.hisWarrantUserName;
  }

  public BizInterviewInfoIndexDTO setHisWarrantUserName(String hisWarrantUserName) {
    this.hisWarrantUserName = hisWarrantUserName;
    return this;
  }

  public void unsetHisWarrantUserName() {
    this.hisWarrantUserName = null;
  }

  /** Returns true if field hisWarrantUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrantUserName() {
    return this.hisWarrantUserName != null;
  }

  public void setHisWarrantUserNameIsSet(boolean value) {
    if (!value) {
      this.hisWarrantUserName = null;
    }
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public BizInterviewInfoIndexDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getHisWarrantStartTime() {
    return this.hisWarrantStartTime;
  }

  public BizInterviewInfoIndexDTO setHisWarrantStartTime(String hisWarrantStartTime) {
    this.hisWarrantStartTime = hisWarrantStartTime;
    return this;
  }

  public void unsetHisWarrantStartTime() {
    this.hisWarrantStartTime = null;
  }

  /** Returns true if field hisWarrantStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrantStartTime() {
    return this.hisWarrantStartTime != null;
  }

  public void setHisWarrantStartTimeIsSet(boolean value) {
    if (!value) {
      this.hisWarrantStartTime = null;
    }
  }

  public String getHisWarrantEndTime() {
    return this.hisWarrantEndTime;
  }

  public BizInterviewInfoIndexDTO setHisWarrantEndTime(String hisWarrantEndTime) {
    this.hisWarrantEndTime = hisWarrantEndTime;
    return this;
  }

  public void unsetHisWarrantEndTime() {
    this.hisWarrantEndTime = null;
  }

  /** Returns true if field hisWarrantEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrantEndTime() {
    return this.hisWarrantEndTime != null;
  }

  public void setHisWarrantEndTimeIsSet(boolean value) {
    if (!value) {
      this.hisWarrantEndTime = null;
    }
  }

  public int getRecordClerkId() {
    return this.recordClerkId;
  }

  public BizInterviewInfoIndexDTO setRecordClerkId(int recordClerkId) {
    this.recordClerkId = recordClerkId;
    setRecordClerkIdIsSet(true);
    return this;
  }

  public void unsetRecordClerkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDCLERKID_ISSET_ID);
  }

  /** Returns true if field recordClerkId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordClerkId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDCLERKID_ISSET_ID);
  }

  public void setRecordClerkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDCLERKID_ISSET_ID, value);
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public BizInterviewInfoIndexDTO setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public int getProductType() {
    return this.productType;
  }

  public BizInterviewInfoIndexDTO setProductType(int productType) {
    this.productType = productType;
    setProductTypeIsSet(true);
    return this;
  }

  public void unsetProductType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  public void setProductTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID, value);
  }

  public String getInterviewer() {
    return this.interviewer;
  }

  public BizInterviewInfoIndexDTO setInterviewer(String interviewer) {
    this.interviewer = interviewer;
    return this;
  }

  public void unsetInterviewer() {
    this.interviewer = null;
  }

  /** Returns true if field interviewer is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewer() {
    return this.interviewer != null;
  }

  public void setInterviewerIsSet(boolean value) {
    if (!value) {
      this.interviewer = null;
    }
  }

  public int getInterviewId() {
    return this.interviewId;
  }

  public BizInterviewInfoIndexDTO setInterviewId(int interviewId) {
    this.interviewId = interviewId;
    setInterviewIdIsSet(true);
    return this;
  }

  public void unsetInterviewId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVIEWID_ISSET_ID);
  }

  /** Returns true if field interviewId is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewId() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVIEWID_ISSET_ID);
  }

  public void setInterviewIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVIEWID_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public BizInterviewInfoIndexDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public BizInterviewInfoIndexDTO setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getInterviewTime() {
    return this.interviewTime;
  }

  public BizInterviewInfoIndexDTO setInterviewTime(String interviewTime) {
    this.interviewTime = interviewTime;
    return this;
  }

  public void unsetInterviewTime() {
    this.interviewTime = null;
  }

  /** Returns true if field interviewTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewTime() {
    return this.interviewTime != null;
  }

  public void setInterviewTimeIsSet(boolean value) {
    if (!value) {
      this.interviewTime = null;
    }
  }

  public com.xlkfinance.bms.rpc.project.CusCardInfo getCusCardInfo() {
    return this.cusCardInfo;
  }

  public BizInterviewInfoIndexDTO setCusCardInfo(com.xlkfinance.bms.rpc.project.CusCardInfo cusCardInfo) {
    this.cusCardInfo = cusCardInfo;
    return this;
  }

  public void unsetCusCardInfo() {
    this.cusCardInfo = null;
  }

  /** Returns true if field cusCardInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCusCardInfo() {
    return this.cusCardInfo != null;
  }

  public void setCusCardInfoIsSet(boolean value) {
    if (!value) {
      this.cusCardInfo = null;
    }
  }

  public String getInterviewPlace() {
    return this.interviewPlace;
  }

  public BizInterviewInfoIndexDTO setInterviewPlace(String interviewPlace) {
    this.interviewPlace = interviewPlace;
    return this;
  }

  public void unsetInterviewPlace() {
    this.interviewPlace = null;
  }

  /** Returns true if field interviewPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewPlace() {
    return this.interviewPlace != null;
  }

  public void setInterviewPlaceIsSet(boolean value) {
    if (!value) {
      this.interviewPlace = null;
    }
  }

  public int getNotarizationId() {
    return this.notarizationId;
  }

  public BizInterviewInfoIndexDTO setNotarizationId(int notarizationId) {
    this.notarizationId = notarizationId;
    setNotarizationIdIsSet(true);
    return this;
  }

  public void unsetNotarizationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTARIZATIONID_ISSET_ID);
  }

  /** Returns true if field notarizationId is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizationId() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTARIZATIONID_ISSET_ID);
  }

  public void setNotarizationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTARIZATIONID_ISSET_ID, value);
  }

  public int getMortgageUser() {
    return this.mortgageUser;
  }

  public BizInterviewInfoIndexDTO setMortgageUser(int mortgageUser) {
    this.mortgageUser = mortgageUser;
    setMortgageUserIsSet(true);
    return this;
  }

  public void unsetMortgageUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGEUSER_ISSET_ID);
  }

  /** Returns true if field mortgageUser is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageUser() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGEUSER_ISSET_ID);
  }

  public void setMortgageUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGEUSER_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public BizInterviewInfoIndexDTO setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case WF_STATUS:
      if (value == null) {
        unsetWfStatus();
      } else {
        setWfStatus((Integer)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case INTERVIEW_STATUS:
      if (value == null) {
        unsetInterviewStatus();
      } else {
        setInterviewStatus((Integer)value);
      }
      break;

    case NOTARIZATION_STATUS:
      if (value == null) {
        unsetNotarizationStatus();
      } else {
        setNotarizationStatus((Integer)value);
      }
      break;

    case NOTARIZATOR:
      if (value == null) {
        unsetNotarizator();
      } else {
        setNotarizator((String)value);
      }
      break;

    case MORTGAGE_STATUS:
      if (value == null) {
        unsetMortgageStatus();
      } else {
        setMortgageStatus((Integer)value);
      }
      break;

    case MORTGATOR:
      if (value == null) {
        unsetMortgator();
      } else {
        setMortgator((String)value);
      }
      break;

    case HIS_WARRANT_TIME:
      if (value == null) {
        unsetHisWarrantTime();
      } else {
        setHisWarrantTime((String)value);
      }
      break;

    case HIS_WARRANT_USER_NAME:
      if (value == null) {
        unsetHisWarrantUserName();
      } else {
        setHisWarrantUserName((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case HIS_WARRANT_START_TIME:
      if (value == null) {
        unsetHisWarrantStartTime();
      } else {
        setHisWarrantStartTime((String)value);
      }
      break;

    case HIS_WARRANT_END_TIME:
      if (value == null) {
        unsetHisWarrantEndTime();
      } else {
        setHisWarrantEndTime((String)value);
      }
      break;

    case RECORD_CLERK_ID:
      if (value == null) {
        unsetRecordClerkId();
      } else {
        setRecordClerkId((Integer)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((Integer)value);
      }
      break;

    case INTERVIEWER:
      if (value == null) {
        unsetInterviewer();
      } else {
        setInterviewer((String)value);
      }
      break;

    case INTERVIEW_ID:
      if (value == null) {
        unsetInterviewId();
      } else {
        setInterviewId((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case INTERVIEW_TIME:
      if (value == null) {
        unsetInterviewTime();
      } else {
        setInterviewTime((String)value);
      }
      break;

    case CUS_CARD_INFO:
      if (value == null) {
        unsetCusCardInfo();
      } else {
        setCusCardInfo((com.xlkfinance.bms.rpc.project.CusCardInfo)value);
      }
      break;

    case INTERVIEW_PLACE:
      if (value == null) {
        unsetInterviewPlace();
      } else {
        setInterviewPlace((String)value);
      }
      break;

    case NOTARIZATION_ID:
      if (value == null) {
        unsetNotarizationId();
      } else {
        setNotarizationId((Integer)value);
      }
      break;

    case MORTGAGE_USER:
      if (value == null) {
        unsetMortgageUser();
      } else {
        setMortgageUser((Integer)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case WF_STATUS:
      return Integer.valueOf(getWfStatus());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATER_DATE:
      return getCreaterDate();

    case ACCT_NAME:
      return getAcctName();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case INTERVIEW_STATUS:
      return Integer.valueOf(getInterviewStatus());

    case NOTARIZATION_STATUS:
      return Integer.valueOf(getNotarizationStatus());

    case NOTARIZATOR:
      return getNotarizator();

    case MORTGAGE_STATUS:
      return Integer.valueOf(getMortgageStatus());

    case MORTGATOR:
      return getMortgator();

    case HIS_WARRANT_TIME:
      return getHisWarrantTime();

    case HIS_WARRANT_USER_NAME:
      return getHisWarrantUserName();

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case HIS_WARRANT_START_TIME:
      return getHisWarrantStartTime();

    case HIS_WARRANT_END_TIME:
      return getHisWarrantEndTime();

    case RECORD_CLERK_ID:
      return Integer.valueOf(getRecordClerkId());

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case PRODUCT_TYPE:
      return Integer.valueOf(getProductType());

    case INTERVIEWER:
      return getInterviewer();

    case INTERVIEW_ID:
      return Integer.valueOf(getInterviewId());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case PM_USER_NAME:
      return getPmUserName();

    case INTERVIEW_TIME:
      return getInterviewTime();

    case CUS_CARD_INFO:
      return getCusCardInfo();

    case INTERVIEW_PLACE:
      return getInterviewPlace();

    case NOTARIZATION_ID:
      return Integer.valueOf(getNotarizationId());

    case MORTGAGE_USER:
      return Integer.valueOf(getMortgageUser());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case WF_STATUS:
      return isSetWfStatus();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATER_DATE:
      return isSetCreaterDate();
    case ACCT_NAME:
      return isSetAcctName();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case INTERVIEW_STATUS:
      return isSetInterviewStatus();
    case NOTARIZATION_STATUS:
      return isSetNotarizationStatus();
    case NOTARIZATOR:
      return isSetNotarizator();
    case MORTGAGE_STATUS:
      return isSetMortgageStatus();
    case MORTGATOR:
      return isSetMortgator();
    case HIS_WARRANT_TIME:
      return isSetHisWarrantTime();
    case HIS_WARRANT_USER_NAME:
      return isSetHisWarrantUserName();
    case UPDATE_ID:
      return isSetUpdateId();
    case HIS_WARRANT_START_TIME:
      return isSetHisWarrantStartTime();
    case HIS_WARRANT_END_TIME:
      return isSetHisWarrantEndTime();
    case RECORD_CLERK_ID:
      return isSetRecordClerkId();
    case IS_CHECHAN:
      return isSetIsChechan();
    case PRODUCT_TYPE:
      return isSetProductType();
    case INTERVIEWER:
      return isSetInterviewer();
    case INTERVIEW_ID:
      return isSetInterviewId();
    case PM_USER_ID:
      return isSetPmUserId();
    case PM_USER_NAME:
      return isSetPmUserName();
    case INTERVIEW_TIME:
      return isSetInterviewTime();
    case CUS_CARD_INFO:
      return isSetCusCardInfo();
    case INTERVIEW_PLACE:
      return isSetInterviewPlace();
    case NOTARIZATION_ID:
      return isSetNotarizationId();
    case MORTGAGE_USER:
      return isSetMortgageUser();
    case PROJECT_TYPE:
      return isSetProjectType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizInterviewInfoIndexDTO)
      return this.equals((BizInterviewInfoIndexDTO)that);
    return false;
  }

  public boolean equals(BizInterviewInfoIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_wfStatus = true;
    boolean that_present_wfStatus = true;
    if (this_present_wfStatus || that_present_wfStatus) {
      if (!(this_present_wfStatus && that_present_wfStatus))
        return false;
      if (this.wfStatus != that.wfStatus)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_interviewStatus = true;
    boolean that_present_interviewStatus = true;
    if (this_present_interviewStatus || that_present_interviewStatus) {
      if (!(this_present_interviewStatus && that_present_interviewStatus))
        return false;
      if (this.interviewStatus != that.interviewStatus)
        return false;
    }

    boolean this_present_notarizationStatus = true;
    boolean that_present_notarizationStatus = true;
    if (this_present_notarizationStatus || that_present_notarizationStatus) {
      if (!(this_present_notarizationStatus && that_present_notarizationStatus))
        return false;
      if (this.notarizationStatus != that.notarizationStatus)
        return false;
    }

    boolean this_present_notarizator = true && this.isSetNotarizator();
    boolean that_present_notarizator = true && that.isSetNotarizator();
    if (this_present_notarizator || that_present_notarizator) {
      if (!(this_present_notarizator && that_present_notarizator))
        return false;
      if (!this.notarizator.equals(that.notarizator))
        return false;
    }

    boolean this_present_mortgageStatus = true;
    boolean that_present_mortgageStatus = true;
    if (this_present_mortgageStatus || that_present_mortgageStatus) {
      if (!(this_present_mortgageStatus && that_present_mortgageStatus))
        return false;
      if (this.mortgageStatus != that.mortgageStatus)
        return false;
    }

    boolean this_present_mortgator = true && this.isSetMortgator();
    boolean that_present_mortgator = true && that.isSetMortgator();
    if (this_present_mortgator || that_present_mortgator) {
      if (!(this_present_mortgator && that_present_mortgator))
        return false;
      if (!this.mortgator.equals(that.mortgator))
        return false;
    }

    boolean this_present_hisWarrantTime = true && this.isSetHisWarrantTime();
    boolean that_present_hisWarrantTime = true && that.isSetHisWarrantTime();
    if (this_present_hisWarrantTime || that_present_hisWarrantTime) {
      if (!(this_present_hisWarrantTime && that_present_hisWarrantTime))
        return false;
      if (!this.hisWarrantTime.equals(that.hisWarrantTime))
        return false;
    }

    boolean this_present_hisWarrantUserName = true && this.isSetHisWarrantUserName();
    boolean that_present_hisWarrantUserName = true && that.isSetHisWarrantUserName();
    if (this_present_hisWarrantUserName || that_present_hisWarrantUserName) {
      if (!(this_present_hisWarrantUserName && that_present_hisWarrantUserName))
        return false;
      if (!this.hisWarrantUserName.equals(that.hisWarrantUserName))
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_hisWarrantStartTime = true && this.isSetHisWarrantStartTime();
    boolean that_present_hisWarrantStartTime = true && that.isSetHisWarrantStartTime();
    if (this_present_hisWarrantStartTime || that_present_hisWarrantStartTime) {
      if (!(this_present_hisWarrantStartTime && that_present_hisWarrantStartTime))
        return false;
      if (!this.hisWarrantStartTime.equals(that.hisWarrantStartTime))
        return false;
    }

    boolean this_present_hisWarrantEndTime = true && this.isSetHisWarrantEndTime();
    boolean that_present_hisWarrantEndTime = true && that.isSetHisWarrantEndTime();
    if (this_present_hisWarrantEndTime || that_present_hisWarrantEndTime) {
      if (!(this_present_hisWarrantEndTime && that_present_hisWarrantEndTime))
        return false;
      if (!this.hisWarrantEndTime.equals(that.hisWarrantEndTime))
        return false;
    }

    boolean this_present_recordClerkId = true;
    boolean that_present_recordClerkId = true;
    if (this_present_recordClerkId || that_present_recordClerkId) {
      if (!(this_present_recordClerkId && that_present_recordClerkId))
        return false;
      if (this.recordClerkId != that.recordClerkId)
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_productType = true;
    boolean that_present_productType = true;
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (this.productType != that.productType)
        return false;
    }

    boolean this_present_interviewer = true && this.isSetInterviewer();
    boolean that_present_interviewer = true && that.isSetInterviewer();
    if (this_present_interviewer || that_present_interviewer) {
      if (!(this_present_interviewer && that_present_interviewer))
        return false;
      if (!this.interviewer.equals(that.interviewer))
        return false;
    }

    boolean this_present_interviewId = true;
    boolean that_present_interviewId = true;
    if (this_present_interviewId || that_present_interviewId) {
      if (!(this_present_interviewId && that_present_interviewId))
        return false;
      if (this.interviewId != that.interviewId)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_interviewTime = true && this.isSetInterviewTime();
    boolean that_present_interviewTime = true && that.isSetInterviewTime();
    if (this_present_interviewTime || that_present_interviewTime) {
      if (!(this_present_interviewTime && that_present_interviewTime))
        return false;
      if (!this.interviewTime.equals(that.interviewTime))
        return false;
    }

    boolean this_present_cusCardInfo = true && this.isSetCusCardInfo();
    boolean that_present_cusCardInfo = true && that.isSetCusCardInfo();
    if (this_present_cusCardInfo || that_present_cusCardInfo) {
      if (!(this_present_cusCardInfo && that_present_cusCardInfo))
        return false;
      if (!this.cusCardInfo.equals(that.cusCardInfo))
        return false;
    }

    boolean this_present_interviewPlace = true && this.isSetInterviewPlace();
    boolean that_present_interviewPlace = true && that.isSetInterviewPlace();
    if (this_present_interviewPlace || that_present_interviewPlace) {
      if (!(this_present_interviewPlace && that_present_interviewPlace))
        return false;
      if (!this.interviewPlace.equals(that.interviewPlace))
        return false;
    }

    boolean this_present_notarizationId = true;
    boolean that_present_notarizationId = true;
    if (this_present_notarizationId || that_present_notarizationId) {
      if (!(this_present_notarizationId && that_present_notarizationId))
        return false;
      if (this.notarizationId != that.notarizationId)
        return false;
    }

    boolean this_present_mortgageUser = true;
    boolean that_present_mortgageUser = true;
    if (this_present_mortgageUser || that_present_mortgageUser) {
      if (!(this_present_mortgageUser && that_present_mortgageUser))
        return false;
      if (this.mortgageUser != that.mortgageUser)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_wfStatus = true;
    list.add(present_wfStatus);
    if (present_wfStatus)
      list.add(wfStatus);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_interviewStatus = true;
    list.add(present_interviewStatus);
    if (present_interviewStatus)
      list.add(interviewStatus);

    boolean present_notarizationStatus = true;
    list.add(present_notarizationStatus);
    if (present_notarizationStatus)
      list.add(notarizationStatus);

    boolean present_notarizator = true && (isSetNotarizator());
    list.add(present_notarizator);
    if (present_notarizator)
      list.add(notarizator);

    boolean present_mortgageStatus = true;
    list.add(present_mortgageStatus);
    if (present_mortgageStatus)
      list.add(mortgageStatus);

    boolean present_mortgator = true && (isSetMortgator());
    list.add(present_mortgator);
    if (present_mortgator)
      list.add(mortgator);

    boolean present_hisWarrantTime = true && (isSetHisWarrantTime());
    list.add(present_hisWarrantTime);
    if (present_hisWarrantTime)
      list.add(hisWarrantTime);

    boolean present_hisWarrantUserName = true && (isSetHisWarrantUserName());
    list.add(present_hisWarrantUserName);
    if (present_hisWarrantUserName)
      list.add(hisWarrantUserName);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_hisWarrantStartTime = true && (isSetHisWarrantStartTime());
    list.add(present_hisWarrantStartTime);
    if (present_hisWarrantStartTime)
      list.add(hisWarrantStartTime);

    boolean present_hisWarrantEndTime = true && (isSetHisWarrantEndTime());
    list.add(present_hisWarrantEndTime);
    if (present_hisWarrantEndTime)
      list.add(hisWarrantEndTime);

    boolean present_recordClerkId = true;
    list.add(present_recordClerkId);
    if (present_recordClerkId)
      list.add(recordClerkId);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_productType = true;
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_interviewer = true && (isSetInterviewer());
    list.add(present_interviewer);
    if (present_interviewer)
      list.add(interviewer);

    boolean present_interviewId = true;
    list.add(present_interviewId);
    if (present_interviewId)
      list.add(interviewId);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_interviewTime = true && (isSetInterviewTime());
    list.add(present_interviewTime);
    if (present_interviewTime)
      list.add(interviewTime);

    boolean present_cusCardInfo = true && (isSetCusCardInfo());
    list.add(present_cusCardInfo);
    if (present_cusCardInfo)
      list.add(cusCardInfo);

    boolean present_interviewPlace = true && (isSetInterviewPlace());
    list.add(present_interviewPlace);
    if (present_interviewPlace)
      list.add(interviewPlace);

    boolean present_notarizationId = true;
    list.add(present_notarizationId);
    if (present_notarizationId)
      list.add(notarizationId);

    boolean present_mortgageUser = true;
    list.add(present_mortgageUser);
    if (present_mortgageUser)
      list.add(mortgageUser);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizInterviewInfoIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWfStatus()).compareTo(other.isSetWfStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWfStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wfStatus, other.wfStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewStatus()).compareTo(other.isSetInterviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewStatus, other.interviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizationStatus()).compareTo(other.isSetNotarizationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizationStatus, other.notarizationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizator()).compareTo(other.isSetNotarizator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizator, other.notarizator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageStatus()).compareTo(other.isSetMortgageStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageStatus, other.mortgageStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgator()).compareTo(other.isSetMortgator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgator, other.mortgator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrantTime()).compareTo(other.isSetHisWarrantTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrantTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrantTime, other.hisWarrantTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrantUserName()).compareTo(other.isSetHisWarrantUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrantUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrantUserName, other.hisWarrantUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrantStartTime()).compareTo(other.isSetHisWarrantStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrantStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrantStartTime, other.hisWarrantStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrantEndTime()).compareTo(other.isSetHisWarrantEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrantEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrantEndTime, other.hisWarrantEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordClerkId()).compareTo(other.isSetRecordClerkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordClerkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordClerkId, other.recordClerkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewer()).compareTo(other.isSetInterviewer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewer, other.interviewer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewId()).compareTo(other.isSetInterviewId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewId, other.interviewId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewTime()).compareTo(other.isSetInterviewTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewTime, other.interviewTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusCardInfo()).compareTo(other.isSetCusCardInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusCardInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusCardInfo, other.cusCardInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewPlace()).compareTo(other.isSetInterviewPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewPlace, other.interviewPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizationId()).compareTo(other.isSetNotarizationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizationId, other.notarizationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageUser()).compareTo(other.isSetMortgageUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageUser, other.mortgageUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizInterviewInfoIndexDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wfStatus:");
    sb.append(this.wfStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewStatus:");
    sb.append(this.interviewStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizationStatus:");
    sb.append(this.notarizationStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizator:");
    if (this.notarizator == null) {
      sb.append("null");
    } else {
      sb.append(this.notarizator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageStatus:");
    sb.append(this.mortgageStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgator:");
    if (this.mortgator == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrantTime:");
    if (this.hisWarrantTime == null) {
      sb.append("null");
    } else {
      sb.append(this.hisWarrantTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrantUserName:");
    if (this.hisWarrantUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.hisWarrantUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrantStartTime:");
    if (this.hisWarrantStartTime == null) {
      sb.append("null");
    } else {
      sb.append(this.hisWarrantStartTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrantEndTime:");
    if (this.hisWarrantEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.hisWarrantEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordClerkId:");
    sb.append(this.recordClerkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    sb.append(this.productType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewer:");
    if (this.interviewer == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewId:");
    sb.append(this.interviewId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewTime:");
    if (this.interviewTime == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusCardInfo:");
    if (this.cusCardInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.cusCardInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewPlace:");
    if (this.interviewPlace == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewPlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizationId:");
    sb.append(this.notarizationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageUser:");
    sb.append(this.mortgageUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusCardInfo != null) {
      cusCardInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizInterviewInfoIndexDTOStandardSchemeFactory implements SchemeFactory {
    public BizInterviewInfoIndexDTOStandardScheme getScheme() {
      return new BizInterviewInfoIndexDTOStandardScheme();
    }
  }

  private static class BizInterviewInfoIndexDTOStandardScheme extends StandardScheme<BizInterviewInfoIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizInterviewInfoIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WF_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wfStatus = iprot.readI32();
              struct.setWfStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list304.size);
                int _elem305;
                for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                {
                  _elem305 = iprot.readI32();
                  struct.userIds.add(_elem305);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INTERVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interviewStatus = iprot.readI32();
              struct.setInterviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOTARIZATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notarizationStatus = iprot.readI32();
              struct.setNotarizationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NOTARIZATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notarizator = iprot.readString();
              struct.setNotarizatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MORTGAGE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageStatus = iprot.readI32();
              struct.setMortgageStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MORTGATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgator = iprot.readString();
              struct.setMortgatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HIS_WARRANT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hisWarrantTime = iprot.readString();
              struct.setHisWarrantTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HIS_WARRANT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hisWarrantUserName = iprot.readString();
              struct.setHisWarrantUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // HIS_WARRANT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hisWarrantStartTime = iprot.readString();
              struct.setHisWarrantStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // HIS_WARRANT_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hisWarrantEndTime = iprot.readString();
              struct.setHisWarrantEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RECORD_CLERK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordClerkId = iprot.readI32();
              struct.setRecordClerkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = iprot.readI32();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // INTERVIEWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interviewer = iprot.readString();
              struct.setInterviewerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // INTERVIEW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interviewId = iprot.readI32();
              struct.setInterviewIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // INTERVIEW_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interviewTime = iprot.readString();
              struct.setInterviewTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CUS_CARD_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusCardInfo = new com.xlkfinance.bms.rpc.project.CusCardInfo();
              struct.cusCardInfo.read(iprot);
              struct.setCusCardInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // INTERVIEW_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interviewPlace = iprot.readString();
              struct.setInterviewPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // NOTARIZATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notarizationId = iprot.readI32();
              struct.setNotarizationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // MORTGAGE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageUser = iprot.readI32();
              struct.setMortgageUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizInterviewInfoIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WF_STATUS_FIELD_DESC);
      oprot.writeI32(struct.wfStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter307 : struct.userIds)
          {
            oprot.writeI32(_iter307);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVIEW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.interviewStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTARIZATION_STATUS_FIELD_DESC);
      oprot.writeI32(struct.notarizationStatus);
      oprot.writeFieldEnd();
      if (struct.notarizator != null) {
        oprot.writeFieldBegin(NOTARIZATOR_FIELD_DESC);
        oprot.writeString(struct.notarizator);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MORTGAGE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.mortgageStatus);
      oprot.writeFieldEnd();
      if (struct.mortgator != null) {
        oprot.writeFieldBegin(MORTGATOR_FIELD_DESC);
        oprot.writeString(struct.mortgator);
        oprot.writeFieldEnd();
      }
      if (struct.hisWarrantTime != null) {
        oprot.writeFieldBegin(HIS_WARRANT_TIME_FIELD_DESC);
        oprot.writeString(struct.hisWarrantTime);
        oprot.writeFieldEnd();
      }
      if (struct.hisWarrantUserName != null) {
        oprot.writeFieldBegin(HIS_WARRANT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.hisWarrantUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.hisWarrantStartTime != null) {
        oprot.writeFieldBegin(HIS_WARRANT_START_TIME_FIELD_DESC);
        oprot.writeString(struct.hisWarrantStartTime);
        oprot.writeFieldEnd();
      }
      if (struct.hisWarrantEndTime != null) {
        oprot.writeFieldBegin(HIS_WARRANT_END_TIME_FIELD_DESC);
        oprot.writeString(struct.hisWarrantEndTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECORD_CLERK_ID_FIELD_DESC);
      oprot.writeI32(struct.recordClerkId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.productType);
      oprot.writeFieldEnd();
      if (struct.interviewer != null) {
        oprot.writeFieldBegin(INTERVIEWER_FIELD_DESC);
        oprot.writeString(struct.interviewer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERVIEW_ID_FIELD_DESC);
      oprot.writeI32(struct.interviewId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.interviewTime != null) {
        oprot.writeFieldBegin(INTERVIEW_TIME_FIELD_DESC);
        oprot.writeString(struct.interviewTime);
        oprot.writeFieldEnd();
      }
      if (struct.cusCardInfo != null) {
        oprot.writeFieldBegin(CUS_CARD_INFO_FIELD_DESC);
        struct.cusCardInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.interviewPlace != null) {
        oprot.writeFieldBegin(INTERVIEW_PLACE_FIELD_DESC);
        oprot.writeString(struct.interviewPlace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTARIZATION_ID_FIELD_DESC);
      oprot.writeI32(struct.notarizationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_USER_FIELD_DESC);
      oprot.writeI32(struct.mortgageUser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizInterviewInfoIndexDTOTupleSchemeFactory implements SchemeFactory {
    public BizInterviewInfoIndexDTOTupleScheme getScheme() {
      return new BizInterviewInfoIndexDTOTupleScheme();
    }
  }

  private static class BizInterviewInfoIndexDTOTupleScheme extends TupleScheme<BizInterviewInfoIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizInterviewInfoIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetWfStatus()) {
        optionals.set(4);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(5);
      }
      if (struct.isSetUserIds()) {
        optionals.set(6);
      }
      if (struct.isSetPage()) {
        optionals.set(7);
      }
      if (struct.isSetRows()) {
        optionals.set(8);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(9);
      }
      if (struct.isSetAcctName()) {
        optionals.set(10);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(11);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(12);
      }
      if (struct.isSetInterviewStatus()) {
        optionals.set(13);
      }
      if (struct.isSetNotarizationStatus()) {
        optionals.set(14);
      }
      if (struct.isSetNotarizator()) {
        optionals.set(15);
      }
      if (struct.isSetMortgageStatus()) {
        optionals.set(16);
      }
      if (struct.isSetMortgator()) {
        optionals.set(17);
      }
      if (struct.isSetHisWarrantTime()) {
        optionals.set(18);
      }
      if (struct.isSetHisWarrantUserName()) {
        optionals.set(19);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(20);
      }
      if (struct.isSetHisWarrantStartTime()) {
        optionals.set(21);
      }
      if (struct.isSetHisWarrantEndTime()) {
        optionals.set(22);
      }
      if (struct.isSetRecordClerkId()) {
        optionals.set(23);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(24);
      }
      if (struct.isSetProductType()) {
        optionals.set(25);
      }
      if (struct.isSetInterviewer()) {
        optionals.set(26);
      }
      if (struct.isSetInterviewId()) {
        optionals.set(27);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(28);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(29);
      }
      if (struct.isSetInterviewTime()) {
        optionals.set(30);
      }
      if (struct.isSetCusCardInfo()) {
        optionals.set(31);
      }
      if (struct.isSetInterviewPlace()) {
        optionals.set(32);
      }
      if (struct.isSetNotarizationId()) {
        optionals.set(33);
      }
      if (struct.isSetMortgageUser()) {
        optionals.set(34);
      }
      if (struct.isSetProjectType()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetWfStatus()) {
        oprot.writeI32(struct.wfStatus);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter308 : struct.userIds)
          {
            oprot.writeI32(_iter308);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetInterviewStatus()) {
        oprot.writeI32(struct.interviewStatus);
      }
      if (struct.isSetNotarizationStatus()) {
        oprot.writeI32(struct.notarizationStatus);
      }
      if (struct.isSetNotarizator()) {
        oprot.writeString(struct.notarizator);
      }
      if (struct.isSetMortgageStatus()) {
        oprot.writeI32(struct.mortgageStatus);
      }
      if (struct.isSetMortgator()) {
        oprot.writeString(struct.mortgator);
      }
      if (struct.isSetHisWarrantTime()) {
        oprot.writeString(struct.hisWarrantTime);
      }
      if (struct.isSetHisWarrantUserName()) {
        oprot.writeString(struct.hisWarrantUserName);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetHisWarrantStartTime()) {
        oprot.writeString(struct.hisWarrantStartTime);
      }
      if (struct.isSetHisWarrantEndTime()) {
        oprot.writeString(struct.hisWarrantEndTime);
      }
      if (struct.isSetRecordClerkId()) {
        oprot.writeI32(struct.recordClerkId);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType);
      }
      if (struct.isSetInterviewer()) {
        oprot.writeString(struct.interviewer);
      }
      if (struct.isSetInterviewId()) {
        oprot.writeI32(struct.interviewId);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetInterviewTime()) {
        oprot.writeString(struct.interviewTime);
      }
      if (struct.isSetCusCardInfo()) {
        struct.cusCardInfo.write(oprot);
      }
      if (struct.isSetInterviewPlace()) {
        oprot.writeString(struct.interviewPlace);
      }
      if (struct.isSetNotarizationId()) {
        oprot.writeI32(struct.notarizationId);
      }
      if (struct.isSetMortgageUser()) {
        oprot.writeI32(struct.mortgageUser);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizInterviewInfoIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wfStatus = iprot.readI32();
        struct.setWfStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list309.size);
          int _elem310;
          for (int _i311 = 0; _i311 < _list309.size; ++_i311)
          {
            _elem310 = iprot.readI32();
            struct.userIds.add(_elem310);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.interviewStatus = iprot.readI32();
        struct.setInterviewStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.notarizationStatus = iprot.readI32();
        struct.setNotarizationStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.notarizator = iprot.readString();
        struct.setNotarizatorIsSet(true);
      }
      if (incoming.get(16)) {
        struct.mortgageStatus = iprot.readI32();
        struct.setMortgageStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.mortgator = iprot.readString();
        struct.setMortgatorIsSet(true);
      }
      if (incoming.get(18)) {
        struct.hisWarrantTime = iprot.readString();
        struct.setHisWarrantTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.hisWarrantUserName = iprot.readString();
        struct.setHisWarrantUserNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.hisWarrantStartTime = iprot.readString();
        struct.setHisWarrantStartTimeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.hisWarrantEndTime = iprot.readString();
        struct.setHisWarrantEndTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.recordClerkId = iprot.readI32();
        struct.setRecordClerkIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(25)) {
        struct.productType = iprot.readI32();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.interviewer = iprot.readString();
        struct.setInterviewerIsSet(true);
      }
      if (incoming.get(27)) {
        struct.interviewId = iprot.readI32();
        struct.setInterviewIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(29)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(30)) {
        struct.interviewTime = iprot.readString();
        struct.setInterviewTimeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.cusCardInfo = new com.xlkfinance.bms.rpc.project.CusCardInfo();
        struct.cusCardInfo.read(iprot);
        struct.setCusCardInfoIsSet(true);
      }
      if (incoming.get(32)) {
        struct.interviewPlace = iprot.readString();
        struct.setInterviewPlaceIsSet(true);
      }
      if (incoming.get(33)) {
        struct.notarizationId = iprot.readI32();
        struct.setNotarizationIdIsSet(true);
      }
      if (incoming.get(34)) {
        struct.mortgageUser = iprot.readI32();
        struct.setMortgageUserIsSet(true);
      }
      if (incoming.get(35)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 广告信息 SYS_ADV_PIC_INFO
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysAdvPicInfo implements org.apache.thrift.TBase<SysAdvPicInfo, SysAdvPicInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SysAdvPicInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysAdvPicInfo");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pictureUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ORDER_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIndex", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysAdvPicInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysAdvPicInfoTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public String createDate; // required
  public int createId; // required
  public int pid; // required
  public String title; // required
  public String content; // required
  public String url; // required
  public int orgId; // required
  public int status; // required
  public String remark; // required
  public String pictureUrl; // required
  public int orderIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    CREATE_DATE((short)3, "createDate"),
    CREATE_ID((short)4, "createId"),
    PID((short)5, "pid"),
    TITLE((short)6, "title"),
    CONTENT((short)7, "content"),
    URL((short)8, "url"),
    ORG_ID((short)9, "orgId"),
    STATUS((short)10, "status"),
    REMARK((short)11, "remark"),
    PICTURE_URL((short)12, "pictureUrl"),
    ORDER_INDEX((short)13, "orderIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // CREATE_DATE
          return CREATE_DATE;
        case 4: // CREATE_ID
          return CREATE_ID;
        case 5: // PID
          return PID;
        case 6: // TITLE
          return TITLE;
        case 7: // CONTENT
          return CONTENT;
        case 8: // URL
          return URL;
        case 9: // ORG_ID
          return ORG_ID;
        case 10: // STATUS
          return STATUS;
        case 11: // REMARK
          return REMARK;
        case 12: // PICTURE_URL
          return PICTURE_URL;
        case 13: // ORDER_INDEX
          return ORDER_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __CREATEID_ISSET_ID = 2;
  private static final int __PID_ISSET_ID = 3;
  private static final int __ORGID_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __ORDERINDEX_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_ID, new org.apache.thrift.meta_data.FieldMetaData("createId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL, new org.apache.thrift.meta_data.FieldMetaData("pictureUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_INDEX, new org.apache.thrift.meta_data.FieldMetaData("orderIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysAdvPicInfo.class, metaDataMap);
  }

  public SysAdvPicInfo() {
    this.page = 1;

    this.rows = 10;

  }

  public SysAdvPicInfo(
    int page,
    int rows,
    String createDate,
    int createId,
    int pid,
    String title,
    String content,
    String url,
    int orgId,
    int status,
    String remark,
    String pictureUrl,
    int orderIndex)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.createDate = createDate;
    this.createId = createId;
    setCreateIdIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.title = title;
    this.content = content;
    this.url = url;
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.remark = remark;
    this.pictureUrl = pictureUrl;
    this.orderIndex = orderIndex;
    setOrderIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysAdvPicInfo(SysAdvPicInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createId = other.createId;
    this.pid = other.pid;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.orgId = other.orgId;
    this.status = other.status;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPictureUrl()) {
      this.pictureUrl = other.pictureUrl;
    }
    this.orderIndex = other.orderIndex;
  }

  public SysAdvPicInfo deepCopy() {
    return new SysAdvPicInfo(this);
  }

  @Override
  public void clear() {
    this.page = 1;

    this.rows = 10;

    this.createDate = null;
    setCreateIdIsSet(false);
    this.createId = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.title = null;
    this.content = null;
    this.url = null;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.remark = null;
    this.pictureUrl = null;
    setOrderIndexIsSet(false);
    this.orderIndex = 0;
  }

  public int getPage() {
    return this.page;
  }

  public SysAdvPicInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SysAdvPicInfo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public SysAdvPicInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreateId() {
    return this.createId;
  }

  public SysAdvPicInfo setCreateId(int createId) {
    this.createId = createId;
    setCreateIdIsSet(true);
    return this;
  }

  public void unsetCreateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  /** Returns true if field createId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  public void setCreateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEID_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public SysAdvPicInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public SysAdvPicInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SysAdvPicInfo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public SysAdvPicInfo setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getOrgId() {
    return this.orgId;
  }

  public SysAdvPicInfo setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public SysAdvPicInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public SysAdvPicInfo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getPictureUrl() {
    return this.pictureUrl;
  }

  public SysAdvPicInfo setPictureUrl(String pictureUrl) {
    this.pictureUrl = pictureUrl;
    return this;
  }

  public void unsetPictureUrl() {
    this.pictureUrl = null;
  }

  /** Returns true if field pictureUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPictureUrl() {
    return this.pictureUrl != null;
  }

  public void setPictureUrlIsSet(boolean value) {
    if (!value) {
      this.pictureUrl = null;
    }
  }

  public int getOrderIndex() {
    return this.orderIndex;
  }

  public SysAdvPicInfo setOrderIndex(int orderIndex) {
    this.orderIndex = orderIndex;
    setOrderIndexIsSet(true);
    return this;
  }

  public void unsetOrderIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
  }

  /** Returns true if field orderIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
  }

  public void setOrderIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATE_ID:
      if (value == null) {
        unsetCreateId();
      } else {
        setCreateId((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PICTURE_URL:
      if (value == null) {
        unsetPictureUrl();
      } else {
        setPictureUrl((String)value);
      }
      break;

    case ORDER_INDEX:
      if (value == null) {
        unsetOrderIndex();
      } else {
        setOrderIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATE_DATE:
      return getCreateDate();

    case CREATE_ID:
      return Integer.valueOf(getCreateId());

    case PID:
      return Integer.valueOf(getPid());

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case URL:
      return getUrl();

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case REMARK:
      return getRemark();

    case PICTURE_URL:
      return getPictureUrl();

    case ORDER_INDEX:
      return Integer.valueOf(getOrderIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATE_ID:
      return isSetCreateId();
    case PID:
      return isSetPid();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case URL:
      return isSetUrl();
    case ORG_ID:
      return isSetOrgId();
    case STATUS:
      return isSetStatus();
    case REMARK:
      return isSetRemark();
    case PICTURE_URL:
      return isSetPictureUrl();
    case ORDER_INDEX:
      return isSetOrderIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysAdvPicInfo)
      return this.equals((SysAdvPicInfo)that);
    return false;
  }

  public boolean equals(SysAdvPicInfo that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createId = true;
    boolean that_present_createId = true;
    if (this_present_createId || that_present_createId) {
      if (!(this_present_createId && that_present_createId))
        return false;
      if (this.createId != that.createId)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_pictureUrl = true && this.isSetPictureUrl();
    boolean that_present_pictureUrl = true && that.isSetPictureUrl();
    if (this_present_pictureUrl || that_present_pictureUrl) {
      if (!(this_present_pictureUrl && that_present_pictureUrl))
        return false;
      if (!this.pictureUrl.equals(that.pictureUrl))
        return false;
    }

    boolean this_present_orderIndex = true;
    boolean that_present_orderIndex = true;
    if (this_present_orderIndex || that_present_orderIndex) {
      if (!(this_present_orderIndex && that_present_orderIndex))
        return false;
      if (this.orderIndex != that.orderIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createId = true;
    list.add(present_createId);
    if (present_createId)
      list.add(createId);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_pictureUrl = true && (isSetPictureUrl());
    list.add(present_pictureUrl);
    if (present_pictureUrl)
      list.add(pictureUrl);

    boolean present_orderIndex = true;
    list.add(present_orderIndex);
    if (present_orderIndex)
      list.add(orderIndex);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysAdvPicInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateId()).compareTo(other.isSetCreateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createId, other.createId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPictureUrl()).compareTo(other.isSetPictureUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPictureUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pictureUrl, other.pictureUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderIndex()).compareTo(other.isSetOrderIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIndex, other.orderIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysAdvPicInfo(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createId:");
    sb.append(this.createId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pictureUrl:");
    if (this.pictureUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.pictureUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderIndex:");
    sb.append(this.orderIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysAdvPicInfoStandardSchemeFactory implements SchemeFactory {
    public SysAdvPicInfoStandardScheme getScheme() {
      return new SysAdvPicInfoStandardScheme();
    }
  }

  private static class SysAdvPicInfoStandardScheme extends StandardScheme<SysAdvPicInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysAdvPicInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createId = iprot.readI32();
              struct.setCreateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PICTURE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pictureUrl = iprot.readString();
              struct.setPictureUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORDER_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderIndex = iprot.readI32();
              struct.setOrderIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysAdvPicInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_ID_FIELD_DESC);
      oprot.writeI32(struct.createId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.pictureUrl != null) {
        oprot.writeFieldBegin(PICTURE_URL_FIELD_DESC);
        oprot.writeString(struct.pictureUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_INDEX_FIELD_DESC);
      oprot.writeI32(struct.orderIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysAdvPicInfoTupleSchemeFactory implements SchemeFactory {
    public SysAdvPicInfoTupleScheme getScheme() {
      return new SysAdvPicInfoTupleScheme();
    }
  }

  private static class SysAdvPicInfoTupleScheme extends TupleScheme<SysAdvPicInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysAdvPicInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(2);
      }
      if (struct.isSetCreateId()) {
        optionals.set(3);
      }
      if (struct.isSetPid()) {
        optionals.set(4);
      }
      if (struct.isSetTitle()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetUrl()) {
        optionals.set(7);
      }
      if (struct.isSetOrgId()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetPictureUrl()) {
        optionals.set(11);
      }
      if (struct.isSetOrderIndex()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreateId()) {
        oprot.writeI32(struct.createId);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPictureUrl()) {
        oprot.writeString(struct.pictureUrl);
      }
      if (struct.isSetOrderIndex()) {
        oprot.writeI32(struct.orderIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysAdvPicInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createId = iprot.readI32();
        struct.setCreateIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pictureUrl = iprot.readString();
        struct.setPictureUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.orderIndex = iprot.readI32();
        struct.setOrderIndexIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class FinanceDTO implements org.apache.thrift.TBase<FinanceDTO, FinanceDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField EXPIRE_NO_REC_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("expireNoRecAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField NO_EXPIRE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("noExpireAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField NO_RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("noReconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dueDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_RECEIVABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalReceivables", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField UNCOLL_TOGETHER_FIELD_DESC = new org.apache.thrift.protocol.TField("uncollTogether", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField ACTUAL_RECE_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualReceDt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ACTUAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField RECONCIL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconcilAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField HAVA_RECONCILED_FIELD_DESC = new org.apache.thrift.protocol.TField("havaReconciled", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField NO_RECONCILED_FIELD_DESC = new org.apache.thrift.protocol.TField("noReconciled", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField RECONCI_RUST_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciRust", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public String projectName; // required
  public String projectId; // required
  public String acctType; // required
  public double creditAmt; // required
  public double expireNoRecAmt; // required
  public double noExpireAmt; // required
  public double reconciliationAmt; // required
  public double noReconciliationAmt; // required
  public String dueDate; // required
  public double totalReceivables; // required
  public double uncollTogether; // required
  public String actualReceDt; // required
  public double actualAmt; // required
  public double reconcilAmt; // required
  public double havaReconciled; // required
  public double noReconciled; // required
  public String reconciRust; // required
  public String operation; // required
  public String acctName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    PROJECT_NAME((short)3, "projectName"),
    PROJECT_ID((short)4, "projectId"),
    ACCT_TYPE((short)5, "acctType"),
    CREDIT_AMT((short)6, "creditAmt"),
    EXPIRE_NO_REC_AMT((short)7, "expireNoRecAmt"),
    NO_EXPIRE_AMT((short)8, "noExpireAmt"),
    RECONCILIATION_AMT((short)9, "reconciliationAmt"),
    NO_RECONCILIATION_AMT((short)10, "noReconciliationAmt"),
    DUE_DATE((short)11, "dueDate"),
    TOTAL_RECEIVABLES((short)12, "totalReceivables"),
    UNCOLL_TOGETHER((short)13, "uncollTogether"),
    ACTUAL_RECE_DT((short)14, "actualReceDt"),
    ACTUAL_AMT((short)15, "actualAmt"),
    RECONCIL_AMT((short)16, "reconcilAmt"),
    HAVA_RECONCILED((short)17, "havaReconciled"),
    NO_RECONCILED((short)18, "noReconciled"),
    RECONCI_RUST((short)19, "reconciRust"),
    OPERATION((short)20, "operation"),
    ACCT_NAME((short)21, "acctName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // PROJECT_NAME
          return PROJECT_NAME;
        case 4: // PROJECT_ID
          return PROJECT_ID;
        case 5: // ACCT_TYPE
          return ACCT_TYPE;
        case 6: // CREDIT_AMT
          return CREDIT_AMT;
        case 7: // EXPIRE_NO_REC_AMT
          return EXPIRE_NO_REC_AMT;
        case 8: // NO_EXPIRE_AMT
          return NO_EXPIRE_AMT;
        case 9: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 10: // NO_RECONCILIATION_AMT
          return NO_RECONCILIATION_AMT;
        case 11: // DUE_DATE
          return DUE_DATE;
        case 12: // TOTAL_RECEIVABLES
          return TOTAL_RECEIVABLES;
        case 13: // UNCOLL_TOGETHER
          return UNCOLL_TOGETHER;
        case 14: // ACTUAL_RECE_DT
          return ACTUAL_RECE_DT;
        case 15: // ACTUAL_AMT
          return ACTUAL_AMT;
        case 16: // RECONCIL_AMT
          return RECONCIL_AMT;
        case 17: // HAVA_RECONCILED
          return HAVA_RECONCILED;
        case 18: // NO_RECONCILED
          return NO_RECONCILED;
        case 19: // RECONCI_RUST
          return RECONCI_RUST;
        case 20: // OPERATION
          return OPERATION;
        case 21: // ACCT_NAME
          return ACCT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __CREDITAMT_ISSET_ID = 2;
  private static final int __EXPIRENORECAMT_ISSET_ID = 3;
  private static final int __NOEXPIREAMT_ISSET_ID = 4;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 5;
  private static final int __NORECONCILIATIONAMT_ISSET_ID = 6;
  private static final int __TOTALRECEIVABLES_ISSET_ID = 7;
  private static final int __UNCOLLTOGETHER_ISSET_ID = 8;
  private static final int __ACTUALAMT_ISSET_ID = 9;
  private static final int __RECONCILAMT_ISSET_ID = 10;
  private static final int __HAVARECONCILED_ISSET_ID = 11;
  private static final int __NORECONCILED_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXPIRE_NO_REC_AMT, new org.apache.thrift.meta_data.FieldMetaData("expireNoRecAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NO_EXPIRE_AMT, new org.apache.thrift.meta_data.FieldMetaData("noExpireAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NO_RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("noReconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("dueDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_RECEIVABLES, new org.apache.thrift.meta_data.FieldMetaData("totalReceivables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNCOLL_TOGETHER, new org.apache.thrift.meta_data.FieldMetaData("uncollTogether", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_RECE_DT, new org.apache.thrift.meta_data.FieldMetaData("actualReceDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("actualAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCIL_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconcilAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HAVA_RECONCILED, new org.apache.thrift.meta_data.FieldMetaData("havaReconciled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NO_RECONCILED, new org.apache.thrift.meta_data.FieldMetaData("noReconciled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCI_RUST, new org.apache.thrift.meta_data.FieldMetaData("reconciRust", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceDTO.class, metaDataMap);
  }

  public FinanceDTO() {
  }

  public FinanceDTO(
    int pid,
    int loanId,
    String projectName,
    String projectId,
    String acctType,
    double creditAmt,
    double expireNoRecAmt,
    double noExpireAmt,
    double reconciliationAmt,
    double noReconciliationAmt,
    String dueDate,
    double totalReceivables,
    double uncollTogether,
    String actualReceDt,
    double actualAmt,
    double reconcilAmt,
    double havaReconciled,
    double noReconciled,
    String reconciRust,
    String operation,
    String acctName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectName = projectName;
    this.projectId = projectId;
    this.acctType = acctType;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.expireNoRecAmt = expireNoRecAmt;
    setExpireNoRecAmtIsSet(true);
    this.noExpireAmt = noExpireAmt;
    setNoExpireAmtIsSet(true);
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.noReconciliationAmt = noReconciliationAmt;
    setNoReconciliationAmtIsSet(true);
    this.dueDate = dueDate;
    this.totalReceivables = totalReceivables;
    setTotalReceivablesIsSet(true);
    this.uncollTogether = uncollTogether;
    setUncollTogetherIsSet(true);
    this.actualReceDt = actualReceDt;
    this.actualAmt = actualAmt;
    setActualAmtIsSet(true);
    this.reconcilAmt = reconcilAmt;
    setReconcilAmtIsSet(true);
    this.havaReconciled = havaReconciled;
    setHavaReconciledIsSet(true);
    this.noReconciled = noReconciled;
    setNoReconciledIsSet(true);
    this.reconciRust = reconciRust;
    this.operation = operation;
    this.acctName = acctName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceDTO(FinanceDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetAcctType()) {
      this.acctType = other.acctType;
    }
    this.creditAmt = other.creditAmt;
    this.expireNoRecAmt = other.expireNoRecAmt;
    this.noExpireAmt = other.noExpireAmt;
    this.reconciliationAmt = other.reconciliationAmt;
    this.noReconciliationAmt = other.noReconciliationAmt;
    if (other.isSetDueDate()) {
      this.dueDate = other.dueDate;
    }
    this.totalReceivables = other.totalReceivables;
    this.uncollTogether = other.uncollTogether;
    if (other.isSetActualReceDt()) {
      this.actualReceDt = other.actualReceDt;
    }
    this.actualAmt = other.actualAmt;
    this.reconcilAmt = other.reconcilAmt;
    this.havaReconciled = other.havaReconciled;
    this.noReconciled = other.noReconciled;
    if (other.isSetReconciRust()) {
      this.reconciRust = other.reconciRust;
    }
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
  }

  public FinanceDTO deepCopy() {
    return new FinanceDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.projectName = null;
    this.projectId = null;
    this.acctType = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setExpireNoRecAmtIsSet(false);
    this.expireNoRecAmt = 0.0;
    setNoExpireAmtIsSet(false);
    this.noExpireAmt = 0.0;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    setNoReconciliationAmtIsSet(false);
    this.noReconciliationAmt = 0.0;
    this.dueDate = null;
    setTotalReceivablesIsSet(false);
    this.totalReceivables = 0.0;
    setUncollTogetherIsSet(false);
    this.uncollTogether = 0.0;
    this.actualReceDt = null;
    setActualAmtIsSet(false);
    this.actualAmt = 0.0;
    setReconcilAmtIsSet(false);
    this.reconcilAmt = 0.0;
    setHavaReconciledIsSet(false);
    this.havaReconciled = 0.0;
    setNoReconciledIsSet(false);
    this.noReconciled = 0.0;
    this.reconciRust = null;
    this.operation = null;
    this.acctName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public FinanceDTO setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public FinanceDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public FinanceDTO setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getAcctType() {
    return this.acctType;
  }

  public FinanceDTO setAcctType(String acctType) {
    this.acctType = acctType;
    return this;
  }

  public void unsetAcctType() {
    this.acctType = null;
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return this.acctType != null;
  }

  public void setAcctTypeIsSet(boolean value) {
    if (!value) {
      this.acctType = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public FinanceDTO setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getExpireNoRecAmt() {
    return this.expireNoRecAmt;
  }

  public FinanceDTO setExpireNoRecAmt(double expireNoRecAmt) {
    this.expireNoRecAmt = expireNoRecAmt;
    setExpireNoRecAmtIsSet(true);
    return this;
  }

  public void unsetExpireNoRecAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRENORECAMT_ISSET_ID);
  }

  /** Returns true if field expireNoRecAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireNoRecAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRENORECAMT_ISSET_ID);
  }

  public void setExpireNoRecAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRENORECAMT_ISSET_ID, value);
  }

  public double getNoExpireAmt() {
    return this.noExpireAmt;
  }

  public FinanceDTO setNoExpireAmt(double noExpireAmt) {
    this.noExpireAmt = noExpireAmt;
    setNoExpireAmtIsSet(true);
    return this;
  }

  public void unsetNoExpireAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOEXPIREAMT_ISSET_ID);
  }

  /** Returns true if field noExpireAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetNoExpireAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __NOEXPIREAMT_ISSET_ID);
  }

  public void setNoExpireAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOEXPIREAMT_ISSET_ID, value);
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public FinanceDTO setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public double getNoReconciliationAmt() {
    return this.noReconciliationAmt;
  }

  public FinanceDTO setNoReconciliationAmt(double noReconciliationAmt) {
    this.noReconciliationAmt = noReconciliationAmt;
    setNoReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetNoReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field noReconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetNoReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __NORECONCILIATIONAMT_ISSET_ID);
  }

  public void setNoReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORECONCILIATIONAMT_ISSET_ID, value);
  }

  public String getDueDate() {
    return this.dueDate;
  }

  public FinanceDTO setDueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  public void unsetDueDate() {
    this.dueDate = null;
  }

  /** Returns true if field dueDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDueDate() {
    return this.dueDate != null;
  }

  public void setDueDateIsSet(boolean value) {
    if (!value) {
      this.dueDate = null;
    }
  }

  public double getTotalReceivables() {
    return this.totalReceivables;
  }

  public FinanceDTO setTotalReceivables(double totalReceivables) {
    this.totalReceivables = totalReceivables;
    setTotalReceivablesIsSet(true);
    return this;
  }

  public void unsetTotalReceivables() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALRECEIVABLES_ISSET_ID);
  }

  /** Returns true if field totalReceivables is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalReceivables() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALRECEIVABLES_ISSET_ID);
  }

  public void setTotalReceivablesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALRECEIVABLES_ISSET_ID, value);
  }

  public double getUncollTogether() {
    return this.uncollTogether;
  }

  public FinanceDTO setUncollTogether(double uncollTogether) {
    this.uncollTogether = uncollTogether;
    setUncollTogetherIsSet(true);
    return this;
  }

  public void unsetUncollTogether() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNCOLLTOGETHER_ISSET_ID);
  }

  /** Returns true if field uncollTogether is set (has been assigned a value) and false otherwise */
  public boolean isSetUncollTogether() {
    return EncodingUtils.testBit(__isset_bitfield, __UNCOLLTOGETHER_ISSET_ID);
  }

  public void setUncollTogetherIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNCOLLTOGETHER_ISSET_ID, value);
  }

  public String getActualReceDt() {
    return this.actualReceDt;
  }

  public FinanceDTO setActualReceDt(String actualReceDt) {
    this.actualReceDt = actualReceDt;
    return this;
  }

  public void unsetActualReceDt() {
    this.actualReceDt = null;
  }

  /** Returns true if field actualReceDt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualReceDt() {
    return this.actualReceDt != null;
  }

  public void setActualReceDtIsSet(boolean value) {
    if (!value) {
      this.actualReceDt = null;
    }
  }

  public double getActualAmt() {
    return this.actualAmt;
  }

  public FinanceDTO setActualAmt(double actualAmt) {
    this.actualAmt = actualAmt;
    setActualAmtIsSet(true);
    return this;
  }

  public void unsetActualAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALAMT_ISSET_ID);
  }

  /** Returns true if field actualAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALAMT_ISSET_ID);
  }

  public void setActualAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALAMT_ISSET_ID, value);
  }

  public double getReconcilAmt() {
    return this.reconcilAmt;
  }

  public FinanceDTO setReconcilAmt(double reconcilAmt) {
    this.reconcilAmt = reconcilAmt;
    setReconcilAmtIsSet(true);
    return this;
  }

  public void unsetReconcilAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILAMT_ISSET_ID);
  }

  /** Returns true if field reconcilAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconcilAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILAMT_ISSET_ID);
  }

  public void setReconcilAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILAMT_ISSET_ID, value);
  }

  public double getHavaReconciled() {
    return this.havaReconciled;
  }

  public FinanceDTO setHavaReconciled(double havaReconciled) {
    this.havaReconciled = havaReconciled;
    setHavaReconciledIsSet(true);
    return this;
  }

  public void unsetHavaReconciled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAVARECONCILED_ISSET_ID);
  }

  /** Returns true if field havaReconciled is set (has been assigned a value) and false otherwise */
  public boolean isSetHavaReconciled() {
    return EncodingUtils.testBit(__isset_bitfield, __HAVARECONCILED_ISSET_ID);
  }

  public void setHavaReconciledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAVARECONCILED_ISSET_ID, value);
  }

  public double getNoReconciled() {
    return this.noReconciled;
  }

  public FinanceDTO setNoReconciled(double noReconciled) {
    this.noReconciled = noReconciled;
    setNoReconciledIsSet(true);
    return this;
  }

  public void unsetNoReconciled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORECONCILED_ISSET_ID);
  }

  /** Returns true if field noReconciled is set (has been assigned a value) and false otherwise */
  public boolean isSetNoReconciled() {
    return EncodingUtils.testBit(__isset_bitfield, __NORECONCILED_ISSET_ID);
  }

  public void setNoReconciledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORECONCILED_ISSET_ID, value);
  }

  public String getReconciRust() {
    return this.reconciRust;
  }

  public FinanceDTO setReconciRust(String reconciRust) {
    this.reconciRust = reconciRust;
    return this;
  }

  public void unsetReconciRust() {
    this.reconciRust = null;
  }

  /** Returns true if field reconciRust is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciRust() {
    return this.reconciRust != null;
  }

  public void setReconciRustIsSet(boolean value) {
    if (!value) {
      this.reconciRust = null;
    }
  }

  public String getOperation() {
    return this.operation;
  }

  public FinanceDTO setOperation(String operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public FinanceDTO setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case EXPIRE_NO_REC_AMT:
      if (value == null) {
        unsetExpireNoRecAmt();
      } else {
        setExpireNoRecAmt((Double)value);
      }
      break;

    case NO_EXPIRE_AMT:
      if (value == null) {
        unsetNoExpireAmt();
      } else {
        setNoExpireAmt((Double)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case NO_RECONCILIATION_AMT:
      if (value == null) {
        unsetNoReconciliationAmt();
      } else {
        setNoReconciliationAmt((Double)value);
      }
      break;

    case DUE_DATE:
      if (value == null) {
        unsetDueDate();
      } else {
        setDueDate((String)value);
      }
      break;

    case TOTAL_RECEIVABLES:
      if (value == null) {
        unsetTotalReceivables();
      } else {
        setTotalReceivables((Double)value);
      }
      break;

    case UNCOLL_TOGETHER:
      if (value == null) {
        unsetUncollTogether();
      } else {
        setUncollTogether((Double)value);
      }
      break;

    case ACTUAL_RECE_DT:
      if (value == null) {
        unsetActualReceDt();
      } else {
        setActualReceDt((String)value);
      }
      break;

    case ACTUAL_AMT:
      if (value == null) {
        unsetActualAmt();
      } else {
        setActualAmt((Double)value);
      }
      break;

    case RECONCIL_AMT:
      if (value == null) {
        unsetReconcilAmt();
      } else {
        setReconcilAmt((Double)value);
      }
      break;

    case HAVA_RECONCILED:
      if (value == null) {
        unsetHavaReconciled();
      } else {
        setHavaReconciled((Double)value);
      }
      break;

    case NO_RECONCILED:
      if (value == null) {
        unsetNoReconciled();
      } else {
        setNoReconciled((Double)value);
      }
      break;

    case RECONCI_RUST:
      if (value == null) {
        unsetReconciRust();
      } else {
        setReconciRust((String)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_ID:
      return getProjectId();

    case ACCT_TYPE:
      return getAcctType();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case EXPIRE_NO_REC_AMT:
      return Double.valueOf(getExpireNoRecAmt());

    case NO_EXPIRE_AMT:
      return Double.valueOf(getNoExpireAmt());

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case NO_RECONCILIATION_AMT:
      return Double.valueOf(getNoReconciliationAmt());

    case DUE_DATE:
      return getDueDate();

    case TOTAL_RECEIVABLES:
      return Double.valueOf(getTotalReceivables());

    case UNCOLL_TOGETHER:
      return Double.valueOf(getUncollTogether());

    case ACTUAL_RECE_DT:
      return getActualReceDt();

    case ACTUAL_AMT:
      return Double.valueOf(getActualAmt());

    case RECONCIL_AMT:
      return Double.valueOf(getReconcilAmt());

    case HAVA_RECONCILED:
      return Double.valueOf(getHavaReconciled());

    case NO_RECONCILED:
      return Double.valueOf(getNoReconciled());

    case RECONCI_RUST:
      return getReconciRust();

    case OPERATION:
      return getOperation();

    case ACCT_NAME:
      return getAcctName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_TYPE:
      return isSetAcctType();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case EXPIRE_NO_REC_AMT:
      return isSetExpireNoRecAmt();
    case NO_EXPIRE_AMT:
      return isSetNoExpireAmt();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case NO_RECONCILIATION_AMT:
      return isSetNoReconciliationAmt();
    case DUE_DATE:
      return isSetDueDate();
    case TOTAL_RECEIVABLES:
      return isSetTotalReceivables();
    case UNCOLL_TOGETHER:
      return isSetUncollTogether();
    case ACTUAL_RECE_DT:
      return isSetActualReceDt();
    case ACTUAL_AMT:
      return isSetActualAmt();
    case RECONCIL_AMT:
      return isSetReconcilAmt();
    case HAVA_RECONCILED:
      return isSetHavaReconciled();
    case NO_RECONCILED:
      return isSetNoReconciled();
    case RECONCI_RUST:
      return isSetReconciRust();
    case OPERATION:
      return isSetOperation();
    case ACCT_NAME:
      return isSetAcctName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceDTO)
      return this.equals((FinanceDTO)that);
    return false;
  }

  public boolean equals(FinanceDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_acctType = true && this.isSetAcctType();
    boolean that_present_acctType = true && that.isSetAcctType();
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (!this.acctType.equals(that.acctType))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_expireNoRecAmt = true;
    boolean that_present_expireNoRecAmt = true;
    if (this_present_expireNoRecAmt || that_present_expireNoRecAmt) {
      if (!(this_present_expireNoRecAmt && that_present_expireNoRecAmt))
        return false;
      if (this.expireNoRecAmt != that.expireNoRecAmt)
        return false;
    }

    boolean this_present_noExpireAmt = true;
    boolean that_present_noExpireAmt = true;
    if (this_present_noExpireAmt || that_present_noExpireAmt) {
      if (!(this_present_noExpireAmt && that_present_noExpireAmt))
        return false;
      if (this.noExpireAmt != that.noExpireAmt)
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_noReconciliationAmt = true;
    boolean that_present_noReconciliationAmt = true;
    if (this_present_noReconciliationAmt || that_present_noReconciliationAmt) {
      if (!(this_present_noReconciliationAmt && that_present_noReconciliationAmt))
        return false;
      if (this.noReconciliationAmt != that.noReconciliationAmt)
        return false;
    }

    boolean this_present_dueDate = true && this.isSetDueDate();
    boolean that_present_dueDate = true && that.isSetDueDate();
    if (this_present_dueDate || that_present_dueDate) {
      if (!(this_present_dueDate && that_present_dueDate))
        return false;
      if (!this.dueDate.equals(that.dueDate))
        return false;
    }

    boolean this_present_totalReceivables = true;
    boolean that_present_totalReceivables = true;
    if (this_present_totalReceivables || that_present_totalReceivables) {
      if (!(this_present_totalReceivables && that_present_totalReceivables))
        return false;
      if (this.totalReceivables != that.totalReceivables)
        return false;
    }

    boolean this_present_uncollTogether = true;
    boolean that_present_uncollTogether = true;
    if (this_present_uncollTogether || that_present_uncollTogether) {
      if (!(this_present_uncollTogether && that_present_uncollTogether))
        return false;
      if (this.uncollTogether != that.uncollTogether)
        return false;
    }

    boolean this_present_actualReceDt = true && this.isSetActualReceDt();
    boolean that_present_actualReceDt = true && that.isSetActualReceDt();
    if (this_present_actualReceDt || that_present_actualReceDt) {
      if (!(this_present_actualReceDt && that_present_actualReceDt))
        return false;
      if (!this.actualReceDt.equals(that.actualReceDt))
        return false;
    }

    boolean this_present_actualAmt = true;
    boolean that_present_actualAmt = true;
    if (this_present_actualAmt || that_present_actualAmt) {
      if (!(this_present_actualAmt && that_present_actualAmt))
        return false;
      if (this.actualAmt != that.actualAmt)
        return false;
    }

    boolean this_present_reconcilAmt = true;
    boolean that_present_reconcilAmt = true;
    if (this_present_reconcilAmt || that_present_reconcilAmt) {
      if (!(this_present_reconcilAmt && that_present_reconcilAmt))
        return false;
      if (this.reconcilAmt != that.reconcilAmt)
        return false;
    }

    boolean this_present_havaReconciled = true;
    boolean that_present_havaReconciled = true;
    if (this_present_havaReconciled || that_present_havaReconciled) {
      if (!(this_present_havaReconciled && that_present_havaReconciled))
        return false;
      if (this.havaReconciled != that.havaReconciled)
        return false;
    }

    boolean this_present_noReconciled = true;
    boolean that_present_noReconciled = true;
    if (this_present_noReconciled || that_present_noReconciled) {
      if (!(this_present_noReconciled && that_present_noReconciled))
        return false;
      if (this.noReconciled != that.noReconciled)
        return false;
    }

    boolean this_present_reconciRust = true && this.isSetReconciRust();
    boolean that_present_reconciRust = true && that.isSetReconciRust();
    if (this_present_reconciRust || that_present_reconciRust) {
      if (!(this_present_reconciRust && that_present_reconciRust))
        return false;
      if (!this.reconciRust.equals(that.reconciRust))
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctType = true && (isSetAcctType());
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_expireNoRecAmt = true;
    list.add(present_expireNoRecAmt);
    if (present_expireNoRecAmt)
      list.add(expireNoRecAmt);

    boolean present_noExpireAmt = true;
    list.add(present_noExpireAmt);
    if (present_noExpireAmt)
      list.add(noExpireAmt);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_noReconciliationAmt = true;
    list.add(present_noReconciliationAmt);
    if (present_noReconciliationAmt)
      list.add(noReconciliationAmt);

    boolean present_dueDate = true && (isSetDueDate());
    list.add(present_dueDate);
    if (present_dueDate)
      list.add(dueDate);

    boolean present_totalReceivables = true;
    list.add(present_totalReceivables);
    if (present_totalReceivables)
      list.add(totalReceivables);

    boolean present_uncollTogether = true;
    list.add(present_uncollTogether);
    if (present_uncollTogether)
      list.add(uncollTogether);

    boolean present_actualReceDt = true && (isSetActualReceDt());
    list.add(present_actualReceDt);
    if (present_actualReceDt)
      list.add(actualReceDt);

    boolean present_actualAmt = true;
    list.add(present_actualAmt);
    if (present_actualAmt)
      list.add(actualAmt);

    boolean present_reconcilAmt = true;
    list.add(present_reconcilAmt);
    if (present_reconcilAmt)
      list.add(reconcilAmt);

    boolean present_havaReconciled = true;
    list.add(present_havaReconciled);
    if (present_havaReconciled)
      list.add(havaReconciled);

    boolean present_noReconciled = true;
    list.add(present_noReconciled);
    if (present_noReconciled)
      list.add(noReconciled);

    boolean present_reconciRust = true && (isSetReconciRust());
    list.add(present_reconciRust);
    if (present_reconciRust)
      list.add(reconciRust);

    boolean present_operation = true && (isSetOperation());
    list.add(present_operation);
    if (present_operation)
      list.add(operation);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireNoRecAmt()).compareTo(other.isSetExpireNoRecAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireNoRecAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireNoRecAmt, other.expireNoRecAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoExpireAmt()).compareTo(other.isSetNoExpireAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoExpireAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noExpireAmt, other.noExpireAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoReconciliationAmt()).compareTo(other.isSetNoReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReconciliationAmt, other.noReconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDueDate()).compareTo(other.isSetDueDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueDate, other.dueDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalReceivables()).compareTo(other.isSetTotalReceivables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalReceivables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalReceivables, other.totalReceivables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUncollTogether()).compareTo(other.isSetUncollTogether());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUncollTogether()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uncollTogether, other.uncollTogether);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualReceDt()).compareTo(other.isSetActualReceDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualReceDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualReceDt, other.actualReceDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualAmt()).compareTo(other.isSetActualAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualAmt, other.actualAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconcilAmt()).compareTo(other.isSetReconcilAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconcilAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconcilAmt, other.reconcilAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHavaReconciled()).compareTo(other.isSetHavaReconciled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHavaReconciled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.havaReconciled, other.havaReconciled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoReconciled()).compareTo(other.isSetNoReconciled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoReconciled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReconciled, other.noReconciled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciRust()).compareTo(other.isSetReconciRust());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciRust()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciRust, other.reconciRust);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperation()).compareTo(other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    if (this.acctType == null) {
      sb.append("null");
    } else {
      sb.append(this.acctType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireNoRecAmt:");
    sb.append(this.expireNoRecAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noExpireAmt:");
    sb.append(this.noExpireAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noReconciliationAmt:");
    sb.append(this.noReconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dueDate:");
    if (this.dueDate == null) {
      sb.append("null");
    } else {
      sb.append(this.dueDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalReceivables:");
    sb.append(this.totalReceivables);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uncollTogether:");
    sb.append(this.uncollTogether);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualReceDt:");
    if (this.actualReceDt == null) {
      sb.append("null");
    } else {
      sb.append(this.actualReceDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualAmt:");
    sb.append(this.actualAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconcilAmt:");
    sb.append(this.reconcilAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("havaReconciled:");
    sb.append(this.havaReconciled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noReconciled:");
    sb.append(this.noReconciled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciRust:");
    if (this.reconciRust == null) {
      sb.append("null");
    } else {
      sb.append(this.reconciRust);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operation:");
    if (this.operation == null) {
      sb.append("null");
    } else {
      sb.append(this.operation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceDTOStandardSchemeFactory implements SchemeFactory {
    public FinanceDTOStandardScheme getScheme() {
      return new FinanceDTOStandardScheme();
    }
  }

  private static class FinanceDTOStandardScheme extends StandardScheme<FinanceDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctType = iprot.readString();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPIRE_NO_REC_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.expireNoRecAmt = iprot.readDouble();
              struct.setExpireNoRecAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NO_EXPIRE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noExpireAmt = iprot.readDouble();
              struct.setNoExpireAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NO_RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noReconciliationAmt = iprot.readDouble();
              struct.setNoReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dueDate = iprot.readString();
              struct.setDueDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_RECEIVABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalReceivables = iprot.readDouble();
              struct.setTotalReceivablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UNCOLL_TOGETHER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uncollTogether = iprot.readDouble();
              struct.setUncollTogetherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACTUAL_RECE_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualReceDt = iprot.readString();
              struct.setActualReceDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACTUAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualAmt = iprot.readDouble();
              struct.setActualAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RECONCIL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconcilAmt = iprot.readDouble();
              struct.setReconcilAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HAVA_RECONCILED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.havaReconciled = iprot.readDouble();
              struct.setHavaReconciledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NO_RECONCILED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noReconciled = iprot.readDouble();
              struct.setNoReconciledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RECONCI_RUST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reconciRust = iprot.readString();
              struct.setReconciRustIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operation = iprot.readString();
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.acctType != null) {
        oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
        oprot.writeString(struct.acctType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_NO_REC_AMT_FIELD_DESC);
      oprot.writeDouble(struct.expireNoRecAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_EXPIRE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.noExpireAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.noReconciliationAmt);
      oprot.writeFieldEnd();
      if (struct.dueDate != null) {
        oprot.writeFieldBegin(DUE_DATE_FIELD_DESC);
        oprot.writeString(struct.dueDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_RECEIVABLES_FIELD_DESC);
      oprot.writeDouble(struct.totalReceivables);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNCOLL_TOGETHER_FIELD_DESC);
      oprot.writeDouble(struct.uncollTogether);
      oprot.writeFieldEnd();
      if (struct.actualReceDt != null) {
        oprot.writeFieldBegin(ACTUAL_RECE_DT_FIELD_DESC);
        oprot.writeString(struct.actualReceDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTUAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.actualAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCIL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconcilAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAVA_RECONCILED_FIELD_DESC);
      oprot.writeDouble(struct.havaReconciled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_RECONCILED_FIELD_DESC);
      oprot.writeDouble(struct.noReconciled);
      oprot.writeFieldEnd();
      if (struct.reconciRust != null) {
        oprot.writeFieldBegin(RECONCI_RUST_FIELD_DESC);
        oprot.writeString(struct.reconciRust);
        oprot.writeFieldEnd();
      }
      if (struct.operation != null) {
        oprot.writeFieldBegin(OPERATION_FIELD_DESC);
        oprot.writeString(struct.operation);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceDTOTupleSchemeFactory implements SchemeFactory {
    public FinanceDTOTupleScheme getScheme() {
      return new FinanceDTOTupleScheme();
    }
  }

  private static class FinanceDTOTupleScheme extends TupleScheme<FinanceDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectName()) {
        optionals.set(2);
      }
      if (struct.isSetProjectId()) {
        optionals.set(3);
      }
      if (struct.isSetAcctType()) {
        optionals.set(4);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(5);
      }
      if (struct.isSetExpireNoRecAmt()) {
        optionals.set(6);
      }
      if (struct.isSetNoExpireAmt()) {
        optionals.set(7);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(8);
      }
      if (struct.isSetNoReconciliationAmt()) {
        optionals.set(9);
      }
      if (struct.isSetDueDate()) {
        optionals.set(10);
      }
      if (struct.isSetTotalReceivables()) {
        optionals.set(11);
      }
      if (struct.isSetUncollTogether()) {
        optionals.set(12);
      }
      if (struct.isSetActualReceDt()) {
        optionals.set(13);
      }
      if (struct.isSetActualAmt()) {
        optionals.set(14);
      }
      if (struct.isSetReconcilAmt()) {
        optionals.set(15);
      }
      if (struct.isSetHavaReconciled()) {
        optionals.set(16);
      }
      if (struct.isSetNoReconciled()) {
        optionals.set(17);
      }
      if (struct.isSetReconciRust()) {
        optionals.set(18);
      }
      if (struct.isSetOperation()) {
        optionals.set(19);
      }
      if (struct.isSetAcctName()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetAcctType()) {
        oprot.writeString(struct.acctType);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetExpireNoRecAmt()) {
        oprot.writeDouble(struct.expireNoRecAmt);
      }
      if (struct.isSetNoExpireAmt()) {
        oprot.writeDouble(struct.noExpireAmt);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetNoReconciliationAmt()) {
        oprot.writeDouble(struct.noReconciliationAmt);
      }
      if (struct.isSetDueDate()) {
        oprot.writeString(struct.dueDate);
      }
      if (struct.isSetTotalReceivables()) {
        oprot.writeDouble(struct.totalReceivables);
      }
      if (struct.isSetUncollTogether()) {
        oprot.writeDouble(struct.uncollTogether);
      }
      if (struct.isSetActualReceDt()) {
        oprot.writeString(struct.actualReceDt);
      }
      if (struct.isSetActualAmt()) {
        oprot.writeDouble(struct.actualAmt);
      }
      if (struct.isSetReconcilAmt()) {
        oprot.writeDouble(struct.reconcilAmt);
      }
      if (struct.isSetHavaReconciled()) {
        oprot.writeDouble(struct.havaReconciled);
      }
      if (struct.isSetNoReconciled()) {
        oprot.writeDouble(struct.noReconciled);
      }
      if (struct.isSetReconciRust()) {
        oprot.writeString(struct.reconciRust);
      }
      if (struct.isSetOperation()) {
        oprot.writeString(struct.operation);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.acctType = iprot.readString();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.expireNoRecAmt = iprot.readDouble();
        struct.setExpireNoRecAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.noExpireAmt = iprot.readDouble();
        struct.setNoExpireAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.noReconciliationAmt = iprot.readDouble();
        struct.setNoReconciliationAmtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dueDate = iprot.readString();
        struct.setDueDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalReceivables = iprot.readDouble();
        struct.setTotalReceivablesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.uncollTogether = iprot.readDouble();
        struct.setUncollTogetherIsSet(true);
      }
      if (incoming.get(13)) {
        struct.actualReceDt = iprot.readString();
        struct.setActualReceDtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.actualAmt = iprot.readDouble();
        struct.setActualAmtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.reconcilAmt = iprot.readDouble();
        struct.setReconcilAmtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.havaReconciled = iprot.readDouble();
        struct.setHavaReconciledIsSet(true);
      }
      if (incoming.get(17)) {
        struct.noReconciled = iprot.readDouble();
        struct.setNoReconciledIsSet(true);
      }
      if (incoming.get(18)) {
        struct.reconciRust = iprot.readString();
        struct.setReconciRustIsSet(true);
      }
      if (incoming.get(19)) {
        struct.operation = iprot.readString();
        struct.setOperationIsSet(true);
      }
      if (incoming.get(20)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
    }
  }

}


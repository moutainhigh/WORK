/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusBlacklistRefuse implements org.apache.thrift.TBase<CusBlacklistRefuse, CusBlacklistRefuse._Fields>, java.io.Serializable, Cloneable, Comparable<CusBlacklistRefuse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusBlacklistRefuse");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcct", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("listType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("deadline", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REFUSE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseReason", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REVOKE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("revokeReason", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REVOKE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("revokeDttm", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusBlacklistRefuseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusBlacklistRefuseTupleSchemeFactory());
  }

  public int pid; // required
  public CusAcct cusAcct; // required
  public String listType; // required
  public String deadline; // required
  public String refuseReason; // required
  public int status; // required
  public String revokeReason; // required
  public String revokeDttm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_ACCT((short)2, "cusAcct"),
    LIST_TYPE((short)3, "listType"),
    DEADLINE((short)4, "deadline"),
    REFUSE_REASON((short)5, "refuseReason"),
    STATUS((short)6, "status"),
    REVOKE_REASON((short)7, "revokeReason"),
    REVOKE_DTTM((short)8, "revokeDttm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_ACCT
          return CUS_ACCT;
        case 3: // LIST_TYPE
          return LIST_TYPE;
        case 4: // DEADLINE
          return DEADLINE;
        case 5: // REFUSE_REASON
          return REFUSE_REASON;
        case 6: // STATUS
          return STATUS;
        case 7: // REVOKE_REASON
          return REVOKE_REASON;
        case 8: // REVOKE_DTTM
          return REVOKE_DTTM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_ACCT, new org.apache.thrift.meta_data.FieldMetaData("cusAcct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusAcct.class)));
    tmpMap.put(_Fields.LIST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("listType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEADLINE, new org.apache.thrift.meta_data.FieldMetaData("deadline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_REASON, new org.apache.thrift.meta_data.FieldMetaData("refuseReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REVOKE_REASON, new org.apache.thrift.meta_data.FieldMetaData("revokeReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVOKE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("revokeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusBlacklistRefuse.class, metaDataMap);
  }

  public CusBlacklistRefuse() {
  }

  public CusBlacklistRefuse(
    int pid,
    CusAcct cusAcct,
    String listType,
    String deadline,
    String refuseReason,
    int status,
    String revokeReason,
    String revokeDttm)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusAcct = cusAcct;
    this.listType = listType;
    this.deadline = deadline;
    this.refuseReason = refuseReason;
    this.status = status;
    setStatusIsSet(true);
    this.revokeReason = revokeReason;
    this.revokeDttm = revokeDttm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusBlacklistRefuse(CusBlacklistRefuse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusAcct()) {
      this.cusAcct = new CusAcct(other.cusAcct);
    }
    if (other.isSetListType()) {
      this.listType = other.listType;
    }
    if (other.isSetDeadline()) {
      this.deadline = other.deadline;
    }
    if (other.isSetRefuseReason()) {
      this.refuseReason = other.refuseReason;
    }
    this.status = other.status;
    if (other.isSetRevokeReason()) {
      this.revokeReason = other.revokeReason;
    }
    if (other.isSetRevokeDttm()) {
      this.revokeDttm = other.revokeDttm;
    }
  }

  public CusBlacklistRefuse deepCopy() {
    return new CusBlacklistRefuse(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusAcct = null;
    this.listType = null;
    this.deadline = null;
    this.refuseReason = null;
    setStatusIsSet(false);
    this.status = 0;
    this.revokeReason = null;
    this.revokeDttm = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusBlacklistRefuse setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusAcct getCusAcct() {
    return this.cusAcct;
  }

  public CusBlacklistRefuse setCusAcct(CusAcct cusAcct) {
    this.cusAcct = cusAcct;
    return this;
  }

  public void unsetCusAcct() {
    this.cusAcct = null;
  }

  /** Returns true if field cusAcct is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcct() {
    return this.cusAcct != null;
  }

  public void setCusAcctIsSet(boolean value) {
    if (!value) {
      this.cusAcct = null;
    }
  }

  public String getListType() {
    return this.listType;
  }

  public CusBlacklistRefuse setListType(String listType) {
    this.listType = listType;
    return this;
  }

  public void unsetListType() {
    this.listType = null;
  }

  /** Returns true if field listType is set (has been assigned a value) and false otherwise */
  public boolean isSetListType() {
    return this.listType != null;
  }

  public void setListTypeIsSet(boolean value) {
    if (!value) {
      this.listType = null;
    }
  }

  public String getDeadline() {
    return this.deadline;
  }

  public CusBlacklistRefuse setDeadline(String deadline) {
    this.deadline = deadline;
    return this;
  }

  public void unsetDeadline() {
    this.deadline = null;
  }

  /** Returns true if field deadline is set (has been assigned a value) and false otherwise */
  public boolean isSetDeadline() {
    return this.deadline != null;
  }

  public void setDeadlineIsSet(boolean value) {
    if (!value) {
      this.deadline = null;
    }
  }

  public String getRefuseReason() {
    return this.refuseReason;
  }

  public CusBlacklistRefuse setRefuseReason(String refuseReason) {
    this.refuseReason = refuseReason;
    return this;
  }

  public void unsetRefuseReason() {
    this.refuseReason = null;
  }

  /** Returns true if field refuseReason is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseReason() {
    return this.refuseReason != null;
  }

  public void setRefuseReasonIsSet(boolean value) {
    if (!value) {
      this.refuseReason = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusBlacklistRefuse setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRevokeReason() {
    return this.revokeReason;
  }

  public CusBlacklistRefuse setRevokeReason(String revokeReason) {
    this.revokeReason = revokeReason;
    return this;
  }

  public void unsetRevokeReason() {
    this.revokeReason = null;
  }

  /** Returns true if field revokeReason is set (has been assigned a value) and false otherwise */
  public boolean isSetRevokeReason() {
    return this.revokeReason != null;
  }

  public void setRevokeReasonIsSet(boolean value) {
    if (!value) {
      this.revokeReason = null;
    }
  }

  public String getRevokeDttm() {
    return this.revokeDttm;
  }

  public CusBlacklistRefuse setRevokeDttm(String revokeDttm) {
    this.revokeDttm = revokeDttm;
    return this;
  }

  public void unsetRevokeDttm() {
    this.revokeDttm = null;
  }

  /** Returns true if field revokeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRevokeDttm() {
    return this.revokeDttm != null;
  }

  public void setRevokeDttmIsSet(boolean value) {
    if (!value) {
      this.revokeDttm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_ACCT:
      if (value == null) {
        unsetCusAcct();
      } else {
        setCusAcct((CusAcct)value);
      }
      break;

    case LIST_TYPE:
      if (value == null) {
        unsetListType();
      } else {
        setListType((String)value);
      }
      break;

    case DEADLINE:
      if (value == null) {
        unsetDeadline();
      } else {
        setDeadline((String)value);
      }
      break;

    case REFUSE_REASON:
      if (value == null) {
        unsetRefuseReason();
      } else {
        setRefuseReason((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REVOKE_REASON:
      if (value == null) {
        unsetRevokeReason();
      } else {
        setRevokeReason((String)value);
      }
      break;

    case REVOKE_DTTM:
      if (value == null) {
        unsetRevokeDttm();
      } else {
        setRevokeDttm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_ACCT:
      return getCusAcct();

    case LIST_TYPE:
      return getListType();

    case DEADLINE:
      return getDeadline();

    case REFUSE_REASON:
      return getRefuseReason();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REVOKE_REASON:
      return getRevokeReason();

    case REVOKE_DTTM:
      return getRevokeDttm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_ACCT:
      return isSetCusAcct();
    case LIST_TYPE:
      return isSetListType();
    case DEADLINE:
      return isSetDeadline();
    case REFUSE_REASON:
      return isSetRefuseReason();
    case STATUS:
      return isSetStatus();
    case REVOKE_REASON:
      return isSetRevokeReason();
    case REVOKE_DTTM:
      return isSetRevokeDttm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusBlacklistRefuse)
      return this.equals((CusBlacklistRefuse)that);
    return false;
  }

  public boolean equals(CusBlacklistRefuse that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusAcct = true && this.isSetCusAcct();
    boolean that_present_cusAcct = true && that.isSetCusAcct();
    if (this_present_cusAcct || that_present_cusAcct) {
      if (!(this_present_cusAcct && that_present_cusAcct))
        return false;
      if (!this.cusAcct.equals(that.cusAcct))
        return false;
    }

    boolean this_present_listType = true && this.isSetListType();
    boolean that_present_listType = true && that.isSetListType();
    if (this_present_listType || that_present_listType) {
      if (!(this_present_listType && that_present_listType))
        return false;
      if (!this.listType.equals(that.listType))
        return false;
    }

    boolean this_present_deadline = true && this.isSetDeadline();
    boolean that_present_deadline = true && that.isSetDeadline();
    if (this_present_deadline || that_present_deadline) {
      if (!(this_present_deadline && that_present_deadline))
        return false;
      if (!this.deadline.equals(that.deadline))
        return false;
    }

    boolean this_present_refuseReason = true && this.isSetRefuseReason();
    boolean that_present_refuseReason = true && that.isSetRefuseReason();
    if (this_present_refuseReason || that_present_refuseReason) {
      if (!(this_present_refuseReason && that_present_refuseReason))
        return false;
      if (!this.refuseReason.equals(that.refuseReason))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_revokeReason = true && this.isSetRevokeReason();
    boolean that_present_revokeReason = true && that.isSetRevokeReason();
    if (this_present_revokeReason || that_present_revokeReason) {
      if (!(this_present_revokeReason && that_present_revokeReason))
        return false;
      if (!this.revokeReason.equals(that.revokeReason))
        return false;
    }

    boolean this_present_revokeDttm = true && this.isSetRevokeDttm();
    boolean that_present_revokeDttm = true && that.isSetRevokeDttm();
    if (this_present_revokeDttm || that_present_revokeDttm) {
      if (!(this_present_revokeDttm && that_present_revokeDttm))
        return false;
      if (!this.revokeDttm.equals(that.revokeDttm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusAcct = true && (isSetCusAcct());
    list.add(present_cusAcct);
    if (present_cusAcct)
      list.add(cusAcct);

    boolean present_listType = true && (isSetListType());
    list.add(present_listType);
    if (present_listType)
      list.add(listType);

    boolean present_deadline = true && (isSetDeadline());
    list.add(present_deadline);
    if (present_deadline)
      list.add(deadline);

    boolean present_refuseReason = true && (isSetRefuseReason());
    list.add(present_refuseReason);
    if (present_refuseReason)
      list.add(refuseReason);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_revokeReason = true && (isSetRevokeReason());
    list.add(present_revokeReason);
    if (present_revokeReason)
      list.add(revokeReason);

    boolean present_revokeDttm = true && (isSetRevokeDttm());
    list.add(present_revokeDttm);
    if (present_revokeDttm)
      list.add(revokeDttm);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusBlacklistRefuse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcct()).compareTo(other.isSetCusAcct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcct, other.cusAcct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListType()).compareTo(other.isSetListType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listType, other.listType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeadline()).compareTo(other.isSetDeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deadline, other.deadline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseReason()).compareTo(other.isSetRefuseReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseReason, other.refuseReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevokeReason()).compareTo(other.isSetRevokeReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevokeReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revokeReason, other.revokeReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevokeDttm()).compareTo(other.isSetRevokeDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevokeDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revokeDttm, other.revokeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusBlacklistRefuse(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcct:");
    if (this.cusAcct == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listType:");
    if (this.listType == null) {
      sb.append("null");
    } else {
      sb.append(this.listType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deadline:");
    if (this.deadline == null) {
      sb.append("null");
    } else {
      sb.append(this.deadline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refuseReason:");
    if (this.refuseReason == null) {
      sb.append("null");
    } else {
      sb.append(this.refuseReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("revokeReason:");
    if (this.revokeReason == null) {
      sb.append("null");
    } else {
      sb.append(this.revokeReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revokeDttm:");
    if (this.revokeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.revokeDttm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusAcct != null) {
      cusAcct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusBlacklistRefuseStandardSchemeFactory implements SchemeFactory {
    public CusBlacklistRefuseStandardScheme getScheme() {
      return new CusBlacklistRefuseStandardScheme();
    }
  }

  private static class CusBlacklistRefuseStandardScheme extends StandardScheme<CusBlacklistRefuse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusBlacklistRefuse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_ACCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusAcct = new CusAcct();
              struct.cusAcct.read(iprot);
              struct.setCusAcctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.listType = iprot.readString();
              struct.setListTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deadline = iprot.readString();
              struct.setDeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFUSE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseReason = iprot.readString();
              struct.setRefuseReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REVOKE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.revokeReason = iprot.readString();
              struct.setRevokeReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REVOKE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.revokeDttm = iprot.readString();
              struct.setRevokeDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusBlacklistRefuse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusAcct != null) {
        oprot.writeFieldBegin(CUS_ACCT_FIELD_DESC);
        struct.cusAcct.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.listType != null) {
        oprot.writeFieldBegin(LIST_TYPE_FIELD_DESC);
        oprot.writeString(struct.listType);
        oprot.writeFieldEnd();
      }
      if (struct.deadline != null) {
        oprot.writeFieldBegin(DEADLINE_FIELD_DESC);
        oprot.writeString(struct.deadline);
        oprot.writeFieldEnd();
      }
      if (struct.refuseReason != null) {
        oprot.writeFieldBegin(REFUSE_REASON_FIELD_DESC);
        oprot.writeString(struct.refuseReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.revokeReason != null) {
        oprot.writeFieldBegin(REVOKE_REASON_FIELD_DESC);
        oprot.writeString(struct.revokeReason);
        oprot.writeFieldEnd();
      }
      if (struct.revokeDttm != null) {
        oprot.writeFieldBegin(REVOKE_DTTM_FIELD_DESC);
        oprot.writeString(struct.revokeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusBlacklistRefuseTupleSchemeFactory implements SchemeFactory {
    public CusBlacklistRefuseTupleScheme getScheme() {
      return new CusBlacklistRefuseTupleScheme();
    }
  }

  private static class CusBlacklistRefuseTupleScheme extends TupleScheme<CusBlacklistRefuse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusBlacklistRefuse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusAcct()) {
        optionals.set(1);
      }
      if (struct.isSetListType()) {
        optionals.set(2);
      }
      if (struct.isSetDeadline()) {
        optionals.set(3);
      }
      if (struct.isSetRefuseReason()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetRevokeReason()) {
        optionals.set(6);
      }
      if (struct.isSetRevokeDttm()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusAcct()) {
        struct.cusAcct.write(oprot);
      }
      if (struct.isSetListType()) {
        oprot.writeString(struct.listType);
      }
      if (struct.isSetDeadline()) {
        oprot.writeString(struct.deadline);
      }
      if (struct.isSetRefuseReason()) {
        oprot.writeString(struct.refuseReason);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRevokeReason()) {
        oprot.writeString(struct.revokeReason);
      }
      if (struct.isSetRevokeDttm()) {
        oprot.writeString(struct.revokeDttm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusBlacklistRefuse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusAcct = new CusAcct();
        struct.cusAcct.read(iprot);
        struct.setCusAcctIsSet(true);
      }
      if (incoming.get(2)) {
        struct.listType = iprot.readString();
        struct.setListTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deadline = iprot.readString();
        struct.setDeadlineIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refuseReason = iprot.readString();
        struct.setRefuseReasonIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.revokeReason = iprot.readString();
        struct.setRevokeReasonIsSet(true);
      }
      if (incoming.get(7)) {
        struct.revokeDttm = iprot.readString();
        struct.setRevokeDttmIsSet(true);
      }
    }
  }

}


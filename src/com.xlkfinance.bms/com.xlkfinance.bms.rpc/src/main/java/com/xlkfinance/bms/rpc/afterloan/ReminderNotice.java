/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class ReminderNotice implements org.apache.thrift.TBase<ReminderNotice, ReminderNotice._Fields>, java.io.Serializable, Cloneable, Comparable<ReminderNotice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReminderNotice");

  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SYSDATE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("sysdateDttm", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SHOULD_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldTotal", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OUT_STAND_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("outStandPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField OUT_STAND_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("outStandInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField OUT_STAND_PRINCIPAL_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("outStandPrincipalUp", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OUT_STAND_INTEREST_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("outStandInterestUp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNO", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReminderNoticeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReminderNoticeTupleSchemeFactory());
  }

  public String acctName; // required
  public String accName; // required
  public String sysdateDttm; // required
  public String number; // required
  public String currency; // required
  public int shouldTotal; // required
  public double outStandPrincipal; // required
  public double outStandInterest; // required
  public String outStandPrincipalUp; // required
  public String outStandInterestUp; // required
  public int bankCardType; // required
  public String contractNO; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCT_NAME((short)1, "acctName"),
    ACC_NAME((short)2, "accName"),
    SYSDATE_DTTM((short)3, "sysdateDttm"),
    NUMBER((short)4, "number"),
    CURRENCY((short)5, "currency"),
    SHOULD_TOTAL((short)6, "shouldTotal"),
    OUT_STAND_PRINCIPAL((short)7, "outStandPrincipal"),
    OUT_STAND_INTEREST((short)8, "outStandInterest"),
    OUT_STAND_PRINCIPAL_UP((short)9, "outStandPrincipalUp"),
    OUT_STAND_INTEREST_UP((short)10, "outStandInterestUp"),
    BANK_CARD_TYPE((short)11, "bankCardType"),
    CONTRACT_NO((short)12, "contractNO");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCT_NAME
          return ACCT_NAME;
        case 2: // ACC_NAME
          return ACC_NAME;
        case 3: // SYSDATE_DTTM
          return SYSDATE_DTTM;
        case 4: // NUMBER
          return NUMBER;
        case 5: // CURRENCY
          return CURRENCY;
        case 6: // SHOULD_TOTAL
          return SHOULD_TOTAL;
        case 7: // OUT_STAND_PRINCIPAL
          return OUT_STAND_PRINCIPAL;
        case 8: // OUT_STAND_INTEREST
          return OUT_STAND_INTEREST;
        case 9: // OUT_STAND_PRINCIPAL_UP
          return OUT_STAND_PRINCIPAL_UP;
        case 10: // OUT_STAND_INTEREST_UP
          return OUT_STAND_INTEREST_UP;
        case 11: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 12: // CONTRACT_NO
          return CONTRACT_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOULDTOTAL_ISSET_ID = 0;
  private static final int __OUTSTANDPRINCIPAL_ISSET_ID = 1;
  private static final int __OUTSTANDINTEREST_ISSET_ID = 2;
  private static final int __BANKCARDTYPE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_NAME, new org.apache.thrift.meta_data.FieldMetaData("accName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSDATE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("sysdateDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("shouldTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUT_STAND_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("outStandPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUT_STAND_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("outStandInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUT_STAND_PRINCIPAL_UP, new org.apache.thrift.meta_data.FieldMetaData("outStandPrincipalUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_STAND_INTEREST_UP, new org.apache.thrift.meta_data.FieldMetaData("outStandInterestUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReminderNotice.class, metaDataMap);
  }

  public ReminderNotice() {
  }

  public ReminderNotice(
    String acctName,
    String accName,
    String sysdateDttm,
    String number,
    String currency,
    int shouldTotal,
    double outStandPrincipal,
    double outStandInterest,
    String outStandPrincipalUp,
    String outStandInterestUp,
    int bankCardType,
    String contractNO)
  {
    this();
    this.acctName = acctName;
    this.accName = accName;
    this.sysdateDttm = sysdateDttm;
    this.number = number;
    this.currency = currency;
    this.shouldTotal = shouldTotal;
    setShouldTotalIsSet(true);
    this.outStandPrincipal = outStandPrincipal;
    setOutStandPrincipalIsSet(true);
    this.outStandInterest = outStandInterest;
    setOutStandInterestIsSet(true);
    this.outStandPrincipalUp = outStandPrincipalUp;
    this.outStandInterestUp = outStandInterestUp;
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    this.contractNO = contractNO;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReminderNotice(ReminderNotice other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetAccName()) {
      this.accName = other.accName;
    }
    if (other.isSetSysdateDttm()) {
      this.sysdateDttm = other.sysdateDttm;
    }
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.shouldTotal = other.shouldTotal;
    this.outStandPrincipal = other.outStandPrincipal;
    this.outStandInterest = other.outStandInterest;
    if (other.isSetOutStandPrincipalUp()) {
      this.outStandPrincipalUp = other.outStandPrincipalUp;
    }
    if (other.isSetOutStandInterestUp()) {
      this.outStandInterestUp = other.outStandInterestUp;
    }
    this.bankCardType = other.bankCardType;
    if (other.isSetContractNO()) {
      this.contractNO = other.contractNO;
    }
  }

  public ReminderNotice deepCopy() {
    return new ReminderNotice(this);
  }

  @Override
  public void clear() {
    this.acctName = null;
    this.accName = null;
    this.sysdateDttm = null;
    this.number = null;
    this.currency = null;
    setShouldTotalIsSet(false);
    this.shouldTotal = 0;
    setOutStandPrincipalIsSet(false);
    this.outStandPrincipal = 0.0;
    setOutStandInterestIsSet(false);
    this.outStandInterest = 0.0;
    this.outStandPrincipalUp = null;
    this.outStandInterestUp = null;
    setBankCardTypeIsSet(false);
    this.bankCardType = 0;
    this.contractNO = null;
  }

  public String getAcctName() {
    return this.acctName;
  }

  public ReminderNotice setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getAccName() {
    return this.accName;
  }

  public ReminderNotice setAccName(String accName) {
    this.accName = accName;
    return this;
  }

  public void unsetAccName() {
    this.accName = null;
  }

  /** Returns true if field accName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccName() {
    return this.accName != null;
  }

  public void setAccNameIsSet(boolean value) {
    if (!value) {
      this.accName = null;
    }
  }

  public String getSysdateDttm() {
    return this.sysdateDttm;
  }

  public ReminderNotice setSysdateDttm(String sysdateDttm) {
    this.sysdateDttm = sysdateDttm;
    return this;
  }

  public void unsetSysdateDttm() {
    this.sysdateDttm = null;
  }

  /** Returns true if field sysdateDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetSysdateDttm() {
    return this.sysdateDttm != null;
  }

  public void setSysdateDttmIsSet(boolean value) {
    if (!value) {
      this.sysdateDttm = null;
    }
  }

  public String getNumber() {
    return this.number;
  }

  public ReminderNotice setNumber(String number) {
    this.number = number;
    return this;
  }

  public void unsetNumber() {
    this.number = null;
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return this.number != null;
  }

  public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public ReminderNotice setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public int getShouldTotal() {
    return this.shouldTotal;
  }

  public ReminderNotice setShouldTotal(int shouldTotal) {
    this.shouldTotal = shouldTotal;
    setShouldTotalIsSet(true);
    return this;
  }

  public void unsetShouldTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDTOTAL_ISSET_ID);
  }

  /** Returns true if field shouldTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDTOTAL_ISSET_ID);
  }

  public void setShouldTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDTOTAL_ISSET_ID, value);
  }

  public double getOutStandPrincipal() {
    return this.outStandPrincipal;
  }

  public ReminderNotice setOutStandPrincipal(double outStandPrincipal) {
    this.outStandPrincipal = outStandPrincipal;
    setOutStandPrincipalIsSet(true);
    return this;
  }

  public void unsetOutStandPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTSTANDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field outStandPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetOutStandPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTSTANDPRINCIPAL_ISSET_ID);
  }

  public void setOutStandPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTSTANDPRINCIPAL_ISSET_ID, value);
  }

  public double getOutStandInterest() {
    return this.outStandInterest;
  }

  public ReminderNotice setOutStandInterest(double outStandInterest) {
    this.outStandInterest = outStandInterest;
    setOutStandInterestIsSet(true);
    return this;
  }

  public void unsetOutStandInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTSTANDINTEREST_ISSET_ID);
  }

  /** Returns true if field outStandInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOutStandInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTSTANDINTEREST_ISSET_ID);
  }

  public void setOutStandInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTSTANDINTEREST_ISSET_ID, value);
  }

  public String getOutStandPrincipalUp() {
    return this.outStandPrincipalUp;
  }

  public ReminderNotice setOutStandPrincipalUp(String outStandPrincipalUp) {
    this.outStandPrincipalUp = outStandPrincipalUp;
    return this;
  }

  public void unsetOutStandPrincipalUp() {
    this.outStandPrincipalUp = null;
  }

  /** Returns true if field outStandPrincipalUp is set (has been assigned a value) and false otherwise */
  public boolean isSetOutStandPrincipalUp() {
    return this.outStandPrincipalUp != null;
  }

  public void setOutStandPrincipalUpIsSet(boolean value) {
    if (!value) {
      this.outStandPrincipalUp = null;
    }
  }

  public String getOutStandInterestUp() {
    return this.outStandInterestUp;
  }

  public ReminderNotice setOutStandInterestUp(String outStandInterestUp) {
    this.outStandInterestUp = outStandInterestUp;
    return this;
  }

  public void unsetOutStandInterestUp() {
    this.outStandInterestUp = null;
  }

  /** Returns true if field outStandInterestUp is set (has been assigned a value) and false otherwise */
  public boolean isSetOutStandInterestUp() {
    return this.outStandInterestUp != null;
  }

  public void setOutStandInterestUpIsSet(boolean value) {
    if (!value) {
      this.outStandInterestUp = null;
    }
  }

  public int getBankCardType() {
    return this.bankCardType;
  }

  public ReminderNotice setBankCardType(int bankCardType) {
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    return this;
  }

  public void unsetBankCardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  public void setBankCardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID, value);
  }

  public String getContractNO() {
    return this.contractNO;
  }

  public ReminderNotice setContractNO(String contractNO) {
    this.contractNO = contractNO;
    return this;
  }

  public void unsetContractNO() {
    this.contractNO = null;
  }

  /** Returns true if field contractNO is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNO() {
    return this.contractNO != null;
  }

  public void setContractNOIsSet(boolean value) {
    if (!value) {
      this.contractNO = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case ACC_NAME:
      if (value == null) {
        unsetAccName();
      } else {
        setAccName((String)value);
      }
      break;

    case SYSDATE_DTTM:
      if (value == null) {
        unsetSysdateDttm();
      } else {
        setSysdateDttm((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case SHOULD_TOTAL:
      if (value == null) {
        unsetShouldTotal();
      } else {
        setShouldTotal((Integer)value);
      }
      break;

    case OUT_STAND_PRINCIPAL:
      if (value == null) {
        unsetOutStandPrincipal();
      } else {
        setOutStandPrincipal((Double)value);
      }
      break;

    case OUT_STAND_INTEREST:
      if (value == null) {
        unsetOutStandInterest();
      } else {
        setOutStandInterest((Double)value);
      }
      break;

    case OUT_STAND_PRINCIPAL_UP:
      if (value == null) {
        unsetOutStandPrincipalUp();
      } else {
        setOutStandPrincipalUp((String)value);
      }
      break;

    case OUT_STAND_INTEREST_UP:
      if (value == null) {
        unsetOutStandInterestUp();
      } else {
        setOutStandInterestUp((String)value);
      }
      break;

    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((Integer)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNO();
      } else {
        setContractNO((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCT_NAME:
      return getAcctName();

    case ACC_NAME:
      return getAccName();

    case SYSDATE_DTTM:
      return getSysdateDttm();

    case NUMBER:
      return getNumber();

    case CURRENCY:
      return getCurrency();

    case SHOULD_TOTAL:
      return Integer.valueOf(getShouldTotal());

    case OUT_STAND_PRINCIPAL:
      return Double.valueOf(getOutStandPrincipal());

    case OUT_STAND_INTEREST:
      return Double.valueOf(getOutStandInterest());

    case OUT_STAND_PRINCIPAL_UP:
      return getOutStandPrincipalUp();

    case OUT_STAND_INTEREST_UP:
      return getOutStandInterestUp();

    case BANK_CARD_TYPE:
      return Integer.valueOf(getBankCardType());

    case CONTRACT_NO:
      return getContractNO();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCT_NAME:
      return isSetAcctName();
    case ACC_NAME:
      return isSetAccName();
    case SYSDATE_DTTM:
      return isSetSysdateDttm();
    case NUMBER:
      return isSetNumber();
    case CURRENCY:
      return isSetCurrency();
    case SHOULD_TOTAL:
      return isSetShouldTotal();
    case OUT_STAND_PRINCIPAL:
      return isSetOutStandPrincipal();
    case OUT_STAND_INTEREST:
      return isSetOutStandInterest();
    case OUT_STAND_PRINCIPAL_UP:
      return isSetOutStandPrincipalUp();
    case OUT_STAND_INTEREST_UP:
      return isSetOutStandInterestUp();
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    case CONTRACT_NO:
      return isSetContractNO();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReminderNotice)
      return this.equals((ReminderNotice)that);
    return false;
  }

  public boolean equals(ReminderNotice that) {
    if (that == null)
      return false;

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_accName = true && this.isSetAccName();
    boolean that_present_accName = true && that.isSetAccName();
    if (this_present_accName || that_present_accName) {
      if (!(this_present_accName && that_present_accName))
        return false;
      if (!this.accName.equals(that.accName))
        return false;
    }

    boolean this_present_sysdateDttm = true && this.isSetSysdateDttm();
    boolean that_present_sysdateDttm = true && that.isSetSysdateDttm();
    if (this_present_sysdateDttm || that_present_sysdateDttm) {
      if (!(this_present_sysdateDttm && that_present_sysdateDttm))
        return false;
      if (!this.sysdateDttm.equals(that.sysdateDttm))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_shouldTotal = true;
    boolean that_present_shouldTotal = true;
    if (this_present_shouldTotal || that_present_shouldTotal) {
      if (!(this_present_shouldTotal && that_present_shouldTotal))
        return false;
      if (this.shouldTotal != that.shouldTotal)
        return false;
    }

    boolean this_present_outStandPrincipal = true;
    boolean that_present_outStandPrincipal = true;
    if (this_present_outStandPrincipal || that_present_outStandPrincipal) {
      if (!(this_present_outStandPrincipal && that_present_outStandPrincipal))
        return false;
      if (this.outStandPrincipal != that.outStandPrincipal)
        return false;
    }

    boolean this_present_outStandInterest = true;
    boolean that_present_outStandInterest = true;
    if (this_present_outStandInterest || that_present_outStandInterest) {
      if (!(this_present_outStandInterest && that_present_outStandInterest))
        return false;
      if (this.outStandInterest != that.outStandInterest)
        return false;
    }

    boolean this_present_outStandPrincipalUp = true && this.isSetOutStandPrincipalUp();
    boolean that_present_outStandPrincipalUp = true && that.isSetOutStandPrincipalUp();
    if (this_present_outStandPrincipalUp || that_present_outStandPrincipalUp) {
      if (!(this_present_outStandPrincipalUp && that_present_outStandPrincipalUp))
        return false;
      if (!this.outStandPrincipalUp.equals(that.outStandPrincipalUp))
        return false;
    }

    boolean this_present_outStandInterestUp = true && this.isSetOutStandInterestUp();
    boolean that_present_outStandInterestUp = true && that.isSetOutStandInterestUp();
    if (this_present_outStandInterestUp || that_present_outStandInterestUp) {
      if (!(this_present_outStandInterestUp && that_present_outStandInterestUp))
        return false;
      if (!this.outStandInterestUp.equals(that.outStandInterestUp))
        return false;
    }

    boolean this_present_bankCardType = true;
    boolean that_present_bankCardType = true;
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (this.bankCardType != that.bankCardType)
        return false;
    }

    boolean this_present_contractNO = true && this.isSetContractNO();
    boolean that_present_contractNO = true && that.isSetContractNO();
    if (this_present_contractNO || that_present_contractNO) {
      if (!(this_present_contractNO && that_present_contractNO))
        return false;
      if (!this.contractNO.equals(that.contractNO))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_accName = true && (isSetAccName());
    list.add(present_accName);
    if (present_accName)
      list.add(accName);

    boolean present_sysdateDttm = true && (isSetSysdateDttm());
    list.add(present_sysdateDttm);
    if (present_sysdateDttm)
      list.add(sysdateDttm);

    boolean present_number = true && (isSetNumber());
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_shouldTotal = true;
    list.add(present_shouldTotal);
    if (present_shouldTotal)
      list.add(shouldTotal);

    boolean present_outStandPrincipal = true;
    list.add(present_outStandPrincipal);
    if (present_outStandPrincipal)
      list.add(outStandPrincipal);

    boolean present_outStandInterest = true;
    list.add(present_outStandInterest);
    if (present_outStandInterest)
      list.add(outStandInterest);

    boolean present_outStandPrincipalUp = true && (isSetOutStandPrincipalUp());
    list.add(present_outStandPrincipalUp);
    if (present_outStandPrincipalUp)
      list.add(outStandPrincipalUp);

    boolean present_outStandInterestUp = true && (isSetOutStandInterestUp());
    list.add(present_outStandInterestUp);
    if (present_outStandInterestUp)
      list.add(outStandInterestUp);

    boolean present_bankCardType = true;
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    boolean present_contractNO = true && (isSetContractNO());
    list.add(present_contractNO);
    if (present_contractNO)
      list.add(contractNO);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReminderNotice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccName()).compareTo(other.isSetAccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accName, other.accName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSysdateDttm()).compareTo(other.isSetSysdateDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysdateDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysdateDttm, other.sysdateDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldTotal()).compareTo(other.isSetShouldTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldTotal, other.shouldTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutStandPrincipal()).compareTo(other.isSetOutStandPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutStandPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outStandPrincipal, other.outStandPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutStandInterest()).compareTo(other.isSetOutStandInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutStandInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outStandInterest, other.outStandInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutStandPrincipalUp()).compareTo(other.isSetOutStandPrincipalUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutStandPrincipalUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outStandPrincipalUp, other.outStandPrincipalUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutStandInterestUp()).compareTo(other.isSetOutStandInterestUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutStandInterestUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outStandInterestUp, other.outStandInterestUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNO()).compareTo(other.isSetContractNO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNO, other.contractNO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReminderNotice(");
    boolean first = true;

    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accName:");
    if (this.accName == null) {
      sb.append("null");
    } else {
      sb.append(this.accName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysdateDttm:");
    if (this.sysdateDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.sysdateDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldTotal:");
    sb.append(this.shouldTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outStandPrincipal:");
    sb.append(this.outStandPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outStandInterest:");
    sb.append(this.outStandInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outStandPrincipalUp:");
    if (this.outStandPrincipalUp == null) {
      sb.append("null");
    } else {
      sb.append(this.outStandPrincipalUp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outStandInterestUp:");
    if (this.outStandInterestUp == null) {
      sb.append("null");
    } else {
      sb.append(this.outStandInterestUp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    sb.append(this.bankCardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNO:");
    if (this.contractNO == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNO);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReminderNoticeStandardSchemeFactory implements SchemeFactory {
    public ReminderNoticeStandardScheme getScheme() {
      return new ReminderNoticeStandardScheme();
    }
  }

  private static class ReminderNoticeStandardScheme extends StandardScheme<ReminderNotice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReminderNotice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accName = iprot.readString();
              struct.setAccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYSDATE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sysdateDttm = iprot.readString();
              struct.setSysdateDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.number = iprot.readString();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOULD_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shouldTotal = iprot.readI32();
              struct.setShouldTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUT_STAND_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outStandPrincipal = iprot.readDouble();
              struct.setOutStandPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUT_STAND_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outStandInterest = iprot.readDouble();
              struct.setOutStandInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OUT_STAND_PRINCIPAL_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outStandPrincipalUp = iprot.readString();
              struct.setOutStandPrincipalUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUT_STAND_INTEREST_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outStandInterestUp = iprot.readString();
              struct.setOutStandInterestUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankCardType = iprot.readI32();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNO = iprot.readString();
              struct.setContractNOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReminderNotice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.accName != null) {
        oprot.writeFieldBegin(ACC_NAME_FIELD_DESC);
        oprot.writeString(struct.accName);
        oprot.writeFieldEnd();
      }
      if (struct.sysdateDttm != null) {
        oprot.writeFieldBegin(SYSDATE_DTTM_FIELD_DESC);
        oprot.writeString(struct.sysdateDttm);
        oprot.writeFieldEnd();
      }
      if (struct.number != null) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeString(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.shouldTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUT_STAND_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.outStandPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUT_STAND_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.outStandInterest);
      oprot.writeFieldEnd();
      if (struct.outStandPrincipalUp != null) {
        oprot.writeFieldBegin(OUT_STAND_PRINCIPAL_UP_FIELD_DESC);
        oprot.writeString(struct.outStandPrincipalUp);
        oprot.writeFieldEnd();
      }
      if (struct.outStandInterestUp != null) {
        oprot.writeFieldBegin(OUT_STAND_INTEREST_UP_FIELD_DESC);
        oprot.writeString(struct.outStandInterestUp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bankCardType);
      oprot.writeFieldEnd();
      if (struct.contractNO != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNO);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReminderNoticeTupleSchemeFactory implements SchemeFactory {
    public ReminderNoticeTupleScheme getScheme() {
      return new ReminderNoticeTupleScheme();
    }
  }

  private static class ReminderNoticeTupleScheme extends TupleScheme<ReminderNotice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReminderNotice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAcctName()) {
        optionals.set(0);
      }
      if (struct.isSetAccName()) {
        optionals.set(1);
      }
      if (struct.isSetSysdateDttm()) {
        optionals.set(2);
      }
      if (struct.isSetNumber()) {
        optionals.set(3);
      }
      if (struct.isSetCurrency()) {
        optionals.set(4);
      }
      if (struct.isSetShouldTotal()) {
        optionals.set(5);
      }
      if (struct.isSetOutStandPrincipal()) {
        optionals.set(6);
      }
      if (struct.isSetOutStandInterest()) {
        optionals.set(7);
      }
      if (struct.isSetOutStandPrincipalUp()) {
        optionals.set(8);
      }
      if (struct.isSetOutStandInterestUp()) {
        optionals.set(9);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(10);
      }
      if (struct.isSetContractNO()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetAccName()) {
        oprot.writeString(struct.accName);
      }
      if (struct.isSetSysdateDttm()) {
        oprot.writeString(struct.sysdateDttm);
      }
      if (struct.isSetNumber()) {
        oprot.writeString(struct.number);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetShouldTotal()) {
        oprot.writeI32(struct.shouldTotal);
      }
      if (struct.isSetOutStandPrincipal()) {
        oprot.writeDouble(struct.outStandPrincipal);
      }
      if (struct.isSetOutStandInterest()) {
        oprot.writeDouble(struct.outStandInterest);
      }
      if (struct.isSetOutStandPrincipalUp()) {
        oprot.writeString(struct.outStandPrincipalUp);
      }
      if (struct.isSetOutStandInterestUp()) {
        oprot.writeString(struct.outStandInterestUp);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeI32(struct.bankCardType);
      }
      if (struct.isSetContractNO()) {
        oprot.writeString(struct.contractNO);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReminderNotice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.accName = iprot.readString();
        struct.setAccNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sysdateDttm = iprot.readString();
        struct.setSysdateDttmIsSet(true);
      }
      if (incoming.get(3)) {
        struct.number = iprot.readString();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shouldTotal = iprot.readI32();
        struct.setShouldTotalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outStandPrincipal = iprot.readDouble();
        struct.setOutStandPrincipalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outStandInterest = iprot.readDouble();
        struct.setOutStandInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.outStandPrincipalUp = iprot.readString();
        struct.setOutStandPrincipalUpIsSet(true);
      }
      if (incoming.get(9)) {
        struct.outStandInterestUp = iprot.readString();
        struct.setOutStandInterestUpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bankCardType = iprot.readI32();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.contractNO = iprot.readString();
        struct.setContractNOIsSet(true);
      }
    }
  }

}


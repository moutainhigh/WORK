/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class LoanBankAccountBean implements org.apache.thrift.TBase<LoanBankAccountBean, LoanBankAccountBean._Fields>, java.io.Serializable, Cloneable, Comparable<LoanBankAccountBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanBankAccountBean");

  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecord", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecord", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_OTHERFEE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherfee", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanBankAccountBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanBankAccountBeanTupleSchemeFactory());
  }

  public int loanInterestRecord; // required
  public int loanMgrRecord; // required
  public int loanOtherfee; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_INTEREST_RECORD((short)1, "loanInterestRecord"),
    LOAN_MGR_RECORD((short)2, "loanMgrRecord"),
    LOAN_OTHERFEE((short)3, "loanOtherfee");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_INTEREST_RECORD
          return LOAN_INTEREST_RECORD;
        case 2: // LOAN_MGR_RECORD
          return LOAN_MGR_RECORD;
        case 3: // LOAN_OTHERFEE
          return LOAN_OTHERFEE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANINTERESTRECORD_ISSET_ID = 0;
  private static final int __LOANMGRRECORD_ISSET_ID = 1;
  private static final int __LOANOTHERFEE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_INTEREST_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MGR_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_OTHERFEE, new org.apache.thrift.meta_data.FieldMetaData("loanOtherfee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanBankAccountBean.class, metaDataMap);
  }

  public LoanBankAccountBean() {
  }

  public LoanBankAccountBean(
    int loanInterestRecord,
    int loanMgrRecord,
    int loanOtherfee)
  {
    this();
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    this.loanOtherfee = loanOtherfee;
    setLoanOtherfeeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanBankAccountBean(LoanBankAccountBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanInterestRecord = other.loanInterestRecord;
    this.loanMgrRecord = other.loanMgrRecord;
    this.loanOtherfee = other.loanOtherfee;
  }

  public LoanBankAccountBean deepCopy() {
    return new LoanBankAccountBean(this);
  }

  @Override
  public void clear() {
    setLoanInterestRecordIsSet(false);
    this.loanInterestRecord = 0;
    setLoanMgrRecordIsSet(false);
    this.loanMgrRecord = 0;
    setLoanOtherfeeIsSet(false);
    this.loanOtherfee = 0;
  }

  public int getLoanInterestRecord() {
    return this.loanInterestRecord;
  }

  public LoanBankAccountBean setLoanInterestRecord(int loanInterestRecord) {
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    return this;
  }

  public void unsetLoanInterestRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
  }

  /** Returns true if field loanInterestRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
  }

  public void setLoanInterestRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID, value);
  }

  public int getLoanMgrRecord() {
    return this.loanMgrRecord;
  }

  public LoanBankAccountBean setLoanMgrRecord(int loanMgrRecord) {
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    return this;
  }

  public void unsetLoanMgrRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
  }

  /** Returns true if field loanMgrRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
  }

  public void setLoanMgrRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID, value);
  }

  public int getLoanOtherfee() {
    return this.loanOtherfee;
  }

  public LoanBankAccountBean setLoanOtherfee(int loanOtherfee) {
    this.loanOtherfee = loanOtherfee;
    setLoanOtherfeeIsSet(true);
    return this;
  }

  public void unsetLoanOtherfee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field loanOtherfee is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherfee() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
  }

  public void setLoanOtherfeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_INTEREST_RECORD:
      if (value == null) {
        unsetLoanInterestRecord();
      } else {
        setLoanInterestRecord((Integer)value);
      }
      break;

    case LOAN_MGR_RECORD:
      if (value == null) {
        unsetLoanMgrRecord();
      } else {
        setLoanMgrRecord((Integer)value);
      }
      break;

    case LOAN_OTHERFEE:
      if (value == null) {
        unsetLoanOtherfee();
      } else {
        setLoanOtherfee((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_INTEREST_RECORD:
      return Integer.valueOf(getLoanInterestRecord());

    case LOAN_MGR_RECORD:
      return Integer.valueOf(getLoanMgrRecord());

    case LOAN_OTHERFEE:
      return Integer.valueOf(getLoanOtherfee());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_INTEREST_RECORD:
      return isSetLoanInterestRecord();
    case LOAN_MGR_RECORD:
      return isSetLoanMgrRecord();
    case LOAN_OTHERFEE:
      return isSetLoanOtherfee();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanBankAccountBean)
      return this.equals((LoanBankAccountBean)that);
    return false;
  }

  public boolean equals(LoanBankAccountBean that) {
    if (that == null)
      return false;

    boolean this_present_loanInterestRecord = true;
    boolean that_present_loanInterestRecord = true;
    if (this_present_loanInterestRecord || that_present_loanInterestRecord) {
      if (!(this_present_loanInterestRecord && that_present_loanInterestRecord))
        return false;
      if (this.loanInterestRecord != that.loanInterestRecord)
        return false;
    }

    boolean this_present_loanMgrRecord = true;
    boolean that_present_loanMgrRecord = true;
    if (this_present_loanMgrRecord || that_present_loanMgrRecord) {
      if (!(this_present_loanMgrRecord && that_present_loanMgrRecord))
        return false;
      if (this.loanMgrRecord != that.loanMgrRecord)
        return false;
    }

    boolean this_present_loanOtherfee = true;
    boolean that_present_loanOtherfee = true;
    if (this_present_loanOtherfee || that_present_loanOtherfee) {
      if (!(this_present_loanOtherfee && that_present_loanOtherfee))
        return false;
      if (this.loanOtherfee != that.loanOtherfee)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanInterestRecord = true;
    list.add(present_loanInterestRecord);
    if (present_loanInterestRecord)
      list.add(loanInterestRecord);

    boolean present_loanMgrRecord = true;
    list.add(present_loanMgrRecord);
    if (present_loanMgrRecord)
      list.add(loanMgrRecord);

    boolean present_loanOtherfee = true;
    list.add(present_loanOtherfee);
    if (present_loanOtherfee)
      list.add(loanOtherfee);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanBankAccountBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanInterestRecord()).compareTo(other.isSetLoanInterestRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecord, other.loanInterestRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrRecord()).compareTo(other.isSetLoanMgrRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecord, other.loanMgrRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherfee()).compareTo(other.isSetLoanOtherfee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherfee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherfee, other.loanOtherfee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanBankAccountBean(");
    boolean first = true;

    sb.append("loanInterestRecord:");
    sb.append(this.loanInterestRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrRecord:");
    sb.append(this.loanMgrRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherfee:");
    sb.append(this.loanOtherfee);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanBankAccountBeanStandardSchemeFactory implements SchemeFactory {
    public LoanBankAccountBeanStandardScheme getScheme() {
      return new LoanBankAccountBeanStandardScheme();
    }
  }

  private static class LoanBankAccountBeanStandardScheme extends StandardScheme<LoanBankAccountBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanBankAccountBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_INTEREST_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanInterestRecord = iprot.readI32();
              struct.setLoanInterestRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_MGR_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanMgrRecord = iprot.readI32();
              struct.setLoanMgrRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_OTHERFEE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanOtherfee = iprot.readI32();
              struct.setLoanOtherfeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanBankAccountBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_INTEREST_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanInterestRecord);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MGR_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanMgrRecord);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_OTHERFEE_FIELD_DESC);
      oprot.writeI32(struct.loanOtherfee);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanBankAccountBeanTupleSchemeFactory implements SchemeFactory {
    public LoanBankAccountBeanTupleScheme getScheme() {
      return new LoanBankAccountBeanTupleScheme();
    }
  }

  private static class LoanBankAccountBeanTupleScheme extends TupleScheme<LoanBankAccountBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanBankAccountBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanInterestRecord()) {
        optionals.set(0);
      }
      if (struct.isSetLoanMgrRecord()) {
        optionals.set(1);
      }
      if (struct.isSetLoanOtherfee()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLoanInterestRecord()) {
        oprot.writeI32(struct.loanInterestRecord);
      }
      if (struct.isSetLoanMgrRecord()) {
        oprot.writeI32(struct.loanMgrRecord);
      }
      if (struct.isSetLoanOtherfee()) {
        oprot.writeI32(struct.loanOtherfee);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanBankAccountBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.loanInterestRecord = iprot.readI32();
        struct.setLoanInterestRecordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanMgrRecord = iprot.readI32();
        struct.setLoanMgrRecordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanOtherfee = iprot.readI32();
        struct.setLoanOtherfeeIsSet(true);
      }
    }
  }

}


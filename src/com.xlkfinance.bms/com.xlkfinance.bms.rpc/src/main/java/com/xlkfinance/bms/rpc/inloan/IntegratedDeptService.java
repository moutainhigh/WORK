/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class IntegratedDeptService {

  public interface Iface {

    public List<CollectFileDTO> queryCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException;

    public int getCollectFileTotal(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException;

    public boolean addCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException;

    public CollectFileDTO getCollectFileById(int pid) throws org.apache.thrift.TException;

    public boolean updateCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException;

    public boolean updateRemarkByProjectId(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException;

    public boolean collectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException;

    public boolean refundFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException;

    public CollectFilePrintInfo getCollectFilePrintInfo(CollectFilePrintInfo collectFilePrintInfo) throws org.apache.thrift.TException;

    public List<CheckDocumentDTO> queryCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException;

    public int getCheckDocumentTotal(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException;

    public boolean addCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException;

    public CheckDocumentDTO getCheckDocumentById(int pid) throws org.apache.thrift.TException;

    public CheckDocumentDTO getCheckDocumentByProjectId(int projectId) throws org.apache.thrift.TException;

    public boolean updateCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException;

    public boolean reCheckCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException;

    public List<CheckLitigationDTO> queryCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException;

    public int getCheckLitigationTotal(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException;

    public boolean addCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException;

    public CheckLitigationDTO getCheckLitigationById(int pid) throws org.apache.thrift.TException;

    public CheckLitigationDTO getCheckLitigationByProjectId(int projectId) throws org.apache.thrift.TException;

    public boolean updateCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException;

    public List<CheckDocumentIndexDTO> queryCheckDocumentIndex(CheckDocumentIndexDTO checkDocumentIndexDTO) throws org.apache.thrift.TException;

    public int getCheckDocumentIndexTotal(CheckDocumentIndexDTO checkDocumentIndexDTO) throws org.apache.thrift.TException;

    public List<CollectFileDTO> queryCollectFileByPids(String pids) throws org.apache.thrift.TException;

    public PerformJobRemark getPerformJobRemark(int projectId) throws org.apache.thrift.TException;

    public int addPerformJobRemark(PerformJobRemark performJobRemark) throws org.apache.thrift.TException;

    public boolean updatePerformJobRemark(PerformJobRemark performJobRemark) throws org.apache.thrift.TException;

    public void initIntegratedDept(int projectId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryCollectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectFileTotal(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addCollectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectFileById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCollectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRemarkByProjectId(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void collectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void refundFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectFilePrintInfo(CollectFilePrintInfo collectFilePrintInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCheckDocumentTotal(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCheckDocumentById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCheckDocumentByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reCheckCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCheckLitigation(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCheckLitigationTotal(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addCheckLitigation(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCheckLitigationById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCheckLitigationByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCheckLitigation(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCheckDocumentIndex(CheckDocumentIndexDTO checkDocumentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCheckDocumentIndexTotal(CheckDocumentIndexDTO checkDocumentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollectFileByPids(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPerformJobRemark(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addPerformJobRemark(PerformJobRemark performJobRemark, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePerformJobRemark(PerformJobRemark performJobRemark, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initIntegratedDept(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<CollectFileDTO> queryCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      send_queryCollectFile(collectfileDTO);
      return recv_queryCollectFile();
    }

    public void send_queryCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      queryCollectFile_args args = new queryCollectFile_args();
      args.setCollectfileDTO(collectfileDTO);
      sendBase("queryCollectFile", args);
    }

    public List<CollectFileDTO> recv_queryCollectFile() throws org.apache.thrift.TException
    {
      queryCollectFile_result result = new queryCollectFile_result();
      receiveBase(result, "queryCollectFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollectFile failed: unknown result");
    }

    public int getCollectFileTotal(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      send_getCollectFileTotal(collectfileDTO);
      return recv_getCollectFileTotal();
    }

    public void send_getCollectFileTotal(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      getCollectFileTotal_args args = new getCollectFileTotal_args();
      args.setCollectfileDTO(collectfileDTO);
      sendBase("getCollectFileTotal", args);
    }

    public int recv_getCollectFileTotal() throws org.apache.thrift.TException
    {
      getCollectFileTotal_result result = new getCollectFileTotal_result();
      receiveBase(result, "getCollectFileTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectFileTotal failed: unknown result");
    }

    public boolean addCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      send_addCollectFile(collectfileDTO);
      return recv_addCollectFile();
    }

    public void send_addCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      addCollectFile_args args = new addCollectFile_args();
      args.setCollectfileDTO(collectfileDTO);
      sendBase("addCollectFile", args);
    }

    public boolean recv_addCollectFile() throws org.apache.thrift.TException
    {
      addCollectFile_result result = new addCollectFile_result();
      receiveBase(result, "addCollectFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCollectFile failed: unknown result");
    }

    public CollectFileDTO getCollectFileById(int pid) throws org.apache.thrift.TException
    {
      send_getCollectFileById(pid);
      return recv_getCollectFileById();
    }

    public void send_getCollectFileById(int pid) throws org.apache.thrift.TException
    {
      getCollectFileById_args args = new getCollectFileById_args();
      args.setPid(pid);
      sendBase("getCollectFileById", args);
    }

    public CollectFileDTO recv_getCollectFileById() throws org.apache.thrift.TException
    {
      getCollectFileById_result result = new getCollectFileById_result();
      receiveBase(result, "getCollectFileById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectFileById failed: unknown result");
    }

    public boolean updateCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      send_updateCollectFile(collectfileDTO);
      return recv_updateCollectFile();
    }

    public void send_updateCollectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      updateCollectFile_args args = new updateCollectFile_args();
      args.setCollectfileDTO(collectfileDTO);
      sendBase("updateCollectFile", args);
    }

    public boolean recv_updateCollectFile() throws org.apache.thrift.TException
    {
      updateCollectFile_result result = new updateCollectFile_result();
      receiveBase(result, "updateCollectFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCollectFile failed: unknown result");
    }

    public boolean updateRemarkByProjectId(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      send_updateRemarkByProjectId(collectfileDTO);
      return recv_updateRemarkByProjectId();
    }

    public void send_updateRemarkByProjectId(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      updateRemarkByProjectId_args args = new updateRemarkByProjectId_args();
      args.setCollectfileDTO(collectfileDTO);
      sendBase("updateRemarkByProjectId", args);
    }

    public boolean recv_updateRemarkByProjectId() throws org.apache.thrift.TException
    {
      updateRemarkByProjectId_result result = new updateRemarkByProjectId_result();
      receiveBase(result, "updateRemarkByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRemarkByProjectId failed: unknown result");
    }

    public boolean collectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      send_collectFile(collectfileDTO);
      return recv_collectFile();
    }

    public void send_collectFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      collectFile_args args = new collectFile_args();
      args.setCollectfileDTO(collectfileDTO);
      sendBase("collectFile", args);
    }

    public boolean recv_collectFile() throws org.apache.thrift.TException
    {
      collectFile_result result = new collectFile_result();
      receiveBase(result, "collectFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "collectFile failed: unknown result");
    }

    public boolean refundFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      send_refundFile(collectfileDTO);
      return recv_refundFile();
    }

    public void send_refundFile(CollectFileDTO collectfileDTO) throws org.apache.thrift.TException
    {
      refundFile_args args = new refundFile_args();
      args.setCollectfileDTO(collectfileDTO);
      sendBase("refundFile", args);
    }

    public boolean recv_refundFile() throws org.apache.thrift.TException
    {
      refundFile_result result = new refundFile_result();
      receiveBase(result, "refundFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refundFile failed: unknown result");
    }

    public CollectFilePrintInfo getCollectFilePrintInfo(CollectFilePrintInfo collectFilePrintInfo) throws org.apache.thrift.TException
    {
      send_getCollectFilePrintInfo(collectFilePrintInfo);
      return recv_getCollectFilePrintInfo();
    }

    public void send_getCollectFilePrintInfo(CollectFilePrintInfo collectFilePrintInfo) throws org.apache.thrift.TException
    {
      getCollectFilePrintInfo_args args = new getCollectFilePrintInfo_args();
      args.setCollectFilePrintInfo(collectFilePrintInfo);
      sendBase("getCollectFilePrintInfo", args);
    }

    public CollectFilePrintInfo recv_getCollectFilePrintInfo() throws org.apache.thrift.TException
    {
      getCollectFilePrintInfo_result result = new getCollectFilePrintInfo_result();
      receiveBase(result, "getCollectFilePrintInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectFilePrintInfo failed: unknown result");
    }

    public List<CheckDocumentDTO> queryCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      send_queryCheckDocument(checkDocumentDTO);
      return recv_queryCheckDocument();
    }

    public void send_queryCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      queryCheckDocument_args args = new queryCheckDocument_args();
      args.setCheckDocumentDTO(checkDocumentDTO);
      sendBase("queryCheckDocument", args);
    }

    public List<CheckDocumentDTO> recv_queryCheckDocument() throws org.apache.thrift.TException
    {
      queryCheckDocument_result result = new queryCheckDocument_result();
      receiveBase(result, "queryCheckDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCheckDocument failed: unknown result");
    }

    public int getCheckDocumentTotal(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      send_getCheckDocumentTotal(checkDocumentDTO);
      return recv_getCheckDocumentTotal();
    }

    public void send_getCheckDocumentTotal(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      getCheckDocumentTotal_args args = new getCheckDocumentTotal_args();
      args.setCheckDocumentDTO(checkDocumentDTO);
      sendBase("getCheckDocumentTotal", args);
    }

    public int recv_getCheckDocumentTotal() throws org.apache.thrift.TException
    {
      getCheckDocumentTotal_result result = new getCheckDocumentTotal_result();
      receiveBase(result, "getCheckDocumentTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCheckDocumentTotal failed: unknown result");
    }

    public boolean addCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      send_addCheckDocument(checkDocumentDTO);
      return recv_addCheckDocument();
    }

    public void send_addCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      addCheckDocument_args args = new addCheckDocument_args();
      args.setCheckDocumentDTO(checkDocumentDTO);
      sendBase("addCheckDocument", args);
    }

    public boolean recv_addCheckDocument() throws org.apache.thrift.TException
    {
      addCheckDocument_result result = new addCheckDocument_result();
      receiveBase(result, "addCheckDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCheckDocument failed: unknown result");
    }

    public CheckDocumentDTO getCheckDocumentById(int pid) throws org.apache.thrift.TException
    {
      send_getCheckDocumentById(pid);
      return recv_getCheckDocumentById();
    }

    public void send_getCheckDocumentById(int pid) throws org.apache.thrift.TException
    {
      getCheckDocumentById_args args = new getCheckDocumentById_args();
      args.setPid(pid);
      sendBase("getCheckDocumentById", args);
    }

    public CheckDocumentDTO recv_getCheckDocumentById() throws org.apache.thrift.TException
    {
      getCheckDocumentById_result result = new getCheckDocumentById_result();
      receiveBase(result, "getCheckDocumentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCheckDocumentById failed: unknown result");
    }

    public CheckDocumentDTO getCheckDocumentByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getCheckDocumentByProjectId(projectId);
      return recv_getCheckDocumentByProjectId();
    }

    public void send_getCheckDocumentByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getCheckDocumentByProjectId_args args = new getCheckDocumentByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getCheckDocumentByProjectId", args);
    }

    public CheckDocumentDTO recv_getCheckDocumentByProjectId() throws org.apache.thrift.TException
    {
      getCheckDocumentByProjectId_result result = new getCheckDocumentByProjectId_result();
      receiveBase(result, "getCheckDocumentByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCheckDocumentByProjectId failed: unknown result");
    }

    public boolean updateCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      send_updateCheckDocument(checkDocumentDTO);
      return recv_updateCheckDocument();
    }

    public void send_updateCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      updateCheckDocument_args args = new updateCheckDocument_args();
      args.setCheckDocumentDTO(checkDocumentDTO);
      sendBase("updateCheckDocument", args);
    }

    public boolean recv_updateCheckDocument() throws org.apache.thrift.TException
    {
      updateCheckDocument_result result = new updateCheckDocument_result();
      receiveBase(result, "updateCheckDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCheckDocument failed: unknown result");
    }

    public boolean reCheckCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      send_reCheckCheckDocument(checkDocumentDTO);
      return recv_reCheckCheckDocument();
    }

    public void send_reCheckCheckDocument(CheckDocumentDTO checkDocumentDTO) throws org.apache.thrift.TException
    {
      reCheckCheckDocument_args args = new reCheckCheckDocument_args();
      args.setCheckDocumentDTO(checkDocumentDTO);
      sendBase("reCheckCheckDocument", args);
    }

    public boolean recv_reCheckCheckDocument() throws org.apache.thrift.TException
    {
      reCheckCheckDocument_result result = new reCheckCheckDocument_result();
      receiveBase(result, "reCheckCheckDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reCheckCheckDocument failed: unknown result");
    }

    public List<CheckLitigationDTO> queryCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      send_queryCheckLitigation(checkLitigationDTO);
      return recv_queryCheckLitigation();
    }

    public void send_queryCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      queryCheckLitigation_args args = new queryCheckLitigation_args();
      args.setCheckLitigationDTO(checkLitigationDTO);
      sendBase("queryCheckLitigation", args);
    }

    public List<CheckLitigationDTO> recv_queryCheckLitigation() throws org.apache.thrift.TException
    {
      queryCheckLitigation_result result = new queryCheckLitigation_result();
      receiveBase(result, "queryCheckLitigation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCheckLitigation failed: unknown result");
    }

    public int getCheckLitigationTotal(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      send_getCheckLitigationTotal(checkLitigationDTO);
      return recv_getCheckLitigationTotal();
    }

    public void send_getCheckLitigationTotal(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      getCheckLitigationTotal_args args = new getCheckLitigationTotal_args();
      args.setCheckLitigationDTO(checkLitigationDTO);
      sendBase("getCheckLitigationTotal", args);
    }

    public int recv_getCheckLitigationTotal() throws org.apache.thrift.TException
    {
      getCheckLitigationTotal_result result = new getCheckLitigationTotal_result();
      receiveBase(result, "getCheckLitigationTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCheckLitigationTotal failed: unknown result");
    }

    public boolean addCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      send_addCheckLitigation(checkLitigationDTO);
      return recv_addCheckLitigation();
    }

    public void send_addCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      addCheckLitigation_args args = new addCheckLitigation_args();
      args.setCheckLitigationDTO(checkLitigationDTO);
      sendBase("addCheckLitigation", args);
    }

    public boolean recv_addCheckLitigation() throws org.apache.thrift.TException
    {
      addCheckLitigation_result result = new addCheckLitigation_result();
      receiveBase(result, "addCheckLitigation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCheckLitigation failed: unknown result");
    }

    public CheckLitigationDTO getCheckLitigationById(int pid) throws org.apache.thrift.TException
    {
      send_getCheckLitigationById(pid);
      return recv_getCheckLitigationById();
    }

    public void send_getCheckLitigationById(int pid) throws org.apache.thrift.TException
    {
      getCheckLitigationById_args args = new getCheckLitigationById_args();
      args.setPid(pid);
      sendBase("getCheckLitigationById", args);
    }

    public CheckLitigationDTO recv_getCheckLitigationById() throws org.apache.thrift.TException
    {
      getCheckLitigationById_result result = new getCheckLitigationById_result();
      receiveBase(result, "getCheckLitigationById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCheckLitigationById failed: unknown result");
    }

    public CheckLitigationDTO getCheckLitigationByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getCheckLitigationByProjectId(projectId);
      return recv_getCheckLitigationByProjectId();
    }

    public void send_getCheckLitigationByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getCheckLitigationByProjectId_args args = new getCheckLitigationByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getCheckLitigationByProjectId", args);
    }

    public CheckLitigationDTO recv_getCheckLitigationByProjectId() throws org.apache.thrift.TException
    {
      getCheckLitigationByProjectId_result result = new getCheckLitigationByProjectId_result();
      receiveBase(result, "getCheckLitigationByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCheckLitigationByProjectId failed: unknown result");
    }

    public boolean updateCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      send_updateCheckLitigation(checkLitigationDTO);
      return recv_updateCheckLitigation();
    }

    public void send_updateCheckLitigation(CheckLitigationDTO checkLitigationDTO) throws org.apache.thrift.TException
    {
      updateCheckLitigation_args args = new updateCheckLitigation_args();
      args.setCheckLitigationDTO(checkLitigationDTO);
      sendBase("updateCheckLitigation", args);
    }

    public boolean recv_updateCheckLitigation() throws org.apache.thrift.TException
    {
      updateCheckLitigation_result result = new updateCheckLitigation_result();
      receiveBase(result, "updateCheckLitigation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCheckLitigation failed: unknown result");
    }

    public List<CheckDocumentIndexDTO> queryCheckDocumentIndex(CheckDocumentIndexDTO checkDocumentIndexDTO) throws org.apache.thrift.TException
    {
      send_queryCheckDocumentIndex(checkDocumentIndexDTO);
      return recv_queryCheckDocumentIndex();
    }

    public void send_queryCheckDocumentIndex(CheckDocumentIndexDTO checkDocumentIndexDTO) throws org.apache.thrift.TException
    {
      queryCheckDocumentIndex_args args = new queryCheckDocumentIndex_args();
      args.setCheckDocumentIndexDTO(checkDocumentIndexDTO);
      sendBase("queryCheckDocumentIndex", args);
    }

    public List<CheckDocumentIndexDTO> recv_queryCheckDocumentIndex() throws org.apache.thrift.TException
    {
      queryCheckDocumentIndex_result result = new queryCheckDocumentIndex_result();
      receiveBase(result, "queryCheckDocumentIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCheckDocumentIndex failed: unknown result");
    }

    public int getCheckDocumentIndexTotal(CheckDocumentIndexDTO checkDocumentIndexDTO) throws org.apache.thrift.TException
    {
      send_getCheckDocumentIndexTotal(checkDocumentIndexDTO);
      return recv_getCheckDocumentIndexTotal();
    }

    public void send_getCheckDocumentIndexTotal(CheckDocumentIndexDTO checkDocumentIndexDTO) throws org.apache.thrift.TException
    {
      getCheckDocumentIndexTotal_args args = new getCheckDocumentIndexTotal_args();
      args.setCheckDocumentIndexDTO(checkDocumentIndexDTO);
      sendBase("getCheckDocumentIndexTotal", args);
    }

    public int recv_getCheckDocumentIndexTotal() throws org.apache.thrift.TException
    {
      getCheckDocumentIndexTotal_result result = new getCheckDocumentIndexTotal_result();
      receiveBase(result, "getCheckDocumentIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCheckDocumentIndexTotal failed: unknown result");
    }

    public List<CollectFileDTO> queryCollectFileByPids(String pids) throws org.apache.thrift.TException
    {
      send_queryCollectFileByPids(pids);
      return recv_queryCollectFileByPids();
    }

    public void send_queryCollectFileByPids(String pids) throws org.apache.thrift.TException
    {
      queryCollectFileByPids_args args = new queryCollectFileByPids_args();
      args.setPids(pids);
      sendBase("queryCollectFileByPids", args);
    }

    public List<CollectFileDTO> recv_queryCollectFileByPids() throws org.apache.thrift.TException
    {
      queryCollectFileByPids_result result = new queryCollectFileByPids_result();
      receiveBase(result, "queryCollectFileByPids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollectFileByPids failed: unknown result");
    }

    public PerformJobRemark getPerformJobRemark(int projectId) throws org.apache.thrift.TException
    {
      send_getPerformJobRemark(projectId);
      return recv_getPerformJobRemark();
    }

    public void send_getPerformJobRemark(int projectId) throws org.apache.thrift.TException
    {
      getPerformJobRemark_args args = new getPerformJobRemark_args();
      args.setProjectId(projectId);
      sendBase("getPerformJobRemark", args);
    }

    public PerformJobRemark recv_getPerformJobRemark() throws org.apache.thrift.TException
    {
      getPerformJobRemark_result result = new getPerformJobRemark_result();
      receiveBase(result, "getPerformJobRemark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPerformJobRemark failed: unknown result");
    }

    public int addPerformJobRemark(PerformJobRemark performJobRemark) throws org.apache.thrift.TException
    {
      send_addPerformJobRemark(performJobRemark);
      return recv_addPerformJobRemark();
    }

    public void send_addPerformJobRemark(PerformJobRemark performJobRemark) throws org.apache.thrift.TException
    {
      addPerformJobRemark_args args = new addPerformJobRemark_args();
      args.setPerformJobRemark(performJobRemark);
      sendBase("addPerformJobRemark", args);
    }

    public int recv_addPerformJobRemark() throws org.apache.thrift.TException
    {
      addPerformJobRemark_result result = new addPerformJobRemark_result();
      receiveBase(result, "addPerformJobRemark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPerformJobRemark failed: unknown result");
    }

    public boolean updatePerformJobRemark(PerformJobRemark performJobRemark) throws org.apache.thrift.TException
    {
      send_updatePerformJobRemark(performJobRemark);
      return recv_updatePerformJobRemark();
    }

    public void send_updatePerformJobRemark(PerformJobRemark performJobRemark) throws org.apache.thrift.TException
    {
      updatePerformJobRemark_args args = new updatePerformJobRemark_args();
      args.setPerformJobRemark(performJobRemark);
      sendBase("updatePerformJobRemark", args);
    }

    public boolean recv_updatePerformJobRemark() throws org.apache.thrift.TException
    {
      updatePerformJobRemark_result result = new updatePerformJobRemark_result();
      receiveBase(result, "updatePerformJobRemark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePerformJobRemark failed: unknown result");
    }

    public void initIntegratedDept(int projectId) throws org.apache.thrift.TException
    {
      send_initIntegratedDept(projectId);
      recv_initIntegratedDept();
    }

    public void send_initIntegratedDept(int projectId) throws org.apache.thrift.TException
    {
      initIntegratedDept_args args = new initIntegratedDept_args();
      args.setProjectId(projectId);
      sendBase("initIntegratedDept", args);
    }

    public void recv_initIntegratedDept() throws org.apache.thrift.TException
    {
      initIntegratedDept_result result = new initIntegratedDept_result();
      receiveBase(result, "initIntegratedDept");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryCollectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollectFile_call method_call = new queryCollectFile_call(collectfileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollectFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFileDTO collectfileDTO;
      public queryCollectFile_call(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectfileDTO = collectfileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollectFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollectFile_args args = new queryCollectFile_args();
        args.setCollectfileDTO(collectfileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectFileDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollectFile();
      }
    }

    public void getCollectFileTotal(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectFileTotal_call method_call = new getCollectFileTotal_call(collectfileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectFileTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFileDTO collectfileDTO;
      public getCollectFileTotal_call(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectfileDTO = collectfileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectFileTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectFileTotal_args args = new getCollectFileTotal_args();
        args.setCollectfileDTO(collectfileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectFileTotal();
      }
    }

    public void addCollectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCollectFile_call method_call = new addCollectFile_call(collectfileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCollectFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFileDTO collectfileDTO;
      public addCollectFile_call(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectfileDTO = collectfileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCollectFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCollectFile_args args = new addCollectFile_args();
        args.setCollectfileDTO(collectfileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCollectFile();
      }
    }

    public void getCollectFileById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectFileById_call method_call = new getCollectFileById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectFileById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getCollectFileById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectFileById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectFileById_args args = new getCollectFileById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CollectFileDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectFileById();
      }
    }

    public void updateCollectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCollectFile_call method_call = new updateCollectFile_call(collectfileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCollectFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFileDTO collectfileDTO;
      public updateCollectFile_call(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectfileDTO = collectfileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCollectFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCollectFile_args args = new updateCollectFile_args();
        args.setCollectfileDTO(collectfileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCollectFile();
      }
    }

    public void updateRemarkByProjectId(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRemarkByProjectId_call method_call = new updateRemarkByProjectId_call(collectfileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRemarkByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFileDTO collectfileDTO;
      public updateRemarkByProjectId_call(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectfileDTO = collectfileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRemarkByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRemarkByProjectId_args args = new updateRemarkByProjectId_args();
        args.setCollectfileDTO(collectfileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRemarkByProjectId();
      }
    }

    public void collectFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      collectFile_call method_call = new collectFile_call(collectfileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class collectFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFileDTO collectfileDTO;
      public collectFile_call(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectfileDTO = collectfileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("collectFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        collectFile_args args = new collectFile_args();
        args.setCollectfileDTO(collectfileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_collectFile();
      }
    }

    public void refundFile(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refundFile_call method_call = new refundFile_call(collectfileDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refundFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFileDTO collectfileDTO;
      public refundFile_call(CollectFileDTO collectfileDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectfileDTO = collectfileDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refundFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refundFile_args args = new refundFile_args();
        args.setCollectfileDTO(collectfileDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refundFile();
      }
    }

    public void getCollectFilePrintInfo(CollectFilePrintInfo collectFilePrintInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectFilePrintInfo_call method_call = new getCollectFilePrintInfo_call(collectFilePrintInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectFilePrintInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFilePrintInfo collectFilePrintInfo;
      public getCollectFilePrintInfo_call(CollectFilePrintInfo collectFilePrintInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectFilePrintInfo = collectFilePrintInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectFilePrintInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectFilePrintInfo_args args = new getCollectFilePrintInfo_args();
        args.setCollectFilePrintInfo(collectFilePrintInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CollectFilePrintInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectFilePrintInfo();
      }
    }

    public void queryCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCheckDocument_call method_call = new queryCheckDocument_call(checkDocumentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCheckDocument_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckDocumentDTO checkDocumentDTO;
      public queryCheckDocument_call(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkDocumentDTO = checkDocumentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCheckDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCheckDocument_args args = new queryCheckDocument_args();
        args.setCheckDocumentDTO(checkDocumentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CheckDocumentDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCheckDocument();
      }
    }

    public void getCheckDocumentTotal(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCheckDocumentTotal_call method_call = new getCheckDocumentTotal_call(checkDocumentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCheckDocumentTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckDocumentDTO checkDocumentDTO;
      public getCheckDocumentTotal_call(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkDocumentDTO = checkDocumentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCheckDocumentTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCheckDocumentTotal_args args = new getCheckDocumentTotal_args();
        args.setCheckDocumentDTO(checkDocumentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCheckDocumentTotal();
      }
    }

    public void addCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCheckDocument_call method_call = new addCheckDocument_call(checkDocumentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCheckDocument_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckDocumentDTO checkDocumentDTO;
      public addCheckDocument_call(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkDocumentDTO = checkDocumentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCheckDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCheckDocument_args args = new addCheckDocument_args();
        args.setCheckDocumentDTO(checkDocumentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCheckDocument();
      }
    }

    public void getCheckDocumentById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCheckDocumentById_call method_call = new getCheckDocumentById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCheckDocumentById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getCheckDocumentById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCheckDocumentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCheckDocumentById_args args = new getCheckDocumentById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CheckDocumentDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCheckDocumentById();
      }
    }

    public void getCheckDocumentByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCheckDocumentByProjectId_call method_call = new getCheckDocumentByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCheckDocumentByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getCheckDocumentByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCheckDocumentByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCheckDocumentByProjectId_args args = new getCheckDocumentByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CheckDocumentDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCheckDocumentByProjectId();
      }
    }

    public void updateCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCheckDocument_call method_call = new updateCheckDocument_call(checkDocumentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCheckDocument_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckDocumentDTO checkDocumentDTO;
      public updateCheckDocument_call(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkDocumentDTO = checkDocumentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCheckDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCheckDocument_args args = new updateCheckDocument_args();
        args.setCheckDocumentDTO(checkDocumentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCheckDocument();
      }
    }

    public void reCheckCheckDocument(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reCheckCheckDocument_call method_call = new reCheckCheckDocument_call(checkDocumentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reCheckCheckDocument_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckDocumentDTO checkDocumentDTO;
      public reCheckCheckDocument_call(CheckDocumentDTO checkDocumentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkDocumentDTO = checkDocumentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reCheckCheckDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reCheckCheckDocument_args args = new reCheckCheckDocument_args();
        args.setCheckDocumentDTO(checkDocumentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reCheckCheckDocument();
      }
    }

    public void queryCheckLitigation(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCheckLitigation_call method_call = new queryCheckLitigation_call(checkLitigationDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCheckLitigation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckLitigationDTO checkLitigationDTO;
      public queryCheckLitigation_call(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkLitigationDTO = checkLitigationDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCheckLitigation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCheckLitigation_args args = new queryCheckLitigation_args();
        args.setCheckLitigationDTO(checkLitigationDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CheckLitigationDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCheckLitigation();
      }
    }

    public void getCheckLitigationTotal(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCheckLitigationTotal_call method_call = new getCheckLitigationTotal_call(checkLitigationDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCheckLitigationTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckLitigationDTO checkLitigationDTO;
      public getCheckLitigationTotal_call(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkLitigationDTO = checkLitigationDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCheckLitigationTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCheckLitigationTotal_args args = new getCheckLitigationTotal_args();
        args.setCheckLitigationDTO(checkLitigationDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCheckLitigationTotal();
      }
    }

    public void addCheckLitigation(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCheckLitigation_call method_call = new addCheckLitigation_call(checkLitigationDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCheckLitigation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckLitigationDTO checkLitigationDTO;
      public addCheckLitigation_call(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkLitigationDTO = checkLitigationDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCheckLitigation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCheckLitigation_args args = new addCheckLitigation_args();
        args.setCheckLitigationDTO(checkLitigationDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCheckLitigation();
      }
    }

    public void getCheckLitigationById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCheckLitigationById_call method_call = new getCheckLitigationById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCheckLitigationById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getCheckLitigationById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCheckLitigationById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCheckLitigationById_args args = new getCheckLitigationById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CheckLitigationDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCheckLitigationById();
      }
    }

    public void getCheckLitigationByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCheckLitigationByProjectId_call method_call = new getCheckLitigationByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCheckLitigationByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getCheckLitigationByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCheckLitigationByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCheckLitigationByProjectId_args args = new getCheckLitigationByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CheckLitigationDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCheckLitigationByProjectId();
      }
    }

    public void updateCheckLitigation(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCheckLitigation_call method_call = new updateCheckLitigation_call(checkLitigationDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCheckLitigation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckLitigationDTO checkLitigationDTO;
      public updateCheckLitigation_call(CheckLitigationDTO checkLitigationDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkLitigationDTO = checkLitigationDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCheckLitigation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCheckLitigation_args args = new updateCheckLitigation_args();
        args.setCheckLitigationDTO(checkLitigationDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCheckLitigation();
      }
    }

    public void queryCheckDocumentIndex(CheckDocumentIndexDTO checkDocumentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCheckDocumentIndex_call method_call = new queryCheckDocumentIndex_call(checkDocumentIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCheckDocumentIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckDocumentIndexDTO checkDocumentIndexDTO;
      public queryCheckDocumentIndex_call(CheckDocumentIndexDTO checkDocumentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkDocumentIndexDTO = checkDocumentIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCheckDocumentIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCheckDocumentIndex_args args = new queryCheckDocumentIndex_args();
        args.setCheckDocumentIndexDTO(checkDocumentIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CheckDocumentIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCheckDocumentIndex();
      }
    }

    public void getCheckDocumentIndexTotal(CheckDocumentIndexDTO checkDocumentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCheckDocumentIndexTotal_call method_call = new getCheckDocumentIndexTotal_call(checkDocumentIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCheckDocumentIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CheckDocumentIndexDTO checkDocumentIndexDTO;
      public getCheckDocumentIndexTotal_call(CheckDocumentIndexDTO checkDocumentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkDocumentIndexDTO = checkDocumentIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCheckDocumentIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCheckDocumentIndexTotal_args args = new getCheckDocumentIndexTotal_args();
        args.setCheckDocumentIndexDTO(checkDocumentIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCheckDocumentIndexTotal();
      }
    }

    public void queryCollectFileByPids(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollectFileByPids_call method_call = new queryCollectFileByPids_call(pids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollectFileByPids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pids;
      public queryCollectFileByPids_call(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pids = pids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollectFileByPids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollectFileByPids_args args = new queryCollectFileByPids_args();
        args.setPids(pids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectFileDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollectFileByPids();
      }
    }

    public void getPerformJobRemark(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPerformJobRemark_call method_call = new getPerformJobRemark_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPerformJobRemark_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getPerformJobRemark_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPerformJobRemark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPerformJobRemark_args args = new getPerformJobRemark_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PerformJobRemark getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPerformJobRemark();
      }
    }

    public void addPerformJobRemark(PerformJobRemark performJobRemark, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPerformJobRemark_call method_call = new addPerformJobRemark_call(performJobRemark, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPerformJobRemark_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PerformJobRemark performJobRemark;
      public addPerformJobRemark_call(PerformJobRemark performJobRemark, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.performJobRemark = performJobRemark;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPerformJobRemark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPerformJobRemark_args args = new addPerformJobRemark_args();
        args.setPerformJobRemark(performJobRemark);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPerformJobRemark();
      }
    }

    public void updatePerformJobRemark(PerformJobRemark performJobRemark, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePerformJobRemark_call method_call = new updatePerformJobRemark_call(performJobRemark, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePerformJobRemark_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PerformJobRemark performJobRemark;
      public updatePerformJobRemark_call(PerformJobRemark performJobRemark, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.performJobRemark = performJobRemark;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePerformJobRemark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePerformJobRemark_args args = new updatePerformJobRemark_args();
        args.setPerformJobRemark(performJobRemark);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePerformJobRemark();
      }
    }

    public void initIntegratedDept(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initIntegratedDept_call method_call = new initIntegratedDept_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initIntegratedDept_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public initIntegratedDept_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initIntegratedDept", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initIntegratedDept_args args = new initIntegratedDept_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_initIntegratedDept();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryCollectFile", new queryCollectFile());
      processMap.put("getCollectFileTotal", new getCollectFileTotal());
      processMap.put("addCollectFile", new addCollectFile());
      processMap.put("getCollectFileById", new getCollectFileById());
      processMap.put("updateCollectFile", new updateCollectFile());
      processMap.put("updateRemarkByProjectId", new updateRemarkByProjectId());
      processMap.put("collectFile", new collectFile());
      processMap.put("refundFile", new refundFile());
      processMap.put("getCollectFilePrintInfo", new getCollectFilePrintInfo());
      processMap.put("queryCheckDocument", new queryCheckDocument());
      processMap.put("getCheckDocumentTotal", new getCheckDocumentTotal());
      processMap.put("addCheckDocument", new addCheckDocument());
      processMap.put("getCheckDocumentById", new getCheckDocumentById());
      processMap.put("getCheckDocumentByProjectId", new getCheckDocumentByProjectId());
      processMap.put("updateCheckDocument", new updateCheckDocument());
      processMap.put("reCheckCheckDocument", new reCheckCheckDocument());
      processMap.put("queryCheckLitigation", new queryCheckLitigation());
      processMap.put("getCheckLitigationTotal", new getCheckLitigationTotal());
      processMap.put("addCheckLitigation", new addCheckLitigation());
      processMap.put("getCheckLitigationById", new getCheckLitigationById());
      processMap.put("getCheckLitigationByProjectId", new getCheckLitigationByProjectId());
      processMap.put("updateCheckLitigation", new updateCheckLitigation());
      processMap.put("queryCheckDocumentIndex", new queryCheckDocumentIndex());
      processMap.put("getCheckDocumentIndexTotal", new getCheckDocumentIndexTotal());
      processMap.put("queryCollectFileByPids", new queryCollectFileByPids());
      processMap.put("getPerformJobRemark", new getPerformJobRemark());
      processMap.put("addPerformJobRemark", new addPerformJobRemark());
      processMap.put("updatePerformJobRemark", new updatePerformJobRemark());
      processMap.put("initIntegratedDept", new initIntegratedDept());
      return processMap;
    }

    public static class queryCollectFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollectFile_args> {
      public queryCollectFile() {
        super("queryCollectFile");
      }

      public queryCollectFile_args getEmptyArgsInstance() {
        return new queryCollectFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollectFile_result getResult(I iface, queryCollectFile_args args) throws org.apache.thrift.TException {
        queryCollectFile_result result = new queryCollectFile_result();
        result.success = iface.queryCollectFile(args.collectfileDTO);
        return result;
      }
    }

    public static class getCollectFileTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectFileTotal_args> {
      public getCollectFileTotal() {
        super("getCollectFileTotal");
      }

      public getCollectFileTotal_args getEmptyArgsInstance() {
        return new getCollectFileTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectFileTotal_result getResult(I iface, getCollectFileTotal_args args) throws org.apache.thrift.TException {
        getCollectFileTotal_result result = new getCollectFileTotal_result();
        result.success = iface.getCollectFileTotal(args.collectfileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addCollectFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCollectFile_args> {
      public addCollectFile() {
        super("addCollectFile");
      }

      public addCollectFile_args getEmptyArgsInstance() {
        return new addCollectFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCollectFile_result getResult(I iface, addCollectFile_args args) throws org.apache.thrift.TException {
        addCollectFile_result result = new addCollectFile_result();
        result.success = iface.addCollectFile(args.collectfileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCollectFileById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectFileById_args> {
      public getCollectFileById() {
        super("getCollectFileById");
      }

      public getCollectFileById_args getEmptyArgsInstance() {
        return new getCollectFileById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectFileById_result getResult(I iface, getCollectFileById_args args) throws org.apache.thrift.TException {
        getCollectFileById_result result = new getCollectFileById_result();
        result.success = iface.getCollectFileById(args.pid);
        return result;
      }
    }

    public static class updateCollectFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCollectFile_args> {
      public updateCollectFile() {
        super("updateCollectFile");
      }

      public updateCollectFile_args getEmptyArgsInstance() {
        return new updateCollectFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCollectFile_result getResult(I iface, updateCollectFile_args args) throws org.apache.thrift.TException {
        updateCollectFile_result result = new updateCollectFile_result();
        result.success = iface.updateCollectFile(args.collectfileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateRemarkByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRemarkByProjectId_args> {
      public updateRemarkByProjectId() {
        super("updateRemarkByProjectId");
      }

      public updateRemarkByProjectId_args getEmptyArgsInstance() {
        return new updateRemarkByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRemarkByProjectId_result getResult(I iface, updateRemarkByProjectId_args args) throws org.apache.thrift.TException {
        updateRemarkByProjectId_result result = new updateRemarkByProjectId_result();
        result.success = iface.updateRemarkByProjectId(args.collectfileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class collectFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, collectFile_args> {
      public collectFile() {
        super("collectFile");
      }

      public collectFile_args getEmptyArgsInstance() {
        return new collectFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public collectFile_result getResult(I iface, collectFile_args args) throws org.apache.thrift.TException {
        collectFile_result result = new collectFile_result();
        result.success = iface.collectFile(args.collectfileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class refundFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refundFile_args> {
      public refundFile() {
        super("refundFile");
      }

      public refundFile_args getEmptyArgsInstance() {
        return new refundFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refundFile_result getResult(I iface, refundFile_args args) throws org.apache.thrift.TException {
        refundFile_result result = new refundFile_result();
        result.success = iface.refundFile(args.collectfileDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCollectFilePrintInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectFilePrintInfo_args> {
      public getCollectFilePrintInfo() {
        super("getCollectFilePrintInfo");
      }

      public getCollectFilePrintInfo_args getEmptyArgsInstance() {
        return new getCollectFilePrintInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectFilePrintInfo_result getResult(I iface, getCollectFilePrintInfo_args args) throws org.apache.thrift.TException {
        getCollectFilePrintInfo_result result = new getCollectFilePrintInfo_result();
        result.success = iface.getCollectFilePrintInfo(args.collectFilePrintInfo);
        return result;
      }
    }

    public static class queryCheckDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCheckDocument_args> {
      public queryCheckDocument() {
        super("queryCheckDocument");
      }

      public queryCheckDocument_args getEmptyArgsInstance() {
        return new queryCheckDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCheckDocument_result getResult(I iface, queryCheckDocument_args args) throws org.apache.thrift.TException {
        queryCheckDocument_result result = new queryCheckDocument_result();
        result.success = iface.queryCheckDocument(args.checkDocumentDTO);
        return result;
      }
    }

    public static class getCheckDocumentTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCheckDocumentTotal_args> {
      public getCheckDocumentTotal() {
        super("getCheckDocumentTotal");
      }

      public getCheckDocumentTotal_args getEmptyArgsInstance() {
        return new getCheckDocumentTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCheckDocumentTotal_result getResult(I iface, getCheckDocumentTotal_args args) throws org.apache.thrift.TException {
        getCheckDocumentTotal_result result = new getCheckDocumentTotal_result();
        result.success = iface.getCheckDocumentTotal(args.checkDocumentDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addCheckDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCheckDocument_args> {
      public addCheckDocument() {
        super("addCheckDocument");
      }

      public addCheckDocument_args getEmptyArgsInstance() {
        return new addCheckDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCheckDocument_result getResult(I iface, addCheckDocument_args args) throws org.apache.thrift.TException {
        addCheckDocument_result result = new addCheckDocument_result();
        result.success = iface.addCheckDocument(args.checkDocumentDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCheckDocumentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCheckDocumentById_args> {
      public getCheckDocumentById() {
        super("getCheckDocumentById");
      }

      public getCheckDocumentById_args getEmptyArgsInstance() {
        return new getCheckDocumentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCheckDocumentById_result getResult(I iface, getCheckDocumentById_args args) throws org.apache.thrift.TException {
        getCheckDocumentById_result result = new getCheckDocumentById_result();
        result.success = iface.getCheckDocumentById(args.pid);
        return result;
      }
    }

    public static class getCheckDocumentByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCheckDocumentByProjectId_args> {
      public getCheckDocumentByProjectId() {
        super("getCheckDocumentByProjectId");
      }

      public getCheckDocumentByProjectId_args getEmptyArgsInstance() {
        return new getCheckDocumentByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCheckDocumentByProjectId_result getResult(I iface, getCheckDocumentByProjectId_args args) throws org.apache.thrift.TException {
        getCheckDocumentByProjectId_result result = new getCheckDocumentByProjectId_result();
        result.success = iface.getCheckDocumentByProjectId(args.projectId);
        return result;
      }
    }

    public static class updateCheckDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCheckDocument_args> {
      public updateCheckDocument() {
        super("updateCheckDocument");
      }

      public updateCheckDocument_args getEmptyArgsInstance() {
        return new updateCheckDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCheckDocument_result getResult(I iface, updateCheckDocument_args args) throws org.apache.thrift.TException {
        updateCheckDocument_result result = new updateCheckDocument_result();
        result.success = iface.updateCheckDocument(args.checkDocumentDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reCheckCheckDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reCheckCheckDocument_args> {
      public reCheckCheckDocument() {
        super("reCheckCheckDocument");
      }

      public reCheckCheckDocument_args getEmptyArgsInstance() {
        return new reCheckCheckDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reCheckCheckDocument_result getResult(I iface, reCheckCheckDocument_args args) throws org.apache.thrift.TException {
        reCheckCheckDocument_result result = new reCheckCheckDocument_result();
        result.success = iface.reCheckCheckDocument(args.checkDocumentDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryCheckLitigation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCheckLitigation_args> {
      public queryCheckLitigation() {
        super("queryCheckLitigation");
      }

      public queryCheckLitigation_args getEmptyArgsInstance() {
        return new queryCheckLitigation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCheckLitigation_result getResult(I iface, queryCheckLitigation_args args) throws org.apache.thrift.TException {
        queryCheckLitigation_result result = new queryCheckLitigation_result();
        result.success = iface.queryCheckLitigation(args.checkLitigationDTO);
        return result;
      }
    }

    public static class getCheckLitigationTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCheckLitigationTotal_args> {
      public getCheckLitigationTotal() {
        super("getCheckLitigationTotal");
      }

      public getCheckLitigationTotal_args getEmptyArgsInstance() {
        return new getCheckLitigationTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCheckLitigationTotal_result getResult(I iface, getCheckLitigationTotal_args args) throws org.apache.thrift.TException {
        getCheckLitigationTotal_result result = new getCheckLitigationTotal_result();
        result.success = iface.getCheckLitigationTotal(args.checkLitigationDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addCheckLitigation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCheckLitigation_args> {
      public addCheckLitigation() {
        super("addCheckLitigation");
      }

      public addCheckLitigation_args getEmptyArgsInstance() {
        return new addCheckLitigation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCheckLitigation_result getResult(I iface, addCheckLitigation_args args) throws org.apache.thrift.TException {
        addCheckLitigation_result result = new addCheckLitigation_result();
        result.success = iface.addCheckLitigation(args.checkLitigationDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCheckLitigationById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCheckLitigationById_args> {
      public getCheckLitigationById() {
        super("getCheckLitigationById");
      }

      public getCheckLitigationById_args getEmptyArgsInstance() {
        return new getCheckLitigationById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCheckLitigationById_result getResult(I iface, getCheckLitigationById_args args) throws org.apache.thrift.TException {
        getCheckLitigationById_result result = new getCheckLitigationById_result();
        result.success = iface.getCheckLitigationById(args.pid);
        return result;
      }
    }

    public static class getCheckLitigationByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCheckLitigationByProjectId_args> {
      public getCheckLitigationByProjectId() {
        super("getCheckLitigationByProjectId");
      }

      public getCheckLitigationByProjectId_args getEmptyArgsInstance() {
        return new getCheckLitigationByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCheckLitigationByProjectId_result getResult(I iface, getCheckLitigationByProjectId_args args) throws org.apache.thrift.TException {
        getCheckLitigationByProjectId_result result = new getCheckLitigationByProjectId_result();
        result.success = iface.getCheckLitigationByProjectId(args.projectId);
        return result;
      }
    }

    public static class updateCheckLitigation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCheckLitigation_args> {
      public updateCheckLitigation() {
        super("updateCheckLitigation");
      }

      public updateCheckLitigation_args getEmptyArgsInstance() {
        return new updateCheckLitigation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCheckLitigation_result getResult(I iface, updateCheckLitigation_args args) throws org.apache.thrift.TException {
        updateCheckLitigation_result result = new updateCheckLitigation_result();
        result.success = iface.updateCheckLitigation(args.checkLitigationDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryCheckDocumentIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCheckDocumentIndex_args> {
      public queryCheckDocumentIndex() {
        super("queryCheckDocumentIndex");
      }

      public queryCheckDocumentIndex_args getEmptyArgsInstance() {
        return new queryCheckDocumentIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCheckDocumentIndex_result getResult(I iface, queryCheckDocumentIndex_args args) throws org.apache.thrift.TException {
        queryCheckDocumentIndex_result result = new queryCheckDocumentIndex_result();
        result.success = iface.queryCheckDocumentIndex(args.checkDocumentIndexDTO);
        return result;
      }
    }

    public static class getCheckDocumentIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCheckDocumentIndexTotal_args> {
      public getCheckDocumentIndexTotal() {
        super("getCheckDocumentIndexTotal");
      }

      public getCheckDocumentIndexTotal_args getEmptyArgsInstance() {
        return new getCheckDocumentIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCheckDocumentIndexTotal_result getResult(I iface, getCheckDocumentIndexTotal_args args) throws org.apache.thrift.TException {
        getCheckDocumentIndexTotal_result result = new getCheckDocumentIndexTotal_result();
        result.success = iface.getCheckDocumentIndexTotal(args.checkDocumentIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryCollectFileByPids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollectFileByPids_args> {
      public queryCollectFileByPids() {
        super("queryCollectFileByPids");
      }

      public queryCollectFileByPids_args getEmptyArgsInstance() {
        return new queryCollectFileByPids_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollectFileByPids_result getResult(I iface, queryCollectFileByPids_args args) throws org.apache.thrift.TException {
        queryCollectFileByPids_result result = new queryCollectFileByPids_result();
        result.success = iface.queryCollectFileByPids(args.pids);
        return result;
      }
    }

    public static class getPerformJobRemark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPerformJobRemark_args> {
      public getPerformJobRemark() {
        super("getPerformJobRemark");
      }

      public getPerformJobRemark_args getEmptyArgsInstance() {
        return new getPerformJobRemark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPerformJobRemark_result getResult(I iface, getPerformJobRemark_args args) throws org.apache.thrift.TException {
        getPerformJobRemark_result result = new getPerformJobRemark_result();
        result.success = iface.getPerformJobRemark(args.projectId);
        return result;
      }
    }

    public static class addPerformJobRemark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPerformJobRemark_args> {
      public addPerformJobRemark() {
        super("addPerformJobRemark");
      }

      public addPerformJobRemark_args getEmptyArgsInstance() {
        return new addPerformJobRemark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPerformJobRemark_result getResult(I iface, addPerformJobRemark_args args) throws org.apache.thrift.TException {
        addPerformJobRemark_result result = new addPerformJobRemark_result();
        result.success = iface.addPerformJobRemark(args.performJobRemark);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updatePerformJobRemark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePerformJobRemark_args> {
      public updatePerformJobRemark() {
        super("updatePerformJobRemark");
      }

      public updatePerformJobRemark_args getEmptyArgsInstance() {
        return new updatePerformJobRemark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePerformJobRemark_result getResult(I iface, updatePerformJobRemark_args args) throws org.apache.thrift.TException {
        updatePerformJobRemark_result result = new updatePerformJobRemark_result();
        result.success = iface.updatePerformJobRemark(args.performJobRemark);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class initIntegratedDept<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initIntegratedDept_args> {
      public initIntegratedDept() {
        super("initIntegratedDept");
      }

      public initIntegratedDept_args getEmptyArgsInstance() {
        return new initIntegratedDept_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initIntegratedDept_result getResult(I iface, initIntegratedDept_args args) throws org.apache.thrift.TException {
        initIntegratedDept_result result = new initIntegratedDept_result();
        iface.initIntegratedDept(args.projectId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryCollectFile", new queryCollectFile());
      processMap.put("getCollectFileTotal", new getCollectFileTotal());
      processMap.put("addCollectFile", new addCollectFile());
      processMap.put("getCollectFileById", new getCollectFileById());
      processMap.put("updateCollectFile", new updateCollectFile());
      processMap.put("updateRemarkByProjectId", new updateRemarkByProjectId());
      processMap.put("collectFile", new collectFile());
      processMap.put("refundFile", new refundFile());
      processMap.put("getCollectFilePrintInfo", new getCollectFilePrintInfo());
      processMap.put("queryCheckDocument", new queryCheckDocument());
      processMap.put("getCheckDocumentTotal", new getCheckDocumentTotal());
      processMap.put("addCheckDocument", new addCheckDocument());
      processMap.put("getCheckDocumentById", new getCheckDocumentById());
      processMap.put("getCheckDocumentByProjectId", new getCheckDocumentByProjectId());
      processMap.put("updateCheckDocument", new updateCheckDocument());
      processMap.put("reCheckCheckDocument", new reCheckCheckDocument());
      processMap.put("queryCheckLitigation", new queryCheckLitigation());
      processMap.put("getCheckLitigationTotal", new getCheckLitigationTotal());
      processMap.put("addCheckLitigation", new addCheckLitigation());
      processMap.put("getCheckLitigationById", new getCheckLitigationById());
      processMap.put("getCheckLitigationByProjectId", new getCheckLitigationByProjectId());
      processMap.put("updateCheckLitigation", new updateCheckLitigation());
      processMap.put("queryCheckDocumentIndex", new queryCheckDocumentIndex());
      processMap.put("getCheckDocumentIndexTotal", new getCheckDocumentIndexTotal());
      processMap.put("queryCollectFileByPids", new queryCollectFileByPids());
      processMap.put("getPerformJobRemark", new getPerformJobRemark());
      processMap.put("addPerformJobRemark", new addPerformJobRemark());
      processMap.put("updatePerformJobRemark", new updatePerformJobRemark());
      processMap.put("initIntegratedDept", new initIntegratedDept());
      return processMap;
    }

    public static class queryCollectFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollectFile_args, List<CollectFileDTO>> {
      public queryCollectFile() {
        super("queryCollectFile");
      }

      public queryCollectFile_args getEmptyArgsInstance() {
        return new queryCollectFile_args();
      }

      public AsyncMethodCallback<List<CollectFileDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectFileDTO>>() { 
          public void onComplete(List<CollectFileDTO> o) {
            queryCollectFile_result result = new queryCollectFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollectFile_result result = new queryCollectFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollectFile_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectFileDTO>> resultHandler) throws TException {
        iface.queryCollectFile(args.collectfileDTO,resultHandler);
      }
    }

    public static class getCollectFileTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectFileTotal_args, Integer> {
      public getCollectFileTotal() {
        super("getCollectFileTotal");
      }

      public getCollectFileTotal_args getEmptyArgsInstance() {
        return new getCollectFileTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getCollectFileTotal_result result = new getCollectFileTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectFileTotal_result result = new getCollectFileTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectFileTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getCollectFileTotal(args.collectfileDTO,resultHandler);
      }
    }

    public static class addCollectFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCollectFile_args, Boolean> {
      public addCollectFile() {
        super("addCollectFile");
      }

      public addCollectFile_args getEmptyArgsInstance() {
        return new addCollectFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addCollectFile_result result = new addCollectFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addCollectFile_result result = new addCollectFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCollectFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addCollectFile(args.collectfileDTO,resultHandler);
      }
    }

    public static class getCollectFileById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectFileById_args, CollectFileDTO> {
      public getCollectFileById() {
        super("getCollectFileById");
      }

      public getCollectFileById_args getEmptyArgsInstance() {
        return new getCollectFileById_args();
      }

      public AsyncMethodCallback<CollectFileDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CollectFileDTO>() { 
          public void onComplete(CollectFileDTO o) {
            getCollectFileById_result result = new getCollectFileById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectFileById_result result = new getCollectFileById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectFileById_args args, org.apache.thrift.async.AsyncMethodCallback<CollectFileDTO> resultHandler) throws TException {
        iface.getCollectFileById(args.pid,resultHandler);
      }
    }

    public static class updateCollectFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCollectFile_args, Boolean> {
      public updateCollectFile() {
        super("updateCollectFile");
      }

      public updateCollectFile_args getEmptyArgsInstance() {
        return new updateCollectFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateCollectFile_result result = new updateCollectFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCollectFile_result result = new updateCollectFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCollectFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateCollectFile(args.collectfileDTO,resultHandler);
      }
    }

    public static class updateRemarkByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRemarkByProjectId_args, Boolean> {
      public updateRemarkByProjectId() {
        super("updateRemarkByProjectId");
      }

      public updateRemarkByProjectId_args getEmptyArgsInstance() {
        return new updateRemarkByProjectId_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateRemarkByProjectId_result result = new updateRemarkByProjectId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRemarkByProjectId_result result = new updateRemarkByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRemarkByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateRemarkByProjectId(args.collectfileDTO,resultHandler);
      }
    }

    public static class collectFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, collectFile_args, Boolean> {
      public collectFile() {
        super("collectFile");
      }

      public collectFile_args getEmptyArgsInstance() {
        return new collectFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            collectFile_result result = new collectFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            collectFile_result result = new collectFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, collectFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.collectFile(args.collectfileDTO,resultHandler);
      }
    }

    public static class refundFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, refundFile_args, Boolean> {
      public refundFile() {
        super("refundFile");
      }

      public refundFile_args getEmptyArgsInstance() {
        return new refundFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            refundFile_result result = new refundFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            refundFile_result result = new refundFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, refundFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.refundFile(args.collectfileDTO,resultHandler);
      }
    }

    public static class getCollectFilePrintInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectFilePrintInfo_args, CollectFilePrintInfo> {
      public getCollectFilePrintInfo() {
        super("getCollectFilePrintInfo");
      }

      public getCollectFilePrintInfo_args getEmptyArgsInstance() {
        return new getCollectFilePrintInfo_args();
      }

      public AsyncMethodCallback<CollectFilePrintInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CollectFilePrintInfo>() { 
          public void onComplete(CollectFilePrintInfo o) {
            getCollectFilePrintInfo_result result = new getCollectFilePrintInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectFilePrintInfo_result result = new getCollectFilePrintInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectFilePrintInfo_args args, org.apache.thrift.async.AsyncMethodCallback<CollectFilePrintInfo> resultHandler) throws TException {
        iface.getCollectFilePrintInfo(args.collectFilePrintInfo,resultHandler);
      }
    }

    public static class queryCheckDocument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCheckDocument_args, List<CheckDocumentDTO>> {
      public queryCheckDocument() {
        super("queryCheckDocument");
      }

      public queryCheckDocument_args getEmptyArgsInstance() {
        return new queryCheckDocument_args();
      }

      public AsyncMethodCallback<List<CheckDocumentDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CheckDocumentDTO>>() { 
          public void onComplete(List<CheckDocumentDTO> o) {
            queryCheckDocument_result result = new queryCheckDocument_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCheckDocument_result result = new queryCheckDocument_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCheckDocument_args args, org.apache.thrift.async.AsyncMethodCallback<List<CheckDocumentDTO>> resultHandler) throws TException {
        iface.queryCheckDocument(args.checkDocumentDTO,resultHandler);
      }
    }

    public static class getCheckDocumentTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCheckDocumentTotal_args, Integer> {
      public getCheckDocumentTotal() {
        super("getCheckDocumentTotal");
      }

      public getCheckDocumentTotal_args getEmptyArgsInstance() {
        return new getCheckDocumentTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getCheckDocumentTotal_result result = new getCheckDocumentTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCheckDocumentTotal_result result = new getCheckDocumentTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCheckDocumentTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getCheckDocumentTotal(args.checkDocumentDTO,resultHandler);
      }
    }

    public static class addCheckDocument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCheckDocument_args, Boolean> {
      public addCheckDocument() {
        super("addCheckDocument");
      }

      public addCheckDocument_args getEmptyArgsInstance() {
        return new addCheckDocument_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addCheckDocument_result result = new addCheckDocument_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addCheckDocument_result result = new addCheckDocument_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCheckDocument_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addCheckDocument(args.checkDocumentDTO,resultHandler);
      }
    }

    public static class getCheckDocumentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCheckDocumentById_args, CheckDocumentDTO> {
      public getCheckDocumentById() {
        super("getCheckDocumentById");
      }

      public getCheckDocumentById_args getEmptyArgsInstance() {
        return new getCheckDocumentById_args();
      }

      public AsyncMethodCallback<CheckDocumentDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CheckDocumentDTO>() { 
          public void onComplete(CheckDocumentDTO o) {
            getCheckDocumentById_result result = new getCheckDocumentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCheckDocumentById_result result = new getCheckDocumentById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCheckDocumentById_args args, org.apache.thrift.async.AsyncMethodCallback<CheckDocumentDTO> resultHandler) throws TException {
        iface.getCheckDocumentById(args.pid,resultHandler);
      }
    }

    public static class getCheckDocumentByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCheckDocumentByProjectId_args, CheckDocumentDTO> {
      public getCheckDocumentByProjectId() {
        super("getCheckDocumentByProjectId");
      }

      public getCheckDocumentByProjectId_args getEmptyArgsInstance() {
        return new getCheckDocumentByProjectId_args();
      }

      public AsyncMethodCallback<CheckDocumentDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CheckDocumentDTO>() { 
          public void onComplete(CheckDocumentDTO o) {
            getCheckDocumentByProjectId_result result = new getCheckDocumentByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCheckDocumentByProjectId_result result = new getCheckDocumentByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCheckDocumentByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<CheckDocumentDTO> resultHandler) throws TException {
        iface.getCheckDocumentByProjectId(args.projectId,resultHandler);
      }
    }

    public static class updateCheckDocument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCheckDocument_args, Boolean> {
      public updateCheckDocument() {
        super("updateCheckDocument");
      }

      public updateCheckDocument_args getEmptyArgsInstance() {
        return new updateCheckDocument_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateCheckDocument_result result = new updateCheckDocument_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCheckDocument_result result = new updateCheckDocument_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCheckDocument_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateCheckDocument(args.checkDocumentDTO,resultHandler);
      }
    }

    public static class reCheckCheckDocument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reCheckCheckDocument_args, Boolean> {
      public reCheckCheckDocument() {
        super("reCheckCheckDocument");
      }

      public reCheckCheckDocument_args getEmptyArgsInstance() {
        return new reCheckCheckDocument_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            reCheckCheckDocument_result result = new reCheckCheckDocument_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reCheckCheckDocument_result result = new reCheckCheckDocument_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reCheckCheckDocument_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.reCheckCheckDocument(args.checkDocumentDTO,resultHandler);
      }
    }

    public static class queryCheckLitigation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCheckLitigation_args, List<CheckLitigationDTO>> {
      public queryCheckLitigation() {
        super("queryCheckLitigation");
      }

      public queryCheckLitigation_args getEmptyArgsInstance() {
        return new queryCheckLitigation_args();
      }

      public AsyncMethodCallback<List<CheckLitigationDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CheckLitigationDTO>>() { 
          public void onComplete(List<CheckLitigationDTO> o) {
            queryCheckLitigation_result result = new queryCheckLitigation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCheckLitigation_result result = new queryCheckLitigation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCheckLitigation_args args, org.apache.thrift.async.AsyncMethodCallback<List<CheckLitigationDTO>> resultHandler) throws TException {
        iface.queryCheckLitigation(args.checkLitigationDTO,resultHandler);
      }
    }

    public static class getCheckLitigationTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCheckLitigationTotal_args, Integer> {
      public getCheckLitigationTotal() {
        super("getCheckLitigationTotal");
      }

      public getCheckLitigationTotal_args getEmptyArgsInstance() {
        return new getCheckLitigationTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getCheckLitigationTotal_result result = new getCheckLitigationTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCheckLitigationTotal_result result = new getCheckLitigationTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCheckLitigationTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getCheckLitigationTotal(args.checkLitigationDTO,resultHandler);
      }
    }

    public static class addCheckLitigation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCheckLitigation_args, Boolean> {
      public addCheckLitigation() {
        super("addCheckLitigation");
      }

      public addCheckLitigation_args getEmptyArgsInstance() {
        return new addCheckLitigation_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addCheckLitigation_result result = new addCheckLitigation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addCheckLitigation_result result = new addCheckLitigation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCheckLitigation_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addCheckLitigation(args.checkLitigationDTO,resultHandler);
      }
    }

    public static class getCheckLitigationById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCheckLitigationById_args, CheckLitigationDTO> {
      public getCheckLitigationById() {
        super("getCheckLitigationById");
      }

      public getCheckLitigationById_args getEmptyArgsInstance() {
        return new getCheckLitigationById_args();
      }

      public AsyncMethodCallback<CheckLitigationDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CheckLitigationDTO>() { 
          public void onComplete(CheckLitigationDTO o) {
            getCheckLitigationById_result result = new getCheckLitigationById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCheckLitigationById_result result = new getCheckLitigationById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCheckLitigationById_args args, org.apache.thrift.async.AsyncMethodCallback<CheckLitigationDTO> resultHandler) throws TException {
        iface.getCheckLitigationById(args.pid,resultHandler);
      }
    }

    public static class getCheckLitigationByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCheckLitigationByProjectId_args, CheckLitigationDTO> {
      public getCheckLitigationByProjectId() {
        super("getCheckLitigationByProjectId");
      }

      public getCheckLitigationByProjectId_args getEmptyArgsInstance() {
        return new getCheckLitigationByProjectId_args();
      }

      public AsyncMethodCallback<CheckLitigationDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CheckLitigationDTO>() { 
          public void onComplete(CheckLitigationDTO o) {
            getCheckLitigationByProjectId_result result = new getCheckLitigationByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCheckLitigationByProjectId_result result = new getCheckLitigationByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCheckLitigationByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<CheckLitigationDTO> resultHandler) throws TException {
        iface.getCheckLitigationByProjectId(args.projectId,resultHandler);
      }
    }

    public static class updateCheckLitigation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCheckLitigation_args, Boolean> {
      public updateCheckLitigation() {
        super("updateCheckLitigation");
      }

      public updateCheckLitigation_args getEmptyArgsInstance() {
        return new updateCheckLitigation_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateCheckLitigation_result result = new updateCheckLitigation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCheckLitigation_result result = new updateCheckLitigation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCheckLitigation_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateCheckLitigation(args.checkLitigationDTO,resultHandler);
      }
    }

    public static class queryCheckDocumentIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCheckDocumentIndex_args, List<CheckDocumentIndexDTO>> {
      public queryCheckDocumentIndex() {
        super("queryCheckDocumentIndex");
      }

      public queryCheckDocumentIndex_args getEmptyArgsInstance() {
        return new queryCheckDocumentIndex_args();
      }

      public AsyncMethodCallback<List<CheckDocumentIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CheckDocumentIndexDTO>>() { 
          public void onComplete(List<CheckDocumentIndexDTO> o) {
            queryCheckDocumentIndex_result result = new queryCheckDocumentIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCheckDocumentIndex_result result = new queryCheckDocumentIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCheckDocumentIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<CheckDocumentIndexDTO>> resultHandler) throws TException {
        iface.queryCheckDocumentIndex(args.checkDocumentIndexDTO,resultHandler);
      }
    }

    public static class getCheckDocumentIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCheckDocumentIndexTotal_args, Integer> {
      public getCheckDocumentIndexTotal() {
        super("getCheckDocumentIndexTotal");
      }

      public getCheckDocumentIndexTotal_args getEmptyArgsInstance() {
        return new getCheckDocumentIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getCheckDocumentIndexTotal_result result = new getCheckDocumentIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCheckDocumentIndexTotal_result result = new getCheckDocumentIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCheckDocumentIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getCheckDocumentIndexTotal(args.checkDocumentIndexDTO,resultHandler);
      }
    }

    public static class queryCollectFileByPids<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollectFileByPids_args, List<CollectFileDTO>> {
      public queryCollectFileByPids() {
        super("queryCollectFileByPids");
      }

      public queryCollectFileByPids_args getEmptyArgsInstance() {
        return new queryCollectFileByPids_args();
      }

      public AsyncMethodCallback<List<CollectFileDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectFileDTO>>() { 
          public void onComplete(List<CollectFileDTO> o) {
            queryCollectFileByPids_result result = new queryCollectFileByPids_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollectFileByPids_result result = new queryCollectFileByPids_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollectFileByPids_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectFileDTO>> resultHandler) throws TException {
        iface.queryCollectFileByPids(args.pids,resultHandler);
      }
    }

    public static class getPerformJobRemark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPerformJobRemark_args, PerformJobRemark> {
      public getPerformJobRemark() {
        super("getPerformJobRemark");
      }

      public getPerformJobRemark_args getEmptyArgsInstance() {
        return new getPerformJobRemark_args();
      }

      public AsyncMethodCallback<PerformJobRemark> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PerformJobRemark>() { 
          public void onComplete(PerformJobRemark o) {
            getPerformJobRemark_result result = new getPerformJobRemark_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPerformJobRemark_result result = new getPerformJobRemark_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPerformJobRemark_args args, org.apache.thrift.async.AsyncMethodCallback<PerformJobRemark> resultHandler) throws TException {
        iface.getPerformJobRemark(args.projectId,resultHandler);
      }
    }

    public static class addPerformJobRemark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPerformJobRemark_args, Integer> {
      public addPerformJobRemark() {
        super("addPerformJobRemark");
      }

      public addPerformJobRemark_args getEmptyArgsInstance() {
        return new addPerformJobRemark_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addPerformJobRemark_result result = new addPerformJobRemark_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPerformJobRemark_result result = new addPerformJobRemark_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPerformJobRemark_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addPerformJobRemark(args.performJobRemark,resultHandler);
      }
    }

    public static class updatePerformJobRemark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePerformJobRemark_args, Boolean> {
      public updatePerformJobRemark() {
        super("updatePerformJobRemark");
      }

      public updatePerformJobRemark_args getEmptyArgsInstance() {
        return new updatePerformJobRemark_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updatePerformJobRemark_result result = new updatePerformJobRemark_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePerformJobRemark_result result = new updatePerformJobRemark_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePerformJobRemark_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updatePerformJobRemark(args.performJobRemark,resultHandler);
      }
    }

    public static class initIntegratedDept<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initIntegratedDept_args, Void> {
      public initIntegratedDept() {
        super("initIntegratedDept");
      }

      public initIntegratedDept_args getEmptyArgsInstance() {
        return new initIntegratedDept_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initIntegratedDept_result result = new initIntegratedDept_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initIntegratedDept_result result = new initIntegratedDept_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initIntegratedDept_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.initIntegratedDept(args.projectId,resultHandler);
      }
    }

  }

  public static class queryCollectFile_args implements org.apache.thrift.TBase<queryCollectFile_args, queryCollectFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFile_args");

    private static final org.apache.thrift.protocol.TField COLLECTFILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectfileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFile_argsTupleSchemeFactory());
    }

    public CollectFileDTO collectfileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTFILE_DTO((short)1, "collectfileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTFILE_DTO
            return COLLECTFILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTFILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("collectfileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFile_args.class, metaDataMap);
    }

    public queryCollectFile_args() {
    }

    public queryCollectFile_args(
      CollectFileDTO collectfileDTO)
    {
      this();
      this.collectfileDTO = collectfileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFile_args(queryCollectFile_args other) {
      if (other.isSetCollectfileDTO()) {
        this.collectfileDTO = new CollectFileDTO(other.collectfileDTO);
      }
    }

    public queryCollectFile_args deepCopy() {
      return new queryCollectFile_args(this);
    }

    @Override
    public void clear() {
      this.collectfileDTO = null;
    }

    public CollectFileDTO getCollectfileDTO() {
      return this.collectfileDTO;
    }

    public queryCollectFile_args setCollectfileDTO(CollectFileDTO collectfileDTO) {
      this.collectfileDTO = collectfileDTO;
      return this;
    }

    public void unsetCollectfileDTO() {
      this.collectfileDTO = null;
    }

    /** Returns true if field collectfileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectfileDTO() {
      return this.collectfileDTO != null;
    }

    public void setCollectfileDTOIsSet(boolean value) {
      if (!value) {
        this.collectfileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTFILE_DTO:
        if (value == null) {
          unsetCollectfileDTO();
        } else {
          setCollectfileDTO((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTFILE_DTO:
        return getCollectfileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTFILE_DTO:
        return isSetCollectfileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFile_args)
        return this.equals((queryCollectFile_args)that);
      return false;
    }

    public boolean equals(queryCollectFile_args that) {
      if (that == null)
        return false;

      boolean this_present_collectfileDTO = true && this.isSetCollectfileDTO();
      boolean that_present_collectfileDTO = true && that.isSetCollectfileDTO();
      if (this_present_collectfileDTO || that_present_collectfileDTO) {
        if (!(this_present_collectfileDTO && that_present_collectfileDTO))
          return false;
        if (!this.collectfileDTO.equals(that.collectfileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectfileDTO = true && (isSetCollectfileDTO());
      list.add(present_collectfileDTO);
      if (present_collectfileDTO)
        list.add(collectfileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectfileDTO()).compareTo(other.isSetCollectfileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectfileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectfileDTO, other.collectfileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFile_args(");
      boolean first = true;

      sb.append("collectfileDTO:");
      if (this.collectfileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.collectfileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectfileDTO != null) {
        collectfileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFile_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollectFile_argsStandardScheme getScheme() {
        return new queryCollectFile_argsStandardScheme();
      }
    }

    private static class queryCollectFile_argsStandardScheme extends StandardScheme<queryCollectFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTFILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectfileDTO = new CollectFileDTO();
                struct.collectfileDTO.read(iprot);
                struct.setCollectfileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectfileDTO != null) {
          oprot.writeFieldBegin(COLLECTFILE_DTO_FIELD_DESC);
          struct.collectfileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFile_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollectFile_argsTupleScheme getScheme() {
        return new queryCollectFile_argsTupleScheme();
      }
    }

    private static class queryCollectFile_argsTupleScheme extends TupleScheme<queryCollectFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectfileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectfileDTO()) {
          struct.collectfileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectfileDTO = new CollectFileDTO();
          struct.collectfileDTO.read(iprot);
          struct.setCollectfileDTOIsSet(true);
        }
      }
    }

  }

  public static class queryCollectFile_result implements org.apache.thrift.TBase<queryCollectFile_result, queryCollectFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFile_resultTupleSchemeFactory());
    }

    public List<CollectFileDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFile_result.class, metaDataMap);
    }

    public queryCollectFile_result() {
    }

    public queryCollectFile_result(
      List<CollectFileDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFile_result(queryCollectFile_result other) {
      if (other.isSetSuccess()) {
        List<CollectFileDTO> __this__success = new ArrayList<CollectFileDTO>(other.success.size());
        for (CollectFileDTO other_element : other.success) {
          __this__success.add(new CollectFileDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollectFile_result deepCopy() {
      return new queryCollectFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectFileDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectFileDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectFileDTO>();
      }
      this.success.add(elem);
    }

    public List<CollectFileDTO> getSuccess() {
      return this.success;
    }

    public queryCollectFile_result setSuccess(List<CollectFileDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectFileDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFile_result)
        return this.equals((queryCollectFile_result)that);
      return false;
    }

    public boolean equals(queryCollectFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFile_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollectFile_resultStandardScheme getScheme() {
        return new queryCollectFile_resultStandardScheme();
      }
    }

    private static class queryCollectFile_resultStandardScheme extends StandardScheme<queryCollectFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list620 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectFileDTO>(_list620.size);
                  CollectFileDTO _elem621;
                  for (int _i622 = 0; _i622 < _list620.size; ++_i622)
                  {
                    _elem621 = new CollectFileDTO();
                    _elem621.read(iprot);
                    struct.success.add(_elem621);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectFileDTO _iter623 : struct.success)
            {
              _iter623.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFile_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollectFile_resultTupleScheme getScheme() {
        return new queryCollectFile_resultTupleScheme();
      }
    }

    private static class queryCollectFile_resultTupleScheme extends TupleScheme<queryCollectFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectFileDTO _iter624 : struct.success)
            {
              _iter624.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list625 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectFileDTO>(_list625.size);
            CollectFileDTO _elem626;
            for (int _i627 = 0; _i627 < _list625.size; ++_i627)
            {
              _elem626 = new CollectFileDTO();
              _elem626.read(iprot);
              struct.success.add(_elem626);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectFileTotal_args implements org.apache.thrift.TBase<getCollectFileTotal_args, getCollectFileTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFileTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFileTotal_args");

    private static final org.apache.thrift.protocol.TField COLLECTFILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectfileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFileTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFileTotal_argsTupleSchemeFactory());
    }

    public CollectFileDTO collectfileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTFILE_DTO((short)1, "collectfileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTFILE_DTO
            return COLLECTFILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTFILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("collectfileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFileTotal_args.class, metaDataMap);
    }

    public getCollectFileTotal_args() {
    }

    public getCollectFileTotal_args(
      CollectFileDTO collectfileDTO)
    {
      this();
      this.collectfileDTO = collectfileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFileTotal_args(getCollectFileTotal_args other) {
      if (other.isSetCollectfileDTO()) {
        this.collectfileDTO = new CollectFileDTO(other.collectfileDTO);
      }
    }

    public getCollectFileTotal_args deepCopy() {
      return new getCollectFileTotal_args(this);
    }

    @Override
    public void clear() {
      this.collectfileDTO = null;
    }

    public CollectFileDTO getCollectfileDTO() {
      return this.collectfileDTO;
    }

    public getCollectFileTotal_args setCollectfileDTO(CollectFileDTO collectfileDTO) {
      this.collectfileDTO = collectfileDTO;
      return this;
    }

    public void unsetCollectfileDTO() {
      this.collectfileDTO = null;
    }

    /** Returns true if field collectfileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectfileDTO() {
      return this.collectfileDTO != null;
    }

    public void setCollectfileDTOIsSet(boolean value) {
      if (!value) {
        this.collectfileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTFILE_DTO:
        if (value == null) {
          unsetCollectfileDTO();
        } else {
          setCollectfileDTO((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTFILE_DTO:
        return getCollectfileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTFILE_DTO:
        return isSetCollectfileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFileTotal_args)
        return this.equals((getCollectFileTotal_args)that);
      return false;
    }

    public boolean equals(getCollectFileTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_collectfileDTO = true && this.isSetCollectfileDTO();
      boolean that_present_collectfileDTO = true && that.isSetCollectfileDTO();
      if (this_present_collectfileDTO || that_present_collectfileDTO) {
        if (!(this_present_collectfileDTO && that_present_collectfileDTO))
          return false;
        if (!this.collectfileDTO.equals(that.collectfileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectfileDTO = true && (isSetCollectfileDTO());
      list.add(present_collectfileDTO);
      if (present_collectfileDTO)
        list.add(collectfileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFileTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectfileDTO()).compareTo(other.isSetCollectfileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectfileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectfileDTO, other.collectfileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFileTotal_args(");
      boolean first = true;

      sb.append("collectfileDTO:");
      if (this.collectfileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.collectfileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectfileDTO != null) {
        collectfileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFileTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectFileTotal_argsStandardScheme getScheme() {
        return new getCollectFileTotal_argsStandardScheme();
      }
    }

    private static class getCollectFileTotal_argsStandardScheme extends StandardScheme<getCollectFileTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFileTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTFILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectfileDTO = new CollectFileDTO();
                struct.collectfileDTO.read(iprot);
                struct.setCollectfileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFileTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectfileDTO != null) {
          oprot.writeFieldBegin(COLLECTFILE_DTO_FIELD_DESC);
          struct.collectfileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFileTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectFileTotal_argsTupleScheme getScheme() {
        return new getCollectFileTotal_argsTupleScheme();
      }
    }

    private static class getCollectFileTotal_argsTupleScheme extends TupleScheme<getCollectFileTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFileTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectfileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectfileDTO()) {
          struct.collectfileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFileTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectfileDTO = new CollectFileDTO();
          struct.collectfileDTO.read(iprot);
          struct.setCollectfileDTOIsSet(true);
        }
      }
    }

  }

  public static class getCollectFileTotal_result implements org.apache.thrift.TBase<getCollectFileTotal_result, getCollectFileTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFileTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFileTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFileTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFileTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFileTotal_result.class, metaDataMap);
    }

    public getCollectFileTotal_result() {
    }

    public getCollectFileTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFileTotal_result(getCollectFileTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCollectFileTotal_result deepCopy() {
      return new getCollectFileTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCollectFileTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFileTotal_result)
        return this.equals((getCollectFileTotal_result)that);
      return false;
    }

    public boolean equals(getCollectFileTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFileTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFileTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFileTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectFileTotal_resultStandardScheme getScheme() {
        return new getCollectFileTotal_resultStandardScheme();
      }
    }

    private static class getCollectFileTotal_resultStandardScheme extends StandardScheme<getCollectFileTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFileTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFileTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFileTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectFileTotal_resultTupleScheme getScheme() {
        return new getCollectFileTotal_resultTupleScheme();
      }
    }

    private static class getCollectFileTotal_resultTupleScheme extends TupleScheme<getCollectFileTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFileTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFileTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addCollectFile_args implements org.apache.thrift.TBase<addCollectFile_args, addCollectFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCollectFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCollectFile_args");

    private static final org.apache.thrift.protocol.TField COLLECTFILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectfileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCollectFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCollectFile_argsTupleSchemeFactory());
    }

    public CollectFileDTO collectfileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTFILE_DTO((short)1, "collectfileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTFILE_DTO
            return COLLECTFILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTFILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("collectfileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCollectFile_args.class, metaDataMap);
    }

    public addCollectFile_args() {
    }

    public addCollectFile_args(
      CollectFileDTO collectfileDTO)
    {
      this();
      this.collectfileDTO = collectfileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCollectFile_args(addCollectFile_args other) {
      if (other.isSetCollectfileDTO()) {
        this.collectfileDTO = new CollectFileDTO(other.collectfileDTO);
      }
    }

    public addCollectFile_args deepCopy() {
      return new addCollectFile_args(this);
    }

    @Override
    public void clear() {
      this.collectfileDTO = null;
    }

    public CollectFileDTO getCollectfileDTO() {
      return this.collectfileDTO;
    }

    public addCollectFile_args setCollectfileDTO(CollectFileDTO collectfileDTO) {
      this.collectfileDTO = collectfileDTO;
      return this;
    }

    public void unsetCollectfileDTO() {
      this.collectfileDTO = null;
    }

    /** Returns true if field collectfileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectfileDTO() {
      return this.collectfileDTO != null;
    }

    public void setCollectfileDTOIsSet(boolean value) {
      if (!value) {
        this.collectfileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTFILE_DTO:
        if (value == null) {
          unsetCollectfileDTO();
        } else {
          setCollectfileDTO((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTFILE_DTO:
        return getCollectfileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTFILE_DTO:
        return isSetCollectfileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCollectFile_args)
        return this.equals((addCollectFile_args)that);
      return false;
    }

    public boolean equals(addCollectFile_args that) {
      if (that == null)
        return false;

      boolean this_present_collectfileDTO = true && this.isSetCollectfileDTO();
      boolean that_present_collectfileDTO = true && that.isSetCollectfileDTO();
      if (this_present_collectfileDTO || that_present_collectfileDTO) {
        if (!(this_present_collectfileDTO && that_present_collectfileDTO))
          return false;
        if (!this.collectfileDTO.equals(that.collectfileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectfileDTO = true && (isSetCollectfileDTO());
      list.add(present_collectfileDTO);
      if (present_collectfileDTO)
        list.add(collectfileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCollectFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectfileDTO()).compareTo(other.isSetCollectfileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectfileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectfileDTO, other.collectfileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCollectFile_args(");
      boolean first = true;

      sb.append("collectfileDTO:");
      if (this.collectfileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.collectfileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectfileDTO != null) {
        collectfileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCollectFile_argsStandardSchemeFactory implements SchemeFactory {
      public addCollectFile_argsStandardScheme getScheme() {
        return new addCollectFile_argsStandardScheme();
      }
    }

    private static class addCollectFile_argsStandardScheme extends StandardScheme<addCollectFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCollectFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTFILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectfileDTO = new CollectFileDTO();
                struct.collectfileDTO.read(iprot);
                struct.setCollectfileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCollectFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectfileDTO != null) {
          oprot.writeFieldBegin(COLLECTFILE_DTO_FIELD_DESC);
          struct.collectfileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCollectFile_argsTupleSchemeFactory implements SchemeFactory {
      public addCollectFile_argsTupleScheme getScheme() {
        return new addCollectFile_argsTupleScheme();
      }
    }

    private static class addCollectFile_argsTupleScheme extends TupleScheme<addCollectFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCollectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectfileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectfileDTO()) {
          struct.collectfileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCollectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectfileDTO = new CollectFileDTO();
          struct.collectfileDTO.read(iprot);
          struct.setCollectfileDTOIsSet(true);
        }
      }
    }

  }

  public static class addCollectFile_result implements org.apache.thrift.TBase<addCollectFile_result, addCollectFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCollectFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCollectFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCollectFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCollectFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCollectFile_result.class, metaDataMap);
    }

    public addCollectFile_result() {
    }

    public addCollectFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCollectFile_result(addCollectFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addCollectFile_result deepCopy() {
      return new addCollectFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addCollectFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCollectFile_result)
        return this.equals((addCollectFile_result)that);
      return false;
    }

    public boolean equals(addCollectFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCollectFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCollectFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCollectFile_resultStandardSchemeFactory implements SchemeFactory {
      public addCollectFile_resultStandardScheme getScheme() {
        return new addCollectFile_resultStandardScheme();
      }
    }

    private static class addCollectFile_resultStandardScheme extends StandardScheme<addCollectFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCollectFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCollectFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCollectFile_resultTupleSchemeFactory implements SchemeFactory {
      public addCollectFile_resultTupleScheme getScheme() {
        return new addCollectFile_resultTupleScheme();
      }
    }

    private static class addCollectFile_resultTupleScheme extends TupleScheme<addCollectFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCollectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCollectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectFileById_args implements org.apache.thrift.TBase<getCollectFileById_args, getCollectFileById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFileById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFileById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFileById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFileById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFileById_args.class, metaDataMap);
    }

    public getCollectFileById_args() {
    }

    public getCollectFileById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFileById_args(getCollectFileById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getCollectFileById_args deepCopy() {
      return new getCollectFileById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getCollectFileById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFileById_args)
        return this.equals((getCollectFileById_args)that);
      return false;
    }

    public boolean equals(getCollectFileById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFileById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFileById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFileById_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectFileById_argsStandardScheme getScheme() {
        return new getCollectFileById_argsStandardScheme();
      }
    }

    private static class getCollectFileById_argsStandardScheme extends StandardScheme<getCollectFileById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFileById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFileById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFileById_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectFileById_argsTupleScheme getScheme() {
        return new getCollectFileById_argsTupleScheme();
      }
    }

    private static class getCollectFileById_argsTupleScheme extends TupleScheme<getCollectFileById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFileById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFileById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getCollectFileById_result implements org.apache.thrift.TBase<getCollectFileById_result, getCollectFileById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFileById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFileById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFileById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFileById_resultTupleSchemeFactory());
    }

    public CollectFileDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFileById_result.class, metaDataMap);
    }

    public getCollectFileById_result() {
    }

    public getCollectFileById_result(
      CollectFileDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFileById_result(getCollectFileById_result other) {
      if (other.isSetSuccess()) {
        this.success = new CollectFileDTO(other.success);
      }
    }

    public getCollectFileById_result deepCopy() {
      return new getCollectFileById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CollectFileDTO getSuccess() {
      return this.success;
    }

    public getCollectFileById_result setSuccess(CollectFileDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFileById_result)
        return this.equals((getCollectFileById_result)that);
      return false;
    }

    public boolean equals(getCollectFileById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFileById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFileById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFileById_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectFileById_resultStandardScheme getScheme() {
        return new getCollectFileById_resultStandardScheme();
      }
    }

    private static class getCollectFileById_resultStandardScheme extends StandardScheme<getCollectFileById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFileById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CollectFileDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFileById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFileById_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectFileById_resultTupleScheme getScheme() {
        return new getCollectFileById_resultTupleScheme();
      }
    }

    private static class getCollectFileById_resultTupleScheme extends TupleScheme<getCollectFileById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFileById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFileById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CollectFileDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateCollectFile_args implements org.apache.thrift.TBase<updateCollectFile_args, updateCollectFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCollectFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCollectFile_args");

    private static final org.apache.thrift.protocol.TField COLLECTFILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectfileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCollectFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCollectFile_argsTupleSchemeFactory());
    }

    public CollectFileDTO collectfileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTFILE_DTO((short)1, "collectfileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTFILE_DTO
            return COLLECTFILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTFILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("collectfileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCollectFile_args.class, metaDataMap);
    }

    public updateCollectFile_args() {
    }

    public updateCollectFile_args(
      CollectFileDTO collectfileDTO)
    {
      this();
      this.collectfileDTO = collectfileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCollectFile_args(updateCollectFile_args other) {
      if (other.isSetCollectfileDTO()) {
        this.collectfileDTO = new CollectFileDTO(other.collectfileDTO);
      }
    }

    public updateCollectFile_args deepCopy() {
      return new updateCollectFile_args(this);
    }

    @Override
    public void clear() {
      this.collectfileDTO = null;
    }

    public CollectFileDTO getCollectfileDTO() {
      return this.collectfileDTO;
    }

    public updateCollectFile_args setCollectfileDTO(CollectFileDTO collectfileDTO) {
      this.collectfileDTO = collectfileDTO;
      return this;
    }

    public void unsetCollectfileDTO() {
      this.collectfileDTO = null;
    }

    /** Returns true if field collectfileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectfileDTO() {
      return this.collectfileDTO != null;
    }

    public void setCollectfileDTOIsSet(boolean value) {
      if (!value) {
        this.collectfileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTFILE_DTO:
        if (value == null) {
          unsetCollectfileDTO();
        } else {
          setCollectfileDTO((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTFILE_DTO:
        return getCollectfileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTFILE_DTO:
        return isSetCollectfileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCollectFile_args)
        return this.equals((updateCollectFile_args)that);
      return false;
    }

    public boolean equals(updateCollectFile_args that) {
      if (that == null)
        return false;

      boolean this_present_collectfileDTO = true && this.isSetCollectfileDTO();
      boolean that_present_collectfileDTO = true && that.isSetCollectfileDTO();
      if (this_present_collectfileDTO || that_present_collectfileDTO) {
        if (!(this_present_collectfileDTO && that_present_collectfileDTO))
          return false;
        if (!this.collectfileDTO.equals(that.collectfileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectfileDTO = true && (isSetCollectfileDTO());
      list.add(present_collectfileDTO);
      if (present_collectfileDTO)
        list.add(collectfileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCollectFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectfileDTO()).compareTo(other.isSetCollectfileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectfileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectfileDTO, other.collectfileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCollectFile_args(");
      boolean first = true;

      sb.append("collectfileDTO:");
      if (this.collectfileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.collectfileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectfileDTO != null) {
        collectfileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCollectFile_argsStandardSchemeFactory implements SchemeFactory {
      public updateCollectFile_argsStandardScheme getScheme() {
        return new updateCollectFile_argsStandardScheme();
      }
    }

    private static class updateCollectFile_argsStandardScheme extends StandardScheme<updateCollectFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCollectFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTFILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectfileDTO = new CollectFileDTO();
                struct.collectfileDTO.read(iprot);
                struct.setCollectfileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCollectFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectfileDTO != null) {
          oprot.writeFieldBegin(COLLECTFILE_DTO_FIELD_DESC);
          struct.collectfileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCollectFile_argsTupleSchemeFactory implements SchemeFactory {
      public updateCollectFile_argsTupleScheme getScheme() {
        return new updateCollectFile_argsTupleScheme();
      }
    }

    private static class updateCollectFile_argsTupleScheme extends TupleScheme<updateCollectFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCollectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectfileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectfileDTO()) {
          struct.collectfileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCollectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectfileDTO = new CollectFileDTO();
          struct.collectfileDTO.read(iprot);
          struct.setCollectfileDTOIsSet(true);
        }
      }
    }

  }

  public static class updateCollectFile_result implements org.apache.thrift.TBase<updateCollectFile_result, updateCollectFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCollectFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCollectFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCollectFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCollectFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCollectFile_result.class, metaDataMap);
    }

    public updateCollectFile_result() {
    }

    public updateCollectFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCollectFile_result(updateCollectFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateCollectFile_result deepCopy() {
      return new updateCollectFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateCollectFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCollectFile_result)
        return this.equals((updateCollectFile_result)that);
      return false;
    }

    public boolean equals(updateCollectFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCollectFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCollectFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCollectFile_resultStandardSchemeFactory implements SchemeFactory {
      public updateCollectFile_resultStandardScheme getScheme() {
        return new updateCollectFile_resultStandardScheme();
      }
    }

    private static class updateCollectFile_resultStandardScheme extends StandardScheme<updateCollectFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCollectFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCollectFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCollectFile_resultTupleSchemeFactory implements SchemeFactory {
      public updateCollectFile_resultTupleScheme getScheme() {
        return new updateCollectFile_resultTupleScheme();
      }
    }

    private static class updateCollectFile_resultTupleScheme extends TupleScheme<updateCollectFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCollectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCollectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRemarkByProjectId_args implements org.apache.thrift.TBase<updateRemarkByProjectId_args, updateRemarkByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRemarkByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRemarkByProjectId_args");

    private static final org.apache.thrift.protocol.TField COLLECTFILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectfileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRemarkByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRemarkByProjectId_argsTupleSchemeFactory());
    }

    public CollectFileDTO collectfileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTFILE_DTO((short)1, "collectfileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTFILE_DTO
            return COLLECTFILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTFILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("collectfileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRemarkByProjectId_args.class, metaDataMap);
    }

    public updateRemarkByProjectId_args() {
    }

    public updateRemarkByProjectId_args(
      CollectFileDTO collectfileDTO)
    {
      this();
      this.collectfileDTO = collectfileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRemarkByProjectId_args(updateRemarkByProjectId_args other) {
      if (other.isSetCollectfileDTO()) {
        this.collectfileDTO = new CollectFileDTO(other.collectfileDTO);
      }
    }

    public updateRemarkByProjectId_args deepCopy() {
      return new updateRemarkByProjectId_args(this);
    }

    @Override
    public void clear() {
      this.collectfileDTO = null;
    }

    public CollectFileDTO getCollectfileDTO() {
      return this.collectfileDTO;
    }

    public updateRemarkByProjectId_args setCollectfileDTO(CollectFileDTO collectfileDTO) {
      this.collectfileDTO = collectfileDTO;
      return this;
    }

    public void unsetCollectfileDTO() {
      this.collectfileDTO = null;
    }

    /** Returns true if field collectfileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectfileDTO() {
      return this.collectfileDTO != null;
    }

    public void setCollectfileDTOIsSet(boolean value) {
      if (!value) {
        this.collectfileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTFILE_DTO:
        if (value == null) {
          unsetCollectfileDTO();
        } else {
          setCollectfileDTO((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTFILE_DTO:
        return getCollectfileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTFILE_DTO:
        return isSetCollectfileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRemarkByProjectId_args)
        return this.equals((updateRemarkByProjectId_args)that);
      return false;
    }

    public boolean equals(updateRemarkByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_collectfileDTO = true && this.isSetCollectfileDTO();
      boolean that_present_collectfileDTO = true && that.isSetCollectfileDTO();
      if (this_present_collectfileDTO || that_present_collectfileDTO) {
        if (!(this_present_collectfileDTO && that_present_collectfileDTO))
          return false;
        if (!this.collectfileDTO.equals(that.collectfileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectfileDTO = true && (isSetCollectfileDTO());
      list.add(present_collectfileDTO);
      if (present_collectfileDTO)
        list.add(collectfileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRemarkByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectfileDTO()).compareTo(other.isSetCollectfileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectfileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectfileDTO, other.collectfileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRemarkByProjectId_args(");
      boolean first = true;

      sb.append("collectfileDTO:");
      if (this.collectfileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.collectfileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectfileDTO != null) {
        collectfileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRemarkByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public updateRemarkByProjectId_argsStandardScheme getScheme() {
        return new updateRemarkByProjectId_argsStandardScheme();
      }
    }

    private static class updateRemarkByProjectId_argsStandardScheme extends StandardScheme<updateRemarkByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRemarkByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTFILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectfileDTO = new CollectFileDTO();
                struct.collectfileDTO.read(iprot);
                struct.setCollectfileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRemarkByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectfileDTO != null) {
          oprot.writeFieldBegin(COLLECTFILE_DTO_FIELD_DESC);
          struct.collectfileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRemarkByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public updateRemarkByProjectId_argsTupleScheme getScheme() {
        return new updateRemarkByProjectId_argsTupleScheme();
      }
    }

    private static class updateRemarkByProjectId_argsTupleScheme extends TupleScheme<updateRemarkByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRemarkByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectfileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectfileDTO()) {
          struct.collectfileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRemarkByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectfileDTO = new CollectFileDTO();
          struct.collectfileDTO.read(iprot);
          struct.setCollectfileDTOIsSet(true);
        }
      }
    }

  }

  public static class updateRemarkByProjectId_result implements org.apache.thrift.TBase<updateRemarkByProjectId_result, updateRemarkByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRemarkByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRemarkByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRemarkByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRemarkByProjectId_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRemarkByProjectId_result.class, metaDataMap);
    }

    public updateRemarkByProjectId_result() {
    }

    public updateRemarkByProjectId_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRemarkByProjectId_result(updateRemarkByProjectId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateRemarkByProjectId_result deepCopy() {
      return new updateRemarkByProjectId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateRemarkByProjectId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRemarkByProjectId_result)
        return this.equals((updateRemarkByProjectId_result)that);
      return false;
    }

    public boolean equals(updateRemarkByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRemarkByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRemarkByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRemarkByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public updateRemarkByProjectId_resultStandardScheme getScheme() {
        return new updateRemarkByProjectId_resultStandardScheme();
      }
    }

    private static class updateRemarkByProjectId_resultStandardScheme extends StandardScheme<updateRemarkByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRemarkByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRemarkByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRemarkByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public updateRemarkByProjectId_resultTupleScheme getScheme() {
        return new updateRemarkByProjectId_resultTupleScheme();
      }
    }

    private static class updateRemarkByProjectId_resultTupleScheme extends TupleScheme<updateRemarkByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRemarkByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRemarkByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class collectFile_args implements org.apache.thrift.TBase<collectFile_args, collectFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<collectFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectFile_args");

    private static final org.apache.thrift.protocol.TField COLLECTFILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectfileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectFile_argsTupleSchemeFactory());
    }

    public CollectFileDTO collectfileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTFILE_DTO((short)1, "collectfileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTFILE_DTO
            return COLLECTFILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTFILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("collectfileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectFile_args.class, metaDataMap);
    }

    public collectFile_args() {
    }

    public collectFile_args(
      CollectFileDTO collectfileDTO)
    {
      this();
      this.collectfileDTO = collectfileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectFile_args(collectFile_args other) {
      if (other.isSetCollectfileDTO()) {
        this.collectfileDTO = new CollectFileDTO(other.collectfileDTO);
      }
    }

    public collectFile_args deepCopy() {
      return new collectFile_args(this);
    }

    @Override
    public void clear() {
      this.collectfileDTO = null;
    }

    public CollectFileDTO getCollectfileDTO() {
      return this.collectfileDTO;
    }

    public collectFile_args setCollectfileDTO(CollectFileDTO collectfileDTO) {
      this.collectfileDTO = collectfileDTO;
      return this;
    }

    public void unsetCollectfileDTO() {
      this.collectfileDTO = null;
    }

    /** Returns true if field collectfileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectfileDTO() {
      return this.collectfileDTO != null;
    }

    public void setCollectfileDTOIsSet(boolean value) {
      if (!value) {
        this.collectfileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTFILE_DTO:
        if (value == null) {
          unsetCollectfileDTO();
        } else {
          setCollectfileDTO((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTFILE_DTO:
        return getCollectfileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTFILE_DTO:
        return isSetCollectfileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectFile_args)
        return this.equals((collectFile_args)that);
      return false;
    }

    public boolean equals(collectFile_args that) {
      if (that == null)
        return false;

      boolean this_present_collectfileDTO = true && this.isSetCollectfileDTO();
      boolean that_present_collectfileDTO = true && that.isSetCollectfileDTO();
      if (this_present_collectfileDTO || that_present_collectfileDTO) {
        if (!(this_present_collectfileDTO && that_present_collectfileDTO))
          return false;
        if (!this.collectfileDTO.equals(that.collectfileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectfileDTO = true && (isSetCollectfileDTO());
      list.add(present_collectfileDTO);
      if (present_collectfileDTO)
        list.add(collectfileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectfileDTO()).compareTo(other.isSetCollectfileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectfileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectfileDTO, other.collectfileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectFile_args(");
      boolean first = true;

      sb.append("collectfileDTO:");
      if (this.collectfileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.collectfileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectfileDTO != null) {
        collectfileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectFile_argsStandardSchemeFactory implements SchemeFactory {
      public collectFile_argsStandardScheme getScheme() {
        return new collectFile_argsStandardScheme();
      }
    }

    private static class collectFile_argsStandardScheme extends StandardScheme<collectFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTFILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectfileDTO = new CollectFileDTO();
                struct.collectfileDTO.read(iprot);
                struct.setCollectfileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectfileDTO != null) {
          oprot.writeFieldBegin(COLLECTFILE_DTO_FIELD_DESC);
          struct.collectfileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectFile_argsTupleSchemeFactory implements SchemeFactory {
      public collectFile_argsTupleScheme getScheme() {
        return new collectFile_argsTupleScheme();
      }
    }

    private static class collectFile_argsTupleScheme extends TupleScheme<collectFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectfileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectfileDTO()) {
          struct.collectfileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectfileDTO = new CollectFileDTO();
          struct.collectfileDTO.read(iprot);
          struct.setCollectfileDTOIsSet(true);
        }
      }
    }

  }

  public static class collectFile_result implements org.apache.thrift.TBase<collectFile_result, collectFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<collectFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new collectFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new collectFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectFile_result.class, metaDataMap);
    }

    public collectFile_result() {
    }

    public collectFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectFile_result(collectFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public collectFile_result deepCopy() {
      return new collectFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public collectFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof collectFile_result)
        return this.equals((collectFile_result)that);
      return false;
    }

    public boolean equals(collectFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(collectFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("collectFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectFile_resultStandardSchemeFactory implements SchemeFactory {
      public collectFile_resultStandardScheme getScheme() {
        return new collectFile_resultStandardScheme();
      }
    }

    private static class collectFile_resultStandardScheme extends StandardScheme<collectFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectFile_resultTupleSchemeFactory implements SchemeFactory {
      public collectFile_resultTupleScheme getScheme() {
        return new collectFile_resultTupleScheme();
      }
    }

    private static class collectFile_resultTupleScheme extends TupleScheme<collectFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refundFile_args implements org.apache.thrift.TBase<refundFile_args, refundFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<refundFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundFile_args");

    private static final org.apache.thrift.protocol.TField COLLECTFILE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectfileDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundFile_argsTupleSchemeFactory());
    }

    public CollectFileDTO collectfileDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECTFILE_DTO((short)1, "collectfileDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECTFILE_DTO
            return COLLECTFILE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECTFILE_DTO, new org.apache.thrift.meta_data.FieldMetaData("collectfileDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundFile_args.class, metaDataMap);
    }

    public refundFile_args() {
    }

    public refundFile_args(
      CollectFileDTO collectfileDTO)
    {
      this();
      this.collectfileDTO = collectfileDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundFile_args(refundFile_args other) {
      if (other.isSetCollectfileDTO()) {
        this.collectfileDTO = new CollectFileDTO(other.collectfileDTO);
      }
    }

    public refundFile_args deepCopy() {
      return new refundFile_args(this);
    }

    @Override
    public void clear() {
      this.collectfileDTO = null;
    }

    public CollectFileDTO getCollectfileDTO() {
      return this.collectfileDTO;
    }

    public refundFile_args setCollectfileDTO(CollectFileDTO collectfileDTO) {
      this.collectfileDTO = collectfileDTO;
      return this;
    }

    public void unsetCollectfileDTO() {
      this.collectfileDTO = null;
    }

    /** Returns true if field collectfileDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectfileDTO() {
      return this.collectfileDTO != null;
    }

    public void setCollectfileDTOIsSet(boolean value) {
      if (!value) {
        this.collectfileDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECTFILE_DTO:
        if (value == null) {
          unsetCollectfileDTO();
        } else {
          setCollectfileDTO((CollectFileDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECTFILE_DTO:
        return getCollectfileDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECTFILE_DTO:
        return isSetCollectfileDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundFile_args)
        return this.equals((refundFile_args)that);
      return false;
    }

    public boolean equals(refundFile_args that) {
      if (that == null)
        return false;

      boolean this_present_collectfileDTO = true && this.isSetCollectfileDTO();
      boolean that_present_collectfileDTO = true && that.isSetCollectfileDTO();
      if (this_present_collectfileDTO || that_present_collectfileDTO) {
        if (!(this_present_collectfileDTO && that_present_collectfileDTO))
          return false;
        if (!this.collectfileDTO.equals(that.collectfileDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectfileDTO = true && (isSetCollectfileDTO());
      list.add(present_collectfileDTO);
      if (present_collectfileDTO)
        list.add(collectfileDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectfileDTO()).compareTo(other.isSetCollectfileDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectfileDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectfileDTO, other.collectfileDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundFile_args(");
      boolean first = true;

      sb.append("collectfileDTO:");
      if (this.collectfileDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.collectfileDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectfileDTO != null) {
        collectfileDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundFile_argsStandardSchemeFactory implements SchemeFactory {
      public refundFile_argsStandardScheme getScheme() {
        return new refundFile_argsStandardScheme();
      }
    }

    private static class refundFile_argsStandardScheme extends StandardScheme<refundFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECTFILE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectfileDTO = new CollectFileDTO();
                struct.collectfileDTO.read(iprot);
                struct.setCollectfileDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectfileDTO != null) {
          oprot.writeFieldBegin(COLLECTFILE_DTO_FIELD_DESC);
          struct.collectfileDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundFile_argsTupleSchemeFactory implements SchemeFactory {
      public refundFile_argsTupleScheme getScheme() {
        return new refundFile_argsTupleScheme();
      }
    }

    private static class refundFile_argsTupleScheme extends TupleScheme<refundFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectfileDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectfileDTO()) {
          struct.collectfileDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectfileDTO = new CollectFileDTO();
          struct.collectfileDTO.read(iprot);
          struct.setCollectfileDTOIsSet(true);
        }
      }
    }

  }

  public static class refundFile_result implements org.apache.thrift.TBase<refundFile_result, refundFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<refundFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundFile_result.class, metaDataMap);
    }

    public refundFile_result() {
    }

    public refundFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundFile_result(refundFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public refundFile_result deepCopy() {
      return new refundFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public refundFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundFile_result)
        return this.equals((refundFile_result)that);
      return false;
    }

    public boolean equals(refundFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundFile_resultStandardSchemeFactory implements SchemeFactory {
      public refundFile_resultStandardScheme getScheme() {
        return new refundFile_resultStandardScheme();
      }
    }

    private static class refundFile_resultStandardScheme extends StandardScheme<refundFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundFile_resultTupleSchemeFactory implements SchemeFactory {
      public refundFile_resultTupleScheme getScheme() {
        return new refundFile_resultTupleScheme();
      }
    }

    private static class refundFile_resultTupleScheme extends TupleScheme<refundFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectFilePrintInfo_args implements org.apache.thrift.TBase<getCollectFilePrintInfo_args, getCollectFilePrintInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFilePrintInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFilePrintInfo_args");

    private static final org.apache.thrift.protocol.TField COLLECT_FILE_PRINT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFilePrintInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFilePrintInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFilePrintInfo_argsTupleSchemeFactory());
    }

    public CollectFilePrintInfo collectFilePrintInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECT_FILE_PRINT_INFO((short)1, "collectFilePrintInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECT_FILE_PRINT_INFO
            return COLLECT_FILE_PRINT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECT_FILE_PRINT_INFO, new org.apache.thrift.meta_data.FieldMetaData("collectFilePrintInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFilePrintInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFilePrintInfo_args.class, metaDataMap);
    }

    public getCollectFilePrintInfo_args() {
    }

    public getCollectFilePrintInfo_args(
      CollectFilePrintInfo collectFilePrintInfo)
    {
      this();
      this.collectFilePrintInfo = collectFilePrintInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFilePrintInfo_args(getCollectFilePrintInfo_args other) {
      if (other.isSetCollectFilePrintInfo()) {
        this.collectFilePrintInfo = new CollectFilePrintInfo(other.collectFilePrintInfo);
      }
    }

    public getCollectFilePrintInfo_args deepCopy() {
      return new getCollectFilePrintInfo_args(this);
    }

    @Override
    public void clear() {
      this.collectFilePrintInfo = null;
    }

    public CollectFilePrintInfo getCollectFilePrintInfo() {
      return this.collectFilePrintInfo;
    }

    public getCollectFilePrintInfo_args setCollectFilePrintInfo(CollectFilePrintInfo collectFilePrintInfo) {
      this.collectFilePrintInfo = collectFilePrintInfo;
      return this;
    }

    public void unsetCollectFilePrintInfo() {
      this.collectFilePrintInfo = null;
    }

    /** Returns true if field collectFilePrintInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectFilePrintInfo() {
      return this.collectFilePrintInfo != null;
    }

    public void setCollectFilePrintInfoIsSet(boolean value) {
      if (!value) {
        this.collectFilePrintInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECT_FILE_PRINT_INFO:
        if (value == null) {
          unsetCollectFilePrintInfo();
        } else {
          setCollectFilePrintInfo((CollectFilePrintInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECT_FILE_PRINT_INFO:
        return getCollectFilePrintInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECT_FILE_PRINT_INFO:
        return isSetCollectFilePrintInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFilePrintInfo_args)
        return this.equals((getCollectFilePrintInfo_args)that);
      return false;
    }

    public boolean equals(getCollectFilePrintInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_collectFilePrintInfo = true && this.isSetCollectFilePrintInfo();
      boolean that_present_collectFilePrintInfo = true && that.isSetCollectFilePrintInfo();
      if (this_present_collectFilePrintInfo || that_present_collectFilePrintInfo) {
        if (!(this_present_collectFilePrintInfo && that_present_collectFilePrintInfo))
          return false;
        if (!this.collectFilePrintInfo.equals(that.collectFilePrintInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectFilePrintInfo = true && (isSetCollectFilePrintInfo());
      list.add(present_collectFilePrintInfo);
      if (present_collectFilePrintInfo)
        list.add(collectFilePrintInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFilePrintInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectFilePrintInfo()).compareTo(other.isSetCollectFilePrintInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectFilePrintInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFilePrintInfo, other.collectFilePrintInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFilePrintInfo_args(");
      boolean first = true;

      sb.append("collectFilePrintInfo:");
      if (this.collectFilePrintInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.collectFilePrintInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectFilePrintInfo != null) {
        collectFilePrintInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFilePrintInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectFilePrintInfo_argsStandardScheme getScheme() {
        return new getCollectFilePrintInfo_argsStandardScheme();
      }
    }

    private static class getCollectFilePrintInfo_argsStandardScheme extends StandardScheme<getCollectFilePrintInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFilePrintInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECT_FILE_PRINT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectFilePrintInfo = new CollectFilePrintInfo();
                struct.collectFilePrintInfo.read(iprot);
                struct.setCollectFilePrintInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFilePrintInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectFilePrintInfo != null) {
          oprot.writeFieldBegin(COLLECT_FILE_PRINT_INFO_FIELD_DESC);
          struct.collectFilePrintInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFilePrintInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectFilePrintInfo_argsTupleScheme getScheme() {
        return new getCollectFilePrintInfo_argsTupleScheme();
      }
    }

    private static class getCollectFilePrintInfo_argsTupleScheme extends TupleScheme<getCollectFilePrintInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFilePrintInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectFilePrintInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectFilePrintInfo()) {
          struct.collectFilePrintInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFilePrintInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectFilePrintInfo = new CollectFilePrintInfo();
          struct.collectFilePrintInfo.read(iprot);
          struct.setCollectFilePrintInfoIsSet(true);
        }
      }
    }

  }

  public static class getCollectFilePrintInfo_result implements org.apache.thrift.TBase<getCollectFilePrintInfo_result, getCollectFilePrintInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFilePrintInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFilePrintInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFilePrintInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFilePrintInfo_resultTupleSchemeFactory());
    }

    public CollectFilePrintInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFilePrintInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFilePrintInfo_result.class, metaDataMap);
    }

    public getCollectFilePrintInfo_result() {
    }

    public getCollectFilePrintInfo_result(
      CollectFilePrintInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFilePrintInfo_result(getCollectFilePrintInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new CollectFilePrintInfo(other.success);
      }
    }

    public getCollectFilePrintInfo_result deepCopy() {
      return new getCollectFilePrintInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CollectFilePrintInfo getSuccess() {
      return this.success;
    }

    public getCollectFilePrintInfo_result setSuccess(CollectFilePrintInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CollectFilePrintInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFilePrintInfo_result)
        return this.equals((getCollectFilePrintInfo_result)that);
      return false;
    }

    public boolean equals(getCollectFilePrintInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFilePrintInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFilePrintInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFilePrintInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectFilePrintInfo_resultStandardScheme getScheme() {
        return new getCollectFilePrintInfo_resultStandardScheme();
      }
    }

    private static class getCollectFilePrintInfo_resultStandardScheme extends StandardScheme<getCollectFilePrintInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFilePrintInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CollectFilePrintInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFilePrintInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFilePrintInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectFilePrintInfo_resultTupleScheme getScheme() {
        return new getCollectFilePrintInfo_resultTupleScheme();
      }
    }

    private static class getCollectFilePrintInfo_resultTupleScheme extends TupleScheme<getCollectFilePrintInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFilePrintInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFilePrintInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CollectFilePrintInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCheckDocument_args implements org.apache.thrift.TBase<queryCheckDocument_args, queryCheckDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCheckDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCheckDocument_args");

    private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCheckDocument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCheckDocument_argsTupleSchemeFactory());
    }

    public CheckDocumentDTO checkDocumentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_DOCUMENT_DTO((short)1, "checkDocumentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_DOCUMENT_DTO
            return CHECK_DOCUMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_DOCUMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCheckDocument_args.class, metaDataMap);
    }

    public queryCheckDocument_args() {
    }

    public queryCheckDocument_args(
      CheckDocumentDTO checkDocumentDTO)
    {
      this();
      this.checkDocumentDTO = checkDocumentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCheckDocument_args(queryCheckDocument_args other) {
      if (other.isSetCheckDocumentDTO()) {
        this.checkDocumentDTO = new CheckDocumentDTO(other.checkDocumentDTO);
      }
    }

    public queryCheckDocument_args deepCopy() {
      return new queryCheckDocument_args(this);
    }

    @Override
    public void clear() {
      this.checkDocumentDTO = null;
    }

    public CheckDocumentDTO getCheckDocumentDTO() {
      return this.checkDocumentDTO;
    }

    public queryCheckDocument_args setCheckDocumentDTO(CheckDocumentDTO checkDocumentDTO) {
      this.checkDocumentDTO = checkDocumentDTO;
      return this;
    }

    public void unsetCheckDocumentDTO() {
      this.checkDocumentDTO = null;
    }

    /** Returns true if field checkDocumentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckDocumentDTO() {
      return this.checkDocumentDTO != null;
    }

    public void setCheckDocumentDTOIsSet(boolean value) {
      if (!value) {
        this.checkDocumentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        if (value == null) {
          unsetCheckDocumentDTO();
        } else {
          setCheckDocumentDTO((CheckDocumentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return getCheckDocumentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return isSetCheckDocumentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCheckDocument_args)
        return this.equals((queryCheckDocument_args)that);
      return false;
    }

    public boolean equals(queryCheckDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_checkDocumentDTO = true && this.isSetCheckDocumentDTO();
      boolean that_present_checkDocumentDTO = true && that.isSetCheckDocumentDTO();
      if (this_present_checkDocumentDTO || that_present_checkDocumentDTO) {
        if (!(this_present_checkDocumentDTO && that_present_checkDocumentDTO))
          return false;
        if (!this.checkDocumentDTO.equals(that.checkDocumentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkDocumentDTO = true && (isSetCheckDocumentDTO());
      list.add(present_checkDocumentDTO);
      if (present_checkDocumentDTO)
        list.add(checkDocumentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCheckDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckDocumentDTO()).compareTo(other.isSetCheckDocumentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckDocumentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentDTO, other.checkDocumentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCheckDocument_args(");
      boolean first = true;

      sb.append("checkDocumentDTO:");
      if (this.checkDocumentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkDocumentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkDocumentDTO != null) {
        checkDocumentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCheckDocument_argsStandardSchemeFactory implements SchemeFactory {
      public queryCheckDocument_argsStandardScheme getScheme() {
        return new queryCheckDocument_argsStandardScheme();
      }
    }

    private static class queryCheckDocument_argsStandardScheme extends StandardScheme<queryCheckDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCheckDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_DOCUMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkDocumentDTO = new CheckDocumentDTO();
                struct.checkDocumentDTO.read(iprot);
                struct.setCheckDocumentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCheckDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkDocumentDTO != null) {
          oprot.writeFieldBegin(CHECK_DOCUMENT_DTO_FIELD_DESC);
          struct.checkDocumentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCheckDocument_argsTupleSchemeFactory implements SchemeFactory {
      public queryCheckDocument_argsTupleScheme getScheme() {
        return new queryCheckDocument_argsTupleScheme();
      }
    }

    private static class queryCheckDocument_argsTupleScheme extends TupleScheme<queryCheckDocument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckDocumentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckDocumentDTO()) {
          struct.checkDocumentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkDocumentDTO = new CheckDocumentDTO();
          struct.checkDocumentDTO.read(iprot);
          struct.setCheckDocumentDTOIsSet(true);
        }
      }
    }

  }

  public static class queryCheckDocument_result implements org.apache.thrift.TBase<queryCheckDocument_result, queryCheckDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCheckDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCheckDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCheckDocument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCheckDocument_resultTupleSchemeFactory());
    }

    public List<CheckDocumentDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCheckDocument_result.class, metaDataMap);
    }

    public queryCheckDocument_result() {
    }

    public queryCheckDocument_result(
      List<CheckDocumentDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCheckDocument_result(queryCheckDocument_result other) {
      if (other.isSetSuccess()) {
        List<CheckDocumentDTO> __this__success = new ArrayList<CheckDocumentDTO>(other.success.size());
        for (CheckDocumentDTO other_element : other.success) {
          __this__success.add(new CheckDocumentDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCheckDocument_result deepCopy() {
      return new queryCheckDocument_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CheckDocumentDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CheckDocumentDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CheckDocumentDTO>();
      }
      this.success.add(elem);
    }

    public List<CheckDocumentDTO> getSuccess() {
      return this.success;
    }

    public queryCheckDocument_result setSuccess(List<CheckDocumentDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CheckDocumentDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCheckDocument_result)
        return this.equals((queryCheckDocument_result)that);
      return false;
    }

    public boolean equals(queryCheckDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCheckDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCheckDocument_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCheckDocument_resultStandardSchemeFactory implements SchemeFactory {
      public queryCheckDocument_resultStandardScheme getScheme() {
        return new queryCheckDocument_resultStandardScheme();
      }
    }

    private static class queryCheckDocument_resultStandardScheme extends StandardScheme<queryCheckDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCheckDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list628 = iprot.readListBegin();
                  struct.success = new ArrayList<CheckDocumentDTO>(_list628.size);
                  CheckDocumentDTO _elem629;
                  for (int _i630 = 0; _i630 < _list628.size; ++_i630)
                  {
                    _elem629 = new CheckDocumentDTO();
                    _elem629.read(iprot);
                    struct.success.add(_elem629);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCheckDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CheckDocumentDTO _iter631 : struct.success)
            {
              _iter631.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCheckDocument_resultTupleSchemeFactory implements SchemeFactory {
      public queryCheckDocument_resultTupleScheme getScheme() {
        return new queryCheckDocument_resultTupleScheme();
      }
    }

    private static class queryCheckDocument_resultTupleScheme extends TupleScheme<queryCheckDocument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CheckDocumentDTO _iter632 : struct.success)
            {
              _iter632.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list633 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CheckDocumentDTO>(_list633.size);
            CheckDocumentDTO _elem634;
            for (int _i635 = 0; _i635 < _list633.size; ++_i635)
            {
              _elem634 = new CheckDocumentDTO();
              _elem634.read(iprot);
              struct.success.add(_elem634);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentTotal_args implements org.apache.thrift.TBase<getCheckDocumentTotal_args, getCheckDocumentTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentTotal_args");

    private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentTotal_argsTupleSchemeFactory());
    }

    public CheckDocumentDTO checkDocumentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_DOCUMENT_DTO((short)1, "checkDocumentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_DOCUMENT_DTO
            return CHECK_DOCUMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_DOCUMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentTotal_args.class, metaDataMap);
    }

    public getCheckDocumentTotal_args() {
    }

    public getCheckDocumentTotal_args(
      CheckDocumentDTO checkDocumentDTO)
    {
      this();
      this.checkDocumentDTO = checkDocumentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentTotal_args(getCheckDocumentTotal_args other) {
      if (other.isSetCheckDocumentDTO()) {
        this.checkDocumentDTO = new CheckDocumentDTO(other.checkDocumentDTO);
      }
    }

    public getCheckDocumentTotal_args deepCopy() {
      return new getCheckDocumentTotal_args(this);
    }

    @Override
    public void clear() {
      this.checkDocumentDTO = null;
    }

    public CheckDocumentDTO getCheckDocumentDTO() {
      return this.checkDocumentDTO;
    }

    public getCheckDocumentTotal_args setCheckDocumentDTO(CheckDocumentDTO checkDocumentDTO) {
      this.checkDocumentDTO = checkDocumentDTO;
      return this;
    }

    public void unsetCheckDocumentDTO() {
      this.checkDocumentDTO = null;
    }

    /** Returns true if field checkDocumentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckDocumentDTO() {
      return this.checkDocumentDTO != null;
    }

    public void setCheckDocumentDTOIsSet(boolean value) {
      if (!value) {
        this.checkDocumentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        if (value == null) {
          unsetCheckDocumentDTO();
        } else {
          setCheckDocumentDTO((CheckDocumentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return getCheckDocumentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return isSetCheckDocumentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentTotal_args)
        return this.equals((getCheckDocumentTotal_args)that);
      return false;
    }

    public boolean equals(getCheckDocumentTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_checkDocumentDTO = true && this.isSetCheckDocumentDTO();
      boolean that_present_checkDocumentDTO = true && that.isSetCheckDocumentDTO();
      if (this_present_checkDocumentDTO || that_present_checkDocumentDTO) {
        if (!(this_present_checkDocumentDTO && that_present_checkDocumentDTO))
          return false;
        if (!this.checkDocumentDTO.equals(that.checkDocumentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkDocumentDTO = true && (isSetCheckDocumentDTO());
      list.add(present_checkDocumentDTO);
      if (present_checkDocumentDTO)
        list.add(checkDocumentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckDocumentDTO()).compareTo(other.isSetCheckDocumentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckDocumentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentDTO, other.checkDocumentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentTotal_args(");
      boolean first = true;

      sb.append("checkDocumentDTO:");
      if (this.checkDocumentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkDocumentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkDocumentDTO != null) {
        checkDocumentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentTotal_argsStandardScheme getScheme() {
        return new getCheckDocumentTotal_argsStandardScheme();
      }
    }

    private static class getCheckDocumentTotal_argsStandardScheme extends StandardScheme<getCheckDocumentTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_DOCUMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkDocumentDTO = new CheckDocumentDTO();
                struct.checkDocumentDTO.read(iprot);
                struct.setCheckDocumentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkDocumentDTO != null) {
          oprot.writeFieldBegin(CHECK_DOCUMENT_DTO_FIELD_DESC);
          struct.checkDocumentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentTotal_argsTupleScheme getScheme() {
        return new getCheckDocumentTotal_argsTupleScheme();
      }
    }

    private static class getCheckDocumentTotal_argsTupleScheme extends TupleScheme<getCheckDocumentTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckDocumentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckDocumentDTO()) {
          struct.checkDocumentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkDocumentDTO = new CheckDocumentDTO();
          struct.checkDocumentDTO.read(iprot);
          struct.setCheckDocumentDTOIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentTotal_result implements org.apache.thrift.TBase<getCheckDocumentTotal_result, getCheckDocumentTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentTotal_result.class, metaDataMap);
    }

    public getCheckDocumentTotal_result() {
    }

    public getCheckDocumentTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentTotal_result(getCheckDocumentTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCheckDocumentTotal_result deepCopy() {
      return new getCheckDocumentTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCheckDocumentTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentTotal_result)
        return this.equals((getCheckDocumentTotal_result)that);
      return false;
    }

    public boolean equals(getCheckDocumentTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentTotal_resultStandardScheme getScheme() {
        return new getCheckDocumentTotal_resultStandardScheme();
      }
    }

    private static class getCheckDocumentTotal_resultStandardScheme extends StandardScheme<getCheckDocumentTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentTotal_resultTupleScheme getScheme() {
        return new getCheckDocumentTotal_resultTupleScheme();
      }
    }

    private static class getCheckDocumentTotal_resultTupleScheme extends TupleScheme<getCheckDocumentTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addCheckDocument_args implements org.apache.thrift.TBase<addCheckDocument_args, addCheckDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCheckDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCheckDocument_args");

    private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCheckDocument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCheckDocument_argsTupleSchemeFactory());
    }

    public CheckDocumentDTO checkDocumentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_DOCUMENT_DTO((short)1, "checkDocumentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_DOCUMENT_DTO
            return CHECK_DOCUMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_DOCUMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCheckDocument_args.class, metaDataMap);
    }

    public addCheckDocument_args() {
    }

    public addCheckDocument_args(
      CheckDocumentDTO checkDocumentDTO)
    {
      this();
      this.checkDocumentDTO = checkDocumentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCheckDocument_args(addCheckDocument_args other) {
      if (other.isSetCheckDocumentDTO()) {
        this.checkDocumentDTO = new CheckDocumentDTO(other.checkDocumentDTO);
      }
    }

    public addCheckDocument_args deepCopy() {
      return new addCheckDocument_args(this);
    }

    @Override
    public void clear() {
      this.checkDocumentDTO = null;
    }

    public CheckDocumentDTO getCheckDocumentDTO() {
      return this.checkDocumentDTO;
    }

    public addCheckDocument_args setCheckDocumentDTO(CheckDocumentDTO checkDocumentDTO) {
      this.checkDocumentDTO = checkDocumentDTO;
      return this;
    }

    public void unsetCheckDocumentDTO() {
      this.checkDocumentDTO = null;
    }

    /** Returns true if field checkDocumentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckDocumentDTO() {
      return this.checkDocumentDTO != null;
    }

    public void setCheckDocumentDTOIsSet(boolean value) {
      if (!value) {
        this.checkDocumentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        if (value == null) {
          unsetCheckDocumentDTO();
        } else {
          setCheckDocumentDTO((CheckDocumentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return getCheckDocumentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return isSetCheckDocumentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCheckDocument_args)
        return this.equals((addCheckDocument_args)that);
      return false;
    }

    public boolean equals(addCheckDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_checkDocumentDTO = true && this.isSetCheckDocumentDTO();
      boolean that_present_checkDocumentDTO = true && that.isSetCheckDocumentDTO();
      if (this_present_checkDocumentDTO || that_present_checkDocumentDTO) {
        if (!(this_present_checkDocumentDTO && that_present_checkDocumentDTO))
          return false;
        if (!this.checkDocumentDTO.equals(that.checkDocumentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkDocumentDTO = true && (isSetCheckDocumentDTO());
      list.add(present_checkDocumentDTO);
      if (present_checkDocumentDTO)
        list.add(checkDocumentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCheckDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckDocumentDTO()).compareTo(other.isSetCheckDocumentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckDocumentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentDTO, other.checkDocumentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCheckDocument_args(");
      boolean first = true;

      sb.append("checkDocumentDTO:");
      if (this.checkDocumentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkDocumentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkDocumentDTO != null) {
        checkDocumentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCheckDocument_argsStandardSchemeFactory implements SchemeFactory {
      public addCheckDocument_argsStandardScheme getScheme() {
        return new addCheckDocument_argsStandardScheme();
      }
    }

    private static class addCheckDocument_argsStandardScheme extends StandardScheme<addCheckDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCheckDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_DOCUMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkDocumentDTO = new CheckDocumentDTO();
                struct.checkDocumentDTO.read(iprot);
                struct.setCheckDocumentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCheckDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkDocumentDTO != null) {
          oprot.writeFieldBegin(CHECK_DOCUMENT_DTO_FIELD_DESC);
          struct.checkDocumentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCheckDocument_argsTupleSchemeFactory implements SchemeFactory {
      public addCheckDocument_argsTupleScheme getScheme() {
        return new addCheckDocument_argsTupleScheme();
      }
    }

    private static class addCheckDocument_argsTupleScheme extends TupleScheme<addCheckDocument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckDocumentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckDocumentDTO()) {
          struct.checkDocumentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkDocumentDTO = new CheckDocumentDTO();
          struct.checkDocumentDTO.read(iprot);
          struct.setCheckDocumentDTOIsSet(true);
        }
      }
    }

  }

  public static class addCheckDocument_result implements org.apache.thrift.TBase<addCheckDocument_result, addCheckDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCheckDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCheckDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCheckDocument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCheckDocument_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCheckDocument_result.class, metaDataMap);
    }

    public addCheckDocument_result() {
    }

    public addCheckDocument_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCheckDocument_result(addCheckDocument_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addCheckDocument_result deepCopy() {
      return new addCheckDocument_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addCheckDocument_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCheckDocument_result)
        return this.equals((addCheckDocument_result)that);
      return false;
    }

    public boolean equals(addCheckDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCheckDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCheckDocument_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCheckDocument_resultStandardSchemeFactory implements SchemeFactory {
      public addCheckDocument_resultStandardScheme getScheme() {
        return new addCheckDocument_resultStandardScheme();
      }
    }

    private static class addCheckDocument_resultStandardScheme extends StandardScheme<addCheckDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCheckDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCheckDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCheckDocument_resultTupleSchemeFactory implements SchemeFactory {
      public addCheckDocument_resultTupleScheme getScheme() {
        return new addCheckDocument_resultTupleScheme();
      }
    }

    private static class addCheckDocument_resultTupleScheme extends TupleScheme<addCheckDocument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentById_args implements org.apache.thrift.TBase<getCheckDocumentById_args, getCheckDocumentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentById_args.class, metaDataMap);
    }

    public getCheckDocumentById_args() {
    }

    public getCheckDocumentById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentById_args(getCheckDocumentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getCheckDocumentById_args deepCopy() {
      return new getCheckDocumentById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getCheckDocumentById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentById_args)
        return this.equals((getCheckDocumentById_args)that);
      return false;
    }

    public boolean equals(getCheckDocumentById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentById_argsStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentById_argsStandardScheme getScheme() {
        return new getCheckDocumentById_argsStandardScheme();
      }
    }

    private static class getCheckDocumentById_argsStandardScheme extends StandardScheme<getCheckDocumentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentById_argsTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentById_argsTupleScheme getScheme() {
        return new getCheckDocumentById_argsTupleScheme();
      }
    }

    private static class getCheckDocumentById_argsTupleScheme extends TupleScheme<getCheckDocumentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentById_result implements org.apache.thrift.TBase<getCheckDocumentById_result, getCheckDocumentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentById_resultTupleSchemeFactory());
    }

    public CheckDocumentDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentById_result.class, metaDataMap);
    }

    public getCheckDocumentById_result() {
    }

    public getCheckDocumentById_result(
      CheckDocumentDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentById_result(getCheckDocumentById_result other) {
      if (other.isSetSuccess()) {
        this.success = new CheckDocumentDTO(other.success);
      }
    }

    public getCheckDocumentById_result deepCopy() {
      return new getCheckDocumentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CheckDocumentDTO getSuccess() {
      return this.success;
    }

    public getCheckDocumentById_result setSuccess(CheckDocumentDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CheckDocumentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentById_result)
        return this.equals((getCheckDocumentById_result)that);
      return false;
    }

    public boolean equals(getCheckDocumentById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentById_resultStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentById_resultStandardScheme getScheme() {
        return new getCheckDocumentById_resultStandardScheme();
      }
    }

    private static class getCheckDocumentById_resultStandardScheme extends StandardScheme<getCheckDocumentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CheckDocumentDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentById_resultTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentById_resultTupleScheme getScheme() {
        return new getCheckDocumentById_resultTupleScheme();
      }
    }

    private static class getCheckDocumentById_resultTupleScheme extends TupleScheme<getCheckDocumentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CheckDocumentDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentByProjectId_args implements org.apache.thrift.TBase<getCheckDocumentByProjectId_args, getCheckDocumentByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentByProjectId_args.class, metaDataMap);
    }

    public getCheckDocumentByProjectId_args() {
    }

    public getCheckDocumentByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentByProjectId_args(getCheckDocumentByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getCheckDocumentByProjectId_args deepCopy() {
      return new getCheckDocumentByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getCheckDocumentByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentByProjectId_args)
        return this.equals((getCheckDocumentByProjectId_args)that);
      return false;
    }

    public boolean equals(getCheckDocumentByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentByProjectId_argsStandardScheme getScheme() {
        return new getCheckDocumentByProjectId_argsStandardScheme();
      }
    }

    private static class getCheckDocumentByProjectId_argsStandardScheme extends StandardScheme<getCheckDocumentByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentByProjectId_argsTupleScheme getScheme() {
        return new getCheckDocumentByProjectId_argsTupleScheme();
      }
    }

    private static class getCheckDocumentByProjectId_argsTupleScheme extends TupleScheme<getCheckDocumentByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentByProjectId_result implements org.apache.thrift.TBase<getCheckDocumentByProjectId_result, getCheckDocumentByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentByProjectId_resultTupleSchemeFactory());
    }

    public CheckDocumentDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentByProjectId_result.class, metaDataMap);
    }

    public getCheckDocumentByProjectId_result() {
    }

    public getCheckDocumentByProjectId_result(
      CheckDocumentDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentByProjectId_result(getCheckDocumentByProjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new CheckDocumentDTO(other.success);
      }
    }

    public getCheckDocumentByProjectId_result deepCopy() {
      return new getCheckDocumentByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CheckDocumentDTO getSuccess() {
      return this.success;
    }

    public getCheckDocumentByProjectId_result setSuccess(CheckDocumentDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CheckDocumentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentByProjectId_result)
        return this.equals((getCheckDocumentByProjectId_result)that);
      return false;
    }

    public boolean equals(getCheckDocumentByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentByProjectId_resultStandardScheme getScheme() {
        return new getCheckDocumentByProjectId_resultStandardScheme();
      }
    }

    private static class getCheckDocumentByProjectId_resultStandardScheme extends StandardScheme<getCheckDocumentByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CheckDocumentDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentByProjectId_resultTupleScheme getScheme() {
        return new getCheckDocumentByProjectId_resultTupleScheme();
      }
    }

    private static class getCheckDocumentByProjectId_resultTupleScheme extends TupleScheme<getCheckDocumentByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CheckDocumentDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateCheckDocument_args implements org.apache.thrift.TBase<updateCheckDocument_args, updateCheckDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCheckDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCheckDocument_args");

    private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCheckDocument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCheckDocument_argsTupleSchemeFactory());
    }

    public CheckDocumentDTO checkDocumentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_DOCUMENT_DTO((short)1, "checkDocumentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_DOCUMENT_DTO
            return CHECK_DOCUMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_DOCUMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCheckDocument_args.class, metaDataMap);
    }

    public updateCheckDocument_args() {
    }

    public updateCheckDocument_args(
      CheckDocumentDTO checkDocumentDTO)
    {
      this();
      this.checkDocumentDTO = checkDocumentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCheckDocument_args(updateCheckDocument_args other) {
      if (other.isSetCheckDocumentDTO()) {
        this.checkDocumentDTO = new CheckDocumentDTO(other.checkDocumentDTO);
      }
    }

    public updateCheckDocument_args deepCopy() {
      return new updateCheckDocument_args(this);
    }

    @Override
    public void clear() {
      this.checkDocumentDTO = null;
    }

    public CheckDocumentDTO getCheckDocumentDTO() {
      return this.checkDocumentDTO;
    }

    public updateCheckDocument_args setCheckDocumentDTO(CheckDocumentDTO checkDocumentDTO) {
      this.checkDocumentDTO = checkDocumentDTO;
      return this;
    }

    public void unsetCheckDocumentDTO() {
      this.checkDocumentDTO = null;
    }

    /** Returns true if field checkDocumentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckDocumentDTO() {
      return this.checkDocumentDTO != null;
    }

    public void setCheckDocumentDTOIsSet(boolean value) {
      if (!value) {
        this.checkDocumentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        if (value == null) {
          unsetCheckDocumentDTO();
        } else {
          setCheckDocumentDTO((CheckDocumentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return getCheckDocumentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return isSetCheckDocumentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCheckDocument_args)
        return this.equals((updateCheckDocument_args)that);
      return false;
    }

    public boolean equals(updateCheckDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_checkDocumentDTO = true && this.isSetCheckDocumentDTO();
      boolean that_present_checkDocumentDTO = true && that.isSetCheckDocumentDTO();
      if (this_present_checkDocumentDTO || that_present_checkDocumentDTO) {
        if (!(this_present_checkDocumentDTO && that_present_checkDocumentDTO))
          return false;
        if (!this.checkDocumentDTO.equals(that.checkDocumentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkDocumentDTO = true && (isSetCheckDocumentDTO());
      list.add(present_checkDocumentDTO);
      if (present_checkDocumentDTO)
        list.add(checkDocumentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCheckDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckDocumentDTO()).compareTo(other.isSetCheckDocumentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckDocumentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentDTO, other.checkDocumentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCheckDocument_args(");
      boolean first = true;

      sb.append("checkDocumentDTO:");
      if (this.checkDocumentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkDocumentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkDocumentDTO != null) {
        checkDocumentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCheckDocument_argsStandardSchemeFactory implements SchemeFactory {
      public updateCheckDocument_argsStandardScheme getScheme() {
        return new updateCheckDocument_argsStandardScheme();
      }
    }

    private static class updateCheckDocument_argsStandardScheme extends StandardScheme<updateCheckDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCheckDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_DOCUMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkDocumentDTO = new CheckDocumentDTO();
                struct.checkDocumentDTO.read(iprot);
                struct.setCheckDocumentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCheckDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkDocumentDTO != null) {
          oprot.writeFieldBegin(CHECK_DOCUMENT_DTO_FIELD_DESC);
          struct.checkDocumentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCheckDocument_argsTupleSchemeFactory implements SchemeFactory {
      public updateCheckDocument_argsTupleScheme getScheme() {
        return new updateCheckDocument_argsTupleScheme();
      }
    }

    private static class updateCheckDocument_argsTupleScheme extends TupleScheme<updateCheckDocument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckDocumentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckDocumentDTO()) {
          struct.checkDocumentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkDocumentDTO = new CheckDocumentDTO();
          struct.checkDocumentDTO.read(iprot);
          struct.setCheckDocumentDTOIsSet(true);
        }
      }
    }

  }

  public static class updateCheckDocument_result implements org.apache.thrift.TBase<updateCheckDocument_result, updateCheckDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCheckDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCheckDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCheckDocument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCheckDocument_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCheckDocument_result.class, metaDataMap);
    }

    public updateCheckDocument_result() {
    }

    public updateCheckDocument_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCheckDocument_result(updateCheckDocument_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateCheckDocument_result deepCopy() {
      return new updateCheckDocument_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateCheckDocument_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCheckDocument_result)
        return this.equals((updateCheckDocument_result)that);
      return false;
    }

    public boolean equals(updateCheckDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCheckDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCheckDocument_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCheckDocument_resultStandardSchemeFactory implements SchemeFactory {
      public updateCheckDocument_resultStandardScheme getScheme() {
        return new updateCheckDocument_resultStandardScheme();
      }
    }

    private static class updateCheckDocument_resultStandardScheme extends StandardScheme<updateCheckDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCheckDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCheckDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCheckDocument_resultTupleSchemeFactory implements SchemeFactory {
      public updateCheckDocument_resultTupleScheme getScheme() {
        return new updateCheckDocument_resultTupleScheme();
      }
    }

    private static class updateCheckDocument_resultTupleScheme extends TupleScheme<updateCheckDocument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reCheckCheckDocument_args implements org.apache.thrift.TBase<reCheckCheckDocument_args, reCheckCheckDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<reCheckCheckDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reCheckCheckDocument_args");

    private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reCheckCheckDocument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reCheckCheckDocument_argsTupleSchemeFactory());
    }

    public CheckDocumentDTO checkDocumentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_DOCUMENT_DTO((short)1, "checkDocumentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_DOCUMENT_DTO
            return CHECK_DOCUMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_DOCUMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reCheckCheckDocument_args.class, metaDataMap);
    }

    public reCheckCheckDocument_args() {
    }

    public reCheckCheckDocument_args(
      CheckDocumentDTO checkDocumentDTO)
    {
      this();
      this.checkDocumentDTO = checkDocumentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reCheckCheckDocument_args(reCheckCheckDocument_args other) {
      if (other.isSetCheckDocumentDTO()) {
        this.checkDocumentDTO = new CheckDocumentDTO(other.checkDocumentDTO);
      }
    }

    public reCheckCheckDocument_args deepCopy() {
      return new reCheckCheckDocument_args(this);
    }

    @Override
    public void clear() {
      this.checkDocumentDTO = null;
    }

    public CheckDocumentDTO getCheckDocumentDTO() {
      return this.checkDocumentDTO;
    }

    public reCheckCheckDocument_args setCheckDocumentDTO(CheckDocumentDTO checkDocumentDTO) {
      this.checkDocumentDTO = checkDocumentDTO;
      return this;
    }

    public void unsetCheckDocumentDTO() {
      this.checkDocumentDTO = null;
    }

    /** Returns true if field checkDocumentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckDocumentDTO() {
      return this.checkDocumentDTO != null;
    }

    public void setCheckDocumentDTOIsSet(boolean value) {
      if (!value) {
        this.checkDocumentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        if (value == null) {
          unsetCheckDocumentDTO();
        } else {
          setCheckDocumentDTO((CheckDocumentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return getCheckDocumentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_DOCUMENT_DTO:
        return isSetCheckDocumentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reCheckCheckDocument_args)
        return this.equals((reCheckCheckDocument_args)that);
      return false;
    }

    public boolean equals(reCheckCheckDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_checkDocumentDTO = true && this.isSetCheckDocumentDTO();
      boolean that_present_checkDocumentDTO = true && that.isSetCheckDocumentDTO();
      if (this_present_checkDocumentDTO || that_present_checkDocumentDTO) {
        if (!(this_present_checkDocumentDTO && that_present_checkDocumentDTO))
          return false;
        if (!this.checkDocumentDTO.equals(that.checkDocumentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkDocumentDTO = true && (isSetCheckDocumentDTO());
      list.add(present_checkDocumentDTO);
      if (present_checkDocumentDTO)
        list.add(checkDocumentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(reCheckCheckDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckDocumentDTO()).compareTo(other.isSetCheckDocumentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckDocumentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentDTO, other.checkDocumentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reCheckCheckDocument_args(");
      boolean first = true;

      sb.append("checkDocumentDTO:");
      if (this.checkDocumentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkDocumentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkDocumentDTO != null) {
        checkDocumentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reCheckCheckDocument_argsStandardSchemeFactory implements SchemeFactory {
      public reCheckCheckDocument_argsStandardScheme getScheme() {
        return new reCheckCheckDocument_argsStandardScheme();
      }
    }

    private static class reCheckCheckDocument_argsStandardScheme extends StandardScheme<reCheckCheckDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reCheckCheckDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_DOCUMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkDocumentDTO = new CheckDocumentDTO();
                struct.checkDocumentDTO.read(iprot);
                struct.setCheckDocumentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reCheckCheckDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkDocumentDTO != null) {
          oprot.writeFieldBegin(CHECK_DOCUMENT_DTO_FIELD_DESC);
          struct.checkDocumentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reCheckCheckDocument_argsTupleSchemeFactory implements SchemeFactory {
      public reCheckCheckDocument_argsTupleScheme getScheme() {
        return new reCheckCheckDocument_argsTupleScheme();
      }
    }

    private static class reCheckCheckDocument_argsTupleScheme extends TupleScheme<reCheckCheckDocument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reCheckCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckDocumentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckDocumentDTO()) {
          struct.checkDocumentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reCheckCheckDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkDocumentDTO = new CheckDocumentDTO();
          struct.checkDocumentDTO.read(iprot);
          struct.setCheckDocumentDTOIsSet(true);
        }
      }
    }

  }

  public static class reCheckCheckDocument_result implements org.apache.thrift.TBase<reCheckCheckDocument_result, reCheckCheckDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<reCheckCheckDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reCheckCheckDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reCheckCheckDocument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reCheckCheckDocument_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reCheckCheckDocument_result.class, metaDataMap);
    }

    public reCheckCheckDocument_result() {
    }

    public reCheckCheckDocument_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reCheckCheckDocument_result(reCheckCheckDocument_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reCheckCheckDocument_result deepCopy() {
      return new reCheckCheckDocument_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public reCheckCheckDocument_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reCheckCheckDocument_result)
        return this.equals((reCheckCheckDocument_result)that);
      return false;
    }

    public boolean equals(reCheckCheckDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(reCheckCheckDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reCheckCheckDocument_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reCheckCheckDocument_resultStandardSchemeFactory implements SchemeFactory {
      public reCheckCheckDocument_resultStandardScheme getScheme() {
        return new reCheckCheckDocument_resultStandardScheme();
      }
    }

    private static class reCheckCheckDocument_resultStandardScheme extends StandardScheme<reCheckCheckDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reCheckCheckDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reCheckCheckDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reCheckCheckDocument_resultTupleSchemeFactory implements SchemeFactory {
      public reCheckCheckDocument_resultTupleScheme getScheme() {
        return new reCheckCheckDocument_resultTupleScheme();
      }
    }

    private static class reCheckCheckDocument_resultTupleScheme extends TupleScheme<reCheckCheckDocument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reCheckCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reCheckCheckDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCheckLitigation_args implements org.apache.thrift.TBase<queryCheckLitigation_args, queryCheckLitigation_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCheckLitigation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCheckLitigation_args");

    private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCheckLitigation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCheckLitigation_argsTupleSchemeFactory());
    }

    public CheckLitigationDTO checkLitigationDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_LITIGATION_DTO((short)1, "checkLitigationDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_LITIGATION_DTO
            return CHECK_LITIGATION_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_LITIGATION_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckLitigationDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCheckLitigation_args.class, metaDataMap);
    }

    public queryCheckLitigation_args() {
    }

    public queryCheckLitigation_args(
      CheckLitigationDTO checkLitigationDTO)
    {
      this();
      this.checkLitigationDTO = checkLitigationDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCheckLitigation_args(queryCheckLitigation_args other) {
      if (other.isSetCheckLitigationDTO()) {
        this.checkLitigationDTO = new CheckLitigationDTO(other.checkLitigationDTO);
      }
    }

    public queryCheckLitigation_args deepCopy() {
      return new queryCheckLitigation_args(this);
    }

    @Override
    public void clear() {
      this.checkLitigationDTO = null;
    }

    public CheckLitigationDTO getCheckLitigationDTO() {
      return this.checkLitigationDTO;
    }

    public queryCheckLitigation_args setCheckLitigationDTO(CheckLitigationDTO checkLitigationDTO) {
      this.checkLitigationDTO = checkLitigationDTO;
      return this;
    }

    public void unsetCheckLitigationDTO() {
      this.checkLitigationDTO = null;
    }

    /** Returns true if field checkLitigationDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckLitigationDTO() {
      return this.checkLitigationDTO != null;
    }

    public void setCheckLitigationDTOIsSet(boolean value) {
      if (!value) {
        this.checkLitigationDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        if (value == null) {
          unsetCheckLitigationDTO();
        } else {
          setCheckLitigationDTO((CheckLitigationDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        return getCheckLitigationDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_LITIGATION_DTO:
        return isSetCheckLitigationDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCheckLitigation_args)
        return this.equals((queryCheckLitigation_args)that);
      return false;
    }

    public boolean equals(queryCheckLitigation_args that) {
      if (that == null)
        return false;

      boolean this_present_checkLitigationDTO = true && this.isSetCheckLitigationDTO();
      boolean that_present_checkLitigationDTO = true && that.isSetCheckLitigationDTO();
      if (this_present_checkLitigationDTO || that_present_checkLitigationDTO) {
        if (!(this_present_checkLitigationDTO && that_present_checkLitigationDTO))
          return false;
        if (!this.checkLitigationDTO.equals(that.checkLitigationDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkLitigationDTO = true && (isSetCheckLitigationDTO());
      list.add(present_checkLitigationDTO);
      if (present_checkLitigationDTO)
        list.add(checkLitigationDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCheckLitigation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckLitigationDTO()).compareTo(other.isSetCheckLitigationDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckLitigationDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationDTO, other.checkLitigationDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCheckLitigation_args(");
      boolean first = true;

      sb.append("checkLitigationDTO:");
      if (this.checkLitigationDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkLitigationDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkLitigationDTO != null) {
        checkLitigationDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCheckLitigation_argsStandardSchemeFactory implements SchemeFactory {
      public queryCheckLitigation_argsStandardScheme getScheme() {
        return new queryCheckLitigation_argsStandardScheme();
      }
    }

    private static class queryCheckLitigation_argsStandardScheme extends StandardScheme<queryCheckLitigation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCheckLitigation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_LITIGATION_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkLitigationDTO = new CheckLitigationDTO();
                struct.checkLitigationDTO.read(iprot);
                struct.setCheckLitigationDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCheckLitigation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkLitigationDTO != null) {
          oprot.writeFieldBegin(CHECK_LITIGATION_DTO_FIELD_DESC);
          struct.checkLitigationDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCheckLitigation_argsTupleSchemeFactory implements SchemeFactory {
      public queryCheckLitigation_argsTupleScheme getScheme() {
        return new queryCheckLitigation_argsTupleScheme();
      }
    }

    private static class queryCheckLitigation_argsTupleScheme extends TupleScheme<queryCheckLitigation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCheckLitigation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckLitigationDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckLitigationDTO()) {
          struct.checkLitigationDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCheckLitigation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkLitigationDTO = new CheckLitigationDTO();
          struct.checkLitigationDTO.read(iprot);
          struct.setCheckLitigationDTOIsSet(true);
        }
      }
    }

  }

  public static class queryCheckLitigation_result implements org.apache.thrift.TBase<queryCheckLitigation_result, queryCheckLitigation_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCheckLitigation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCheckLitigation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCheckLitigation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCheckLitigation_resultTupleSchemeFactory());
    }

    public List<CheckLitigationDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckLitigationDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCheckLitigation_result.class, metaDataMap);
    }

    public queryCheckLitigation_result() {
    }

    public queryCheckLitigation_result(
      List<CheckLitigationDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCheckLitigation_result(queryCheckLitigation_result other) {
      if (other.isSetSuccess()) {
        List<CheckLitigationDTO> __this__success = new ArrayList<CheckLitigationDTO>(other.success.size());
        for (CheckLitigationDTO other_element : other.success) {
          __this__success.add(new CheckLitigationDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCheckLitigation_result deepCopy() {
      return new queryCheckLitigation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CheckLitigationDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CheckLitigationDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CheckLitigationDTO>();
      }
      this.success.add(elem);
    }

    public List<CheckLitigationDTO> getSuccess() {
      return this.success;
    }

    public queryCheckLitigation_result setSuccess(List<CheckLitigationDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CheckLitigationDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCheckLitigation_result)
        return this.equals((queryCheckLitigation_result)that);
      return false;
    }

    public boolean equals(queryCheckLitigation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCheckLitigation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCheckLitigation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCheckLitigation_resultStandardSchemeFactory implements SchemeFactory {
      public queryCheckLitigation_resultStandardScheme getScheme() {
        return new queryCheckLitigation_resultStandardScheme();
      }
    }

    private static class queryCheckLitigation_resultStandardScheme extends StandardScheme<queryCheckLitigation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCheckLitigation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list636 = iprot.readListBegin();
                  struct.success = new ArrayList<CheckLitigationDTO>(_list636.size);
                  CheckLitigationDTO _elem637;
                  for (int _i638 = 0; _i638 < _list636.size; ++_i638)
                  {
                    _elem637 = new CheckLitigationDTO();
                    _elem637.read(iprot);
                    struct.success.add(_elem637);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCheckLitigation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CheckLitigationDTO _iter639 : struct.success)
            {
              _iter639.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCheckLitigation_resultTupleSchemeFactory implements SchemeFactory {
      public queryCheckLitigation_resultTupleScheme getScheme() {
        return new queryCheckLitigation_resultTupleScheme();
      }
    }

    private static class queryCheckLitigation_resultTupleScheme extends TupleScheme<queryCheckLitigation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCheckLitigation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CheckLitigationDTO _iter640 : struct.success)
            {
              _iter640.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCheckLitigation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list641 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CheckLitigationDTO>(_list641.size);
            CheckLitigationDTO _elem642;
            for (int _i643 = 0; _i643 < _list641.size; ++_i643)
            {
              _elem642 = new CheckLitigationDTO();
              _elem642.read(iprot);
              struct.success.add(_elem642);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCheckLitigationTotal_args implements org.apache.thrift.TBase<getCheckLitigationTotal_args, getCheckLitigationTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckLitigationTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckLitigationTotal_args");

    private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckLitigationTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckLitigationTotal_argsTupleSchemeFactory());
    }

    public CheckLitigationDTO checkLitigationDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_LITIGATION_DTO((short)1, "checkLitigationDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_LITIGATION_DTO
            return CHECK_LITIGATION_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_LITIGATION_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckLitigationDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckLitigationTotal_args.class, metaDataMap);
    }

    public getCheckLitigationTotal_args() {
    }

    public getCheckLitigationTotal_args(
      CheckLitigationDTO checkLitigationDTO)
    {
      this();
      this.checkLitigationDTO = checkLitigationDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckLitigationTotal_args(getCheckLitigationTotal_args other) {
      if (other.isSetCheckLitigationDTO()) {
        this.checkLitigationDTO = new CheckLitigationDTO(other.checkLitigationDTO);
      }
    }

    public getCheckLitigationTotal_args deepCopy() {
      return new getCheckLitigationTotal_args(this);
    }

    @Override
    public void clear() {
      this.checkLitigationDTO = null;
    }

    public CheckLitigationDTO getCheckLitigationDTO() {
      return this.checkLitigationDTO;
    }

    public getCheckLitigationTotal_args setCheckLitigationDTO(CheckLitigationDTO checkLitigationDTO) {
      this.checkLitigationDTO = checkLitigationDTO;
      return this;
    }

    public void unsetCheckLitigationDTO() {
      this.checkLitigationDTO = null;
    }

    /** Returns true if field checkLitigationDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckLitigationDTO() {
      return this.checkLitigationDTO != null;
    }

    public void setCheckLitigationDTOIsSet(boolean value) {
      if (!value) {
        this.checkLitigationDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        if (value == null) {
          unsetCheckLitigationDTO();
        } else {
          setCheckLitigationDTO((CheckLitigationDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        return getCheckLitigationDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_LITIGATION_DTO:
        return isSetCheckLitigationDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckLitigationTotal_args)
        return this.equals((getCheckLitigationTotal_args)that);
      return false;
    }

    public boolean equals(getCheckLitigationTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_checkLitigationDTO = true && this.isSetCheckLitigationDTO();
      boolean that_present_checkLitigationDTO = true && that.isSetCheckLitigationDTO();
      if (this_present_checkLitigationDTO || that_present_checkLitigationDTO) {
        if (!(this_present_checkLitigationDTO && that_present_checkLitigationDTO))
          return false;
        if (!this.checkLitigationDTO.equals(that.checkLitigationDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkLitigationDTO = true && (isSetCheckLitigationDTO());
      list.add(present_checkLitigationDTO);
      if (present_checkLitigationDTO)
        list.add(checkLitigationDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckLitigationTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckLitigationDTO()).compareTo(other.isSetCheckLitigationDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckLitigationDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationDTO, other.checkLitigationDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckLitigationTotal_args(");
      boolean first = true;

      sb.append("checkLitigationDTO:");
      if (this.checkLitigationDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkLitigationDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkLitigationDTO != null) {
        checkLitigationDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckLitigationTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getCheckLitigationTotal_argsStandardScheme getScheme() {
        return new getCheckLitigationTotal_argsStandardScheme();
      }
    }

    private static class getCheckLitigationTotal_argsStandardScheme extends StandardScheme<getCheckLitigationTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckLitigationTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_LITIGATION_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkLitigationDTO = new CheckLitigationDTO();
                struct.checkLitigationDTO.read(iprot);
                struct.setCheckLitigationDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckLitigationTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkLitigationDTO != null) {
          oprot.writeFieldBegin(CHECK_LITIGATION_DTO_FIELD_DESC);
          struct.checkLitigationDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckLitigationTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getCheckLitigationTotal_argsTupleScheme getScheme() {
        return new getCheckLitigationTotal_argsTupleScheme();
      }
    }

    private static class getCheckLitigationTotal_argsTupleScheme extends TupleScheme<getCheckLitigationTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckLitigationDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckLitigationDTO()) {
          struct.checkLitigationDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkLitigationDTO = new CheckLitigationDTO();
          struct.checkLitigationDTO.read(iprot);
          struct.setCheckLitigationDTOIsSet(true);
        }
      }
    }

  }

  public static class getCheckLitigationTotal_result implements org.apache.thrift.TBase<getCheckLitigationTotal_result, getCheckLitigationTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckLitigationTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckLitigationTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckLitigationTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckLitigationTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckLitigationTotal_result.class, metaDataMap);
    }

    public getCheckLitigationTotal_result() {
    }

    public getCheckLitigationTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckLitigationTotal_result(getCheckLitigationTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCheckLitigationTotal_result deepCopy() {
      return new getCheckLitigationTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCheckLitigationTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckLitigationTotal_result)
        return this.equals((getCheckLitigationTotal_result)that);
      return false;
    }

    public boolean equals(getCheckLitigationTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckLitigationTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckLitigationTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckLitigationTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getCheckLitigationTotal_resultStandardScheme getScheme() {
        return new getCheckLitigationTotal_resultStandardScheme();
      }
    }

    private static class getCheckLitigationTotal_resultStandardScheme extends StandardScheme<getCheckLitigationTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckLitigationTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckLitigationTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckLitigationTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getCheckLitigationTotal_resultTupleScheme getScheme() {
        return new getCheckLitigationTotal_resultTupleScheme();
      }
    }

    private static class getCheckLitigationTotal_resultTupleScheme extends TupleScheme<getCheckLitigationTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addCheckLitigation_args implements org.apache.thrift.TBase<addCheckLitigation_args, addCheckLitigation_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCheckLitigation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCheckLitigation_args");

    private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCheckLitigation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCheckLitigation_argsTupleSchemeFactory());
    }

    public CheckLitigationDTO checkLitigationDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_LITIGATION_DTO((short)1, "checkLitigationDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_LITIGATION_DTO
            return CHECK_LITIGATION_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_LITIGATION_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckLitigationDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCheckLitigation_args.class, metaDataMap);
    }

    public addCheckLitigation_args() {
    }

    public addCheckLitigation_args(
      CheckLitigationDTO checkLitigationDTO)
    {
      this();
      this.checkLitigationDTO = checkLitigationDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCheckLitigation_args(addCheckLitigation_args other) {
      if (other.isSetCheckLitigationDTO()) {
        this.checkLitigationDTO = new CheckLitigationDTO(other.checkLitigationDTO);
      }
    }

    public addCheckLitigation_args deepCopy() {
      return new addCheckLitigation_args(this);
    }

    @Override
    public void clear() {
      this.checkLitigationDTO = null;
    }

    public CheckLitigationDTO getCheckLitigationDTO() {
      return this.checkLitigationDTO;
    }

    public addCheckLitigation_args setCheckLitigationDTO(CheckLitigationDTO checkLitigationDTO) {
      this.checkLitigationDTO = checkLitigationDTO;
      return this;
    }

    public void unsetCheckLitigationDTO() {
      this.checkLitigationDTO = null;
    }

    /** Returns true if field checkLitigationDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckLitigationDTO() {
      return this.checkLitigationDTO != null;
    }

    public void setCheckLitigationDTOIsSet(boolean value) {
      if (!value) {
        this.checkLitigationDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        if (value == null) {
          unsetCheckLitigationDTO();
        } else {
          setCheckLitigationDTO((CheckLitigationDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        return getCheckLitigationDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_LITIGATION_DTO:
        return isSetCheckLitigationDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCheckLitigation_args)
        return this.equals((addCheckLitigation_args)that);
      return false;
    }

    public boolean equals(addCheckLitigation_args that) {
      if (that == null)
        return false;

      boolean this_present_checkLitigationDTO = true && this.isSetCheckLitigationDTO();
      boolean that_present_checkLitigationDTO = true && that.isSetCheckLitigationDTO();
      if (this_present_checkLitigationDTO || that_present_checkLitigationDTO) {
        if (!(this_present_checkLitigationDTO && that_present_checkLitigationDTO))
          return false;
        if (!this.checkLitigationDTO.equals(that.checkLitigationDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkLitigationDTO = true && (isSetCheckLitigationDTO());
      list.add(present_checkLitigationDTO);
      if (present_checkLitigationDTO)
        list.add(checkLitigationDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCheckLitigation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckLitigationDTO()).compareTo(other.isSetCheckLitigationDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckLitigationDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationDTO, other.checkLitigationDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCheckLitigation_args(");
      boolean first = true;

      sb.append("checkLitigationDTO:");
      if (this.checkLitigationDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkLitigationDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkLitigationDTO != null) {
        checkLitigationDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCheckLitigation_argsStandardSchemeFactory implements SchemeFactory {
      public addCheckLitigation_argsStandardScheme getScheme() {
        return new addCheckLitigation_argsStandardScheme();
      }
    }

    private static class addCheckLitigation_argsStandardScheme extends StandardScheme<addCheckLitigation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCheckLitigation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_LITIGATION_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkLitigationDTO = new CheckLitigationDTO();
                struct.checkLitigationDTO.read(iprot);
                struct.setCheckLitigationDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCheckLitigation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkLitigationDTO != null) {
          oprot.writeFieldBegin(CHECK_LITIGATION_DTO_FIELD_DESC);
          struct.checkLitigationDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCheckLitigation_argsTupleSchemeFactory implements SchemeFactory {
      public addCheckLitigation_argsTupleScheme getScheme() {
        return new addCheckLitigation_argsTupleScheme();
      }
    }

    private static class addCheckLitigation_argsTupleScheme extends TupleScheme<addCheckLitigation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCheckLitigation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckLitigationDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckLitigationDTO()) {
          struct.checkLitigationDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCheckLitigation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkLitigationDTO = new CheckLitigationDTO();
          struct.checkLitigationDTO.read(iprot);
          struct.setCheckLitigationDTOIsSet(true);
        }
      }
    }

  }

  public static class addCheckLitigation_result implements org.apache.thrift.TBase<addCheckLitigation_result, addCheckLitigation_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCheckLitigation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCheckLitigation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCheckLitigation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCheckLitigation_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCheckLitigation_result.class, metaDataMap);
    }

    public addCheckLitigation_result() {
    }

    public addCheckLitigation_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCheckLitigation_result(addCheckLitigation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addCheckLitigation_result deepCopy() {
      return new addCheckLitigation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addCheckLitigation_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCheckLitigation_result)
        return this.equals((addCheckLitigation_result)that);
      return false;
    }

    public boolean equals(addCheckLitigation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCheckLitigation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCheckLitigation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCheckLitigation_resultStandardSchemeFactory implements SchemeFactory {
      public addCheckLitigation_resultStandardScheme getScheme() {
        return new addCheckLitigation_resultStandardScheme();
      }
    }

    private static class addCheckLitigation_resultStandardScheme extends StandardScheme<addCheckLitigation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCheckLitigation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCheckLitigation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCheckLitigation_resultTupleSchemeFactory implements SchemeFactory {
      public addCheckLitigation_resultTupleScheme getScheme() {
        return new addCheckLitigation_resultTupleScheme();
      }
    }

    private static class addCheckLitigation_resultTupleScheme extends TupleScheme<addCheckLitigation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCheckLitigation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCheckLitigation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCheckLitigationById_args implements org.apache.thrift.TBase<getCheckLitigationById_args, getCheckLitigationById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckLitigationById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckLitigationById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckLitigationById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckLitigationById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckLitigationById_args.class, metaDataMap);
    }

    public getCheckLitigationById_args() {
    }

    public getCheckLitigationById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckLitigationById_args(getCheckLitigationById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getCheckLitigationById_args deepCopy() {
      return new getCheckLitigationById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getCheckLitigationById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckLitigationById_args)
        return this.equals((getCheckLitigationById_args)that);
      return false;
    }

    public boolean equals(getCheckLitigationById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckLitigationById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckLitigationById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckLitigationById_argsStandardSchemeFactory implements SchemeFactory {
      public getCheckLitigationById_argsStandardScheme getScheme() {
        return new getCheckLitigationById_argsStandardScheme();
      }
    }

    private static class getCheckLitigationById_argsStandardScheme extends StandardScheme<getCheckLitigationById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckLitigationById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckLitigationById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckLitigationById_argsTupleSchemeFactory implements SchemeFactory {
      public getCheckLitigationById_argsTupleScheme getScheme() {
        return new getCheckLitigationById_argsTupleScheme();
      }
    }

    private static class getCheckLitigationById_argsTupleScheme extends TupleScheme<getCheckLitigationById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getCheckLitigationById_result implements org.apache.thrift.TBase<getCheckLitigationById_result, getCheckLitigationById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckLitigationById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckLitigationById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckLitigationById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckLitigationById_resultTupleSchemeFactory());
    }

    public CheckLitigationDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckLitigationDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckLitigationById_result.class, metaDataMap);
    }

    public getCheckLitigationById_result() {
    }

    public getCheckLitigationById_result(
      CheckLitigationDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckLitigationById_result(getCheckLitigationById_result other) {
      if (other.isSetSuccess()) {
        this.success = new CheckLitigationDTO(other.success);
      }
    }

    public getCheckLitigationById_result deepCopy() {
      return new getCheckLitigationById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CheckLitigationDTO getSuccess() {
      return this.success;
    }

    public getCheckLitigationById_result setSuccess(CheckLitigationDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CheckLitigationDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckLitigationById_result)
        return this.equals((getCheckLitigationById_result)that);
      return false;
    }

    public boolean equals(getCheckLitigationById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckLitigationById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckLitigationById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckLitigationById_resultStandardSchemeFactory implements SchemeFactory {
      public getCheckLitigationById_resultStandardScheme getScheme() {
        return new getCheckLitigationById_resultStandardScheme();
      }
    }

    private static class getCheckLitigationById_resultStandardScheme extends StandardScheme<getCheckLitigationById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckLitigationById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CheckLitigationDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckLitigationById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckLitigationById_resultTupleSchemeFactory implements SchemeFactory {
      public getCheckLitigationById_resultTupleScheme getScheme() {
        return new getCheckLitigationById_resultTupleScheme();
      }
    }

    private static class getCheckLitigationById_resultTupleScheme extends TupleScheme<getCheckLitigationById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CheckLitigationDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCheckLitigationByProjectId_args implements org.apache.thrift.TBase<getCheckLitigationByProjectId_args, getCheckLitigationByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckLitigationByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckLitigationByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckLitigationByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckLitigationByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckLitigationByProjectId_args.class, metaDataMap);
    }

    public getCheckLitigationByProjectId_args() {
    }

    public getCheckLitigationByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckLitigationByProjectId_args(getCheckLitigationByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getCheckLitigationByProjectId_args deepCopy() {
      return new getCheckLitigationByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getCheckLitigationByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckLitigationByProjectId_args)
        return this.equals((getCheckLitigationByProjectId_args)that);
      return false;
    }

    public boolean equals(getCheckLitigationByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckLitigationByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckLitigationByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckLitigationByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getCheckLitigationByProjectId_argsStandardScheme getScheme() {
        return new getCheckLitigationByProjectId_argsStandardScheme();
      }
    }

    private static class getCheckLitigationByProjectId_argsStandardScheme extends StandardScheme<getCheckLitigationByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckLitigationByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckLitigationByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckLitigationByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getCheckLitigationByProjectId_argsTupleScheme getScheme() {
        return new getCheckLitigationByProjectId_argsTupleScheme();
      }
    }

    private static class getCheckLitigationByProjectId_argsTupleScheme extends TupleScheme<getCheckLitigationByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getCheckLitigationByProjectId_result implements org.apache.thrift.TBase<getCheckLitigationByProjectId_result, getCheckLitigationByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckLitigationByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckLitigationByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckLitigationByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckLitigationByProjectId_resultTupleSchemeFactory());
    }

    public CheckLitigationDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckLitigationDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckLitigationByProjectId_result.class, metaDataMap);
    }

    public getCheckLitigationByProjectId_result() {
    }

    public getCheckLitigationByProjectId_result(
      CheckLitigationDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckLitigationByProjectId_result(getCheckLitigationByProjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new CheckLitigationDTO(other.success);
      }
    }

    public getCheckLitigationByProjectId_result deepCopy() {
      return new getCheckLitigationByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CheckLitigationDTO getSuccess() {
      return this.success;
    }

    public getCheckLitigationByProjectId_result setSuccess(CheckLitigationDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CheckLitigationDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckLitigationByProjectId_result)
        return this.equals((getCheckLitigationByProjectId_result)that);
      return false;
    }

    public boolean equals(getCheckLitigationByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckLitigationByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckLitigationByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckLitigationByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getCheckLitigationByProjectId_resultStandardScheme getScheme() {
        return new getCheckLitigationByProjectId_resultStandardScheme();
      }
    }

    private static class getCheckLitigationByProjectId_resultStandardScheme extends StandardScheme<getCheckLitigationByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckLitigationByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CheckLitigationDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckLitigationByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckLitigationByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getCheckLitigationByProjectId_resultTupleScheme getScheme() {
        return new getCheckLitigationByProjectId_resultTupleScheme();
      }
    }

    private static class getCheckLitigationByProjectId_resultTupleScheme extends TupleScheme<getCheckLitigationByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckLitigationByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CheckLitigationDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateCheckLitigation_args implements org.apache.thrift.TBase<updateCheckLitigation_args, updateCheckLitigation_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCheckLitigation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCheckLitigation_args");

    private static final org.apache.thrift.protocol.TField CHECK_LITIGATION_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkLitigationDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCheckLitigation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCheckLitigation_argsTupleSchemeFactory());
    }

    public CheckLitigationDTO checkLitigationDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_LITIGATION_DTO((short)1, "checkLitigationDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_LITIGATION_DTO
            return CHECK_LITIGATION_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_LITIGATION_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkLitigationDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckLitigationDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCheckLitigation_args.class, metaDataMap);
    }

    public updateCheckLitigation_args() {
    }

    public updateCheckLitigation_args(
      CheckLitigationDTO checkLitigationDTO)
    {
      this();
      this.checkLitigationDTO = checkLitigationDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCheckLitigation_args(updateCheckLitigation_args other) {
      if (other.isSetCheckLitigationDTO()) {
        this.checkLitigationDTO = new CheckLitigationDTO(other.checkLitigationDTO);
      }
    }

    public updateCheckLitigation_args deepCopy() {
      return new updateCheckLitigation_args(this);
    }

    @Override
    public void clear() {
      this.checkLitigationDTO = null;
    }

    public CheckLitigationDTO getCheckLitigationDTO() {
      return this.checkLitigationDTO;
    }

    public updateCheckLitigation_args setCheckLitigationDTO(CheckLitigationDTO checkLitigationDTO) {
      this.checkLitigationDTO = checkLitigationDTO;
      return this;
    }

    public void unsetCheckLitigationDTO() {
      this.checkLitigationDTO = null;
    }

    /** Returns true if field checkLitigationDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckLitigationDTO() {
      return this.checkLitigationDTO != null;
    }

    public void setCheckLitigationDTOIsSet(boolean value) {
      if (!value) {
        this.checkLitigationDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        if (value == null) {
          unsetCheckLitigationDTO();
        } else {
          setCheckLitigationDTO((CheckLitigationDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_LITIGATION_DTO:
        return getCheckLitigationDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_LITIGATION_DTO:
        return isSetCheckLitigationDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCheckLitigation_args)
        return this.equals((updateCheckLitigation_args)that);
      return false;
    }

    public boolean equals(updateCheckLitigation_args that) {
      if (that == null)
        return false;

      boolean this_present_checkLitigationDTO = true && this.isSetCheckLitigationDTO();
      boolean that_present_checkLitigationDTO = true && that.isSetCheckLitigationDTO();
      if (this_present_checkLitigationDTO || that_present_checkLitigationDTO) {
        if (!(this_present_checkLitigationDTO && that_present_checkLitigationDTO))
          return false;
        if (!this.checkLitigationDTO.equals(that.checkLitigationDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkLitigationDTO = true && (isSetCheckLitigationDTO());
      list.add(present_checkLitigationDTO);
      if (present_checkLitigationDTO)
        list.add(checkLitigationDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCheckLitigation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckLitigationDTO()).compareTo(other.isSetCheckLitigationDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckLitigationDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkLitigationDTO, other.checkLitigationDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCheckLitigation_args(");
      boolean first = true;

      sb.append("checkLitigationDTO:");
      if (this.checkLitigationDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkLitigationDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkLitigationDTO != null) {
        checkLitigationDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCheckLitigation_argsStandardSchemeFactory implements SchemeFactory {
      public updateCheckLitigation_argsStandardScheme getScheme() {
        return new updateCheckLitigation_argsStandardScheme();
      }
    }

    private static class updateCheckLitigation_argsStandardScheme extends StandardScheme<updateCheckLitigation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCheckLitigation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_LITIGATION_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkLitigationDTO = new CheckLitigationDTO();
                struct.checkLitigationDTO.read(iprot);
                struct.setCheckLitigationDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCheckLitigation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkLitigationDTO != null) {
          oprot.writeFieldBegin(CHECK_LITIGATION_DTO_FIELD_DESC);
          struct.checkLitigationDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCheckLitigation_argsTupleSchemeFactory implements SchemeFactory {
      public updateCheckLitigation_argsTupleScheme getScheme() {
        return new updateCheckLitigation_argsTupleScheme();
      }
    }

    private static class updateCheckLitigation_argsTupleScheme extends TupleScheme<updateCheckLitigation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCheckLitigation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckLitigationDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckLitigationDTO()) {
          struct.checkLitigationDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCheckLitigation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkLitigationDTO = new CheckLitigationDTO();
          struct.checkLitigationDTO.read(iprot);
          struct.setCheckLitigationDTOIsSet(true);
        }
      }
    }

  }

  public static class updateCheckLitigation_result implements org.apache.thrift.TBase<updateCheckLitigation_result, updateCheckLitigation_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCheckLitigation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCheckLitigation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCheckLitigation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCheckLitigation_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCheckLitigation_result.class, metaDataMap);
    }

    public updateCheckLitigation_result() {
    }

    public updateCheckLitigation_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCheckLitigation_result(updateCheckLitigation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateCheckLitigation_result deepCopy() {
      return new updateCheckLitigation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateCheckLitigation_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCheckLitigation_result)
        return this.equals((updateCheckLitigation_result)that);
      return false;
    }

    public boolean equals(updateCheckLitigation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCheckLitigation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCheckLitigation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCheckLitigation_resultStandardSchemeFactory implements SchemeFactory {
      public updateCheckLitigation_resultStandardScheme getScheme() {
        return new updateCheckLitigation_resultStandardScheme();
      }
    }

    private static class updateCheckLitigation_resultStandardScheme extends StandardScheme<updateCheckLitigation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCheckLitigation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCheckLitigation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCheckLitigation_resultTupleSchemeFactory implements SchemeFactory {
      public updateCheckLitigation_resultTupleScheme getScheme() {
        return new updateCheckLitigation_resultTupleScheme();
      }
    }

    private static class updateCheckLitigation_resultTupleScheme extends TupleScheme<updateCheckLitigation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCheckLitigation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCheckLitigation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCheckDocumentIndex_args implements org.apache.thrift.TBase<queryCheckDocumentIndex_args, queryCheckDocumentIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCheckDocumentIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCheckDocumentIndex_args");

    private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCheckDocumentIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCheckDocumentIndex_argsTupleSchemeFactory());
    }

    public CheckDocumentIndexDTO checkDocumentIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_DOCUMENT_INDEX_DTO((short)1, "checkDocumentIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_DOCUMENT_INDEX_DTO
            return CHECK_DOCUMENT_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_DOCUMENT_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCheckDocumentIndex_args.class, metaDataMap);
    }

    public queryCheckDocumentIndex_args() {
    }

    public queryCheckDocumentIndex_args(
      CheckDocumentIndexDTO checkDocumentIndexDTO)
    {
      this();
      this.checkDocumentIndexDTO = checkDocumentIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCheckDocumentIndex_args(queryCheckDocumentIndex_args other) {
      if (other.isSetCheckDocumentIndexDTO()) {
        this.checkDocumentIndexDTO = new CheckDocumentIndexDTO(other.checkDocumentIndexDTO);
      }
    }

    public queryCheckDocumentIndex_args deepCopy() {
      return new queryCheckDocumentIndex_args(this);
    }

    @Override
    public void clear() {
      this.checkDocumentIndexDTO = null;
    }

    public CheckDocumentIndexDTO getCheckDocumentIndexDTO() {
      return this.checkDocumentIndexDTO;
    }

    public queryCheckDocumentIndex_args setCheckDocumentIndexDTO(CheckDocumentIndexDTO checkDocumentIndexDTO) {
      this.checkDocumentIndexDTO = checkDocumentIndexDTO;
      return this;
    }

    public void unsetCheckDocumentIndexDTO() {
      this.checkDocumentIndexDTO = null;
    }

    /** Returns true if field checkDocumentIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckDocumentIndexDTO() {
      return this.checkDocumentIndexDTO != null;
    }

    public void setCheckDocumentIndexDTOIsSet(boolean value) {
      if (!value) {
        this.checkDocumentIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_DOCUMENT_INDEX_DTO:
        if (value == null) {
          unsetCheckDocumentIndexDTO();
        } else {
          setCheckDocumentIndexDTO((CheckDocumentIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_DOCUMENT_INDEX_DTO:
        return getCheckDocumentIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_DOCUMENT_INDEX_DTO:
        return isSetCheckDocumentIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCheckDocumentIndex_args)
        return this.equals((queryCheckDocumentIndex_args)that);
      return false;
    }

    public boolean equals(queryCheckDocumentIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_checkDocumentIndexDTO = true && this.isSetCheckDocumentIndexDTO();
      boolean that_present_checkDocumentIndexDTO = true && that.isSetCheckDocumentIndexDTO();
      if (this_present_checkDocumentIndexDTO || that_present_checkDocumentIndexDTO) {
        if (!(this_present_checkDocumentIndexDTO && that_present_checkDocumentIndexDTO))
          return false;
        if (!this.checkDocumentIndexDTO.equals(that.checkDocumentIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkDocumentIndexDTO = true && (isSetCheckDocumentIndexDTO());
      list.add(present_checkDocumentIndexDTO);
      if (present_checkDocumentIndexDTO)
        list.add(checkDocumentIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCheckDocumentIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckDocumentIndexDTO()).compareTo(other.isSetCheckDocumentIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckDocumentIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentIndexDTO, other.checkDocumentIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCheckDocumentIndex_args(");
      boolean first = true;

      sb.append("checkDocumentIndexDTO:");
      if (this.checkDocumentIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkDocumentIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkDocumentIndexDTO != null) {
        checkDocumentIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCheckDocumentIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryCheckDocumentIndex_argsStandardScheme getScheme() {
        return new queryCheckDocumentIndex_argsStandardScheme();
      }
    }

    private static class queryCheckDocumentIndex_argsStandardScheme extends StandardScheme<queryCheckDocumentIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCheckDocumentIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_DOCUMENT_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkDocumentIndexDTO = new CheckDocumentIndexDTO();
                struct.checkDocumentIndexDTO.read(iprot);
                struct.setCheckDocumentIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCheckDocumentIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkDocumentIndexDTO != null) {
          oprot.writeFieldBegin(CHECK_DOCUMENT_INDEX_DTO_FIELD_DESC);
          struct.checkDocumentIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCheckDocumentIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryCheckDocumentIndex_argsTupleScheme getScheme() {
        return new queryCheckDocumentIndex_argsTupleScheme();
      }
    }

    private static class queryCheckDocumentIndex_argsTupleScheme extends TupleScheme<queryCheckDocumentIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCheckDocumentIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckDocumentIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckDocumentIndexDTO()) {
          struct.checkDocumentIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCheckDocumentIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkDocumentIndexDTO = new CheckDocumentIndexDTO();
          struct.checkDocumentIndexDTO.read(iprot);
          struct.setCheckDocumentIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryCheckDocumentIndex_result implements org.apache.thrift.TBase<queryCheckDocumentIndex_result, queryCheckDocumentIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCheckDocumentIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCheckDocumentIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCheckDocumentIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCheckDocumentIndex_resultTupleSchemeFactory());
    }

    public List<CheckDocumentIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCheckDocumentIndex_result.class, metaDataMap);
    }

    public queryCheckDocumentIndex_result() {
    }

    public queryCheckDocumentIndex_result(
      List<CheckDocumentIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCheckDocumentIndex_result(queryCheckDocumentIndex_result other) {
      if (other.isSetSuccess()) {
        List<CheckDocumentIndexDTO> __this__success = new ArrayList<CheckDocumentIndexDTO>(other.success.size());
        for (CheckDocumentIndexDTO other_element : other.success) {
          __this__success.add(new CheckDocumentIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCheckDocumentIndex_result deepCopy() {
      return new queryCheckDocumentIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CheckDocumentIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CheckDocumentIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CheckDocumentIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<CheckDocumentIndexDTO> getSuccess() {
      return this.success;
    }

    public queryCheckDocumentIndex_result setSuccess(List<CheckDocumentIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CheckDocumentIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCheckDocumentIndex_result)
        return this.equals((queryCheckDocumentIndex_result)that);
      return false;
    }

    public boolean equals(queryCheckDocumentIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCheckDocumentIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCheckDocumentIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCheckDocumentIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryCheckDocumentIndex_resultStandardScheme getScheme() {
        return new queryCheckDocumentIndex_resultStandardScheme();
      }
    }

    private static class queryCheckDocumentIndex_resultStandardScheme extends StandardScheme<queryCheckDocumentIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCheckDocumentIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list644 = iprot.readListBegin();
                  struct.success = new ArrayList<CheckDocumentIndexDTO>(_list644.size);
                  CheckDocumentIndexDTO _elem645;
                  for (int _i646 = 0; _i646 < _list644.size; ++_i646)
                  {
                    _elem645 = new CheckDocumentIndexDTO();
                    _elem645.read(iprot);
                    struct.success.add(_elem645);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCheckDocumentIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CheckDocumentIndexDTO _iter647 : struct.success)
            {
              _iter647.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCheckDocumentIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryCheckDocumentIndex_resultTupleScheme getScheme() {
        return new queryCheckDocumentIndex_resultTupleScheme();
      }
    }

    private static class queryCheckDocumentIndex_resultTupleScheme extends TupleScheme<queryCheckDocumentIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCheckDocumentIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CheckDocumentIndexDTO _iter648 : struct.success)
            {
              _iter648.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCheckDocumentIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list649 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CheckDocumentIndexDTO>(_list649.size);
            CheckDocumentIndexDTO _elem650;
            for (int _i651 = 0; _i651 < _list649.size; ++_i651)
            {
              _elem650 = new CheckDocumentIndexDTO();
              _elem650.read(iprot);
              struct.success.add(_elem650);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentIndexTotal_args implements org.apache.thrift.TBase<getCheckDocumentIndexTotal_args, getCheckDocumentIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentIndexTotal_args");

    private static final org.apache.thrift.protocol.TField CHECK_DOCUMENT_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocumentIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentIndexTotal_argsTupleSchemeFactory());
    }

    public CheckDocumentIndexDTO checkDocumentIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_DOCUMENT_INDEX_DTO((short)1, "checkDocumentIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_DOCUMENT_INDEX_DTO
            return CHECK_DOCUMENT_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_DOCUMENT_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("checkDocumentIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CheckDocumentIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentIndexTotal_args.class, metaDataMap);
    }

    public getCheckDocumentIndexTotal_args() {
    }

    public getCheckDocumentIndexTotal_args(
      CheckDocumentIndexDTO checkDocumentIndexDTO)
    {
      this();
      this.checkDocumentIndexDTO = checkDocumentIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentIndexTotal_args(getCheckDocumentIndexTotal_args other) {
      if (other.isSetCheckDocumentIndexDTO()) {
        this.checkDocumentIndexDTO = new CheckDocumentIndexDTO(other.checkDocumentIndexDTO);
      }
    }

    public getCheckDocumentIndexTotal_args deepCopy() {
      return new getCheckDocumentIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.checkDocumentIndexDTO = null;
    }

    public CheckDocumentIndexDTO getCheckDocumentIndexDTO() {
      return this.checkDocumentIndexDTO;
    }

    public getCheckDocumentIndexTotal_args setCheckDocumentIndexDTO(CheckDocumentIndexDTO checkDocumentIndexDTO) {
      this.checkDocumentIndexDTO = checkDocumentIndexDTO;
      return this;
    }

    public void unsetCheckDocumentIndexDTO() {
      this.checkDocumentIndexDTO = null;
    }

    /** Returns true if field checkDocumentIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckDocumentIndexDTO() {
      return this.checkDocumentIndexDTO != null;
    }

    public void setCheckDocumentIndexDTOIsSet(boolean value) {
      if (!value) {
        this.checkDocumentIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_DOCUMENT_INDEX_DTO:
        if (value == null) {
          unsetCheckDocumentIndexDTO();
        } else {
          setCheckDocumentIndexDTO((CheckDocumentIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_DOCUMENT_INDEX_DTO:
        return getCheckDocumentIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_DOCUMENT_INDEX_DTO:
        return isSetCheckDocumentIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentIndexTotal_args)
        return this.equals((getCheckDocumentIndexTotal_args)that);
      return false;
    }

    public boolean equals(getCheckDocumentIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_checkDocumentIndexDTO = true && this.isSetCheckDocumentIndexDTO();
      boolean that_present_checkDocumentIndexDTO = true && that.isSetCheckDocumentIndexDTO();
      if (this_present_checkDocumentIndexDTO || that_present_checkDocumentIndexDTO) {
        if (!(this_present_checkDocumentIndexDTO && that_present_checkDocumentIndexDTO))
          return false;
        if (!this.checkDocumentIndexDTO.equals(that.checkDocumentIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkDocumentIndexDTO = true && (isSetCheckDocumentIndexDTO());
      list.add(present_checkDocumentIndexDTO);
      if (present_checkDocumentIndexDTO)
        list.add(checkDocumentIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckDocumentIndexDTO()).compareTo(other.isSetCheckDocumentIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckDocumentIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocumentIndexDTO, other.checkDocumentIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentIndexTotal_args(");
      boolean first = true;

      sb.append("checkDocumentIndexDTO:");
      if (this.checkDocumentIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.checkDocumentIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkDocumentIndexDTO != null) {
        checkDocumentIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentIndexTotal_argsStandardScheme getScheme() {
        return new getCheckDocumentIndexTotal_argsStandardScheme();
      }
    }

    private static class getCheckDocumentIndexTotal_argsStandardScheme extends StandardScheme<getCheckDocumentIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_DOCUMENT_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkDocumentIndexDTO = new CheckDocumentIndexDTO();
                struct.checkDocumentIndexDTO.read(iprot);
                struct.setCheckDocumentIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkDocumentIndexDTO != null) {
          oprot.writeFieldBegin(CHECK_DOCUMENT_INDEX_DTO_FIELD_DESC);
          struct.checkDocumentIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentIndexTotal_argsTupleScheme getScheme() {
        return new getCheckDocumentIndexTotal_argsTupleScheme();
      }
    }

    private static class getCheckDocumentIndexTotal_argsTupleScheme extends TupleScheme<getCheckDocumentIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckDocumentIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckDocumentIndexDTO()) {
          struct.checkDocumentIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkDocumentIndexDTO = new CheckDocumentIndexDTO();
          struct.checkDocumentIndexDTO.read(iprot);
          struct.setCheckDocumentIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getCheckDocumentIndexTotal_result implements org.apache.thrift.TBase<getCheckDocumentIndexTotal_result, getCheckDocumentIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCheckDocumentIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCheckDocumentIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCheckDocumentIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCheckDocumentIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCheckDocumentIndexTotal_result.class, metaDataMap);
    }

    public getCheckDocumentIndexTotal_result() {
    }

    public getCheckDocumentIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCheckDocumentIndexTotal_result(getCheckDocumentIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCheckDocumentIndexTotal_result deepCopy() {
      return new getCheckDocumentIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCheckDocumentIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCheckDocumentIndexTotal_result)
        return this.equals((getCheckDocumentIndexTotal_result)that);
      return false;
    }

    public boolean equals(getCheckDocumentIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCheckDocumentIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCheckDocumentIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCheckDocumentIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getCheckDocumentIndexTotal_resultStandardScheme getScheme() {
        return new getCheckDocumentIndexTotal_resultStandardScheme();
      }
    }

    private static class getCheckDocumentIndexTotal_resultStandardScheme extends StandardScheme<getCheckDocumentIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCheckDocumentIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCheckDocumentIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCheckDocumentIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getCheckDocumentIndexTotal_resultTupleScheme getScheme() {
        return new getCheckDocumentIndexTotal_resultTupleScheme();
      }
    }

    private static class getCheckDocumentIndexTotal_resultTupleScheme extends TupleScheme<getCheckDocumentIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCheckDocumentIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollectFileByPids_args implements org.apache.thrift.TBase<queryCollectFileByPids_args, queryCollectFileByPids_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFileByPids_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFileByPids_args");

    private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFileByPids_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFileByPids_argsTupleSchemeFactory());
    }

    public String pids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIDS((short)1, "pids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIDS
            return PIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFileByPids_args.class, metaDataMap);
    }

    public queryCollectFileByPids_args() {
    }

    public queryCollectFileByPids_args(
      String pids)
    {
      this();
      this.pids = pids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFileByPids_args(queryCollectFileByPids_args other) {
      if (other.isSetPids()) {
        this.pids = other.pids;
      }
    }

    public queryCollectFileByPids_args deepCopy() {
      return new queryCollectFileByPids_args(this);
    }

    @Override
    public void clear() {
      this.pids = null;
    }

    public String getPids() {
      return this.pids;
    }

    public queryCollectFileByPids_args setPids(String pids) {
      this.pids = pids;
      return this;
    }

    public void unsetPids() {
      this.pids = null;
    }

    /** Returns true if field pids is set (has been assigned a value) and false otherwise */
    public boolean isSetPids() {
      return this.pids != null;
    }

    public void setPidsIsSet(boolean value) {
      if (!value) {
        this.pids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIDS:
        if (value == null) {
          unsetPids();
        } else {
          setPids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIDS:
        return getPids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIDS:
        return isSetPids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFileByPids_args)
        return this.equals((queryCollectFileByPids_args)that);
      return false;
    }

    public boolean equals(queryCollectFileByPids_args that) {
      if (that == null)
        return false;

      boolean this_present_pids = true && this.isSetPids();
      boolean that_present_pids = true && that.isSetPids();
      if (this_present_pids || that_present_pids) {
        if (!(this_present_pids && that_present_pids))
          return false;
        if (!this.pids.equals(that.pids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pids = true && (isSetPids());
      list.add(present_pids);
      if (present_pids)
        list.add(pids);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFileByPids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFileByPids_args(");
      boolean first = true;

      sb.append("pids:");
      if (this.pids == null) {
        sb.append("null");
      } else {
        sb.append(this.pids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFileByPids_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollectFileByPids_argsStandardScheme getScheme() {
        return new queryCollectFileByPids_argsStandardScheme();
      }
    }

    private static class queryCollectFileByPids_argsStandardScheme extends StandardScheme<queryCollectFileByPids_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFileByPids_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pids = iprot.readString();
                struct.setPidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFileByPids_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pids != null) {
          oprot.writeFieldBegin(PIDS_FIELD_DESC);
          oprot.writeString(struct.pids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFileByPids_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollectFileByPids_argsTupleScheme getScheme() {
        return new queryCollectFileByPids_argsTupleScheme();
      }
    }

    private static class queryCollectFileByPids_argsTupleScheme extends TupleScheme<queryCollectFileByPids_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFileByPids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPids()) {
          oprot.writeString(struct.pids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFileByPids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pids = iprot.readString();
          struct.setPidsIsSet(true);
        }
      }
    }

  }

  public static class queryCollectFileByPids_result implements org.apache.thrift.TBase<queryCollectFileByPids_result, queryCollectFileByPids_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFileByPids_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFileByPids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFileByPids_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFileByPids_resultTupleSchemeFactory());
    }

    public List<CollectFileDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFileByPids_result.class, metaDataMap);
    }

    public queryCollectFileByPids_result() {
    }

    public queryCollectFileByPids_result(
      List<CollectFileDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFileByPids_result(queryCollectFileByPids_result other) {
      if (other.isSetSuccess()) {
        List<CollectFileDTO> __this__success = new ArrayList<CollectFileDTO>(other.success.size());
        for (CollectFileDTO other_element : other.success) {
          __this__success.add(new CollectFileDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollectFileByPids_result deepCopy() {
      return new queryCollectFileByPids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectFileDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectFileDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectFileDTO>();
      }
      this.success.add(elem);
    }

    public List<CollectFileDTO> getSuccess() {
      return this.success;
    }

    public queryCollectFileByPids_result setSuccess(List<CollectFileDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectFileDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFileByPids_result)
        return this.equals((queryCollectFileByPids_result)that);
      return false;
    }

    public boolean equals(queryCollectFileByPids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFileByPids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFileByPids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFileByPids_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollectFileByPids_resultStandardScheme getScheme() {
        return new queryCollectFileByPids_resultStandardScheme();
      }
    }

    private static class queryCollectFileByPids_resultStandardScheme extends StandardScheme<queryCollectFileByPids_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFileByPids_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list652 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectFileDTO>(_list652.size);
                  CollectFileDTO _elem653;
                  for (int _i654 = 0; _i654 < _list652.size; ++_i654)
                  {
                    _elem653 = new CollectFileDTO();
                    _elem653.read(iprot);
                    struct.success.add(_elem653);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFileByPids_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectFileDTO _iter655 : struct.success)
            {
              _iter655.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFileByPids_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollectFileByPids_resultTupleScheme getScheme() {
        return new queryCollectFileByPids_resultTupleScheme();
      }
    }

    private static class queryCollectFileByPids_resultTupleScheme extends TupleScheme<queryCollectFileByPids_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFileByPids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectFileDTO _iter656 : struct.success)
            {
              _iter656.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFileByPids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list657 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectFileDTO>(_list657.size);
            CollectFileDTO _elem658;
            for (int _i659 = 0; _i659 < _list657.size; ++_i659)
            {
              _elem658 = new CollectFileDTO();
              _elem658.read(iprot);
              struct.success.add(_elem658);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPerformJobRemark_args implements org.apache.thrift.TBase<getPerformJobRemark_args, getPerformJobRemark_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPerformJobRemark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPerformJobRemark_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPerformJobRemark_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPerformJobRemark_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPerformJobRemark_args.class, metaDataMap);
    }

    public getPerformJobRemark_args() {
    }

    public getPerformJobRemark_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPerformJobRemark_args(getPerformJobRemark_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getPerformJobRemark_args deepCopy() {
      return new getPerformJobRemark_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getPerformJobRemark_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPerformJobRemark_args)
        return this.equals((getPerformJobRemark_args)that);
      return false;
    }

    public boolean equals(getPerformJobRemark_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPerformJobRemark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPerformJobRemark_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPerformJobRemark_argsStandardSchemeFactory implements SchemeFactory {
      public getPerformJobRemark_argsStandardScheme getScheme() {
        return new getPerformJobRemark_argsStandardScheme();
      }
    }

    private static class getPerformJobRemark_argsStandardScheme extends StandardScheme<getPerformJobRemark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPerformJobRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPerformJobRemark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPerformJobRemark_argsTupleSchemeFactory implements SchemeFactory {
      public getPerformJobRemark_argsTupleScheme getScheme() {
        return new getPerformJobRemark_argsTupleScheme();
      }
    }

    private static class getPerformJobRemark_argsTupleScheme extends TupleScheme<getPerformJobRemark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPerformJobRemark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPerformJobRemark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getPerformJobRemark_result implements org.apache.thrift.TBase<getPerformJobRemark_result, getPerformJobRemark_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPerformJobRemark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPerformJobRemark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPerformJobRemark_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPerformJobRemark_resultTupleSchemeFactory());
    }

    public PerformJobRemark success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PerformJobRemark.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPerformJobRemark_result.class, metaDataMap);
    }

    public getPerformJobRemark_result() {
    }

    public getPerformJobRemark_result(
      PerformJobRemark success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPerformJobRemark_result(getPerformJobRemark_result other) {
      if (other.isSetSuccess()) {
        this.success = new PerformJobRemark(other.success);
      }
    }

    public getPerformJobRemark_result deepCopy() {
      return new getPerformJobRemark_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PerformJobRemark getSuccess() {
      return this.success;
    }

    public getPerformJobRemark_result setSuccess(PerformJobRemark success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PerformJobRemark)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPerformJobRemark_result)
        return this.equals((getPerformJobRemark_result)that);
      return false;
    }

    public boolean equals(getPerformJobRemark_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPerformJobRemark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPerformJobRemark_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPerformJobRemark_resultStandardSchemeFactory implements SchemeFactory {
      public getPerformJobRemark_resultStandardScheme getScheme() {
        return new getPerformJobRemark_resultStandardScheme();
      }
    }

    private static class getPerformJobRemark_resultStandardScheme extends StandardScheme<getPerformJobRemark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPerformJobRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PerformJobRemark();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPerformJobRemark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPerformJobRemark_resultTupleSchemeFactory implements SchemeFactory {
      public getPerformJobRemark_resultTupleScheme getScheme() {
        return new getPerformJobRemark_resultTupleScheme();
      }
    }

    private static class getPerformJobRemark_resultTupleScheme extends TupleScheme<getPerformJobRemark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPerformJobRemark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPerformJobRemark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PerformJobRemark();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPerformJobRemark_args implements org.apache.thrift.TBase<addPerformJobRemark_args, addPerformJobRemark_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPerformJobRemark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPerformJobRemark_args");

    private static final org.apache.thrift.protocol.TField PERFORM_JOB_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("performJobRemark", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPerformJobRemark_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPerformJobRemark_argsTupleSchemeFactory());
    }

    public PerformJobRemark performJobRemark; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERFORM_JOB_REMARK((short)1, "performJobRemark");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERFORM_JOB_REMARK
            return PERFORM_JOB_REMARK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERFORM_JOB_REMARK, new org.apache.thrift.meta_data.FieldMetaData("performJobRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PerformJobRemark.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPerformJobRemark_args.class, metaDataMap);
    }

    public addPerformJobRemark_args() {
    }

    public addPerformJobRemark_args(
      PerformJobRemark performJobRemark)
    {
      this();
      this.performJobRemark = performJobRemark;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPerformJobRemark_args(addPerformJobRemark_args other) {
      if (other.isSetPerformJobRemark()) {
        this.performJobRemark = new PerformJobRemark(other.performJobRemark);
      }
    }

    public addPerformJobRemark_args deepCopy() {
      return new addPerformJobRemark_args(this);
    }

    @Override
    public void clear() {
      this.performJobRemark = null;
    }

    public PerformJobRemark getPerformJobRemark() {
      return this.performJobRemark;
    }

    public addPerformJobRemark_args setPerformJobRemark(PerformJobRemark performJobRemark) {
      this.performJobRemark = performJobRemark;
      return this;
    }

    public void unsetPerformJobRemark() {
      this.performJobRemark = null;
    }

    /** Returns true if field performJobRemark is set (has been assigned a value) and false otherwise */
    public boolean isSetPerformJobRemark() {
      return this.performJobRemark != null;
    }

    public void setPerformJobRemarkIsSet(boolean value) {
      if (!value) {
        this.performJobRemark = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PERFORM_JOB_REMARK:
        if (value == null) {
          unsetPerformJobRemark();
        } else {
          setPerformJobRemark((PerformJobRemark)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PERFORM_JOB_REMARK:
        return getPerformJobRemark();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PERFORM_JOB_REMARK:
        return isSetPerformJobRemark();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPerformJobRemark_args)
        return this.equals((addPerformJobRemark_args)that);
      return false;
    }

    public boolean equals(addPerformJobRemark_args that) {
      if (that == null)
        return false;

      boolean this_present_performJobRemark = true && this.isSetPerformJobRemark();
      boolean that_present_performJobRemark = true && that.isSetPerformJobRemark();
      if (this_present_performJobRemark || that_present_performJobRemark) {
        if (!(this_present_performJobRemark && that_present_performJobRemark))
          return false;
        if (!this.performJobRemark.equals(that.performJobRemark))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_performJobRemark = true && (isSetPerformJobRemark());
      list.add(present_performJobRemark);
      if (present_performJobRemark)
        list.add(performJobRemark);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPerformJobRemark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPerformJobRemark()).compareTo(other.isSetPerformJobRemark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerformJobRemark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.performJobRemark, other.performJobRemark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPerformJobRemark_args(");
      boolean first = true;

      sb.append("performJobRemark:");
      if (this.performJobRemark == null) {
        sb.append("null");
      } else {
        sb.append(this.performJobRemark);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (performJobRemark != null) {
        performJobRemark.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPerformJobRemark_argsStandardSchemeFactory implements SchemeFactory {
      public addPerformJobRemark_argsStandardScheme getScheme() {
        return new addPerformJobRemark_argsStandardScheme();
      }
    }

    private static class addPerformJobRemark_argsStandardScheme extends StandardScheme<addPerformJobRemark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPerformJobRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERFORM_JOB_REMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.performJobRemark = new PerformJobRemark();
                struct.performJobRemark.read(iprot);
                struct.setPerformJobRemarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPerformJobRemark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.performJobRemark != null) {
          oprot.writeFieldBegin(PERFORM_JOB_REMARK_FIELD_DESC);
          struct.performJobRemark.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPerformJobRemark_argsTupleSchemeFactory implements SchemeFactory {
      public addPerformJobRemark_argsTupleScheme getScheme() {
        return new addPerformJobRemark_argsTupleScheme();
      }
    }

    private static class addPerformJobRemark_argsTupleScheme extends TupleScheme<addPerformJobRemark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPerformJobRemark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPerformJobRemark()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPerformJobRemark()) {
          struct.performJobRemark.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPerformJobRemark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.performJobRemark = new PerformJobRemark();
          struct.performJobRemark.read(iprot);
          struct.setPerformJobRemarkIsSet(true);
        }
      }
    }

  }

  public static class addPerformJobRemark_result implements org.apache.thrift.TBase<addPerformJobRemark_result, addPerformJobRemark_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPerformJobRemark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPerformJobRemark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPerformJobRemark_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPerformJobRemark_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPerformJobRemark_result.class, metaDataMap);
    }

    public addPerformJobRemark_result() {
    }

    public addPerformJobRemark_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPerformJobRemark_result(addPerformJobRemark_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addPerformJobRemark_result deepCopy() {
      return new addPerformJobRemark_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addPerformJobRemark_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPerformJobRemark_result)
        return this.equals((addPerformJobRemark_result)that);
      return false;
    }

    public boolean equals(addPerformJobRemark_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPerformJobRemark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPerformJobRemark_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPerformJobRemark_resultStandardSchemeFactory implements SchemeFactory {
      public addPerformJobRemark_resultStandardScheme getScheme() {
        return new addPerformJobRemark_resultStandardScheme();
      }
    }

    private static class addPerformJobRemark_resultStandardScheme extends StandardScheme<addPerformJobRemark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPerformJobRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPerformJobRemark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPerformJobRemark_resultTupleSchemeFactory implements SchemeFactory {
      public addPerformJobRemark_resultTupleScheme getScheme() {
        return new addPerformJobRemark_resultTupleScheme();
      }
    }

    private static class addPerformJobRemark_resultTupleScheme extends TupleScheme<addPerformJobRemark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPerformJobRemark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPerformJobRemark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePerformJobRemark_args implements org.apache.thrift.TBase<updatePerformJobRemark_args, updatePerformJobRemark_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePerformJobRemark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePerformJobRemark_args");

    private static final org.apache.thrift.protocol.TField PERFORM_JOB_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("performJobRemark", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePerformJobRemark_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePerformJobRemark_argsTupleSchemeFactory());
    }

    public PerformJobRemark performJobRemark; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERFORM_JOB_REMARK((short)1, "performJobRemark");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERFORM_JOB_REMARK
            return PERFORM_JOB_REMARK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERFORM_JOB_REMARK, new org.apache.thrift.meta_data.FieldMetaData("performJobRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PerformJobRemark.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePerformJobRemark_args.class, metaDataMap);
    }

    public updatePerformJobRemark_args() {
    }

    public updatePerformJobRemark_args(
      PerformJobRemark performJobRemark)
    {
      this();
      this.performJobRemark = performJobRemark;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePerformJobRemark_args(updatePerformJobRemark_args other) {
      if (other.isSetPerformJobRemark()) {
        this.performJobRemark = new PerformJobRemark(other.performJobRemark);
      }
    }

    public updatePerformJobRemark_args deepCopy() {
      return new updatePerformJobRemark_args(this);
    }

    @Override
    public void clear() {
      this.performJobRemark = null;
    }

    public PerformJobRemark getPerformJobRemark() {
      return this.performJobRemark;
    }

    public updatePerformJobRemark_args setPerformJobRemark(PerformJobRemark performJobRemark) {
      this.performJobRemark = performJobRemark;
      return this;
    }

    public void unsetPerformJobRemark() {
      this.performJobRemark = null;
    }

    /** Returns true if field performJobRemark is set (has been assigned a value) and false otherwise */
    public boolean isSetPerformJobRemark() {
      return this.performJobRemark != null;
    }

    public void setPerformJobRemarkIsSet(boolean value) {
      if (!value) {
        this.performJobRemark = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PERFORM_JOB_REMARK:
        if (value == null) {
          unsetPerformJobRemark();
        } else {
          setPerformJobRemark((PerformJobRemark)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PERFORM_JOB_REMARK:
        return getPerformJobRemark();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PERFORM_JOB_REMARK:
        return isSetPerformJobRemark();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePerformJobRemark_args)
        return this.equals((updatePerformJobRemark_args)that);
      return false;
    }

    public boolean equals(updatePerformJobRemark_args that) {
      if (that == null)
        return false;

      boolean this_present_performJobRemark = true && this.isSetPerformJobRemark();
      boolean that_present_performJobRemark = true && that.isSetPerformJobRemark();
      if (this_present_performJobRemark || that_present_performJobRemark) {
        if (!(this_present_performJobRemark && that_present_performJobRemark))
          return false;
        if (!this.performJobRemark.equals(that.performJobRemark))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_performJobRemark = true && (isSetPerformJobRemark());
      list.add(present_performJobRemark);
      if (present_performJobRemark)
        list.add(performJobRemark);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePerformJobRemark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPerformJobRemark()).compareTo(other.isSetPerformJobRemark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerformJobRemark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.performJobRemark, other.performJobRemark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePerformJobRemark_args(");
      boolean first = true;

      sb.append("performJobRemark:");
      if (this.performJobRemark == null) {
        sb.append("null");
      } else {
        sb.append(this.performJobRemark);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (performJobRemark != null) {
        performJobRemark.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePerformJobRemark_argsStandardSchemeFactory implements SchemeFactory {
      public updatePerformJobRemark_argsStandardScheme getScheme() {
        return new updatePerformJobRemark_argsStandardScheme();
      }
    }

    private static class updatePerformJobRemark_argsStandardScheme extends StandardScheme<updatePerformJobRemark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePerformJobRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERFORM_JOB_REMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.performJobRemark = new PerformJobRemark();
                struct.performJobRemark.read(iprot);
                struct.setPerformJobRemarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePerformJobRemark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.performJobRemark != null) {
          oprot.writeFieldBegin(PERFORM_JOB_REMARK_FIELD_DESC);
          struct.performJobRemark.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePerformJobRemark_argsTupleSchemeFactory implements SchemeFactory {
      public updatePerformJobRemark_argsTupleScheme getScheme() {
        return new updatePerformJobRemark_argsTupleScheme();
      }
    }

    private static class updatePerformJobRemark_argsTupleScheme extends TupleScheme<updatePerformJobRemark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePerformJobRemark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPerformJobRemark()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPerformJobRemark()) {
          struct.performJobRemark.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePerformJobRemark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.performJobRemark = new PerformJobRemark();
          struct.performJobRemark.read(iprot);
          struct.setPerformJobRemarkIsSet(true);
        }
      }
    }

  }

  public static class updatePerformJobRemark_result implements org.apache.thrift.TBase<updatePerformJobRemark_result, updatePerformJobRemark_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePerformJobRemark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePerformJobRemark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePerformJobRemark_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePerformJobRemark_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePerformJobRemark_result.class, metaDataMap);
    }

    public updatePerformJobRemark_result() {
    }

    public updatePerformJobRemark_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePerformJobRemark_result(updatePerformJobRemark_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updatePerformJobRemark_result deepCopy() {
      return new updatePerformJobRemark_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updatePerformJobRemark_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePerformJobRemark_result)
        return this.equals((updatePerformJobRemark_result)that);
      return false;
    }

    public boolean equals(updatePerformJobRemark_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePerformJobRemark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePerformJobRemark_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePerformJobRemark_resultStandardSchemeFactory implements SchemeFactory {
      public updatePerformJobRemark_resultStandardScheme getScheme() {
        return new updatePerformJobRemark_resultStandardScheme();
      }
    }

    private static class updatePerformJobRemark_resultStandardScheme extends StandardScheme<updatePerformJobRemark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePerformJobRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePerformJobRemark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePerformJobRemark_resultTupleSchemeFactory implements SchemeFactory {
      public updatePerformJobRemark_resultTupleScheme getScheme() {
        return new updatePerformJobRemark_resultTupleScheme();
      }
    }

    private static class updatePerformJobRemark_resultTupleScheme extends TupleScheme<updatePerformJobRemark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePerformJobRemark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePerformJobRemark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class initIntegratedDept_args implements org.apache.thrift.TBase<initIntegratedDept_args, initIntegratedDept_args._Fields>, java.io.Serializable, Cloneable, Comparable<initIntegratedDept_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initIntegratedDept_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initIntegratedDept_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initIntegratedDept_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initIntegratedDept_args.class, metaDataMap);
    }

    public initIntegratedDept_args() {
    }

    public initIntegratedDept_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initIntegratedDept_args(initIntegratedDept_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public initIntegratedDept_args deepCopy() {
      return new initIntegratedDept_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public initIntegratedDept_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initIntegratedDept_args)
        return this.equals((initIntegratedDept_args)that);
      return false;
    }

    public boolean equals(initIntegratedDept_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(initIntegratedDept_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initIntegratedDept_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initIntegratedDept_argsStandardSchemeFactory implements SchemeFactory {
      public initIntegratedDept_argsStandardScheme getScheme() {
        return new initIntegratedDept_argsStandardScheme();
      }
    }

    private static class initIntegratedDept_argsStandardScheme extends StandardScheme<initIntegratedDept_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initIntegratedDept_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initIntegratedDept_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initIntegratedDept_argsTupleSchemeFactory implements SchemeFactory {
      public initIntegratedDept_argsTupleScheme getScheme() {
        return new initIntegratedDept_argsTupleScheme();
      }
    }

    private static class initIntegratedDept_argsTupleScheme extends TupleScheme<initIntegratedDept_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initIntegratedDept_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initIntegratedDept_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class initIntegratedDept_result implements org.apache.thrift.TBase<initIntegratedDept_result, initIntegratedDept_result._Fields>, java.io.Serializable, Cloneable, Comparable<initIntegratedDept_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initIntegratedDept_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initIntegratedDept_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initIntegratedDept_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initIntegratedDept_result.class, metaDataMap);
    }

    public initIntegratedDept_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initIntegratedDept_result(initIntegratedDept_result other) {
    }

    public initIntegratedDept_result deepCopy() {
      return new initIntegratedDept_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initIntegratedDept_result)
        return this.equals((initIntegratedDept_result)that);
      return false;
    }

    public boolean equals(initIntegratedDept_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(initIntegratedDept_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initIntegratedDept_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initIntegratedDept_resultStandardSchemeFactory implements SchemeFactory {
      public initIntegratedDept_resultStandardScheme getScheme() {
        return new initIntegratedDept_resultStandardScheme();
      }
    }

    private static class initIntegratedDept_resultStandardScheme extends StandardScheme<initIntegratedDept_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initIntegratedDept_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initIntegratedDept_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initIntegratedDept_resultTupleSchemeFactory implements SchemeFactory {
      public initIntegratedDept_resultTupleScheme getScheme() {
        return new initIntegratedDept_resultTupleScheme();
      }
    }

    private static class initIntegratedDept_resultTupleScheme extends TupleScheme<initIntegratedDept_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initIntegratedDept_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initIntegratedDept_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}

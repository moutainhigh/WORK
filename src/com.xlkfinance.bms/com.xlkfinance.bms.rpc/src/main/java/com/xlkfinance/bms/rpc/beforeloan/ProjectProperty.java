/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-10")
public class ProjectProperty implements org.apache.thrift.TBase<ProjectProperty, ProjectProperty._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectProperty> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectProperty");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COST_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("costMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TRANASCTION_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tranasctionMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SELLER_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerCardNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SELLER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerPhone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SELLER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerAddress", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BUYER_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerCardNo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BUYER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerPhone", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BUYER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerAddress", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FORE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foreRate", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField EVALUATION_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField PURPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("purpose", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField EVALUATION_NET_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationNet", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField HOUSE_RENT_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("houseRentTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectPropertyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectPropertyTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String houseName; // required
  public double area; // required
  public double costMoney; // required
  public double tranasctionMoney; // required
  public String sellerName; // required
  public String sellerCardNo; // required
  public String sellerPhone; // required
  public String sellerAddress; // required
  public String buyerName; // required
  public String buyerCardNo; // required
  public String buyerPhone; // required
  public String buyerAddress; // required
  public String housePropertyCard; // required
  public double foreRate; // required
  public double evaluationPrice; // required
  public String purpose; // required
  public double evaluationNet; // required
  public double houseRentTotal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    HOUSE_NAME((short)3, "houseName"),
    AREA((short)4, "area"),
    COST_MONEY((short)5, "costMoney"),
    TRANASCTION_MONEY((short)6, "tranasctionMoney"),
    SELLER_NAME((short)7, "sellerName"),
    SELLER_CARD_NO((short)8, "sellerCardNo"),
    SELLER_PHONE((short)9, "sellerPhone"),
    SELLER_ADDRESS((short)10, "sellerAddress"),
    BUYER_NAME((short)11, "buyerName"),
    BUYER_CARD_NO((short)12, "buyerCardNo"),
    BUYER_PHONE((short)13, "buyerPhone"),
    BUYER_ADDRESS((short)14, "buyerAddress"),
    HOUSE_PROPERTY_CARD((short)15, "housePropertyCard"),
    FORE_RATE((short)16, "foreRate"),
    EVALUATION_PRICE((short)17, "evaluationPrice"),
    PURPOSE((short)18, "purpose"),
    EVALUATION_NET((short)19, "evaluationNet"),
    HOUSE_RENT_TOTAL((short)20, "houseRentTotal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // HOUSE_NAME
          return HOUSE_NAME;
        case 4: // AREA
          return AREA;
        case 5: // COST_MONEY
          return COST_MONEY;
        case 6: // TRANASCTION_MONEY
          return TRANASCTION_MONEY;
        case 7: // SELLER_NAME
          return SELLER_NAME;
        case 8: // SELLER_CARD_NO
          return SELLER_CARD_NO;
        case 9: // SELLER_PHONE
          return SELLER_PHONE;
        case 10: // SELLER_ADDRESS
          return SELLER_ADDRESS;
        case 11: // BUYER_NAME
          return BUYER_NAME;
        case 12: // BUYER_CARD_NO
          return BUYER_CARD_NO;
        case 13: // BUYER_PHONE
          return BUYER_PHONE;
        case 14: // BUYER_ADDRESS
          return BUYER_ADDRESS;
        case 15: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 16: // FORE_RATE
          return FORE_RATE;
        case 17: // EVALUATION_PRICE
          return EVALUATION_PRICE;
        case 18: // PURPOSE
          return PURPOSE;
        case 19: // EVALUATION_NET
          return EVALUATION_NET;
        case 20: // HOUSE_RENT_TOTAL
          return HOUSE_RENT_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __AREA_ISSET_ID = 2;
  private static final int __COSTMONEY_ISSET_ID = 3;
  private static final int __TRANASCTIONMONEY_ISSET_ID = 4;
  private static final int __FORERATE_ISSET_ID = 5;
  private static final int __EVALUATIONPRICE_ISSET_ID = 6;
  private static final int __EVALUATIONNET_ISSET_ID = 7;
  private static final int __HOUSERENTTOTAL_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST_MONEY, new org.apache.thrift.meta_data.FieldMetaData("costMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRANASCTION_MONEY, new org.apache.thrift.meta_data.FieldMetaData("tranasctionMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("sellerCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("sellerPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("sellerAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("buyerCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("buyerPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("buyerAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORE_RATE, new org.apache.thrift.meta_data.FieldMetaData("foreRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVALUATION_PRICE, new org.apache.thrift.meta_data.FieldMetaData("evaluationPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PURPOSE, new org.apache.thrift.meta_data.FieldMetaData("purpose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVALUATION_NET, new org.apache.thrift.meta_data.FieldMetaData("evaluationNet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_RENT_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("houseRentTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectProperty.class, metaDataMap);
  }

  public ProjectProperty() {
  }

  public ProjectProperty(
    int pid,
    int projectId,
    String houseName,
    double area,
    double costMoney,
    double tranasctionMoney,
    String sellerName,
    String sellerCardNo,
    String sellerPhone,
    String sellerAddress,
    String buyerName,
    String buyerCardNo,
    String buyerPhone,
    String buyerAddress,
    String housePropertyCard,
    double foreRate,
    double evaluationPrice,
    String purpose,
    double evaluationNet,
    double houseRentTotal)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.houseName = houseName;
    this.area = area;
    setAreaIsSet(true);
    this.costMoney = costMoney;
    setCostMoneyIsSet(true);
    this.tranasctionMoney = tranasctionMoney;
    setTranasctionMoneyIsSet(true);
    this.sellerName = sellerName;
    this.sellerCardNo = sellerCardNo;
    this.sellerPhone = sellerPhone;
    this.sellerAddress = sellerAddress;
    this.buyerName = buyerName;
    this.buyerCardNo = buyerCardNo;
    this.buyerPhone = buyerPhone;
    this.buyerAddress = buyerAddress;
    this.housePropertyCard = housePropertyCard;
    this.foreRate = foreRate;
    setForeRateIsSet(true);
    this.evaluationPrice = evaluationPrice;
    setEvaluationPriceIsSet(true);
    this.purpose = purpose;
    this.evaluationNet = evaluationNet;
    setEvaluationNetIsSet(true);
    this.houseRentTotal = houseRentTotal;
    setHouseRentTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectProperty(ProjectProperty other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    this.area = other.area;
    this.costMoney = other.costMoney;
    this.tranasctionMoney = other.tranasctionMoney;
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetSellerCardNo()) {
      this.sellerCardNo = other.sellerCardNo;
    }
    if (other.isSetSellerPhone()) {
      this.sellerPhone = other.sellerPhone;
    }
    if (other.isSetSellerAddress()) {
      this.sellerAddress = other.sellerAddress;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetBuyerCardNo()) {
      this.buyerCardNo = other.buyerCardNo;
    }
    if (other.isSetBuyerPhone()) {
      this.buyerPhone = other.buyerPhone;
    }
    if (other.isSetBuyerAddress()) {
      this.buyerAddress = other.buyerAddress;
    }
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    this.foreRate = other.foreRate;
    this.evaluationPrice = other.evaluationPrice;
    if (other.isSetPurpose()) {
      this.purpose = other.purpose;
    }
    this.evaluationNet = other.evaluationNet;
    this.houseRentTotal = other.houseRentTotal;
  }

  public ProjectProperty deepCopy() {
    return new ProjectProperty(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.houseName = null;
    setAreaIsSet(false);
    this.area = 0.0;
    setCostMoneyIsSet(false);
    this.costMoney = 0.0;
    setTranasctionMoneyIsSet(false);
    this.tranasctionMoney = 0.0;
    this.sellerName = null;
    this.sellerCardNo = null;
    this.sellerPhone = null;
    this.sellerAddress = null;
    this.buyerName = null;
    this.buyerCardNo = null;
    this.buyerPhone = null;
    this.buyerAddress = null;
    this.housePropertyCard = null;
    setForeRateIsSet(false);
    this.foreRate = 0.0;
    setEvaluationPriceIsSet(false);
    this.evaluationPrice = 0.0;
    this.purpose = null;
    setEvaluationNetIsSet(false);
    this.evaluationNet = 0.0;
    setHouseRentTotalIsSet(false);
    this.houseRentTotal = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectProperty setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectProperty setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public ProjectProperty setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public double getArea() {
    return this.area;
  }

  public ProjectProperty setArea(double area) {
    this.area = area;
    setAreaIsSet(true);
    return this;
  }

  public void unsetArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return EncodingUtils.testBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  public void setAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREA_ISSET_ID, value);
  }

  public double getCostMoney() {
    return this.costMoney;
  }

  public ProjectProperty setCostMoney(double costMoney) {
    this.costMoney = costMoney;
    setCostMoneyIsSet(true);
    return this;
  }

  public void unsetCostMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COSTMONEY_ISSET_ID);
  }

  /** Returns true if field costMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCostMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __COSTMONEY_ISSET_ID);
  }

  public void setCostMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COSTMONEY_ISSET_ID, value);
  }

  public double getTranasctionMoney() {
    return this.tranasctionMoney;
  }

  public ProjectProperty setTranasctionMoney(double tranasctionMoney) {
    this.tranasctionMoney = tranasctionMoney;
    setTranasctionMoneyIsSet(true);
    return this;
  }

  public void unsetTranasctionMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID);
  }

  /** Returns true if field tranasctionMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTranasctionMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID);
  }

  public void setTranasctionMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID, value);
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public ProjectProperty setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getSellerCardNo() {
    return this.sellerCardNo;
  }

  public ProjectProperty setSellerCardNo(String sellerCardNo) {
    this.sellerCardNo = sellerCardNo;
    return this;
  }

  public void unsetSellerCardNo() {
    this.sellerCardNo = null;
  }

  /** Returns true if field sellerCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerCardNo() {
    return this.sellerCardNo != null;
  }

  public void setSellerCardNoIsSet(boolean value) {
    if (!value) {
      this.sellerCardNo = null;
    }
  }

  public String getSellerPhone() {
    return this.sellerPhone;
  }

  public ProjectProperty setSellerPhone(String sellerPhone) {
    this.sellerPhone = sellerPhone;
    return this;
  }

  public void unsetSellerPhone() {
    this.sellerPhone = null;
  }

  /** Returns true if field sellerPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerPhone() {
    return this.sellerPhone != null;
  }

  public void setSellerPhoneIsSet(boolean value) {
    if (!value) {
      this.sellerPhone = null;
    }
  }

  public String getSellerAddress() {
    return this.sellerAddress;
  }

  public ProjectProperty setSellerAddress(String sellerAddress) {
    this.sellerAddress = sellerAddress;
    return this;
  }

  public void unsetSellerAddress() {
    this.sellerAddress = null;
  }

  /** Returns true if field sellerAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerAddress() {
    return this.sellerAddress != null;
  }

  public void setSellerAddressIsSet(boolean value) {
    if (!value) {
      this.sellerAddress = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public ProjectProperty setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getBuyerCardNo() {
    return this.buyerCardNo;
  }

  public ProjectProperty setBuyerCardNo(String buyerCardNo) {
    this.buyerCardNo = buyerCardNo;
    return this;
  }

  public void unsetBuyerCardNo() {
    this.buyerCardNo = null;
  }

  /** Returns true if field buyerCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerCardNo() {
    return this.buyerCardNo != null;
  }

  public void setBuyerCardNoIsSet(boolean value) {
    if (!value) {
      this.buyerCardNo = null;
    }
  }

  public String getBuyerPhone() {
    return this.buyerPhone;
  }

  public ProjectProperty setBuyerPhone(String buyerPhone) {
    this.buyerPhone = buyerPhone;
    return this;
  }

  public void unsetBuyerPhone() {
    this.buyerPhone = null;
  }

  /** Returns true if field buyerPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerPhone() {
    return this.buyerPhone != null;
  }

  public void setBuyerPhoneIsSet(boolean value) {
    if (!value) {
      this.buyerPhone = null;
    }
  }

  public String getBuyerAddress() {
    return this.buyerAddress;
  }

  public ProjectProperty setBuyerAddress(String buyerAddress) {
    this.buyerAddress = buyerAddress;
    return this;
  }

  public void unsetBuyerAddress() {
    this.buyerAddress = null;
  }

  /** Returns true if field buyerAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerAddress() {
    return this.buyerAddress != null;
  }

  public void setBuyerAddressIsSet(boolean value) {
    if (!value) {
      this.buyerAddress = null;
    }
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public ProjectProperty setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public double getForeRate() {
    return this.foreRate;
  }

  public ProjectProperty setForeRate(double foreRate) {
    this.foreRate = foreRate;
    setForeRateIsSet(true);
    return this;
  }

  public void unsetForeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORERATE_ISSET_ID);
  }

  /** Returns true if field foreRate is set (has been assigned a value) and false otherwise */
  public boolean isSetForeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FORERATE_ISSET_ID);
  }

  public void setForeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORERATE_ISSET_ID, value);
  }

  public double getEvaluationPrice() {
    return this.evaluationPrice;
  }

  public ProjectProperty setEvaluationPrice(double evaluationPrice) {
    this.evaluationPrice = evaluationPrice;
    setEvaluationPriceIsSet(true);
    return this;
  }

  public void unsetEvaluationPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVALUATIONPRICE_ISSET_ID);
  }

  /** Returns true if field evaluationPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluationPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __EVALUATIONPRICE_ISSET_ID);
  }

  public void setEvaluationPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVALUATIONPRICE_ISSET_ID, value);
  }

  public String getPurpose() {
    return this.purpose;
  }

  public ProjectProperty setPurpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  public void unsetPurpose() {
    this.purpose = null;
  }

  /** Returns true if field purpose is set (has been assigned a value) and false otherwise */
  public boolean isSetPurpose() {
    return this.purpose != null;
  }

  public void setPurposeIsSet(boolean value) {
    if (!value) {
      this.purpose = null;
    }
  }

  public double getEvaluationNet() {
    return this.evaluationNet;
  }

  public ProjectProperty setEvaluationNet(double evaluationNet) {
    this.evaluationNet = evaluationNet;
    setEvaluationNetIsSet(true);
    return this;
  }

  public void unsetEvaluationNet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVALUATIONNET_ISSET_ID);
  }

  /** Returns true if field evaluationNet is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluationNet() {
    return EncodingUtils.testBit(__isset_bitfield, __EVALUATIONNET_ISSET_ID);
  }

  public void setEvaluationNetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVALUATIONNET_ISSET_ID, value);
  }

  public double getHouseRentTotal() {
    return this.houseRentTotal;
  }

  public ProjectProperty setHouseRentTotal(double houseRentTotal) {
    this.houseRentTotal = houseRentTotal;
    setHouseRentTotalIsSet(true);
    return this;
  }

  public void unsetHouseRentTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSERENTTOTAL_ISSET_ID);
  }

  /** Returns true if field houseRentTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseRentTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSERENTTOTAL_ISSET_ID);
  }

  public void setHouseRentTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSERENTTOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((Double)value);
      }
      break;

    case COST_MONEY:
      if (value == null) {
        unsetCostMoney();
      } else {
        setCostMoney((Double)value);
      }
      break;

    case TRANASCTION_MONEY:
      if (value == null) {
        unsetTranasctionMoney();
      } else {
        setTranasctionMoney((Double)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case SELLER_CARD_NO:
      if (value == null) {
        unsetSellerCardNo();
      } else {
        setSellerCardNo((String)value);
      }
      break;

    case SELLER_PHONE:
      if (value == null) {
        unsetSellerPhone();
      } else {
        setSellerPhone((String)value);
      }
      break;

    case SELLER_ADDRESS:
      if (value == null) {
        unsetSellerAddress();
      } else {
        setSellerAddress((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case BUYER_CARD_NO:
      if (value == null) {
        unsetBuyerCardNo();
      } else {
        setBuyerCardNo((String)value);
      }
      break;

    case BUYER_PHONE:
      if (value == null) {
        unsetBuyerPhone();
      } else {
        setBuyerPhone((String)value);
      }
      break;

    case BUYER_ADDRESS:
      if (value == null) {
        unsetBuyerAddress();
      } else {
        setBuyerAddress((String)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case FORE_RATE:
      if (value == null) {
        unsetForeRate();
      } else {
        setForeRate((Double)value);
      }
      break;

    case EVALUATION_PRICE:
      if (value == null) {
        unsetEvaluationPrice();
      } else {
        setEvaluationPrice((Double)value);
      }
      break;

    case PURPOSE:
      if (value == null) {
        unsetPurpose();
      } else {
        setPurpose((String)value);
      }
      break;

    case EVALUATION_NET:
      if (value == null) {
        unsetEvaluationNet();
      } else {
        setEvaluationNet((Double)value);
      }
      break;

    case HOUSE_RENT_TOTAL:
      if (value == null) {
        unsetHouseRentTotal();
      } else {
        setHouseRentTotal((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case HOUSE_NAME:
      return getHouseName();

    case AREA:
      return Double.valueOf(getArea());

    case COST_MONEY:
      return Double.valueOf(getCostMoney());

    case TRANASCTION_MONEY:
      return Double.valueOf(getTranasctionMoney());

    case SELLER_NAME:
      return getSellerName();

    case SELLER_CARD_NO:
      return getSellerCardNo();

    case SELLER_PHONE:
      return getSellerPhone();

    case SELLER_ADDRESS:
      return getSellerAddress();

    case BUYER_NAME:
      return getBuyerName();

    case BUYER_CARD_NO:
      return getBuyerCardNo();

    case BUYER_PHONE:
      return getBuyerPhone();

    case BUYER_ADDRESS:
      return getBuyerAddress();

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case FORE_RATE:
      return Double.valueOf(getForeRate());

    case EVALUATION_PRICE:
      return Double.valueOf(getEvaluationPrice());

    case PURPOSE:
      return getPurpose();

    case EVALUATION_NET:
      return Double.valueOf(getEvaluationNet());

    case HOUSE_RENT_TOTAL:
      return Double.valueOf(getHouseRentTotal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case HOUSE_NAME:
      return isSetHouseName();
    case AREA:
      return isSetArea();
    case COST_MONEY:
      return isSetCostMoney();
    case TRANASCTION_MONEY:
      return isSetTranasctionMoney();
    case SELLER_NAME:
      return isSetSellerName();
    case SELLER_CARD_NO:
      return isSetSellerCardNo();
    case SELLER_PHONE:
      return isSetSellerPhone();
    case SELLER_ADDRESS:
      return isSetSellerAddress();
    case BUYER_NAME:
      return isSetBuyerName();
    case BUYER_CARD_NO:
      return isSetBuyerCardNo();
    case BUYER_PHONE:
      return isSetBuyerPhone();
    case BUYER_ADDRESS:
      return isSetBuyerAddress();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case FORE_RATE:
      return isSetForeRate();
    case EVALUATION_PRICE:
      return isSetEvaluationPrice();
    case PURPOSE:
      return isSetPurpose();
    case EVALUATION_NET:
      return isSetEvaluationNet();
    case HOUSE_RENT_TOTAL:
      return isSetHouseRentTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectProperty)
      return this.equals((ProjectProperty)that);
    return false;
  }

  public boolean equals(ProjectProperty that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_area = true;
    boolean that_present_area = true;
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (this.area != that.area)
        return false;
    }

    boolean this_present_costMoney = true;
    boolean that_present_costMoney = true;
    if (this_present_costMoney || that_present_costMoney) {
      if (!(this_present_costMoney && that_present_costMoney))
        return false;
      if (this.costMoney != that.costMoney)
        return false;
    }

    boolean this_present_tranasctionMoney = true;
    boolean that_present_tranasctionMoney = true;
    if (this_present_tranasctionMoney || that_present_tranasctionMoney) {
      if (!(this_present_tranasctionMoney && that_present_tranasctionMoney))
        return false;
      if (this.tranasctionMoney != that.tranasctionMoney)
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_sellerCardNo = true && this.isSetSellerCardNo();
    boolean that_present_sellerCardNo = true && that.isSetSellerCardNo();
    if (this_present_sellerCardNo || that_present_sellerCardNo) {
      if (!(this_present_sellerCardNo && that_present_sellerCardNo))
        return false;
      if (!this.sellerCardNo.equals(that.sellerCardNo))
        return false;
    }

    boolean this_present_sellerPhone = true && this.isSetSellerPhone();
    boolean that_present_sellerPhone = true && that.isSetSellerPhone();
    if (this_present_sellerPhone || that_present_sellerPhone) {
      if (!(this_present_sellerPhone && that_present_sellerPhone))
        return false;
      if (!this.sellerPhone.equals(that.sellerPhone))
        return false;
    }

    boolean this_present_sellerAddress = true && this.isSetSellerAddress();
    boolean that_present_sellerAddress = true && that.isSetSellerAddress();
    if (this_present_sellerAddress || that_present_sellerAddress) {
      if (!(this_present_sellerAddress && that_present_sellerAddress))
        return false;
      if (!this.sellerAddress.equals(that.sellerAddress))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_buyerCardNo = true && this.isSetBuyerCardNo();
    boolean that_present_buyerCardNo = true && that.isSetBuyerCardNo();
    if (this_present_buyerCardNo || that_present_buyerCardNo) {
      if (!(this_present_buyerCardNo && that_present_buyerCardNo))
        return false;
      if (!this.buyerCardNo.equals(that.buyerCardNo))
        return false;
    }

    boolean this_present_buyerPhone = true && this.isSetBuyerPhone();
    boolean that_present_buyerPhone = true && that.isSetBuyerPhone();
    if (this_present_buyerPhone || that_present_buyerPhone) {
      if (!(this_present_buyerPhone && that_present_buyerPhone))
        return false;
      if (!this.buyerPhone.equals(that.buyerPhone))
        return false;
    }

    boolean this_present_buyerAddress = true && this.isSetBuyerAddress();
    boolean that_present_buyerAddress = true && that.isSetBuyerAddress();
    if (this_present_buyerAddress || that_present_buyerAddress) {
      if (!(this_present_buyerAddress && that_present_buyerAddress))
        return false;
      if (!this.buyerAddress.equals(that.buyerAddress))
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_foreRate = true;
    boolean that_present_foreRate = true;
    if (this_present_foreRate || that_present_foreRate) {
      if (!(this_present_foreRate && that_present_foreRate))
        return false;
      if (this.foreRate != that.foreRate)
        return false;
    }

    boolean this_present_evaluationPrice = true;
    boolean that_present_evaluationPrice = true;
    if (this_present_evaluationPrice || that_present_evaluationPrice) {
      if (!(this_present_evaluationPrice && that_present_evaluationPrice))
        return false;
      if (this.evaluationPrice != that.evaluationPrice)
        return false;
    }

    boolean this_present_purpose = true && this.isSetPurpose();
    boolean that_present_purpose = true && that.isSetPurpose();
    if (this_present_purpose || that_present_purpose) {
      if (!(this_present_purpose && that_present_purpose))
        return false;
      if (!this.purpose.equals(that.purpose))
        return false;
    }

    boolean this_present_evaluationNet = true;
    boolean that_present_evaluationNet = true;
    if (this_present_evaluationNet || that_present_evaluationNet) {
      if (!(this_present_evaluationNet && that_present_evaluationNet))
        return false;
      if (this.evaluationNet != that.evaluationNet)
        return false;
    }

    boolean this_present_houseRentTotal = true;
    boolean that_present_houseRentTotal = true;
    if (this_present_houseRentTotal || that_present_houseRentTotal) {
      if (!(this_present_houseRentTotal && that_present_houseRentTotal))
        return false;
      if (this.houseRentTotal != that.houseRentTotal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_area = true;
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_costMoney = true;
    list.add(present_costMoney);
    if (present_costMoney)
      list.add(costMoney);

    boolean present_tranasctionMoney = true;
    list.add(present_tranasctionMoney);
    if (present_tranasctionMoney)
      list.add(tranasctionMoney);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_sellerCardNo = true && (isSetSellerCardNo());
    list.add(present_sellerCardNo);
    if (present_sellerCardNo)
      list.add(sellerCardNo);

    boolean present_sellerPhone = true && (isSetSellerPhone());
    list.add(present_sellerPhone);
    if (present_sellerPhone)
      list.add(sellerPhone);

    boolean present_sellerAddress = true && (isSetSellerAddress());
    list.add(present_sellerAddress);
    if (present_sellerAddress)
      list.add(sellerAddress);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_buyerCardNo = true && (isSetBuyerCardNo());
    list.add(present_buyerCardNo);
    if (present_buyerCardNo)
      list.add(buyerCardNo);

    boolean present_buyerPhone = true && (isSetBuyerPhone());
    list.add(present_buyerPhone);
    if (present_buyerPhone)
      list.add(buyerPhone);

    boolean present_buyerAddress = true && (isSetBuyerAddress());
    list.add(present_buyerAddress);
    if (present_buyerAddress)
      list.add(buyerAddress);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_foreRate = true;
    list.add(present_foreRate);
    if (present_foreRate)
      list.add(foreRate);

    boolean present_evaluationPrice = true;
    list.add(present_evaluationPrice);
    if (present_evaluationPrice)
      list.add(evaluationPrice);

    boolean present_purpose = true && (isSetPurpose());
    list.add(present_purpose);
    if (present_purpose)
      list.add(purpose);

    boolean present_evaluationNet = true;
    list.add(present_evaluationNet);
    if (present_evaluationNet)
      list.add(evaluationNet);

    boolean present_houseRentTotal = true;
    list.add(present_houseRentTotal);
    if (present_houseRentTotal)
      list.add(houseRentTotal);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectProperty other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostMoney()).compareTo(other.isSetCostMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costMoney, other.costMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTranasctionMoney()).compareTo(other.isSetTranasctionMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranasctionMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tranasctionMoney, other.tranasctionMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerCardNo()).compareTo(other.isSetSellerCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerCardNo, other.sellerCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerPhone()).compareTo(other.isSetSellerPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerPhone, other.sellerPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerAddress()).compareTo(other.isSetSellerAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerAddress, other.sellerAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerCardNo()).compareTo(other.isSetBuyerCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerCardNo, other.buyerCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerPhone()).compareTo(other.isSetBuyerPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerPhone, other.buyerPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerAddress()).compareTo(other.isSetBuyerAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerAddress, other.buyerAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeRate()).compareTo(other.isSetForeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreRate, other.foreRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluationPrice()).compareTo(other.isSetEvaluationPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluationPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationPrice, other.evaluationPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurpose()).compareTo(other.isSetPurpose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurpose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purpose, other.purpose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluationNet()).compareTo(other.isSetEvaluationNet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluationNet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationNet, other.evaluationNet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseRentTotal()).compareTo(other.isSetHouseRentTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseRentTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseRentTotal, other.houseRentTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectProperty(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    sb.append(this.area);
    first = false;
    if (!first) sb.append(", ");
    sb.append("costMoney:");
    sb.append(this.costMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tranasctionMoney:");
    sb.append(this.tranasctionMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerCardNo:");
    if (this.sellerCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerPhone:");
    if (this.sellerPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerAddress:");
    if (this.sellerAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerCardNo:");
    if (this.buyerCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerPhone:");
    if (this.buyerPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerAddress:");
    if (this.buyerAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreRate:");
    sb.append(this.foreRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluationPrice:");
    sb.append(this.evaluationPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("purpose:");
    if (this.purpose == null) {
      sb.append("null");
    } else {
      sb.append(this.purpose);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluationNet:");
    sb.append(this.evaluationNet);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseRentTotal:");
    sb.append(this.houseRentTotal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectPropertyStandardSchemeFactory implements SchemeFactory {
    public ProjectPropertyStandardScheme getScheme() {
      return new ProjectPropertyStandardScheme();
    }
  }

  private static class ProjectPropertyStandardScheme extends StandardScheme<ProjectProperty> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.area = iprot.readDouble();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COST_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.costMoney = iprot.readDouble();
              struct.setCostMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANASCTION_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tranasctionMoney = iprot.readDouble();
              struct.setTranasctionMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SELLER_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerCardNo = iprot.readString();
              struct.setSellerCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SELLER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerPhone = iprot.readString();
              struct.setSellerPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SELLER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerAddress = iprot.readString();
              struct.setSellerAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUYER_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerCardNo = iprot.readString();
              struct.setBuyerCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BUYER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerPhone = iprot.readString();
              struct.setBuyerPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BUYER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerAddress = iprot.readString();
              struct.setBuyerAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FORE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.foreRate = iprot.readDouble();
              struct.setForeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EVALUATION_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.evaluationPrice = iprot.readDouble();
              struct.setEvaluationPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PURPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.purpose = iprot.readString();
              struct.setPurposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // EVALUATION_NET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.evaluationNet = iprot.readDouble();
              struct.setEvaluationNetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HOUSE_RENT_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.houseRentTotal = iprot.readDouble();
              struct.setHouseRentTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectProperty struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREA_FIELD_DESC);
      oprot.writeDouble(struct.area);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.costMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANASCTION_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.tranasctionMoney);
      oprot.writeFieldEnd();
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerCardNo != null) {
        oprot.writeFieldBegin(SELLER_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.sellerCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.sellerPhone != null) {
        oprot.writeFieldBegin(SELLER_PHONE_FIELD_DESC);
        oprot.writeString(struct.sellerPhone);
        oprot.writeFieldEnd();
      }
      if (struct.sellerAddress != null) {
        oprot.writeFieldBegin(SELLER_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.sellerAddress);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerCardNo != null) {
        oprot.writeFieldBegin(BUYER_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.buyerCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.buyerPhone != null) {
        oprot.writeFieldBegin(BUYER_PHONE_FIELD_DESC);
        oprot.writeString(struct.buyerPhone);
        oprot.writeFieldEnd();
      }
      if (struct.buyerAddress != null) {
        oprot.writeFieldBegin(BUYER_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.buyerAddress);
        oprot.writeFieldEnd();
      }
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.foreRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVALUATION_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.evaluationPrice);
      oprot.writeFieldEnd();
      if (struct.purpose != null) {
        oprot.writeFieldBegin(PURPOSE_FIELD_DESC);
        oprot.writeString(struct.purpose);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVALUATION_NET_FIELD_DESC);
      oprot.writeDouble(struct.evaluationNet);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSE_RENT_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.houseRentTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectPropertyTupleSchemeFactory implements SchemeFactory {
    public ProjectPropertyTupleScheme getScheme() {
      return new ProjectPropertyTupleScheme();
    }
  }

  private static class ProjectPropertyTupleScheme extends TupleScheme<ProjectProperty> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectProperty struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetHouseName()) {
        optionals.set(2);
      }
      if (struct.isSetArea()) {
        optionals.set(3);
      }
      if (struct.isSetCostMoney()) {
        optionals.set(4);
      }
      if (struct.isSetTranasctionMoney()) {
        optionals.set(5);
      }
      if (struct.isSetSellerName()) {
        optionals.set(6);
      }
      if (struct.isSetSellerCardNo()) {
        optionals.set(7);
      }
      if (struct.isSetSellerPhone()) {
        optionals.set(8);
      }
      if (struct.isSetSellerAddress()) {
        optionals.set(9);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(10);
      }
      if (struct.isSetBuyerCardNo()) {
        optionals.set(11);
      }
      if (struct.isSetBuyerPhone()) {
        optionals.set(12);
      }
      if (struct.isSetBuyerAddress()) {
        optionals.set(13);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(14);
      }
      if (struct.isSetForeRate()) {
        optionals.set(15);
      }
      if (struct.isSetEvaluationPrice()) {
        optionals.set(16);
      }
      if (struct.isSetPurpose()) {
        optionals.set(17);
      }
      if (struct.isSetEvaluationNet()) {
        optionals.set(18);
      }
      if (struct.isSetHouseRentTotal()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetArea()) {
        oprot.writeDouble(struct.area);
      }
      if (struct.isSetCostMoney()) {
        oprot.writeDouble(struct.costMoney);
      }
      if (struct.isSetTranasctionMoney()) {
        oprot.writeDouble(struct.tranasctionMoney);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetSellerCardNo()) {
        oprot.writeString(struct.sellerCardNo);
      }
      if (struct.isSetSellerPhone()) {
        oprot.writeString(struct.sellerPhone);
      }
      if (struct.isSetSellerAddress()) {
        oprot.writeString(struct.sellerAddress);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetBuyerCardNo()) {
        oprot.writeString(struct.buyerCardNo);
      }
      if (struct.isSetBuyerPhone()) {
        oprot.writeString(struct.buyerPhone);
      }
      if (struct.isSetBuyerAddress()) {
        oprot.writeString(struct.buyerAddress);
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetForeRate()) {
        oprot.writeDouble(struct.foreRate);
      }
      if (struct.isSetEvaluationPrice()) {
        oprot.writeDouble(struct.evaluationPrice);
      }
      if (struct.isSetPurpose()) {
        oprot.writeString(struct.purpose);
      }
      if (struct.isSetEvaluationNet()) {
        oprot.writeDouble(struct.evaluationNet);
      }
      if (struct.isSetHouseRentTotal()) {
        oprot.writeDouble(struct.houseRentTotal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectProperty struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.area = iprot.readDouble();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.costMoney = iprot.readDouble();
        struct.setCostMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tranasctionMoney = iprot.readDouble();
        struct.setTranasctionMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sellerCardNo = iprot.readString();
        struct.setSellerCardNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sellerPhone = iprot.readString();
        struct.setSellerPhoneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sellerAddress = iprot.readString();
        struct.setSellerAddressIsSet(true);
      }
      if (incoming.get(10)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.buyerCardNo = iprot.readString();
        struct.setBuyerCardNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.buyerPhone = iprot.readString();
        struct.setBuyerPhoneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.buyerAddress = iprot.readString();
        struct.setBuyerAddressIsSet(true);
      }
      if (incoming.get(14)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(15)) {
        struct.foreRate = iprot.readDouble();
        struct.setForeRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.evaluationPrice = iprot.readDouble();
        struct.setEvaluationPriceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.purpose = iprot.readString();
        struct.setPurposeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.evaluationNet = iprot.readDouble();
        struct.setEvaluationNetIsSet(true);
      }
      if (incoming.get(19)) {
        struct.houseRentTotal = iprot.readDouble();
        struct.setHouseRentTotalIsSet(true);
      }
    }
  }

}


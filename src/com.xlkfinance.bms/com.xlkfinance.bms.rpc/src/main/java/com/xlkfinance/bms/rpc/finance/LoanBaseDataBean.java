/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class LoanBaseDataBean implements org.apache.thrift.TBase<LoanBaseDataBean, LoanBaseDataBean._Fields>, java.io.Serializable, Cloneable, Comparable<LoanBaseDataBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanBaseDataBean");

  private static final org.apache.thrift.protocol.TField TOTAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField RPRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("rprincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField RMANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("rmangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField RINTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("rinterest", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ROTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("rotherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField UPRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("uprincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField UMANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("umangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField UINTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("uinterest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField UOTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("uotherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanBaseDataBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanBaseDataBeanTupleSchemeFactory());
  }

  public double totalAmt; // required
  public double rprincipal; // required
  public double rmangCost; // required
  public double rinterest; // required
  public double rotherCost; // required
  public double uprincipal; // required
  public double umangCost; // required
  public double uinterest; // required
  public double uotherCost; // required
  public int loanId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_AMT((short)1, "totalAmt"),
    RPRINCIPAL((short)2, "rprincipal"),
    RMANG_COST((short)3, "rmangCost"),
    RINTEREST((short)4, "rinterest"),
    ROTHER_COST((short)5, "rotherCost"),
    UPRINCIPAL((short)6, "uprincipal"),
    UMANG_COST((short)7, "umangCost"),
    UINTEREST((short)8, "uinterest"),
    UOTHER_COST((short)9, "uotherCost"),
    LOAN_ID((short)10, "loanId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_AMT
          return TOTAL_AMT;
        case 2: // RPRINCIPAL
          return RPRINCIPAL;
        case 3: // RMANG_COST
          return RMANG_COST;
        case 4: // RINTEREST
          return RINTEREST;
        case 5: // ROTHER_COST
          return ROTHER_COST;
        case 6: // UPRINCIPAL
          return UPRINCIPAL;
        case 7: // UMANG_COST
          return UMANG_COST;
        case 8: // UINTEREST
          return UINTEREST;
        case 9: // UOTHER_COST
          return UOTHER_COST;
        case 10: // LOAN_ID
          return LOAN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALAMT_ISSET_ID = 0;
  private static final int __RPRINCIPAL_ISSET_ID = 1;
  private static final int __RMANGCOST_ISSET_ID = 2;
  private static final int __RINTEREST_ISSET_ID = 3;
  private static final int __ROTHERCOST_ISSET_ID = 4;
  private static final int __UPRINCIPAL_ISSET_ID = 5;
  private static final int __UMANGCOST_ISSET_ID = 6;
  private static final int __UINTEREST_ISSET_ID = 7;
  private static final int __UOTHERCOST_ISSET_ID = 8;
  private static final int __LOANID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("totalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RPRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("rprincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RMANG_COST, new org.apache.thrift.meta_data.FieldMetaData("rmangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RINTEREST, new org.apache.thrift.meta_data.FieldMetaData("rinterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ROTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("rotherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("uprincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UMANG_COST, new org.apache.thrift.meta_data.FieldMetaData("umangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UINTEREST, new org.apache.thrift.meta_data.FieldMetaData("uinterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UOTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("uotherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanBaseDataBean.class, metaDataMap);
  }

  public LoanBaseDataBean() {
  }

  public LoanBaseDataBean(
    double totalAmt,
    double rprincipal,
    double rmangCost,
    double rinterest,
    double rotherCost,
    double uprincipal,
    double umangCost,
    double uinterest,
    double uotherCost,
    int loanId)
  {
    this();
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    this.rprincipal = rprincipal;
    setRprincipalIsSet(true);
    this.rmangCost = rmangCost;
    setRmangCostIsSet(true);
    this.rinterest = rinterest;
    setRinterestIsSet(true);
    this.rotherCost = rotherCost;
    setRotherCostIsSet(true);
    this.uprincipal = uprincipal;
    setUprincipalIsSet(true);
    this.umangCost = umangCost;
    setUmangCostIsSet(true);
    this.uinterest = uinterest;
    setUinterestIsSet(true);
    this.uotherCost = uotherCost;
    setUotherCostIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanBaseDataBean(LoanBaseDataBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalAmt = other.totalAmt;
    this.rprincipal = other.rprincipal;
    this.rmangCost = other.rmangCost;
    this.rinterest = other.rinterest;
    this.rotherCost = other.rotherCost;
    this.uprincipal = other.uprincipal;
    this.umangCost = other.umangCost;
    this.uinterest = other.uinterest;
    this.uotherCost = other.uotherCost;
    this.loanId = other.loanId;
  }

  public LoanBaseDataBean deepCopy() {
    return new LoanBaseDataBean(this);
  }

  @Override
  public void clear() {
    setTotalAmtIsSet(false);
    this.totalAmt = 0.0;
    setRprincipalIsSet(false);
    this.rprincipal = 0.0;
    setRmangCostIsSet(false);
    this.rmangCost = 0.0;
    setRinterestIsSet(false);
    this.rinterest = 0.0;
    setRotherCostIsSet(false);
    this.rotherCost = 0.0;
    setUprincipalIsSet(false);
    this.uprincipal = 0.0;
    setUmangCostIsSet(false);
    this.umangCost = 0.0;
    setUinterestIsSet(false);
    this.uinterest = 0.0;
    setUotherCostIsSet(false);
    this.uotherCost = 0.0;
    setLoanIdIsSet(false);
    this.loanId = 0;
  }

  public double getTotalAmt() {
    return this.totalAmt;
  }

  public LoanBaseDataBean setTotalAmt(double totalAmt) {
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    return this;
  }

  public void unsetTotalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  /** Returns true if field totalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  public void setTotalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMT_ISSET_ID, value);
  }

  public double getRprincipal() {
    return this.rprincipal;
  }

  public LoanBaseDataBean setRprincipal(double rprincipal) {
    this.rprincipal = rprincipal;
    setRprincipalIsSet(true);
    return this;
  }

  public void unsetRprincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field rprincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetRprincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __RPRINCIPAL_ISSET_ID);
  }

  public void setRprincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RPRINCIPAL_ISSET_ID, value);
  }

  public double getRmangCost() {
    return this.rmangCost;
  }

  public LoanBaseDataBean setRmangCost(double rmangCost) {
    this.rmangCost = rmangCost;
    setRmangCostIsSet(true);
    return this;
  }

  public void unsetRmangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RMANGCOST_ISSET_ID);
  }

  /** Returns true if field rmangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetRmangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __RMANGCOST_ISSET_ID);
  }

  public void setRmangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RMANGCOST_ISSET_ID, value);
  }

  public double getRinterest() {
    return this.rinterest;
  }

  public LoanBaseDataBean setRinterest(double rinterest) {
    this.rinterest = rinterest;
    setRinterestIsSet(true);
    return this;
  }

  public void unsetRinterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RINTEREST_ISSET_ID);
  }

  /** Returns true if field rinterest is set (has been assigned a value) and false otherwise */
  public boolean isSetRinterest() {
    return EncodingUtils.testBit(__isset_bitfield, __RINTEREST_ISSET_ID);
  }

  public void setRinterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RINTEREST_ISSET_ID, value);
  }

  public double getRotherCost() {
    return this.rotherCost;
  }

  public LoanBaseDataBean setRotherCost(double rotherCost) {
    this.rotherCost = rotherCost;
    setRotherCostIsSet(true);
    return this;
  }

  public void unsetRotherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROTHERCOST_ISSET_ID);
  }

  /** Returns true if field rotherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetRotherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __ROTHERCOST_ISSET_ID);
  }

  public void setRotherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROTHERCOST_ISSET_ID, value);
  }

  public double getUprincipal() {
    return this.uprincipal;
  }

  public LoanBaseDataBean setUprincipal(double uprincipal) {
    this.uprincipal = uprincipal;
    setUprincipalIsSet(true);
    return this;
  }

  public void unsetUprincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field uprincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetUprincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __UPRINCIPAL_ISSET_ID);
  }

  public void setUprincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPRINCIPAL_ISSET_ID, value);
  }

  public double getUmangCost() {
    return this.umangCost;
  }

  public LoanBaseDataBean setUmangCost(double umangCost) {
    this.umangCost = umangCost;
    setUmangCostIsSet(true);
    return this;
  }

  public void unsetUmangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UMANGCOST_ISSET_ID);
  }

  /** Returns true if field umangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetUmangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __UMANGCOST_ISSET_ID);
  }

  public void setUmangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UMANGCOST_ISSET_ID, value);
  }

  public double getUinterest() {
    return this.uinterest;
  }

  public LoanBaseDataBean setUinterest(double uinterest) {
    this.uinterest = uinterest;
    setUinterestIsSet(true);
    return this;
  }

  public void unsetUinterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UINTEREST_ISSET_ID);
  }

  /** Returns true if field uinterest is set (has been assigned a value) and false otherwise */
  public boolean isSetUinterest() {
    return EncodingUtils.testBit(__isset_bitfield, __UINTEREST_ISSET_ID);
  }

  public void setUinterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UINTEREST_ISSET_ID, value);
  }

  public double getUotherCost() {
    return this.uotherCost;
  }

  public LoanBaseDataBean setUotherCost(double uotherCost) {
    this.uotherCost = uotherCost;
    setUotherCostIsSet(true);
    return this;
  }

  public void unsetUotherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UOTHERCOST_ISSET_ID);
  }

  /** Returns true if field uotherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetUotherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __UOTHERCOST_ISSET_ID);
  }

  public void setUotherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UOTHERCOST_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public LoanBaseDataBean setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_AMT:
      if (value == null) {
        unsetTotalAmt();
      } else {
        setTotalAmt((Double)value);
      }
      break;

    case RPRINCIPAL:
      if (value == null) {
        unsetRprincipal();
      } else {
        setRprincipal((Double)value);
      }
      break;

    case RMANG_COST:
      if (value == null) {
        unsetRmangCost();
      } else {
        setRmangCost((Double)value);
      }
      break;

    case RINTEREST:
      if (value == null) {
        unsetRinterest();
      } else {
        setRinterest((Double)value);
      }
      break;

    case ROTHER_COST:
      if (value == null) {
        unsetRotherCost();
      } else {
        setRotherCost((Double)value);
      }
      break;

    case UPRINCIPAL:
      if (value == null) {
        unsetUprincipal();
      } else {
        setUprincipal((Double)value);
      }
      break;

    case UMANG_COST:
      if (value == null) {
        unsetUmangCost();
      } else {
        setUmangCost((Double)value);
      }
      break;

    case UINTEREST:
      if (value == null) {
        unsetUinterest();
      } else {
        setUinterest((Double)value);
      }
      break;

    case UOTHER_COST:
      if (value == null) {
        unsetUotherCost();
      } else {
        setUotherCost((Double)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_AMT:
      return Double.valueOf(getTotalAmt());

    case RPRINCIPAL:
      return Double.valueOf(getRprincipal());

    case RMANG_COST:
      return Double.valueOf(getRmangCost());

    case RINTEREST:
      return Double.valueOf(getRinterest());

    case ROTHER_COST:
      return Double.valueOf(getRotherCost());

    case UPRINCIPAL:
      return Double.valueOf(getUprincipal());

    case UMANG_COST:
      return Double.valueOf(getUmangCost());

    case UINTEREST:
      return Double.valueOf(getUinterest());

    case UOTHER_COST:
      return Double.valueOf(getUotherCost());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_AMT:
      return isSetTotalAmt();
    case RPRINCIPAL:
      return isSetRprincipal();
    case RMANG_COST:
      return isSetRmangCost();
    case RINTEREST:
      return isSetRinterest();
    case ROTHER_COST:
      return isSetRotherCost();
    case UPRINCIPAL:
      return isSetUprincipal();
    case UMANG_COST:
      return isSetUmangCost();
    case UINTEREST:
      return isSetUinterest();
    case UOTHER_COST:
      return isSetUotherCost();
    case LOAN_ID:
      return isSetLoanId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanBaseDataBean)
      return this.equals((LoanBaseDataBean)that);
    return false;
  }

  public boolean equals(LoanBaseDataBean that) {
    if (that == null)
      return false;

    boolean this_present_totalAmt = true;
    boolean that_present_totalAmt = true;
    if (this_present_totalAmt || that_present_totalAmt) {
      if (!(this_present_totalAmt && that_present_totalAmt))
        return false;
      if (this.totalAmt != that.totalAmt)
        return false;
    }

    boolean this_present_rprincipal = true;
    boolean that_present_rprincipal = true;
    if (this_present_rprincipal || that_present_rprincipal) {
      if (!(this_present_rprincipal && that_present_rprincipal))
        return false;
      if (this.rprincipal != that.rprincipal)
        return false;
    }

    boolean this_present_rmangCost = true;
    boolean that_present_rmangCost = true;
    if (this_present_rmangCost || that_present_rmangCost) {
      if (!(this_present_rmangCost && that_present_rmangCost))
        return false;
      if (this.rmangCost != that.rmangCost)
        return false;
    }

    boolean this_present_rinterest = true;
    boolean that_present_rinterest = true;
    if (this_present_rinterest || that_present_rinterest) {
      if (!(this_present_rinterest && that_present_rinterest))
        return false;
      if (this.rinterest != that.rinterest)
        return false;
    }

    boolean this_present_rotherCost = true;
    boolean that_present_rotherCost = true;
    if (this_present_rotherCost || that_present_rotherCost) {
      if (!(this_present_rotherCost && that_present_rotherCost))
        return false;
      if (this.rotherCost != that.rotherCost)
        return false;
    }

    boolean this_present_uprincipal = true;
    boolean that_present_uprincipal = true;
    if (this_present_uprincipal || that_present_uprincipal) {
      if (!(this_present_uprincipal && that_present_uprincipal))
        return false;
      if (this.uprincipal != that.uprincipal)
        return false;
    }

    boolean this_present_umangCost = true;
    boolean that_present_umangCost = true;
    if (this_present_umangCost || that_present_umangCost) {
      if (!(this_present_umangCost && that_present_umangCost))
        return false;
      if (this.umangCost != that.umangCost)
        return false;
    }

    boolean this_present_uinterest = true;
    boolean that_present_uinterest = true;
    if (this_present_uinterest || that_present_uinterest) {
      if (!(this_present_uinterest && that_present_uinterest))
        return false;
      if (this.uinterest != that.uinterest)
        return false;
    }

    boolean this_present_uotherCost = true;
    boolean that_present_uotherCost = true;
    if (this_present_uotherCost || that_present_uotherCost) {
      if (!(this_present_uotherCost && that_present_uotherCost))
        return false;
      if (this.uotherCost != that.uotherCost)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_totalAmt = true;
    list.add(present_totalAmt);
    if (present_totalAmt)
      list.add(totalAmt);

    boolean present_rprincipal = true;
    list.add(present_rprincipal);
    if (present_rprincipal)
      list.add(rprincipal);

    boolean present_rmangCost = true;
    list.add(present_rmangCost);
    if (present_rmangCost)
      list.add(rmangCost);

    boolean present_rinterest = true;
    list.add(present_rinterest);
    if (present_rinterest)
      list.add(rinterest);

    boolean present_rotherCost = true;
    list.add(present_rotherCost);
    if (present_rotherCost)
      list.add(rotherCost);

    boolean present_uprincipal = true;
    list.add(present_uprincipal);
    if (present_uprincipal)
      list.add(uprincipal);

    boolean present_umangCost = true;
    list.add(present_umangCost);
    if (present_umangCost)
      list.add(umangCost);

    boolean present_uinterest = true;
    list.add(present_uinterest);
    if (present_uinterest)
      list.add(uinterest);

    boolean present_uotherCost = true;
    list.add(present_uotherCost);
    if (present_uotherCost)
      list.add(uotherCost);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanBaseDataBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalAmt()).compareTo(other.isSetTotalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmt, other.totalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRprincipal()).compareTo(other.isSetRprincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRprincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rprincipal, other.rprincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRmangCost()).compareTo(other.isSetRmangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRmangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rmangCost, other.rmangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRinterest()).compareTo(other.isSetRinterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRinterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rinterest, other.rinterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRotherCost()).compareTo(other.isSetRotherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRotherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rotherCost, other.rotherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUprincipal()).compareTo(other.isSetUprincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUprincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uprincipal, other.uprincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUmangCost()).compareTo(other.isSetUmangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUmangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.umangCost, other.umangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUinterest()).compareTo(other.isSetUinterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUinterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uinterest, other.uinterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUotherCost()).compareTo(other.isSetUotherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUotherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uotherCost, other.uotherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanBaseDataBean(");
    boolean first = true;

    sb.append("totalAmt:");
    sb.append(this.totalAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rprincipal:");
    sb.append(this.rprincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rmangCost:");
    sb.append(this.rmangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rinterest:");
    sb.append(this.rinterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rotherCost:");
    sb.append(this.rotherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uprincipal:");
    sb.append(this.uprincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("umangCost:");
    sb.append(this.umangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uinterest:");
    sb.append(this.uinterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uotherCost:");
    sb.append(this.uotherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanBaseDataBeanStandardSchemeFactory implements SchemeFactory {
    public LoanBaseDataBeanStandardScheme getScheme() {
      return new LoanBaseDataBeanStandardScheme();
    }
  }

  private static class LoanBaseDataBeanStandardScheme extends StandardScheme<LoanBaseDataBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanBaseDataBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmt = iprot.readDouble();
              struct.setTotalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RPRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rprincipal = iprot.readDouble();
              struct.setRprincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RMANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rmangCost = iprot.readDouble();
              struct.setRmangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RINTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rinterest = iprot.readDouble();
              struct.setRinterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rotherCost = iprot.readDouble();
              struct.setRotherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uprincipal = iprot.readDouble();
              struct.setUprincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UMANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.umangCost = iprot.readDouble();
              struct.setUmangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UINTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uinterest = iprot.readDouble();
              struct.setUinterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UOTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uotherCost = iprot.readDouble();
              struct.setUotherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanBaseDataBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.totalAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RPRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.rprincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RMANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.rmangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RINTEREST_FIELD_DESC);
      oprot.writeDouble(struct.rinterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.rotherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.uprincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UMANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.umangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UINTEREST_FIELD_DESC);
      oprot.writeDouble(struct.uinterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UOTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.uotherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanBaseDataBeanTupleSchemeFactory implements SchemeFactory {
    public LoanBaseDataBeanTupleScheme getScheme() {
      return new LoanBaseDataBeanTupleScheme();
    }
  }

  private static class LoanBaseDataBeanTupleScheme extends TupleScheme<LoanBaseDataBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanBaseDataBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalAmt()) {
        optionals.set(0);
      }
      if (struct.isSetRprincipal()) {
        optionals.set(1);
      }
      if (struct.isSetRmangCost()) {
        optionals.set(2);
      }
      if (struct.isSetRinterest()) {
        optionals.set(3);
      }
      if (struct.isSetRotherCost()) {
        optionals.set(4);
      }
      if (struct.isSetUprincipal()) {
        optionals.set(5);
      }
      if (struct.isSetUmangCost()) {
        optionals.set(6);
      }
      if (struct.isSetUinterest()) {
        optionals.set(7);
      }
      if (struct.isSetUotherCost()) {
        optionals.set(8);
      }
      if (struct.isSetLoanId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetTotalAmt()) {
        oprot.writeDouble(struct.totalAmt);
      }
      if (struct.isSetRprincipal()) {
        oprot.writeDouble(struct.rprincipal);
      }
      if (struct.isSetRmangCost()) {
        oprot.writeDouble(struct.rmangCost);
      }
      if (struct.isSetRinterest()) {
        oprot.writeDouble(struct.rinterest);
      }
      if (struct.isSetRotherCost()) {
        oprot.writeDouble(struct.rotherCost);
      }
      if (struct.isSetUprincipal()) {
        oprot.writeDouble(struct.uprincipal);
      }
      if (struct.isSetUmangCost()) {
        oprot.writeDouble(struct.umangCost);
      }
      if (struct.isSetUinterest()) {
        oprot.writeDouble(struct.uinterest);
      }
      if (struct.isSetUotherCost()) {
        oprot.writeDouble(struct.uotherCost);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanBaseDataBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.totalAmt = iprot.readDouble();
        struct.setTotalAmtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rprincipal = iprot.readDouble();
        struct.setRprincipalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rmangCost = iprot.readDouble();
        struct.setRmangCostIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rinterest = iprot.readDouble();
        struct.setRinterestIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rotherCost = iprot.readDouble();
        struct.setRotherCostIsSet(true);
      }
      if (incoming.get(5)) {
        struct.uprincipal = iprot.readDouble();
        struct.setUprincipalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.umangCost = iprot.readDouble();
        struct.setUmangCostIsSet(true);
      }
      if (incoming.get(7)) {
        struct.uinterest = iprot.readDouble();
        struct.setUinterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uotherCost = iprot.readDouble();
        struct.setUotherCostIsSet(true);
      }
      if (incoming.get(9)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
    }
  }

}


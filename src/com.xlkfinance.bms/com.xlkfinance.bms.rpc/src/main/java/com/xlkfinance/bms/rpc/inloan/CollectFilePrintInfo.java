/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class CollectFilePrintInfo implements org.apache.thrift.TBase<CollectFilePrintInfo, CollectFilePrintInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CollectFilePrintInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectFilePrintInfo");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deptName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUYER_SELLER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerSellerType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField REAL_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField REFUND_TAIL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("refundTailMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField COLLECT_FILE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFileList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField PRINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("printType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PRINT_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("printLoanMoney", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectFilePrintInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectFilePrintInfoTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String deptName; // required
  public String pmName; // required
  public int buyerSellerType; // required
  public String buyerName; // required
  public String sellerName; // required
  public String houseName; // required
  public double loanMoney; // required
  public double realLoanMoney; // required
  public double foreclosureMoney; // required
  public double refundTailMoney; // required
  public List<CollectFileDTO> collectFileList; // required
  public int printType; // required
  public String printLoanMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    DEPT_NAME((short)3, "deptName"),
    PM_NAME((short)4, "pmName"),
    BUYER_SELLER_TYPE((short)5, "buyerSellerType"),
    BUYER_NAME((short)6, "buyerName"),
    SELLER_NAME((short)7, "sellerName"),
    HOUSE_NAME((short)8, "houseName"),
    LOAN_MONEY((short)9, "loanMoney"),
    REAL_LOAN_MONEY((short)10, "realLoanMoney"),
    FORECLOSURE_MONEY((short)11, "foreclosureMoney"),
    REFUND_TAIL_MONEY((short)12, "refundTailMoney"),
    COLLECT_FILE_LIST((short)13, "collectFileList"),
    PRINT_TYPE((short)14, "printType"),
    PRINT_LOAN_MONEY((short)15, "printLoanMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // DEPT_NAME
          return DEPT_NAME;
        case 4: // PM_NAME
          return PM_NAME;
        case 5: // BUYER_SELLER_TYPE
          return BUYER_SELLER_TYPE;
        case 6: // BUYER_NAME
          return BUYER_NAME;
        case 7: // SELLER_NAME
          return SELLER_NAME;
        case 8: // HOUSE_NAME
          return HOUSE_NAME;
        case 9: // LOAN_MONEY
          return LOAN_MONEY;
        case 10: // REAL_LOAN_MONEY
          return REAL_LOAN_MONEY;
        case 11: // FORECLOSURE_MONEY
          return FORECLOSURE_MONEY;
        case 12: // REFUND_TAIL_MONEY
          return REFUND_TAIL_MONEY;
        case 13: // COLLECT_FILE_LIST
          return COLLECT_FILE_LIST;
        case 14: // PRINT_TYPE
          return PRINT_TYPE;
        case 15: // PRINT_LOAN_MONEY
          return PRINT_LOAN_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __BUYERSELLERTYPE_ISSET_ID = 1;
  private static final int __LOANMONEY_ISSET_ID = 2;
  private static final int __REALLOANMONEY_ISSET_ID = 3;
  private static final int __FORECLOSUREMONEY_ISSET_ID = 4;
  private static final int __REFUNDTAILMONEY_ISSET_ID = 5;
  private static final int __PRINTTYPE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("deptName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_SELLER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("buyerSellerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("foreclosureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_TAIL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("refundTailMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLLECT_FILE_LIST, new org.apache.thrift.meta_data.FieldMetaData("collectFileList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileDTO.class))));
    tmpMap.put(_Fields.PRINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("printType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRINT_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("printLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectFilePrintInfo.class, metaDataMap);
  }

  public CollectFilePrintInfo() {
  }

  public CollectFilePrintInfo(
    int projectId,
    String projectName,
    String deptName,
    String pmName,
    int buyerSellerType,
    String buyerName,
    String sellerName,
    String houseName,
    double loanMoney,
    double realLoanMoney,
    double foreclosureMoney,
    double refundTailMoney,
    List<CollectFileDTO> collectFileList,
    int printType,
    String printLoanMoney)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.deptName = deptName;
    this.pmName = pmName;
    this.buyerSellerType = buyerSellerType;
    setBuyerSellerTypeIsSet(true);
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.houseName = houseName;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.realLoanMoney = realLoanMoney;
    setRealLoanMoneyIsSet(true);
    this.foreclosureMoney = foreclosureMoney;
    setForeclosureMoneyIsSet(true);
    this.refundTailMoney = refundTailMoney;
    setRefundTailMoneyIsSet(true);
    this.collectFileList = collectFileList;
    this.printType = printType;
    setPrintTypeIsSet(true);
    this.printLoanMoney = printLoanMoney;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectFilePrintInfo(CollectFilePrintInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetDeptName()) {
      this.deptName = other.deptName;
    }
    if (other.isSetPmName()) {
      this.pmName = other.pmName;
    }
    this.buyerSellerType = other.buyerSellerType;
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    this.loanMoney = other.loanMoney;
    this.realLoanMoney = other.realLoanMoney;
    this.foreclosureMoney = other.foreclosureMoney;
    this.refundTailMoney = other.refundTailMoney;
    if (other.isSetCollectFileList()) {
      List<CollectFileDTO> __this__collectFileList = new ArrayList<CollectFileDTO>(other.collectFileList.size());
      for (CollectFileDTO other_element : other.collectFileList) {
        __this__collectFileList.add(new CollectFileDTO(other_element));
      }
      this.collectFileList = __this__collectFileList;
    }
    this.printType = other.printType;
    if (other.isSetPrintLoanMoney()) {
      this.printLoanMoney = other.printLoanMoney;
    }
  }

  public CollectFilePrintInfo deepCopy() {
    return new CollectFilePrintInfo(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.deptName = null;
    this.pmName = null;
    setBuyerSellerTypeIsSet(false);
    this.buyerSellerType = 0;
    this.buyerName = null;
    this.sellerName = null;
    this.houseName = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setRealLoanMoneyIsSet(false);
    this.realLoanMoney = 0.0;
    setForeclosureMoneyIsSet(false);
    this.foreclosureMoney = 0.0;
    setRefundTailMoneyIsSet(false);
    this.refundTailMoney = 0.0;
    this.collectFileList = null;
    setPrintTypeIsSet(false);
    this.printType = 0;
    this.printLoanMoney = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CollectFilePrintInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public CollectFilePrintInfo setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getDeptName() {
    return this.deptName;
  }

  public CollectFilePrintInfo setDeptName(String deptName) {
    this.deptName = deptName;
    return this;
  }

  public void unsetDeptName() {
    this.deptName = null;
  }

  /** Returns true if field deptName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptName() {
    return this.deptName != null;
  }

  public void setDeptNameIsSet(boolean value) {
    if (!value) {
      this.deptName = null;
    }
  }

  public String getPmName() {
    return this.pmName;
  }

  public CollectFilePrintInfo setPmName(String pmName) {
    this.pmName = pmName;
    return this;
  }

  public void unsetPmName() {
    this.pmName = null;
  }

  /** Returns true if field pmName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmName() {
    return this.pmName != null;
  }

  public void setPmNameIsSet(boolean value) {
    if (!value) {
      this.pmName = null;
    }
  }

  public int getBuyerSellerType() {
    return this.buyerSellerType;
  }

  public CollectFilePrintInfo setBuyerSellerType(int buyerSellerType) {
    this.buyerSellerType = buyerSellerType;
    setBuyerSellerTypeIsSet(true);
    return this;
  }

  public void unsetBuyerSellerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID);
  }

  /** Returns true if field buyerSellerType is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerSellerType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID);
  }

  public void setBuyerSellerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID, value);
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public CollectFilePrintInfo setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public CollectFilePrintInfo setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public CollectFilePrintInfo setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public CollectFilePrintInfo setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public double getRealLoanMoney() {
    return this.realLoanMoney;
  }

  public CollectFilePrintInfo setRealLoanMoney(double realLoanMoney) {
    this.realLoanMoney = realLoanMoney;
    setRealLoanMoneyIsSet(true);
    return this;
  }

  public void unsetRealLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALLOANMONEY_ISSET_ID);
  }

  /** Returns true if field realLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALLOANMONEY_ISSET_ID);
  }

  public void setRealLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALLOANMONEY_ISSET_ID, value);
  }

  public double getForeclosureMoney() {
    return this.foreclosureMoney;
  }

  public CollectFilePrintInfo setForeclosureMoney(double foreclosureMoney) {
    this.foreclosureMoney = foreclosureMoney;
    setForeclosureMoneyIsSet(true);
    return this;
  }

  public void unsetForeclosureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID);
  }

  /** Returns true if field foreclosureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID);
  }

  public void setForeclosureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID, value);
  }

  public double getRefundTailMoney() {
    return this.refundTailMoney;
  }

  public CollectFilePrintInfo setRefundTailMoney(double refundTailMoney) {
    this.refundTailMoney = refundTailMoney;
    setRefundTailMoneyIsSet(true);
    return this;
  }

  public void unsetRefundTailMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDTAILMONEY_ISSET_ID);
  }

  /** Returns true if field refundTailMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundTailMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDTAILMONEY_ISSET_ID);
  }

  public void setRefundTailMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDTAILMONEY_ISSET_ID, value);
  }

  public int getCollectFileListSize() {
    return (this.collectFileList == null) ? 0 : this.collectFileList.size();
  }

  public java.util.Iterator<CollectFileDTO> getCollectFileListIterator() {
    return (this.collectFileList == null) ? null : this.collectFileList.iterator();
  }

  public void addToCollectFileList(CollectFileDTO elem) {
    if (this.collectFileList == null) {
      this.collectFileList = new ArrayList<CollectFileDTO>();
    }
    this.collectFileList.add(elem);
  }

  public List<CollectFileDTO> getCollectFileList() {
    return this.collectFileList;
  }

  public CollectFilePrintInfo setCollectFileList(List<CollectFileDTO> collectFileList) {
    this.collectFileList = collectFileList;
    return this;
  }

  public void unsetCollectFileList() {
    this.collectFileList = null;
  }

  /** Returns true if field collectFileList is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFileList() {
    return this.collectFileList != null;
  }

  public void setCollectFileListIsSet(boolean value) {
    if (!value) {
      this.collectFileList = null;
    }
  }

  public int getPrintType() {
    return this.printType;
  }

  public CollectFilePrintInfo setPrintType(int printType) {
    this.printType = printType;
    setPrintTypeIsSet(true);
    return this;
  }

  public void unsetPrintType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINTTYPE_ISSET_ID);
  }

  /** Returns true if field printType is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINTTYPE_ISSET_ID);
  }

  public void setPrintTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINTTYPE_ISSET_ID, value);
  }

  public String getPrintLoanMoney() {
    return this.printLoanMoney;
  }

  public CollectFilePrintInfo setPrintLoanMoney(String printLoanMoney) {
    this.printLoanMoney = printLoanMoney;
    return this;
  }

  public void unsetPrintLoanMoney() {
    this.printLoanMoney = null;
  }

  /** Returns true if field printLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintLoanMoney() {
    return this.printLoanMoney != null;
  }

  public void setPrintLoanMoneyIsSet(boolean value) {
    if (!value) {
      this.printLoanMoney = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case DEPT_NAME:
      if (value == null) {
        unsetDeptName();
      } else {
        setDeptName((String)value);
      }
      break;

    case PM_NAME:
      if (value == null) {
        unsetPmName();
      } else {
        setPmName((String)value);
      }
      break;

    case BUYER_SELLER_TYPE:
      if (value == null) {
        unsetBuyerSellerType();
      } else {
        setBuyerSellerType((Integer)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case REAL_LOAN_MONEY:
      if (value == null) {
        unsetRealLoanMoney();
      } else {
        setRealLoanMoney((Double)value);
      }
      break;

    case FORECLOSURE_MONEY:
      if (value == null) {
        unsetForeclosureMoney();
      } else {
        setForeclosureMoney((Double)value);
      }
      break;

    case REFUND_TAIL_MONEY:
      if (value == null) {
        unsetRefundTailMoney();
      } else {
        setRefundTailMoney((Double)value);
      }
      break;

    case COLLECT_FILE_LIST:
      if (value == null) {
        unsetCollectFileList();
      } else {
        setCollectFileList((List<CollectFileDTO>)value);
      }
      break;

    case PRINT_TYPE:
      if (value == null) {
        unsetPrintType();
      } else {
        setPrintType((Integer)value);
      }
      break;

    case PRINT_LOAN_MONEY:
      if (value == null) {
        unsetPrintLoanMoney();
      } else {
        setPrintLoanMoney((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case DEPT_NAME:
      return getDeptName();

    case PM_NAME:
      return getPmName();

    case BUYER_SELLER_TYPE:
      return Integer.valueOf(getBuyerSellerType());

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case HOUSE_NAME:
      return getHouseName();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case REAL_LOAN_MONEY:
      return Double.valueOf(getRealLoanMoney());

    case FORECLOSURE_MONEY:
      return Double.valueOf(getForeclosureMoney());

    case REFUND_TAIL_MONEY:
      return Double.valueOf(getRefundTailMoney());

    case COLLECT_FILE_LIST:
      return getCollectFileList();

    case PRINT_TYPE:
      return Integer.valueOf(getPrintType());

    case PRINT_LOAN_MONEY:
      return getPrintLoanMoney();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case DEPT_NAME:
      return isSetDeptName();
    case PM_NAME:
      return isSetPmName();
    case BUYER_SELLER_TYPE:
      return isSetBuyerSellerType();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case HOUSE_NAME:
      return isSetHouseName();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case REAL_LOAN_MONEY:
      return isSetRealLoanMoney();
    case FORECLOSURE_MONEY:
      return isSetForeclosureMoney();
    case REFUND_TAIL_MONEY:
      return isSetRefundTailMoney();
    case COLLECT_FILE_LIST:
      return isSetCollectFileList();
    case PRINT_TYPE:
      return isSetPrintType();
    case PRINT_LOAN_MONEY:
      return isSetPrintLoanMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectFilePrintInfo)
      return this.equals((CollectFilePrintInfo)that);
    return false;
  }

  public boolean equals(CollectFilePrintInfo that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_deptName = true && this.isSetDeptName();
    boolean that_present_deptName = true && that.isSetDeptName();
    if (this_present_deptName || that_present_deptName) {
      if (!(this_present_deptName && that_present_deptName))
        return false;
      if (!this.deptName.equals(that.deptName))
        return false;
    }

    boolean this_present_pmName = true && this.isSetPmName();
    boolean that_present_pmName = true && that.isSetPmName();
    if (this_present_pmName || that_present_pmName) {
      if (!(this_present_pmName && that_present_pmName))
        return false;
      if (!this.pmName.equals(that.pmName))
        return false;
    }

    boolean this_present_buyerSellerType = true;
    boolean that_present_buyerSellerType = true;
    if (this_present_buyerSellerType || that_present_buyerSellerType) {
      if (!(this_present_buyerSellerType && that_present_buyerSellerType))
        return false;
      if (this.buyerSellerType != that.buyerSellerType)
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_realLoanMoney = true;
    boolean that_present_realLoanMoney = true;
    if (this_present_realLoanMoney || that_present_realLoanMoney) {
      if (!(this_present_realLoanMoney && that_present_realLoanMoney))
        return false;
      if (this.realLoanMoney != that.realLoanMoney)
        return false;
    }

    boolean this_present_foreclosureMoney = true;
    boolean that_present_foreclosureMoney = true;
    if (this_present_foreclosureMoney || that_present_foreclosureMoney) {
      if (!(this_present_foreclosureMoney && that_present_foreclosureMoney))
        return false;
      if (this.foreclosureMoney != that.foreclosureMoney)
        return false;
    }

    boolean this_present_refundTailMoney = true;
    boolean that_present_refundTailMoney = true;
    if (this_present_refundTailMoney || that_present_refundTailMoney) {
      if (!(this_present_refundTailMoney && that_present_refundTailMoney))
        return false;
      if (this.refundTailMoney != that.refundTailMoney)
        return false;
    }

    boolean this_present_collectFileList = true && this.isSetCollectFileList();
    boolean that_present_collectFileList = true && that.isSetCollectFileList();
    if (this_present_collectFileList || that_present_collectFileList) {
      if (!(this_present_collectFileList && that_present_collectFileList))
        return false;
      if (!this.collectFileList.equals(that.collectFileList))
        return false;
    }

    boolean this_present_printType = true;
    boolean that_present_printType = true;
    if (this_present_printType || that_present_printType) {
      if (!(this_present_printType && that_present_printType))
        return false;
      if (this.printType != that.printType)
        return false;
    }

    boolean this_present_printLoanMoney = true && this.isSetPrintLoanMoney();
    boolean that_present_printLoanMoney = true && that.isSetPrintLoanMoney();
    if (this_present_printLoanMoney || that_present_printLoanMoney) {
      if (!(this_present_printLoanMoney && that_present_printLoanMoney))
        return false;
      if (!this.printLoanMoney.equals(that.printLoanMoney))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_deptName = true && (isSetDeptName());
    list.add(present_deptName);
    if (present_deptName)
      list.add(deptName);

    boolean present_pmName = true && (isSetPmName());
    list.add(present_pmName);
    if (present_pmName)
      list.add(pmName);

    boolean present_buyerSellerType = true;
    list.add(present_buyerSellerType);
    if (present_buyerSellerType)
      list.add(buyerSellerType);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_realLoanMoney = true;
    list.add(present_realLoanMoney);
    if (present_realLoanMoney)
      list.add(realLoanMoney);

    boolean present_foreclosureMoney = true;
    list.add(present_foreclosureMoney);
    if (present_foreclosureMoney)
      list.add(foreclosureMoney);

    boolean present_refundTailMoney = true;
    list.add(present_refundTailMoney);
    if (present_refundTailMoney)
      list.add(refundTailMoney);

    boolean present_collectFileList = true && (isSetCollectFileList());
    list.add(present_collectFileList);
    if (present_collectFileList)
      list.add(collectFileList);

    boolean present_printType = true;
    list.add(present_printType);
    if (present_printType)
      list.add(printType);

    boolean present_printLoanMoney = true && (isSetPrintLoanMoney());
    list.add(present_printLoanMoney);
    if (present_printLoanMoney)
      list.add(printLoanMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectFilePrintInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptName()).compareTo(other.isSetDeptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptName, other.deptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmName()).compareTo(other.isSetPmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmName, other.pmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerSellerType()).compareTo(other.isSetBuyerSellerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerSellerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerSellerType, other.buyerSellerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealLoanMoney()).compareTo(other.isSetRealLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realLoanMoney, other.realLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureMoney()).compareTo(other.isSetForeclosureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureMoney, other.foreclosureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundTailMoney()).compareTo(other.isSetRefundTailMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundTailMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundTailMoney, other.refundTailMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFileList()).compareTo(other.isSetCollectFileList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFileList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFileList, other.collectFileList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintType()).compareTo(other.isSetPrintType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printType, other.printType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintLoanMoney()).compareTo(other.isSetPrintLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printLoanMoney, other.printLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectFilePrintInfo(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptName:");
    if (this.deptName == null) {
      sb.append("null");
    } else {
      sb.append(this.deptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmName:");
    if (this.pmName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerSellerType:");
    sb.append(this.buyerSellerType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realLoanMoney:");
    sb.append(this.realLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureMoney:");
    sb.append(this.foreclosureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundTailMoney:");
    sb.append(this.refundTailMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFileList:");
    if (this.collectFileList == null) {
      sb.append("null");
    } else {
      sb.append(this.collectFileList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("printType:");
    sb.append(this.printType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("printLoanMoney:");
    if (this.printLoanMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.printLoanMoney);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectFilePrintInfoStandardSchemeFactory implements SchemeFactory {
    public CollectFilePrintInfoStandardScheme getScheme() {
      return new CollectFilePrintInfoStandardScheme();
    }
  }

  private static class CollectFilePrintInfoStandardScheme extends StandardScheme<CollectFilePrintInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectFilePrintInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptName = iprot.readString();
              struct.setDeptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmName = iprot.readString();
              struct.setPmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUYER_SELLER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buyerSellerType = iprot.readI32();
              struct.setBuyerSellerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REAL_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realLoanMoney = iprot.readDouble();
              struct.setRealLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FORECLOSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.foreclosureMoney = iprot.readDouble();
              struct.setForeclosureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REFUND_TAIL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundTailMoney = iprot.readDouble();
              struct.setRefundTailMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COLLECT_FILE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                struct.collectFileList = new ArrayList<CollectFileDTO>(_list200.size);
                CollectFileDTO _elem201;
                for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                {
                  _elem201 = new CollectFileDTO();
                  _elem201.read(iprot);
                  struct.collectFileList.add(_elem201);
                }
                iprot.readListEnd();
              }
              struct.setCollectFileListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRINT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.printType = iprot.readI32();
              struct.setPrintTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRINT_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.printLoanMoney = iprot.readString();
              struct.setPrintLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectFilePrintInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.deptName != null) {
        oprot.writeFieldBegin(DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.deptName);
        oprot.writeFieldEnd();
      }
      if (struct.pmName != null) {
        oprot.writeFieldBegin(PM_NAME_FIELD_DESC);
        oprot.writeString(struct.pmName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUYER_SELLER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.buyerSellerType);
      oprot.writeFieldEnd();
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.foreclosureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_TAIL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.refundTailMoney);
      oprot.writeFieldEnd();
      if (struct.collectFileList != null) {
        oprot.writeFieldBegin(COLLECT_FILE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.collectFileList.size()));
          for (CollectFileDTO _iter203 : struct.collectFileList)
          {
            _iter203.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRINT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.printType);
      oprot.writeFieldEnd();
      if (struct.printLoanMoney != null) {
        oprot.writeFieldBegin(PRINT_LOAN_MONEY_FIELD_DESC);
        oprot.writeString(struct.printLoanMoney);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectFilePrintInfoTupleSchemeFactory implements SchemeFactory {
    public CollectFilePrintInfoTupleScheme getScheme() {
      return new CollectFilePrintInfoTupleScheme();
    }
  }

  private static class CollectFilePrintInfoTupleScheme extends TupleScheme<CollectFilePrintInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectFilePrintInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetDeptName()) {
        optionals.set(2);
      }
      if (struct.isSetPmName()) {
        optionals.set(3);
      }
      if (struct.isSetBuyerSellerType()) {
        optionals.set(4);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(5);
      }
      if (struct.isSetSellerName()) {
        optionals.set(6);
      }
      if (struct.isSetHouseName()) {
        optionals.set(7);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(8);
      }
      if (struct.isSetRealLoanMoney()) {
        optionals.set(9);
      }
      if (struct.isSetForeclosureMoney()) {
        optionals.set(10);
      }
      if (struct.isSetRefundTailMoney()) {
        optionals.set(11);
      }
      if (struct.isSetCollectFileList()) {
        optionals.set(12);
      }
      if (struct.isSetPrintType()) {
        optionals.set(13);
      }
      if (struct.isSetPrintLoanMoney()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetDeptName()) {
        oprot.writeString(struct.deptName);
      }
      if (struct.isSetPmName()) {
        oprot.writeString(struct.pmName);
      }
      if (struct.isSetBuyerSellerType()) {
        oprot.writeI32(struct.buyerSellerType);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetRealLoanMoney()) {
        oprot.writeDouble(struct.realLoanMoney);
      }
      if (struct.isSetForeclosureMoney()) {
        oprot.writeDouble(struct.foreclosureMoney);
      }
      if (struct.isSetRefundTailMoney()) {
        oprot.writeDouble(struct.refundTailMoney);
      }
      if (struct.isSetCollectFileList()) {
        {
          oprot.writeI32(struct.collectFileList.size());
          for (CollectFileDTO _iter204 : struct.collectFileList)
          {
            _iter204.write(oprot);
          }
        }
      }
      if (struct.isSetPrintType()) {
        oprot.writeI32(struct.printType);
      }
      if (struct.isSetPrintLoanMoney()) {
        oprot.writeString(struct.printLoanMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectFilePrintInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deptName = iprot.readString();
        struct.setDeptNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pmName = iprot.readString();
        struct.setPmNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.buyerSellerType = iprot.readI32();
        struct.setBuyerSellerTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.realLoanMoney = iprot.readDouble();
        struct.setRealLoanMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.foreclosureMoney = iprot.readDouble();
        struct.setForeclosureMoneyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.refundTailMoney = iprot.readDouble();
        struct.setRefundTailMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.collectFileList = new ArrayList<CollectFileDTO>(_list205.size);
          CollectFileDTO _elem206;
          for (int _i207 = 0; _i207 < _list205.size; ++_i207)
          {
            _elem206 = new CollectFileDTO();
            _elem206.read(iprot);
            struct.collectFileList.add(_elem206);
          }
        }
        struct.setCollectFileListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.printType = iprot.readI32();
        struct.setPrintTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.printLoanMoney = iprot.readString();
        struct.setPrintLoanMoneyIsSet(true);
      }
    }
  }

}


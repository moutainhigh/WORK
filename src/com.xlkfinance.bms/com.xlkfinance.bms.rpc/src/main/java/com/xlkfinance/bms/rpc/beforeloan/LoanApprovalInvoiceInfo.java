/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class LoanApprovalInvoiceInfo implements org.apache.thrift.TBase<LoanApprovalInvoiceInfo, LoanApprovalInvoiceInfo._Fields>, java.io.Serializable, Cloneable, Comparable<LoanApprovalInvoiceInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanApprovalInvoiceInfo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEETING_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PM_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUser", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GUARANTEE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField SHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrincipal", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldMangCost", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDT", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDT", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField REPAY_FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("repayFun", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ACC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LOAN_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanCardId", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanApprovalInvoiceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanApprovalInvoiceInfoTupleSchemeFactory());
  }

  public String name; // required
  public String contractNo; // required
  public String cusType; // required
  public String meetingNo; // required
  public int repayCycle; // required
  public String pmUser; // required
  public String guaranteeType; // required
  public int creditAmt; // required
  public double monthLoanInterest; // required
  public String shouldPrincipal; // required
  public double monthLoanMgr; // required
  public String shouldMangCost; // required
  public String planOutLoanDT; // required
  public String planRepayLoanDT; // required
  public int repayDate; // required
  public String repayFun; // required
  public String accName; // required
  public String bankName; // required
  public String loanCardId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    CONTRACT_NO((short)2, "contractNo"),
    CUS_TYPE((short)3, "cusType"),
    MEETING_NO((short)4, "meetingNo"),
    REPAY_CYCLE((short)5, "repayCycle"),
    PM_USER((short)6, "pmUser"),
    GUARANTEE_TYPE((short)7, "guaranteeType"),
    CREDIT_AMT((short)8, "creditAmt"),
    MONTH_LOAN_INTEREST((short)9, "monthLoanInterest"),
    SHOULD_PRINCIPAL((short)10, "shouldPrincipal"),
    MONTH_LOAN_MGR((short)11, "monthLoanMgr"),
    SHOULD_MANG_COST((short)12, "shouldMangCost"),
    PLAN_OUT_LOAN_DT((short)13, "planOutLoanDT"),
    PLAN_REPAY_LOAN_DT((short)14, "planRepayLoanDT"),
    REPAY_DATE((short)15, "repayDate"),
    REPAY_FUN((short)16, "repayFun"),
    ACC_NAME((short)17, "accName"),
    BANK_NAME((short)18, "bankName"),
    LOAN_CARD_ID((short)19, "loanCardId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // CONTRACT_NO
          return CONTRACT_NO;
        case 3: // CUS_TYPE
          return CUS_TYPE;
        case 4: // MEETING_NO
          return MEETING_NO;
        case 5: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 6: // PM_USER
          return PM_USER;
        case 7: // GUARANTEE_TYPE
          return GUARANTEE_TYPE;
        case 8: // CREDIT_AMT
          return CREDIT_AMT;
        case 9: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 10: // SHOULD_PRINCIPAL
          return SHOULD_PRINCIPAL;
        case 11: // MONTH_LOAN_MGR
          return MONTH_LOAN_MGR;
        case 12: // SHOULD_MANG_COST
          return SHOULD_MANG_COST;
        case 13: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 14: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 15: // REPAY_DATE
          return REPAY_DATE;
        case 16: // REPAY_FUN
          return REPAY_FUN;
        case 17: // ACC_NAME
          return ACC_NAME;
        case 18: // BANK_NAME
          return BANK_NAME;
        case 19: // LOAN_CARD_ID
          return LOAN_CARD_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPAYCYCLE_ISSET_ID = 0;
  private static final int __CREDITAMT_ISSET_ID = 1;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 2;
  private static final int __MONTHLOANMGR_ISSET_ID = 3;
  private static final int __REPAYDATE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_NO, new org.apache.thrift.meta_data.FieldMetaData("meetingNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER, new org.apache.thrift.meta_data.FieldMetaData("pmUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUARANTEE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("guaranteeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("monthLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_FUN, new org.apache.thrift.meta_data.FieldMetaData("repayFun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_NAME, new org.apache.thrift.meta_data.FieldMetaData("accName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("loanCardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanApprovalInvoiceInfo.class, metaDataMap);
  }

  public LoanApprovalInvoiceInfo() {
  }

  public LoanApprovalInvoiceInfo(
    String name,
    String contractNo,
    String cusType,
    String meetingNo,
    int repayCycle,
    String pmUser,
    String guaranteeType,
    int creditAmt,
    double monthLoanInterest,
    String shouldPrincipal,
    double monthLoanMgr,
    String shouldMangCost,
    String planOutLoanDT,
    String planRepayLoanDT,
    int repayDate,
    String repayFun,
    String accName,
    String bankName,
    String loanCardId)
  {
    this();
    this.name = name;
    this.contractNo = contractNo;
    this.cusType = cusType;
    this.meetingNo = meetingNo;
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    this.pmUser = pmUser;
    this.guaranteeType = guaranteeType;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.shouldPrincipal = shouldPrincipal;
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    this.shouldMangCost = shouldMangCost;
    this.planOutLoanDT = planOutLoanDT;
    this.planRepayLoanDT = planRepayLoanDT;
    this.repayDate = repayDate;
    setRepayDateIsSet(true);
    this.repayFun = repayFun;
    this.accName = accName;
    this.bankName = bankName;
    this.loanCardId = loanCardId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanApprovalInvoiceInfo(LoanApprovalInvoiceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    if (other.isSetMeetingNo()) {
      this.meetingNo = other.meetingNo;
    }
    this.repayCycle = other.repayCycle;
    if (other.isSetPmUser()) {
      this.pmUser = other.pmUser;
    }
    if (other.isSetGuaranteeType()) {
      this.guaranteeType = other.guaranteeType;
    }
    this.creditAmt = other.creditAmt;
    this.monthLoanInterest = other.monthLoanInterest;
    if (other.isSetShouldPrincipal()) {
      this.shouldPrincipal = other.shouldPrincipal;
    }
    this.monthLoanMgr = other.monthLoanMgr;
    if (other.isSetShouldMangCost()) {
      this.shouldMangCost = other.shouldMangCost;
    }
    if (other.isSetPlanOutLoanDT()) {
      this.planOutLoanDT = other.planOutLoanDT;
    }
    if (other.isSetPlanRepayLoanDT()) {
      this.planRepayLoanDT = other.planRepayLoanDT;
    }
    this.repayDate = other.repayDate;
    if (other.isSetRepayFun()) {
      this.repayFun = other.repayFun;
    }
    if (other.isSetAccName()) {
      this.accName = other.accName;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetLoanCardId()) {
      this.loanCardId = other.loanCardId;
    }
  }

  public LoanApprovalInvoiceInfo deepCopy() {
    return new LoanApprovalInvoiceInfo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.contractNo = null;
    this.cusType = null;
    this.meetingNo = null;
    setRepayCycleIsSet(false);
    this.repayCycle = 0;
    this.pmUser = null;
    this.guaranteeType = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
    this.shouldPrincipal = null;
    setMonthLoanMgrIsSet(false);
    this.monthLoanMgr = 0.0;
    this.shouldMangCost = null;
    this.planOutLoanDT = null;
    this.planRepayLoanDT = null;
    setRepayDateIsSet(false);
    this.repayDate = 0;
    this.repayFun = null;
    this.accName = null;
    this.bankName = null;
    this.loanCardId = null;
  }

  public String getName() {
    return this.name;
  }

  public LoanApprovalInvoiceInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public LoanApprovalInvoiceInfo setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public LoanApprovalInvoiceInfo setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public String getMeetingNo() {
    return this.meetingNo;
  }

  public LoanApprovalInvoiceInfo setMeetingNo(String meetingNo) {
    this.meetingNo = meetingNo;
    return this;
  }

  public void unsetMeetingNo() {
    this.meetingNo = null;
  }

  /** Returns true if field meetingNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingNo() {
    return this.meetingNo != null;
  }

  public void setMeetingNoIsSet(boolean value) {
    if (!value) {
      this.meetingNo = null;
    }
  }

  public int getRepayCycle() {
    return this.repayCycle;
  }

  public LoanApprovalInvoiceInfo setRepayCycle(int repayCycle) {
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    return this;
  }

  public void unsetRepayCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  public void setRepayCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID, value);
  }

  public String getPmUser() {
    return this.pmUser;
  }

  public LoanApprovalInvoiceInfo setPmUser(String pmUser) {
    this.pmUser = pmUser;
    return this;
  }

  public void unsetPmUser() {
    this.pmUser = null;
  }

  /** Returns true if field pmUser is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUser() {
    return this.pmUser != null;
  }

  public void setPmUserIsSet(boolean value) {
    if (!value) {
      this.pmUser = null;
    }
  }

  public String getGuaranteeType() {
    return this.guaranteeType;
  }

  public LoanApprovalInvoiceInfo setGuaranteeType(String guaranteeType) {
    this.guaranteeType = guaranteeType;
    return this;
  }

  public void unsetGuaranteeType() {
    this.guaranteeType = null;
  }

  /** Returns true if field guaranteeType is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeType() {
    return this.guaranteeType != null;
  }

  public void setGuaranteeTypeIsSet(boolean value) {
    if (!value) {
      this.guaranteeType = null;
    }
  }

  public int getCreditAmt() {
    return this.creditAmt;
  }

  public LoanApprovalInvoiceInfo setCreditAmt(int creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public LoanApprovalInvoiceInfo setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public String getShouldPrincipal() {
    return this.shouldPrincipal;
  }

  public LoanApprovalInvoiceInfo setShouldPrincipal(String shouldPrincipal) {
    this.shouldPrincipal = shouldPrincipal;
    return this;
  }

  public void unsetShouldPrincipal() {
    this.shouldPrincipal = null;
  }

  /** Returns true if field shouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrincipal() {
    return this.shouldPrincipal != null;
  }

  public void setShouldPrincipalIsSet(boolean value) {
    if (!value) {
      this.shouldPrincipal = null;
    }
  }

  public double getMonthLoanMgr() {
    return this.monthLoanMgr;
  }

  public LoanApprovalInvoiceInfo setMonthLoanMgr(double monthLoanMgr) {
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    return this;
  }

  public void unsetMonthLoanMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  /** Returns true if field monthLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  public void setMonthLoanMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID, value);
  }

  public String getShouldMangCost() {
    return this.shouldMangCost;
  }

  public LoanApprovalInvoiceInfo setShouldMangCost(String shouldMangCost) {
    this.shouldMangCost = shouldMangCost;
    return this;
  }

  public void unsetShouldMangCost() {
    this.shouldMangCost = null;
  }

  /** Returns true if field shouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldMangCost() {
    return this.shouldMangCost != null;
  }

  public void setShouldMangCostIsSet(boolean value) {
    if (!value) {
      this.shouldMangCost = null;
    }
  }

  public String getPlanOutLoanDT() {
    return this.planOutLoanDT;
  }

  public LoanApprovalInvoiceInfo setPlanOutLoanDT(String planOutLoanDT) {
    this.planOutLoanDT = planOutLoanDT;
    return this;
  }

  public void unsetPlanOutLoanDT() {
    this.planOutLoanDT = null;
  }

  /** Returns true if field planOutLoanDT is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDT() {
    return this.planOutLoanDT != null;
  }

  public void setPlanOutLoanDTIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDT = null;
    }
  }

  public String getPlanRepayLoanDT() {
    return this.planRepayLoanDT;
  }

  public LoanApprovalInvoiceInfo setPlanRepayLoanDT(String planRepayLoanDT) {
    this.planRepayLoanDT = planRepayLoanDT;
    return this;
  }

  public void unsetPlanRepayLoanDT() {
    this.planRepayLoanDT = null;
  }

  /** Returns true if field planRepayLoanDT is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDT() {
    return this.planRepayLoanDT != null;
  }

  public void setPlanRepayLoanDTIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDT = null;
    }
  }

  public int getRepayDate() {
    return this.repayDate;
  }

  public LoanApprovalInvoiceInfo setRepayDate(int repayDate) {
    this.repayDate = repayDate;
    setRepayDateIsSet(true);
    return this;
  }

  public void unsetRepayDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYDATE_ISSET_ID);
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYDATE_ISSET_ID);
  }

  public void setRepayDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYDATE_ISSET_ID, value);
  }

  public String getRepayFun() {
    return this.repayFun;
  }

  public LoanApprovalInvoiceInfo setRepayFun(String repayFun) {
    this.repayFun = repayFun;
    return this;
  }

  public void unsetRepayFun() {
    this.repayFun = null;
  }

  /** Returns true if field repayFun is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayFun() {
    return this.repayFun != null;
  }

  public void setRepayFunIsSet(boolean value) {
    if (!value) {
      this.repayFun = null;
    }
  }

  public String getAccName() {
    return this.accName;
  }

  public LoanApprovalInvoiceInfo setAccName(String accName) {
    this.accName = accName;
    return this;
  }

  public void unsetAccName() {
    this.accName = null;
  }

  /** Returns true if field accName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccName() {
    return this.accName != null;
  }

  public void setAccNameIsSet(boolean value) {
    if (!value) {
      this.accName = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public LoanApprovalInvoiceInfo setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getLoanCardId() {
    return this.loanCardId;
  }

  public LoanApprovalInvoiceInfo setLoanCardId(String loanCardId) {
    this.loanCardId = loanCardId;
    return this;
  }

  public void unsetLoanCardId() {
    this.loanCardId = null;
  }

  /** Returns true if field loanCardId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanCardId() {
    return this.loanCardId != null;
  }

  public void setLoanCardIdIsSet(boolean value) {
    if (!value) {
      this.loanCardId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case MEETING_NO:
      if (value == null) {
        unsetMeetingNo();
      } else {
        setMeetingNo((String)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((Integer)value);
      }
      break;

    case PM_USER:
      if (value == null) {
        unsetPmUser();
      } else {
        setPmUser((String)value);
      }
      break;

    case GUARANTEE_TYPE:
      if (value == null) {
        unsetGuaranteeType();
      } else {
        setGuaranteeType((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Integer)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case SHOULD_PRINCIPAL:
      if (value == null) {
        unsetShouldPrincipal();
      } else {
        setShouldPrincipal((String)value);
      }
      break;

    case MONTH_LOAN_MGR:
      if (value == null) {
        unsetMonthLoanMgr();
      } else {
        setMonthLoanMgr((Double)value);
      }
      break;

    case SHOULD_MANG_COST:
      if (value == null) {
        unsetShouldMangCost();
      } else {
        setShouldMangCost((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDT();
      } else {
        setPlanOutLoanDT((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDT();
      } else {
        setPlanRepayLoanDT((String)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((Integer)value);
      }
      break;

    case REPAY_FUN:
      if (value == null) {
        unsetRepayFun();
      } else {
        setRepayFun((String)value);
      }
      break;

    case ACC_NAME:
      if (value == null) {
        unsetAccName();
      } else {
        setAccName((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case LOAN_CARD_ID:
      if (value == null) {
        unsetLoanCardId();
      } else {
        setLoanCardId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case CONTRACT_NO:
      return getContractNo();

    case CUS_TYPE:
      return getCusType();

    case MEETING_NO:
      return getMeetingNo();

    case REPAY_CYCLE:
      return Integer.valueOf(getRepayCycle());

    case PM_USER:
      return getPmUser();

    case GUARANTEE_TYPE:
      return getGuaranteeType();

    case CREDIT_AMT:
      return Integer.valueOf(getCreditAmt());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case SHOULD_PRINCIPAL:
      return getShouldPrincipal();

    case MONTH_LOAN_MGR:
      return Double.valueOf(getMonthLoanMgr());

    case SHOULD_MANG_COST:
      return getShouldMangCost();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDT();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDT();

    case REPAY_DATE:
      return Integer.valueOf(getRepayDate());

    case REPAY_FUN:
      return getRepayFun();

    case ACC_NAME:
      return getAccName();

    case BANK_NAME:
      return getBankName();

    case LOAN_CARD_ID:
      return getLoanCardId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case CONTRACT_NO:
      return isSetContractNo();
    case CUS_TYPE:
      return isSetCusType();
    case MEETING_NO:
      return isSetMeetingNo();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case PM_USER:
      return isSetPmUser();
    case GUARANTEE_TYPE:
      return isSetGuaranteeType();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case SHOULD_PRINCIPAL:
      return isSetShouldPrincipal();
    case MONTH_LOAN_MGR:
      return isSetMonthLoanMgr();
    case SHOULD_MANG_COST:
      return isSetShouldMangCost();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDT();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDT();
    case REPAY_DATE:
      return isSetRepayDate();
    case REPAY_FUN:
      return isSetRepayFun();
    case ACC_NAME:
      return isSetAccName();
    case BANK_NAME:
      return isSetBankName();
    case LOAN_CARD_ID:
      return isSetLoanCardId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanApprovalInvoiceInfo)
      return this.equals((LoanApprovalInvoiceInfo)that);
    return false;
  }

  public boolean equals(LoanApprovalInvoiceInfo that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_meetingNo = true && this.isSetMeetingNo();
    boolean that_present_meetingNo = true && that.isSetMeetingNo();
    if (this_present_meetingNo || that_present_meetingNo) {
      if (!(this_present_meetingNo && that_present_meetingNo))
        return false;
      if (!this.meetingNo.equals(that.meetingNo))
        return false;
    }

    boolean this_present_repayCycle = true;
    boolean that_present_repayCycle = true;
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (this.repayCycle != that.repayCycle)
        return false;
    }

    boolean this_present_pmUser = true && this.isSetPmUser();
    boolean that_present_pmUser = true && that.isSetPmUser();
    if (this_present_pmUser || that_present_pmUser) {
      if (!(this_present_pmUser && that_present_pmUser))
        return false;
      if (!this.pmUser.equals(that.pmUser))
        return false;
    }

    boolean this_present_guaranteeType = true && this.isSetGuaranteeType();
    boolean that_present_guaranteeType = true && that.isSetGuaranteeType();
    if (this_present_guaranteeType || that_present_guaranteeType) {
      if (!(this_present_guaranteeType && that_present_guaranteeType))
        return false;
      if (!this.guaranteeType.equals(that.guaranteeType))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_shouldPrincipal = true && this.isSetShouldPrincipal();
    boolean that_present_shouldPrincipal = true && that.isSetShouldPrincipal();
    if (this_present_shouldPrincipal || that_present_shouldPrincipal) {
      if (!(this_present_shouldPrincipal && that_present_shouldPrincipal))
        return false;
      if (!this.shouldPrincipal.equals(that.shouldPrincipal))
        return false;
    }

    boolean this_present_monthLoanMgr = true;
    boolean that_present_monthLoanMgr = true;
    if (this_present_monthLoanMgr || that_present_monthLoanMgr) {
      if (!(this_present_monthLoanMgr && that_present_monthLoanMgr))
        return false;
      if (this.monthLoanMgr != that.monthLoanMgr)
        return false;
    }

    boolean this_present_shouldMangCost = true && this.isSetShouldMangCost();
    boolean that_present_shouldMangCost = true && that.isSetShouldMangCost();
    if (this_present_shouldMangCost || that_present_shouldMangCost) {
      if (!(this_present_shouldMangCost && that_present_shouldMangCost))
        return false;
      if (!this.shouldMangCost.equals(that.shouldMangCost))
        return false;
    }

    boolean this_present_planOutLoanDT = true && this.isSetPlanOutLoanDT();
    boolean that_present_planOutLoanDT = true && that.isSetPlanOutLoanDT();
    if (this_present_planOutLoanDT || that_present_planOutLoanDT) {
      if (!(this_present_planOutLoanDT && that_present_planOutLoanDT))
        return false;
      if (!this.planOutLoanDT.equals(that.planOutLoanDT))
        return false;
    }

    boolean this_present_planRepayLoanDT = true && this.isSetPlanRepayLoanDT();
    boolean that_present_planRepayLoanDT = true && that.isSetPlanRepayLoanDT();
    if (this_present_planRepayLoanDT || that_present_planRepayLoanDT) {
      if (!(this_present_planRepayLoanDT && that_present_planRepayLoanDT))
        return false;
      if (!this.planRepayLoanDT.equals(that.planRepayLoanDT))
        return false;
    }

    boolean this_present_repayDate = true;
    boolean that_present_repayDate = true;
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (this.repayDate != that.repayDate)
        return false;
    }

    boolean this_present_repayFun = true && this.isSetRepayFun();
    boolean that_present_repayFun = true && that.isSetRepayFun();
    if (this_present_repayFun || that_present_repayFun) {
      if (!(this_present_repayFun && that_present_repayFun))
        return false;
      if (!this.repayFun.equals(that.repayFun))
        return false;
    }

    boolean this_present_accName = true && this.isSetAccName();
    boolean that_present_accName = true && that.isSetAccName();
    if (this_present_accName || that_present_accName) {
      if (!(this_present_accName && that_present_accName))
        return false;
      if (!this.accName.equals(that.accName))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_loanCardId = true && this.isSetLoanCardId();
    boolean that_present_loanCardId = true && that.isSetLoanCardId();
    if (this_present_loanCardId || that_present_loanCardId) {
      if (!(this_present_loanCardId && that_present_loanCardId))
        return false;
      if (!this.loanCardId.equals(that.loanCardId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_contractNo = true && (isSetContractNo());
    list.add(present_contractNo);
    if (present_contractNo)
      list.add(contractNo);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_meetingNo = true && (isSetMeetingNo());
    list.add(present_meetingNo);
    if (present_meetingNo)
      list.add(meetingNo);

    boolean present_repayCycle = true;
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_pmUser = true && (isSetPmUser());
    list.add(present_pmUser);
    if (present_pmUser)
      list.add(pmUser);

    boolean present_guaranteeType = true && (isSetGuaranteeType());
    list.add(present_guaranteeType);
    if (present_guaranteeType)
      list.add(guaranteeType);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_shouldPrincipal = true && (isSetShouldPrincipal());
    list.add(present_shouldPrincipal);
    if (present_shouldPrincipal)
      list.add(shouldPrincipal);

    boolean present_monthLoanMgr = true;
    list.add(present_monthLoanMgr);
    if (present_monthLoanMgr)
      list.add(monthLoanMgr);

    boolean present_shouldMangCost = true && (isSetShouldMangCost());
    list.add(present_shouldMangCost);
    if (present_shouldMangCost)
      list.add(shouldMangCost);

    boolean present_planOutLoanDT = true && (isSetPlanOutLoanDT());
    list.add(present_planOutLoanDT);
    if (present_planOutLoanDT)
      list.add(planOutLoanDT);

    boolean present_planRepayLoanDT = true && (isSetPlanRepayLoanDT());
    list.add(present_planRepayLoanDT);
    if (present_planRepayLoanDT)
      list.add(planRepayLoanDT);

    boolean present_repayDate = true;
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_repayFun = true && (isSetRepayFun());
    list.add(present_repayFun);
    if (present_repayFun)
      list.add(repayFun);

    boolean present_accName = true && (isSetAccName());
    list.add(present_accName);
    if (present_accName)
      list.add(accName);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_loanCardId = true && (isSetLoanCardId());
    list.add(present_loanCardId);
    if (present_loanCardId)
      list.add(loanCardId);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanApprovalInvoiceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingNo()).compareTo(other.isSetMeetingNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingNo, other.meetingNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUser()).compareTo(other.isSetPmUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUser, other.pmUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeType()).compareTo(other.isSetGuaranteeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeType, other.guaranteeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrincipal()).compareTo(other.isSetShouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrincipal, other.shouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanMgr()).compareTo(other.isSetMonthLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanMgr, other.monthLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldMangCost()).compareTo(other.isSetShouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldMangCost, other.shouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDT()).compareTo(other.isSetPlanOutLoanDT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDT, other.planOutLoanDT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDT()).compareTo(other.isSetPlanRepayLoanDT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDT, other.planRepayLoanDT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayFun()).compareTo(other.isSetRepayFun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayFun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayFun, other.repayFun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccName()).compareTo(other.isSetAccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accName, other.accName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanCardId()).compareTo(other.isSetLoanCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanCardId, other.loanCardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanApprovalInvoiceInfo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNo:");
    if (this.contractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingNo:");
    if (this.meetingNo == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    sb.append(this.repayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUser:");
    if (this.pmUser == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeType:");
    if (this.guaranteeType == null) {
      sb.append("null");
    } else {
      sb.append(this.guaranteeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrincipal:");
    if (this.shouldPrincipal == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldPrincipal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanMgr:");
    sb.append(this.monthLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldMangCost:");
    if (this.shouldMangCost == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldMangCost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDT:");
    if (this.planOutLoanDT == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDT:");
    if (this.planRepayLoanDT == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    sb.append(this.repayDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayFun:");
    if (this.repayFun == null) {
      sb.append("null");
    } else {
      sb.append(this.repayFun);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accName:");
    if (this.accName == null) {
      sb.append("null");
    } else {
      sb.append(this.accName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanCardId:");
    if (this.loanCardId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanCardId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanApprovalInvoiceInfoStandardSchemeFactory implements SchemeFactory {
    public LoanApprovalInvoiceInfoStandardScheme getScheme() {
      return new LoanApprovalInvoiceInfoStandardScheme();
    }
  }

  private static class LoanApprovalInvoiceInfoStandardScheme extends StandardScheme<LoanApprovalInvoiceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanApprovalInvoiceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEETING_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingNo = iprot.readString();
              struct.setMeetingNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycle = iprot.readI32();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PM_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUser = iprot.readString();
              struct.setPmUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GUARANTEE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guaranteeType = iprot.readString();
              struct.setGuaranteeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditAmt = iprot.readI32();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldPrincipal = iprot.readString();
              struct.setShouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MONTH_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanMgr = iprot.readDouble();
              struct.setMonthLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldMangCost = iprot.readString();
              struct.setShouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDT = iprot.readString();
              struct.setPlanOutLoanDTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDT = iprot.readString();
              struct.setPlanRepayLoanDTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayDate = iprot.readI32();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REPAY_FUN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayFun = iprot.readString();
              struct.setRepayFunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ACC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accName = iprot.readString();
              struct.setAccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOAN_CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanCardId = iprot.readString();
              struct.setLoanCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanApprovalInvoiceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.contractNo != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNo);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      if (struct.meetingNo != null) {
        oprot.writeFieldBegin(MEETING_NO_FIELD_DESC);
        oprot.writeString(struct.meetingNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.repayCycle);
      oprot.writeFieldEnd();
      if (struct.pmUser != null) {
        oprot.writeFieldBegin(PM_USER_FIELD_DESC);
        oprot.writeString(struct.pmUser);
        oprot.writeFieldEnd();
      }
      if (struct.guaranteeType != null) {
        oprot.writeFieldBegin(GUARANTEE_TYPE_FIELD_DESC);
        oprot.writeString(struct.guaranteeType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeI32(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      if (struct.shouldPrincipal != null) {
        oprot.writeFieldBegin(SHOULD_PRINCIPAL_FIELD_DESC);
        oprot.writeString(struct.shouldPrincipal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTH_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanMgr);
      oprot.writeFieldEnd();
      if (struct.shouldMangCost != null) {
        oprot.writeFieldBegin(SHOULD_MANG_COST_FIELD_DESC);
        oprot.writeString(struct.shouldMangCost);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDT != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDT);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDT != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDT);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
      oprot.writeI32(struct.repayDate);
      oprot.writeFieldEnd();
      if (struct.repayFun != null) {
        oprot.writeFieldBegin(REPAY_FUN_FIELD_DESC);
        oprot.writeString(struct.repayFun);
        oprot.writeFieldEnd();
      }
      if (struct.accName != null) {
        oprot.writeFieldBegin(ACC_NAME_FIELD_DESC);
        oprot.writeString(struct.accName);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.loanCardId != null) {
        oprot.writeFieldBegin(LOAN_CARD_ID_FIELD_DESC);
        oprot.writeString(struct.loanCardId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanApprovalInvoiceInfoTupleSchemeFactory implements SchemeFactory {
    public LoanApprovalInvoiceInfoTupleScheme getScheme() {
      return new LoanApprovalInvoiceInfoTupleScheme();
    }
  }

  private static class LoanApprovalInvoiceInfoTupleScheme extends TupleScheme<LoanApprovalInvoiceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanApprovalInvoiceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetContractNo()) {
        optionals.set(1);
      }
      if (struct.isSetCusType()) {
        optionals.set(2);
      }
      if (struct.isSetMeetingNo()) {
        optionals.set(3);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(4);
      }
      if (struct.isSetPmUser()) {
        optionals.set(5);
      }
      if (struct.isSetGuaranteeType()) {
        optionals.set(6);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(7);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(8);
      }
      if (struct.isSetShouldPrincipal()) {
        optionals.set(9);
      }
      if (struct.isSetMonthLoanMgr()) {
        optionals.set(10);
      }
      if (struct.isSetShouldMangCost()) {
        optionals.set(11);
      }
      if (struct.isSetPlanOutLoanDT()) {
        optionals.set(12);
      }
      if (struct.isSetPlanRepayLoanDT()) {
        optionals.set(13);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(14);
      }
      if (struct.isSetRepayFun()) {
        optionals.set(15);
      }
      if (struct.isSetAccName()) {
        optionals.set(16);
      }
      if (struct.isSetBankName()) {
        optionals.set(17);
      }
      if (struct.isSetLoanCardId()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetMeetingNo()) {
        oprot.writeString(struct.meetingNo);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeI32(struct.repayCycle);
      }
      if (struct.isSetPmUser()) {
        oprot.writeString(struct.pmUser);
      }
      if (struct.isSetGuaranteeType()) {
        oprot.writeString(struct.guaranteeType);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeI32(struct.creditAmt);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetShouldPrincipal()) {
        oprot.writeString(struct.shouldPrincipal);
      }
      if (struct.isSetMonthLoanMgr()) {
        oprot.writeDouble(struct.monthLoanMgr);
      }
      if (struct.isSetShouldMangCost()) {
        oprot.writeString(struct.shouldMangCost);
      }
      if (struct.isSetPlanOutLoanDT()) {
        oprot.writeString(struct.planOutLoanDT);
      }
      if (struct.isSetPlanRepayLoanDT()) {
        oprot.writeString(struct.planRepayLoanDT);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeI32(struct.repayDate);
      }
      if (struct.isSetRepayFun()) {
        oprot.writeString(struct.repayFun);
      }
      if (struct.isSetAccName()) {
        oprot.writeString(struct.accName);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetLoanCardId()) {
        oprot.writeString(struct.loanCardId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanApprovalInvoiceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.meetingNo = iprot.readString();
        struct.setMeetingNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.repayCycle = iprot.readI32();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pmUser = iprot.readString();
        struct.setPmUserIsSet(true);
      }
      if (incoming.get(6)) {
        struct.guaranteeType = iprot.readString();
        struct.setGuaranteeTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.creditAmt = iprot.readI32();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.shouldPrincipal = iprot.readString();
        struct.setShouldPrincipalIsSet(true);
      }
      if (incoming.get(10)) {
        struct.monthLoanMgr = iprot.readDouble();
        struct.setMonthLoanMgrIsSet(true);
      }
      if (incoming.get(11)) {
        struct.shouldMangCost = iprot.readString();
        struct.setShouldMangCostIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planOutLoanDT = iprot.readString();
        struct.setPlanOutLoanDTIsSet(true);
      }
      if (incoming.get(13)) {
        struct.planRepayLoanDT = iprot.readString();
        struct.setPlanRepayLoanDTIsSet(true);
      }
      if (incoming.get(14)) {
        struct.repayDate = iprot.readI32();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.repayFun = iprot.readString();
        struct.setRepayFunIsSet(true);
      }
      if (incoming.get(16)) {
        struct.accName = iprot.readString();
        struct.setAccNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.loanCardId = iprot.readString();
        struct.setLoanCardIdIsSet(true);
      }
    }
  }

}


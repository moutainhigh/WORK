/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ProjectDto implements org.apache.thrift.TBase<ProjectDto, ProjectDto._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectDto");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MANAGER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("managerName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PROMISE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("promiseMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOAN_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDay", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBank", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FORE_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("foreBank", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField HOUSE_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("houseCardNo", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanFee", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CHARGE_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeSituation", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LOAN_REQUEST_PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRequestProcess", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoneyStr", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PROMISE_MONEY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("promiseMoneyStr", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField PAYMENT_MONEY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMoneyStr", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MANAGER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("managerPhone", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SELLER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerPhone", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField BANK_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("bankUser", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField BANK_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPhone", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField BROKERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerage", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField IS_NEED_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedHandle", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField PAYMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentName", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField PAYMENT_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAccount", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField FORE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreAccount", org.apache.thrift.protocol.TType.STRING, (short)35);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectDtoTupleSchemeFactory());
  }

  public int projectId; // required
  public String orgName; // required
  public String managerName; // required
  public String pmUserName; // required
  public String acctName; // required
  public int loanMoney; // required
  public String sellerName; // required
  public double promiseMoney; // required
  public String productName; // required
  public String loanDay; // required
  public String paymentBank; // required
  public double paymentMoney; // required
  public String foreBank; // required
  public String houseCardNo; // required
  public String houseName; // required
  public double loanFee; // required
  public double poundage; // required
  public String chargeSituation; // required
  public String loanRequestProcess; // required
  public String projectNumber; // required
  public String loanMoneyStr; // required
  public String promiseMoneyStr; // required
  public String paymentMoneyStr; // required
  public String managerPhone; // required
  public String sellerPhone; // required
  public String bankUser; // required
  public String bankPhone; // required
  public String projectName; // required
  public int projectSource; // required
  public double brokerage; // required
  public int isNeedHandle; // required
  public String paymentName; // required
  public String paymentAccount; // required
  public String businessSourceStr; // required
  public String foreAccount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    ORG_NAME((short)2, "orgName"),
    MANAGER_NAME((short)3, "managerName"),
    PM_USER_NAME((short)4, "pmUserName"),
    ACCT_NAME((short)5, "acctName"),
    LOAN_MONEY((short)6, "loanMoney"),
    SELLER_NAME((short)7, "sellerName"),
    PROMISE_MONEY((short)8, "promiseMoney"),
    PRODUCT_NAME((short)9, "productName"),
    LOAN_DAY((short)10, "loanDay"),
    PAYMENT_BANK((short)11, "paymentBank"),
    PAYMENT_MONEY((short)12, "paymentMoney"),
    FORE_BANK((short)13, "foreBank"),
    HOUSE_CARD_NO((short)14, "houseCardNo"),
    HOUSE_NAME((short)15, "houseName"),
    LOAN_FEE((short)16, "loanFee"),
    POUNDAGE((short)17, "poundage"),
    CHARGE_SITUATION((short)18, "chargeSituation"),
    LOAN_REQUEST_PROCESS((short)19, "loanRequestProcess"),
    PROJECT_NUMBER((short)20, "projectNumber"),
    LOAN_MONEY_STR((short)21, "loanMoneyStr"),
    PROMISE_MONEY_STR((short)22, "promiseMoneyStr"),
    PAYMENT_MONEY_STR((short)23, "paymentMoneyStr"),
    MANAGER_PHONE((short)24, "managerPhone"),
    SELLER_PHONE((short)25, "sellerPhone"),
    BANK_USER((short)26, "bankUser"),
    BANK_PHONE((short)27, "bankPhone"),
    PROJECT_NAME((short)28, "projectName"),
    PROJECT_SOURCE((short)29, "projectSource"),
    BROKERAGE((short)30, "brokerage"),
    IS_NEED_HANDLE((short)31, "isNeedHandle"),
    PAYMENT_NAME((short)32, "paymentName"),
    PAYMENT_ACCOUNT((short)33, "paymentAccount"),
    BUSINESS_SOURCE_STR((short)34, "businessSourceStr"),
    FORE_ACCOUNT((short)35, "foreAccount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // ORG_NAME
          return ORG_NAME;
        case 3: // MANAGER_NAME
          return MANAGER_NAME;
        case 4: // PM_USER_NAME
          return PM_USER_NAME;
        case 5: // ACCT_NAME
          return ACCT_NAME;
        case 6: // LOAN_MONEY
          return LOAN_MONEY;
        case 7: // SELLER_NAME
          return SELLER_NAME;
        case 8: // PROMISE_MONEY
          return PROMISE_MONEY;
        case 9: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 10: // LOAN_DAY
          return LOAN_DAY;
        case 11: // PAYMENT_BANK
          return PAYMENT_BANK;
        case 12: // PAYMENT_MONEY
          return PAYMENT_MONEY;
        case 13: // FORE_BANK
          return FORE_BANK;
        case 14: // HOUSE_CARD_NO
          return HOUSE_CARD_NO;
        case 15: // HOUSE_NAME
          return HOUSE_NAME;
        case 16: // LOAN_FEE
          return LOAN_FEE;
        case 17: // POUNDAGE
          return POUNDAGE;
        case 18: // CHARGE_SITUATION
          return CHARGE_SITUATION;
        case 19: // LOAN_REQUEST_PROCESS
          return LOAN_REQUEST_PROCESS;
        case 20: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 21: // LOAN_MONEY_STR
          return LOAN_MONEY_STR;
        case 22: // PROMISE_MONEY_STR
          return PROMISE_MONEY_STR;
        case 23: // PAYMENT_MONEY_STR
          return PAYMENT_MONEY_STR;
        case 24: // MANAGER_PHONE
          return MANAGER_PHONE;
        case 25: // SELLER_PHONE
          return SELLER_PHONE;
        case 26: // BANK_USER
          return BANK_USER;
        case 27: // BANK_PHONE
          return BANK_PHONE;
        case 28: // PROJECT_NAME
          return PROJECT_NAME;
        case 29: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 30: // BROKERAGE
          return BROKERAGE;
        case 31: // IS_NEED_HANDLE
          return IS_NEED_HANDLE;
        case 32: // PAYMENT_NAME
          return PAYMENT_NAME;
        case 33: // PAYMENT_ACCOUNT
          return PAYMENT_ACCOUNT;
        case 34: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 35: // FORE_ACCOUNT
          return FORE_ACCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __LOANMONEY_ISSET_ID = 1;
  private static final int __PROMISEMONEY_ISSET_ID = 2;
  private static final int __PAYMENTMONEY_ISSET_ID = 3;
  private static final int __LOANFEE_ISSET_ID = 4;
  private static final int __POUNDAGE_ISSET_ID = 5;
  private static final int __PROJECTSOURCE_ISSET_ID = 6;
  private static final int __BROKERAGE_ISSET_ID = 7;
  private static final int __ISNEEDHANDLE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGER_NAME, new org.apache.thrift.meta_data.FieldMetaData("managerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROMISE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("promiseMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DAY, new org.apache.thrift.meta_data.FieldMetaData("loanDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_BANK, new org.apache.thrift.meta_data.FieldMetaData("paymentBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("paymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORE_BANK, new org.apache.thrift.meta_data.FieldMetaData("foreBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("houseCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_FEE, new org.apache.thrift.meta_data.FieldMetaData("loanFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHARGE_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("chargeSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_REQUEST_PROCESS, new org.apache.thrift.meta_data.FieldMetaData("loanRequestProcess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY_STR, new org.apache.thrift.meta_data.FieldMetaData("loanMoneyStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROMISE_MONEY_STR, new org.apache.thrift.meta_data.FieldMetaData("promiseMoneyStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_MONEY_STR, new org.apache.thrift.meta_data.FieldMetaData("paymentMoneyStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("managerPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("sellerPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_USER, new org.apache.thrift.meta_data.FieldMetaData("bankUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_PHONE, new org.apache.thrift.meta_data.FieldMetaData("bankPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BROKERAGE, new org.apache.thrift.meta_data.FieldMetaData("brokerage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_NEED_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("isNeedHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("paymentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("paymentAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("foreAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectDto.class, metaDataMap);
  }

  public ProjectDto() {
  }

  public ProjectDto(
    int projectId,
    String orgName,
    String managerName,
    String pmUserName,
    String acctName,
    int loanMoney,
    String sellerName,
    double promiseMoney,
    String productName,
    String loanDay,
    String paymentBank,
    double paymentMoney,
    String foreBank,
    String houseCardNo,
    String houseName,
    double loanFee,
    double poundage,
    String chargeSituation,
    String loanRequestProcess,
    String projectNumber,
    String loanMoneyStr,
    String promiseMoneyStr,
    String paymentMoneyStr,
    String managerPhone,
    String sellerPhone,
    String bankUser,
    String bankPhone,
    String projectName,
    int projectSource,
    double brokerage,
    int isNeedHandle,
    String paymentName,
    String paymentAccount,
    String businessSourceStr,
    String foreAccount)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.orgName = orgName;
    this.managerName = managerName;
    this.pmUserName = pmUserName;
    this.acctName = acctName;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.sellerName = sellerName;
    this.promiseMoney = promiseMoney;
    setPromiseMoneyIsSet(true);
    this.productName = productName;
    this.loanDay = loanDay;
    this.paymentBank = paymentBank;
    this.paymentMoney = paymentMoney;
    setPaymentMoneyIsSet(true);
    this.foreBank = foreBank;
    this.houseCardNo = houseCardNo;
    this.houseName = houseName;
    this.loanFee = loanFee;
    setLoanFeeIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.chargeSituation = chargeSituation;
    this.loanRequestProcess = loanRequestProcess;
    this.projectNumber = projectNumber;
    this.loanMoneyStr = loanMoneyStr;
    this.promiseMoneyStr = promiseMoneyStr;
    this.paymentMoneyStr = paymentMoneyStr;
    this.managerPhone = managerPhone;
    this.sellerPhone = sellerPhone;
    this.bankUser = bankUser;
    this.bankPhone = bankPhone;
    this.projectName = projectName;
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    this.paymentName = paymentName;
    this.paymentAccount = paymentAccount;
    this.businessSourceStr = businessSourceStr;
    this.foreAccount = foreAccount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectDto(ProjectDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetManagerName()) {
      this.managerName = other.managerName;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    this.loanMoney = other.loanMoney;
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.promiseMoney = other.promiseMoney;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetLoanDay()) {
      this.loanDay = other.loanDay;
    }
    if (other.isSetPaymentBank()) {
      this.paymentBank = other.paymentBank;
    }
    this.paymentMoney = other.paymentMoney;
    if (other.isSetForeBank()) {
      this.foreBank = other.foreBank;
    }
    if (other.isSetHouseCardNo()) {
      this.houseCardNo = other.houseCardNo;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    this.loanFee = other.loanFee;
    this.poundage = other.poundage;
    if (other.isSetChargeSituation()) {
      this.chargeSituation = other.chargeSituation;
    }
    if (other.isSetLoanRequestProcess()) {
      this.loanRequestProcess = other.loanRequestProcess;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetLoanMoneyStr()) {
      this.loanMoneyStr = other.loanMoneyStr;
    }
    if (other.isSetPromiseMoneyStr()) {
      this.promiseMoneyStr = other.promiseMoneyStr;
    }
    if (other.isSetPaymentMoneyStr()) {
      this.paymentMoneyStr = other.paymentMoneyStr;
    }
    if (other.isSetManagerPhone()) {
      this.managerPhone = other.managerPhone;
    }
    if (other.isSetSellerPhone()) {
      this.sellerPhone = other.sellerPhone;
    }
    if (other.isSetBankUser()) {
      this.bankUser = other.bankUser;
    }
    if (other.isSetBankPhone()) {
      this.bankPhone = other.bankPhone;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.projectSource = other.projectSource;
    this.brokerage = other.brokerage;
    this.isNeedHandle = other.isNeedHandle;
    if (other.isSetPaymentName()) {
      this.paymentName = other.paymentName;
    }
    if (other.isSetPaymentAccount()) {
      this.paymentAccount = other.paymentAccount;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetForeAccount()) {
      this.foreAccount = other.foreAccount;
    }
  }

  public ProjectDto deepCopy() {
    return new ProjectDto(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.orgName = null;
    this.managerName = null;
    this.pmUserName = null;
    this.acctName = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0;
    this.sellerName = null;
    setPromiseMoneyIsSet(false);
    this.promiseMoney = 0.0;
    this.productName = null;
    this.loanDay = null;
    this.paymentBank = null;
    setPaymentMoneyIsSet(false);
    this.paymentMoney = 0.0;
    this.foreBank = null;
    this.houseCardNo = null;
    this.houseName = null;
    setLoanFeeIsSet(false);
    this.loanFee = 0.0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    this.chargeSituation = null;
    this.loanRequestProcess = null;
    this.projectNumber = null;
    this.loanMoneyStr = null;
    this.promiseMoneyStr = null;
    this.paymentMoneyStr = null;
    this.managerPhone = null;
    this.sellerPhone = null;
    this.bankUser = null;
    this.bankPhone = null;
    this.projectName = null;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    setBrokerageIsSet(false);
    this.brokerage = 0.0;
    setIsNeedHandleIsSet(false);
    this.isNeedHandle = 0;
    this.paymentName = null;
    this.paymentAccount = null;
    this.businessSourceStr = null;
    this.foreAccount = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectDto setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public ProjectDto setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getManagerName() {
    return this.managerName;
  }

  public ProjectDto setManagerName(String managerName) {
    this.managerName = managerName;
    return this;
  }

  public void unsetManagerName() {
    this.managerName = null;
  }

  /** Returns true if field managerName is set (has been assigned a value) and false otherwise */
  public boolean isSetManagerName() {
    return this.managerName != null;
  }

  public void setManagerNameIsSet(boolean value) {
    if (!value) {
      this.managerName = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public ProjectDto setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public ProjectDto setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public int getLoanMoney() {
    return this.loanMoney;
  }

  public ProjectDto setLoanMoney(int loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public ProjectDto setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public double getPromiseMoney() {
    return this.promiseMoney;
  }

  public ProjectDto setPromiseMoney(double promiseMoney) {
    this.promiseMoney = promiseMoney;
    setPromiseMoneyIsSet(true);
    return this;
  }

  public void unsetPromiseMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROMISEMONEY_ISSET_ID);
  }

  /** Returns true if field promiseMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPromiseMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PROMISEMONEY_ISSET_ID);
  }

  public void setPromiseMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROMISEMONEY_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public ProjectDto setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getLoanDay() {
    return this.loanDay;
  }

  public ProjectDto setLoanDay(String loanDay) {
    this.loanDay = loanDay;
    return this;
  }

  public void unsetLoanDay() {
    this.loanDay = null;
  }

  /** Returns true if field loanDay is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDay() {
    return this.loanDay != null;
  }

  public void setLoanDayIsSet(boolean value) {
    if (!value) {
      this.loanDay = null;
    }
  }

  public String getPaymentBank() {
    return this.paymentBank;
  }

  public ProjectDto setPaymentBank(String paymentBank) {
    this.paymentBank = paymentBank;
    return this;
  }

  public void unsetPaymentBank() {
    this.paymentBank = null;
  }

  /** Returns true if field paymentBank is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBank() {
    return this.paymentBank != null;
  }

  public void setPaymentBankIsSet(boolean value) {
    if (!value) {
      this.paymentBank = null;
    }
  }

  public double getPaymentMoney() {
    return this.paymentMoney;
  }

  public ProjectDto setPaymentMoney(double paymentMoney) {
    this.paymentMoney = paymentMoney;
    setPaymentMoneyIsSet(true);
    return this;
  }

  public void unsetPaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field paymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID);
  }

  public void setPaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTMONEY_ISSET_ID, value);
  }

  public String getForeBank() {
    return this.foreBank;
  }

  public ProjectDto setForeBank(String foreBank) {
    this.foreBank = foreBank;
    return this;
  }

  public void unsetForeBank() {
    this.foreBank = null;
  }

  /** Returns true if field foreBank is set (has been assigned a value) and false otherwise */
  public boolean isSetForeBank() {
    return this.foreBank != null;
  }

  public void setForeBankIsSet(boolean value) {
    if (!value) {
      this.foreBank = null;
    }
  }

  public String getHouseCardNo() {
    return this.houseCardNo;
  }

  public ProjectDto setHouseCardNo(String houseCardNo) {
    this.houseCardNo = houseCardNo;
    return this;
  }

  public void unsetHouseCardNo() {
    this.houseCardNo = null;
  }

  /** Returns true if field houseCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseCardNo() {
    return this.houseCardNo != null;
  }

  public void setHouseCardNoIsSet(boolean value) {
    if (!value) {
      this.houseCardNo = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public ProjectDto setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public double getLoanFee() {
    return this.loanFee;
  }

  public ProjectDto setLoanFee(double loanFee) {
    this.loanFee = loanFee;
    setLoanFeeIsSet(true);
    return this;
  }

  public void unsetLoanFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANFEE_ISSET_ID);
  }

  /** Returns true if field loanFee is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanFee() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANFEE_ISSET_ID);
  }

  public void setLoanFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANFEE_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public ProjectDto setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public String getChargeSituation() {
    return this.chargeSituation;
  }

  public ProjectDto setChargeSituation(String chargeSituation) {
    this.chargeSituation = chargeSituation;
    return this;
  }

  public void unsetChargeSituation() {
    this.chargeSituation = null;
  }

  /** Returns true if field chargeSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeSituation() {
    return this.chargeSituation != null;
  }

  public void setChargeSituationIsSet(boolean value) {
    if (!value) {
      this.chargeSituation = null;
    }
  }

  public String getLoanRequestProcess() {
    return this.loanRequestProcess;
  }

  public ProjectDto setLoanRequestProcess(String loanRequestProcess) {
    this.loanRequestProcess = loanRequestProcess;
    return this;
  }

  public void unsetLoanRequestProcess() {
    this.loanRequestProcess = null;
  }

  /** Returns true if field loanRequestProcess is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRequestProcess() {
    return this.loanRequestProcess != null;
  }

  public void setLoanRequestProcessIsSet(boolean value) {
    if (!value) {
      this.loanRequestProcess = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ProjectDto setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getLoanMoneyStr() {
    return this.loanMoneyStr;
  }

  public ProjectDto setLoanMoneyStr(String loanMoneyStr) {
    this.loanMoneyStr = loanMoneyStr;
    return this;
  }

  public void unsetLoanMoneyStr() {
    this.loanMoneyStr = null;
  }

  /** Returns true if field loanMoneyStr is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoneyStr() {
    return this.loanMoneyStr != null;
  }

  public void setLoanMoneyStrIsSet(boolean value) {
    if (!value) {
      this.loanMoneyStr = null;
    }
  }

  public String getPromiseMoneyStr() {
    return this.promiseMoneyStr;
  }

  public ProjectDto setPromiseMoneyStr(String promiseMoneyStr) {
    this.promiseMoneyStr = promiseMoneyStr;
    return this;
  }

  public void unsetPromiseMoneyStr() {
    this.promiseMoneyStr = null;
  }

  /** Returns true if field promiseMoneyStr is set (has been assigned a value) and false otherwise */
  public boolean isSetPromiseMoneyStr() {
    return this.promiseMoneyStr != null;
  }

  public void setPromiseMoneyStrIsSet(boolean value) {
    if (!value) {
      this.promiseMoneyStr = null;
    }
  }

  public String getPaymentMoneyStr() {
    return this.paymentMoneyStr;
  }

  public ProjectDto setPaymentMoneyStr(String paymentMoneyStr) {
    this.paymentMoneyStr = paymentMoneyStr;
    return this;
  }

  public void unsetPaymentMoneyStr() {
    this.paymentMoneyStr = null;
  }

  /** Returns true if field paymentMoneyStr is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMoneyStr() {
    return this.paymentMoneyStr != null;
  }

  public void setPaymentMoneyStrIsSet(boolean value) {
    if (!value) {
      this.paymentMoneyStr = null;
    }
  }

  public String getManagerPhone() {
    return this.managerPhone;
  }

  public ProjectDto setManagerPhone(String managerPhone) {
    this.managerPhone = managerPhone;
    return this;
  }

  public void unsetManagerPhone() {
    this.managerPhone = null;
  }

  /** Returns true if field managerPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetManagerPhone() {
    return this.managerPhone != null;
  }

  public void setManagerPhoneIsSet(boolean value) {
    if (!value) {
      this.managerPhone = null;
    }
  }

  public String getSellerPhone() {
    return this.sellerPhone;
  }

  public ProjectDto setSellerPhone(String sellerPhone) {
    this.sellerPhone = sellerPhone;
    return this;
  }

  public void unsetSellerPhone() {
    this.sellerPhone = null;
  }

  /** Returns true if field sellerPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerPhone() {
    return this.sellerPhone != null;
  }

  public void setSellerPhoneIsSet(boolean value) {
    if (!value) {
      this.sellerPhone = null;
    }
  }

  public String getBankUser() {
    return this.bankUser;
  }

  public ProjectDto setBankUser(String bankUser) {
    this.bankUser = bankUser;
    return this;
  }

  public void unsetBankUser() {
    this.bankUser = null;
  }

  /** Returns true if field bankUser is set (has been assigned a value) and false otherwise */
  public boolean isSetBankUser() {
    return this.bankUser != null;
  }

  public void setBankUserIsSet(boolean value) {
    if (!value) {
      this.bankUser = null;
    }
  }

  public String getBankPhone() {
    return this.bankPhone;
  }

  public ProjectDto setBankPhone(String bankPhone) {
    this.bankPhone = bankPhone;
    return this;
  }

  public void unsetBankPhone() {
    this.bankPhone = null;
  }

  /** Returns true if field bankPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPhone() {
    return this.bankPhone != null;
  }

  public void setBankPhoneIsSet(boolean value) {
    if (!value) {
      this.bankPhone = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ProjectDto setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public ProjectDto setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public double getBrokerage() {
    return this.brokerage;
  }

  public ProjectDto setBrokerage(double brokerage) {
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    return this;
  }

  public void unsetBrokerage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  /** Returns true if field brokerage is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerage() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  public void setBrokerageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERAGE_ISSET_ID, value);
  }

  public int getIsNeedHandle() {
    return this.isNeedHandle;
  }

  public ProjectDto setIsNeedHandle(int isNeedHandle) {
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    return this;
  }

  public void unsetIsNeedHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  /** Returns true if field isNeedHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  public void setIsNeedHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID, value);
  }

  public String getPaymentName() {
    return this.paymentName;
  }

  public ProjectDto setPaymentName(String paymentName) {
    this.paymentName = paymentName;
    return this;
  }

  public void unsetPaymentName() {
    this.paymentName = null;
  }

  /** Returns true if field paymentName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentName() {
    return this.paymentName != null;
  }

  public void setPaymentNameIsSet(boolean value) {
    if (!value) {
      this.paymentName = null;
    }
  }

  public String getPaymentAccount() {
    return this.paymentAccount;
  }

  public ProjectDto setPaymentAccount(String paymentAccount) {
    this.paymentAccount = paymentAccount;
    return this;
  }

  public void unsetPaymentAccount() {
    this.paymentAccount = null;
  }

  /** Returns true if field paymentAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAccount() {
    return this.paymentAccount != null;
  }

  public void setPaymentAccountIsSet(boolean value) {
    if (!value) {
      this.paymentAccount = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public ProjectDto setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public String getForeAccount() {
    return this.foreAccount;
  }

  public ProjectDto setForeAccount(String foreAccount) {
    this.foreAccount = foreAccount;
    return this;
  }

  public void unsetForeAccount() {
    this.foreAccount = null;
  }

  /** Returns true if field foreAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetForeAccount() {
    return this.foreAccount != null;
  }

  public void setForeAccountIsSet(boolean value) {
    if (!value) {
      this.foreAccount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case MANAGER_NAME:
      if (value == null) {
        unsetManagerName();
      } else {
        setManagerName((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Integer)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case PROMISE_MONEY:
      if (value == null) {
        unsetPromiseMoney();
      } else {
        setPromiseMoney((Double)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case LOAN_DAY:
      if (value == null) {
        unsetLoanDay();
      } else {
        setLoanDay((String)value);
      }
      break;

    case PAYMENT_BANK:
      if (value == null) {
        unsetPaymentBank();
      } else {
        setPaymentBank((String)value);
      }
      break;

    case PAYMENT_MONEY:
      if (value == null) {
        unsetPaymentMoney();
      } else {
        setPaymentMoney((Double)value);
      }
      break;

    case FORE_BANK:
      if (value == null) {
        unsetForeBank();
      } else {
        setForeBank((String)value);
      }
      break;

    case HOUSE_CARD_NO:
      if (value == null) {
        unsetHouseCardNo();
      } else {
        setHouseCardNo((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case LOAN_FEE:
      if (value == null) {
        unsetLoanFee();
      } else {
        setLoanFee((Double)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case CHARGE_SITUATION:
      if (value == null) {
        unsetChargeSituation();
      } else {
        setChargeSituation((String)value);
      }
      break;

    case LOAN_REQUEST_PROCESS:
      if (value == null) {
        unsetLoanRequestProcess();
      } else {
        setLoanRequestProcess((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case LOAN_MONEY_STR:
      if (value == null) {
        unsetLoanMoneyStr();
      } else {
        setLoanMoneyStr((String)value);
      }
      break;

    case PROMISE_MONEY_STR:
      if (value == null) {
        unsetPromiseMoneyStr();
      } else {
        setPromiseMoneyStr((String)value);
      }
      break;

    case PAYMENT_MONEY_STR:
      if (value == null) {
        unsetPaymentMoneyStr();
      } else {
        setPaymentMoneyStr((String)value);
      }
      break;

    case MANAGER_PHONE:
      if (value == null) {
        unsetManagerPhone();
      } else {
        setManagerPhone((String)value);
      }
      break;

    case SELLER_PHONE:
      if (value == null) {
        unsetSellerPhone();
      } else {
        setSellerPhone((String)value);
      }
      break;

    case BANK_USER:
      if (value == null) {
        unsetBankUser();
      } else {
        setBankUser((String)value);
      }
      break;

    case BANK_PHONE:
      if (value == null) {
        unsetBankPhone();
      } else {
        setBankPhone((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case BROKERAGE:
      if (value == null) {
        unsetBrokerage();
      } else {
        setBrokerage((Double)value);
      }
      break;

    case IS_NEED_HANDLE:
      if (value == null) {
        unsetIsNeedHandle();
      } else {
        setIsNeedHandle((Integer)value);
      }
      break;

    case PAYMENT_NAME:
      if (value == null) {
        unsetPaymentName();
      } else {
        setPaymentName((String)value);
      }
      break;

    case PAYMENT_ACCOUNT:
      if (value == null) {
        unsetPaymentAccount();
      } else {
        setPaymentAccount((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case FORE_ACCOUNT:
      if (value == null) {
        unsetForeAccount();
      } else {
        setForeAccount((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ORG_NAME:
      return getOrgName();

    case MANAGER_NAME:
      return getManagerName();

    case PM_USER_NAME:
      return getPmUserName();

    case ACCT_NAME:
      return getAcctName();

    case LOAN_MONEY:
      return Integer.valueOf(getLoanMoney());

    case SELLER_NAME:
      return getSellerName();

    case PROMISE_MONEY:
      return Double.valueOf(getPromiseMoney());

    case PRODUCT_NAME:
      return getProductName();

    case LOAN_DAY:
      return getLoanDay();

    case PAYMENT_BANK:
      return getPaymentBank();

    case PAYMENT_MONEY:
      return Double.valueOf(getPaymentMoney());

    case FORE_BANK:
      return getForeBank();

    case HOUSE_CARD_NO:
      return getHouseCardNo();

    case HOUSE_NAME:
      return getHouseName();

    case LOAN_FEE:
      return Double.valueOf(getLoanFee());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case CHARGE_SITUATION:
      return getChargeSituation();

    case LOAN_REQUEST_PROCESS:
      return getLoanRequestProcess();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case LOAN_MONEY_STR:
      return getLoanMoneyStr();

    case PROMISE_MONEY_STR:
      return getPromiseMoneyStr();

    case PAYMENT_MONEY_STR:
      return getPaymentMoneyStr();

    case MANAGER_PHONE:
      return getManagerPhone();

    case SELLER_PHONE:
      return getSellerPhone();

    case BANK_USER:
      return getBankUser();

    case BANK_PHONE:
      return getBankPhone();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case BROKERAGE:
      return Double.valueOf(getBrokerage());

    case IS_NEED_HANDLE:
      return Integer.valueOf(getIsNeedHandle());

    case PAYMENT_NAME:
      return getPaymentName();

    case PAYMENT_ACCOUNT:
      return getPaymentAccount();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case FORE_ACCOUNT:
      return getForeAccount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case ORG_NAME:
      return isSetOrgName();
    case MANAGER_NAME:
      return isSetManagerName();
    case PM_USER_NAME:
      return isSetPmUserName();
    case ACCT_NAME:
      return isSetAcctName();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case SELLER_NAME:
      return isSetSellerName();
    case PROMISE_MONEY:
      return isSetPromiseMoney();
    case PRODUCT_NAME:
      return isSetProductName();
    case LOAN_DAY:
      return isSetLoanDay();
    case PAYMENT_BANK:
      return isSetPaymentBank();
    case PAYMENT_MONEY:
      return isSetPaymentMoney();
    case FORE_BANK:
      return isSetForeBank();
    case HOUSE_CARD_NO:
      return isSetHouseCardNo();
    case HOUSE_NAME:
      return isSetHouseName();
    case LOAN_FEE:
      return isSetLoanFee();
    case POUNDAGE:
      return isSetPoundage();
    case CHARGE_SITUATION:
      return isSetChargeSituation();
    case LOAN_REQUEST_PROCESS:
      return isSetLoanRequestProcess();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case LOAN_MONEY_STR:
      return isSetLoanMoneyStr();
    case PROMISE_MONEY_STR:
      return isSetPromiseMoneyStr();
    case PAYMENT_MONEY_STR:
      return isSetPaymentMoneyStr();
    case MANAGER_PHONE:
      return isSetManagerPhone();
    case SELLER_PHONE:
      return isSetSellerPhone();
    case BANK_USER:
      return isSetBankUser();
    case BANK_PHONE:
      return isSetBankPhone();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case BROKERAGE:
      return isSetBrokerage();
    case IS_NEED_HANDLE:
      return isSetIsNeedHandle();
    case PAYMENT_NAME:
      return isSetPaymentName();
    case PAYMENT_ACCOUNT:
      return isSetPaymentAccount();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case FORE_ACCOUNT:
      return isSetForeAccount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectDto)
      return this.equals((ProjectDto)that);
    return false;
  }

  public boolean equals(ProjectDto that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_managerName = true && this.isSetManagerName();
    boolean that_present_managerName = true && that.isSetManagerName();
    if (this_present_managerName || that_present_managerName) {
      if (!(this_present_managerName && that_present_managerName))
        return false;
      if (!this.managerName.equals(that.managerName))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_promiseMoney = true;
    boolean that_present_promiseMoney = true;
    if (this_present_promiseMoney || that_present_promiseMoney) {
      if (!(this_present_promiseMoney && that_present_promiseMoney))
        return false;
      if (this.promiseMoney != that.promiseMoney)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_loanDay = true && this.isSetLoanDay();
    boolean that_present_loanDay = true && that.isSetLoanDay();
    if (this_present_loanDay || that_present_loanDay) {
      if (!(this_present_loanDay && that_present_loanDay))
        return false;
      if (!this.loanDay.equals(that.loanDay))
        return false;
    }

    boolean this_present_paymentBank = true && this.isSetPaymentBank();
    boolean that_present_paymentBank = true && that.isSetPaymentBank();
    if (this_present_paymentBank || that_present_paymentBank) {
      if (!(this_present_paymentBank && that_present_paymentBank))
        return false;
      if (!this.paymentBank.equals(that.paymentBank))
        return false;
    }

    boolean this_present_paymentMoney = true;
    boolean that_present_paymentMoney = true;
    if (this_present_paymentMoney || that_present_paymentMoney) {
      if (!(this_present_paymentMoney && that_present_paymentMoney))
        return false;
      if (this.paymentMoney != that.paymentMoney)
        return false;
    }

    boolean this_present_foreBank = true && this.isSetForeBank();
    boolean that_present_foreBank = true && that.isSetForeBank();
    if (this_present_foreBank || that_present_foreBank) {
      if (!(this_present_foreBank && that_present_foreBank))
        return false;
      if (!this.foreBank.equals(that.foreBank))
        return false;
    }

    boolean this_present_houseCardNo = true && this.isSetHouseCardNo();
    boolean that_present_houseCardNo = true && that.isSetHouseCardNo();
    if (this_present_houseCardNo || that_present_houseCardNo) {
      if (!(this_present_houseCardNo && that_present_houseCardNo))
        return false;
      if (!this.houseCardNo.equals(that.houseCardNo))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_loanFee = true;
    boolean that_present_loanFee = true;
    if (this_present_loanFee || that_present_loanFee) {
      if (!(this_present_loanFee && that_present_loanFee))
        return false;
      if (this.loanFee != that.loanFee)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_chargeSituation = true && this.isSetChargeSituation();
    boolean that_present_chargeSituation = true && that.isSetChargeSituation();
    if (this_present_chargeSituation || that_present_chargeSituation) {
      if (!(this_present_chargeSituation && that_present_chargeSituation))
        return false;
      if (!this.chargeSituation.equals(that.chargeSituation))
        return false;
    }

    boolean this_present_loanRequestProcess = true && this.isSetLoanRequestProcess();
    boolean that_present_loanRequestProcess = true && that.isSetLoanRequestProcess();
    if (this_present_loanRequestProcess || that_present_loanRequestProcess) {
      if (!(this_present_loanRequestProcess && that_present_loanRequestProcess))
        return false;
      if (!this.loanRequestProcess.equals(that.loanRequestProcess))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_loanMoneyStr = true && this.isSetLoanMoneyStr();
    boolean that_present_loanMoneyStr = true && that.isSetLoanMoneyStr();
    if (this_present_loanMoneyStr || that_present_loanMoneyStr) {
      if (!(this_present_loanMoneyStr && that_present_loanMoneyStr))
        return false;
      if (!this.loanMoneyStr.equals(that.loanMoneyStr))
        return false;
    }

    boolean this_present_promiseMoneyStr = true && this.isSetPromiseMoneyStr();
    boolean that_present_promiseMoneyStr = true && that.isSetPromiseMoneyStr();
    if (this_present_promiseMoneyStr || that_present_promiseMoneyStr) {
      if (!(this_present_promiseMoneyStr && that_present_promiseMoneyStr))
        return false;
      if (!this.promiseMoneyStr.equals(that.promiseMoneyStr))
        return false;
    }

    boolean this_present_paymentMoneyStr = true && this.isSetPaymentMoneyStr();
    boolean that_present_paymentMoneyStr = true && that.isSetPaymentMoneyStr();
    if (this_present_paymentMoneyStr || that_present_paymentMoneyStr) {
      if (!(this_present_paymentMoneyStr && that_present_paymentMoneyStr))
        return false;
      if (!this.paymentMoneyStr.equals(that.paymentMoneyStr))
        return false;
    }

    boolean this_present_managerPhone = true && this.isSetManagerPhone();
    boolean that_present_managerPhone = true && that.isSetManagerPhone();
    if (this_present_managerPhone || that_present_managerPhone) {
      if (!(this_present_managerPhone && that_present_managerPhone))
        return false;
      if (!this.managerPhone.equals(that.managerPhone))
        return false;
    }

    boolean this_present_sellerPhone = true && this.isSetSellerPhone();
    boolean that_present_sellerPhone = true && that.isSetSellerPhone();
    if (this_present_sellerPhone || that_present_sellerPhone) {
      if (!(this_present_sellerPhone && that_present_sellerPhone))
        return false;
      if (!this.sellerPhone.equals(that.sellerPhone))
        return false;
    }

    boolean this_present_bankUser = true && this.isSetBankUser();
    boolean that_present_bankUser = true && that.isSetBankUser();
    if (this_present_bankUser || that_present_bankUser) {
      if (!(this_present_bankUser && that_present_bankUser))
        return false;
      if (!this.bankUser.equals(that.bankUser))
        return false;
    }

    boolean this_present_bankPhone = true && this.isSetBankPhone();
    boolean that_present_bankPhone = true && that.isSetBankPhone();
    if (this_present_bankPhone || that_present_bankPhone) {
      if (!(this_present_bankPhone && that_present_bankPhone))
        return false;
      if (!this.bankPhone.equals(that.bankPhone))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_brokerage = true;
    boolean that_present_brokerage = true;
    if (this_present_brokerage || that_present_brokerage) {
      if (!(this_present_brokerage && that_present_brokerage))
        return false;
      if (this.brokerage != that.brokerage)
        return false;
    }

    boolean this_present_isNeedHandle = true;
    boolean that_present_isNeedHandle = true;
    if (this_present_isNeedHandle || that_present_isNeedHandle) {
      if (!(this_present_isNeedHandle && that_present_isNeedHandle))
        return false;
      if (this.isNeedHandle != that.isNeedHandle)
        return false;
    }

    boolean this_present_paymentName = true && this.isSetPaymentName();
    boolean that_present_paymentName = true && that.isSetPaymentName();
    if (this_present_paymentName || that_present_paymentName) {
      if (!(this_present_paymentName && that_present_paymentName))
        return false;
      if (!this.paymentName.equals(that.paymentName))
        return false;
    }

    boolean this_present_paymentAccount = true && this.isSetPaymentAccount();
    boolean that_present_paymentAccount = true && that.isSetPaymentAccount();
    if (this_present_paymentAccount || that_present_paymentAccount) {
      if (!(this_present_paymentAccount && that_present_paymentAccount))
        return false;
      if (!this.paymentAccount.equals(that.paymentAccount))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_foreAccount = true && this.isSetForeAccount();
    boolean that_present_foreAccount = true && that.isSetForeAccount();
    if (this_present_foreAccount || that_present_foreAccount) {
      if (!(this_present_foreAccount && that_present_foreAccount))
        return false;
      if (!this.foreAccount.equals(that.foreAccount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_managerName = true && (isSetManagerName());
    list.add(present_managerName);
    if (present_managerName)
      list.add(managerName);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_promiseMoney = true;
    list.add(present_promiseMoney);
    if (present_promiseMoney)
      list.add(promiseMoney);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_loanDay = true && (isSetLoanDay());
    list.add(present_loanDay);
    if (present_loanDay)
      list.add(loanDay);

    boolean present_paymentBank = true && (isSetPaymentBank());
    list.add(present_paymentBank);
    if (present_paymentBank)
      list.add(paymentBank);

    boolean present_paymentMoney = true;
    list.add(present_paymentMoney);
    if (present_paymentMoney)
      list.add(paymentMoney);

    boolean present_foreBank = true && (isSetForeBank());
    list.add(present_foreBank);
    if (present_foreBank)
      list.add(foreBank);

    boolean present_houseCardNo = true && (isSetHouseCardNo());
    list.add(present_houseCardNo);
    if (present_houseCardNo)
      list.add(houseCardNo);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_loanFee = true;
    list.add(present_loanFee);
    if (present_loanFee)
      list.add(loanFee);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_chargeSituation = true && (isSetChargeSituation());
    list.add(present_chargeSituation);
    if (present_chargeSituation)
      list.add(chargeSituation);

    boolean present_loanRequestProcess = true && (isSetLoanRequestProcess());
    list.add(present_loanRequestProcess);
    if (present_loanRequestProcess)
      list.add(loanRequestProcess);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_loanMoneyStr = true && (isSetLoanMoneyStr());
    list.add(present_loanMoneyStr);
    if (present_loanMoneyStr)
      list.add(loanMoneyStr);

    boolean present_promiseMoneyStr = true && (isSetPromiseMoneyStr());
    list.add(present_promiseMoneyStr);
    if (present_promiseMoneyStr)
      list.add(promiseMoneyStr);

    boolean present_paymentMoneyStr = true && (isSetPaymentMoneyStr());
    list.add(present_paymentMoneyStr);
    if (present_paymentMoneyStr)
      list.add(paymentMoneyStr);

    boolean present_managerPhone = true && (isSetManagerPhone());
    list.add(present_managerPhone);
    if (present_managerPhone)
      list.add(managerPhone);

    boolean present_sellerPhone = true && (isSetSellerPhone());
    list.add(present_sellerPhone);
    if (present_sellerPhone)
      list.add(sellerPhone);

    boolean present_bankUser = true && (isSetBankUser());
    list.add(present_bankUser);
    if (present_bankUser)
      list.add(bankUser);

    boolean present_bankPhone = true && (isSetBankPhone());
    list.add(present_bankPhone);
    if (present_bankPhone)
      list.add(bankPhone);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_brokerage = true;
    list.add(present_brokerage);
    if (present_brokerage)
      list.add(brokerage);

    boolean present_isNeedHandle = true;
    list.add(present_isNeedHandle);
    if (present_isNeedHandle)
      list.add(isNeedHandle);

    boolean present_paymentName = true && (isSetPaymentName());
    list.add(present_paymentName);
    if (present_paymentName)
      list.add(paymentName);

    boolean present_paymentAccount = true && (isSetPaymentAccount());
    list.add(present_paymentAccount);
    if (present_paymentAccount)
      list.add(paymentAccount);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_foreAccount = true && (isSetForeAccount());
    list.add(present_foreAccount);
    if (present_foreAccount)
      list.add(foreAccount);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagerName()).compareTo(other.isSetManagerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managerName, other.managerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPromiseMoney()).compareTo(other.isSetPromiseMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromiseMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promiseMoney, other.promiseMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDay()).compareTo(other.isSetLoanDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDay, other.loanDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBank()).compareTo(other.isSetPaymentBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBank, other.paymentBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMoney()).compareTo(other.isSetPaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMoney, other.paymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeBank()).compareTo(other.isSetForeBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreBank, other.foreBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseCardNo()).compareTo(other.isSetHouseCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseCardNo, other.houseCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanFee()).compareTo(other.isSetLoanFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanFee, other.loanFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeSituation()).compareTo(other.isSetChargeSituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeSituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeSituation, other.chargeSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRequestProcess()).compareTo(other.isSetLoanRequestProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRequestProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRequestProcess, other.loanRequestProcess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoneyStr()).compareTo(other.isSetLoanMoneyStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoneyStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoneyStr, other.loanMoneyStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPromiseMoneyStr()).compareTo(other.isSetPromiseMoneyStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromiseMoneyStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promiseMoneyStr, other.promiseMoneyStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMoneyStr()).compareTo(other.isSetPaymentMoneyStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMoneyStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMoneyStr, other.paymentMoneyStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagerPhone()).compareTo(other.isSetManagerPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagerPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managerPhone, other.managerPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerPhone()).compareTo(other.isSetSellerPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerPhone, other.sellerPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankUser()).compareTo(other.isSetBankUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankUser, other.bankUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPhone()).compareTo(other.isSetBankPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPhone, other.bankPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerage()).compareTo(other.isSetBrokerage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerage, other.brokerage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedHandle()).compareTo(other.isSetIsNeedHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedHandle, other.isNeedHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentName()).compareTo(other.isSetPaymentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentName, other.paymentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAccount()).compareTo(other.isSetPaymentAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAccount, other.paymentAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeAccount()).compareTo(other.isSetForeAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreAccount, other.foreAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectDto(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("managerName:");
    if (this.managerName == null) {
      sb.append("null");
    } else {
      sb.append(this.managerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("promiseMoney:");
    sb.append(this.promiseMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDay:");
    if (this.loanDay == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBank:");
    if (this.paymentBank == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMoney:");
    sb.append(this.paymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreBank:");
    if (this.foreBank == null) {
      sb.append("null");
    } else {
      sb.append(this.foreBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseCardNo:");
    if (this.houseCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.houseCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanFee:");
    sb.append(this.loanFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeSituation:");
    if (this.chargeSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.chargeSituation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRequestProcess:");
    if (this.loanRequestProcess == null) {
      sb.append("null");
    } else {
      sb.append(this.loanRequestProcess);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoneyStr:");
    if (this.loanMoneyStr == null) {
      sb.append("null");
    } else {
      sb.append(this.loanMoneyStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("promiseMoneyStr:");
    if (this.promiseMoneyStr == null) {
      sb.append("null");
    } else {
      sb.append(this.promiseMoneyStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMoneyStr:");
    if (this.paymentMoneyStr == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMoneyStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("managerPhone:");
    if (this.managerPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.managerPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerPhone:");
    if (this.sellerPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankUser:");
    if (this.bankUser == null) {
      sb.append("null");
    } else {
      sb.append(this.bankUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPhone:");
    if (this.bankPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerage:");
    sb.append(this.brokerage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedHandle:");
    sb.append(this.isNeedHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentName:");
    if (this.paymentName == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAccount:");
    if (this.paymentAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreAccount:");
    if (this.foreAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.foreAccount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectDtoStandardSchemeFactory implements SchemeFactory {
    public ProjectDtoStandardScheme getScheme() {
      return new ProjectDtoStandardScheme();
    }
  }

  private static class ProjectDtoStandardScheme extends StandardScheme<ProjectDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MANAGER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.managerName = iprot.readString();
              struct.setManagerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanMoney = iprot.readI32();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROMISE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.promiseMoney = iprot.readDouble();
              struct.setPromiseMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAN_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDay = iprot.readString();
              struct.setLoanDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAYMENT_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBank = iprot.readString();
              struct.setPaymentBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paymentMoney = iprot.readDouble();
              struct.setPaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FORE_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreBank = iprot.readString();
              struct.setForeBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HOUSE_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseCardNo = iprot.readString();
              struct.setHouseCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanFee = iprot.readDouble();
              struct.setLoanFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHARGE_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeSituation = iprot.readString();
              struct.setChargeSituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOAN_REQUEST_PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanRequestProcess = iprot.readString();
              struct.setLoanRequestProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAN_MONEY_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanMoneyStr = iprot.readString();
              struct.setLoanMoneyStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PROMISE_MONEY_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.promiseMoneyStr = iprot.readString();
              struct.setPromiseMoneyStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PAYMENT_MONEY_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMoneyStr = iprot.readString();
              struct.setPaymentMoneyStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MANAGER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.managerPhone = iprot.readString();
              struct.setManagerPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SELLER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerPhone = iprot.readString();
              struct.setSellerPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BANK_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankUser = iprot.readString();
              struct.setBankUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BANK_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPhone = iprot.readString();
              struct.setBankPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // BROKERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.brokerage = iprot.readDouble();
              struct.setBrokerageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // IS_NEED_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedHandle = iprot.readI32();
              struct.setIsNeedHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PAYMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentName = iprot.readString();
              struct.setPaymentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PAYMENT_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAccount = iprot.readString();
              struct.setPaymentAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // FORE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreAccount = iprot.readString();
              struct.setForeAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.managerName != null) {
        oprot.writeFieldBegin(MANAGER_NAME_FIELD_DESC);
        oprot.writeString(struct.managerName);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeI32(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROMISE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.promiseMoney);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.loanDay != null) {
        oprot.writeFieldBegin(LOAN_DAY_FIELD_DESC);
        oprot.writeString(struct.loanDay);
        oprot.writeFieldEnd();
      }
      if (struct.paymentBank != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_FIELD_DESC);
        oprot.writeString(struct.paymentBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.paymentMoney);
      oprot.writeFieldEnd();
      if (struct.foreBank != null) {
        oprot.writeFieldBegin(FORE_BANK_FIELD_DESC);
        oprot.writeString(struct.foreBank);
        oprot.writeFieldEnd();
      }
      if (struct.houseCardNo != null) {
        oprot.writeFieldBegin(HOUSE_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.houseCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_FEE_FIELD_DESC);
      oprot.writeDouble(struct.loanFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      if (struct.chargeSituation != null) {
        oprot.writeFieldBegin(CHARGE_SITUATION_FIELD_DESC);
        oprot.writeString(struct.chargeSituation);
        oprot.writeFieldEnd();
      }
      if (struct.loanRequestProcess != null) {
        oprot.writeFieldBegin(LOAN_REQUEST_PROCESS_FIELD_DESC);
        oprot.writeString(struct.loanRequestProcess);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.loanMoneyStr != null) {
        oprot.writeFieldBegin(LOAN_MONEY_STR_FIELD_DESC);
        oprot.writeString(struct.loanMoneyStr);
        oprot.writeFieldEnd();
      }
      if (struct.promiseMoneyStr != null) {
        oprot.writeFieldBegin(PROMISE_MONEY_STR_FIELD_DESC);
        oprot.writeString(struct.promiseMoneyStr);
        oprot.writeFieldEnd();
      }
      if (struct.paymentMoneyStr != null) {
        oprot.writeFieldBegin(PAYMENT_MONEY_STR_FIELD_DESC);
        oprot.writeString(struct.paymentMoneyStr);
        oprot.writeFieldEnd();
      }
      if (struct.managerPhone != null) {
        oprot.writeFieldBegin(MANAGER_PHONE_FIELD_DESC);
        oprot.writeString(struct.managerPhone);
        oprot.writeFieldEnd();
      }
      if (struct.sellerPhone != null) {
        oprot.writeFieldBegin(SELLER_PHONE_FIELD_DESC);
        oprot.writeString(struct.sellerPhone);
        oprot.writeFieldEnd();
      }
      if (struct.bankUser != null) {
        oprot.writeFieldBegin(BANK_USER_FIELD_DESC);
        oprot.writeString(struct.bankUser);
        oprot.writeFieldEnd();
      }
      if (struct.bankPhone != null) {
        oprot.writeFieldBegin(BANK_PHONE_FIELD_DESC);
        oprot.writeString(struct.bankPhone);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BROKERAGE_FIELD_DESC);
      oprot.writeDouble(struct.brokerage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NEED_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.isNeedHandle);
      oprot.writeFieldEnd();
      if (struct.paymentName != null) {
        oprot.writeFieldBegin(PAYMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.paymentName);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAccount != null) {
        oprot.writeFieldBegin(PAYMENT_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.paymentAccount);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.foreAccount != null) {
        oprot.writeFieldBegin(FORE_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.foreAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectDtoTupleSchemeFactory implements SchemeFactory {
    public ProjectDtoTupleScheme getScheme() {
      return new ProjectDtoTupleScheme();
    }
  }

  private static class ProjectDtoTupleScheme extends TupleScheme<ProjectDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetOrgName()) {
        optionals.set(1);
      }
      if (struct.isSetManagerName()) {
        optionals.set(2);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(3);
      }
      if (struct.isSetAcctName()) {
        optionals.set(4);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(5);
      }
      if (struct.isSetSellerName()) {
        optionals.set(6);
      }
      if (struct.isSetPromiseMoney()) {
        optionals.set(7);
      }
      if (struct.isSetProductName()) {
        optionals.set(8);
      }
      if (struct.isSetLoanDay()) {
        optionals.set(9);
      }
      if (struct.isSetPaymentBank()) {
        optionals.set(10);
      }
      if (struct.isSetPaymentMoney()) {
        optionals.set(11);
      }
      if (struct.isSetForeBank()) {
        optionals.set(12);
      }
      if (struct.isSetHouseCardNo()) {
        optionals.set(13);
      }
      if (struct.isSetHouseName()) {
        optionals.set(14);
      }
      if (struct.isSetLoanFee()) {
        optionals.set(15);
      }
      if (struct.isSetPoundage()) {
        optionals.set(16);
      }
      if (struct.isSetChargeSituation()) {
        optionals.set(17);
      }
      if (struct.isSetLoanRequestProcess()) {
        optionals.set(18);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(19);
      }
      if (struct.isSetLoanMoneyStr()) {
        optionals.set(20);
      }
      if (struct.isSetPromiseMoneyStr()) {
        optionals.set(21);
      }
      if (struct.isSetPaymentMoneyStr()) {
        optionals.set(22);
      }
      if (struct.isSetManagerPhone()) {
        optionals.set(23);
      }
      if (struct.isSetSellerPhone()) {
        optionals.set(24);
      }
      if (struct.isSetBankUser()) {
        optionals.set(25);
      }
      if (struct.isSetBankPhone()) {
        optionals.set(26);
      }
      if (struct.isSetProjectName()) {
        optionals.set(27);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(28);
      }
      if (struct.isSetBrokerage()) {
        optionals.set(29);
      }
      if (struct.isSetIsNeedHandle()) {
        optionals.set(30);
      }
      if (struct.isSetPaymentName()) {
        optionals.set(31);
      }
      if (struct.isSetPaymentAccount()) {
        optionals.set(32);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(33);
      }
      if (struct.isSetForeAccount()) {
        optionals.set(34);
      }
      oprot.writeBitSet(optionals, 35);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetManagerName()) {
        oprot.writeString(struct.managerName);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeI32(struct.loanMoney);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetPromiseMoney()) {
        oprot.writeDouble(struct.promiseMoney);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetLoanDay()) {
        oprot.writeString(struct.loanDay);
      }
      if (struct.isSetPaymentBank()) {
        oprot.writeString(struct.paymentBank);
      }
      if (struct.isSetPaymentMoney()) {
        oprot.writeDouble(struct.paymentMoney);
      }
      if (struct.isSetForeBank()) {
        oprot.writeString(struct.foreBank);
      }
      if (struct.isSetHouseCardNo()) {
        oprot.writeString(struct.houseCardNo);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetLoanFee()) {
        oprot.writeDouble(struct.loanFee);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetChargeSituation()) {
        oprot.writeString(struct.chargeSituation);
      }
      if (struct.isSetLoanRequestProcess()) {
        oprot.writeString(struct.loanRequestProcess);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetLoanMoneyStr()) {
        oprot.writeString(struct.loanMoneyStr);
      }
      if (struct.isSetPromiseMoneyStr()) {
        oprot.writeString(struct.promiseMoneyStr);
      }
      if (struct.isSetPaymentMoneyStr()) {
        oprot.writeString(struct.paymentMoneyStr);
      }
      if (struct.isSetManagerPhone()) {
        oprot.writeString(struct.managerPhone);
      }
      if (struct.isSetSellerPhone()) {
        oprot.writeString(struct.sellerPhone);
      }
      if (struct.isSetBankUser()) {
        oprot.writeString(struct.bankUser);
      }
      if (struct.isSetBankPhone()) {
        oprot.writeString(struct.bankPhone);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetBrokerage()) {
        oprot.writeDouble(struct.brokerage);
      }
      if (struct.isSetIsNeedHandle()) {
        oprot.writeI32(struct.isNeedHandle);
      }
      if (struct.isSetPaymentName()) {
        oprot.writeString(struct.paymentName);
      }
      if (struct.isSetPaymentAccount()) {
        oprot.writeString(struct.paymentAccount);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetForeAccount()) {
        oprot.writeString(struct.foreAccount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(35);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.managerName = iprot.readString();
        struct.setManagerNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.loanMoney = iprot.readI32();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.promiseMoney = iprot.readDouble();
        struct.setPromiseMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.loanDay = iprot.readString();
        struct.setLoanDayIsSet(true);
      }
      if (incoming.get(10)) {
        struct.paymentBank = iprot.readString();
        struct.setPaymentBankIsSet(true);
      }
      if (incoming.get(11)) {
        struct.paymentMoney = iprot.readDouble();
        struct.setPaymentMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.foreBank = iprot.readString();
        struct.setForeBankIsSet(true);
      }
      if (incoming.get(13)) {
        struct.houseCardNo = iprot.readString();
        struct.setHouseCardNoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanFee = iprot.readDouble();
        struct.setLoanFeeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.chargeSituation = iprot.readString();
        struct.setChargeSituationIsSet(true);
      }
      if (incoming.get(18)) {
        struct.loanRequestProcess = iprot.readString();
        struct.setLoanRequestProcessIsSet(true);
      }
      if (incoming.get(19)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(20)) {
        struct.loanMoneyStr = iprot.readString();
        struct.setLoanMoneyStrIsSet(true);
      }
      if (incoming.get(21)) {
        struct.promiseMoneyStr = iprot.readString();
        struct.setPromiseMoneyStrIsSet(true);
      }
      if (incoming.get(22)) {
        struct.paymentMoneyStr = iprot.readString();
        struct.setPaymentMoneyStrIsSet(true);
      }
      if (incoming.get(23)) {
        struct.managerPhone = iprot.readString();
        struct.setManagerPhoneIsSet(true);
      }
      if (incoming.get(24)) {
        struct.sellerPhone = iprot.readString();
        struct.setSellerPhoneIsSet(true);
      }
      if (incoming.get(25)) {
        struct.bankUser = iprot.readString();
        struct.setBankUserIsSet(true);
      }
      if (incoming.get(26)) {
        struct.bankPhone = iprot.readString();
        struct.setBankPhoneIsSet(true);
      }
      if (incoming.get(27)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(29)) {
        struct.brokerage = iprot.readDouble();
        struct.setBrokerageIsSet(true);
      }
      if (incoming.get(30)) {
        struct.isNeedHandle = iprot.readI32();
        struct.setIsNeedHandleIsSet(true);
      }
      if (incoming.get(31)) {
        struct.paymentName = iprot.readString();
        struct.setPaymentNameIsSet(true);
      }
      if (incoming.get(32)) {
        struct.paymentAccount = iprot.readString();
        struct.setPaymentAccountIsSet(true);
      }
      if (incoming.get(33)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(34)) {
        struct.foreAccount = iprot.readString();
        struct.setForeAccountIsSet(true);
      }
    }
  }

}


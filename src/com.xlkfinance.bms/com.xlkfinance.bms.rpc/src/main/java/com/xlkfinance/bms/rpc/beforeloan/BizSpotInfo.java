/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-5")
public class BizSpotInfo implements org.apache.thrift.TBase<BizSpotInfo, BizSpotInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BizSpotInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizSpotInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EASTATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eastateId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SHOULD_SPOT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldSpotTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ACTUAL_SPOT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualSpotTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DECORATION_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("decorationSituation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HOUSE_TOTALS_FIELD_DESC = new org.apache.thrift.protocol.TField("houseTotals", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FLOOR_TOTALS_FIELD_DESC = new org.apache.thrift.protocol.TField("floorTotals", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HOUSE_STRUCTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseStructure", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ELEVATORS_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("elevatorsNums", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HOUSEHOLD_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("householdNums", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField HOUSE_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("housePattern", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHOPPING_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("shoppingNums", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField SCHOOL_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolNums", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField BANK_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNums", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HOSPITAL_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("hospitalNums", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TRAFFIC_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("trafficSituation", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField AROUND_ENVIRONMENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("aroundEnvironmental", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField AGENCY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("agencyPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField USE_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("useSituation", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ACTUAL_PURPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPurpose", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField USER_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("userSituation", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField LEASE_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("leaseUse", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField LEASE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("leaseTimeStart", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField LEASE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("leaseTimeEnd", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField LESSEE_FIELD_DESC = new org.apache.thrift.protocol.TField("lessee", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField OTHEN_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("othenRemark", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField SPOT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("spotInfos", org.apache.thrift.protocol.TType.LIST, (short)34);
  private static final org.apache.thrift.protocol.TField SPOT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("spotFiles", org.apache.thrift.protocol.TType.LIST, (short)35);
  private static final org.apache.thrift.protocol.TField HOUSE_PATTERN_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("housePatternDetail", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField RENT_PAYMENT_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("rentPaymentWay", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField LEASE_USE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("leaseUsePhone", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField RENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("rentPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField RENT_EVALUATION_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("rentEvaluationPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField EVALUATION_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationSource", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField EVALUATION_SOURCE_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluationSourceDetail", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField VACANT_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("vacantDays", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField VACANT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("vacantRate", org.apache.thrift.protocol.TType.DOUBLE, (short)44);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizSpotInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizSpotInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int eastateId; // required
  public String shouldSpotTime; // required
  public String actualSpotTime; // required
  public String decorationSituation; // required
  public int houseTotals; // required
  public int floorTotals; // required
  public String houseStructure; // required
  public int elevatorsNums; // required
  public int householdNums; // required
  public String housePattern; // required
  public int shoppingNums; // required
  public int schoolNums; // required
  public int bankNums; // required
  public int hospitalNums; // required
  public String trafficSituation; // required
  public String aroundEnvironmental; // required
  public double agencyPrice; // required
  public double totalPrice; // required
  public String useSituation; // required
  public String actualPurpose; // required
  public String userType; // required
  public String userSituation; // required
  public String leaseUse; // required
  public String updateDate; // required
  public String leaseTimeStart; // required
  public String leaseTimeEnd; // required
  public String lessee; // required
  public String othenRemark; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public List<BizSpotInfo> spotInfos; // required
  public List<BizSpotFile> spotFiles; // required
  public String housePatternDetail; // required
  public String rentPaymentWay; // required
  public String leaseUsePhone; // required
  public double rentPrice; // required
  public double rentEvaluationPrice; // required
  public String evaluationSource; // required
  public String evaluationSourceDetail; // required
  public double vacantDays; // required
  public double vacantRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    EASTATE_ID((short)3, "eastateId"),
    SHOULD_SPOT_TIME((short)4, "shouldSpotTime"),
    ACTUAL_SPOT_TIME((short)5, "actualSpotTime"),
    DECORATION_SITUATION((short)6, "decorationSituation"),
    HOUSE_TOTALS((short)7, "houseTotals"),
    FLOOR_TOTALS((short)8, "floorTotals"),
    HOUSE_STRUCTURE((short)9, "houseStructure"),
    ELEVATORS_NUMS((short)10, "elevatorsNums"),
    HOUSEHOLD_NUMS((short)11, "householdNums"),
    HOUSE_PATTERN((short)12, "housePattern"),
    SHOPPING_NUMS((short)13, "shoppingNums"),
    SCHOOL_NUMS((short)14, "schoolNums"),
    BANK_NUMS((short)15, "bankNums"),
    HOSPITAL_NUMS((short)16, "hospitalNums"),
    TRAFFIC_SITUATION((short)17, "trafficSituation"),
    AROUND_ENVIRONMENTAL((short)18, "aroundEnvironmental"),
    AGENCY_PRICE((short)19, "agencyPrice"),
    TOTAL_PRICE((short)20, "totalPrice"),
    USE_SITUATION((short)21, "useSituation"),
    ACTUAL_PURPOSE((short)22, "actualPurpose"),
    USER_TYPE((short)23, "userType"),
    USER_SITUATION((short)24, "userSituation"),
    LEASE_USE((short)25, "leaseUse"),
    UPDATE_DATE((short)26, "updateDate"),
    LEASE_TIME_START((short)27, "leaseTimeStart"),
    LEASE_TIME_END((short)28, "leaseTimeEnd"),
    LESSEE((short)29, "lessee"),
    OTHEN_REMARK((short)30, "othenRemark"),
    CREATE_DATE((short)31, "createDate"),
    CREATER_ID((short)32, "createrId"),
    UPDATE_ID((short)33, "updateId"),
    SPOT_INFOS((short)34, "spotInfos"),
    SPOT_FILES((short)35, "spotFiles"),
    HOUSE_PATTERN_DETAIL((short)36, "housePatternDetail"),
    RENT_PAYMENT_WAY((short)37, "rentPaymentWay"),
    LEASE_USE_PHONE((short)38, "leaseUsePhone"),
    RENT_PRICE((short)39, "rentPrice"),
    RENT_EVALUATION_PRICE((short)40, "rentEvaluationPrice"),
    EVALUATION_SOURCE((short)41, "evaluationSource"),
    EVALUATION_SOURCE_DETAIL((short)42, "evaluationSourceDetail"),
    VACANT_DAYS((short)43, "vacantDays"),
    VACANT_RATE((short)44, "vacantRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // EASTATE_ID
          return EASTATE_ID;
        case 4: // SHOULD_SPOT_TIME
          return SHOULD_SPOT_TIME;
        case 5: // ACTUAL_SPOT_TIME
          return ACTUAL_SPOT_TIME;
        case 6: // DECORATION_SITUATION
          return DECORATION_SITUATION;
        case 7: // HOUSE_TOTALS
          return HOUSE_TOTALS;
        case 8: // FLOOR_TOTALS
          return FLOOR_TOTALS;
        case 9: // HOUSE_STRUCTURE
          return HOUSE_STRUCTURE;
        case 10: // ELEVATORS_NUMS
          return ELEVATORS_NUMS;
        case 11: // HOUSEHOLD_NUMS
          return HOUSEHOLD_NUMS;
        case 12: // HOUSE_PATTERN
          return HOUSE_PATTERN;
        case 13: // SHOPPING_NUMS
          return SHOPPING_NUMS;
        case 14: // SCHOOL_NUMS
          return SCHOOL_NUMS;
        case 15: // BANK_NUMS
          return BANK_NUMS;
        case 16: // HOSPITAL_NUMS
          return HOSPITAL_NUMS;
        case 17: // TRAFFIC_SITUATION
          return TRAFFIC_SITUATION;
        case 18: // AROUND_ENVIRONMENTAL
          return AROUND_ENVIRONMENTAL;
        case 19: // AGENCY_PRICE
          return AGENCY_PRICE;
        case 20: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 21: // USE_SITUATION
          return USE_SITUATION;
        case 22: // ACTUAL_PURPOSE
          return ACTUAL_PURPOSE;
        case 23: // USER_TYPE
          return USER_TYPE;
        case 24: // USER_SITUATION
          return USER_SITUATION;
        case 25: // LEASE_USE
          return LEASE_USE;
        case 26: // UPDATE_DATE
          return UPDATE_DATE;
        case 27: // LEASE_TIME_START
          return LEASE_TIME_START;
        case 28: // LEASE_TIME_END
          return LEASE_TIME_END;
        case 29: // LESSEE
          return LESSEE;
        case 30: // OTHEN_REMARK
          return OTHEN_REMARK;
        case 31: // CREATE_DATE
          return CREATE_DATE;
        case 32: // CREATER_ID
          return CREATER_ID;
        case 33: // UPDATE_ID
          return UPDATE_ID;
        case 34: // SPOT_INFOS
          return SPOT_INFOS;
        case 35: // SPOT_FILES
          return SPOT_FILES;
        case 36: // HOUSE_PATTERN_DETAIL
          return HOUSE_PATTERN_DETAIL;
        case 37: // RENT_PAYMENT_WAY
          return RENT_PAYMENT_WAY;
        case 38: // LEASE_USE_PHONE
          return LEASE_USE_PHONE;
        case 39: // RENT_PRICE
          return RENT_PRICE;
        case 40: // RENT_EVALUATION_PRICE
          return RENT_EVALUATION_PRICE;
        case 41: // EVALUATION_SOURCE
          return EVALUATION_SOURCE;
        case 42: // EVALUATION_SOURCE_DETAIL
          return EVALUATION_SOURCE_DETAIL;
        case 43: // VACANT_DAYS
          return VACANT_DAYS;
        case 44: // VACANT_RATE
          return VACANT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __EASTATEID_ISSET_ID = 2;
  private static final int __HOUSETOTALS_ISSET_ID = 3;
  private static final int __FLOORTOTALS_ISSET_ID = 4;
  private static final int __ELEVATORSNUMS_ISSET_ID = 5;
  private static final int __HOUSEHOLDNUMS_ISSET_ID = 6;
  private static final int __SHOPPINGNUMS_ISSET_ID = 7;
  private static final int __SCHOOLNUMS_ISSET_ID = 8;
  private static final int __BANKNUMS_ISSET_ID = 9;
  private static final int __HOSPITALNUMS_ISSET_ID = 10;
  private static final int __AGENCYPRICE_ISSET_ID = 11;
  private static final int __TOTALPRICE_ISSET_ID = 12;
  private static final int __CREATERID_ISSET_ID = 13;
  private static final int __UPDATEID_ISSET_ID = 14;
  private static final int __RENTPRICE_ISSET_ID = 15;
  private static final int __RENTEVALUATIONPRICE_ISSET_ID = 16;
  private static final int __VACANTDAYS_ISSET_ID = 17;
  private static final int __VACANTRATE_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EASTATE_ID, new org.apache.thrift.meta_data.FieldMetaData("eastateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_SPOT_TIME, new org.apache.thrift.meta_data.FieldMetaData("shouldSpotTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_SPOT_TIME, new org.apache.thrift.meta_data.FieldMetaData("actualSpotTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DECORATION_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("decorationSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_TOTALS, new org.apache.thrift.meta_data.FieldMetaData("houseTotals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLOOR_TOTALS, new org.apache.thrift.meta_data.FieldMetaData("floorTotals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_STRUCTURE, new org.apache.thrift.meta_data.FieldMetaData("houseStructure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ELEVATORS_NUMS, new org.apache.thrift.meta_data.FieldMetaData("elevatorsNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSEHOLD_NUMS, new org.apache.thrift.meta_data.FieldMetaData("householdNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("housePattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOPPING_NUMS, new org.apache.thrift.meta_data.FieldMetaData("shoppingNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHOOL_NUMS, new org.apache.thrift.meta_data.FieldMetaData("schoolNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_NUMS, new org.apache.thrift.meta_data.FieldMetaData("bankNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOSPITAL_NUMS, new org.apache.thrift.meta_data.FieldMetaData("hospitalNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRAFFIC_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("trafficSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AROUND_ENVIRONMENTAL, new org.apache.thrift.meta_data.FieldMetaData("aroundEnvironmental", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENCY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("agencyPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("useSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_PURPOSE, new org.apache.thrift.meta_data.FieldMetaData("actualPurpose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("userSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEASE_USE, new org.apache.thrift.meta_data.FieldMetaData("leaseUse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEASE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("leaseTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEASE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("leaseTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LESSEE, new org.apache.thrift.meta_data.FieldMetaData("lessee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHEN_REMARK, new org.apache.thrift.meta_data.FieldMetaData("othenRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPOT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("spotInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BizSpotInfo"))));
    tmpMap.put(_Fields.SPOT_FILES, new org.apache.thrift.meta_data.FieldMetaData("spotFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BizSpotFile"))));
    tmpMap.put(_Fields.HOUSE_PATTERN_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("housePatternDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RENT_PAYMENT_WAY, new org.apache.thrift.meta_data.FieldMetaData("rentPaymentWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEASE_USE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("leaseUsePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("rentPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RENT_EVALUATION_PRICE, new org.apache.thrift.meta_data.FieldMetaData("rentEvaluationPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVALUATION_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("evaluationSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVALUATION_SOURCE_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("evaluationSourceDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VACANT_DAYS, new org.apache.thrift.meta_data.FieldMetaData("vacantDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VACANT_RATE, new org.apache.thrift.meta_data.FieldMetaData("vacantRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizSpotInfo.class, metaDataMap);
  }

  public BizSpotInfo() {
  }

  public BizSpotInfo(
    int pid,
    int projectId,
    int eastateId,
    String shouldSpotTime,
    String actualSpotTime,
    String decorationSituation,
    int houseTotals,
    int floorTotals,
    String houseStructure,
    int elevatorsNums,
    int householdNums,
    String housePattern,
    int shoppingNums,
    int schoolNums,
    int bankNums,
    int hospitalNums,
    String trafficSituation,
    String aroundEnvironmental,
    double agencyPrice,
    double totalPrice,
    String useSituation,
    String actualPurpose,
    String userType,
    String userSituation,
    String leaseUse,
    String updateDate,
    String leaseTimeStart,
    String leaseTimeEnd,
    String lessee,
    String othenRemark,
    String createDate,
    int createrId,
    int updateId,
    List<BizSpotInfo> spotInfos,
    List<BizSpotFile> spotFiles,
    String housePatternDetail,
    String rentPaymentWay,
    String leaseUsePhone,
    double rentPrice,
    double rentEvaluationPrice,
    String evaluationSource,
    String evaluationSourceDetail,
    double vacantDays,
    double vacantRate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.eastateId = eastateId;
    setEastateIdIsSet(true);
    this.shouldSpotTime = shouldSpotTime;
    this.actualSpotTime = actualSpotTime;
    this.decorationSituation = decorationSituation;
    this.houseTotals = houseTotals;
    setHouseTotalsIsSet(true);
    this.floorTotals = floorTotals;
    setFloorTotalsIsSet(true);
    this.houseStructure = houseStructure;
    this.elevatorsNums = elevatorsNums;
    setElevatorsNumsIsSet(true);
    this.householdNums = householdNums;
    setHouseholdNumsIsSet(true);
    this.housePattern = housePattern;
    this.shoppingNums = shoppingNums;
    setShoppingNumsIsSet(true);
    this.schoolNums = schoolNums;
    setSchoolNumsIsSet(true);
    this.bankNums = bankNums;
    setBankNumsIsSet(true);
    this.hospitalNums = hospitalNums;
    setHospitalNumsIsSet(true);
    this.trafficSituation = trafficSituation;
    this.aroundEnvironmental = aroundEnvironmental;
    this.agencyPrice = agencyPrice;
    setAgencyPriceIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.useSituation = useSituation;
    this.actualPurpose = actualPurpose;
    this.userType = userType;
    this.userSituation = userSituation;
    this.leaseUse = leaseUse;
    this.updateDate = updateDate;
    this.leaseTimeStart = leaseTimeStart;
    this.leaseTimeEnd = leaseTimeEnd;
    this.lessee = lessee;
    this.othenRemark = othenRemark;
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.spotInfos = spotInfos;
    this.spotFiles = spotFiles;
    this.housePatternDetail = housePatternDetail;
    this.rentPaymentWay = rentPaymentWay;
    this.leaseUsePhone = leaseUsePhone;
    this.rentPrice = rentPrice;
    setRentPriceIsSet(true);
    this.rentEvaluationPrice = rentEvaluationPrice;
    setRentEvaluationPriceIsSet(true);
    this.evaluationSource = evaluationSource;
    this.evaluationSourceDetail = evaluationSourceDetail;
    this.vacantDays = vacantDays;
    setVacantDaysIsSet(true);
    this.vacantRate = vacantRate;
    setVacantRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizSpotInfo(BizSpotInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.eastateId = other.eastateId;
    if (other.isSetShouldSpotTime()) {
      this.shouldSpotTime = other.shouldSpotTime;
    }
    if (other.isSetActualSpotTime()) {
      this.actualSpotTime = other.actualSpotTime;
    }
    if (other.isSetDecorationSituation()) {
      this.decorationSituation = other.decorationSituation;
    }
    this.houseTotals = other.houseTotals;
    this.floorTotals = other.floorTotals;
    if (other.isSetHouseStructure()) {
      this.houseStructure = other.houseStructure;
    }
    this.elevatorsNums = other.elevatorsNums;
    this.householdNums = other.householdNums;
    if (other.isSetHousePattern()) {
      this.housePattern = other.housePattern;
    }
    this.shoppingNums = other.shoppingNums;
    this.schoolNums = other.schoolNums;
    this.bankNums = other.bankNums;
    this.hospitalNums = other.hospitalNums;
    if (other.isSetTrafficSituation()) {
      this.trafficSituation = other.trafficSituation;
    }
    if (other.isSetAroundEnvironmental()) {
      this.aroundEnvironmental = other.aroundEnvironmental;
    }
    this.agencyPrice = other.agencyPrice;
    this.totalPrice = other.totalPrice;
    if (other.isSetUseSituation()) {
      this.useSituation = other.useSituation;
    }
    if (other.isSetActualPurpose()) {
      this.actualPurpose = other.actualPurpose;
    }
    if (other.isSetUserType()) {
      this.userType = other.userType;
    }
    if (other.isSetUserSituation()) {
      this.userSituation = other.userSituation;
    }
    if (other.isSetLeaseUse()) {
      this.leaseUse = other.leaseUse;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetLeaseTimeStart()) {
      this.leaseTimeStart = other.leaseTimeStart;
    }
    if (other.isSetLeaseTimeEnd()) {
      this.leaseTimeEnd = other.leaseTimeEnd;
    }
    if (other.isSetLessee()) {
      this.lessee = other.lessee;
    }
    if (other.isSetOthenRemark()) {
      this.othenRemark = other.othenRemark;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetSpotInfos()) {
      List<BizSpotInfo> __this__spotInfos = new ArrayList<BizSpotInfo>(other.spotInfos.size());
      for (BizSpotInfo other_element : other.spotInfos) {
        __this__spotInfos.add(other_element);
      }
      this.spotInfos = __this__spotInfos;
    }
    if (other.isSetSpotFiles()) {
      List<BizSpotFile> __this__spotFiles = new ArrayList<BizSpotFile>(other.spotFiles.size());
      for (BizSpotFile other_element : other.spotFiles) {
        __this__spotFiles.add(other_element);
      }
      this.spotFiles = __this__spotFiles;
    }
    if (other.isSetHousePatternDetail()) {
      this.housePatternDetail = other.housePatternDetail;
    }
    if (other.isSetRentPaymentWay()) {
      this.rentPaymentWay = other.rentPaymentWay;
    }
    if (other.isSetLeaseUsePhone()) {
      this.leaseUsePhone = other.leaseUsePhone;
    }
    this.rentPrice = other.rentPrice;
    this.rentEvaluationPrice = other.rentEvaluationPrice;
    if (other.isSetEvaluationSource()) {
      this.evaluationSource = other.evaluationSource;
    }
    if (other.isSetEvaluationSourceDetail()) {
      this.evaluationSourceDetail = other.evaluationSourceDetail;
    }
    this.vacantDays = other.vacantDays;
    this.vacantRate = other.vacantRate;
  }

  public BizSpotInfo deepCopy() {
    return new BizSpotInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setEastateIdIsSet(false);
    this.eastateId = 0;
    this.shouldSpotTime = null;
    this.actualSpotTime = null;
    this.decorationSituation = null;
    setHouseTotalsIsSet(false);
    this.houseTotals = 0;
    setFloorTotalsIsSet(false);
    this.floorTotals = 0;
    this.houseStructure = null;
    setElevatorsNumsIsSet(false);
    this.elevatorsNums = 0;
    setHouseholdNumsIsSet(false);
    this.householdNums = 0;
    this.housePattern = null;
    setShoppingNumsIsSet(false);
    this.shoppingNums = 0;
    setSchoolNumsIsSet(false);
    this.schoolNums = 0;
    setBankNumsIsSet(false);
    this.bankNums = 0;
    setHospitalNumsIsSet(false);
    this.hospitalNums = 0;
    this.trafficSituation = null;
    this.aroundEnvironmental = null;
    setAgencyPriceIsSet(false);
    this.agencyPrice = 0.0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    this.useSituation = null;
    this.actualPurpose = null;
    this.userType = null;
    this.userSituation = null;
    this.leaseUse = null;
    this.updateDate = null;
    this.leaseTimeStart = null;
    this.leaseTimeEnd = null;
    this.lessee = null;
    this.othenRemark = null;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.spotInfos = null;
    this.spotFiles = null;
    this.housePatternDetail = null;
    this.rentPaymentWay = null;
    this.leaseUsePhone = null;
    setRentPriceIsSet(false);
    this.rentPrice = 0.0;
    setRentEvaluationPriceIsSet(false);
    this.rentEvaluationPrice = 0.0;
    this.evaluationSource = null;
    this.evaluationSourceDetail = null;
    setVacantDaysIsSet(false);
    this.vacantDays = 0.0;
    setVacantRateIsSet(false);
    this.vacantRate = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public BizSpotInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizSpotInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getEastateId() {
    return this.eastateId;
  }

  public BizSpotInfo setEastateId(int eastateId) {
    this.eastateId = eastateId;
    setEastateIdIsSet(true);
    return this;
  }

  public void unsetEastateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EASTATEID_ISSET_ID);
  }

  /** Returns true if field eastateId is set (has been assigned a value) and false otherwise */
  public boolean isSetEastateId() {
    return EncodingUtils.testBit(__isset_bitfield, __EASTATEID_ISSET_ID);
  }

  public void setEastateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EASTATEID_ISSET_ID, value);
  }

  public String getShouldSpotTime() {
    return this.shouldSpotTime;
  }

  public BizSpotInfo setShouldSpotTime(String shouldSpotTime) {
    this.shouldSpotTime = shouldSpotTime;
    return this;
  }

  public void unsetShouldSpotTime() {
    this.shouldSpotTime = null;
  }

  /** Returns true if field shouldSpotTime is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldSpotTime() {
    return this.shouldSpotTime != null;
  }

  public void setShouldSpotTimeIsSet(boolean value) {
    if (!value) {
      this.shouldSpotTime = null;
    }
  }

  public String getActualSpotTime() {
    return this.actualSpotTime;
  }

  public BizSpotInfo setActualSpotTime(String actualSpotTime) {
    this.actualSpotTime = actualSpotTime;
    return this;
  }

  public void unsetActualSpotTime() {
    this.actualSpotTime = null;
  }

  /** Returns true if field actualSpotTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActualSpotTime() {
    return this.actualSpotTime != null;
  }

  public void setActualSpotTimeIsSet(boolean value) {
    if (!value) {
      this.actualSpotTime = null;
    }
  }

  public String getDecorationSituation() {
    return this.decorationSituation;
  }

  public BizSpotInfo setDecorationSituation(String decorationSituation) {
    this.decorationSituation = decorationSituation;
    return this;
  }

  public void unsetDecorationSituation() {
    this.decorationSituation = null;
  }

  /** Returns true if field decorationSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetDecorationSituation() {
    return this.decorationSituation != null;
  }

  public void setDecorationSituationIsSet(boolean value) {
    if (!value) {
      this.decorationSituation = null;
    }
  }

  public int getHouseTotals() {
    return this.houseTotals;
  }

  public BizSpotInfo setHouseTotals(int houseTotals) {
    this.houseTotals = houseTotals;
    setHouseTotalsIsSet(true);
    return this;
  }

  public void unsetHouseTotals() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSETOTALS_ISSET_ID);
  }

  /** Returns true if field houseTotals is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseTotals() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSETOTALS_ISSET_ID);
  }

  public void setHouseTotalsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSETOTALS_ISSET_ID, value);
  }

  public int getFloorTotals() {
    return this.floorTotals;
  }

  public BizSpotInfo setFloorTotals(int floorTotals) {
    this.floorTotals = floorTotals;
    setFloorTotalsIsSet(true);
    return this;
  }

  public void unsetFloorTotals() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOORTOTALS_ISSET_ID);
  }

  /** Returns true if field floorTotals is set (has been assigned a value) and false otherwise */
  public boolean isSetFloorTotals() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOORTOTALS_ISSET_ID);
  }

  public void setFloorTotalsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOORTOTALS_ISSET_ID, value);
  }

  public String getHouseStructure() {
    return this.houseStructure;
  }

  public BizSpotInfo setHouseStructure(String houseStructure) {
    this.houseStructure = houseStructure;
    return this;
  }

  public void unsetHouseStructure() {
    this.houseStructure = null;
  }

  /** Returns true if field houseStructure is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseStructure() {
    return this.houseStructure != null;
  }

  public void setHouseStructureIsSet(boolean value) {
    if (!value) {
      this.houseStructure = null;
    }
  }

  public int getElevatorsNums() {
    return this.elevatorsNums;
  }

  public BizSpotInfo setElevatorsNums(int elevatorsNums) {
    this.elevatorsNums = elevatorsNums;
    setElevatorsNumsIsSet(true);
    return this;
  }

  public void unsetElevatorsNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ELEVATORSNUMS_ISSET_ID);
  }

  /** Returns true if field elevatorsNums is set (has been assigned a value) and false otherwise */
  public boolean isSetElevatorsNums() {
    return EncodingUtils.testBit(__isset_bitfield, __ELEVATORSNUMS_ISSET_ID);
  }

  public void setElevatorsNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ELEVATORSNUMS_ISSET_ID, value);
  }

  public int getHouseholdNums() {
    return this.householdNums;
  }

  public BizSpotInfo setHouseholdNums(int householdNums) {
    this.householdNums = householdNums;
    setHouseholdNumsIsSet(true);
    return this;
  }

  public void unsetHouseholdNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEHOLDNUMS_ISSET_ID);
  }

  /** Returns true if field householdNums is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseholdNums() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEHOLDNUMS_ISSET_ID);
  }

  public void setHouseholdNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEHOLDNUMS_ISSET_ID, value);
  }

  public String getHousePattern() {
    return this.housePattern;
  }

  public BizSpotInfo setHousePattern(String housePattern) {
    this.housePattern = housePattern;
    return this;
  }

  public void unsetHousePattern() {
    this.housePattern = null;
  }

  /** Returns true if field housePattern is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePattern() {
    return this.housePattern != null;
  }

  public void setHousePatternIsSet(boolean value) {
    if (!value) {
      this.housePattern = null;
    }
  }

  public int getShoppingNums() {
    return this.shoppingNums;
  }

  public BizSpotInfo setShoppingNums(int shoppingNums) {
    this.shoppingNums = shoppingNums;
    setShoppingNumsIsSet(true);
    return this;
  }

  public void unsetShoppingNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPPINGNUMS_ISSET_ID);
  }

  /** Returns true if field shoppingNums is set (has been assigned a value) and false otherwise */
  public boolean isSetShoppingNums() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPPINGNUMS_ISSET_ID);
  }

  public void setShoppingNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPPINGNUMS_ISSET_ID, value);
  }

  public int getSchoolNums() {
    return this.schoolNums;
  }

  public BizSpotInfo setSchoolNums(int schoolNums) {
    this.schoolNums = schoolNums;
    setSchoolNumsIsSet(true);
    return this;
  }

  public void unsetSchoolNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHOOLNUMS_ISSET_ID);
  }

  /** Returns true if field schoolNums is set (has been assigned a value) and false otherwise */
  public boolean isSetSchoolNums() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHOOLNUMS_ISSET_ID);
  }

  public void setSchoolNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHOOLNUMS_ISSET_ID, value);
  }

  public int getBankNums() {
    return this.bankNums;
  }

  public BizSpotInfo setBankNums(int bankNums) {
    this.bankNums = bankNums;
    setBankNumsIsSet(true);
    return this;
  }

  public void unsetBankNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKNUMS_ISSET_ID);
  }

  /** Returns true if field bankNums is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNums() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKNUMS_ISSET_ID);
  }

  public void setBankNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKNUMS_ISSET_ID, value);
  }

  public int getHospitalNums() {
    return this.hospitalNums;
  }

  public BizSpotInfo setHospitalNums(int hospitalNums) {
    this.hospitalNums = hospitalNums;
    setHospitalNumsIsSet(true);
    return this;
  }

  public void unsetHospitalNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOSPITALNUMS_ISSET_ID);
  }

  /** Returns true if field hospitalNums is set (has been assigned a value) and false otherwise */
  public boolean isSetHospitalNums() {
    return EncodingUtils.testBit(__isset_bitfield, __HOSPITALNUMS_ISSET_ID);
  }

  public void setHospitalNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOSPITALNUMS_ISSET_ID, value);
  }

  public String getTrafficSituation() {
    return this.trafficSituation;
  }

  public BizSpotInfo setTrafficSituation(String trafficSituation) {
    this.trafficSituation = trafficSituation;
    return this;
  }

  public void unsetTrafficSituation() {
    this.trafficSituation = null;
  }

  /** Returns true if field trafficSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetTrafficSituation() {
    return this.trafficSituation != null;
  }

  public void setTrafficSituationIsSet(boolean value) {
    if (!value) {
      this.trafficSituation = null;
    }
  }

  public String getAroundEnvironmental() {
    return this.aroundEnvironmental;
  }

  public BizSpotInfo setAroundEnvironmental(String aroundEnvironmental) {
    this.aroundEnvironmental = aroundEnvironmental;
    return this;
  }

  public void unsetAroundEnvironmental() {
    this.aroundEnvironmental = null;
  }

  /** Returns true if field aroundEnvironmental is set (has been assigned a value) and false otherwise */
  public boolean isSetAroundEnvironmental() {
    return this.aroundEnvironmental != null;
  }

  public void setAroundEnvironmentalIsSet(boolean value) {
    if (!value) {
      this.aroundEnvironmental = null;
    }
  }

  public double getAgencyPrice() {
    return this.agencyPrice;
  }

  public BizSpotInfo setAgencyPrice(double agencyPrice) {
    this.agencyPrice = agencyPrice;
    setAgencyPriceIsSet(true);
    return this;
  }

  public void unsetAgencyPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGENCYPRICE_ISSET_ID);
  }

  /** Returns true if field agencyPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAgencyPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __AGENCYPRICE_ISSET_ID);
  }

  public void setAgencyPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGENCYPRICE_ISSET_ID, value);
  }

  public double getTotalPrice() {
    return this.totalPrice;
  }

  public BizSpotInfo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  public String getUseSituation() {
    return this.useSituation;
  }

  public BizSpotInfo setUseSituation(String useSituation) {
    this.useSituation = useSituation;
    return this;
  }

  public void unsetUseSituation() {
    this.useSituation = null;
  }

  /** Returns true if field useSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetUseSituation() {
    return this.useSituation != null;
  }

  public void setUseSituationIsSet(boolean value) {
    if (!value) {
      this.useSituation = null;
    }
  }

  public String getActualPurpose() {
    return this.actualPurpose;
  }

  public BizSpotInfo setActualPurpose(String actualPurpose) {
    this.actualPurpose = actualPurpose;
    return this;
  }

  public void unsetActualPurpose() {
    this.actualPurpose = null;
  }

  /** Returns true if field actualPurpose is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPurpose() {
    return this.actualPurpose != null;
  }

  public void setActualPurposeIsSet(boolean value) {
    if (!value) {
      this.actualPurpose = null;
    }
  }

  public String getUserType() {
    return this.userType;
  }

  public BizSpotInfo setUserType(String userType) {
    this.userType = userType;
    return this;
  }

  public void unsetUserType() {
    this.userType = null;
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return this.userType != null;
  }

  public void setUserTypeIsSet(boolean value) {
    if (!value) {
      this.userType = null;
    }
  }

  public String getUserSituation() {
    return this.userSituation;
  }

  public BizSpotInfo setUserSituation(String userSituation) {
    this.userSituation = userSituation;
    return this;
  }

  public void unsetUserSituation() {
    this.userSituation = null;
  }

  /** Returns true if field userSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSituation() {
    return this.userSituation != null;
  }

  public void setUserSituationIsSet(boolean value) {
    if (!value) {
      this.userSituation = null;
    }
  }

  public String getLeaseUse() {
    return this.leaseUse;
  }

  public BizSpotInfo setLeaseUse(String leaseUse) {
    this.leaseUse = leaseUse;
    return this;
  }

  public void unsetLeaseUse() {
    this.leaseUse = null;
  }

  /** Returns true if field leaseUse is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaseUse() {
    return this.leaseUse != null;
  }

  public void setLeaseUseIsSet(boolean value) {
    if (!value) {
      this.leaseUse = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public BizSpotInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getLeaseTimeStart() {
    return this.leaseTimeStart;
  }

  public BizSpotInfo setLeaseTimeStart(String leaseTimeStart) {
    this.leaseTimeStart = leaseTimeStart;
    return this;
  }

  public void unsetLeaseTimeStart() {
    this.leaseTimeStart = null;
  }

  /** Returns true if field leaseTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaseTimeStart() {
    return this.leaseTimeStart != null;
  }

  public void setLeaseTimeStartIsSet(boolean value) {
    if (!value) {
      this.leaseTimeStart = null;
    }
  }

  public String getLeaseTimeEnd() {
    return this.leaseTimeEnd;
  }

  public BizSpotInfo setLeaseTimeEnd(String leaseTimeEnd) {
    this.leaseTimeEnd = leaseTimeEnd;
    return this;
  }

  public void unsetLeaseTimeEnd() {
    this.leaseTimeEnd = null;
  }

  /** Returns true if field leaseTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaseTimeEnd() {
    return this.leaseTimeEnd != null;
  }

  public void setLeaseTimeEndIsSet(boolean value) {
    if (!value) {
      this.leaseTimeEnd = null;
    }
  }

  public String getLessee() {
    return this.lessee;
  }

  public BizSpotInfo setLessee(String lessee) {
    this.lessee = lessee;
    return this;
  }

  public void unsetLessee() {
    this.lessee = null;
  }

  /** Returns true if field lessee is set (has been assigned a value) and false otherwise */
  public boolean isSetLessee() {
    return this.lessee != null;
  }

  public void setLesseeIsSet(boolean value) {
    if (!value) {
      this.lessee = null;
    }
  }

  public String getOthenRemark() {
    return this.othenRemark;
  }

  public BizSpotInfo setOthenRemark(String othenRemark) {
    this.othenRemark = othenRemark;
    return this;
  }

  public void unsetOthenRemark() {
    this.othenRemark = null;
  }

  /** Returns true if field othenRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetOthenRemark() {
    return this.othenRemark != null;
  }

  public void setOthenRemarkIsSet(boolean value) {
    if (!value) {
      this.othenRemark = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public BizSpotInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizSpotInfo setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public BizSpotInfo setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public int getSpotInfosSize() {
    return (this.spotInfos == null) ? 0 : this.spotInfos.size();
  }

  public java.util.Iterator<BizSpotInfo> getSpotInfosIterator() {
    return (this.spotInfos == null) ? null : this.spotInfos.iterator();
  }

  public void addToSpotInfos(BizSpotInfo elem) {
    if (this.spotInfos == null) {
      this.spotInfos = new ArrayList<BizSpotInfo>();
    }
    this.spotInfos.add(elem);
  }

  public List<BizSpotInfo> getSpotInfos() {
    return this.spotInfos;
  }

  public BizSpotInfo setSpotInfos(List<BizSpotInfo> spotInfos) {
    this.spotInfos = spotInfos;
    return this;
  }

  public void unsetSpotInfos() {
    this.spotInfos = null;
  }

  /** Returns true if field spotInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetSpotInfos() {
    return this.spotInfos != null;
  }

  public void setSpotInfosIsSet(boolean value) {
    if (!value) {
      this.spotInfos = null;
    }
  }

  public int getSpotFilesSize() {
    return (this.spotFiles == null) ? 0 : this.spotFiles.size();
  }

  public java.util.Iterator<BizSpotFile> getSpotFilesIterator() {
    return (this.spotFiles == null) ? null : this.spotFiles.iterator();
  }

  public void addToSpotFiles(BizSpotFile elem) {
    if (this.spotFiles == null) {
      this.spotFiles = new ArrayList<BizSpotFile>();
    }
    this.spotFiles.add(elem);
  }

  public List<BizSpotFile> getSpotFiles() {
    return this.spotFiles;
  }

  public BizSpotInfo setSpotFiles(List<BizSpotFile> spotFiles) {
    this.spotFiles = spotFiles;
    return this;
  }

  public void unsetSpotFiles() {
    this.spotFiles = null;
  }

  /** Returns true if field spotFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetSpotFiles() {
    return this.spotFiles != null;
  }

  public void setSpotFilesIsSet(boolean value) {
    if (!value) {
      this.spotFiles = null;
    }
  }

  public String getHousePatternDetail() {
    return this.housePatternDetail;
  }

  public BizSpotInfo setHousePatternDetail(String housePatternDetail) {
    this.housePatternDetail = housePatternDetail;
    return this;
  }

  public void unsetHousePatternDetail() {
    this.housePatternDetail = null;
  }

  /** Returns true if field housePatternDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePatternDetail() {
    return this.housePatternDetail != null;
  }

  public void setHousePatternDetailIsSet(boolean value) {
    if (!value) {
      this.housePatternDetail = null;
    }
  }

  public String getRentPaymentWay() {
    return this.rentPaymentWay;
  }

  public BizSpotInfo setRentPaymentWay(String rentPaymentWay) {
    this.rentPaymentWay = rentPaymentWay;
    return this;
  }

  public void unsetRentPaymentWay() {
    this.rentPaymentWay = null;
  }

  /** Returns true if field rentPaymentWay is set (has been assigned a value) and false otherwise */
  public boolean isSetRentPaymentWay() {
    return this.rentPaymentWay != null;
  }

  public void setRentPaymentWayIsSet(boolean value) {
    if (!value) {
      this.rentPaymentWay = null;
    }
  }

  public String getLeaseUsePhone() {
    return this.leaseUsePhone;
  }

  public BizSpotInfo setLeaseUsePhone(String leaseUsePhone) {
    this.leaseUsePhone = leaseUsePhone;
    return this;
  }

  public void unsetLeaseUsePhone() {
    this.leaseUsePhone = null;
  }

  /** Returns true if field leaseUsePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaseUsePhone() {
    return this.leaseUsePhone != null;
  }

  public void setLeaseUsePhoneIsSet(boolean value) {
    if (!value) {
      this.leaseUsePhone = null;
    }
  }

  public double getRentPrice() {
    return this.rentPrice;
  }

  public BizSpotInfo setRentPrice(double rentPrice) {
    this.rentPrice = rentPrice;
    setRentPriceIsSet(true);
    return this;
  }

  public void unsetRentPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENTPRICE_ISSET_ID);
  }

  /** Returns true if field rentPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRentPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __RENTPRICE_ISSET_ID);
  }

  public void setRentPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENTPRICE_ISSET_ID, value);
  }

  public double getRentEvaluationPrice() {
    return this.rentEvaluationPrice;
  }

  public BizSpotInfo setRentEvaluationPrice(double rentEvaluationPrice) {
    this.rentEvaluationPrice = rentEvaluationPrice;
    setRentEvaluationPriceIsSet(true);
    return this;
  }

  public void unsetRentEvaluationPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENTEVALUATIONPRICE_ISSET_ID);
  }

  /** Returns true if field rentEvaluationPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRentEvaluationPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __RENTEVALUATIONPRICE_ISSET_ID);
  }

  public void setRentEvaluationPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENTEVALUATIONPRICE_ISSET_ID, value);
  }

  public String getEvaluationSource() {
    return this.evaluationSource;
  }

  public BizSpotInfo setEvaluationSource(String evaluationSource) {
    this.evaluationSource = evaluationSource;
    return this;
  }

  public void unsetEvaluationSource() {
    this.evaluationSource = null;
  }

  /** Returns true if field evaluationSource is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluationSource() {
    return this.evaluationSource != null;
  }

  public void setEvaluationSourceIsSet(boolean value) {
    if (!value) {
      this.evaluationSource = null;
    }
  }

  public String getEvaluationSourceDetail() {
    return this.evaluationSourceDetail;
  }

  public BizSpotInfo setEvaluationSourceDetail(String evaluationSourceDetail) {
    this.evaluationSourceDetail = evaluationSourceDetail;
    return this;
  }

  public void unsetEvaluationSourceDetail() {
    this.evaluationSourceDetail = null;
  }

  /** Returns true if field evaluationSourceDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluationSourceDetail() {
    return this.evaluationSourceDetail != null;
  }

  public void setEvaluationSourceDetailIsSet(boolean value) {
    if (!value) {
      this.evaluationSourceDetail = null;
    }
  }

  public double getVacantDays() {
    return this.vacantDays;
  }

  public BizSpotInfo setVacantDays(double vacantDays) {
    this.vacantDays = vacantDays;
    setVacantDaysIsSet(true);
    return this;
  }

  public void unsetVacantDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VACANTDAYS_ISSET_ID);
  }

  /** Returns true if field vacantDays is set (has been assigned a value) and false otherwise */
  public boolean isSetVacantDays() {
    return EncodingUtils.testBit(__isset_bitfield, __VACANTDAYS_ISSET_ID);
  }

  public void setVacantDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VACANTDAYS_ISSET_ID, value);
  }

  public double getVacantRate() {
    return this.vacantRate;
  }

  public BizSpotInfo setVacantRate(double vacantRate) {
    this.vacantRate = vacantRate;
    setVacantRateIsSet(true);
    return this;
  }

  public void unsetVacantRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VACANTRATE_ISSET_ID);
  }

  /** Returns true if field vacantRate is set (has been assigned a value) and false otherwise */
  public boolean isSetVacantRate() {
    return EncodingUtils.testBit(__isset_bitfield, __VACANTRATE_ISSET_ID);
  }

  public void setVacantRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VACANTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case EASTATE_ID:
      if (value == null) {
        unsetEastateId();
      } else {
        setEastateId((Integer)value);
      }
      break;

    case SHOULD_SPOT_TIME:
      if (value == null) {
        unsetShouldSpotTime();
      } else {
        setShouldSpotTime((String)value);
      }
      break;

    case ACTUAL_SPOT_TIME:
      if (value == null) {
        unsetActualSpotTime();
      } else {
        setActualSpotTime((String)value);
      }
      break;

    case DECORATION_SITUATION:
      if (value == null) {
        unsetDecorationSituation();
      } else {
        setDecorationSituation((String)value);
      }
      break;

    case HOUSE_TOTALS:
      if (value == null) {
        unsetHouseTotals();
      } else {
        setHouseTotals((Integer)value);
      }
      break;

    case FLOOR_TOTALS:
      if (value == null) {
        unsetFloorTotals();
      } else {
        setFloorTotals((Integer)value);
      }
      break;

    case HOUSE_STRUCTURE:
      if (value == null) {
        unsetHouseStructure();
      } else {
        setHouseStructure((String)value);
      }
      break;

    case ELEVATORS_NUMS:
      if (value == null) {
        unsetElevatorsNums();
      } else {
        setElevatorsNums((Integer)value);
      }
      break;

    case HOUSEHOLD_NUMS:
      if (value == null) {
        unsetHouseholdNums();
      } else {
        setHouseholdNums((Integer)value);
      }
      break;

    case HOUSE_PATTERN:
      if (value == null) {
        unsetHousePattern();
      } else {
        setHousePattern((String)value);
      }
      break;

    case SHOPPING_NUMS:
      if (value == null) {
        unsetShoppingNums();
      } else {
        setShoppingNums((Integer)value);
      }
      break;

    case SCHOOL_NUMS:
      if (value == null) {
        unsetSchoolNums();
      } else {
        setSchoolNums((Integer)value);
      }
      break;

    case BANK_NUMS:
      if (value == null) {
        unsetBankNums();
      } else {
        setBankNums((Integer)value);
      }
      break;

    case HOSPITAL_NUMS:
      if (value == null) {
        unsetHospitalNums();
      } else {
        setHospitalNums((Integer)value);
      }
      break;

    case TRAFFIC_SITUATION:
      if (value == null) {
        unsetTrafficSituation();
      } else {
        setTrafficSituation((String)value);
      }
      break;

    case AROUND_ENVIRONMENTAL:
      if (value == null) {
        unsetAroundEnvironmental();
      } else {
        setAroundEnvironmental((String)value);
      }
      break;

    case AGENCY_PRICE:
      if (value == null) {
        unsetAgencyPrice();
      } else {
        setAgencyPrice((Double)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case USE_SITUATION:
      if (value == null) {
        unsetUseSituation();
      } else {
        setUseSituation((String)value);
      }
      break;

    case ACTUAL_PURPOSE:
      if (value == null) {
        unsetActualPurpose();
      } else {
        setActualPurpose((String)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((String)value);
      }
      break;

    case USER_SITUATION:
      if (value == null) {
        unsetUserSituation();
      } else {
        setUserSituation((String)value);
      }
      break;

    case LEASE_USE:
      if (value == null) {
        unsetLeaseUse();
      } else {
        setLeaseUse((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case LEASE_TIME_START:
      if (value == null) {
        unsetLeaseTimeStart();
      } else {
        setLeaseTimeStart((String)value);
      }
      break;

    case LEASE_TIME_END:
      if (value == null) {
        unsetLeaseTimeEnd();
      } else {
        setLeaseTimeEnd((String)value);
      }
      break;

    case LESSEE:
      if (value == null) {
        unsetLessee();
      } else {
        setLessee((String)value);
      }
      break;

    case OTHEN_REMARK:
      if (value == null) {
        unsetOthenRemark();
      } else {
        setOthenRemark((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case SPOT_INFOS:
      if (value == null) {
        unsetSpotInfos();
      } else {
        setSpotInfos((List<BizSpotInfo>)value);
      }
      break;

    case SPOT_FILES:
      if (value == null) {
        unsetSpotFiles();
      } else {
        setSpotFiles((List<BizSpotFile>)value);
      }
      break;

    case HOUSE_PATTERN_DETAIL:
      if (value == null) {
        unsetHousePatternDetail();
      } else {
        setHousePatternDetail((String)value);
      }
      break;

    case RENT_PAYMENT_WAY:
      if (value == null) {
        unsetRentPaymentWay();
      } else {
        setRentPaymentWay((String)value);
      }
      break;

    case LEASE_USE_PHONE:
      if (value == null) {
        unsetLeaseUsePhone();
      } else {
        setLeaseUsePhone((String)value);
      }
      break;

    case RENT_PRICE:
      if (value == null) {
        unsetRentPrice();
      } else {
        setRentPrice((Double)value);
      }
      break;

    case RENT_EVALUATION_PRICE:
      if (value == null) {
        unsetRentEvaluationPrice();
      } else {
        setRentEvaluationPrice((Double)value);
      }
      break;

    case EVALUATION_SOURCE:
      if (value == null) {
        unsetEvaluationSource();
      } else {
        setEvaluationSource((String)value);
      }
      break;

    case EVALUATION_SOURCE_DETAIL:
      if (value == null) {
        unsetEvaluationSourceDetail();
      } else {
        setEvaluationSourceDetail((String)value);
      }
      break;

    case VACANT_DAYS:
      if (value == null) {
        unsetVacantDays();
      } else {
        setVacantDays((Double)value);
      }
      break;

    case VACANT_RATE:
      if (value == null) {
        unsetVacantRate();
      } else {
        setVacantRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case EASTATE_ID:
      return Integer.valueOf(getEastateId());

    case SHOULD_SPOT_TIME:
      return getShouldSpotTime();

    case ACTUAL_SPOT_TIME:
      return getActualSpotTime();

    case DECORATION_SITUATION:
      return getDecorationSituation();

    case HOUSE_TOTALS:
      return Integer.valueOf(getHouseTotals());

    case FLOOR_TOTALS:
      return Integer.valueOf(getFloorTotals());

    case HOUSE_STRUCTURE:
      return getHouseStructure();

    case ELEVATORS_NUMS:
      return Integer.valueOf(getElevatorsNums());

    case HOUSEHOLD_NUMS:
      return Integer.valueOf(getHouseholdNums());

    case HOUSE_PATTERN:
      return getHousePattern();

    case SHOPPING_NUMS:
      return Integer.valueOf(getShoppingNums());

    case SCHOOL_NUMS:
      return Integer.valueOf(getSchoolNums());

    case BANK_NUMS:
      return Integer.valueOf(getBankNums());

    case HOSPITAL_NUMS:
      return Integer.valueOf(getHospitalNums());

    case TRAFFIC_SITUATION:
      return getTrafficSituation();

    case AROUND_ENVIRONMENTAL:
      return getAroundEnvironmental();

    case AGENCY_PRICE:
      return Double.valueOf(getAgencyPrice());

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case USE_SITUATION:
      return getUseSituation();

    case ACTUAL_PURPOSE:
      return getActualPurpose();

    case USER_TYPE:
      return getUserType();

    case USER_SITUATION:
      return getUserSituation();

    case LEASE_USE:
      return getLeaseUse();

    case UPDATE_DATE:
      return getUpdateDate();

    case LEASE_TIME_START:
      return getLeaseTimeStart();

    case LEASE_TIME_END:
      return getLeaseTimeEnd();

    case LESSEE:
      return getLessee();

    case OTHEN_REMARK:
      return getOthenRemark();

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case SPOT_INFOS:
      return getSpotInfos();

    case SPOT_FILES:
      return getSpotFiles();

    case HOUSE_PATTERN_DETAIL:
      return getHousePatternDetail();

    case RENT_PAYMENT_WAY:
      return getRentPaymentWay();

    case LEASE_USE_PHONE:
      return getLeaseUsePhone();

    case RENT_PRICE:
      return Double.valueOf(getRentPrice());

    case RENT_EVALUATION_PRICE:
      return Double.valueOf(getRentEvaluationPrice());

    case EVALUATION_SOURCE:
      return getEvaluationSource();

    case EVALUATION_SOURCE_DETAIL:
      return getEvaluationSourceDetail();

    case VACANT_DAYS:
      return Double.valueOf(getVacantDays());

    case VACANT_RATE:
      return Double.valueOf(getVacantRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case EASTATE_ID:
      return isSetEastateId();
    case SHOULD_SPOT_TIME:
      return isSetShouldSpotTime();
    case ACTUAL_SPOT_TIME:
      return isSetActualSpotTime();
    case DECORATION_SITUATION:
      return isSetDecorationSituation();
    case HOUSE_TOTALS:
      return isSetHouseTotals();
    case FLOOR_TOTALS:
      return isSetFloorTotals();
    case HOUSE_STRUCTURE:
      return isSetHouseStructure();
    case ELEVATORS_NUMS:
      return isSetElevatorsNums();
    case HOUSEHOLD_NUMS:
      return isSetHouseholdNums();
    case HOUSE_PATTERN:
      return isSetHousePattern();
    case SHOPPING_NUMS:
      return isSetShoppingNums();
    case SCHOOL_NUMS:
      return isSetSchoolNums();
    case BANK_NUMS:
      return isSetBankNums();
    case HOSPITAL_NUMS:
      return isSetHospitalNums();
    case TRAFFIC_SITUATION:
      return isSetTrafficSituation();
    case AROUND_ENVIRONMENTAL:
      return isSetAroundEnvironmental();
    case AGENCY_PRICE:
      return isSetAgencyPrice();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case USE_SITUATION:
      return isSetUseSituation();
    case ACTUAL_PURPOSE:
      return isSetActualPurpose();
    case USER_TYPE:
      return isSetUserType();
    case USER_SITUATION:
      return isSetUserSituation();
    case LEASE_USE:
      return isSetLeaseUse();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case LEASE_TIME_START:
      return isSetLeaseTimeStart();
    case LEASE_TIME_END:
      return isSetLeaseTimeEnd();
    case LESSEE:
      return isSetLessee();
    case OTHEN_REMARK:
      return isSetOthenRemark();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case SPOT_INFOS:
      return isSetSpotInfos();
    case SPOT_FILES:
      return isSetSpotFiles();
    case HOUSE_PATTERN_DETAIL:
      return isSetHousePatternDetail();
    case RENT_PAYMENT_WAY:
      return isSetRentPaymentWay();
    case LEASE_USE_PHONE:
      return isSetLeaseUsePhone();
    case RENT_PRICE:
      return isSetRentPrice();
    case RENT_EVALUATION_PRICE:
      return isSetRentEvaluationPrice();
    case EVALUATION_SOURCE:
      return isSetEvaluationSource();
    case EVALUATION_SOURCE_DETAIL:
      return isSetEvaluationSourceDetail();
    case VACANT_DAYS:
      return isSetVacantDays();
    case VACANT_RATE:
      return isSetVacantRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizSpotInfo)
      return this.equals((BizSpotInfo)that);
    return false;
  }

  public boolean equals(BizSpotInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_eastateId = true;
    boolean that_present_eastateId = true;
    if (this_present_eastateId || that_present_eastateId) {
      if (!(this_present_eastateId && that_present_eastateId))
        return false;
      if (this.eastateId != that.eastateId)
        return false;
    }

    boolean this_present_shouldSpotTime = true && this.isSetShouldSpotTime();
    boolean that_present_shouldSpotTime = true && that.isSetShouldSpotTime();
    if (this_present_shouldSpotTime || that_present_shouldSpotTime) {
      if (!(this_present_shouldSpotTime && that_present_shouldSpotTime))
        return false;
      if (!this.shouldSpotTime.equals(that.shouldSpotTime))
        return false;
    }

    boolean this_present_actualSpotTime = true && this.isSetActualSpotTime();
    boolean that_present_actualSpotTime = true && that.isSetActualSpotTime();
    if (this_present_actualSpotTime || that_present_actualSpotTime) {
      if (!(this_present_actualSpotTime && that_present_actualSpotTime))
        return false;
      if (!this.actualSpotTime.equals(that.actualSpotTime))
        return false;
    }

    boolean this_present_decorationSituation = true && this.isSetDecorationSituation();
    boolean that_present_decorationSituation = true && that.isSetDecorationSituation();
    if (this_present_decorationSituation || that_present_decorationSituation) {
      if (!(this_present_decorationSituation && that_present_decorationSituation))
        return false;
      if (!this.decorationSituation.equals(that.decorationSituation))
        return false;
    }

    boolean this_present_houseTotals = true;
    boolean that_present_houseTotals = true;
    if (this_present_houseTotals || that_present_houseTotals) {
      if (!(this_present_houseTotals && that_present_houseTotals))
        return false;
      if (this.houseTotals != that.houseTotals)
        return false;
    }

    boolean this_present_floorTotals = true;
    boolean that_present_floorTotals = true;
    if (this_present_floorTotals || that_present_floorTotals) {
      if (!(this_present_floorTotals && that_present_floorTotals))
        return false;
      if (this.floorTotals != that.floorTotals)
        return false;
    }

    boolean this_present_houseStructure = true && this.isSetHouseStructure();
    boolean that_present_houseStructure = true && that.isSetHouseStructure();
    if (this_present_houseStructure || that_present_houseStructure) {
      if (!(this_present_houseStructure && that_present_houseStructure))
        return false;
      if (!this.houseStructure.equals(that.houseStructure))
        return false;
    }

    boolean this_present_elevatorsNums = true;
    boolean that_present_elevatorsNums = true;
    if (this_present_elevatorsNums || that_present_elevatorsNums) {
      if (!(this_present_elevatorsNums && that_present_elevatorsNums))
        return false;
      if (this.elevatorsNums != that.elevatorsNums)
        return false;
    }

    boolean this_present_householdNums = true;
    boolean that_present_householdNums = true;
    if (this_present_householdNums || that_present_householdNums) {
      if (!(this_present_householdNums && that_present_householdNums))
        return false;
      if (this.householdNums != that.householdNums)
        return false;
    }

    boolean this_present_housePattern = true && this.isSetHousePattern();
    boolean that_present_housePattern = true && that.isSetHousePattern();
    if (this_present_housePattern || that_present_housePattern) {
      if (!(this_present_housePattern && that_present_housePattern))
        return false;
      if (!this.housePattern.equals(that.housePattern))
        return false;
    }

    boolean this_present_shoppingNums = true;
    boolean that_present_shoppingNums = true;
    if (this_present_shoppingNums || that_present_shoppingNums) {
      if (!(this_present_shoppingNums && that_present_shoppingNums))
        return false;
      if (this.shoppingNums != that.shoppingNums)
        return false;
    }

    boolean this_present_schoolNums = true;
    boolean that_present_schoolNums = true;
    if (this_present_schoolNums || that_present_schoolNums) {
      if (!(this_present_schoolNums && that_present_schoolNums))
        return false;
      if (this.schoolNums != that.schoolNums)
        return false;
    }

    boolean this_present_bankNums = true;
    boolean that_present_bankNums = true;
    if (this_present_bankNums || that_present_bankNums) {
      if (!(this_present_bankNums && that_present_bankNums))
        return false;
      if (this.bankNums != that.bankNums)
        return false;
    }

    boolean this_present_hospitalNums = true;
    boolean that_present_hospitalNums = true;
    if (this_present_hospitalNums || that_present_hospitalNums) {
      if (!(this_present_hospitalNums && that_present_hospitalNums))
        return false;
      if (this.hospitalNums != that.hospitalNums)
        return false;
    }

    boolean this_present_trafficSituation = true && this.isSetTrafficSituation();
    boolean that_present_trafficSituation = true && that.isSetTrafficSituation();
    if (this_present_trafficSituation || that_present_trafficSituation) {
      if (!(this_present_trafficSituation && that_present_trafficSituation))
        return false;
      if (!this.trafficSituation.equals(that.trafficSituation))
        return false;
    }

    boolean this_present_aroundEnvironmental = true && this.isSetAroundEnvironmental();
    boolean that_present_aroundEnvironmental = true && that.isSetAroundEnvironmental();
    if (this_present_aroundEnvironmental || that_present_aroundEnvironmental) {
      if (!(this_present_aroundEnvironmental && that_present_aroundEnvironmental))
        return false;
      if (!this.aroundEnvironmental.equals(that.aroundEnvironmental))
        return false;
    }

    boolean this_present_agencyPrice = true;
    boolean that_present_agencyPrice = true;
    if (this_present_agencyPrice || that_present_agencyPrice) {
      if (!(this_present_agencyPrice && that_present_agencyPrice))
        return false;
      if (this.agencyPrice != that.agencyPrice)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_useSituation = true && this.isSetUseSituation();
    boolean that_present_useSituation = true && that.isSetUseSituation();
    if (this_present_useSituation || that_present_useSituation) {
      if (!(this_present_useSituation && that_present_useSituation))
        return false;
      if (!this.useSituation.equals(that.useSituation))
        return false;
    }

    boolean this_present_actualPurpose = true && this.isSetActualPurpose();
    boolean that_present_actualPurpose = true && that.isSetActualPurpose();
    if (this_present_actualPurpose || that_present_actualPurpose) {
      if (!(this_present_actualPurpose && that_present_actualPurpose))
        return false;
      if (!this.actualPurpose.equals(that.actualPurpose))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (!this.userType.equals(that.userType))
        return false;
    }

    boolean this_present_userSituation = true && this.isSetUserSituation();
    boolean that_present_userSituation = true && that.isSetUserSituation();
    if (this_present_userSituation || that_present_userSituation) {
      if (!(this_present_userSituation && that_present_userSituation))
        return false;
      if (!this.userSituation.equals(that.userSituation))
        return false;
    }

    boolean this_present_leaseUse = true && this.isSetLeaseUse();
    boolean that_present_leaseUse = true && that.isSetLeaseUse();
    if (this_present_leaseUse || that_present_leaseUse) {
      if (!(this_present_leaseUse && that_present_leaseUse))
        return false;
      if (!this.leaseUse.equals(that.leaseUse))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_leaseTimeStart = true && this.isSetLeaseTimeStart();
    boolean that_present_leaseTimeStart = true && that.isSetLeaseTimeStart();
    if (this_present_leaseTimeStart || that_present_leaseTimeStart) {
      if (!(this_present_leaseTimeStart && that_present_leaseTimeStart))
        return false;
      if (!this.leaseTimeStart.equals(that.leaseTimeStart))
        return false;
    }

    boolean this_present_leaseTimeEnd = true && this.isSetLeaseTimeEnd();
    boolean that_present_leaseTimeEnd = true && that.isSetLeaseTimeEnd();
    if (this_present_leaseTimeEnd || that_present_leaseTimeEnd) {
      if (!(this_present_leaseTimeEnd && that_present_leaseTimeEnd))
        return false;
      if (!this.leaseTimeEnd.equals(that.leaseTimeEnd))
        return false;
    }

    boolean this_present_lessee = true && this.isSetLessee();
    boolean that_present_lessee = true && that.isSetLessee();
    if (this_present_lessee || that_present_lessee) {
      if (!(this_present_lessee && that_present_lessee))
        return false;
      if (!this.lessee.equals(that.lessee))
        return false;
    }

    boolean this_present_othenRemark = true && this.isSetOthenRemark();
    boolean that_present_othenRemark = true && that.isSetOthenRemark();
    if (this_present_othenRemark || that_present_othenRemark) {
      if (!(this_present_othenRemark && that_present_othenRemark))
        return false;
      if (!this.othenRemark.equals(that.othenRemark))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_spotInfos = true && this.isSetSpotInfos();
    boolean that_present_spotInfos = true && that.isSetSpotInfos();
    if (this_present_spotInfos || that_present_spotInfos) {
      if (!(this_present_spotInfos && that_present_spotInfos))
        return false;
      if (!this.spotInfos.equals(that.spotInfos))
        return false;
    }

    boolean this_present_spotFiles = true && this.isSetSpotFiles();
    boolean that_present_spotFiles = true && that.isSetSpotFiles();
    if (this_present_spotFiles || that_present_spotFiles) {
      if (!(this_present_spotFiles && that_present_spotFiles))
        return false;
      if (!this.spotFiles.equals(that.spotFiles))
        return false;
    }

    boolean this_present_housePatternDetail = true && this.isSetHousePatternDetail();
    boolean that_present_housePatternDetail = true && that.isSetHousePatternDetail();
    if (this_present_housePatternDetail || that_present_housePatternDetail) {
      if (!(this_present_housePatternDetail && that_present_housePatternDetail))
        return false;
      if (!this.housePatternDetail.equals(that.housePatternDetail))
        return false;
    }

    boolean this_present_rentPaymentWay = true && this.isSetRentPaymentWay();
    boolean that_present_rentPaymentWay = true && that.isSetRentPaymentWay();
    if (this_present_rentPaymentWay || that_present_rentPaymentWay) {
      if (!(this_present_rentPaymentWay && that_present_rentPaymentWay))
        return false;
      if (!this.rentPaymentWay.equals(that.rentPaymentWay))
        return false;
    }

    boolean this_present_leaseUsePhone = true && this.isSetLeaseUsePhone();
    boolean that_present_leaseUsePhone = true && that.isSetLeaseUsePhone();
    if (this_present_leaseUsePhone || that_present_leaseUsePhone) {
      if (!(this_present_leaseUsePhone && that_present_leaseUsePhone))
        return false;
      if (!this.leaseUsePhone.equals(that.leaseUsePhone))
        return false;
    }

    boolean this_present_rentPrice = true;
    boolean that_present_rentPrice = true;
    if (this_present_rentPrice || that_present_rentPrice) {
      if (!(this_present_rentPrice && that_present_rentPrice))
        return false;
      if (this.rentPrice != that.rentPrice)
        return false;
    }

    boolean this_present_rentEvaluationPrice = true;
    boolean that_present_rentEvaluationPrice = true;
    if (this_present_rentEvaluationPrice || that_present_rentEvaluationPrice) {
      if (!(this_present_rentEvaluationPrice && that_present_rentEvaluationPrice))
        return false;
      if (this.rentEvaluationPrice != that.rentEvaluationPrice)
        return false;
    }

    boolean this_present_evaluationSource = true && this.isSetEvaluationSource();
    boolean that_present_evaluationSource = true && that.isSetEvaluationSource();
    if (this_present_evaluationSource || that_present_evaluationSource) {
      if (!(this_present_evaluationSource && that_present_evaluationSource))
        return false;
      if (!this.evaluationSource.equals(that.evaluationSource))
        return false;
    }

    boolean this_present_evaluationSourceDetail = true && this.isSetEvaluationSourceDetail();
    boolean that_present_evaluationSourceDetail = true && that.isSetEvaluationSourceDetail();
    if (this_present_evaluationSourceDetail || that_present_evaluationSourceDetail) {
      if (!(this_present_evaluationSourceDetail && that_present_evaluationSourceDetail))
        return false;
      if (!this.evaluationSourceDetail.equals(that.evaluationSourceDetail))
        return false;
    }

    boolean this_present_vacantDays = true;
    boolean that_present_vacantDays = true;
    if (this_present_vacantDays || that_present_vacantDays) {
      if (!(this_present_vacantDays && that_present_vacantDays))
        return false;
      if (this.vacantDays != that.vacantDays)
        return false;
    }

    boolean this_present_vacantRate = true;
    boolean that_present_vacantRate = true;
    if (this_present_vacantRate || that_present_vacantRate) {
      if (!(this_present_vacantRate && that_present_vacantRate))
        return false;
      if (this.vacantRate != that.vacantRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_eastateId = true;
    list.add(present_eastateId);
    if (present_eastateId)
      list.add(eastateId);

    boolean present_shouldSpotTime = true && (isSetShouldSpotTime());
    list.add(present_shouldSpotTime);
    if (present_shouldSpotTime)
      list.add(shouldSpotTime);

    boolean present_actualSpotTime = true && (isSetActualSpotTime());
    list.add(present_actualSpotTime);
    if (present_actualSpotTime)
      list.add(actualSpotTime);

    boolean present_decorationSituation = true && (isSetDecorationSituation());
    list.add(present_decorationSituation);
    if (present_decorationSituation)
      list.add(decorationSituation);

    boolean present_houseTotals = true;
    list.add(present_houseTotals);
    if (present_houseTotals)
      list.add(houseTotals);

    boolean present_floorTotals = true;
    list.add(present_floorTotals);
    if (present_floorTotals)
      list.add(floorTotals);

    boolean present_houseStructure = true && (isSetHouseStructure());
    list.add(present_houseStructure);
    if (present_houseStructure)
      list.add(houseStructure);

    boolean present_elevatorsNums = true;
    list.add(present_elevatorsNums);
    if (present_elevatorsNums)
      list.add(elevatorsNums);

    boolean present_householdNums = true;
    list.add(present_householdNums);
    if (present_householdNums)
      list.add(householdNums);

    boolean present_housePattern = true && (isSetHousePattern());
    list.add(present_housePattern);
    if (present_housePattern)
      list.add(housePattern);

    boolean present_shoppingNums = true;
    list.add(present_shoppingNums);
    if (present_shoppingNums)
      list.add(shoppingNums);

    boolean present_schoolNums = true;
    list.add(present_schoolNums);
    if (present_schoolNums)
      list.add(schoolNums);

    boolean present_bankNums = true;
    list.add(present_bankNums);
    if (present_bankNums)
      list.add(bankNums);

    boolean present_hospitalNums = true;
    list.add(present_hospitalNums);
    if (present_hospitalNums)
      list.add(hospitalNums);

    boolean present_trafficSituation = true && (isSetTrafficSituation());
    list.add(present_trafficSituation);
    if (present_trafficSituation)
      list.add(trafficSituation);

    boolean present_aroundEnvironmental = true && (isSetAroundEnvironmental());
    list.add(present_aroundEnvironmental);
    if (present_aroundEnvironmental)
      list.add(aroundEnvironmental);

    boolean present_agencyPrice = true;
    list.add(present_agencyPrice);
    if (present_agencyPrice)
      list.add(agencyPrice);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_useSituation = true && (isSetUseSituation());
    list.add(present_useSituation);
    if (present_useSituation)
      list.add(useSituation);

    boolean present_actualPurpose = true && (isSetActualPurpose());
    list.add(present_actualPurpose);
    if (present_actualPurpose)
      list.add(actualPurpose);

    boolean present_userType = true && (isSetUserType());
    list.add(present_userType);
    if (present_userType)
      list.add(userType);

    boolean present_userSituation = true && (isSetUserSituation());
    list.add(present_userSituation);
    if (present_userSituation)
      list.add(userSituation);

    boolean present_leaseUse = true && (isSetLeaseUse());
    list.add(present_leaseUse);
    if (present_leaseUse)
      list.add(leaseUse);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_leaseTimeStart = true && (isSetLeaseTimeStart());
    list.add(present_leaseTimeStart);
    if (present_leaseTimeStart)
      list.add(leaseTimeStart);

    boolean present_leaseTimeEnd = true && (isSetLeaseTimeEnd());
    list.add(present_leaseTimeEnd);
    if (present_leaseTimeEnd)
      list.add(leaseTimeEnd);

    boolean present_lessee = true && (isSetLessee());
    list.add(present_lessee);
    if (present_lessee)
      list.add(lessee);

    boolean present_othenRemark = true && (isSetOthenRemark());
    list.add(present_othenRemark);
    if (present_othenRemark)
      list.add(othenRemark);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_spotInfos = true && (isSetSpotInfos());
    list.add(present_spotInfos);
    if (present_spotInfos)
      list.add(spotInfos);

    boolean present_spotFiles = true && (isSetSpotFiles());
    list.add(present_spotFiles);
    if (present_spotFiles)
      list.add(spotFiles);

    boolean present_housePatternDetail = true && (isSetHousePatternDetail());
    list.add(present_housePatternDetail);
    if (present_housePatternDetail)
      list.add(housePatternDetail);

    boolean present_rentPaymentWay = true && (isSetRentPaymentWay());
    list.add(present_rentPaymentWay);
    if (present_rentPaymentWay)
      list.add(rentPaymentWay);

    boolean present_leaseUsePhone = true && (isSetLeaseUsePhone());
    list.add(present_leaseUsePhone);
    if (present_leaseUsePhone)
      list.add(leaseUsePhone);

    boolean present_rentPrice = true;
    list.add(present_rentPrice);
    if (present_rentPrice)
      list.add(rentPrice);

    boolean present_rentEvaluationPrice = true;
    list.add(present_rentEvaluationPrice);
    if (present_rentEvaluationPrice)
      list.add(rentEvaluationPrice);

    boolean present_evaluationSource = true && (isSetEvaluationSource());
    list.add(present_evaluationSource);
    if (present_evaluationSource)
      list.add(evaluationSource);

    boolean present_evaluationSourceDetail = true && (isSetEvaluationSourceDetail());
    list.add(present_evaluationSourceDetail);
    if (present_evaluationSourceDetail)
      list.add(evaluationSourceDetail);

    boolean present_vacantDays = true;
    list.add(present_vacantDays);
    if (present_vacantDays)
      list.add(vacantDays);

    boolean present_vacantRate = true;
    list.add(present_vacantRate);
    if (present_vacantRate)
      list.add(vacantRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizSpotInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEastateId()).compareTo(other.isSetEastateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEastateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eastateId, other.eastateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldSpotTime()).compareTo(other.isSetShouldSpotTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldSpotTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldSpotTime, other.shouldSpotTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualSpotTime()).compareTo(other.isSetActualSpotTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualSpotTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualSpotTime, other.actualSpotTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecorationSituation()).compareTo(other.isSetDecorationSituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecorationSituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decorationSituation, other.decorationSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseTotals()).compareTo(other.isSetHouseTotals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseTotals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseTotals, other.houseTotals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloorTotals()).compareTo(other.isSetFloorTotals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloorTotals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floorTotals, other.floorTotals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseStructure()).compareTo(other.isSetHouseStructure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseStructure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseStructure, other.houseStructure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElevatorsNums()).compareTo(other.isSetElevatorsNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElevatorsNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elevatorsNums, other.elevatorsNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseholdNums()).compareTo(other.isSetHouseholdNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseholdNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.householdNums, other.householdNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePattern()).compareTo(other.isSetHousePattern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePattern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePattern, other.housePattern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShoppingNums()).compareTo(other.isSetShoppingNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShoppingNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shoppingNums, other.shoppingNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchoolNums()).compareTo(other.isSetSchoolNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchoolNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolNums, other.schoolNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNums()).compareTo(other.isSetBankNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNums, other.bankNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHospitalNums()).compareTo(other.isSetHospitalNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHospitalNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hospitalNums, other.hospitalNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrafficSituation()).compareTo(other.isSetTrafficSituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrafficSituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trafficSituation, other.trafficSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAroundEnvironmental()).compareTo(other.isSetAroundEnvironmental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAroundEnvironmental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aroundEnvironmental, other.aroundEnvironmental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgencyPrice()).compareTo(other.isSetAgencyPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgencyPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agencyPrice, other.agencyPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseSituation()).compareTo(other.isSetUseSituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseSituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useSituation, other.useSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPurpose()).compareTo(other.isSetActualPurpose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPurpose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPurpose, other.actualPurpose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserSituation()).compareTo(other.isSetUserSituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSituation, other.userSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaseUse()).compareTo(other.isSetLeaseUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaseUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaseUse, other.leaseUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaseTimeStart()).compareTo(other.isSetLeaseTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaseTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaseTimeStart, other.leaseTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaseTimeEnd()).compareTo(other.isSetLeaseTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaseTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaseTimeEnd, other.leaseTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLessee()).compareTo(other.isSetLessee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLessee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lessee, other.lessee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOthenRemark()).compareTo(other.isSetOthenRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOthenRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.othenRemark, other.othenRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpotInfos()).compareTo(other.isSetSpotInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpotInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spotInfos, other.spotInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpotFiles()).compareTo(other.isSetSpotFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpotFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spotFiles, other.spotFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePatternDetail()).compareTo(other.isSetHousePatternDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePatternDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePatternDetail, other.housePatternDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRentPaymentWay()).compareTo(other.isSetRentPaymentWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentPaymentWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentPaymentWay, other.rentPaymentWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaseUsePhone()).compareTo(other.isSetLeaseUsePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaseUsePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaseUsePhone, other.leaseUsePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRentPrice()).compareTo(other.isSetRentPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentPrice, other.rentPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRentEvaluationPrice()).compareTo(other.isSetRentEvaluationPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentEvaluationPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentEvaluationPrice, other.rentEvaluationPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluationSource()).compareTo(other.isSetEvaluationSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluationSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationSource, other.evaluationSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluationSourceDetail()).compareTo(other.isSetEvaluationSourceDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluationSourceDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluationSourceDetail, other.evaluationSourceDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVacantDays()).compareTo(other.isSetVacantDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVacantDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vacantDays, other.vacantDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVacantRate()).compareTo(other.isSetVacantRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVacantRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vacantRate, other.vacantRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizSpotInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eastateId:");
    sb.append(this.eastateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldSpotTime:");
    if (this.shouldSpotTime == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldSpotTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualSpotTime:");
    if (this.actualSpotTime == null) {
      sb.append("null");
    } else {
      sb.append(this.actualSpotTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("decorationSituation:");
    if (this.decorationSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.decorationSituation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseTotals:");
    sb.append(this.houseTotals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("floorTotals:");
    sb.append(this.floorTotals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseStructure:");
    if (this.houseStructure == null) {
      sb.append("null");
    } else {
      sb.append(this.houseStructure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("elevatorsNums:");
    sb.append(this.elevatorsNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("householdNums:");
    sb.append(this.householdNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePattern:");
    if (this.housePattern == null) {
      sb.append("null");
    } else {
      sb.append(this.housePattern);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shoppingNums:");
    sb.append(this.shoppingNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schoolNums:");
    sb.append(this.schoolNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNums:");
    sb.append(this.bankNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hospitalNums:");
    sb.append(this.hospitalNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trafficSituation:");
    if (this.trafficSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.trafficSituation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aroundEnvironmental:");
    if (this.aroundEnvironmental == null) {
      sb.append("null");
    } else {
      sb.append(this.aroundEnvironmental);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agencyPrice:");
    sb.append(this.agencyPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useSituation:");
    if (this.useSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.useSituation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPurpose:");
    if (this.actualPurpose == null) {
      sb.append("null");
    } else {
      sb.append(this.actualPurpose);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userType:");
    if (this.userType == null) {
      sb.append("null");
    } else {
      sb.append(this.userType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userSituation:");
    if (this.userSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.userSituation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaseUse:");
    if (this.leaseUse == null) {
      sb.append("null");
    } else {
      sb.append(this.leaseUse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaseTimeStart:");
    if (this.leaseTimeStart == null) {
      sb.append("null");
    } else {
      sb.append(this.leaseTimeStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaseTimeEnd:");
    if (this.leaseTimeEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.leaseTimeEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lessee:");
    if (this.lessee == null) {
      sb.append("null");
    } else {
      sb.append(this.lessee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("othenRemark:");
    if (this.othenRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.othenRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spotInfos:");
    if (this.spotInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.spotInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spotFiles:");
    if (this.spotFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.spotFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePatternDetail:");
    if (this.housePatternDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.housePatternDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentPaymentWay:");
    if (this.rentPaymentWay == null) {
      sb.append("null");
    } else {
      sb.append(this.rentPaymentWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaseUsePhone:");
    if (this.leaseUsePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.leaseUsePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentPrice:");
    sb.append(this.rentPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentEvaluationPrice:");
    sb.append(this.rentEvaluationPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluationSource:");
    if (this.evaluationSource == null) {
      sb.append("null");
    } else {
      sb.append(this.evaluationSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluationSourceDetail:");
    if (this.evaluationSourceDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.evaluationSourceDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vacantDays:");
    sb.append(this.vacantDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vacantRate:");
    sb.append(this.vacantRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizSpotInfoStandardSchemeFactory implements SchemeFactory {
    public BizSpotInfoStandardScheme getScheme() {
      return new BizSpotInfoStandardScheme();
    }
  }

  private static class BizSpotInfoStandardScheme extends StandardScheme<BizSpotInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizSpotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EASTATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eastateId = iprot.readI32();
              struct.setEastateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOULD_SPOT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldSpotTime = iprot.readString();
              struct.setShouldSpotTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTUAL_SPOT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualSpotTime = iprot.readString();
              struct.setActualSpotTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DECORATION_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.decorationSituation = iprot.readString();
              struct.setDecorationSituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOUSE_TOTALS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseTotals = iprot.readI32();
              struct.setHouseTotalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLOOR_TOTALS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.floorTotals = iprot.readI32();
              struct.setFloorTotalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HOUSE_STRUCTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseStructure = iprot.readString();
              struct.setHouseStructureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ELEVATORS_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.elevatorsNums = iprot.readI32();
              struct.setElevatorsNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HOUSEHOLD_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.householdNums = iprot.readI32();
              struct.setHouseholdNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HOUSE_PATTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePattern = iprot.readString();
              struct.setHousePatternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHOPPING_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shoppingNums = iprot.readI32();
              struct.setShoppingNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SCHOOL_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schoolNums = iprot.readI32();
              struct.setSchoolNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BANK_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankNums = iprot.readI32();
              struct.setBankNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HOSPITAL_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hospitalNums = iprot.readI32();
              struct.setHospitalNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TRAFFIC_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trafficSituation = iprot.readString();
              struct.setTrafficSituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AROUND_ENVIRONMENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aroundEnvironmental = iprot.readString();
              struct.setAroundEnvironmentalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // AGENCY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.agencyPrice = iprot.readDouble();
              struct.setAgencyPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // USE_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useSituation = iprot.readString();
              struct.setUseSituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACTUAL_PURPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualPurpose = iprot.readString();
              struct.setActualPurposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userType = iprot.readString();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // USER_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userSituation = iprot.readString();
              struct.setUserSituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LEASE_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leaseUse = iprot.readString();
              struct.setLeaseUseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // LEASE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leaseTimeStart = iprot.readString();
              struct.setLeaseTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LEASE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leaseTimeEnd = iprot.readString();
              struct.setLeaseTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LESSEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lessee = iprot.readString();
              struct.setLesseeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OTHEN_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.othenRemark = iprot.readString();
              struct.setOthenRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // SPOT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.spotInfos = new ArrayList<BizSpotInfo>(_list112.size);
                BizSpotInfo _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = new BizSpotInfo();
                  _elem113.read(iprot);
                  struct.spotInfos.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setSpotInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // SPOT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                struct.spotFiles = new ArrayList<BizSpotFile>(_list115.size);
                BizSpotFile _elem116;
                for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                {
                  _elem116 = new BizSpotFile();
                  _elem116.read(iprot);
                  struct.spotFiles.add(_elem116);
                }
                iprot.readListEnd();
              }
              struct.setSpotFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // HOUSE_PATTERN_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePatternDetail = iprot.readString();
              struct.setHousePatternDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // RENT_PAYMENT_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rentPaymentWay = iprot.readString();
              struct.setRentPaymentWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // LEASE_USE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leaseUsePhone = iprot.readString();
              struct.setLeaseUsePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // RENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rentPrice = iprot.readDouble();
              struct.setRentPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // RENT_EVALUATION_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rentEvaluationPrice = iprot.readDouble();
              struct.setRentEvaluationPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // EVALUATION_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.evaluationSource = iprot.readString();
              struct.setEvaluationSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // EVALUATION_SOURCE_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.evaluationSourceDetail = iprot.readString();
              struct.setEvaluationSourceDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // VACANT_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vacantDays = iprot.readDouble();
              struct.setVacantDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // VACANT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vacantRate = iprot.readDouble();
              struct.setVacantRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizSpotInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EASTATE_ID_FIELD_DESC);
      oprot.writeI32(struct.eastateId);
      oprot.writeFieldEnd();
      if (struct.shouldSpotTime != null) {
        oprot.writeFieldBegin(SHOULD_SPOT_TIME_FIELD_DESC);
        oprot.writeString(struct.shouldSpotTime);
        oprot.writeFieldEnd();
      }
      if (struct.actualSpotTime != null) {
        oprot.writeFieldBegin(ACTUAL_SPOT_TIME_FIELD_DESC);
        oprot.writeString(struct.actualSpotTime);
        oprot.writeFieldEnd();
      }
      if (struct.decorationSituation != null) {
        oprot.writeFieldBegin(DECORATION_SITUATION_FIELD_DESC);
        oprot.writeString(struct.decorationSituation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOUSE_TOTALS_FIELD_DESC);
      oprot.writeI32(struct.houseTotals);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOOR_TOTALS_FIELD_DESC);
      oprot.writeI32(struct.floorTotals);
      oprot.writeFieldEnd();
      if (struct.houseStructure != null) {
        oprot.writeFieldBegin(HOUSE_STRUCTURE_FIELD_DESC);
        oprot.writeString(struct.houseStructure);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ELEVATORS_NUMS_FIELD_DESC);
      oprot.writeI32(struct.elevatorsNums);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSEHOLD_NUMS_FIELD_DESC);
      oprot.writeI32(struct.householdNums);
      oprot.writeFieldEnd();
      if (struct.housePattern != null) {
        oprot.writeFieldBegin(HOUSE_PATTERN_FIELD_DESC);
        oprot.writeString(struct.housePattern);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOPPING_NUMS_FIELD_DESC);
      oprot.writeI32(struct.shoppingNums);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHOOL_NUMS_FIELD_DESC);
      oprot.writeI32(struct.schoolNums);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_NUMS_FIELD_DESC);
      oprot.writeI32(struct.bankNums);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOSPITAL_NUMS_FIELD_DESC);
      oprot.writeI32(struct.hospitalNums);
      oprot.writeFieldEnd();
      if (struct.trafficSituation != null) {
        oprot.writeFieldBegin(TRAFFIC_SITUATION_FIELD_DESC);
        oprot.writeString(struct.trafficSituation);
        oprot.writeFieldEnd();
      }
      if (struct.aroundEnvironmental != null) {
        oprot.writeFieldBegin(AROUND_ENVIRONMENTAL_FIELD_DESC);
        oprot.writeString(struct.aroundEnvironmental);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGENCY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.agencyPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      if (struct.useSituation != null) {
        oprot.writeFieldBegin(USE_SITUATION_FIELD_DESC);
        oprot.writeString(struct.useSituation);
        oprot.writeFieldEnd();
      }
      if (struct.actualPurpose != null) {
        oprot.writeFieldBegin(ACTUAL_PURPOSE_FIELD_DESC);
        oprot.writeString(struct.actualPurpose);
        oprot.writeFieldEnd();
      }
      if (struct.userType != null) {
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeString(struct.userType);
        oprot.writeFieldEnd();
      }
      if (struct.userSituation != null) {
        oprot.writeFieldBegin(USER_SITUATION_FIELD_DESC);
        oprot.writeString(struct.userSituation);
        oprot.writeFieldEnd();
      }
      if (struct.leaseUse != null) {
        oprot.writeFieldBegin(LEASE_USE_FIELD_DESC);
        oprot.writeString(struct.leaseUse);
        oprot.writeFieldEnd();
      }
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.leaseTimeStart != null) {
        oprot.writeFieldBegin(LEASE_TIME_START_FIELD_DESC);
        oprot.writeString(struct.leaseTimeStart);
        oprot.writeFieldEnd();
      }
      if (struct.leaseTimeEnd != null) {
        oprot.writeFieldBegin(LEASE_TIME_END_FIELD_DESC);
        oprot.writeString(struct.leaseTimeEnd);
        oprot.writeFieldEnd();
      }
      if (struct.lessee != null) {
        oprot.writeFieldBegin(LESSEE_FIELD_DESC);
        oprot.writeString(struct.lessee);
        oprot.writeFieldEnd();
      }
      if (struct.othenRemark != null) {
        oprot.writeFieldBegin(OTHEN_REMARK_FIELD_DESC);
        oprot.writeString(struct.othenRemark);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.spotInfos != null) {
        oprot.writeFieldBegin(SPOT_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spotInfos.size()));
          for (BizSpotInfo _iter118 : struct.spotInfos)
          {
            _iter118.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.spotFiles != null) {
        oprot.writeFieldBegin(SPOT_FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spotFiles.size()));
          for (BizSpotFile _iter119 : struct.spotFiles)
          {
            _iter119.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.housePatternDetail != null) {
        oprot.writeFieldBegin(HOUSE_PATTERN_DETAIL_FIELD_DESC);
        oprot.writeString(struct.housePatternDetail);
        oprot.writeFieldEnd();
      }
      if (struct.rentPaymentWay != null) {
        oprot.writeFieldBegin(RENT_PAYMENT_WAY_FIELD_DESC);
        oprot.writeString(struct.rentPaymentWay);
        oprot.writeFieldEnd();
      }
      if (struct.leaseUsePhone != null) {
        oprot.writeFieldBegin(LEASE_USE_PHONE_FIELD_DESC);
        oprot.writeString(struct.leaseUsePhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RENT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.rentPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENT_EVALUATION_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.rentEvaluationPrice);
      oprot.writeFieldEnd();
      if (struct.evaluationSource != null) {
        oprot.writeFieldBegin(EVALUATION_SOURCE_FIELD_DESC);
        oprot.writeString(struct.evaluationSource);
        oprot.writeFieldEnd();
      }
      if (struct.evaluationSourceDetail != null) {
        oprot.writeFieldBegin(EVALUATION_SOURCE_DETAIL_FIELD_DESC);
        oprot.writeString(struct.evaluationSourceDetail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VACANT_DAYS_FIELD_DESC);
      oprot.writeDouble(struct.vacantDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VACANT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.vacantRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizSpotInfoTupleSchemeFactory implements SchemeFactory {
    public BizSpotInfoTupleScheme getScheme() {
      return new BizSpotInfoTupleScheme();
    }
  }

  private static class BizSpotInfoTupleScheme extends TupleScheme<BizSpotInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizSpotInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetEastateId()) {
        optionals.set(2);
      }
      if (struct.isSetShouldSpotTime()) {
        optionals.set(3);
      }
      if (struct.isSetActualSpotTime()) {
        optionals.set(4);
      }
      if (struct.isSetDecorationSituation()) {
        optionals.set(5);
      }
      if (struct.isSetHouseTotals()) {
        optionals.set(6);
      }
      if (struct.isSetFloorTotals()) {
        optionals.set(7);
      }
      if (struct.isSetHouseStructure()) {
        optionals.set(8);
      }
      if (struct.isSetElevatorsNums()) {
        optionals.set(9);
      }
      if (struct.isSetHouseholdNums()) {
        optionals.set(10);
      }
      if (struct.isSetHousePattern()) {
        optionals.set(11);
      }
      if (struct.isSetShoppingNums()) {
        optionals.set(12);
      }
      if (struct.isSetSchoolNums()) {
        optionals.set(13);
      }
      if (struct.isSetBankNums()) {
        optionals.set(14);
      }
      if (struct.isSetHospitalNums()) {
        optionals.set(15);
      }
      if (struct.isSetTrafficSituation()) {
        optionals.set(16);
      }
      if (struct.isSetAroundEnvironmental()) {
        optionals.set(17);
      }
      if (struct.isSetAgencyPrice()) {
        optionals.set(18);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(19);
      }
      if (struct.isSetUseSituation()) {
        optionals.set(20);
      }
      if (struct.isSetActualPurpose()) {
        optionals.set(21);
      }
      if (struct.isSetUserType()) {
        optionals.set(22);
      }
      if (struct.isSetUserSituation()) {
        optionals.set(23);
      }
      if (struct.isSetLeaseUse()) {
        optionals.set(24);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(25);
      }
      if (struct.isSetLeaseTimeStart()) {
        optionals.set(26);
      }
      if (struct.isSetLeaseTimeEnd()) {
        optionals.set(27);
      }
      if (struct.isSetLessee()) {
        optionals.set(28);
      }
      if (struct.isSetOthenRemark()) {
        optionals.set(29);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(30);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(31);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(32);
      }
      if (struct.isSetSpotInfos()) {
        optionals.set(33);
      }
      if (struct.isSetSpotFiles()) {
        optionals.set(34);
      }
      if (struct.isSetHousePatternDetail()) {
        optionals.set(35);
      }
      if (struct.isSetRentPaymentWay()) {
        optionals.set(36);
      }
      if (struct.isSetLeaseUsePhone()) {
        optionals.set(37);
      }
      if (struct.isSetRentPrice()) {
        optionals.set(38);
      }
      if (struct.isSetRentEvaluationPrice()) {
        optionals.set(39);
      }
      if (struct.isSetEvaluationSource()) {
        optionals.set(40);
      }
      if (struct.isSetEvaluationSourceDetail()) {
        optionals.set(41);
      }
      if (struct.isSetVacantDays()) {
        optionals.set(42);
      }
      if (struct.isSetVacantRate()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetEastateId()) {
        oprot.writeI32(struct.eastateId);
      }
      if (struct.isSetShouldSpotTime()) {
        oprot.writeString(struct.shouldSpotTime);
      }
      if (struct.isSetActualSpotTime()) {
        oprot.writeString(struct.actualSpotTime);
      }
      if (struct.isSetDecorationSituation()) {
        oprot.writeString(struct.decorationSituation);
      }
      if (struct.isSetHouseTotals()) {
        oprot.writeI32(struct.houseTotals);
      }
      if (struct.isSetFloorTotals()) {
        oprot.writeI32(struct.floorTotals);
      }
      if (struct.isSetHouseStructure()) {
        oprot.writeString(struct.houseStructure);
      }
      if (struct.isSetElevatorsNums()) {
        oprot.writeI32(struct.elevatorsNums);
      }
      if (struct.isSetHouseholdNums()) {
        oprot.writeI32(struct.householdNums);
      }
      if (struct.isSetHousePattern()) {
        oprot.writeString(struct.housePattern);
      }
      if (struct.isSetShoppingNums()) {
        oprot.writeI32(struct.shoppingNums);
      }
      if (struct.isSetSchoolNums()) {
        oprot.writeI32(struct.schoolNums);
      }
      if (struct.isSetBankNums()) {
        oprot.writeI32(struct.bankNums);
      }
      if (struct.isSetHospitalNums()) {
        oprot.writeI32(struct.hospitalNums);
      }
      if (struct.isSetTrafficSituation()) {
        oprot.writeString(struct.trafficSituation);
      }
      if (struct.isSetAroundEnvironmental()) {
        oprot.writeString(struct.aroundEnvironmental);
      }
      if (struct.isSetAgencyPrice()) {
        oprot.writeDouble(struct.agencyPrice);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetUseSituation()) {
        oprot.writeString(struct.useSituation);
      }
      if (struct.isSetActualPurpose()) {
        oprot.writeString(struct.actualPurpose);
      }
      if (struct.isSetUserType()) {
        oprot.writeString(struct.userType);
      }
      if (struct.isSetUserSituation()) {
        oprot.writeString(struct.userSituation);
      }
      if (struct.isSetLeaseUse()) {
        oprot.writeString(struct.leaseUse);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetLeaseTimeStart()) {
        oprot.writeString(struct.leaseTimeStart);
      }
      if (struct.isSetLeaseTimeEnd()) {
        oprot.writeString(struct.leaseTimeEnd);
      }
      if (struct.isSetLessee()) {
        oprot.writeString(struct.lessee);
      }
      if (struct.isSetOthenRemark()) {
        oprot.writeString(struct.othenRemark);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetSpotInfos()) {
        {
          oprot.writeI32(struct.spotInfos.size());
          for (BizSpotInfo _iter120 : struct.spotInfos)
          {
            _iter120.write(oprot);
          }
        }
      }
      if (struct.isSetSpotFiles()) {
        {
          oprot.writeI32(struct.spotFiles.size());
          for (BizSpotFile _iter121 : struct.spotFiles)
          {
            _iter121.write(oprot);
          }
        }
      }
      if (struct.isSetHousePatternDetail()) {
        oprot.writeString(struct.housePatternDetail);
      }
      if (struct.isSetRentPaymentWay()) {
        oprot.writeString(struct.rentPaymentWay);
      }
      if (struct.isSetLeaseUsePhone()) {
        oprot.writeString(struct.leaseUsePhone);
      }
      if (struct.isSetRentPrice()) {
        oprot.writeDouble(struct.rentPrice);
      }
      if (struct.isSetRentEvaluationPrice()) {
        oprot.writeDouble(struct.rentEvaluationPrice);
      }
      if (struct.isSetEvaluationSource()) {
        oprot.writeString(struct.evaluationSource);
      }
      if (struct.isSetEvaluationSourceDetail()) {
        oprot.writeString(struct.evaluationSourceDetail);
      }
      if (struct.isSetVacantDays()) {
        oprot.writeDouble(struct.vacantDays);
      }
      if (struct.isSetVacantRate()) {
        oprot.writeDouble(struct.vacantRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizSpotInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eastateId = iprot.readI32();
        struct.setEastateIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shouldSpotTime = iprot.readString();
        struct.setShouldSpotTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.actualSpotTime = iprot.readString();
        struct.setActualSpotTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.decorationSituation = iprot.readString();
        struct.setDecorationSituationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.houseTotals = iprot.readI32();
        struct.setHouseTotalsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.floorTotals = iprot.readI32();
        struct.setFloorTotalsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.houseStructure = iprot.readString();
        struct.setHouseStructureIsSet(true);
      }
      if (incoming.get(9)) {
        struct.elevatorsNums = iprot.readI32();
        struct.setElevatorsNumsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.householdNums = iprot.readI32();
        struct.setHouseholdNumsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.housePattern = iprot.readString();
        struct.setHousePatternIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shoppingNums = iprot.readI32();
        struct.setShoppingNumsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.schoolNums = iprot.readI32();
        struct.setSchoolNumsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bankNums = iprot.readI32();
        struct.setBankNumsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hospitalNums = iprot.readI32();
        struct.setHospitalNumsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.trafficSituation = iprot.readString();
        struct.setTrafficSituationIsSet(true);
      }
      if (incoming.get(17)) {
        struct.aroundEnvironmental = iprot.readString();
        struct.setAroundEnvironmentalIsSet(true);
      }
      if (incoming.get(18)) {
        struct.agencyPrice = iprot.readDouble();
        struct.setAgencyPriceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.useSituation = iprot.readString();
        struct.setUseSituationIsSet(true);
      }
      if (incoming.get(21)) {
        struct.actualPurpose = iprot.readString();
        struct.setActualPurposeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.userType = iprot.readString();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.userSituation = iprot.readString();
        struct.setUserSituationIsSet(true);
      }
      if (incoming.get(24)) {
        struct.leaseUse = iprot.readString();
        struct.setLeaseUseIsSet(true);
      }
      if (incoming.get(25)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.leaseTimeStart = iprot.readString();
        struct.setLeaseTimeStartIsSet(true);
      }
      if (incoming.get(27)) {
        struct.leaseTimeEnd = iprot.readString();
        struct.setLeaseTimeEndIsSet(true);
      }
      if (incoming.get(28)) {
        struct.lessee = iprot.readString();
        struct.setLesseeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.othenRemark = iprot.readString();
        struct.setOthenRemarkIsSet(true);
      }
      if (incoming.get(30)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(31)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(32)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(33)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spotInfos = new ArrayList<BizSpotInfo>(_list122.size);
          BizSpotInfo _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = new BizSpotInfo();
            _elem123.read(iprot);
            struct.spotInfos.add(_elem123);
          }
        }
        struct.setSpotInfosIsSet(true);
      }
      if (incoming.get(34)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spotFiles = new ArrayList<BizSpotFile>(_list125.size);
          BizSpotFile _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = new BizSpotFile();
            _elem126.read(iprot);
            struct.spotFiles.add(_elem126);
          }
        }
        struct.setSpotFilesIsSet(true);
      }
      if (incoming.get(35)) {
        struct.housePatternDetail = iprot.readString();
        struct.setHousePatternDetailIsSet(true);
      }
      if (incoming.get(36)) {
        struct.rentPaymentWay = iprot.readString();
        struct.setRentPaymentWayIsSet(true);
      }
      if (incoming.get(37)) {
        struct.leaseUsePhone = iprot.readString();
        struct.setLeaseUsePhoneIsSet(true);
      }
      if (incoming.get(38)) {
        struct.rentPrice = iprot.readDouble();
        struct.setRentPriceIsSet(true);
      }
      if (incoming.get(39)) {
        struct.rentEvaluationPrice = iprot.readDouble();
        struct.setRentEvaluationPriceIsSet(true);
      }
      if (incoming.get(40)) {
        struct.evaluationSource = iprot.readString();
        struct.setEvaluationSourceIsSet(true);
      }
      if (incoming.get(41)) {
        struct.evaluationSourceDetail = iprot.readString();
        struct.setEvaluationSourceDetailIsSet(true);
      }
      if (incoming.get(42)) {
        struct.vacantDays = iprot.readDouble();
        struct.setVacantDaysIsSet(true);
      }
      if (incoming.get(43)) {
        struct.vacantRate = iprot.readDouble();
        struct.setVacantRateIsSet(true);
      }
    }
  }

}


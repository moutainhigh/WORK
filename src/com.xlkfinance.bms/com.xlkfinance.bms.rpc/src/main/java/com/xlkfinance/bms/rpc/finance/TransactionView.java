/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class TransactionView implements org.apache.thrift.TBase<TransactionView, TransactionView._Fields>, java.io.Serializable, Cloneable, Comparable<TransactionView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHARGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEFAULT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardTypeText", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BORROW_LOAN_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("borrowLoanBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField LOAN_HAS_ALSO_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("loanHasAlsoTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField LOAN_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LOAN_PRINCIPAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("loanPrincipalTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TAKE_BACK_PRINCIPAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("takeBackPrincipalTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField RATE_TAKE_BAC_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("rateTakeBacTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FINANCIAL_DEPOSIT_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("financialDepositInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField EXPENSES_COST_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("expensesCostTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FUND_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("availableFundBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField BANK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNum", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField WEEK_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("weekAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField APRIL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("aprilAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField INPUT_UNREC_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("inputUnrecAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionViewTupleSchemeFactory());
  }

  public int pid; // required
  public String chargeName; // required
  public int bankCardType; // required
  public double defaultAmt; // required
  public String bankCardTypeText; // required
  public double borrowLoanBalance; // required
  public double loanTotal; // required
  public double loanHasAlsoTotal; // required
  public double loanBalance; // required
  public double loanPrincipalTotal; // required
  public double takeBackPrincipalTotal; // required
  public double rateTakeBacTotal; // required
  public double financialDepositInterest; // required
  public double expensesCostTotal; // required
  public double availableFundBalance; // required
  public int rows; // required
  public int page; // required
  public String bankNum; // required
  public double weekAmt; // required
  public double aprilAmt; // required
  public double inputUnrecAmt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CHARGE_NAME((short)2, "chargeName"),
    BANK_CARD_TYPE((short)3, "bankCardType"),
    DEFAULT_AMT((short)4, "defaultAmt"),
    BANK_CARD_TYPE_TEXT((short)5, "bankCardTypeText"),
    BORROW_LOAN_BALANCE((short)6, "borrowLoanBalance"),
    LOAN_TOTAL((short)7, "loanTotal"),
    LOAN_HAS_ALSO_TOTAL((short)8, "loanHasAlsoTotal"),
    LOAN_BALANCE((short)9, "loanBalance"),
    LOAN_PRINCIPAL_TOTAL((short)10, "loanPrincipalTotal"),
    TAKE_BACK_PRINCIPAL_TOTAL((short)11, "takeBackPrincipalTotal"),
    RATE_TAKE_BAC_TOTAL((short)12, "rateTakeBacTotal"),
    FINANCIAL_DEPOSIT_INTEREST((short)13, "financialDepositInterest"),
    EXPENSES_COST_TOTAL((short)14, "expensesCostTotal"),
    AVAILABLE_FUND_BALANCE((short)15, "availableFundBalance"),
    ROWS((short)16, "rows"),
    PAGE((short)17, "page"),
    BANK_NUM((short)18, "bankNum"),
    WEEK_AMT((short)19, "weekAmt"),
    APRIL_AMT((short)20, "aprilAmt"),
    INPUT_UNREC_AMT((short)21, "inputUnrecAmt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CHARGE_NAME
          return CHARGE_NAME;
        case 3: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 4: // DEFAULT_AMT
          return DEFAULT_AMT;
        case 5: // BANK_CARD_TYPE_TEXT
          return BANK_CARD_TYPE_TEXT;
        case 6: // BORROW_LOAN_BALANCE
          return BORROW_LOAN_BALANCE;
        case 7: // LOAN_TOTAL
          return LOAN_TOTAL;
        case 8: // LOAN_HAS_ALSO_TOTAL
          return LOAN_HAS_ALSO_TOTAL;
        case 9: // LOAN_BALANCE
          return LOAN_BALANCE;
        case 10: // LOAN_PRINCIPAL_TOTAL
          return LOAN_PRINCIPAL_TOTAL;
        case 11: // TAKE_BACK_PRINCIPAL_TOTAL
          return TAKE_BACK_PRINCIPAL_TOTAL;
        case 12: // RATE_TAKE_BAC_TOTAL
          return RATE_TAKE_BAC_TOTAL;
        case 13: // FINANCIAL_DEPOSIT_INTEREST
          return FINANCIAL_DEPOSIT_INTEREST;
        case 14: // EXPENSES_COST_TOTAL
          return EXPENSES_COST_TOTAL;
        case 15: // AVAILABLE_FUND_BALANCE
          return AVAILABLE_FUND_BALANCE;
        case 16: // ROWS
          return ROWS;
        case 17: // PAGE
          return PAGE;
        case 18: // BANK_NUM
          return BANK_NUM;
        case 19: // WEEK_AMT
          return WEEK_AMT;
        case 20: // APRIL_AMT
          return APRIL_AMT;
        case 21: // INPUT_UNREC_AMT
          return INPUT_UNREC_AMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __BANKCARDTYPE_ISSET_ID = 1;
  private static final int __DEFAULTAMT_ISSET_ID = 2;
  private static final int __BORROWLOANBALANCE_ISSET_ID = 3;
  private static final int __LOANTOTAL_ISSET_ID = 4;
  private static final int __LOANHASALSOTOTAL_ISSET_ID = 5;
  private static final int __LOANBALANCE_ISSET_ID = 6;
  private static final int __LOANPRINCIPALTOTAL_ISSET_ID = 7;
  private static final int __TAKEBACKPRINCIPALTOTAL_ISSET_ID = 8;
  private static final int __RATETAKEBACTOTAL_ISSET_ID = 9;
  private static final int __FINANCIALDEPOSITINTEREST_ISSET_ID = 10;
  private static final int __EXPENSESCOSTTOTAL_ISSET_ID = 11;
  private static final int __AVAILABLEFUNDBALANCE_ISSET_ID = 12;
  private static final int __ROWS_ISSET_ID = 13;
  private static final int __PAGE_ISSET_ID = 14;
  private static final int __WEEKAMT_ISSET_ID = 15;
  private static final int __APRILAMT_ISSET_ID = 16;
  private static final int __INPUTUNRECAMT_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("chargeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_AMT, new org.apache.thrift.meta_data.FieldMetaData("defaultAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_CARD_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("bankCardTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BORROW_LOAN_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("borrowLoanBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("loanTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_HAS_ALSO_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("loanHasAlsoTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("loanBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_PRINCIPAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("loanPrincipalTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TAKE_BACK_PRINCIPAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("takeBackPrincipalTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RATE_TAKE_BAC_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("rateTakeBacTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINANCIAL_DEPOSIT_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("financialDepositInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXPENSES_COST_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("expensesCostTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_FUND_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("availableFundBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_NUM, new org.apache.thrift.meta_data.FieldMetaData("bankNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEEK_AMT, new org.apache.thrift.meta_data.FieldMetaData("weekAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.APRIL_AMT, new org.apache.thrift.meta_data.FieldMetaData("aprilAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INPUT_UNREC_AMT, new org.apache.thrift.meta_data.FieldMetaData("inputUnrecAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionView.class, metaDataMap);
  }

  public TransactionView() {
  }

  public TransactionView(
    int pid,
    String chargeName,
    int bankCardType,
    double defaultAmt,
    String bankCardTypeText,
    double borrowLoanBalance,
    double loanTotal,
    double loanHasAlsoTotal,
    double loanBalance,
    double loanPrincipalTotal,
    double takeBackPrincipalTotal,
    double rateTakeBacTotal,
    double financialDepositInterest,
    double expensesCostTotal,
    double availableFundBalance,
    int rows,
    int page,
    String bankNum,
    double weekAmt,
    double aprilAmt,
    double inputUnrecAmt)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.chargeName = chargeName;
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    this.defaultAmt = defaultAmt;
    setDefaultAmtIsSet(true);
    this.bankCardTypeText = bankCardTypeText;
    this.borrowLoanBalance = borrowLoanBalance;
    setBorrowLoanBalanceIsSet(true);
    this.loanTotal = loanTotal;
    setLoanTotalIsSet(true);
    this.loanHasAlsoTotal = loanHasAlsoTotal;
    setLoanHasAlsoTotalIsSet(true);
    this.loanBalance = loanBalance;
    setLoanBalanceIsSet(true);
    this.loanPrincipalTotal = loanPrincipalTotal;
    setLoanPrincipalTotalIsSet(true);
    this.takeBackPrincipalTotal = takeBackPrincipalTotal;
    setTakeBackPrincipalTotalIsSet(true);
    this.rateTakeBacTotal = rateTakeBacTotal;
    setRateTakeBacTotalIsSet(true);
    this.financialDepositInterest = financialDepositInterest;
    setFinancialDepositInterestIsSet(true);
    this.expensesCostTotal = expensesCostTotal;
    setExpensesCostTotalIsSet(true);
    this.availableFundBalance = availableFundBalance;
    setAvailableFundBalanceIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.bankNum = bankNum;
    this.weekAmt = weekAmt;
    setWeekAmtIsSet(true);
    this.aprilAmt = aprilAmt;
    setAprilAmtIsSet(true);
    this.inputUnrecAmt = inputUnrecAmt;
    setInputUnrecAmtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionView(TransactionView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetChargeName()) {
      this.chargeName = other.chargeName;
    }
    this.bankCardType = other.bankCardType;
    this.defaultAmt = other.defaultAmt;
    if (other.isSetBankCardTypeText()) {
      this.bankCardTypeText = other.bankCardTypeText;
    }
    this.borrowLoanBalance = other.borrowLoanBalance;
    this.loanTotal = other.loanTotal;
    this.loanHasAlsoTotal = other.loanHasAlsoTotal;
    this.loanBalance = other.loanBalance;
    this.loanPrincipalTotal = other.loanPrincipalTotal;
    this.takeBackPrincipalTotal = other.takeBackPrincipalTotal;
    this.rateTakeBacTotal = other.rateTakeBacTotal;
    this.financialDepositInterest = other.financialDepositInterest;
    this.expensesCostTotal = other.expensesCostTotal;
    this.availableFundBalance = other.availableFundBalance;
    this.rows = other.rows;
    this.page = other.page;
    if (other.isSetBankNum()) {
      this.bankNum = other.bankNum;
    }
    this.weekAmt = other.weekAmt;
    this.aprilAmt = other.aprilAmt;
    this.inputUnrecAmt = other.inputUnrecAmt;
  }

  public TransactionView deepCopy() {
    return new TransactionView(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.chargeName = null;
    setBankCardTypeIsSet(false);
    this.bankCardType = 0;
    setDefaultAmtIsSet(false);
    this.defaultAmt = 0.0;
    this.bankCardTypeText = null;
    setBorrowLoanBalanceIsSet(false);
    this.borrowLoanBalance = 0.0;
    setLoanTotalIsSet(false);
    this.loanTotal = 0.0;
    setLoanHasAlsoTotalIsSet(false);
    this.loanHasAlsoTotal = 0.0;
    setLoanBalanceIsSet(false);
    this.loanBalance = 0.0;
    setLoanPrincipalTotalIsSet(false);
    this.loanPrincipalTotal = 0.0;
    setTakeBackPrincipalTotalIsSet(false);
    this.takeBackPrincipalTotal = 0.0;
    setRateTakeBacTotalIsSet(false);
    this.rateTakeBacTotal = 0.0;
    setFinancialDepositInterestIsSet(false);
    this.financialDepositInterest = 0.0;
    setExpensesCostTotalIsSet(false);
    this.expensesCostTotal = 0.0;
    setAvailableFundBalanceIsSet(false);
    this.availableFundBalance = 0.0;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    this.bankNum = null;
    setWeekAmtIsSet(false);
    this.weekAmt = 0.0;
    setAprilAmtIsSet(false);
    this.aprilAmt = 0.0;
    setInputUnrecAmtIsSet(false);
    this.inputUnrecAmt = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public TransactionView setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getChargeName() {
    return this.chargeName;
  }

  public TransactionView setChargeName(String chargeName) {
    this.chargeName = chargeName;
    return this;
  }

  public void unsetChargeName() {
    this.chargeName = null;
  }

  /** Returns true if field chargeName is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeName() {
    return this.chargeName != null;
  }

  public void setChargeNameIsSet(boolean value) {
    if (!value) {
      this.chargeName = null;
    }
  }

  public int getBankCardType() {
    return this.bankCardType;
  }

  public TransactionView setBankCardType(int bankCardType) {
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    return this;
  }

  public void unsetBankCardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  public void setBankCardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID, value);
  }

  public double getDefaultAmt() {
    return this.defaultAmt;
  }

  public TransactionView setDefaultAmt(double defaultAmt) {
    this.defaultAmt = defaultAmt;
    setDefaultAmtIsSet(true);
    return this;
  }

  public void unsetDefaultAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTAMT_ISSET_ID);
  }

  /** Returns true if field defaultAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTAMT_ISSET_ID);
  }

  public void setDefaultAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTAMT_ISSET_ID, value);
  }

  public String getBankCardTypeText() {
    return this.bankCardTypeText;
  }

  public TransactionView setBankCardTypeText(String bankCardTypeText) {
    this.bankCardTypeText = bankCardTypeText;
    return this;
  }

  public void unsetBankCardTypeText() {
    this.bankCardTypeText = null;
  }

  /** Returns true if field bankCardTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardTypeText() {
    return this.bankCardTypeText != null;
  }

  public void setBankCardTypeTextIsSet(boolean value) {
    if (!value) {
      this.bankCardTypeText = null;
    }
  }

  public double getBorrowLoanBalance() {
    return this.borrowLoanBalance;
  }

  public TransactionView setBorrowLoanBalance(double borrowLoanBalance) {
    this.borrowLoanBalance = borrowLoanBalance;
    setBorrowLoanBalanceIsSet(true);
    return this;
  }

  public void unsetBorrowLoanBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BORROWLOANBALANCE_ISSET_ID);
  }

  /** Returns true if field borrowLoanBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetBorrowLoanBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BORROWLOANBALANCE_ISSET_ID);
  }

  public void setBorrowLoanBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BORROWLOANBALANCE_ISSET_ID, value);
  }

  public double getLoanTotal() {
    return this.loanTotal;
  }

  public TransactionView setLoanTotal(double loanTotal) {
    this.loanTotal = loanTotal;
    setLoanTotalIsSet(true);
    return this;
  }

  public void unsetLoanTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANTOTAL_ISSET_ID);
  }

  /** Returns true if field loanTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANTOTAL_ISSET_ID);
  }

  public void setLoanTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANTOTAL_ISSET_ID, value);
  }

  public double getLoanHasAlsoTotal() {
    return this.loanHasAlsoTotal;
  }

  public TransactionView setLoanHasAlsoTotal(double loanHasAlsoTotal) {
    this.loanHasAlsoTotal = loanHasAlsoTotal;
    setLoanHasAlsoTotalIsSet(true);
    return this;
  }

  public void unsetLoanHasAlsoTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANHASALSOTOTAL_ISSET_ID);
  }

  /** Returns true if field loanHasAlsoTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanHasAlsoTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANHASALSOTOTAL_ISSET_ID);
  }

  public void setLoanHasAlsoTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANHASALSOTOTAL_ISSET_ID, value);
  }

  public double getLoanBalance() {
    return this.loanBalance;
  }

  public TransactionView setLoanBalance(double loanBalance) {
    this.loanBalance = loanBalance;
    setLoanBalanceIsSet(true);
    return this;
  }

  public void unsetLoanBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANBALANCE_ISSET_ID);
  }

  /** Returns true if field loanBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANBALANCE_ISSET_ID);
  }

  public void setLoanBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANBALANCE_ISSET_ID, value);
  }

  public double getLoanPrincipalTotal() {
    return this.loanPrincipalTotal;
  }

  public TransactionView setLoanPrincipalTotal(double loanPrincipalTotal) {
    this.loanPrincipalTotal = loanPrincipalTotal;
    setLoanPrincipalTotalIsSet(true);
    return this;
  }

  public void unsetLoanPrincipalTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANPRINCIPALTOTAL_ISSET_ID);
  }

  /** Returns true if field loanPrincipalTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanPrincipalTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANPRINCIPALTOTAL_ISSET_ID);
  }

  public void setLoanPrincipalTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANPRINCIPALTOTAL_ISSET_ID, value);
  }

  public double getTakeBackPrincipalTotal() {
    return this.takeBackPrincipalTotal;
  }

  public TransactionView setTakeBackPrincipalTotal(double takeBackPrincipalTotal) {
    this.takeBackPrincipalTotal = takeBackPrincipalTotal;
    setTakeBackPrincipalTotalIsSet(true);
    return this;
  }

  public void unsetTakeBackPrincipalTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAKEBACKPRINCIPALTOTAL_ISSET_ID);
  }

  /** Returns true if field takeBackPrincipalTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeBackPrincipalTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TAKEBACKPRINCIPALTOTAL_ISSET_ID);
  }

  public void setTakeBackPrincipalTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAKEBACKPRINCIPALTOTAL_ISSET_ID, value);
  }

  public double getRateTakeBacTotal() {
    return this.rateTakeBacTotal;
  }

  public TransactionView setRateTakeBacTotal(double rateTakeBacTotal) {
    this.rateTakeBacTotal = rateTakeBacTotal;
    setRateTakeBacTotalIsSet(true);
    return this;
  }

  public void unsetRateTakeBacTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATETAKEBACTOTAL_ISSET_ID);
  }

  /** Returns true if field rateTakeBacTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetRateTakeBacTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __RATETAKEBACTOTAL_ISSET_ID);
  }

  public void setRateTakeBacTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATETAKEBACTOTAL_ISSET_ID, value);
  }

  public double getFinancialDepositInterest() {
    return this.financialDepositInterest;
  }

  public TransactionView setFinancialDepositInterest(double financialDepositInterest) {
    this.financialDepositInterest = financialDepositInterest;
    setFinancialDepositInterestIsSet(true);
    return this;
  }

  public void unsetFinancialDepositInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINANCIALDEPOSITINTEREST_ISSET_ID);
  }

  /** Returns true if field financialDepositInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetFinancialDepositInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __FINANCIALDEPOSITINTEREST_ISSET_ID);
  }

  public void setFinancialDepositInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINANCIALDEPOSITINTEREST_ISSET_ID, value);
  }

  public double getExpensesCostTotal() {
    return this.expensesCostTotal;
  }

  public TransactionView setExpensesCostTotal(double expensesCostTotal) {
    this.expensesCostTotal = expensesCostTotal;
    setExpensesCostTotalIsSet(true);
    return this;
  }

  public void unsetExpensesCostTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPENSESCOSTTOTAL_ISSET_ID);
  }

  /** Returns true if field expensesCostTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetExpensesCostTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPENSESCOSTTOTAL_ISSET_ID);
  }

  public void setExpensesCostTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPENSESCOSTTOTAL_ISSET_ID, value);
  }

  public double getAvailableFundBalance() {
    return this.availableFundBalance;
  }

  public TransactionView setAvailableFundBalance(double availableFundBalance) {
    this.availableFundBalance = availableFundBalance;
    setAvailableFundBalanceIsSet(true);
    return this;
  }

  public void unsetAvailableFundBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEFUNDBALANCE_ISSET_ID);
  }

  /** Returns true if field availableFundBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableFundBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEFUNDBALANCE_ISSET_ID);
  }

  public void setAvailableFundBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEFUNDBALANCE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public TransactionView setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public TransactionView setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public String getBankNum() {
    return this.bankNum;
  }

  public TransactionView setBankNum(String bankNum) {
    this.bankNum = bankNum;
    return this;
  }

  public void unsetBankNum() {
    this.bankNum = null;
  }

  /** Returns true if field bankNum is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNum() {
    return this.bankNum != null;
  }

  public void setBankNumIsSet(boolean value) {
    if (!value) {
      this.bankNum = null;
    }
  }

  public double getWeekAmt() {
    return this.weekAmt;
  }

  public TransactionView setWeekAmt(double weekAmt) {
    this.weekAmt = weekAmt;
    setWeekAmtIsSet(true);
    return this;
  }

  public void unsetWeekAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEKAMT_ISSET_ID);
  }

  /** Returns true if field weekAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEKAMT_ISSET_ID);
  }

  public void setWeekAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEKAMT_ISSET_ID, value);
  }

  public double getAprilAmt() {
    return this.aprilAmt;
  }

  public TransactionView setAprilAmt(double aprilAmt) {
    this.aprilAmt = aprilAmt;
    setAprilAmtIsSet(true);
    return this;
  }

  public void unsetAprilAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APRILAMT_ISSET_ID);
  }

  /** Returns true if field aprilAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetAprilAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __APRILAMT_ISSET_ID);
  }

  public void setAprilAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APRILAMT_ISSET_ID, value);
  }

  public double getInputUnrecAmt() {
    return this.inputUnrecAmt;
  }

  public TransactionView setInputUnrecAmt(double inputUnrecAmt) {
    this.inputUnrecAmt = inputUnrecAmt;
    setInputUnrecAmtIsSet(true);
    return this;
  }

  public void unsetInputUnrecAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTUNRECAMT_ISSET_ID);
  }

  /** Returns true if field inputUnrecAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetInputUnrecAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTUNRECAMT_ISSET_ID);
  }

  public void setInputUnrecAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTUNRECAMT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CHARGE_NAME:
      if (value == null) {
        unsetChargeName();
      } else {
        setChargeName((String)value);
      }
      break;

    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((Integer)value);
      }
      break;

    case DEFAULT_AMT:
      if (value == null) {
        unsetDefaultAmt();
      } else {
        setDefaultAmt((Double)value);
      }
      break;

    case BANK_CARD_TYPE_TEXT:
      if (value == null) {
        unsetBankCardTypeText();
      } else {
        setBankCardTypeText((String)value);
      }
      break;

    case BORROW_LOAN_BALANCE:
      if (value == null) {
        unsetBorrowLoanBalance();
      } else {
        setBorrowLoanBalance((Double)value);
      }
      break;

    case LOAN_TOTAL:
      if (value == null) {
        unsetLoanTotal();
      } else {
        setLoanTotal((Double)value);
      }
      break;

    case LOAN_HAS_ALSO_TOTAL:
      if (value == null) {
        unsetLoanHasAlsoTotal();
      } else {
        setLoanHasAlsoTotal((Double)value);
      }
      break;

    case LOAN_BALANCE:
      if (value == null) {
        unsetLoanBalance();
      } else {
        setLoanBalance((Double)value);
      }
      break;

    case LOAN_PRINCIPAL_TOTAL:
      if (value == null) {
        unsetLoanPrincipalTotal();
      } else {
        setLoanPrincipalTotal((Double)value);
      }
      break;

    case TAKE_BACK_PRINCIPAL_TOTAL:
      if (value == null) {
        unsetTakeBackPrincipalTotal();
      } else {
        setTakeBackPrincipalTotal((Double)value);
      }
      break;

    case RATE_TAKE_BAC_TOTAL:
      if (value == null) {
        unsetRateTakeBacTotal();
      } else {
        setRateTakeBacTotal((Double)value);
      }
      break;

    case FINANCIAL_DEPOSIT_INTEREST:
      if (value == null) {
        unsetFinancialDepositInterest();
      } else {
        setFinancialDepositInterest((Double)value);
      }
      break;

    case EXPENSES_COST_TOTAL:
      if (value == null) {
        unsetExpensesCostTotal();
      } else {
        setExpensesCostTotal((Double)value);
      }
      break;

    case AVAILABLE_FUND_BALANCE:
      if (value == null) {
        unsetAvailableFundBalance();
      } else {
        setAvailableFundBalance((Double)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case BANK_NUM:
      if (value == null) {
        unsetBankNum();
      } else {
        setBankNum((String)value);
      }
      break;

    case WEEK_AMT:
      if (value == null) {
        unsetWeekAmt();
      } else {
        setWeekAmt((Double)value);
      }
      break;

    case APRIL_AMT:
      if (value == null) {
        unsetAprilAmt();
      } else {
        setAprilAmt((Double)value);
      }
      break;

    case INPUT_UNREC_AMT:
      if (value == null) {
        unsetInputUnrecAmt();
      } else {
        setInputUnrecAmt((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CHARGE_NAME:
      return getChargeName();

    case BANK_CARD_TYPE:
      return Integer.valueOf(getBankCardType());

    case DEFAULT_AMT:
      return Double.valueOf(getDefaultAmt());

    case BANK_CARD_TYPE_TEXT:
      return getBankCardTypeText();

    case BORROW_LOAN_BALANCE:
      return Double.valueOf(getBorrowLoanBalance());

    case LOAN_TOTAL:
      return Double.valueOf(getLoanTotal());

    case LOAN_HAS_ALSO_TOTAL:
      return Double.valueOf(getLoanHasAlsoTotal());

    case LOAN_BALANCE:
      return Double.valueOf(getLoanBalance());

    case LOAN_PRINCIPAL_TOTAL:
      return Double.valueOf(getLoanPrincipalTotal());

    case TAKE_BACK_PRINCIPAL_TOTAL:
      return Double.valueOf(getTakeBackPrincipalTotal());

    case RATE_TAKE_BAC_TOTAL:
      return Double.valueOf(getRateTakeBacTotal());

    case FINANCIAL_DEPOSIT_INTEREST:
      return Double.valueOf(getFinancialDepositInterest());

    case EXPENSES_COST_TOTAL:
      return Double.valueOf(getExpensesCostTotal());

    case AVAILABLE_FUND_BALANCE:
      return Double.valueOf(getAvailableFundBalance());

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case BANK_NUM:
      return getBankNum();

    case WEEK_AMT:
      return Double.valueOf(getWeekAmt());

    case APRIL_AMT:
      return Double.valueOf(getAprilAmt());

    case INPUT_UNREC_AMT:
      return Double.valueOf(getInputUnrecAmt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CHARGE_NAME:
      return isSetChargeName();
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    case DEFAULT_AMT:
      return isSetDefaultAmt();
    case BANK_CARD_TYPE_TEXT:
      return isSetBankCardTypeText();
    case BORROW_LOAN_BALANCE:
      return isSetBorrowLoanBalance();
    case LOAN_TOTAL:
      return isSetLoanTotal();
    case LOAN_HAS_ALSO_TOTAL:
      return isSetLoanHasAlsoTotal();
    case LOAN_BALANCE:
      return isSetLoanBalance();
    case LOAN_PRINCIPAL_TOTAL:
      return isSetLoanPrincipalTotal();
    case TAKE_BACK_PRINCIPAL_TOTAL:
      return isSetTakeBackPrincipalTotal();
    case RATE_TAKE_BAC_TOTAL:
      return isSetRateTakeBacTotal();
    case FINANCIAL_DEPOSIT_INTEREST:
      return isSetFinancialDepositInterest();
    case EXPENSES_COST_TOTAL:
      return isSetExpensesCostTotal();
    case AVAILABLE_FUND_BALANCE:
      return isSetAvailableFundBalance();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case BANK_NUM:
      return isSetBankNum();
    case WEEK_AMT:
      return isSetWeekAmt();
    case APRIL_AMT:
      return isSetAprilAmt();
    case INPUT_UNREC_AMT:
      return isSetInputUnrecAmt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionView)
      return this.equals((TransactionView)that);
    return false;
  }

  public boolean equals(TransactionView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_chargeName = true && this.isSetChargeName();
    boolean that_present_chargeName = true && that.isSetChargeName();
    if (this_present_chargeName || that_present_chargeName) {
      if (!(this_present_chargeName && that_present_chargeName))
        return false;
      if (!this.chargeName.equals(that.chargeName))
        return false;
    }

    boolean this_present_bankCardType = true;
    boolean that_present_bankCardType = true;
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (this.bankCardType != that.bankCardType)
        return false;
    }

    boolean this_present_defaultAmt = true;
    boolean that_present_defaultAmt = true;
    if (this_present_defaultAmt || that_present_defaultAmt) {
      if (!(this_present_defaultAmt && that_present_defaultAmt))
        return false;
      if (this.defaultAmt != that.defaultAmt)
        return false;
    }

    boolean this_present_bankCardTypeText = true && this.isSetBankCardTypeText();
    boolean that_present_bankCardTypeText = true && that.isSetBankCardTypeText();
    if (this_present_bankCardTypeText || that_present_bankCardTypeText) {
      if (!(this_present_bankCardTypeText && that_present_bankCardTypeText))
        return false;
      if (!this.bankCardTypeText.equals(that.bankCardTypeText))
        return false;
    }

    boolean this_present_borrowLoanBalance = true;
    boolean that_present_borrowLoanBalance = true;
    if (this_present_borrowLoanBalance || that_present_borrowLoanBalance) {
      if (!(this_present_borrowLoanBalance && that_present_borrowLoanBalance))
        return false;
      if (this.borrowLoanBalance != that.borrowLoanBalance)
        return false;
    }

    boolean this_present_loanTotal = true;
    boolean that_present_loanTotal = true;
    if (this_present_loanTotal || that_present_loanTotal) {
      if (!(this_present_loanTotal && that_present_loanTotal))
        return false;
      if (this.loanTotal != that.loanTotal)
        return false;
    }

    boolean this_present_loanHasAlsoTotal = true;
    boolean that_present_loanHasAlsoTotal = true;
    if (this_present_loanHasAlsoTotal || that_present_loanHasAlsoTotal) {
      if (!(this_present_loanHasAlsoTotal && that_present_loanHasAlsoTotal))
        return false;
      if (this.loanHasAlsoTotal != that.loanHasAlsoTotal)
        return false;
    }

    boolean this_present_loanBalance = true;
    boolean that_present_loanBalance = true;
    if (this_present_loanBalance || that_present_loanBalance) {
      if (!(this_present_loanBalance && that_present_loanBalance))
        return false;
      if (this.loanBalance != that.loanBalance)
        return false;
    }

    boolean this_present_loanPrincipalTotal = true;
    boolean that_present_loanPrincipalTotal = true;
    if (this_present_loanPrincipalTotal || that_present_loanPrincipalTotal) {
      if (!(this_present_loanPrincipalTotal && that_present_loanPrincipalTotal))
        return false;
      if (this.loanPrincipalTotal != that.loanPrincipalTotal)
        return false;
    }

    boolean this_present_takeBackPrincipalTotal = true;
    boolean that_present_takeBackPrincipalTotal = true;
    if (this_present_takeBackPrincipalTotal || that_present_takeBackPrincipalTotal) {
      if (!(this_present_takeBackPrincipalTotal && that_present_takeBackPrincipalTotal))
        return false;
      if (this.takeBackPrincipalTotal != that.takeBackPrincipalTotal)
        return false;
    }

    boolean this_present_rateTakeBacTotal = true;
    boolean that_present_rateTakeBacTotal = true;
    if (this_present_rateTakeBacTotal || that_present_rateTakeBacTotal) {
      if (!(this_present_rateTakeBacTotal && that_present_rateTakeBacTotal))
        return false;
      if (this.rateTakeBacTotal != that.rateTakeBacTotal)
        return false;
    }

    boolean this_present_financialDepositInterest = true;
    boolean that_present_financialDepositInterest = true;
    if (this_present_financialDepositInterest || that_present_financialDepositInterest) {
      if (!(this_present_financialDepositInterest && that_present_financialDepositInterest))
        return false;
      if (this.financialDepositInterest != that.financialDepositInterest)
        return false;
    }

    boolean this_present_expensesCostTotal = true;
    boolean that_present_expensesCostTotal = true;
    if (this_present_expensesCostTotal || that_present_expensesCostTotal) {
      if (!(this_present_expensesCostTotal && that_present_expensesCostTotal))
        return false;
      if (this.expensesCostTotal != that.expensesCostTotal)
        return false;
    }

    boolean this_present_availableFundBalance = true;
    boolean that_present_availableFundBalance = true;
    if (this_present_availableFundBalance || that_present_availableFundBalance) {
      if (!(this_present_availableFundBalance && that_present_availableFundBalance))
        return false;
      if (this.availableFundBalance != that.availableFundBalance)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_bankNum = true && this.isSetBankNum();
    boolean that_present_bankNum = true && that.isSetBankNum();
    if (this_present_bankNum || that_present_bankNum) {
      if (!(this_present_bankNum && that_present_bankNum))
        return false;
      if (!this.bankNum.equals(that.bankNum))
        return false;
    }

    boolean this_present_weekAmt = true;
    boolean that_present_weekAmt = true;
    if (this_present_weekAmt || that_present_weekAmt) {
      if (!(this_present_weekAmt && that_present_weekAmt))
        return false;
      if (this.weekAmt != that.weekAmt)
        return false;
    }

    boolean this_present_aprilAmt = true;
    boolean that_present_aprilAmt = true;
    if (this_present_aprilAmt || that_present_aprilAmt) {
      if (!(this_present_aprilAmt && that_present_aprilAmt))
        return false;
      if (this.aprilAmt != that.aprilAmt)
        return false;
    }

    boolean this_present_inputUnrecAmt = true;
    boolean that_present_inputUnrecAmt = true;
    if (this_present_inputUnrecAmt || that_present_inputUnrecAmt) {
      if (!(this_present_inputUnrecAmt && that_present_inputUnrecAmt))
        return false;
      if (this.inputUnrecAmt != that.inputUnrecAmt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_chargeName = true && (isSetChargeName());
    list.add(present_chargeName);
    if (present_chargeName)
      list.add(chargeName);

    boolean present_bankCardType = true;
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    boolean present_defaultAmt = true;
    list.add(present_defaultAmt);
    if (present_defaultAmt)
      list.add(defaultAmt);

    boolean present_bankCardTypeText = true && (isSetBankCardTypeText());
    list.add(present_bankCardTypeText);
    if (present_bankCardTypeText)
      list.add(bankCardTypeText);

    boolean present_borrowLoanBalance = true;
    list.add(present_borrowLoanBalance);
    if (present_borrowLoanBalance)
      list.add(borrowLoanBalance);

    boolean present_loanTotal = true;
    list.add(present_loanTotal);
    if (present_loanTotal)
      list.add(loanTotal);

    boolean present_loanHasAlsoTotal = true;
    list.add(present_loanHasAlsoTotal);
    if (present_loanHasAlsoTotal)
      list.add(loanHasAlsoTotal);

    boolean present_loanBalance = true;
    list.add(present_loanBalance);
    if (present_loanBalance)
      list.add(loanBalance);

    boolean present_loanPrincipalTotal = true;
    list.add(present_loanPrincipalTotal);
    if (present_loanPrincipalTotal)
      list.add(loanPrincipalTotal);

    boolean present_takeBackPrincipalTotal = true;
    list.add(present_takeBackPrincipalTotal);
    if (present_takeBackPrincipalTotal)
      list.add(takeBackPrincipalTotal);

    boolean present_rateTakeBacTotal = true;
    list.add(present_rateTakeBacTotal);
    if (present_rateTakeBacTotal)
      list.add(rateTakeBacTotal);

    boolean present_financialDepositInterest = true;
    list.add(present_financialDepositInterest);
    if (present_financialDepositInterest)
      list.add(financialDepositInterest);

    boolean present_expensesCostTotal = true;
    list.add(present_expensesCostTotal);
    if (present_expensesCostTotal)
      list.add(expensesCostTotal);

    boolean present_availableFundBalance = true;
    list.add(present_availableFundBalance);
    if (present_availableFundBalance)
      list.add(availableFundBalance);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_bankNum = true && (isSetBankNum());
    list.add(present_bankNum);
    if (present_bankNum)
      list.add(bankNum);

    boolean present_weekAmt = true;
    list.add(present_weekAmt);
    if (present_weekAmt)
      list.add(weekAmt);

    boolean present_aprilAmt = true;
    list.add(present_aprilAmt);
    if (present_aprilAmt)
      list.add(aprilAmt);

    boolean present_inputUnrecAmt = true;
    list.add(present_inputUnrecAmt);
    if (present_inputUnrecAmt)
      list.add(inputUnrecAmt);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransactionView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeName()).compareTo(other.isSetChargeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeName, other.chargeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultAmt()).compareTo(other.isSetDefaultAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultAmt, other.defaultAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardTypeText()).compareTo(other.isSetBankCardTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardTypeText, other.bankCardTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBorrowLoanBalance()).compareTo(other.isSetBorrowLoanBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBorrowLoanBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.borrowLoanBalance, other.borrowLoanBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTotal()).compareTo(other.isSetLoanTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTotal, other.loanTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanHasAlsoTotal()).compareTo(other.isSetLoanHasAlsoTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanHasAlsoTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanHasAlsoTotal, other.loanHasAlsoTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanBalance()).compareTo(other.isSetLoanBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanBalance, other.loanBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanPrincipalTotal()).compareTo(other.isSetLoanPrincipalTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanPrincipalTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanPrincipalTotal, other.loanPrincipalTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeBackPrincipalTotal()).compareTo(other.isSetTakeBackPrincipalTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeBackPrincipalTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeBackPrincipalTotal, other.takeBackPrincipalTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRateTakeBacTotal()).compareTo(other.isSetRateTakeBacTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateTakeBacTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rateTakeBacTotal, other.rateTakeBacTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinancialDepositInterest()).compareTo(other.isSetFinancialDepositInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinancialDepositInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financialDepositInterest, other.financialDepositInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpensesCostTotal()).compareTo(other.isSetExpensesCostTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpensesCostTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expensesCostTotal, other.expensesCostTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableFundBalance()).compareTo(other.isSetAvailableFundBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableFundBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableFundBalance, other.availableFundBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNum()).compareTo(other.isSetBankNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNum, other.bankNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekAmt()).compareTo(other.isSetWeekAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekAmt, other.weekAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAprilAmt()).compareTo(other.isSetAprilAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAprilAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aprilAmt, other.aprilAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputUnrecAmt()).compareTo(other.isSetInputUnrecAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputUnrecAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputUnrecAmt, other.inputUnrecAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransactionView(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeName:");
    if (this.chargeName == null) {
      sb.append("null");
    } else {
      sb.append(this.chargeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    sb.append(this.bankCardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultAmt:");
    sb.append(this.defaultAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardTypeText:");
    if (this.bankCardTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("borrowLoanBalance:");
    sb.append(this.borrowLoanBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTotal:");
    sb.append(this.loanTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanHasAlsoTotal:");
    sb.append(this.loanHasAlsoTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanBalance:");
    sb.append(this.loanBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanPrincipalTotal:");
    sb.append(this.loanPrincipalTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("takeBackPrincipalTotal:");
    sb.append(this.takeBackPrincipalTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateTakeBacTotal:");
    sb.append(this.rateTakeBacTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("financialDepositInterest:");
    sb.append(this.financialDepositInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expensesCostTotal:");
    sb.append(this.expensesCostTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableFundBalance:");
    sb.append(this.availableFundBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNum:");
    if (this.bankNum == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weekAmt:");
    sb.append(this.weekAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aprilAmt:");
    sb.append(this.aprilAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputUnrecAmt:");
    sb.append(this.inputUnrecAmt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionViewStandardSchemeFactory implements SchemeFactory {
    public TransactionViewStandardScheme getScheme() {
      return new TransactionViewStandardScheme();
    }
  }

  private static class TransactionViewStandardScheme extends StandardScheme<TransactionView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeName = iprot.readString();
              struct.setChargeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankCardType = iprot.readI32();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEFAULT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultAmt = iprot.readDouble();
              struct.setDefaultAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BANK_CARD_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardTypeText = iprot.readString();
              struct.setBankCardTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BORROW_LOAN_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.borrowLoanBalance = iprot.readDouble();
              struct.setBorrowLoanBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanTotal = iprot.readDouble();
              struct.setLoanTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOAN_HAS_ALSO_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanHasAlsoTotal = iprot.readDouble();
              struct.setLoanHasAlsoTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAN_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanBalance = iprot.readDouble();
              struct.setLoanBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAN_PRINCIPAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanPrincipalTotal = iprot.readDouble();
              struct.setLoanPrincipalTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TAKE_BACK_PRINCIPAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.takeBackPrincipalTotal = iprot.readDouble();
              struct.setTakeBackPrincipalTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RATE_TAKE_BAC_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rateTakeBacTotal = iprot.readDouble();
              struct.setRateTakeBacTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FINANCIAL_DEPOSIT_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.financialDepositInterest = iprot.readDouble();
              struct.setFinancialDepositInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXPENSES_COST_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.expensesCostTotal = iprot.readDouble();
              struct.setExpensesCostTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AVAILABLE_FUND_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableFundBalance = iprot.readDouble();
              struct.setAvailableFundBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BANK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNum = iprot.readString();
              struct.setBankNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // WEEK_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.weekAmt = iprot.readDouble();
              struct.setWeekAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // APRIL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.aprilAmt = iprot.readDouble();
              struct.setAprilAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // INPUT_UNREC_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.inputUnrecAmt = iprot.readDouble();
              struct.setInputUnrecAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.chargeName != null) {
        oprot.writeFieldBegin(CHARGE_NAME_FIELD_DESC);
        oprot.writeString(struct.chargeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bankCardType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.defaultAmt);
      oprot.writeFieldEnd();
      if (struct.bankCardTypeText != null) {
        oprot.writeFieldBegin(BANK_CARD_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.bankCardTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BORROW_LOAN_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.borrowLoanBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.loanTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_HAS_ALSO_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.loanHasAlsoTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.loanBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_PRINCIPAL_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.loanPrincipalTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAKE_BACK_PRINCIPAL_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.takeBackPrincipalTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATE_TAKE_BAC_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.rateTakeBacTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINANCIAL_DEPOSIT_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.financialDepositInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPENSES_COST_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.expensesCostTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FUND_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.availableFundBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      if (struct.bankNum != null) {
        oprot.writeFieldBegin(BANK_NUM_FIELD_DESC);
        oprot.writeString(struct.bankNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WEEK_AMT_FIELD_DESC);
      oprot.writeDouble(struct.weekAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APRIL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.aprilAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_UNREC_AMT_FIELD_DESC);
      oprot.writeDouble(struct.inputUnrecAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionViewTupleSchemeFactory implements SchemeFactory {
    public TransactionViewTupleScheme getScheme() {
      return new TransactionViewTupleScheme();
    }
  }

  private static class TransactionViewTupleScheme extends TupleScheme<TransactionView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetChargeName()) {
        optionals.set(1);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(2);
      }
      if (struct.isSetDefaultAmt()) {
        optionals.set(3);
      }
      if (struct.isSetBankCardTypeText()) {
        optionals.set(4);
      }
      if (struct.isSetBorrowLoanBalance()) {
        optionals.set(5);
      }
      if (struct.isSetLoanTotal()) {
        optionals.set(6);
      }
      if (struct.isSetLoanHasAlsoTotal()) {
        optionals.set(7);
      }
      if (struct.isSetLoanBalance()) {
        optionals.set(8);
      }
      if (struct.isSetLoanPrincipalTotal()) {
        optionals.set(9);
      }
      if (struct.isSetTakeBackPrincipalTotal()) {
        optionals.set(10);
      }
      if (struct.isSetRateTakeBacTotal()) {
        optionals.set(11);
      }
      if (struct.isSetFinancialDepositInterest()) {
        optionals.set(12);
      }
      if (struct.isSetExpensesCostTotal()) {
        optionals.set(13);
      }
      if (struct.isSetAvailableFundBalance()) {
        optionals.set(14);
      }
      if (struct.isSetRows()) {
        optionals.set(15);
      }
      if (struct.isSetPage()) {
        optionals.set(16);
      }
      if (struct.isSetBankNum()) {
        optionals.set(17);
      }
      if (struct.isSetWeekAmt()) {
        optionals.set(18);
      }
      if (struct.isSetAprilAmt()) {
        optionals.set(19);
      }
      if (struct.isSetInputUnrecAmt()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetChargeName()) {
        oprot.writeString(struct.chargeName);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeI32(struct.bankCardType);
      }
      if (struct.isSetDefaultAmt()) {
        oprot.writeDouble(struct.defaultAmt);
      }
      if (struct.isSetBankCardTypeText()) {
        oprot.writeString(struct.bankCardTypeText);
      }
      if (struct.isSetBorrowLoanBalance()) {
        oprot.writeDouble(struct.borrowLoanBalance);
      }
      if (struct.isSetLoanTotal()) {
        oprot.writeDouble(struct.loanTotal);
      }
      if (struct.isSetLoanHasAlsoTotal()) {
        oprot.writeDouble(struct.loanHasAlsoTotal);
      }
      if (struct.isSetLoanBalance()) {
        oprot.writeDouble(struct.loanBalance);
      }
      if (struct.isSetLoanPrincipalTotal()) {
        oprot.writeDouble(struct.loanPrincipalTotal);
      }
      if (struct.isSetTakeBackPrincipalTotal()) {
        oprot.writeDouble(struct.takeBackPrincipalTotal);
      }
      if (struct.isSetRateTakeBacTotal()) {
        oprot.writeDouble(struct.rateTakeBacTotal);
      }
      if (struct.isSetFinancialDepositInterest()) {
        oprot.writeDouble(struct.financialDepositInterest);
      }
      if (struct.isSetExpensesCostTotal()) {
        oprot.writeDouble(struct.expensesCostTotal);
      }
      if (struct.isSetAvailableFundBalance()) {
        oprot.writeDouble(struct.availableFundBalance);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetBankNum()) {
        oprot.writeString(struct.bankNum);
      }
      if (struct.isSetWeekAmt()) {
        oprot.writeDouble(struct.weekAmt);
      }
      if (struct.isSetAprilAmt()) {
        oprot.writeDouble(struct.aprilAmt);
      }
      if (struct.isSetInputUnrecAmt()) {
        oprot.writeDouble(struct.inputUnrecAmt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chargeName = iprot.readString();
        struct.setChargeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankCardType = iprot.readI32();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.defaultAmt = iprot.readDouble();
        struct.setDefaultAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bankCardTypeText = iprot.readString();
        struct.setBankCardTypeTextIsSet(true);
      }
      if (incoming.get(5)) {
        struct.borrowLoanBalance = iprot.readDouble();
        struct.setBorrowLoanBalanceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanTotal = iprot.readDouble();
        struct.setLoanTotalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loanHasAlsoTotal = iprot.readDouble();
        struct.setLoanHasAlsoTotalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loanBalance = iprot.readDouble();
        struct.setLoanBalanceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.loanPrincipalTotal = iprot.readDouble();
        struct.setLoanPrincipalTotalIsSet(true);
      }
      if (incoming.get(10)) {
        struct.takeBackPrincipalTotal = iprot.readDouble();
        struct.setTakeBackPrincipalTotalIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rateTakeBacTotal = iprot.readDouble();
        struct.setRateTakeBacTotalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.financialDepositInterest = iprot.readDouble();
        struct.setFinancialDepositInterestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.expensesCostTotal = iprot.readDouble();
        struct.setExpensesCostTotalIsSet(true);
      }
      if (incoming.get(14)) {
        struct.availableFundBalance = iprot.readDouble();
        struct.setAvailableFundBalanceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.bankNum = iprot.readString();
        struct.setBankNumIsSet(true);
      }
      if (incoming.get(18)) {
        struct.weekAmt = iprot.readDouble();
        struct.setWeekAmtIsSet(true);
      }
      if (incoming.get(19)) {
        struct.aprilAmt = iprot.readDouble();
        struct.setAprilAmtIsSet(true);
      }
      if (incoming.get(20)) {
        struct.inputUnrecAmt = iprot.readDouble();
        struct.setInputUnrecAmtIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class SupervisionResultList implements org.apache.thrift.TBase<SupervisionResultList, SupervisionResultList._Fields>, java.io.Serializable, Cloneable, Comparable<SupervisionResultList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisionResultList");

  private static final org.apache.thrift.protocol.TField RESULT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resultId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REGULATORY_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryPlanId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REGUALATORY_SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatorySubject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REGUALATORY_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryContent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REGUALATORY_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryMsg", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REGUALATORY_MSG_OT1_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryMsgOt1", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REGUALATORY_MSG_OT2_FIELD_DESC = new org.apache.thrift.protocol.TField("regualatoryMsgOt2", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REGULATORY_RESULT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryResultStr", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REGULATORY_STATUS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryStatusStr", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ACTUAL_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("actualUser", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ACTUAL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PLAN_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("planUser", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PLAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CUST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("custType", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SupervisionResultListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SupervisionResultListTupleSchemeFactory());
  }

  public int resultId; // required
  public int projectId; // required
  public int regulatoryPlanId; // required
  public String regualatorySubject; // required
  public String regualatoryContent; // required
  public String regualatoryMsg; // required
  public String regualatoryMsgOt1; // required
  public String regualatoryMsgOt2; // required
  public String regulatoryResultStr; // required
  public String projectName; // required
  public String projectNumber; // required
  public String regulatoryStatusStr; // required
  public String actualUser; // required
  public String actualDate; // required
  public String planUser; // required
  public String planDate; // required
  public String custType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_ID((short)1, "resultId"),
    PROJECT_ID((short)2, "projectId"),
    REGULATORY_PLAN_ID((short)3, "regulatoryPlanId"),
    REGUALATORY_SUBJECT((short)4, "regualatorySubject"),
    REGUALATORY_CONTENT((short)5, "regualatoryContent"),
    REGUALATORY_MSG((short)6, "regualatoryMsg"),
    REGUALATORY_MSG_OT1((short)7, "regualatoryMsgOt1"),
    REGUALATORY_MSG_OT2((short)8, "regualatoryMsgOt2"),
    REGULATORY_RESULT_STR((short)9, "regulatoryResultStr"),
    PROJECT_NAME((short)10, "projectName"),
    PROJECT_NUMBER((short)11, "projectNumber"),
    REGULATORY_STATUS_STR((short)12, "regulatoryStatusStr"),
    ACTUAL_USER((short)13, "actualUser"),
    ACTUAL_DATE((short)14, "actualDate"),
    PLAN_USER((short)15, "planUser"),
    PLAN_DATE((short)16, "planDate"),
    CUST_TYPE((short)17, "custType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_ID
          return RESULT_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // REGULATORY_PLAN_ID
          return REGULATORY_PLAN_ID;
        case 4: // REGUALATORY_SUBJECT
          return REGUALATORY_SUBJECT;
        case 5: // REGUALATORY_CONTENT
          return REGUALATORY_CONTENT;
        case 6: // REGUALATORY_MSG
          return REGUALATORY_MSG;
        case 7: // REGUALATORY_MSG_OT1
          return REGUALATORY_MSG_OT1;
        case 8: // REGUALATORY_MSG_OT2
          return REGUALATORY_MSG_OT2;
        case 9: // REGULATORY_RESULT_STR
          return REGULATORY_RESULT_STR;
        case 10: // PROJECT_NAME
          return PROJECT_NAME;
        case 11: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 12: // REGULATORY_STATUS_STR
          return REGULATORY_STATUS_STR;
        case 13: // ACTUAL_USER
          return ACTUAL_USER;
        case 14: // ACTUAL_DATE
          return ACTUAL_DATE;
        case 15: // PLAN_USER
          return PLAN_USER;
        case 16: // PLAN_DATE
          return PLAN_DATE;
        case 17: // CUST_TYPE
          return CUST_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULTID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __REGULATORYPLANID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_ID, new org.apache.thrift.meta_data.FieldMetaData("resultId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGULATORY_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("regulatoryPlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGUALATORY_SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("regualatorySubject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("regualatoryContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_MSG, new org.apache.thrift.meta_data.FieldMetaData("regualatoryMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_MSG_OT1, new org.apache.thrift.meta_data.FieldMetaData("regualatoryMsgOt1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGUALATORY_MSG_OT2, new org.apache.thrift.meta_data.FieldMetaData("regualatoryMsgOt2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_RESULT_STR, new org.apache.thrift.meta_data.FieldMetaData("regulatoryResultStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_STATUS_STR, new org.apache.thrift.meta_data.FieldMetaData("regulatoryStatusStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_USER, new org.apache.thrift.meta_data.FieldMetaData("actualUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_DATE, new org.apache.thrift.meta_data.FieldMetaData("actualDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_USER, new org.apache.thrift.meta_data.FieldMetaData("planUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("planDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("custType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisionResultList.class, metaDataMap);
  }

  public SupervisionResultList() {
  }

  public SupervisionResultList(
    int resultId,
    int projectId,
    int regulatoryPlanId,
    String regualatorySubject,
    String regualatoryContent,
    String regualatoryMsg,
    String regualatoryMsgOt1,
    String regualatoryMsgOt2,
    String regulatoryResultStr,
    String projectName,
    String projectNumber,
    String regulatoryStatusStr,
    String actualUser,
    String actualDate,
    String planUser,
    String planDate,
    String custType)
  {
    this();
    this.resultId = resultId;
    setResultIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.regulatoryPlanId = regulatoryPlanId;
    setRegulatoryPlanIdIsSet(true);
    this.regualatorySubject = regualatorySubject;
    this.regualatoryContent = regualatoryContent;
    this.regualatoryMsg = regualatoryMsg;
    this.regualatoryMsgOt1 = regualatoryMsgOt1;
    this.regualatoryMsgOt2 = regualatoryMsgOt2;
    this.regulatoryResultStr = regulatoryResultStr;
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.regulatoryStatusStr = regulatoryStatusStr;
    this.actualUser = actualUser;
    this.actualDate = actualDate;
    this.planUser = planUser;
    this.planDate = planDate;
    this.custType = custType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisionResultList(SupervisionResultList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.resultId = other.resultId;
    this.projectId = other.projectId;
    this.regulatoryPlanId = other.regulatoryPlanId;
    if (other.isSetRegualatorySubject()) {
      this.regualatorySubject = other.regualatorySubject;
    }
    if (other.isSetRegualatoryContent()) {
      this.regualatoryContent = other.regualatoryContent;
    }
    if (other.isSetRegualatoryMsg()) {
      this.regualatoryMsg = other.regualatoryMsg;
    }
    if (other.isSetRegualatoryMsgOt1()) {
      this.regualatoryMsgOt1 = other.regualatoryMsgOt1;
    }
    if (other.isSetRegualatoryMsgOt2()) {
      this.regualatoryMsgOt2 = other.regualatoryMsgOt2;
    }
    if (other.isSetRegulatoryResultStr()) {
      this.regulatoryResultStr = other.regulatoryResultStr;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetRegulatoryStatusStr()) {
      this.regulatoryStatusStr = other.regulatoryStatusStr;
    }
    if (other.isSetActualUser()) {
      this.actualUser = other.actualUser;
    }
    if (other.isSetActualDate()) {
      this.actualDate = other.actualDate;
    }
    if (other.isSetPlanUser()) {
      this.planUser = other.planUser;
    }
    if (other.isSetPlanDate()) {
      this.planDate = other.planDate;
    }
    if (other.isSetCustType()) {
      this.custType = other.custType;
    }
  }

  public SupervisionResultList deepCopy() {
    return new SupervisionResultList(this);
  }

  @Override
  public void clear() {
    setResultIdIsSet(false);
    this.resultId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setRegulatoryPlanIdIsSet(false);
    this.regulatoryPlanId = 0;
    this.regualatorySubject = null;
    this.regualatoryContent = null;
    this.regualatoryMsg = null;
    this.regualatoryMsgOt1 = null;
    this.regualatoryMsgOt2 = null;
    this.regulatoryResultStr = null;
    this.projectName = null;
    this.projectNumber = null;
    this.regulatoryStatusStr = null;
    this.actualUser = null;
    this.actualDate = null;
    this.planUser = null;
    this.planDate = null;
    this.custType = null;
  }

  public int getResultId() {
    return this.resultId;
  }

  public SupervisionResultList setResultId(int resultId) {
    this.resultId = resultId;
    setResultIdIsSet(true);
    return this;
  }

  public void unsetResultId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTID_ISSET_ID);
  }

  /** Returns true if field resultId is set (has been assigned a value) and false otherwise */
  public boolean isSetResultId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULTID_ISSET_ID);
  }

  public void setResultIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public SupervisionResultList setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getRegulatoryPlanId() {
    return this.regulatoryPlanId;
  }

  public SupervisionResultList setRegulatoryPlanId(int regulatoryPlanId) {
    this.regulatoryPlanId = regulatoryPlanId;
    setRegulatoryPlanIdIsSet(true);
    return this;
  }

  public void unsetRegulatoryPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID);
  }

  /** Returns true if field regulatoryPlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID);
  }

  public void setRegulatoryPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID, value);
  }

  public String getRegualatorySubject() {
    return this.regualatorySubject;
  }

  public SupervisionResultList setRegualatorySubject(String regualatorySubject) {
    this.regualatorySubject = regualatorySubject;
    return this;
  }

  public void unsetRegualatorySubject() {
    this.regualatorySubject = null;
  }

  /** Returns true if field regualatorySubject is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatorySubject() {
    return this.regualatorySubject != null;
  }

  public void setRegualatorySubjectIsSet(boolean value) {
    if (!value) {
      this.regualatorySubject = null;
    }
  }

  public String getRegualatoryContent() {
    return this.regualatoryContent;
  }

  public SupervisionResultList setRegualatoryContent(String regualatoryContent) {
    this.regualatoryContent = regualatoryContent;
    return this;
  }

  public void unsetRegualatoryContent() {
    this.regualatoryContent = null;
  }

  /** Returns true if field regualatoryContent is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryContent() {
    return this.regualatoryContent != null;
  }

  public void setRegualatoryContentIsSet(boolean value) {
    if (!value) {
      this.regualatoryContent = null;
    }
  }

  public String getRegualatoryMsg() {
    return this.regualatoryMsg;
  }

  public SupervisionResultList setRegualatoryMsg(String regualatoryMsg) {
    this.regualatoryMsg = regualatoryMsg;
    return this;
  }

  public void unsetRegualatoryMsg() {
    this.regualatoryMsg = null;
  }

  /** Returns true if field regualatoryMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryMsg() {
    return this.regualatoryMsg != null;
  }

  public void setRegualatoryMsgIsSet(boolean value) {
    if (!value) {
      this.regualatoryMsg = null;
    }
  }

  public String getRegualatoryMsgOt1() {
    return this.regualatoryMsgOt1;
  }

  public SupervisionResultList setRegualatoryMsgOt1(String regualatoryMsgOt1) {
    this.regualatoryMsgOt1 = regualatoryMsgOt1;
    return this;
  }

  public void unsetRegualatoryMsgOt1() {
    this.regualatoryMsgOt1 = null;
  }

  /** Returns true if field regualatoryMsgOt1 is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryMsgOt1() {
    return this.regualatoryMsgOt1 != null;
  }

  public void setRegualatoryMsgOt1IsSet(boolean value) {
    if (!value) {
      this.regualatoryMsgOt1 = null;
    }
  }

  public String getRegualatoryMsgOt2() {
    return this.regualatoryMsgOt2;
  }

  public SupervisionResultList setRegualatoryMsgOt2(String regualatoryMsgOt2) {
    this.regualatoryMsgOt2 = regualatoryMsgOt2;
    return this;
  }

  public void unsetRegualatoryMsgOt2() {
    this.regualatoryMsgOt2 = null;
  }

  /** Returns true if field regualatoryMsgOt2 is set (has been assigned a value) and false otherwise */
  public boolean isSetRegualatoryMsgOt2() {
    return this.regualatoryMsgOt2 != null;
  }

  public void setRegualatoryMsgOt2IsSet(boolean value) {
    if (!value) {
      this.regualatoryMsgOt2 = null;
    }
  }

  public String getRegulatoryResultStr() {
    return this.regulatoryResultStr;
  }

  public SupervisionResultList setRegulatoryResultStr(String regulatoryResultStr) {
    this.regulatoryResultStr = regulatoryResultStr;
    return this;
  }

  public void unsetRegulatoryResultStr() {
    this.regulatoryResultStr = null;
  }

  /** Returns true if field regulatoryResultStr is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryResultStr() {
    return this.regulatoryResultStr != null;
  }

  public void setRegulatoryResultStrIsSet(boolean value) {
    if (!value) {
      this.regulatoryResultStr = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public SupervisionResultList setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public SupervisionResultList setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getRegulatoryStatusStr() {
    return this.regulatoryStatusStr;
  }

  public SupervisionResultList setRegulatoryStatusStr(String regulatoryStatusStr) {
    this.regulatoryStatusStr = regulatoryStatusStr;
    return this;
  }

  public void unsetRegulatoryStatusStr() {
    this.regulatoryStatusStr = null;
  }

  /** Returns true if field regulatoryStatusStr is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryStatusStr() {
    return this.regulatoryStatusStr != null;
  }

  public void setRegulatoryStatusStrIsSet(boolean value) {
    if (!value) {
      this.regulatoryStatusStr = null;
    }
  }

  public String getActualUser() {
    return this.actualUser;
  }

  public SupervisionResultList setActualUser(String actualUser) {
    this.actualUser = actualUser;
    return this;
  }

  public void unsetActualUser() {
    this.actualUser = null;
  }

  /** Returns true if field actualUser is set (has been assigned a value) and false otherwise */
  public boolean isSetActualUser() {
    return this.actualUser != null;
  }

  public void setActualUserIsSet(boolean value) {
    if (!value) {
      this.actualUser = null;
    }
  }

  public String getActualDate() {
    return this.actualDate;
  }

  public SupervisionResultList setActualDate(String actualDate) {
    this.actualDate = actualDate;
    return this;
  }

  public void unsetActualDate() {
    this.actualDate = null;
  }

  /** Returns true if field actualDate is set (has been assigned a value) and false otherwise */
  public boolean isSetActualDate() {
    return this.actualDate != null;
  }

  public void setActualDateIsSet(boolean value) {
    if (!value) {
      this.actualDate = null;
    }
  }

  public String getPlanUser() {
    return this.planUser;
  }

  public SupervisionResultList setPlanUser(String planUser) {
    this.planUser = planUser;
    return this;
  }

  public void unsetPlanUser() {
    this.planUser = null;
  }

  /** Returns true if field planUser is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanUser() {
    return this.planUser != null;
  }

  public void setPlanUserIsSet(boolean value) {
    if (!value) {
      this.planUser = null;
    }
  }

  public String getPlanDate() {
    return this.planDate;
  }

  public SupervisionResultList setPlanDate(String planDate) {
    this.planDate = planDate;
    return this;
  }

  public void unsetPlanDate() {
    this.planDate = null;
  }

  /** Returns true if field planDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanDate() {
    return this.planDate != null;
  }

  public void setPlanDateIsSet(boolean value) {
    if (!value) {
      this.planDate = null;
    }
  }

  public String getCustType() {
    return this.custType;
  }

  public SupervisionResultList setCustType(String custType) {
    this.custType = custType;
    return this;
  }

  public void unsetCustType() {
    this.custType = null;
  }

  /** Returns true if field custType is set (has been assigned a value) and false otherwise */
  public boolean isSetCustType() {
    return this.custType != null;
  }

  public void setCustTypeIsSet(boolean value) {
    if (!value) {
      this.custType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_ID:
      if (value == null) {
        unsetResultId();
      } else {
        setResultId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case REGULATORY_PLAN_ID:
      if (value == null) {
        unsetRegulatoryPlanId();
      } else {
        setRegulatoryPlanId((Integer)value);
      }
      break;

    case REGUALATORY_SUBJECT:
      if (value == null) {
        unsetRegualatorySubject();
      } else {
        setRegualatorySubject((String)value);
      }
      break;

    case REGUALATORY_CONTENT:
      if (value == null) {
        unsetRegualatoryContent();
      } else {
        setRegualatoryContent((String)value);
      }
      break;

    case REGUALATORY_MSG:
      if (value == null) {
        unsetRegualatoryMsg();
      } else {
        setRegualatoryMsg((String)value);
      }
      break;

    case REGUALATORY_MSG_OT1:
      if (value == null) {
        unsetRegualatoryMsgOt1();
      } else {
        setRegualatoryMsgOt1((String)value);
      }
      break;

    case REGUALATORY_MSG_OT2:
      if (value == null) {
        unsetRegualatoryMsgOt2();
      } else {
        setRegualatoryMsgOt2((String)value);
      }
      break;

    case REGULATORY_RESULT_STR:
      if (value == null) {
        unsetRegulatoryResultStr();
      } else {
        setRegulatoryResultStr((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case REGULATORY_STATUS_STR:
      if (value == null) {
        unsetRegulatoryStatusStr();
      } else {
        setRegulatoryStatusStr((String)value);
      }
      break;

    case ACTUAL_USER:
      if (value == null) {
        unsetActualUser();
      } else {
        setActualUser((String)value);
      }
      break;

    case ACTUAL_DATE:
      if (value == null) {
        unsetActualDate();
      } else {
        setActualDate((String)value);
      }
      break;

    case PLAN_USER:
      if (value == null) {
        unsetPlanUser();
      } else {
        setPlanUser((String)value);
      }
      break;

    case PLAN_DATE:
      if (value == null) {
        unsetPlanDate();
      } else {
        setPlanDate((String)value);
      }
      break;

    case CUST_TYPE:
      if (value == null) {
        unsetCustType();
      } else {
        setCustType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_ID:
      return Integer.valueOf(getResultId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case REGULATORY_PLAN_ID:
      return Integer.valueOf(getRegulatoryPlanId());

    case REGUALATORY_SUBJECT:
      return getRegualatorySubject();

    case REGUALATORY_CONTENT:
      return getRegualatoryContent();

    case REGUALATORY_MSG:
      return getRegualatoryMsg();

    case REGUALATORY_MSG_OT1:
      return getRegualatoryMsgOt1();

    case REGUALATORY_MSG_OT2:
      return getRegualatoryMsgOt2();

    case REGULATORY_RESULT_STR:
      return getRegulatoryResultStr();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case REGULATORY_STATUS_STR:
      return getRegulatoryStatusStr();

    case ACTUAL_USER:
      return getActualUser();

    case ACTUAL_DATE:
      return getActualDate();

    case PLAN_USER:
      return getPlanUser();

    case PLAN_DATE:
      return getPlanDate();

    case CUST_TYPE:
      return getCustType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_ID:
      return isSetResultId();
    case PROJECT_ID:
      return isSetProjectId();
    case REGULATORY_PLAN_ID:
      return isSetRegulatoryPlanId();
    case REGUALATORY_SUBJECT:
      return isSetRegualatorySubject();
    case REGUALATORY_CONTENT:
      return isSetRegualatoryContent();
    case REGUALATORY_MSG:
      return isSetRegualatoryMsg();
    case REGUALATORY_MSG_OT1:
      return isSetRegualatoryMsgOt1();
    case REGUALATORY_MSG_OT2:
      return isSetRegualatoryMsgOt2();
    case REGULATORY_RESULT_STR:
      return isSetRegulatoryResultStr();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case REGULATORY_STATUS_STR:
      return isSetRegulatoryStatusStr();
    case ACTUAL_USER:
      return isSetActualUser();
    case ACTUAL_DATE:
      return isSetActualDate();
    case PLAN_USER:
      return isSetPlanUser();
    case PLAN_DATE:
      return isSetPlanDate();
    case CUST_TYPE:
      return isSetCustType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisionResultList)
      return this.equals((SupervisionResultList)that);
    return false;
  }

  public boolean equals(SupervisionResultList that) {
    if (that == null)
      return false;

    boolean this_present_resultId = true;
    boolean that_present_resultId = true;
    if (this_present_resultId || that_present_resultId) {
      if (!(this_present_resultId && that_present_resultId))
        return false;
      if (this.resultId != that.resultId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_regulatoryPlanId = true;
    boolean that_present_regulatoryPlanId = true;
    if (this_present_regulatoryPlanId || that_present_regulatoryPlanId) {
      if (!(this_present_regulatoryPlanId && that_present_regulatoryPlanId))
        return false;
      if (this.regulatoryPlanId != that.regulatoryPlanId)
        return false;
    }

    boolean this_present_regualatorySubject = true && this.isSetRegualatorySubject();
    boolean that_present_regualatorySubject = true && that.isSetRegualatorySubject();
    if (this_present_regualatorySubject || that_present_regualatorySubject) {
      if (!(this_present_regualatorySubject && that_present_regualatorySubject))
        return false;
      if (!this.regualatorySubject.equals(that.regualatorySubject))
        return false;
    }

    boolean this_present_regualatoryContent = true && this.isSetRegualatoryContent();
    boolean that_present_regualatoryContent = true && that.isSetRegualatoryContent();
    if (this_present_regualatoryContent || that_present_regualatoryContent) {
      if (!(this_present_regualatoryContent && that_present_regualatoryContent))
        return false;
      if (!this.regualatoryContent.equals(that.regualatoryContent))
        return false;
    }

    boolean this_present_regualatoryMsg = true && this.isSetRegualatoryMsg();
    boolean that_present_regualatoryMsg = true && that.isSetRegualatoryMsg();
    if (this_present_regualatoryMsg || that_present_regualatoryMsg) {
      if (!(this_present_regualatoryMsg && that_present_regualatoryMsg))
        return false;
      if (!this.regualatoryMsg.equals(that.regualatoryMsg))
        return false;
    }

    boolean this_present_regualatoryMsgOt1 = true && this.isSetRegualatoryMsgOt1();
    boolean that_present_regualatoryMsgOt1 = true && that.isSetRegualatoryMsgOt1();
    if (this_present_regualatoryMsgOt1 || that_present_regualatoryMsgOt1) {
      if (!(this_present_regualatoryMsgOt1 && that_present_regualatoryMsgOt1))
        return false;
      if (!this.regualatoryMsgOt1.equals(that.regualatoryMsgOt1))
        return false;
    }

    boolean this_present_regualatoryMsgOt2 = true && this.isSetRegualatoryMsgOt2();
    boolean that_present_regualatoryMsgOt2 = true && that.isSetRegualatoryMsgOt2();
    if (this_present_regualatoryMsgOt2 || that_present_regualatoryMsgOt2) {
      if (!(this_present_regualatoryMsgOt2 && that_present_regualatoryMsgOt2))
        return false;
      if (!this.regualatoryMsgOt2.equals(that.regualatoryMsgOt2))
        return false;
    }

    boolean this_present_regulatoryResultStr = true && this.isSetRegulatoryResultStr();
    boolean that_present_regulatoryResultStr = true && that.isSetRegulatoryResultStr();
    if (this_present_regulatoryResultStr || that_present_regulatoryResultStr) {
      if (!(this_present_regulatoryResultStr && that_present_regulatoryResultStr))
        return false;
      if (!this.regulatoryResultStr.equals(that.regulatoryResultStr))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_regulatoryStatusStr = true && this.isSetRegulatoryStatusStr();
    boolean that_present_regulatoryStatusStr = true && that.isSetRegulatoryStatusStr();
    if (this_present_regulatoryStatusStr || that_present_regulatoryStatusStr) {
      if (!(this_present_regulatoryStatusStr && that_present_regulatoryStatusStr))
        return false;
      if (!this.regulatoryStatusStr.equals(that.regulatoryStatusStr))
        return false;
    }

    boolean this_present_actualUser = true && this.isSetActualUser();
    boolean that_present_actualUser = true && that.isSetActualUser();
    if (this_present_actualUser || that_present_actualUser) {
      if (!(this_present_actualUser && that_present_actualUser))
        return false;
      if (!this.actualUser.equals(that.actualUser))
        return false;
    }

    boolean this_present_actualDate = true && this.isSetActualDate();
    boolean that_present_actualDate = true && that.isSetActualDate();
    if (this_present_actualDate || that_present_actualDate) {
      if (!(this_present_actualDate && that_present_actualDate))
        return false;
      if (!this.actualDate.equals(that.actualDate))
        return false;
    }

    boolean this_present_planUser = true && this.isSetPlanUser();
    boolean that_present_planUser = true && that.isSetPlanUser();
    if (this_present_planUser || that_present_planUser) {
      if (!(this_present_planUser && that_present_planUser))
        return false;
      if (!this.planUser.equals(that.planUser))
        return false;
    }

    boolean this_present_planDate = true && this.isSetPlanDate();
    boolean that_present_planDate = true && that.isSetPlanDate();
    if (this_present_planDate || that_present_planDate) {
      if (!(this_present_planDate && that_present_planDate))
        return false;
      if (!this.planDate.equals(that.planDate))
        return false;
    }

    boolean this_present_custType = true && this.isSetCustType();
    boolean that_present_custType = true && that.isSetCustType();
    if (this_present_custType || that_present_custType) {
      if (!(this_present_custType && that_present_custType))
        return false;
      if (!this.custType.equals(that.custType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultId = true;
    list.add(present_resultId);
    if (present_resultId)
      list.add(resultId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_regulatoryPlanId = true;
    list.add(present_regulatoryPlanId);
    if (present_regulatoryPlanId)
      list.add(regulatoryPlanId);

    boolean present_regualatorySubject = true && (isSetRegualatorySubject());
    list.add(present_regualatorySubject);
    if (present_regualatorySubject)
      list.add(regualatorySubject);

    boolean present_regualatoryContent = true && (isSetRegualatoryContent());
    list.add(present_regualatoryContent);
    if (present_regualatoryContent)
      list.add(regualatoryContent);

    boolean present_regualatoryMsg = true && (isSetRegualatoryMsg());
    list.add(present_regualatoryMsg);
    if (present_regualatoryMsg)
      list.add(regualatoryMsg);

    boolean present_regualatoryMsgOt1 = true && (isSetRegualatoryMsgOt1());
    list.add(present_regualatoryMsgOt1);
    if (present_regualatoryMsgOt1)
      list.add(regualatoryMsgOt1);

    boolean present_regualatoryMsgOt2 = true && (isSetRegualatoryMsgOt2());
    list.add(present_regualatoryMsgOt2);
    if (present_regualatoryMsgOt2)
      list.add(regualatoryMsgOt2);

    boolean present_regulatoryResultStr = true && (isSetRegulatoryResultStr());
    list.add(present_regulatoryResultStr);
    if (present_regulatoryResultStr)
      list.add(regulatoryResultStr);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_regulatoryStatusStr = true && (isSetRegulatoryStatusStr());
    list.add(present_regulatoryStatusStr);
    if (present_regulatoryStatusStr)
      list.add(regulatoryStatusStr);

    boolean present_actualUser = true && (isSetActualUser());
    list.add(present_actualUser);
    if (present_actualUser)
      list.add(actualUser);

    boolean present_actualDate = true && (isSetActualDate());
    list.add(present_actualDate);
    if (present_actualDate)
      list.add(actualDate);

    boolean present_planUser = true && (isSetPlanUser());
    list.add(present_planUser);
    if (present_planUser)
      list.add(planUser);

    boolean present_planDate = true && (isSetPlanDate());
    list.add(present_planDate);
    if (present_planDate)
      list.add(planDate);

    boolean present_custType = true && (isSetCustType());
    list.add(present_custType);
    if (present_custType)
      list.add(custType);

    return list.hashCode();
  }

  @Override
  public int compareTo(SupervisionResultList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultId()).compareTo(other.isSetResultId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultId, other.resultId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryPlanId()).compareTo(other.isSetRegulatoryPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryPlanId, other.regulatoryPlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatorySubject()).compareTo(other.isSetRegualatorySubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatorySubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatorySubject, other.regualatorySubject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryContent()).compareTo(other.isSetRegualatoryContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryContent, other.regualatoryContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryMsg()).compareTo(other.isSetRegualatoryMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryMsg, other.regualatoryMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryMsgOt1()).compareTo(other.isSetRegualatoryMsgOt1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryMsgOt1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryMsgOt1, other.regualatoryMsgOt1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegualatoryMsgOt2()).compareTo(other.isSetRegualatoryMsgOt2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegualatoryMsgOt2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regualatoryMsgOt2, other.regualatoryMsgOt2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryResultStr()).compareTo(other.isSetRegulatoryResultStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryResultStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryResultStr, other.regulatoryResultStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryStatusStr()).compareTo(other.isSetRegulatoryStatusStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryStatusStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryStatusStr, other.regulatoryStatusStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualUser()).compareTo(other.isSetActualUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualUser, other.actualUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualDate()).compareTo(other.isSetActualDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualDate, other.actualDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanUser()).compareTo(other.isSetPlanUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planUser, other.planUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanDate()).compareTo(other.isSetPlanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planDate, other.planDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustType()).compareTo(other.isSetCustType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custType, other.custType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SupervisionResultList(");
    boolean first = true;

    sb.append("resultId:");
    sb.append(this.resultId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryPlanId:");
    sb.append(this.regulatoryPlanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatorySubject:");
    if (this.regualatorySubject == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatorySubject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryContent:");
    if (this.regualatoryContent == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryMsg:");
    if (this.regualatoryMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryMsgOt1:");
    if (this.regualatoryMsgOt1 == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryMsgOt1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regualatoryMsgOt2:");
    if (this.regualatoryMsgOt2 == null) {
      sb.append("null");
    } else {
      sb.append(this.regualatoryMsgOt2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryResultStr:");
    if (this.regulatoryResultStr == null) {
      sb.append("null");
    } else {
      sb.append(this.regulatoryResultStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryStatusStr:");
    if (this.regulatoryStatusStr == null) {
      sb.append("null");
    } else {
      sb.append(this.regulatoryStatusStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualUser:");
    if (this.actualUser == null) {
      sb.append("null");
    } else {
      sb.append(this.actualUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualDate:");
    if (this.actualDate == null) {
      sb.append("null");
    } else {
      sb.append(this.actualDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planUser:");
    if (this.planUser == null) {
      sb.append("null");
    } else {
      sb.append(this.planUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planDate:");
    if (this.planDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("custType:");
    if (this.custType == null) {
      sb.append("null");
    } else {
      sb.append(this.custType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisionResultListStandardSchemeFactory implements SchemeFactory {
    public SupervisionResultListStandardScheme getScheme() {
      return new SupervisionResultListStandardScheme();
    }
  }

  private static class SupervisionResultListStandardScheme extends StandardScheme<SupervisionResultList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SupervisionResultList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultId = iprot.readI32();
              struct.setResultIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGULATORY_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regulatoryPlanId = iprot.readI32();
              struct.setRegulatoryPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGUALATORY_SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatorySubject = iprot.readString();
              struct.setRegualatorySubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGUALATORY_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryContent = iprot.readString();
              struct.setRegualatoryContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGUALATORY_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryMsg = iprot.readString();
              struct.setRegualatoryMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REGUALATORY_MSG_OT1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryMsgOt1 = iprot.readString();
              struct.setRegualatoryMsgOt1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REGUALATORY_MSG_OT2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regualatoryMsgOt2 = iprot.readString();
              struct.setRegualatoryMsgOt2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REGULATORY_RESULT_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regulatoryResultStr = iprot.readString();
              struct.setRegulatoryResultStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REGULATORY_STATUS_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regulatoryStatusStr = iprot.readString();
              struct.setRegulatoryStatusStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTUAL_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualUser = iprot.readString();
              struct.setActualUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACTUAL_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualDate = iprot.readString();
              struct.setActualDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLAN_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planUser = iprot.readString();
              struct.setPlanUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PLAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planDate = iprot.readString();
              struct.setPlanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CUST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.custType = iprot.readString();
              struct.setCustTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SupervisionResultList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RESULT_ID_FIELD_DESC);
      oprot.writeI32(struct.resultId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGULATORY_PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.regulatoryPlanId);
      oprot.writeFieldEnd();
      if (struct.regualatorySubject != null) {
        oprot.writeFieldBegin(REGUALATORY_SUBJECT_FIELD_DESC);
        oprot.writeString(struct.regualatorySubject);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryContent != null) {
        oprot.writeFieldBegin(REGUALATORY_CONTENT_FIELD_DESC);
        oprot.writeString(struct.regualatoryContent);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryMsg != null) {
        oprot.writeFieldBegin(REGUALATORY_MSG_FIELD_DESC);
        oprot.writeString(struct.regualatoryMsg);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryMsgOt1 != null) {
        oprot.writeFieldBegin(REGUALATORY_MSG_OT1_FIELD_DESC);
        oprot.writeString(struct.regualatoryMsgOt1);
        oprot.writeFieldEnd();
      }
      if (struct.regualatoryMsgOt2 != null) {
        oprot.writeFieldBegin(REGUALATORY_MSG_OT2_FIELD_DESC);
        oprot.writeString(struct.regualatoryMsgOt2);
        oprot.writeFieldEnd();
      }
      if (struct.regulatoryResultStr != null) {
        oprot.writeFieldBegin(REGULATORY_RESULT_STR_FIELD_DESC);
        oprot.writeString(struct.regulatoryResultStr);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.regulatoryStatusStr != null) {
        oprot.writeFieldBegin(REGULATORY_STATUS_STR_FIELD_DESC);
        oprot.writeString(struct.regulatoryStatusStr);
        oprot.writeFieldEnd();
      }
      if (struct.actualUser != null) {
        oprot.writeFieldBegin(ACTUAL_USER_FIELD_DESC);
        oprot.writeString(struct.actualUser);
        oprot.writeFieldEnd();
      }
      if (struct.actualDate != null) {
        oprot.writeFieldBegin(ACTUAL_DATE_FIELD_DESC);
        oprot.writeString(struct.actualDate);
        oprot.writeFieldEnd();
      }
      if (struct.planUser != null) {
        oprot.writeFieldBegin(PLAN_USER_FIELD_DESC);
        oprot.writeString(struct.planUser);
        oprot.writeFieldEnd();
      }
      if (struct.planDate != null) {
        oprot.writeFieldBegin(PLAN_DATE_FIELD_DESC);
        oprot.writeString(struct.planDate);
        oprot.writeFieldEnd();
      }
      if (struct.custType != null) {
        oprot.writeFieldBegin(CUST_TYPE_FIELD_DESC);
        oprot.writeString(struct.custType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisionResultListTupleSchemeFactory implements SchemeFactory {
    public SupervisionResultListTupleScheme getScheme() {
      return new SupervisionResultListTupleScheme();
    }
  }

  private static class SupervisionResultListTupleScheme extends TupleScheme<SupervisionResultList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SupervisionResultList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetRegulatoryPlanId()) {
        optionals.set(2);
      }
      if (struct.isSetRegualatorySubject()) {
        optionals.set(3);
      }
      if (struct.isSetRegualatoryContent()) {
        optionals.set(4);
      }
      if (struct.isSetRegualatoryMsg()) {
        optionals.set(5);
      }
      if (struct.isSetRegualatoryMsgOt1()) {
        optionals.set(6);
      }
      if (struct.isSetRegualatoryMsgOt2()) {
        optionals.set(7);
      }
      if (struct.isSetRegulatoryResultStr()) {
        optionals.set(8);
      }
      if (struct.isSetProjectName()) {
        optionals.set(9);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(10);
      }
      if (struct.isSetRegulatoryStatusStr()) {
        optionals.set(11);
      }
      if (struct.isSetActualUser()) {
        optionals.set(12);
      }
      if (struct.isSetActualDate()) {
        optionals.set(13);
      }
      if (struct.isSetPlanUser()) {
        optionals.set(14);
      }
      if (struct.isSetPlanDate()) {
        optionals.set(15);
      }
      if (struct.isSetCustType()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetResultId()) {
        oprot.writeI32(struct.resultId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetRegulatoryPlanId()) {
        oprot.writeI32(struct.regulatoryPlanId);
      }
      if (struct.isSetRegualatorySubject()) {
        oprot.writeString(struct.regualatorySubject);
      }
      if (struct.isSetRegualatoryContent()) {
        oprot.writeString(struct.regualatoryContent);
      }
      if (struct.isSetRegualatoryMsg()) {
        oprot.writeString(struct.regualatoryMsg);
      }
      if (struct.isSetRegualatoryMsgOt1()) {
        oprot.writeString(struct.regualatoryMsgOt1);
      }
      if (struct.isSetRegualatoryMsgOt2()) {
        oprot.writeString(struct.regualatoryMsgOt2);
      }
      if (struct.isSetRegulatoryResultStr()) {
        oprot.writeString(struct.regulatoryResultStr);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetRegulatoryStatusStr()) {
        oprot.writeString(struct.regulatoryStatusStr);
      }
      if (struct.isSetActualUser()) {
        oprot.writeString(struct.actualUser);
      }
      if (struct.isSetActualDate()) {
        oprot.writeString(struct.actualDate);
      }
      if (struct.isSetPlanUser()) {
        oprot.writeString(struct.planUser);
      }
      if (struct.isSetPlanDate()) {
        oprot.writeString(struct.planDate);
      }
      if (struct.isSetCustType()) {
        oprot.writeString(struct.custType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SupervisionResultList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.resultId = iprot.readI32();
        struct.setResultIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.regulatoryPlanId = iprot.readI32();
        struct.setRegulatoryPlanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.regualatorySubject = iprot.readString();
        struct.setRegualatorySubjectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.regualatoryContent = iprot.readString();
        struct.setRegualatoryContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.regualatoryMsg = iprot.readString();
        struct.setRegualatoryMsgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.regualatoryMsgOt1 = iprot.readString();
        struct.setRegualatoryMsgOt1IsSet(true);
      }
      if (incoming.get(7)) {
        struct.regualatoryMsgOt2 = iprot.readString();
        struct.setRegualatoryMsgOt2IsSet(true);
      }
      if (incoming.get(8)) {
        struct.regulatoryResultStr = iprot.readString();
        struct.setRegulatoryResultStrIsSet(true);
      }
      if (incoming.get(9)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(11)) {
        struct.regulatoryStatusStr = iprot.readString();
        struct.setRegulatoryStatusStrIsSet(true);
      }
      if (incoming.get(12)) {
        struct.actualUser = iprot.readString();
        struct.setActualUserIsSet(true);
      }
      if (incoming.get(13)) {
        struct.actualDate = iprot.readString();
        struct.setActualDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.planUser = iprot.readString();
        struct.setPlanUserIsSet(true);
      }
      if (incoming.get(15)) {
        struct.planDate = iprot.readString();
        struct.setPlanDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.custType = iprot.readString();
        struct.setCustTypeIsSet(true);
      }
    }
  }

}


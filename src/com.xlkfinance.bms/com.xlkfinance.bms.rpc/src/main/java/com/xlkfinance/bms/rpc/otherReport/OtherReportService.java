/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.otherReport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-12")
public class OtherReportService {

  public interface Iface {

    public List<ForeclosureCapDetailsReport> queryForeclosureCapNewDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException;

    public int queryForeclosureCapNewDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException;

    public List<ForeclosureCapDetailsReport> queryForeclosureCapSquareDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException;

    public int queryForeclosureCapSquareDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException;

    public List<ForeclosureCapDetailsReport> queryForeclosureCapIngDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException;

    public int queryForeclosureCapIngDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException;

    public List<ForeclosureOrgDetailsReport> queryForeclosureOrgNewDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException;

    public int queryForeclosureOrgNewDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException;

    public List<ForeclosureOrgDetailsReport> queryForeclosureOrgSquareDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException;

    public int queryForeclosureOrgSquareDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException;

    public List<ForeclosureOrgDetailsReport> queryForeclosureOrgIngDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException;

    public int queryForeclosureOrgIngDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryForeclosureCapNewDetails(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureCapNewDetailsTotal(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureCapSquareDetails(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureCapSquareDetailsTotal(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureCapIngDetails(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureCapIngDetailsTotal(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureOrgNewDetails(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureOrgNewDetailsTotal(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureOrgSquareDetails(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureOrgSquareDetailsTotal(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureOrgIngDetails(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureOrgIngDetailsTotal(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<ForeclosureCapDetailsReport> queryForeclosureCapNewDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureCapNewDetails(query);
      return recv_queryForeclosureCapNewDetails();
    }

    public void send_queryForeclosureCapNewDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureCapNewDetails_args args = new queryForeclosureCapNewDetails_args();
      args.setQuery(query);
      sendBase("queryForeclosureCapNewDetails", args);
    }

    public List<ForeclosureCapDetailsReport> recv_queryForeclosureCapNewDetails() throws org.apache.thrift.TException
    {
      queryForeclosureCapNewDetails_result result = new queryForeclosureCapNewDetails_result();
      receiveBase(result, "queryForeclosureCapNewDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureCapNewDetails failed: unknown result");
    }

    public int queryForeclosureCapNewDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureCapNewDetailsTotal(query);
      return recv_queryForeclosureCapNewDetailsTotal();
    }

    public void send_queryForeclosureCapNewDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureCapNewDetailsTotal_args args = new queryForeclosureCapNewDetailsTotal_args();
      args.setQuery(query);
      sendBase("queryForeclosureCapNewDetailsTotal", args);
    }

    public int recv_queryForeclosureCapNewDetailsTotal() throws org.apache.thrift.TException
    {
      queryForeclosureCapNewDetailsTotal_result result = new queryForeclosureCapNewDetailsTotal_result();
      receiveBase(result, "queryForeclosureCapNewDetailsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureCapNewDetailsTotal failed: unknown result");
    }

    public List<ForeclosureCapDetailsReport> queryForeclosureCapSquareDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureCapSquareDetails(query);
      return recv_queryForeclosureCapSquareDetails();
    }

    public void send_queryForeclosureCapSquareDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureCapSquareDetails_args args = new queryForeclosureCapSquareDetails_args();
      args.setQuery(query);
      sendBase("queryForeclosureCapSquareDetails", args);
    }

    public List<ForeclosureCapDetailsReport> recv_queryForeclosureCapSquareDetails() throws org.apache.thrift.TException
    {
      queryForeclosureCapSquareDetails_result result = new queryForeclosureCapSquareDetails_result();
      receiveBase(result, "queryForeclosureCapSquareDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureCapSquareDetails failed: unknown result");
    }

    public int queryForeclosureCapSquareDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureCapSquareDetailsTotal(query);
      return recv_queryForeclosureCapSquareDetailsTotal();
    }

    public void send_queryForeclosureCapSquareDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureCapSquareDetailsTotal_args args = new queryForeclosureCapSquareDetailsTotal_args();
      args.setQuery(query);
      sendBase("queryForeclosureCapSquareDetailsTotal", args);
    }

    public int recv_queryForeclosureCapSquareDetailsTotal() throws org.apache.thrift.TException
    {
      queryForeclosureCapSquareDetailsTotal_result result = new queryForeclosureCapSquareDetailsTotal_result();
      receiveBase(result, "queryForeclosureCapSquareDetailsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureCapSquareDetailsTotal failed: unknown result");
    }

    public List<ForeclosureCapDetailsReport> queryForeclosureCapIngDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureCapIngDetails(query);
      return recv_queryForeclosureCapIngDetails();
    }

    public void send_queryForeclosureCapIngDetails(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureCapIngDetails_args args = new queryForeclosureCapIngDetails_args();
      args.setQuery(query);
      sendBase("queryForeclosureCapIngDetails", args);
    }

    public List<ForeclosureCapDetailsReport> recv_queryForeclosureCapIngDetails() throws org.apache.thrift.TException
    {
      queryForeclosureCapIngDetails_result result = new queryForeclosureCapIngDetails_result();
      receiveBase(result, "queryForeclosureCapIngDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureCapIngDetails failed: unknown result");
    }

    public int queryForeclosureCapIngDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureCapIngDetailsTotal(query);
      return recv_queryForeclosureCapIngDetailsTotal();
    }

    public void send_queryForeclosureCapIngDetailsTotal(ForeclosureCapDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureCapIngDetailsTotal_args args = new queryForeclosureCapIngDetailsTotal_args();
      args.setQuery(query);
      sendBase("queryForeclosureCapIngDetailsTotal", args);
    }

    public int recv_queryForeclosureCapIngDetailsTotal() throws org.apache.thrift.TException
    {
      queryForeclosureCapIngDetailsTotal_result result = new queryForeclosureCapIngDetailsTotal_result();
      receiveBase(result, "queryForeclosureCapIngDetailsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureCapIngDetailsTotal failed: unknown result");
    }

    public List<ForeclosureOrgDetailsReport> queryForeclosureOrgNewDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureOrgNewDetails(query);
      return recv_queryForeclosureOrgNewDetails();
    }

    public void send_queryForeclosureOrgNewDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureOrgNewDetails_args args = new queryForeclosureOrgNewDetails_args();
      args.setQuery(query);
      sendBase("queryForeclosureOrgNewDetails", args);
    }

    public List<ForeclosureOrgDetailsReport> recv_queryForeclosureOrgNewDetails() throws org.apache.thrift.TException
    {
      queryForeclosureOrgNewDetails_result result = new queryForeclosureOrgNewDetails_result();
      receiveBase(result, "queryForeclosureOrgNewDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureOrgNewDetails failed: unknown result");
    }

    public int queryForeclosureOrgNewDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureOrgNewDetailsTotal(query);
      return recv_queryForeclosureOrgNewDetailsTotal();
    }

    public void send_queryForeclosureOrgNewDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureOrgNewDetailsTotal_args args = new queryForeclosureOrgNewDetailsTotal_args();
      args.setQuery(query);
      sendBase("queryForeclosureOrgNewDetailsTotal", args);
    }

    public int recv_queryForeclosureOrgNewDetailsTotal() throws org.apache.thrift.TException
    {
      queryForeclosureOrgNewDetailsTotal_result result = new queryForeclosureOrgNewDetailsTotal_result();
      receiveBase(result, "queryForeclosureOrgNewDetailsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureOrgNewDetailsTotal failed: unknown result");
    }

    public List<ForeclosureOrgDetailsReport> queryForeclosureOrgSquareDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureOrgSquareDetails(query);
      return recv_queryForeclosureOrgSquareDetails();
    }

    public void send_queryForeclosureOrgSquareDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureOrgSquareDetails_args args = new queryForeclosureOrgSquareDetails_args();
      args.setQuery(query);
      sendBase("queryForeclosureOrgSquareDetails", args);
    }

    public List<ForeclosureOrgDetailsReport> recv_queryForeclosureOrgSquareDetails() throws org.apache.thrift.TException
    {
      queryForeclosureOrgSquareDetails_result result = new queryForeclosureOrgSquareDetails_result();
      receiveBase(result, "queryForeclosureOrgSquareDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureOrgSquareDetails failed: unknown result");
    }

    public int queryForeclosureOrgSquareDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureOrgSquareDetailsTotal(query);
      return recv_queryForeclosureOrgSquareDetailsTotal();
    }

    public void send_queryForeclosureOrgSquareDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureOrgSquareDetailsTotal_args args = new queryForeclosureOrgSquareDetailsTotal_args();
      args.setQuery(query);
      sendBase("queryForeclosureOrgSquareDetailsTotal", args);
    }

    public int recv_queryForeclosureOrgSquareDetailsTotal() throws org.apache.thrift.TException
    {
      queryForeclosureOrgSquareDetailsTotal_result result = new queryForeclosureOrgSquareDetailsTotal_result();
      receiveBase(result, "queryForeclosureOrgSquareDetailsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureOrgSquareDetailsTotal failed: unknown result");
    }

    public List<ForeclosureOrgDetailsReport> queryForeclosureOrgIngDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureOrgIngDetails(query);
      return recv_queryForeclosureOrgIngDetails();
    }

    public void send_queryForeclosureOrgIngDetails(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureOrgIngDetails_args args = new queryForeclosureOrgIngDetails_args();
      args.setQuery(query);
      sendBase("queryForeclosureOrgIngDetails", args);
    }

    public List<ForeclosureOrgDetailsReport> recv_queryForeclosureOrgIngDetails() throws org.apache.thrift.TException
    {
      queryForeclosureOrgIngDetails_result result = new queryForeclosureOrgIngDetails_result();
      receiveBase(result, "queryForeclosureOrgIngDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureOrgIngDetails failed: unknown result");
    }

    public int queryForeclosureOrgIngDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      send_queryForeclosureOrgIngDetailsTotal(query);
      return recv_queryForeclosureOrgIngDetailsTotal();
    }

    public void send_queryForeclosureOrgIngDetailsTotal(ForeclosureOrgDetailsReport query) throws org.apache.thrift.TException
    {
      queryForeclosureOrgIngDetailsTotal_args args = new queryForeclosureOrgIngDetailsTotal_args();
      args.setQuery(query);
      sendBase("queryForeclosureOrgIngDetailsTotal", args);
    }

    public int recv_queryForeclosureOrgIngDetailsTotal() throws org.apache.thrift.TException
    {
      queryForeclosureOrgIngDetailsTotal_result result = new queryForeclosureOrgIngDetailsTotal_result();
      receiveBase(result, "queryForeclosureOrgIngDetailsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureOrgIngDetailsTotal failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryForeclosureCapNewDetails(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureCapNewDetails_call method_call = new queryForeclosureCapNewDetails_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureCapNewDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapDetailsReport query;
      public queryForeclosureCapNewDetails_call(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureCapNewDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureCapNewDetails_args args = new queryForeclosureCapNewDetails_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureCapDetailsReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureCapNewDetails();
      }
    }

    public void queryForeclosureCapNewDetailsTotal(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureCapNewDetailsTotal_call method_call = new queryForeclosureCapNewDetailsTotal_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureCapNewDetailsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapDetailsReport query;
      public queryForeclosureCapNewDetailsTotal_call(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureCapNewDetailsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureCapNewDetailsTotal_args args = new queryForeclosureCapNewDetailsTotal_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureCapNewDetailsTotal();
      }
    }

    public void queryForeclosureCapSquareDetails(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureCapSquareDetails_call method_call = new queryForeclosureCapSquareDetails_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureCapSquareDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapDetailsReport query;
      public queryForeclosureCapSquareDetails_call(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureCapSquareDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureCapSquareDetails_args args = new queryForeclosureCapSquareDetails_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureCapDetailsReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureCapSquareDetails();
      }
    }

    public void queryForeclosureCapSquareDetailsTotal(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureCapSquareDetailsTotal_call method_call = new queryForeclosureCapSquareDetailsTotal_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureCapSquareDetailsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapDetailsReport query;
      public queryForeclosureCapSquareDetailsTotal_call(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureCapSquareDetailsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureCapSquareDetailsTotal_args args = new queryForeclosureCapSquareDetailsTotal_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureCapSquareDetailsTotal();
      }
    }

    public void queryForeclosureCapIngDetails(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureCapIngDetails_call method_call = new queryForeclosureCapIngDetails_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureCapIngDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapDetailsReport query;
      public queryForeclosureCapIngDetails_call(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureCapIngDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureCapIngDetails_args args = new queryForeclosureCapIngDetails_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureCapDetailsReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureCapIngDetails();
      }
    }

    public void queryForeclosureCapIngDetailsTotal(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureCapIngDetailsTotal_call method_call = new queryForeclosureCapIngDetailsTotal_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureCapIngDetailsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapDetailsReport query;
      public queryForeclosureCapIngDetailsTotal_call(ForeclosureCapDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureCapIngDetailsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureCapIngDetailsTotal_args args = new queryForeclosureCapIngDetailsTotal_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureCapIngDetailsTotal();
      }
    }

    public void queryForeclosureOrgNewDetails(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureOrgNewDetails_call method_call = new queryForeclosureOrgNewDetails_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureOrgNewDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrgDetailsReport query;
      public queryForeclosureOrgNewDetails_call(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureOrgNewDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureOrgNewDetails_args args = new queryForeclosureOrgNewDetails_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureOrgDetailsReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureOrgNewDetails();
      }
    }

    public void queryForeclosureOrgNewDetailsTotal(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureOrgNewDetailsTotal_call method_call = new queryForeclosureOrgNewDetailsTotal_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureOrgNewDetailsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrgDetailsReport query;
      public queryForeclosureOrgNewDetailsTotal_call(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureOrgNewDetailsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureOrgNewDetailsTotal_args args = new queryForeclosureOrgNewDetailsTotal_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureOrgNewDetailsTotal();
      }
    }

    public void queryForeclosureOrgSquareDetails(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureOrgSquareDetails_call method_call = new queryForeclosureOrgSquareDetails_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureOrgSquareDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrgDetailsReport query;
      public queryForeclosureOrgSquareDetails_call(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureOrgSquareDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureOrgSquareDetails_args args = new queryForeclosureOrgSquareDetails_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureOrgDetailsReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureOrgSquareDetails();
      }
    }

    public void queryForeclosureOrgSquareDetailsTotal(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureOrgSquareDetailsTotal_call method_call = new queryForeclosureOrgSquareDetailsTotal_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureOrgSquareDetailsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrgDetailsReport query;
      public queryForeclosureOrgSquareDetailsTotal_call(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureOrgSquareDetailsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureOrgSquareDetailsTotal_args args = new queryForeclosureOrgSquareDetailsTotal_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureOrgSquareDetailsTotal();
      }
    }

    public void queryForeclosureOrgIngDetails(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureOrgIngDetails_call method_call = new queryForeclosureOrgIngDetails_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureOrgIngDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrgDetailsReport query;
      public queryForeclosureOrgIngDetails_call(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureOrgIngDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureOrgIngDetails_args args = new queryForeclosureOrgIngDetails_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureOrgDetailsReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureOrgIngDetails();
      }
    }

    public void queryForeclosureOrgIngDetailsTotal(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureOrgIngDetailsTotal_call method_call = new queryForeclosureOrgIngDetailsTotal_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureOrgIngDetailsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrgDetailsReport query;
      public queryForeclosureOrgIngDetailsTotal_call(ForeclosureOrgDetailsReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureOrgIngDetailsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureOrgIngDetailsTotal_args args = new queryForeclosureOrgIngDetailsTotal_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureOrgIngDetailsTotal();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryForeclosureCapNewDetails", new queryForeclosureCapNewDetails());
      processMap.put("queryForeclosureCapNewDetailsTotal", new queryForeclosureCapNewDetailsTotal());
      processMap.put("queryForeclosureCapSquareDetails", new queryForeclosureCapSquareDetails());
      processMap.put("queryForeclosureCapSquareDetailsTotal", new queryForeclosureCapSquareDetailsTotal());
      processMap.put("queryForeclosureCapIngDetails", new queryForeclosureCapIngDetails());
      processMap.put("queryForeclosureCapIngDetailsTotal", new queryForeclosureCapIngDetailsTotal());
      processMap.put("queryForeclosureOrgNewDetails", new queryForeclosureOrgNewDetails());
      processMap.put("queryForeclosureOrgNewDetailsTotal", new queryForeclosureOrgNewDetailsTotal());
      processMap.put("queryForeclosureOrgSquareDetails", new queryForeclosureOrgSquareDetails());
      processMap.put("queryForeclosureOrgSquareDetailsTotal", new queryForeclosureOrgSquareDetailsTotal());
      processMap.put("queryForeclosureOrgIngDetails", new queryForeclosureOrgIngDetails());
      processMap.put("queryForeclosureOrgIngDetailsTotal", new queryForeclosureOrgIngDetailsTotal());
      return processMap;
    }

    public static class queryForeclosureCapNewDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureCapNewDetails_args> {
      public queryForeclosureCapNewDetails() {
        super("queryForeclosureCapNewDetails");
      }

      public queryForeclosureCapNewDetails_args getEmptyArgsInstance() {
        return new queryForeclosureCapNewDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureCapNewDetails_result getResult(I iface, queryForeclosureCapNewDetails_args args) throws org.apache.thrift.TException {
        queryForeclosureCapNewDetails_result result = new queryForeclosureCapNewDetails_result();
        result.success = iface.queryForeclosureCapNewDetails(args.query);
        return result;
      }
    }

    public static class queryForeclosureCapNewDetailsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureCapNewDetailsTotal_args> {
      public queryForeclosureCapNewDetailsTotal() {
        super("queryForeclosureCapNewDetailsTotal");
      }

      public queryForeclosureCapNewDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureCapNewDetailsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureCapNewDetailsTotal_result getResult(I iface, queryForeclosureCapNewDetailsTotal_args args) throws org.apache.thrift.TException {
        queryForeclosureCapNewDetailsTotal_result result = new queryForeclosureCapNewDetailsTotal_result();
        result.success = iface.queryForeclosureCapNewDetailsTotal(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureCapSquareDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureCapSquareDetails_args> {
      public queryForeclosureCapSquareDetails() {
        super("queryForeclosureCapSquareDetails");
      }

      public queryForeclosureCapSquareDetails_args getEmptyArgsInstance() {
        return new queryForeclosureCapSquareDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureCapSquareDetails_result getResult(I iface, queryForeclosureCapSquareDetails_args args) throws org.apache.thrift.TException {
        queryForeclosureCapSquareDetails_result result = new queryForeclosureCapSquareDetails_result();
        result.success = iface.queryForeclosureCapSquareDetails(args.query);
        return result;
      }
    }

    public static class queryForeclosureCapSquareDetailsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureCapSquareDetailsTotal_args> {
      public queryForeclosureCapSquareDetailsTotal() {
        super("queryForeclosureCapSquareDetailsTotal");
      }

      public queryForeclosureCapSquareDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureCapSquareDetailsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureCapSquareDetailsTotal_result getResult(I iface, queryForeclosureCapSquareDetailsTotal_args args) throws org.apache.thrift.TException {
        queryForeclosureCapSquareDetailsTotal_result result = new queryForeclosureCapSquareDetailsTotal_result();
        result.success = iface.queryForeclosureCapSquareDetailsTotal(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureCapIngDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureCapIngDetails_args> {
      public queryForeclosureCapIngDetails() {
        super("queryForeclosureCapIngDetails");
      }

      public queryForeclosureCapIngDetails_args getEmptyArgsInstance() {
        return new queryForeclosureCapIngDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureCapIngDetails_result getResult(I iface, queryForeclosureCapIngDetails_args args) throws org.apache.thrift.TException {
        queryForeclosureCapIngDetails_result result = new queryForeclosureCapIngDetails_result();
        result.success = iface.queryForeclosureCapIngDetails(args.query);
        return result;
      }
    }

    public static class queryForeclosureCapIngDetailsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureCapIngDetailsTotal_args> {
      public queryForeclosureCapIngDetailsTotal() {
        super("queryForeclosureCapIngDetailsTotal");
      }

      public queryForeclosureCapIngDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureCapIngDetailsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureCapIngDetailsTotal_result getResult(I iface, queryForeclosureCapIngDetailsTotal_args args) throws org.apache.thrift.TException {
        queryForeclosureCapIngDetailsTotal_result result = new queryForeclosureCapIngDetailsTotal_result();
        result.success = iface.queryForeclosureCapIngDetailsTotal(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureOrgNewDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureOrgNewDetails_args> {
      public queryForeclosureOrgNewDetails() {
        super("queryForeclosureOrgNewDetails");
      }

      public queryForeclosureOrgNewDetails_args getEmptyArgsInstance() {
        return new queryForeclosureOrgNewDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureOrgNewDetails_result getResult(I iface, queryForeclosureOrgNewDetails_args args) throws org.apache.thrift.TException {
        queryForeclosureOrgNewDetails_result result = new queryForeclosureOrgNewDetails_result();
        result.success = iface.queryForeclosureOrgNewDetails(args.query);
        return result;
      }
    }

    public static class queryForeclosureOrgNewDetailsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureOrgNewDetailsTotal_args> {
      public queryForeclosureOrgNewDetailsTotal() {
        super("queryForeclosureOrgNewDetailsTotal");
      }

      public queryForeclosureOrgNewDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureOrgNewDetailsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureOrgNewDetailsTotal_result getResult(I iface, queryForeclosureOrgNewDetailsTotal_args args) throws org.apache.thrift.TException {
        queryForeclosureOrgNewDetailsTotal_result result = new queryForeclosureOrgNewDetailsTotal_result();
        result.success = iface.queryForeclosureOrgNewDetailsTotal(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureOrgSquareDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureOrgSquareDetails_args> {
      public queryForeclosureOrgSquareDetails() {
        super("queryForeclosureOrgSquareDetails");
      }

      public queryForeclosureOrgSquareDetails_args getEmptyArgsInstance() {
        return new queryForeclosureOrgSquareDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureOrgSquareDetails_result getResult(I iface, queryForeclosureOrgSquareDetails_args args) throws org.apache.thrift.TException {
        queryForeclosureOrgSquareDetails_result result = new queryForeclosureOrgSquareDetails_result();
        result.success = iface.queryForeclosureOrgSquareDetails(args.query);
        return result;
      }
    }

    public static class queryForeclosureOrgSquareDetailsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureOrgSquareDetailsTotal_args> {
      public queryForeclosureOrgSquareDetailsTotal() {
        super("queryForeclosureOrgSquareDetailsTotal");
      }

      public queryForeclosureOrgSquareDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureOrgSquareDetailsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureOrgSquareDetailsTotal_result getResult(I iface, queryForeclosureOrgSquareDetailsTotal_args args) throws org.apache.thrift.TException {
        queryForeclosureOrgSquareDetailsTotal_result result = new queryForeclosureOrgSquareDetailsTotal_result();
        result.success = iface.queryForeclosureOrgSquareDetailsTotal(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureOrgIngDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureOrgIngDetails_args> {
      public queryForeclosureOrgIngDetails() {
        super("queryForeclosureOrgIngDetails");
      }

      public queryForeclosureOrgIngDetails_args getEmptyArgsInstance() {
        return new queryForeclosureOrgIngDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureOrgIngDetails_result getResult(I iface, queryForeclosureOrgIngDetails_args args) throws org.apache.thrift.TException {
        queryForeclosureOrgIngDetails_result result = new queryForeclosureOrgIngDetails_result();
        result.success = iface.queryForeclosureOrgIngDetails(args.query);
        return result;
      }
    }

    public static class queryForeclosureOrgIngDetailsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureOrgIngDetailsTotal_args> {
      public queryForeclosureOrgIngDetailsTotal() {
        super("queryForeclosureOrgIngDetailsTotal");
      }

      public queryForeclosureOrgIngDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureOrgIngDetailsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureOrgIngDetailsTotal_result getResult(I iface, queryForeclosureOrgIngDetailsTotal_args args) throws org.apache.thrift.TException {
        queryForeclosureOrgIngDetailsTotal_result result = new queryForeclosureOrgIngDetailsTotal_result();
        result.success = iface.queryForeclosureOrgIngDetailsTotal(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryForeclosureCapNewDetails", new queryForeclosureCapNewDetails());
      processMap.put("queryForeclosureCapNewDetailsTotal", new queryForeclosureCapNewDetailsTotal());
      processMap.put("queryForeclosureCapSquareDetails", new queryForeclosureCapSquareDetails());
      processMap.put("queryForeclosureCapSquareDetailsTotal", new queryForeclosureCapSquareDetailsTotal());
      processMap.put("queryForeclosureCapIngDetails", new queryForeclosureCapIngDetails());
      processMap.put("queryForeclosureCapIngDetailsTotal", new queryForeclosureCapIngDetailsTotal());
      processMap.put("queryForeclosureOrgNewDetails", new queryForeclosureOrgNewDetails());
      processMap.put("queryForeclosureOrgNewDetailsTotal", new queryForeclosureOrgNewDetailsTotal());
      processMap.put("queryForeclosureOrgSquareDetails", new queryForeclosureOrgSquareDetails());
      processMap.put("queryForeclosureOrgSquareDetailsTotal", new queryForeclosureOrgSquareDetailsTotal());
      processMap.put("queryForeclosureOrgIngDetails", new queryForeclosureOrgIngDetails());
      processMap.put("queryForeclosureOrgIngDetailsTotal", new queryForeclosureOrgIngDetailsTotal());
      return processMap;
    }

    public static class queryForeclosureCapNewDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureCapNewDetails_args, List<ForeclosureCapDetailsReport>> {
      public queryForeclosureCapNewDetails() {
        super("queryForeclosureCapNewDetails");
      }

      public queryForeclosureCapNewDetails_args getEmptyArgsInstance() {
        return new queryForeclosureCapNewDetails_args();
      }

      public AsyncMethodCallback<List<ForeclosureCapDetailsReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureCapDetailsReport>>() { 
          public void onComplete(List<ForeclosureCapDetailsReport> o) {
            queryForeclosureCapNewDetails_result result = new queryForeclosureCapNewDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureCapNewDetails_result result = new queryForeclosureCapNewDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureCapNewDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureCapDetailsReport>> resultHandler) throws TException {
        iface.queryForeclosureCapNewDetails(args.query,resultHandler);
      }
    }

    public static class queryForeclosureCapNewDetailsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureCapNewDetailsTotal_args, Integer> {
      public queryForeclosureCapNewDetailsTotal() {
        super("queryForeclosureCapNewDetailsTotal");
      }

      public queryForeclosureCapNewDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureCapNewDetailsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryForeclosureCapNewDetailsTotal_result result = new queryForeclosureCapNewDetailsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureCapNewDetailsTotal_result result = new queryForeclosureCapNewDetailsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureCapNewDetailsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryForeclosureCapNewDetailsTotal(args.query,resultHandler);
      }
    }

    public static class queryForeclosureCapSquareDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureCapSquareDetails_args, List<ForeclosureCapDetailsReport>> {
      public queryForeclosureCapSquareDetails() {
        super("queryForeclosureCapSquareDetails");
      }

      public queryForeclosureCapSquareDetails_args getEmptyArgsInstance() {
        return new queryForeclosureCapSquareDetails_args();
      }

      public AsyncMethodCallback<List<ForeclosureCapDetailsReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureCapDetailsReport>>() { 
          public void onComplete(List<ForeclosureCapDetailsReport> o) {
            queryForeclosureCapSquareDetails_result result = new queryForeclosureCapSquareDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureCapSquareDetails_result result = new queryForeclosureCapSquareDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureCapSquareDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureCapDetailsReport>> resultHandler) throws TException {
        iface.queryForeclosureCapSquareDetails(args.query,resultHandler);
      }
    }

    public static class queryForeclosureCapSquareDetailsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureCapSquareDetailsTotal_args, Integer> {
      public queryForeclosureCapSquareDetailsTotal() {
        super("queryForeclosureCapSquareDetailsTotal");
      }

      public queryForeclosureCapSquareDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureCapSquareDetailsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryForeclosureCapSquareDetailsTotal_result result = new queryForeclosureCapSquareDetailsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureCapSquareDetailsTotal_result result = new queryForeclosureCapSquareDetailsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureCapSquareDetailsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryForeclosureCapSquareDetailsTotal(args.query,resultHandler);
      }
    }

    public static class queryForeclosureCapIngDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureCapIngDetails_args, List<ForeclosureCapDetailsReport>> {
      public queryForeclosureCapIngDetails() {
        super("queryForeclosureCapIngDetails");
      }

      public queryForeclosureCapIngDetails_args getEmptyArgsInstance() {
        return new queryForeclosureCapIngDetails_args();
      }

      public AsyncMethodCallback<List<ForeclosureCapDetailsReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureCapDetailsReport>>() { 
          public void onComplete(List<ForeclosureCapDetailsReport> o) {
            queryForeclosureCapIngDetails_result result = new queryForeclosureCapIngDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureCapIngDetails_result result = new queryForeclosureCapIngDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureCapIngDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureCapDetailsReport>> resultHandler) throws TException {
        iface.queryForeclosureCapIngDetails(args.query,resultHandler);
      }
    }

    public static class queryForeclosureCapIngDetailsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureCapIngDetailsTotal_args, Integer> {
      public queryForeclosureCapIngDetailsTotal() {
        super("queryForeclosureCapIngDetailsTotal");
      }

      public queryForeclosureCapIngDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureCapIngDetailsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryForeclosureCapIngDetailsTotal_result result = new queryForeclosureCapIngDetailsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureCapIngDetailsTotal_result result = new queryForeclosureCapIngDetailsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureCapIngDetailsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryForeclosureCapIngDetailsTotal(args.query,resultHandler);
      }
    }

    public static class queryForeclosureOrgNewDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureOrgNewDetails_args, List<ForeclosureOrgDetailsReport>> {
      public queryForeclosureOrgNewDetails() {
        super("queryForeclosureOrgNewDetails");
      }

      public queryForeclosureOrgNewDetails_args getEmptyArgsInstance() {
        return new queryForeclosureOrgNewDetails_args();
      }

      public AsyncMethodCallback<List<ForeclosureOrgDetailsReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureOrgDetailsReport>>() { 
          public void onComplete(List<ForeclosureOrgDetailsReport> o) {
            queryForeclosureOrgNewDetails_result result = new queryForeclosureOrgNewDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureOrgNewDetails_result result = new queryForeclosureOrgNewDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureOrgNewDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureOrgDetailsReport>> resultHandler) throws TException {
        iface.queryForeclosureOrgNewDetails(args.query,resultHandler);
      }
    }

    public static class queryForeclosureOrgNewDetailsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureOrgNewDetailsTotal_args, Integer> {
      public queryForeclosureOrgNewDetailsTotal() {
        super("queryForeclosureOrgNewDetailsTotal");
      }

      public queryForeclosureOrgNewDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureOrgNewDetailsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryForeclosureOrgNewDetailsTotal_result result = new queryForeclosureOrgNewDetailsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureOrgNewDetailsTotal_result result = new queryForeclosureOrgNewDetailsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureOrgNewDetailsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryForeclosureOrgNewDetailsTotal(args.query,resultHandler);
      }
    }

    public static class queryForeclosureOrgSquareDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureOrgSquareDetails_args, List<ForeclosureOrgDetailsReport>> {
      public queryForeclosureOrgSquareDetails() {
        super("queryForeclosureOrgSquareDetails");
      }

      public queryForeclosureOrgSquareDetails_args getEmptyArgsInstance() {
        return new queryForeclosureOrgSquareDetails_args();
      }

      public AsyncMethodCallback<List<ForeclosureOrgDetailsReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureOrgDetailsReport>>() { 
          public void onComplete(List<ForeclosureOrgDetailsReport> o) {
            queryForeclosureOrgSquareDetails_result result = new queryForeclosureOrgSquareDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureOrgSquareDetails_result result = new queryForeclosureOrgSquareDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureOrgSquareDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureOrgDetailsReport>> resultHandler) throws TException {
        iface.queryForeclosureOrgSquareDetails(args.query,resultHandler);
      }
    }

    public static class queryForeclosureOrgSquareDetailsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureOrgSquareDetailsTotal_args, Integer> {
      public queryForeclosureOrgSquareDetailsTotal() {
        super("queryForeclosureOrgSquareDetailsTotal");
      }

      public queryForeclosureOrgSquareDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureOrgSquareDetailsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryForeclosureOrgSquareDetailsTotal_result result = new queryForeclosureOrgSquareDetailsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureOrgSquareDetailsTotal_result result = new queryForeclosureOrgSquareDetailsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureOrgSquareDetailsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryForeclosureOrgSquareDetailsTotal(args.query,resultHandler);
      }
    }

    public static class queryForeclosureOrgIngDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureOrgIngDetails_args, List<ForeclosureOrgDetailsReport>> {
      public queryForeclosureOrgIngDetails() {
        super("queryForeclosureOrgIngDetails");
      }

      public queryForeclosureOrgIngDetails_args getEmptyArgsInstance() {
        return new queryForeclosureOrgIngDetails_args();
      }

      public AsyncMethodCallback<List<ForeclosureOrgDetailsReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureOrgDetailsReport>>() { 
          public void onComplete(List<ForeclosureOrgDetailsReport> o) {
            queryForeclosureOrgIngDetails_result result = new queryForeclosureOrgIngDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureOrgIngDetails_result result = new queryForeclosureOrgIngDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureOrgIngDetails_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureOrgDetailsReport>> resultHandler) throws TException {
        iface.queryForeclosureOrgIngDetails(args.query,resultHandler);
      }
    }

    public static class queryForeclosureOrgIngDetailsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureOrgIngDetailsTotal_args, Integer> {
      public queryForeclosureOrgIngDetailsTotal() {
        super("queryForeclosureOrgIngDetailsTotal");
      }

      public queryForeclosureOrgIngDetailsTotal_args getEmptyArgsInstance() {
        return new queryForeclosureOrgIngDetailsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryForeclosureOrgIngDetailsTotal_result result = new queryForeclosureOrgIngDetailsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureOrgIngDetailsTotal_result result = new queryForeclosureOrgIngDetailsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureOrgIngDetailsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryForeclosureOrgIngDetailsTotal(args.query,resultHandler);
      }
    }

  }

  public static class queryForeclosureCapNewDetails_args implements org.apache.thrift.TBase<queryForeclosureCapNewDetails_args, queryForeclosureCapNewDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapNewDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapNewDetails_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapNewDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapNewDetails_argsTupleSchemeFactory());
    }

    public ForeclosureCapDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapNewDetails_args.class, metaDataMap);
    }

    public queryForeclosureCapNewDetails_args() {
    }

    public queryForeclosureCapNewDetails_args(
      ForeclosureCapDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapNewDetails_args(queryForeclosureCapNewDetails_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureCapDetailsReport(other.query);
      }
    }

    public queryForeclosureCapNewDetails_args deepCopy() {
      return new queryForeclosureCapNewDetails_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureCapDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureCapNewDetails_args setQuery(ForeclosureCapDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureCapDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapNewDetails_args)
        return this.equals((queryForeclosureCapNewDetails_args)that);
      return false;
    }

    public boolean equals(queryForeclosureCapNewDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapNewDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapNewDetails_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapNewDetails_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetails_argsStandardScheme getScheme() {
        return new queryForeclosureCapNewDetails_argsStandardScheme();
      }
    }

    private static class queryForeclosureCapNewDetails_argsStandardScheme extends StandardScheme<queryForeclosureCapNewDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapNewDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureCapDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapNewDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapNewDetails_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetails_argsTupleScheme getScheme() {
        return new queryForeclosureCapNewDetails_argsTupleScheme();
      }
    }

    private static class queryForeclosureCapNewDetails_argsTupleScheme extends TupleScheme<queryForeclosureCapNewDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureCapDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapNewDetails_result implements org.apache.thrift.TBase<queryForeclosureCapNewDetails_result, queryForeclosureCapNewDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapNewDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapNewDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapNewDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapNewDetails_resultTupleSchemeFactory());
    }

    public List<ForeclosureCapDetailsReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapNewDetails_result.class, metaDataMap);
    }

    public queryForeclosureCapNewDetails_result() {
    }

    public queryForeclosureCapNewDetails_result(
      List<ForeclosureCapDetailsReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapNewDetails_result(queryForeclosureCapNewDetails_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureCapDetailsReport> __this__success = new ArrayList<ForeclosureCapDetailsReport>(other.success.size());
        for (ForeclosureCapDetailsReport other_element : other.success) {
          __this__success.add(new ForeclosureCapDetailsReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureCapNewDetails_result deepCopy() {
      return new queryForeclosureCapNewDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureCapDetailsReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureCapDetailsReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureCapDetailsReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureCapDetailsReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureCapNewDetails_result setSuccess(List<ForeclosureCapDetailsReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureCapDetailsReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapNewDetails_result)
        return this.equals((queryForeclosureCapNewDetails_result)that);
      return false;
    }

    public boolean equals(queryForeclosureCapNewDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapNewDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapNewDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapNewDetails_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetails_resultStandardScheme getScheme() {
        return new queryForeclosureCapNewDetails_resultStandardScheme();
      }
    }

    private static class queryForeclosureCapNewDetails_resultStandardScheme extends StandardScheme<queryForeclosureCapNewDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapNewDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureCapDetailsReport>(_list16.size);
                  ForeclosureCapDetailsReport _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new ForeclosureCapDetailsReport();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapNewDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureCapDetailsReport _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapNewDetails_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetails_resultTupleScheme getScheme() {
        return new queryForeclosureCapNewDetails_resultTupleScheme();
      }
    }

    private static class queryForeclosureCapNewDetails_resultTupleScheme extends TupleScheme<queryForeclosureCapNewDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureCapDetailsReport _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureCapDetailsReport>(_list21.size);
            ForeclosureCapDetailsReport _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new ForeclosureCapDetailsReport();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapNewDetailsTotal_args implements org.apache.thrift.TBase<queryForeclosureCapNewDetailsTotal_args, queryForeclosureCapNewDetailsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapNewDetailsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapNewDetailsTotal_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapNewDetailsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapNewDetailsTotal_argsTupleSchemeFactory());
    }

    public ForeclosureCapDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapNewDetailsTotal_args.class, metaDataMap);
    }

    public queryForeclosureCapNewDetailsTotal_args() {
    }

    public queryForeclosureCapNewDetailsTotal_args(
      ForeclosureCapDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapNewDetailsTotal_args(queryForeclosureCapNewDetailsTotal_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureCapDetailsReport(other.query);
      }
    }

    public queryForeclosureCapNewDetailsTotal_args deepCopy() {
      return new queryForeclosureCapNewDetailsTotal_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureCapDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureCapNewDetailsTotal_args setQuery(ForeclosureCapDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureCapDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapNewDetailsTotal_args)
        return this.equals((queryForeclosureCapNewDetailsTotal_args)that);
      return false;
    }

    public boolean equals(queryForeclosureCapNewDetailsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapNewDetailsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapNewDetailsTotal_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapNewDetailsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetailsTotal_argsStandardScheme getScheme() {
        return new queryForeclosureCapNewDetailsTotal_argsStandardScheme();
      }
    }

    private static class queryForeclosureCapNewDetailsTotal_argsStandardScheme extends StandardScheme<queryForeclosureCapNewDetailsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureCapDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapNewDetailsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetailsTotal_argsTupleScheme getScheme() {
        return new queryForeclosureCapNewDetailsTotal_argsTupleScheme();
      }
    }

    private static class queryForeclosureCapNewDetailsTotal_argsTupleScheme extends TupleScheme<queryForeclosureCapNewDetailsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureCapDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapNewDetailsTotal_result implements org.apache.thrift.TBase<queryForeclosureCapNewDetailsTotal_result, queryForeclosureCapNewDetailsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapNewDetailsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapNewDetailsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapNewDetailsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapNewDetailsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapNewDetailsTotal_result.class, metaDataMap);
    }

    public queryForeclosureCapNewDetailsTotal_result() {
    }

    public queryForeclosureCapNewDetailsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapNewDetailsTotal_result(queryForeclosureCapNewDetailsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryForeclosureCapNewDetailsTotal_result deepCopy() {
      return new queryForeclosureCapNewDetailsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryForeclosureCapNewDetailsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapNewDetailsTotal_result)
        return this.equals((queryForeclosureCapNewDetailsTotal_result)that);
      return false;
    }

    public boolean equals(queryForeclosureCapNewDetailsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapNewDetailsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapNewDetailsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapNewDetailsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetailsTotal_resultStandardScheme getScheme() {
        return new queryForeclosureCapNewDetailsTotal_resultStandardScheme();
      }
    }

    private static class queryForeclosureCapNewDetailsTotal_resultStandardScheme extends StandardScheme<queryForeclosureCapNewDetailsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapNewDetailsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapNewDetailsTotal_resultTupleScheme getScheme() {
        return new queryForeclosureCapNewDetailsTotal_resultTupleScheme();
      }
    }

    private static class queryForeclosureCapNewDetailsTotal_resultTupleScheme extends TupleScheme<queryForeclosureCapNewDetailsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapSquareDetails_args implements org.apache.thrift.TBase<queryForeclosureCapSquareDetails_args, queryForeclosureCapSquareDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapSquareDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapSquareDetails_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapSquareDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapSquareDetails_argsTupleSchemeFactory());
    }

    public ForeclosureCapDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapSquareDetails_args.class, metaDataMap);
    }

    public queryForeclosureCapSquareDetails_args() {
    }

    public queryForeclosureCapSquareDetails_args(
      ForeclosureCapDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapSquareDetails_args(queryForeclosureCapSquareDetails_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureCapDetailsReport(other.query);
      }
    }

    public queryForeclosureCapSquareDetails_args deepCopy() {
      return new queryForeclosureCapSquareDetails_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureCapDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureCapSquareDetails_args setQuery(ForeclosureCapDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureCapDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapSquareDetails_args)
        return this.equals((queryForeclosureCapSquareDetails_args)that);
      return false;
    }

    public boolean equals(queryForeclosureCapSquareDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapSquareDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapSquareDetails_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapSquareDetails_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetails_argsStandardScheme getScheme() {
        return new queryForeclosureCapSquareDetails_argsStandardScheme();
      }
    }

    private static class queryForeclosureCapSquareDetails_argsStandardScheme extends StandardScheme<queryForeclosureCapSquareDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapSquareDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureCapDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapSquareDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapSquareDetails_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetails_argsTupleScheme getScheme() {
        return new queryForeclosureCapSquareDetails_argsTupleScheme();
      }
    }

    private static class queryForeclosureCapSquareDetails_argsTupleScheme extends TupleScheme<queryForeclosureCapSquareDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureCapDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapSquareDetails_result implements org.apache.thrift.TBase<queryForeclosureCapSquareDetails_result, queryForeclosureCapSquareDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapSquareDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapSquareDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapSquareDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapSquareDetails_resultTupleSchemeFactory());
    }

    public List<ForeclosureCapDetailsReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapSquareDetails_result.class, metaDataMap);
    }

    public queryForeclosureCapSquareDetails_result() {
    }

    public queryForeclosureCapSquareDetails_result(
      List<ForeclosureCapDetailsReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapSquareDetails_result(queryForeclosureCapSquareDetails_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureCapDetailsReport> __this__success = new ArrayList<ForeclosureCapDetailsReport>(other.success.size());
        for (ForeclosureCapDetailsReport other_element : other.success) {
          __this__success.add(new ForeclosureCapDetailsReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureCapSquareDetails_result deepCopy() {
      return new queryForeclosureCapSquareDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureCapDetailsReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureCapDetailsReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureCapDetailsReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureCapDetailsReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureCapSquareDetails_result setSuccess(List<ForeclosureCapDetailsReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureCapDetailsReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapSquareDetails_result)
        return this.equals((queryForeclosureCapSquareDetails_result)that);
      return false;
    }

    public boolean equals(queryForeclosureCapSquareDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapSquareDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapSquareDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapSquareDetails_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetails_resultStandardScheme getScheme() {
        return new queryForeclosureCapSquareDetails_resultStandardScheme();
      }
    }

    private static class queryForeclosureCapSquareDetails_resultStandardScheme extends StandardScheme<queryForeclosureCapSquareDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapSquareDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureCapDetailsReport>(_list24.size);
                  ForeclosureCapDetailsReport _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new ForeclosureCapDetailsReport();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapSquareDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureCapDetailsReport _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapSquareDetails_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetails_resultTupleScheme getScheme() {
        return new queryForeclosureCapSquareDetails_resultTupleScheme();
      }
    }

    private static class queryForeclosureCapSquareDetails_resultTupleScheme extends TupleScheme<queryForeclosureCapSquareDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureCapDetailsReport _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureCapDetailsReport>(_list29.size);
            ForeclosureCapDetailsReport _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new ForeclosureCapDetailsReport();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapSquareDetailsTotal_args implements org.apache.thrift.TBase<queryForeclosureCapSquareDetailsTotal_args, queryForeclosureCapSquareDetailsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapSquareDetailsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapSquareDetailsTotal_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapSquareDetailsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapSquareDetailsTotal_argsTupleSchemeFactory());
    }

    public ForeclosureCapDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapSquareDetailsTotal_args.class, metaDataMap);
    }

    public queryForeclosureCapSquareDetailsTotal_args() {
    }

    public queryForeclosureCapSquareDetailsTotal_args(
      ForeclosureCapDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapSquareDetailsTotal_args(queryForeclosureCapSquareDetailsTotal_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureCapDetailsReport(other.query);
      }
    }

    public queryForeclosureCapSquareDetailsTotal_args deepCopy() {
      return new queryForeclosureCapSquareDetailsTotal_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureCapDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureCapSquareDetailsTotal_args setQuery(ForeclosureCapDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureCapDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapSquareDetailsTotal_args)
        return this.equals((queryForeclosureCapSquareDetailsTotal_args)that);
      return false;
    }

    public boolean equals(queryForeclosureCapSquareDetailsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapSquareDetailsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapSquareDetailsTotal_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapSquareDetailsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetailsTotal_argsStandardScheme getScheme() {
        return new queryForeclosureCapSquareDetailsTotal_argsStandardScheme();
      }
    }

    private static class queryForeclosureCapSquareDetailsTotal_argsStandardScheme extends StandardScheme<queryForeclosureCapSquareDetailsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureCapDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapSquareDetailsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetailsTotal_argsTupleScheme getScheme() {
        return new queryForeclosureCapSquareDetailsTotal_argsTupleScheme();
      }
    }

    private static class queryForeclosureCapSquareDetailsTotal_argsTupleScheme extends TupleScheme<queryForeclosureCapSquareDetailsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureCapDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapSquareDetailsTotal_result implements org.apache.thrift.TBase<queryForeclosureCapSquareDetailsTotal_result, queryForeclosureCapSquareDetailsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapSquareDetailsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapSquareDetailsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapSquareDetailsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapSquareDetailsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapSquareDetailsTotal_result.class, metaDataMap);
    }

    public queryForeclosureCapSquareDetailsTotal_result() {
    }

    public queryForeclosureCapSquareDetailsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapSquareDetailsTotal_result(queryForeclosureCapSquareDetailsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryForeclosureCapSquareDetailsTotal_result deepCopy() {
      return new queryForeclosureCapSquareDetailsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryForeclosureCapSquareDetailsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapSquareDetailsTotal_result)
        return this.equals((queryForeclosureCapSquareDetailsTotal_result)that);
      return false;
    }

    public boolean equals(queryForeclosureCapSquareDetailsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapSquareDetailsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapSquareDetailsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapSquareDetailsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetailsTotal_resultStandardScheme getScheme() {
        return new queryForeclosureCapSquareDetailsTotal_resultStandardScheme();
      }
    }

    private static class queryForeclosureCapSquareDetailsTotal_resultStandardScheme extends StandardScheme<queryForeclosureCapSquareDetailsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapSquareDetailsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapSquareDetailsTotal_resultTupleScheme getScheme() {
        return new queryForeclosureCapSquareDetailsTotal_resultTupleScheme();
      }
    }

    private static class queryForeclosureCapSquareDetailsTotal_resultTupleScheme extends TupleScheme<queryForeclosureCapSquareDetailsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapIngDetails_args implements org.apache.thrift.TBase<queryForeclosureCapIngDetails_args, queryForeclosureCapIngDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapIngDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapIngDetails_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapIngDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapIngDetails_argsTupleSchemeFactory());
    }

    public ForeclosureCapDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapIngDetails_args.class, metaDataMap);
    }

    public queryForeclosureCapIngDetails_args() {
    }

    public queryForeclosureCapIngDetails_args(
      ForeclosureCapDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapIngDetails_args(queryForeclosureCapIngDetails_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureCapDetailsReport(other.query);
      }
    }

    public queryForeclosureCapIngDetails_args deepCopy() {
      return new queryForeclosureCapIngDetails_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureCapDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureCapIngDetails_args setQuery(ForeclosureCapDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureCapDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapIngDetails_args)
        return this.equals((queryForeclosureCapIngDetails_args)that);
      return false;
    }

    public boolean equals(queryForeclosureCapIngDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapIngDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapIngDetails_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapIngDetails_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetails_argsStandardScheme getScheme() {
        return new queryForeclosureCapIngDetails_argsStandardScheme();
      }
    }

    private static class queryForeclosureCapIngDetails_argsStandardScheme extends StandardScheme<queryForeclosureCapIngDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapIngDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureCapDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapIngDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapIngDetails_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetails_argsTupleScheme getScheme() {
        return new queryForeclosureCapIngDetails_argsTupleScheme();
      }
    }

    private static class queryForeclosureCapIngDetails_argsTupleScheme extends TupleScheme<queryForeclosureCapIngDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureCapDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapIngDetails_result implements org.apache.thrift.TBase<queryForeclosureCapIngDetails_result, queryForeclosureCapIngDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapIngDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapIngDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapIngDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapIngDetails_resultTupleSchemeFactory());
    }

    public List<ForeclosureCapDetailsReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapIngDetails_result.class, metaDataMap);
    }

    public queryForeclosureCapIngDetails_result() {
    }

    public queryForeclosureCapIngDetails_result(
      List<ForeclosureCapDetailsReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapIngDetails_result(queryForeclosureCapIngDetails_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureCapDetailsReport> __this__success = new ArrayList<ForeclosureCapDetailsReport>(other.success.size());
        for (ForeclosureCapDetailsReport other_element : other.success) {
          __this__success.add(new ForeclosureCapDetailsReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureCapIngDetails_result deepCopy() {
      return new queryForeclosureCapIngDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureCapDetailsReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureCapDetailsReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureCapDetailsReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureCapDetailsReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureCapIngDetails_result setSuccess(List<ForeclosureCapDetailsReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureCapDetailsReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapIngDetails_result)
        return this.equals((queryForeclosureCapIngDetails_result)that);
      return false;
    }

    public boolean equals(queryForeclosureCapIngDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapIngDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapIngDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapIngDetails_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetails_resultStandardScheme getScheme() {
        return new queryForeclosureCapIngDetails_resultStandardScheme();
      }
    }

    private static class queryForeclosureCapIngDetails_resultStandardScheme extends StandardScheme<queryForeclosureCapIngDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapIngDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureCapDetailsReport>(_list32.size);
                  ForeclosureCapDetailsReport _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new ForeclosureCapDetailsReport();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapIngDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureCapDetailsReport _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapIngDetails_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetails_resultTupleScheme getScheme() {
        return new queryForeclosureCapIngDetails_resultTupleScheme();
      }
    }

    private static class queryForeclosureCapIngDetails_resultTupleScheme extends TupleScheme<queryForeclosureCapIngDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureCapDetailsReport _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureCapDetailsReport>(_list37.size);
            ForeclosureCapDetailsReport _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new ForeclosureCapDetailsReport();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapIngDetailsTotal_args implements org.apache.thrift.TBase<queryForeclosureCapIngDetailsTotal_args, queryForeclosureCapIngDetailsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapIngDetailsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapIngDetailsTotal_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapIngDetailsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapIngDetailsTotal_argsTupleSchemeFactory());
    }

    public ForeclosureCapDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapIngDetailsTotal_args.class, metaDataMap);
    }

    public queryForeclosureCapIngDetailsTotal_args() {
    }

    public queryForeclosureCapIngDetailsTotal_args(
      ForeclosureCapDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapIngDetailsTotal_args(queryForeclosureCapIngDetailsTotal_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureCapDetailsReport(other.query);
      }
    }

    public queryForeclosureCapIngDetailsTotal_args deepCopy() {
      return new queryForeclosureCapIngDetailsTotal_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureCapDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureCapIngDetailsTotal_args setQuery(ForeclosureCapDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureCapDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapIngDetailsTotal_args)
        return this.equals((queryForeclosureCapIngDetailsTotal_args)that);
      return false;
    }

    public boolean equals(queryForeclosureCapIngDetailsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapIngDetailsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapIngDetailsTotal_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapIngDetailsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetailsTotal_argsStandardScheme getScheme() {
        return new queryForeclosureCapIngDetailsTotal_argsStandardScheme();
      }
    }

    private static class queryForeclosureCapIngDetailsTotal_argsStandardScheme extends StandardScheme<queryForeclosureCapIngDetailsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureCapDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapIngDetailsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetailsTotal_argsTupleScheme getScheme() {
        return new queryForeclosureCapIngDetailsTotal_argsTupleScheme();
      }
    }

    private static class queryForeclosureCapIngDetailsTotal_argsTupleScheme extends TupleScheme<queryForeclosureCapIngDetailsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureCapDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapIngDetailsTotal_result implements org.apache.thrift.TBase<queryForeclosureCapIngDetailsTotal_result, queryForeclosureCapIngDetailsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapIngDetailsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapIngDetailsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapIngDetailsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapIngDetailsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapIngDetailsTotal_result.class, metaDataMap);
    }

    public queryForeclosureCapIngDetailsTotal_result() {
    }

    public queryForeclosureCapIngDetailsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapIngDetailsTotal_result(queryForeclosureCapIngDetailsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryForeclosureCapIngDetailsTotal_result deepCopy() {
      return new queryForeclosureCapIngDetailsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryForeclosureCapIngDetailsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapIngDetailsTotal_result)
        return this.equals((queryForeclosureCapIngDetailsTotal_result)that);
      return false;
    }

    public boolean equals(queryForeclosureCapIngDetailsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapIngDetailsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapIngDetailsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapIngDetailsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetailsTotal_resultStandardScheme getScheme() {
        return new queryForeclosureCapIngDetailsTotal_resultStandardScheme();
      }
    }

    private static class queryForeclosureCapIngDetailsTotal_resultStandardScheme extends StandardScheme<queryForeclosureCapIngDetailsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapIngDetailsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapIngDetailsTotal_resultTupleScheme getScheme() {
        return new queryForeclosureCapIngDetailsTotal_resultTupleScheme();
      }
    }

    private static class queryForeclosureCapIngDetailsTotal_resultTupleScheme extends TupleScheme<queryForeclosureCapIngDetailsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgNewDetails_args implements org.apache.thrift.TBase<queryForeclosureOrgNewDetails_args, queryForeclosureOrgNewDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgNewDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgNewDetails_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgNewDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgNewDetails_argsTupleSchemeFactory());
    }

    public ForeclosureOrgDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgNewDetails_args.class, metaDataMap);
    }

    public queryForeclosureOrgNewDetails_args() {
    }

    public queryForeclosureOrgNewDetails_args(
      ForeclosureOrgDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgNewDetails_args(queryForeclosureOrgNewDetails_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureOrgDetailsReport(other.query);
      }
    }

    public queryForeclosureOrgNewDetails_args deepCopy() {
      return new queryForeclosureOrgNewDetails_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureOrgDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureOrgNewDetails_args setQuery(ForeclosureOrgDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureOrgDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgNewDetails_args)
        return this.equals((queryForeclosureOrgNewDetails_args)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgNewDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgNewDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgNewDetails_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgNewDetails_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetails_argsStandardScheme getScheme() {
        return new queryForeclosureOrgNewDetails_argsStandardScheme();
      }
    }

    private static class queryForeclosureOrgNewDetails_argsStandardScheme extends StandardScheme<queryForeclosureOrgNewDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgNewDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureOrgDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgNewDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgNewDetails_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetails_argsTupleScheme getScheme() {
        return new queryForeclosureOrgNewDetails_argsTupleScheme();
      }
    }

    private static class queryForeclosureOrgNewDetails_argsTupleScheme extends TupleScheme<queryForeclosureOrgNewDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureOrgDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgNewDetails_result implements org.apache.thrift.TBase<queryForeclosureOrgNewDetails_result, queryForeclosureOrgNewDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgNewDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgNewDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgNewDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgNewDetails_resultTupleSchemeFactory());
    }

    public List<ForeclosureOrgDetailsReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgNewDetails_result.class, metaDataMap);
    }

    public queryForeclosureOrgNewDetails_result() {
    }

    public queryForeclosureOrgNewDetails_result(
      List<ForeclosureOrgDetailsReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgNewDetails_result(queryForeclosureOrgNewDetails_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureOrgDetailsReport> __this__success = new ArrayList<ForeclosureOrgDetailsReport>(other.success.size());
        for (ForeclosureOrgDetailsReport other_element : other.success) {
          __this__success.add(new ForeclosureOrgDetailsReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureOrgNewDetails_result deepCopy() {
      return new queryForeclosureOrgNewDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureOrgDetailsReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureOrgDetailsReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureOrgDetailsReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureOrgDetailsReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureOrgNewDetails_result setSuccess(List<ForeclosureOrgDetailsReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureOrgDetailsReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgNewDetails_result)
        return this.equals((queryForeclosureOrgNewDetails_result)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgNewDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgNewDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgNewDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgNewDetails_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetails_resultStandardScheme getScheme() {
        return new queryForeclosureOrgNewDetails_resultStandardScheme();
      }
    }

    private static class queryForeclosureOrgNewDetails_resultStandardScheme extends StandardScheme<queryForeclosureOrgNewDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgNewDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureOrgDetailsReport>(_list40.size);
                  ForeclosureOrgDetailsReport _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new ForeclosureOrgDetailsReport();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgNewDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureOrgDetailsReport _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgNewDetails_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetails_resultTupleScheme getScheme() {
        return new queryForeclosureOrgNewDetails_resultTupleScheme();
      }
    }

    private static class queryForeclosureOrgNewDetails_resultTupleScheme extends TupleScheme<queryForeclosureOrgNewDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureOrgDetailsReport _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureOrgDetailsReport>(_list45.size);
            ForeclosureOrgDetailsReport _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new ForeclosureOrgDetailsReport();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgNewDetailsTotal_args implements org.apache.thrift.TBase<queryForeclosureOrgNewDetailsTotal_args, queryForeclosureOrgNewDetailsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgNewDetailsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgNewDetailsTotal_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgNewDetailsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgNewDetailsTotal_argsTupleSchemeFactory());
    }

    public ForeclosureOrgDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgNewDetailsTotal_args.class, metaDataMap);
    }

    public queryForeclosureOrgNewDetailsTotal_args() {
    }

    public queryForeclosureOrgNewDetailsTotal_args(
      ForeclosureOrgDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgNewDetailsTotal_args(queryForeclosureOrgNewDetailsTotal_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureOrgDetailsReport(other.query);
      }
    }

    public queryForeclosureOrgNewDetailsTotal_args deepCopy() {
      return new queryForeclosureOrgNewDetailsTotal_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureOrgDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureOrgNewDetailsTotal_args setQuery(ForeclosureOrgDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureOrgDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgNewDetailsTotal_args)
        return this.equals((queryForeclosureOrgNewDetailsTotal_args)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgNewDetailsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgNewDetailsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgNewDetailsTotal_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgNewDetailsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetailsTotal_argsStandardScheme getScheme() {
        return new queryForeclosureOrgNewDetailsTotal_argsStandardScheme();
      }
    }

    private static class queryForeclosureOrgNewDetailsTotal_argsStandardScheme extends StandardScheme<queryForeclosureOrgNewDetailsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureOrgDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgNewDetailsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetailsTotal_argsTupleScheme getScheme() {
        return new queryForeclosureOrgNewDetailsTotal_argsTupleScheme();
      }
    }

    private static class queryForeclosureOrgNewDetailsTotal_argsTupleScheme extends TupleScheme<queryForeclosureOrgNewDetailsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureOrgDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgNewDetailsTotal_result implements org.apache.thrift.TBase<queryForeclosureOrgNewDetailsTotal_result, queryForeclosureOrgNewDetailsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgNewDetailsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgNewDetailsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgNewDetailsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgNewDetailsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgNewDetailsTotal_result.class, metaDataMap);
    }

    public queryForeclosureOrgNewDetailsTotal_result() {
    }

    public queryForeclosureOrgNewDetailsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgNewDetailsTotal_result(queryForeclosureOrgNewDetailsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryForeclosureOrgNewDetailsTotal_result deepCopy() {
      return new queryForeclosureOrgNewDetailsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryForeclosureOrgNewDetailsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgNewDetailsTotal_result)
        return this.equals((queryForeclosureOrgNewDetailsTotal_result)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgNewDetailsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgNewDetailsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgNewDetailsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgNewDetailsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetailsTotal_resultStandardScheme getScheme() {
        return new queryForeclosureOrgNewDetailsTotal_resultStandardScheme();
      }
    }

    private static class queryForeclosureOrgNewDetailsTotal_resultStandardScheme extends StandardScheme<queryForeclosureOrgNewDetailsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgNewDetailsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgNewDetailsTotal_resultTupleScheme getScheme() {
        return new queryForeclosureOrgNewDetailsTotal_resultTupleScheme();
      }
    }

    private static class queryForeclosureOrgNewDetailsTotal_resultTupleScheme extends TupleScheme<queryForeclosureOrgNewDetailsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgNewDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgSquareDetails_args implements org.apache.thrift.TBase<queryForeclosureOrgSquareDetails_args, queryForeclosureOrgSquareDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgSquareDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgSquareDetails_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgSquareDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgSquareDetails_argsTupleSchemeFactory());
    }

    public ForeclosureOrgDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgSquareDetails_args.class, metaDataMap);
    }

    public queryForeclosureOrgSquareDetails_args() {
    }

    public queryForeclosureOrgSquareDetails_args(
      ForeclosureOrgDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgSquareDetails_args(queryForeclosureOrgSquareDetails_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureOrgDetailsReport(other.query);
      }
    }

    public queryForeclosureOrgSquareDetails_args deepCopy() {
      return new queryForeclosureOrgSquareDetails_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureOrgDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureOrgSquareDetails_args setQuery(ForeclosureOrgDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureOrgDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgSquareDetails_args)
        return this.equals((queryForeclosureOrgSquareDetails_args)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgSquareDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgSquareDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgSquareDetails_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgSquareDetails_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetails_argsStandardScheme getScheme() {
        return new queryForeclosureOrgSquareDetails_argsStandardScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetails_argsStandardScheme extends StandardScheme<queryForeclosureOrgSquareDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgSquareDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureOrgDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgSquareDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgSquareDetails_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetails_argsTupleScheme getScheme() {
        return new queryForeclosureOrgSquareDetails_argsTupleScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetails_argsTupleScheme extends TupleScheme<queryForeclosureOrgSquareDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureOrgDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgSquareDetails_result implements org.apache.thrift.TBase<queryForeclosureOrgSquareDetails_result, queryForeclosureOrgSquareDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgSquareDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgSquareDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgSquareDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgSquareDetails_resultTupleSchemeFactory());
    }

    public List<ForeclosureOrgDetailsReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgSquareDetails_result.class, metaDataMap);
    }

    public queryForeclosureOrgSquareDetails_result() {
    }

    public queryForeclosureOrgSquareDetails_result(
      List<ForeclosureOrgDetailsReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgSquareDetails_result(queryForeclosureOrgSquareDetails_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureOrgDetailsReport> __this__success = new ArrayList<ForeclosureOrgDetailsReport>(other.success.size());
        for (ForeclosureOrgDetailsReport other_element : other.success) {
          __this__success.add(new ForeclosureOrgDetailsReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureOrgSquareDetails_result deepCopy() {
      return new queryForeclosureOrgSquareDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureOrgDetailsReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureOrgDetailsReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureOrgDetailsReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureOrgDetailsReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureOrgSquareDetails_result setSuccess(List<ForeclosureOrgDetailsReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureOrgDetailsReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgSquareDetails_result)
        return this.equals((queryForeclosureOrgSquareDetails_result)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgSquareDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgSquareDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgSquareDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgSquareDetails_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetails_resultStandardScheme getScheme() {
        return new queryForeclosureOrgSquareDetails_resultStandardScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetails_resultStandardScheme extends StandardScheme<queryForeclosureOrgSquareDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgSquareDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureOrgDetailsReport>(_list48.size);
                  ForeclosureOrgDetailsReport _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new ForeclosureOrgDetailsReport();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgSquareDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureOrgDetailsReport _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgSquareDetails_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetails_resultTupleScheme getScheme() {
        return new queryForeclosureOrgSquareDetails_resultTupleScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetails_resultTupleScheme extends TupleScheme<queryForeclosureOrgSquareDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureOrgDetailsReport _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureOrgDetailsReport>(_list53.size);
            ForeclosureOrgDetailsReport _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new ForeclosureOrgDetailsReport();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgSquareDetailsTotal_args implements org.apache.thrift.TBase<queryForeclosureOrgSquareDetailsTotal_args, queryForeclosureOrgSquareDetailsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgSquareDetailsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgSquareDetailsTotal_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgSquareDetailsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgSquareDetailsTotal_argsTupleSchemeFactory());
    }

    public ForeclosureOrgDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgSquareDetailsTotal_args.class, metaDataMap);
    }

    public queryForeclosureOrgSquareDetailsTotal_args() {
    }

    public queryForeclosureOrgSquareDetailsTotal_args(
      ForeclosureOrgDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgSquareDetailsTotal_args(queryForeclosureOrgSquareDetailsTotal_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureOrgDetailsReport(other.query);
      }
    }

    public queryForeclosureOrgSquareDetailsTotal_args deepCopy() {
      return new queryForeclosureOrgSquareDetailsTotal_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureOrgDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureOrgSquareDetailsTotal_args setQuery(ForeclosureOrgDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureOrgDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgSquareDetailsTotal_args)
        return this.equals((queryForeclosureOrgSquareDetailsTotal_args)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgSquareDetailsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgSquareDetailsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgSquareDetailsTotal_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgSquareDetailsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetailsTotal_argsStandardScheme getScheme() {
        return new queryForeclosureOrgSquareDetailsTotal_argsStandardScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetailsTotal_argsStandardScheme extends StandardScheme<queryForeclosureOrgSquareDetailsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureOrgDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgSquareDetailsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetailsTotal_argsTupleScheme getScheme() {
        return new queryForeclosureOrgSquareDetailsTotal_argsTupleScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetailsTotal_argsTupleScheme extends TupleScheme<queryForeclosureOrgSquareDetailsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureOrgDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgSquareDetailsTotal_result implements org.apache.thrift.TBase<queryForeclosureOrgSquareDetailsTotal_result, queryForeclosureOrgSquareDetailsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgSquareDetailsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgSquareDetailsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgSquareDetailsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgSquareDetailsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgSquareDetailsTotal_result.class, metaDataMap);
    }

    public queryForeclosureOrgSquareDetailsTotal_result() {
    }

    public queryForeclosureOrgSquareDetailsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgSquareDetailsTotal_result(queryForeclosureOrgSquareDetailsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryForeclosureOrgSquareDetailsTotal_result deepCopy() {
      return new queryForeclosureOrgSquareDetailsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryForeclosureOrgSquareDetailsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgSquareDetailsTotal_result)
        return this.equals((queryForeclosureOrgSquareDetailsTotal_result)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgSquareDetailsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgSquareDetailsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgSquareDetailsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgSquareDetailsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetailsTotal_resultStandardScheme getScheme() {
        return new queryForeclosureOrgSquareDetailsTotal_resultStandardScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetailsTotal_resultStandardScheme extends StandardScheme<queryForeclosureOrgSquareDetailsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgSquareDetailsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgSquareDetailsTotal_resultTupleScheme getScheme() {
        return new queryForeclosureOrgSquareDetailsTotal_resultTupleScheme();
      }
    }

    private static class queryForeclosureOrgSquareDetailsTotal_resultTupleScheme extends TupleScheme<queryForeclosureOrgSquareDetailsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgSquareDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgIngDetails_args implements org.apache.thrift.TBase<queryForeclosureOrgIngDetails_args, queryForeclosureOrgIngDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgIngDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgIngDetails_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgIngDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgIngDetails_argsTupleSchemeFactory());
    }

    public ForeclosureOrgDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgIngDetails_args.class, metaDataMap);
    }

    public queryForeclosureOrgIngDetails_args() {
    }

    public queryForeclosureOrgIngDetails_args(
      ForeclosureOrgDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgIngDetails_args(queryForeclosureOrgIngDetails_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureOrgDetailsReport(other.query);
      }
    }

    public queryForeclosureOrgIngDetails_args deepCopy() {
      return new queryForeclosureOrgIngDetails_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureOrgDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureOrgIngDetails_args setQuery(ForeclosureOrgDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureOrgDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgIngDetails_args)
        return this.equals((queryForeclosureOrgIngDetails_args)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgIngDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgIngDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgIngDetails_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgIngDetails_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetails_argsStandardScheme getScheme() {
        return new queryForeclosureOrgIngDetails_argsStandardScheme();
      }
    }

    private static class queryForeclosureOrgIngDetails_argsStandardScheme extends StandardScheme<queryForeclosureOrgIngDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgIngDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureOrgDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgIngDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgIngDetails_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetails_argsTupleScheme getScheme() {
        return new queryForeclosureOrgIngDetails_argsTupleScheme();
      }
    }

    private static class queryForeclosureOrgIngDetails_argsTupleScheme extends TupleScheme<queryForeclosureOrgIngDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureOrgDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgIngDetails_result implements org.apache.thrift.TBase<queryForeclosureOrgIngDetails_result, queryForeclosureOrgIngDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgIngDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgIngDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgIngDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgIngDetails_resultTupleSchemeFactory());
    }

    public List<ForeclosureOrgDetailsReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgIngDetails_result.class, metaDataMap);
    }

    public queryForeclosureOrgIngDetails_result() {
    }

    public queryForeclosureOrgIngDetails_result(
      List<ForeclosureOrgDetailsReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgIngDetails_result(queryForeclosureOrgIngDetails_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureOrgDetailsReport> __this__success = new ArrayList<ForeclosureOrgDetailsReport>(other.success.size());
        for (ForeclosureOrgDetailsReport other_element : other.success) {
          __this__success.add(new ForeclosureOrgDetailsReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureOrgIngDetails_result deepCopy() {
      return new queryForeclosureOrgIngDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureOrgDetailsReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureOrgDetailsReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureOrgDetailsReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureOrgDetailsReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureOrgIngDetails_result setSuccess(List<ForeclosureOrgDetailsReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureOrgDetailsReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgIngDetails_result)
        return this.equals((queryForeclosureOrgIngDetails_result)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgIngDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgIngDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgIngDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgIngDetails_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetails_resultStandardScheme getScheme() {
        return new queryForeclosureOrgIngDetails_resultStandardScheme();
      }
    }

    private static class queryForeclosureOrgIngDetails_resultStandardScheme extends StandardScheme<queryForeclosureOrgIngDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgIngDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureOrgDetailsReport>(_list56.size);
                  ForeclosureOrgDetailsReport _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new ForeclosureOrgDetailsReport();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgIngDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureOrgDetailsReport _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgIngDetails_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetails_resultTupleScheme getScheme() {
        return new queryForeclosureOrgIngDetails_resultTupleScheme();
      }
    }

    private static class queryForeclosureOrgIngDetails_resultTupleScheme extends TupleScheme<queryForeclosureOrgIngDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureOrgDetailsReport _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureOrgDetailsReport>(_list61.size);
            ForeclosureOrgDetailsReport _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new ForeclosureOrgDetailsReport();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgIngDetailsTotal_args implements org.apache.thrift.TBase<queryForeclosureOrgIngDetailsTotal_args, queryForeclosureOrgIngDetailsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgIngDetailsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgIngDetailsTotal_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgIngDetailsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgIngDetailsTotal_argsTupleSchemeFactory());
    }

    public ForeclosureOrgDetailsReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrgDetailsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgIngDetailsTotal_args.class, metaDataMap);
    }

    public queryForeclosureOrgIngDetailsTotal_args() {
    }

    public queryForeclosureOrgIngDetailsTotal_args(
      ForeclosureOrgDetailsReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgIngDetailsTotal_args(queryForeclosureOrgIngDetailsTotal_args other) {
      if (other.isSetQuery()) {
        this.query = new ForeclosureOrgDetailsReport(other.query);
      }
    }

    public queryForeclosureOrgIngDetailsTotal_args deepCopy() {
      return new queryForeclosureOrgIngDetailsTotal_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public ForeclosureOrgDetailsReport getQuery() {
      return this.query;
    }

    public queryForeclosureOrgIngDetailsTotal_args setQuery(ForeclosureOrgDetailsReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ForeclosureOrgDetailsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgIngDetailsTotal_args)
        return this.equals((queryForeclosureOrgIngDetailsTotal_args)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgIngDetailsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgIngDetailsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgIngDetailsTotal_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgIngDetailsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetailsTotal_argsStandardScheme getScheme() {
        return new queryForeclosureOrgIngDetailsTotal_argsStandardScheme();
      }
    }

    private static class queryForeclosureOrgIngDetailsTotal_argsStandardScheme extends StandardScheme<queryForeclosureOrgIngDetailsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new ForeclosureOrgDetailsReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgIngDetailsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetailsTotal_argsTupleScheme getScheme() {
        return new queryForeclosureOrgIngDetailsTotal_argsTupleScheme();
      }
    }

    private static class queryForeclosureOrgIngDetailsTotal_argsTupleScheme extends TupleScheme<queryForeclosureOrgIngDetailsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetailsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new ForeclosureOrgDetailsReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrgIngDetailsTotal_result implements org.apache.thrift.TBase<queryForeclosureOrgIngDetailsTotal_result, queryForeclosureOrgIngDetailsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrgIngDetailsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrgIngDetailsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrgIngDetailsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrgIngDetailsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrgIngDetailsTotal_result.class, metaDataMap);
    }

    public queryForeclosureOrgIngDetailsTotal_result() {
    }

    public queryForeclosureOrgIngDetailsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrgIngDetailsTotal_result(queryForeclosureOrgIngDetailsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryForeclosureOrgIngDetailsTotal_result deepCopy() {
      return new queryForeclosureOrgIngDetailsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryForeclosureOrgIngDetailsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrgIngDetailsTotal_result)
        return this.equals((queryForeclosureOrgIngDetailsTotal_result)that);
      return false;
    }

    public boolean equals(queryForeclosureOrgIngDetailsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrgIngDetailsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrgIngDetailsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrgIngDetailsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetailsTotal_resultStandardScheme getScheme() {
        return new queryForeclosureOrgIngDetailsTotal_resultStandardScheme();
      }
    }

    private static class queryForeclosureOrgIngDetailsTotal_resultStandardScheme extends StandardScheme<queryForeclosureOrgIngDetailsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrgIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrgIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrgIngDetailsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrgIngDetailsTotal_resultTupleScheme getScheme() {
        return new queryForeclosureOrgIngDetailsTotal_resultTupleScheme();
      }
    }

    private static class queryForeclosureOrgIngDetailsTotal_resultTupleScheme extends TupleScheme<queryForeclosureOrgIngDetailsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrgIngDetailsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

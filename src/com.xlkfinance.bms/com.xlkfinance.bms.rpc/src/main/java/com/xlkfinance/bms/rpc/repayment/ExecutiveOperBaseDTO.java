/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class ExecutiveOperBaseDTO implements org.apache.thrift.TBase<ExecutiveOperBaseDTO, ExecutiveOperBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ExecutiveOperBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecutiveOperBaseDTO");

  private static final org.apache.thrift.protocol.TField APPLY_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("applyReason", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLY_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyProgress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REMIND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("remindType", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExecutiveOperBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExecutiveOperBaseDTOTupleSchemeFactory());
  }

  public String applyReason; // required
  public String applyProgress; // required
  public String remindType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLY_REASON((short)1, "applyReason"),
    APPLY_PROGRESS((short)2, "applyProgress"),
    REMIND_TYPE((short)3, "remindType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLY_REASON
          return APPLY_REASON;
        case 2: // APPLY_PROGRESS
          return APPLY_PROGRESS;
        case 3: // REMIND_TYPE
          return REMIND_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLY_REASON, new org.apache.thrift.meta_data.FieldMetaData("applyReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("applyProgress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMIND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("remindType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecutiveOperBaseDTO.class, metaDataMap);
  }

  public ExecutiveOperBaseDTO() {
  }

  public ExecutiveOperBaseDTO(
    String applyReason,
    String applyProgress,
    String remindType)
  {
    this();
    this.applyReason = applyReason;
    this.applyProgress = applyProgress;
    this.remindType = remindType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecutiveOperBaseDTO(ExecutiveOperBaseDTO other) {
    if (other.isSetApplyReason()) {
      this.applyReason = other.applyReason;
    }
    if (other.isSetApplyProgress()) {
      this.applyProgress = other.applyProgress;
    }
    if (other.isSetRemindType()) {
      this.remindType = other.remindType;
    }
  }

  public ExecutiveOperBaseDTO deepCopy() {
    return new ExecutiveOperBaseDTO(this);
  }

  @Override
  public void clear() {
    this.applyReason = null;
    this.applyProgress = null;
    this.remindType = null;
  }

  public String getApplyReason() {
    return this.applyReason;
  }

  public ExecutiveOperBaseDTO setApplyReason(String applyReason) {
    this.applyReason = applyReason;
    return this;
  }

  public void unsetApplyReason() {
    this.applyReason = null;
  }

  /** Returns true if field applyReason is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyReason() {
    return this.applyReason != null;
  }

  public void setApplyReasonIsSet(boolean value) {
    if (!value) {
      this.applyReason = null;
    }
  }

  public String getApplyProgress() {
    return this.applyProgress;
  }

  public ExecutiveOperBaseDTO setApplyProgress(String applyProgress) {
    this.applyProgress = applyProgress;
    return this;
  }

  public void unsetApplyProgress() {
    this.applyProgress = null;
  }

  /** Returns true if field applyProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyProgress() {
    return this.applyProgress != null;
  }

  public void setApplyProgressIsSet(boolean value) {
    if (!value) {
      this.applyProgress = null;
    }
  }

  public String getRemindType() {
    return this.remindType;
  }

  public ExecutiveOperBaseDTO setRemindType(String remindType) {
    this.remindType = remindType;
    return this;
  }

  public void unsetRemindType() {
    this.remindType = null;
  }

  /** Returns true if field remindType is set (has been assigned a value) and false otherwise */
  public boolean isSetRemindType() {
    return this.remindType != null;
  }

  public void setRemindTypeIsSet(boolean value) {
    if (!value) {
      this.remindType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLY_REASON:
      if (value == null) {
        unsetApplyReason();
      } else {
        setApplyReason((String)value);
      }
      break;

    case APPLY_PROGRESS:
      if (value == null) {
        unsetApplyProgress();
      } else {
        setApplyProgress((String)value);
      }
      break;

    case REMIND_TYPE:
      if (value == null) {
        unsetRemindType();
      } else {
        setRemindType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLY_REASON:
      return getApplyReason();

    case APPLY_PROGRESS:
      return getApplyProgress();

    case REMIND_TYPE:
      return getRemindType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLY_REASON:
      return isSetApplyReason();
    case APPLY_PROGRESS:
      return isSetApplyProgress();
    case REMIND_TYPE:
      return isSetRemindType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecutiveOperBaseDTO)
      return this.equals((ExecutiveOperBaseDTO)that);
    return false;
  }

  public boolean equals(ExecutiveOperBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_applyReason = true && this.isSetApplyReason();
    boolean that_present_applyReason = true && that.isSetApplyReason();
    if (this_present_applyReason || that_present_applyReason) {
      if (!(this_present_applyReason && that_present_applyReason))
        return false;
      if (!this.applyReason.equals(that.applyReason))
        return false;
    }

    boolean this_present_applyProgress = true && this.isSetApplyProgress();
    boolean that_present_applyProgress = true && that.isSetApplyProgress();
    if (this_present_applyProgress || that_present_applyProgress) {
      if (!(this_present_applyProgress && that_present_applyProgress))
        return false;
      if (!this.applyProgress.equals(that.applyProgress))
        return false;
    }

    boolean this_present_remindType = true && this.isSetRemindType();
    boolean that_present_remindType = true && that.isSetRemindType();
    if (this_present_remindType || that_present_remindType) {
      if (!(this_present_remindType && that_present_remindType))
        return false;
      if (!this.remindType.equals(that.remindType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_applyReason = true && (isSetApplyReason());
    list.add(present_applyReason);
    if (present_applyReason)
      list.add(applyReason);

    boolean present_applyProgress = true && (isSetApplyProgress());
    list.add(present_applyProgress);
    if (present_applyProgress)
      list.add(applyProgress);

    boolean present_remindType = true && (isSetRemindType());
    list.add(present_remindType);
    if (present_remindType)
      list.add(remindType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExecutiveOperBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplyReason()).compareTo(other.isSetApplyReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyReason, other.applyReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyProgress()).compareTo(other.isSetApplyProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyProgress, other.applyProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemindType()).compareTo(other.isSetRemindType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemindType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remindType, other.remindType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExecutiveOperBaseDTO(");
    boolean first = true;

    sb.append("applyReason:");
    if (this.applyReason == null) {
      sb.append("null");
    } else {
      sb.append(this.applyReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyProgress:");
    if (this.applyProgress == null) {
      sb.append("null");
    } else {
      sb.append(this.applyProgress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remindType:");
    if (this.remindType == null) {
      sb.append("null");
    } else {
      sb.append(this.remindType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExecutiveOperBaseDTOStandardSchemeFactory implements SchemeFactory {
    public ExecutiveOperBaseDTOStandardScheme getScheme() {
      return new ExecutiveOperBaseDTOStandardScheme();
    }
  }

  private static class ExecutiveOperBaseDTOStandardScheme extends StandardScheme<ExecutiveOperBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExecutiveOperBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLY_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyReason = iprot.readString();
              struct.setApplyReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLY_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyProgress = iprot.readString();
              struct.setApplyProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMIND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remindType = iprot.readString();
              struct.setRemindTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExecutiveOperBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applyReason != null) {
        oprot.writeFieldBegin(APPLY_REASON_FIELD_DESC);
        oprot.writeString(struct.applyReason);
        oprot.writeFieldEnd();
      }
      if (struct.applyProgress != null) {
        oprot.writeFieldBegin(APPLY_PROGRESS_FIELD_DESC);
        oprot.writeString(struct.applyProgress);
        oprot.writeFieldEnd();
      }
      if (struct.remindType != null) {
        oprot.writeFieldBegin(REMIND_TYPE_FIELD_DESC);
        oprot.writeString(struct.remindType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExecutiveOperBaseDTOTupleSchemeFactory implements SchemeFactory {
    public ExecutiveOperBaseDTOTupleScheme getScheme() {
      return new ExecutiveOperBaseDTOTupleScheme();
    }
  }

  private static class ExecutiveOperBaseDTOTupleScheme extends TupleScheme<ExecutiveOperBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExecutiveOperBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApplyReason()) {
        optionals.set(0);
      }
      if (struct.isSetApplyProgress()) {
        optionals.set(1);
      }
      if (struct.isSetRemindType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetApplyReason()) {
        oprot.writeString(struct.applyReason);
      }
      if (struct.isSetApplyProgress()) {
        oprot.writeString(struct.applyProgress);
      }
      if (struct.isSetRemindType()) {
        oprot.writeString(struct.remindType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExecutiveOperBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.applyReason = iprot.readString();
        struct.setApplyReasonIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applyProgress = iprot.readString();
        struct.setApplyProgressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remindType = iprot.readString();
        struct.setRemindTypeIsSet(true);
      }
    }
  }

}


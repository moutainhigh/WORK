/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.workflow;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * *任务流程处理意见***
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-18")
public class TaskFlowIdea implements org.apache.thrift.TBase<TaskFlowIdea, TaskFlowIdea._Fields>, java.io.Serializable, Cloneable, Comparable<TaskFlowIdea> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskFlowIdea");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROCESS_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ALLOCATION_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("allocationDttm", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REVIEW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewResult", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REVIEW_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewContent", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REFOULEMENT_TASK_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refoulementTaskNodeId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SUBMIT_NEXT_TASK_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("submitNextTaskNodeId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REMIND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("remindType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskFlowIdeaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskFlowIdeaTupleSchemeFactory());
  }

  public int pid; // required
  public int taskId; // required
  public int processUserId; // required
  public String allocationDttm; // required
  public String completeDttm; // required
  public int reviewResult; // required
  public String reviewContent; // required
  public int refoulementTaskNodeId; // required
  public int submitNextTaskNodeId; // required
  public int remindType; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    TASK_ID((short)2, "taskId"),
    PROCESS_USER_ID((short)3, "processUserId"),
    ALLOCATION_DTTM((short)4, "allocationDttm"),
    COMPLETE_DTTM((short)5, "completeDttm"),
    REVIEW_RESULT((short)6, "reviewResult"),
    REVIEW_CONTENT((short)7, "reviewContent"),
    REFOULEMENT_TASK_NODE_ID((short)8, "refoulementTaskNodeId"),
    SUBMIT_NEXT_TASK_NODE_ID((short)9, "submitNextTaskNodeId"),
    REMIND_TYPE((short)10, "remindType"),
    STATUS((short)11, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // TASK_ID
          return TASK_ID;
        case 3: // PROCESS_USER_ID
          return PROCESS_USER_ID;
        case 4: // ALLOCATION_DTTM
          return ALLOCATION_DTTM;
        case 5: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 6: // REVIEW_RESULT
          return REVIEW_RESULT;
        case 7: // REVIEW_CONTENT
          return REVIEW_CONTENT;
        case 8: // REFOULEMENT_TASK_NODE_ID
          return REFOULEMENT_TASK_NODE_ID;
        case 9: // SUBMIT_NEXT_TASK_NODE_ID
          return SUBMIT_NEXT_TASK_NODE_ID;
        case 10: // REMIND_TYPE
          return REMIND_TYPE;
        case 11: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __TASKID_ISSET_ID = 1;
  private static final int __PROCESSUSERID_ISSET_ID = 2;
  private static final int __REVIEWRESULT_ISSET_ID = 3;
  private static final int __REFOULEMENTTASKNODEID_ISSET_ID = 4;
  private static final int __SUBMITNEXTTASKNODEID_ISSET_ID = 5;
  private static final int __REMINDTYPE_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESS_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("processUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOCATION_DTTM, new org.apache.thrift.meta_data.FieldMetaData("allocationDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("reviewResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REVIEW_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("reviewContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFOULEMENT_TASK_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("refoulementTaskNodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBMIT_NEXT_TASK_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("submitNextTaskNodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMIND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("remindType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskFlowIdea.class, metaDataMap);
  }

  public TaskFlowIdea() {
  }

  public TaskFlowIdea(
    int pid,
    int taskId,
    int processUserId,
    String allocationDttm,
    String completeDttm,
    int reviewResult,
    String reviewContent,
    int refoulementTaskNodeId,
    int submitNextTaskNodeId,
    int remindType,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.processUserId = processUserId;
    setProcessUserIdIsSet(true);
    this.allocationDttm = allocationDttm;
    this.completeDttm = completeDttm;
    this.reviewResult = reviewResult;
    setReviewResultIsSet(true);
    this.reviewContent = reviewContent;
    this.refoulementTaskNodeId = refoulementTaskNodeId;
    setRefoulementTaskNodeIdIsSet(true);
    this.submitNextTaskNodeId = submitNextTaskNodeId;
    setSubmitNextTaskNodeIdIsSet(true);
    this.remindType = remindType;
    setRemindTypeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskFlowIdea(TaskFlowIdea other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.taskId = other.taskId;
    this.processUserId = other.processUserId;
    if (other.isSetAllocationDttm()) {
      this.allocationDttm = other.allocationDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    this.reviewResult = other.reviewResult;
    if (other.isSetReviewContent()) {
      this.reviewContent = other.reviewContent;
    }
    this.refoulementTaskNodeId = other.refoulementTaskNodeId;
    this.submitNextTaskNodeId = other.submitNextTaskNodeId;
    this.remindType = other.remindType;
    this.status = other.status;
  }

  public TaskFlowIdea deepCopy() {
    return new TaskFlowIdea(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setProcessUserIdIsSet(false);
    this.processUserId = 0;
    this.allocationDttm = null;
    this.completeDttm = null;
    setReviewResultIsSet(false);
    this.reviewResult = 0;
    this.reviewContent = null;
    setRefoulementTaskNodeIdIsSet(false);
    this.refoulementTaskNodeId = 0;
    setSubmitNextTaskNodeIdIsSet(false);
    this.submitNextTaskNodeId = 0;
    setRemindTypeIsSet(false);
    this.remindType = 0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public TaskFlowIdea setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getTaskId() {
    return this.taskId;
  }

  public TaskFlowIdea setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getProcessUserId() {
    return this.processUserId;
  }

  public TaskFlowIdea setProcessUserId(int processUserId) {
    this.processUserId = processUserId;
    setProcessUserIdIsSet(true);
    return this;
  }

  public void unsetProcessUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSUSERID_ISSET_ID);
  }

  /** Returns true if field processUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSUSERID_ISSET_ID);
  }

  public void setProcessUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSUSERID_ISSET_ID, value);
  }

  public String getAllocationDttm() {
    return this.allocationDttm;
  }

  public TaskFlowIdea setAllocationDttm(String allocationDttm) {
    this.allocationDttm = allocationDttm;
    return this;
  }

  public void unsetAllocationDttm() {
    this.allocationDttm = null;
  }

  /** Returns true if field allocationDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocationDttm() {
    return this.allocationDttm != null;
  }

  public void setAllocationDttmIsSet(boolean value) {
    if (!value) {
      this.allocationDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public TaskFlowIdea setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public int getReviewResult() {
    return this.reviewResult;
  }

  public TaskFlowIdea setReviewResult(int reviewResult) {
    this.reviewResult = reviewResult;
    setReviewResultIsSet(true);
    return this;
  }

  public void unsetReviewResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWRESULT_ISSET_ID);
  }

  /** Returns true if field reviewResult is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewResult() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWRESULT_ISSET_ID);
  }

  public void setReviewResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWRESULT_ISSET_ID, value);
  }

  public String getReviewContent() {
    return this.reviewContent;
  }

  public TaskFlowIdea setReviewContent(String reviewContent) {
    this.reviewContent = reviewContent;
    return this;
  }

  public void unsetReviewContent() {
    this.reviewContent = null;
  }

  /** Returns true if field reviewContent is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewContent() {
    return this.reviewContent != null;
  }

  public void setReviewContentIsSet(boolean value) {
    if (!value) {
      this.reviewContent = null;
    }
  }

  public int getRefoulementTaskNodeId() {
    return this.refoulementTaskNodeId;
  }

  public TaskFlowIdea setRefoulementTaskNodeId(int refoulementTaskNodeId) {
    this.refoulementTaskNodeId = refoulementTaskNodeId;
    setRefoulementTaskNodeIdIsSet(true);
    return this;
  }

  public void unsetRefoulementTaskNodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFOULEMENTTASKNODEID_ISSET_ID);
  }

  /** Returns true if field refoulementTaskNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefoulementTaskNodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFOULEMENTTASKNODEID_ISSET_ID);
  }

  public void setRefoulementTaskNodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFOULEMENTTASKNODEID_ISSET_ID, value);
  }

  public int getSubmitNextTaskNodeId() {
    return this.submitNextTaskNodeId;
  }

  public TaskFlowIdea setSubmitNextTaskNodeId(int submitNextTaskNodeId) {
    this.submitNextTaskNodeId = submitNextTaskNodeId;
    setSubmitNextTaskNodeIdIsSet(true);
    return this;
  }

  public void unsetSubmitNextTaskNodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBMITNEXTTASKNODEID_ISSET_ID);
  }

  /** Returns true if field submitNextTaskNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitNextTaskNodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBMITNEXTTASKNODEID_ISSET_ID);
  }

  public void setSubmitNextTaskNodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBMITNEXTTASKNODEID_ISSET_ID, value);
  }

  public int getRemindType() {
    return this.remindType;
  }

  public TaskFlowIdea setRemindType(int remindType) {
    this.remindType = remindType;
    setRemindTypeIsSet(true);
    return this;
  }

  public void unsetRemindType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMINDTYPE_ISSET_ID);
  }

  /** Returns true if field remindType is set (has been assigned a value) and false otherwise */
  public boolean isSetRemindType() {
    return EncodingUtils.testBit(__isset_bitfield, __REMINDTYPE_ISSET_ID);
  }

  public void setRemindTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMINDTYPE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TaskFlowIdea setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case PROCESS_USER_ID:
      if (value == null) {
        unsetProcessUserId();
      } else {
        setProcessUserId((Integer)value);
      }
      break;

    case ALLOCATION_DTTM:
      if (value == null) {
        unsetAllocationDttm();
      } else {
        setAllocationDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case REVIEW_RESULT:
      if (value == null) {
        unsetReviewResult();
      } else {
        setReviewResult((Integer)value);
      }
      break;

    case REVIEW_CONTENT:
      if (value == null) {
        unsetReviewContent();
      } else {
        setReviewContent((String)value);
      }
      break;

    case REFOULEMENT_TASK_NODE_ID:
      if (value == null) {
        unsetRefoulementTaskNodeId();
      } else {
        setRefoulementTaskNodeId((Integer)value);
      }
      break;

    case SUBMIT_NEXT_TASK_NODE_ID:
      if (value == null) {
        unsetSubmitNextTaskNodeId();
      } else {
        setSubmitNextTaskNodeId((Integer)value);
      }
      break;

    case REMIND_TYPE:
      if (value == null) {
        unsetRemindType();
      } else {
        setRemindType((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case PROCESS_USER_ID:
      return Integer.valueOf(getProcessUserId());

    case ALLOCATION_DTTM:
      return getAllocationDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case REVIEW_RESULT:
      return Integer.valueOf(getReviewResult());

    case REVIEW_CONTENT:
      return getReviewContent();

    case REFOULEMENT_TASK_NODE_ID:
      return Integer.valueOf(getRefoulementTaskNodeId());

    case SUBMIT_NEXT_TASK_NODE_ID:
      return Integer.valueOf(getSubmitNextTaskNodeId());

    case REMIND_TYPE:
      return Integer.valueOf(getRemindType());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case TASK_ID:
      return isSetTaskId();
    case PROCESS_USER_ID:
      return isSetProcessUserId();
    case ALLOCATION_DTTM:
      return isSetAllocationDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case REVIEW_RESULT:
      return isSetReviewResult();
    case REVIEW_CONTENT:
      return isSetReviewContent();
    case REFOULEMENT_TASK_NODE_ID:
      return isSetRefoulementTaskNodeId();
    case SUBMIT_NEXT_TASK_NODE_ID:
      return isSetSubmitNextTaskNodeId();
    case REMIND_TYPE:
      return isSetRemindType();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskFlowIdea)
      return this.equals((TaskFlowIdea)that);
    return false;
  }

  public boolean equals(TaskFlowIdea that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_processUserId = true;
    boolean that_present_processUserId = true;
    if (this_present_processUserId || that_present_processUserId) {
      if (!(this_present_processUserId && that_present_processUserId))
        return false;
      if (this.processUserId != that.processUserId)
        return false;
    }

    boolean this_present_allocationDttm = true && this.isSetAllocationDttm();
    boolean that_present_allocationDttm = true && that.isSetAllocationDttm();
    if (this_present_allocationDttm || that_present_allocationDttm) {
      if (!(this_present_allocationDttm && that_present_allocationDttm))
        return false;
      if (!this.allocationDttm.equals(that.allocationDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_reviewResult = true;
    boolean that_present_reviewResult = true;
    if (this_present_reviewResult || that_present_reviewResult) {
      if (!(this_present_reviewResult && that_present_reviewResult))
        return false;
      if (this.reviewResult != that.reviewResult)
        return false;
    }

    boolean this_present_reviewContent = true && this.isSetReviewContent();
    boolean that_present_reviewContent = true && that.isSetReviewContent();
    if (this_present_reviewContent || that_present_reviewContent) {
      if (!(this_present_reviewContent && that_present_reviewContent))
        return false;
      if (!this.reviewContent.equals(that.reviewContent))
        return false;
    }

    boolean this_present_refoulementTaskNodeId = true;
    boolean that_present_refoulementTaskNodeId = true;
    if (this_present_refoulementTaskNodeId || that_present_refoulementTaskNodeId) {
      if (!(this_present_refoulementTaskNodeId && that_present_refoulementTaskNodeId))
        return false;
      if (this.refoulementTaskNodeId != that.refoulementTaskNodeId)
        return false;
    }

    boolean this_present_submitNextTaskNodeId = true;
    boolean that_present_submitNextTaskNodeId = true;
    if (this_present_submitNextTaskNodeId || that_present_submitNextTaskNodeId) {
      if (!(this_present_submitNextTaskNodeId && that_present_submitNextTaskNodeId))
        return false;
      if (this.submitNextTaskNodeId != that.submitNextTaskNodeId)
        return false;
    }

    boolean this_present_remindType = true;
    boolean that_present_remindType = true;
    if (this_present_remindType || that_present_remindType) {
      if (!(this_present_remindType && that_present_remindType))
        return false;
      if (this.remindType != that.remindType)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_processUserId = true;
    list.add(present_processUserId);
    if (present_processUserId)
      list.add(processUserId);

    boolean present_allocationDttm = true && (isSetAllocationDttm());
    list.add(present_allocationDttm);
    if (present_allocationDttm)
      list.add(allocationDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_reviewResult = true;
    list.add(present_reviewResult);
    if (present_reviewResult)
      list.add(reviewResult);

    boolean present_reviewContent = true && (isSetReviewContent());
    list.add(present_reviewContent);
    if (present_reviewContent)
      list.add(reviewContent);

    boolean present_refoulementTaskNodeId = true;
    list.add(present_refoulementTaskNodeId);
    if (present_refoulementTaskNodeId)
      list.add(refoulementTaskNodeId);

    boolean present_submitNextTaskNodeId = true;
    list.add(present_submitNextTaskNodeId);
    if (present_submitNextTaskNodeId)
      list.add(submitNextTaskNodeId);

    boolean present_remindType = true;
    list.add(present_remindType);
    if (present_remindType)
      list.add(remindType);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskFlowIdea other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessUserId()).compareTo(other.isSetProcessUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processUserId, other.processUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllocationDttm()).compareTo(other.isSetAllocationDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocationDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocationDttm, other.allocationDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewResult()).compareTo(other.isSetReviewResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewResult, other.reviewResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewContent()).compareTo(other.isSetReviewContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewContent, other.reviewContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefoulementTaskNodeId()).compareTo(other.isSetRefoulementTaskNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefoulementTaskNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refoulementTaskNodeId, other.refoulementTaskNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitNextTaskNodeId()).compareTo(other.isSetSubmitNextTaskNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitNextTaskNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitNextTaskNodeId, other.submitNextTaskNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemindType()).compareTo(other.isSetRemindType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemindType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remindType, other.remindType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskFlowIdea(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processUserId:");
    sb.append(this.processUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allocationDttm:");
    if (this.allocationDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.allocationDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewResult:");
    sb.append(this.reviewResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewContent:");
    if (this.reviewContent == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refoulementTaskNodeId:");
    sb.append(this.refoulementTaskNodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitNextTaskNodeId:");
    sb.append(this.submitNextTaskNodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remindType:");
    sb.append(this.remindType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskFlowIdeaStandardSchemeFactory implements SchemeFactory {
    public TaskFlowIdeaStandardScheme getScheme() {
      return new TaskFlowIdeaStandardScheme();
    }
  }

  private static class TaskFlowIdeaStandardScheme extends StandardScheme<TaskFlowIdea> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskFlowIdea struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROCESS_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.processUserId = iprot.readI32();
              struct.setProcessUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALLOCATION_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allocationDttm = iprot.readString();
              struct.setAllocationDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REVIEW_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reviewResult = iprot.readI32();
              struct.setReviewResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REVIEW_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewContent = iprot.readString();
              struct.setReviewContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REFOULEMENT_TASK_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refoulementTaskNodeId = iprot.readI32();
              struct.setRefoulementTaskNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUBMIT_NEXT_TASK_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.submitNextTaskNodeId = iprot.readI32();
              struct.setSubmitNextTaskNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REMIND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remindType = iprot.readI32();
              struct.setRemindTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskFlowIdea struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROCESS_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.processUserId);
      oprot.writeFieldEnd();
      if (struct.allocationDttm != null) {
        oprot.writeFieldBegin(ALLOCATION_DTTM_FIELD_DESC);
        oprot.writeString(struct.allocationDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVIEW_RESULT_FIELD_DESC);
      oprot.writeI32(struct.reviewResult);
      oprot.writeFieldEnd();
      if (struct.reviewContent != null) {
        oprot.writeFieldBegin(REVIEW_CONTENT_FIELD_DESC);
        oprot.writeString(struct.reviewContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFOULEMENT_TASK_NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.refoulementTaskNodeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBMIT_NEXT_TASK_NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.submitNextTaskNodeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMIND_TYPE_FIELD_DESC);
      oprot.writeI32(struct.remindType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskFlowIdeaTupleSchemeFactory implements SchemeFactory {
    public TaskFlowIdeaTupleScheme getScheme() {
      return new TaskFlowIdeaTupleScheme();
    }
  }

  private static class TaskFlowIdeaTupleScheme extends TupleScheme<TaskFlowIdea> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskFlowIdea struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetTaskId()) {
        optionals.set(1);
      }
      if (struct.isSetProcessUserId()) {
        optionals.set(2);
      }
      if (struct.isSetAllocationDttm()) {
        optionals.set(3);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(4);
      }
      if (struct.isSetReviewResult()) {
        optionals.set(5);
      }
      if (struct.isSetReviewContent()) {
        optionals.set(6);
      }
      if (struct.isSetRefoulementTaskNodeId()) {
        optionals.set(7);
      }
      if (struct.isSetSubmitNextTaskNodeId()) {
        optionals.set(8);
      }
      if (struct.isSetRemindType()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetProcessUserId()) {
        oprot.writeI32(struct.processUserId);
      }
      if (struct.isSetAllocationDttm()) {
        oprot.writeString(struct.allocationDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetReviewResult()) {
        oprot.writeI32(struct.reviewResult);
      }
      if (struct.isSetReviewContent()) {
        oprot.writeString(struct.reviewContent);
      }
      if (struct.isSetRefoulementTaskNodeId()) {
        oprot.writeI32(struct.refoulementTaskNodeId);
      }
      if (struct.isSetSubmitNextTaskNodeId()) {
        oprot.writeI32(struct.submitNextTaskNodeId);
      }
      if (struct.isSetRemindType()) {
        oprot.writeI32(struct.remindType);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskFlowIdea struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.processUserId = iprot.readI32();
        struct.setProcessUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.allocationDttm = iprot.readString();
        struct.setAllocationDttmIsSet(true);
      }
      if (incoming.get(4)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reviewResult = iprot.readI32();
        struct.setReviewResultIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reviewContent = iprot.readString();
        struct.setReviewContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.refoulementTaskNodeId = iprot.readI32();
        struct.setRefoulementTaskNodeIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.submitNextTaskNodeId = iprot.readI32();
        struct.setSubmitNextTaskNodeIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.remindType = iprot.readI32();
        struct.setRemindTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


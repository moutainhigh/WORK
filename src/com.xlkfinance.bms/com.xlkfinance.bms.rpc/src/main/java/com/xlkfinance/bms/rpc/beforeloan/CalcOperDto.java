/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class CalcOperDto implements org.apache.thrift.TBase<CalcOperDto, CalcOperDto._Fields>, java.io.Serializable, Cloneable, Comparable<CalcOperDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CalcOperDto");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField OPER_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("operAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OPER_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("operRepayDt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField INTEREST_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("interestRate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EX_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("exTarget", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CalcOperDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CalcOperDtoTupleSchemeFactory());
  }

  public int pid; // required
  public double monthLoanMgr; // required
  public double monthLoanOtherFee; // required
  public double monthLoanInterest; // required
  public double operAmt; // required
  public String operRepayDt; // required
  public int repayType; // required
  public double interestRate; // required
  public String endDate; // required
  public int exTarget; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    MONTH_LOAN_MGR((short)2, "monthLoanMgr"),
    MONTH_LOAN_OTHER_FEE((short)3, "monthLoanOtherFee"),
    MONTH_LOAN_INTEREST((short)4, "monthLoanInterest"),
    OPER_AMT((short)5, "operAmt"),
    OPER_REPAY_DT((short)6, "operRepayDt"),
    REPAY_TYPE((short)7, "repayType"),
    INTEREST_RATE((short)8, "interestRate"),
    END_DATE((short)9, "endDate"),
    EX_TARGET((short)10, "exTarget");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // MONTH_LOAN_MGR
          return MONTH_LOAN_MGR;
        case 3: // MONTH_LOAN_OTHER_FEE
          return MONTH_LOAN_OTHER_FEE;
        case 4: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 5: // OPER_AMT
          return OPER_AMT;
        case 6: // OPER_REPAY_DT
          return OPER_REPAY_DT;
        case 7: // REPAY_TYPE
          return REPAY_TYPE;
        case 8: // INTEREST_RATE
          return INTEREST_RATE;
        case 9: // END_DATE
          return END_DATE;
        case 10: // EX_TARGET
          return EX_TARGET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __MONTHLOANMGR_ISSET_ID = 1;
  private static final int __MONTHLOANOTHERFEE_ISSET_ID = 2;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 3;
  private static final int __OPERAMT_ISSET_ID = 4;
  private static final int __REPAYTYPE_ISSET_ID = 5;
  private static final int __INTERESTRATE_ISSET_ID = 6;
  private static final int __EXTARGET_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("monthLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("monthLoanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPER_AMT, new org.apache.thrift.meta_data.FieldMetaData("operAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPER_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("operRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repayType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTEREST_RATE, new org.apache.thrift.meta_data.FieldMetaData("interestRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX_TARGET, new org.apache.thrift.meta_data.FieldMetaData("exTarget", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CalcOperDto.class, metaDataMap);
  }

  public CalcOperDto() {
    this.pid = 0;

    this.monthLoanMgr = 0;

    this.monthLoanOtherFee = 0;

    this.monthLoanInterest = 0;

    this.operAmt = 0;

    this.operRepayDt = "";

    this.interestRate = 0;

    this.exTarget = 0;

  }

  public CalcOperDto(
    int pid,
    double monthLoanMgr,
    double monthLoanOtherFee,
    double monthLoanInterest,
    double operAmt,
    String operRepayDt,
    int repayType,
    double interestRate,
    String endDate,
    int exTarget)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    this.monthLoanOtherFee = monthLoanOtherFee;
    setMonthLoanOtherFeeIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.operAmt = operAmt;
    setOperAmtIsSet(true);
    this.operRepayDt = operRepayDt;
    this.repayType = repayType;
    setRepayTypeIsSet(true);
    this.interestRate = interestRate;
    setInterestRateIsSet(true);
    this.endDate = endDate;
    this.exTarget = exTarget;
    setExTargetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CalcOperDto(CalcOperDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.monthLoanMgr = other.monthLoanMgr;
    this.monthLoanOtherFee = other.monthLoanOtherFee;
    this.monthLoanInterest = other.monthLoanInterest;
    this.operAmt = other.operAmt;
    if (other.isSetOperRepayDt()) {
      this.operRepayDt = other.operRepayDt;
    }
    this.repayType = other.repayType;
    this.interestRate = other.interestRate;
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.exTarget = other.exTarget;
  }

  public CalcOperDto deepCopy() {
    return new CalcOperDto(this);
  }

  @Override
  public void clear() {
    this.pid = 0;

    this.monthLoanMgr = 0;

    this.monthLoanOtherFee = 0;

    this.monthLoanInterest = 0;

    this.operAmt = 0;

    this.operRepayDt = "";

    setRepayTypeIsSet(false);
    this.repayType = 0;
    this.interestRate = 0;

    this.endDate = null;
    this.exTarget = 0;

  }

  public int getPid() {
    return this.pid;
  }

  public CalcOperDto setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getMonthLoanMgr() {
    return this.monthLoanMgr;
  }

  public CalcOperDto setMonthLoanMgr(double monthLoanMgr) {
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    return this;
  }

  public void unsetMonthLoanMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  /** Returns true if field monthLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  public void setMonthLoanMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID, value);
  }

  public double getMonthLoanOtherFee() {
    return this.monthLoanOtherFee;
  }

  public CalcOperDto setMonthLoanOtherFee(double monthLoanOtherFee) {
    this.monthLoanOtherFee = monthLoanOtherFee;
    setMonthLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetMonthLoanOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field monthLoanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANOTHERFEE_ISSET_ID);
  }

  public void setMonthLoanOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANOTHERFEE_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public CalcOperDto setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public double getOperAmt() {
    return this.operAmt;
  }

  public CalcOperDto setOperAmt(double operAmt) {
    this.operAmt = operAmt;
    setOperAmtIsSet(true);
    return this;
  }

  public void unsetOperAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERAMT_ISSET_ID);
  }

  /** Returns true if field operAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetOperAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERAMT_ISSET_ID);
  }

  public void setOperAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERAMT_ISSET_ID, value);
  }

  public String getOperRepayDt() {
    return this.operRepayDt;
  }

  public CalcOperDto setOperRepayDt(String operRepayDt) {
    this.operRepayDt = operRepayDt;
    return this;
  }

  public void unsetOperRepayDt() {
    this.operRepayDt = null;
  }

  /** Returns true if field operRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetOperRepayDt() {
    return this.operRepayDt != null;
  }

  public void setOperRepayDtIsSet(boolean value) {
    if (!value) {
      this.operRepayDt = null;
    }
  }

  public int getRepayType() {
    return this.repayType;
  }

  public CalcOperDto setRepayType(int repayType) {
    this.repayType = repayType;
    setRepayTypeIsSet(true);
    return this;
  }

  public void unsetRepayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYTYPE_ISSET_ID);
  }

  /** Returns true if field repayType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYTYPE_ISSET_ID);
  }

  public void setRepayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYTYPE_ISSET_ID, value);
  }

  public double getInterestRate() {
    return this.interestRate;
  }

  public CalcOperDto setInterestRate(double interestRate) {
    this.interestRate = interestRate;
    setInterestRateIsSet(true);
    return this;
  }

  public void unsetInterestRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTRATE_ISSET_ID);
  }

  /** Returns true if field interestRate is set (has been assigned a value) and false otherwise */
  public boolean isSetInterestRate() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERESTRATE_ISSET_ID);
  }

  public void setInterestRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTRATE_ISSET_ID, value);
  }

  public String getEndDate() {
    return this.endDate;
  }

  public CalcOperDto setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getExTarget() {
    return this.exTarget;
  }

  public CalcOperDto setExTarget(int exTarget) {
    this.exTarget = exTarget;
    setExTargetIsSet(true);
    return this;
  }

  public void unsetExTarget() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTARGET_ISSET_ID);
  }

  /** Returns true if field exTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetExTarget() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTARGET_ISSET_ID);
  }

  public void setExTargetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTARGET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case MONTH_LOAN_MGR:
      if (value == null) {
        unsetMonthLoanMgr();
      } else {
        setMonthLoanMgr((Double)value);
      }
      break;

    case MONTH_LOAN_OTHER_FEE:
      if (value == null) {
        unsetMonthLoanOtherFee();
      } else {
        setMonthLoanOtherFee((Double)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case OPER_AMT:
      if (value == null) {
        unsetOperAmt();
      } else {
        setOperAmt((Double)value);
      }
      break;

    case OPER_REPAY_DT:
      if (value == null) {
        unsetOperRepayDt();
      } else {
        setOperRepayDt((String)value);
      }
      break;

    case REPAY_TYPE:
      if (value == null) {
        unsetRepayType();
      } else {
        setRepayType((Integer)value);
      }
      break;

    case INTEREST_RATE:
      if (value == null) {
        unsetInterestRate();
      } else {
        setInterestRate((Double)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case EX_TARGET:
      if (value == null) {
        unsetExTarget();
      } else {
        setExTarget((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case MONTH_LOAN_MGR:
      return Double.valueOf(getMonthLoanMgr());

    case MONTH_LOAN_OTHER_FEE:
      return Double.valueOf(getMonthLoanOtherFee());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case OPER_AMT:
      return Double.valueOf(getOperAmt());

    case OPER_REPAY_DT:
      return getOperRepayDt();

    case REPAY_TYPE:
      return Integer.valueOf(getRepayType());

    case INTEREST_RATE:
      return Double.valueOf(getInterestRate());

    case END_DATE:
      return getEndDate();

    case EX_TARGET:
      return Integer.valueOf(getExTarget());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case MONTH_LOAN_MGR:
      return isSetMonthLoanMgr();
    case MONTH_LOAN_OTHER_FEE:
      return isSetMonthLoanOtherFee();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case OPER_AMT:
      return isSetOperAmt();
    case OPER_REPAY_DT:
      return isSetOperRepayDt();
    case REPAY_TYPE:
      return isSetRepayType();
    case INTEREST_RATE:
      return isSetInterestRate();
    case END_DATE:
      return isSetEndDate();
    case EX_TARGET:
      return isSetExTarget();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CalcOperDto)
      return this.equals((CalcOperDto)that);
    return false;
  }

  public boolean equals(CalcOperDto that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_monthLoanMgr = true;
    boolean that_present_monthLoanMgr = true;
    if (this_present_monthLoanMgr || that_present_monthLoanMgr) {
      if (!(this_present_monthLoanMgr && that_present_monthLoanMgr))
        return false;
      if (this.monthLoanMgr != that.monthLoanMgr)
        return false;
    }

    boolean this_present_monthLoanOtherFee = true;
    boolean that_present_monthLoanOtherFee = true;
    if (this_present_monthLoanOtherFee || that_present_monthLoanOtherFee) {
      if (!(this_present_monthLoanOtherFee && that_present_monthLoanOtherFee))
        return false;
      if (this.monthLoanOtherFee != that.monthLoanOtherFee)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_operAmt = true;
    boolean that_present_operAmt = true;
    if (this_present_operAmt || that_present_operAmt) {
      if (!(this_present_operAmt && that_present_operAmt))
        return false;
      if (this.operAmt != that.operAmt)
        return false;
    }

    boolean this_present_operRepayDt = true && this.isSetOperRepayDt();
    boolean that_present_operRepayDt = true && that.isSetOperRepayDt();
    if (this_present_operRepayDt || that_present_operRepayDt) {
      if (!(this_present_operRepayDt && that_present_operRepayDt))
        return false;
      if (!this.operRepayDt.equals(that.operRepayDt))
        return false;
    }

    boolean this_present_repayType = true;
    boolean that_present_repayType = true;
    if (this_present_repayType || that_present_repayType) {
      if (!(this_present_repayType && that_present_repayType))
        return false;
      if (this.repayType != that.repayType)
        return false;
    }

    boolean this_present_interestRate = true;
    boolean that_present_interestRate = true;
    if (this_present_interestRate || that_present_interestRate) {
      if (!(this_present_interestRate && that_present_interestRate))
        return false;
      if (this.interestRate != that.interestRate)
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_exTarget = true;
    boolean that_present_exTarget = true;
    if (this_present_exTarget || that_present_exTarget) {
      if (!(this_present_exTarget && that_present_exTarget))
        return false;
      if (this.exTarget != that.exTarget)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_monthLoanMgr = true;
    list.add(present_monthLoanMgr);
    if (present_monthLoanMgr)
      list.add(monthLoanMgr);

    boolean present_monthLoanOtherFee = true;
    list.add(present_monthLoanOtherFee);
    if (present_monthLoanOtherFee)
      list.add(monthLoanOtherFee);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_operAmt = true;
    list.add(present_operAmt);
    if (present_operAmt)
      list.add(operAmt);

    boolean present_operRepayDt = true && (isSetOperRepayDt());
    list.add(present_operRepayDt);
    if (present_operRepayDt)
      list.add(operRepayDt);

    boolean present_repayType = true;
    list.add(present_repayType);
    if (present_repayType)
      list.add(repayType);

    boolean present_interestRate = true;
    list.add(present_interestRate);
    if (present_interestRate)
      list.add(interestRate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_exTarget = true;
    list.add(present_exTarget);
    if (present_exTarget)
      list.add(exTarget);

    return list.hashCode();
  }

  @Override
  public int compareTo(CalcOperDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanMgr()).compareTo(other.isSetMonthLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanMgr, other.monthLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanOtherFee()).compareTo(other.isSetMonthLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanOtherFee, other.monthLoanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperAmt()).compareTo(other.isSetOperAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operAmt, other.operAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperRepayDt()).compareTo(other.isSetOperRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operRepayDt, other.operRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayType()).compareTo(other.isSetRepayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayType, other.repayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterestRate()).compareTo(other.isSetInterestRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterestRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestRate, other.interestRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExTarget()).compareTo(other.isSetExTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exTarget, other.exTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CalcOperDto(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanMgr:");
    sb.append(this.monthLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanOtherFee:");
    sb.append(this.monthLoanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operAmt:");
    sb.append(this.operAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operRepayDt:");
    if (this.operRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.operRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayType:");
    sb.append(this.repayType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interestRate:");
    sb.append(this.interestRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exTarget:");
    sb.append(this.exTarget);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CalcOperDtoStandardSchemeFactory implements SchemeFactory {
    public CalcOperDtoStandardScheme getScheme() {
      return new CalcOperDtoStandardScheme();
    }
  }

  private static class CalcOperDtoStandardScheme extends StandardScheme<CalcOperDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CalcOperDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONTH_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanMgr = iprot.readDouble();
              struct.setMonthLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONTH_LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanOtherFee = iprot.readDouble();
              struct.setMonthLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPER_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operAmt = iprot.readDouble();
              struct.setOperAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPER_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operRepayDt = iprot.readString();
              struct.setOperRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayType = iprot.readI32();
              struct.setRepayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INTEREST_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interestRate = iprot.readDouble();
              struct.setInterestRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EX_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exTarget = iprot.readI32();
              struct.setExTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CalcOperDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_AMT_FIELD_DESC);
      oprot.writeDouble(struct.operAmt);
      oprot.writeFieldEnd();
      if (struct.operRepayDt != null) {
        oprot.writeFieldBegin(OPER_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.operRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repayType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_RATE_FIELD_DESC);
      oprot.writeDouble(struct.interestRate);
      oprot.writeFieldEnd();
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EX_TARGET_FIELD_DESC);
      oprot.writeI32(struct.exTarget);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CalcOperDtoTupleSchemeFactory implements SchemeFactory {
    public CalcOperDtoTupleScheme getScheme() {
      return new CalcOperDtoTupleScheme();
    }
  }

  private static class CalcOperDtoTupleScheme extends TupleScheme<CalcOperDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CalcOperDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetMonthLoanMgr()) {
        optionals.set(1);
      }
      if (struct.isSetMonthLoanOtherFee()) {
        optionals.set(2);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(3);
      }
      if (struct.isSetOperAmt()) {
        optionals.set(4);
      }
      if (struct.isSetOperRepayDt()) {
        optionals.set(5);
      }
      if (struct.isSetRepayType()) {
        optionals.set(6);
      }
      if (struct.isSetInterestRate()) {
        optionals.set(7);
      }
      if (struct.isSetEndDate()) {
        optionals.set(8);
      }
      if (struct.isSetExTarget()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetMonthLoanMgr()) {
        oprot.writeDouble(struct.monthLoanMgr);
      }
      if (struct.isSetMonthLoanOtherFee()) {
        oprot.writeDouble(struct.monthLoanOtherFee);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetOperAmt()) {
        oprot.writeDouble(struct.operAmt);
      }
      if (struct.isSetOperRepayDt()) {
        oprot.writeString(struct.operRepayDt);
      }
      if (struct.isSetRepayType()) {
        oprot.writeI32(struct.repayType);
      }
      if (struct.isSetInterestRate()) {
        oprot.writeDouble(struct.interestRate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetExTarget()) {
        oprot.writeI32(struct.exTarget);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CalcOperDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.monthLoanMgr = iprot.readDouble();
        struct.setMonthLoanMgrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.monthLoanOtherFee = iprot.readDouble();
        struct.setMonthLoanOtherFeeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(4)) {
        struct.operAmt = iprot.readDouble();
        struct.setOperAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operRepayDt = iprot.readString();
        struct.setOperRepayDtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repayType = iprot.readI32();
        struct.setRepayTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.interestRate = iprot.readDouble();
        struct.setInterestRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.exTarget = iprot.readI32();
        struct.setExTargetIsSet(true);
      }
    }
  }

}


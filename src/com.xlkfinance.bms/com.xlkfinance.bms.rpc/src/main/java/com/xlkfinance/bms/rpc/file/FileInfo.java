/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.file;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileInfo");

  private static final org.apache.thrift.protocol.TField DATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField UPLOAD_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadUserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("fileProperty", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filePropertyName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDesc", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPLOAD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadDttm", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileInfoTupleSchemeFactory());
  }

  public int dataId; // required
  public int projectId; // required
  public int fileId; // required
  public int uploadUserId; // required
  public int fileProperty; // required
  public String filePropertyName; // required
  public String fileDesc; // required
  public int status; // required
  public String fileName; // required
  public String fileType; // required
  public int fileSize; // required
  public String fileUrl; // required
  public String uploadDttm; // required
  public String cusType; // required
  public int page; // required
  public int rows; // required
  public int refId; // required
  public int userId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_ID((short)1, "dataId"),
    PROJECT_ID((short)2, "projectId"),
    FILE_ID((short)3, "fileId"),
    UPLOAD_USER_ID((short)4, "uploadUserId"),
    FILE_PROPERTY((short)5, "fileProperty"),
    FILE_PROPERTY_NAME((short)6, "filePropertyName"),
    FILE_DESC((short)7, "fileDesc"),
    STATUS((short)8, "status"),
    FILE_NAME((short)9, "fileName"),
    FILE_TYPE((short)10, "fileType"),
    FILE_SIZE((short)11, "fileSize"),
    FILE_URL((short)12, "fileUrl"),
    UPLOAD_DTTM((short)13, "uploadDttm"),
    CUS_TYPE((short)14, "cusType"),
    PAGE((short)15, "page"),
    ROWS((short)16, "rows"),
    REF_ID((short)17, "refId"),
    USER_ID((short)18, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_ID
          return DATA_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // FILE_ID
          return FILE_ID;
        case 4: // UPLOAD_USER_ID
          return UPLOAD_USER_ID;
        case 5: // FILE_PROPERTY
          return FILE_PROPERTY;
        case 6: // FILE_PROPERTY_NAME
          return FILE_PROPERTY_NAME;
        case 7: // FILE_DESC
          return FILE_DESC;
        case 8: // STATUS
          return STATUS;
        case 9: // FILE_NAME
          return FILE_NAME;
        case 10: // FILE_TYPE
          return FILE_TYPE;
        case 11: // FILE_SIZE
          return FILE_SIZE;
        case 12: // FILE_URL
          return FILE_URL;
        case 13: // UPLOAD_DTTM
          return UPLOAD_DTTM;
        case 14: // CUS_TYPE
          return CUS_TYPE;
        case 15: // PAGE
          return PAGE;
        case 16: // ROWS
          return ROWS;
        case 17: // REF_ID
          return REF_ID;
        case 18: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATAID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __FILEID_ISSET_ID = 2;
  private static final int __UPLOADUSERID_ISSET_ID = 3;
  private static final int __FILEPROPERTY_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __FILESIZE_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __REFID_ISSET_ID = 9;
  private static final int __USERID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_ID, new org.apache.thrift.meta_data.FieldMetaData("dataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("uploadUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("fileProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("filePropertyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("fileDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("fileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPLOAD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("uploadDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileInfo.class, metaDataMap);
  }

  public FileInfo() {
  }

  public FileInfo(
    int dataId,
    int projectId,
    int fileId,
    int uploadUserId,
    int fileProperty,
    String filePropertyName,
    String fileDesc,
    int status,
    String fileName,
    String fileType,
    int fileSize,
    String fileUrl,
    String uploadDttm,
    String cusType,
    int page,
    int rows,
    int refId,
    int userId)
  {
    this();
    this.dataId = dataId;
    setDataIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.uploadUserId = uploadUserId;
    setUploadUserIdIsSet(true);
    this.fileProperty = fileProperty;
    setFilePropertyIsSet(true);
    this.filePropertyName = filePropertyName;
    this.fileDesc = fileDesc;
    this.status = status;
    setStatusIsSet(true);
    this.fileName = fileName;
    this.fileType = fileType;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.fileUrl = fileUrl;
    this.uploadDttm = uploadDttm;
    this.cusType = cusType;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileInfo(FileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dataId = other.dataId;
    this.projectId = other.projectId;
    this.fileId = other.fileId;
    this.uploadUserId = other.uploadUserId;
    this.fileProperty = other.fileProperty;
    if (other.isSetFilePropertyName()) {
      this.filePropertyName = other.filePropertyName;
    }
    if (other.isSetFileDesc()) {
      this.fileDesc = other.fileDesc;
    }
    this.status = other.status;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    this.fileSize = other.fileSize;
    if (other.isSetFileUrl()) {
      this.fileUrl = other.fileUrl;
    }
    if (other.isSetUploadDttm()) {
      this.uploadDttm = other.uploadDttm;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.refId = other.refId;
    this.userId = other.userId;
  }

  public FileInfo deepCopy() {
    return new FileInfo(this);
  }

  @Override
  public void clear() {
    setDataIdIsSet(false);
    this.dataId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setFileIdIsSet(false);
    this.fileId = 0;
    setUploadUserIdIsSet(false);
    this.uploadUserId = 0;
    setFilePropertyIsSet(false);
    this.fileProperty = 0;
    this.filePropertyName = null;
    this.fileDesc = null;
    setStatusIsSet(false);
    this.status = 0;
    this.fileName = null;
    this.fileType = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    this.fileUrl = null;
    this.uploadDttm = null;
    this.cusType = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public int getDataId() {
    return this.dataId;
  }

  public FileInfo setDataId(int dataId) {
    this.dataId = dataId;
    setDataIdIsSet(true);
    return this;
  }

  public void unsetDataId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAID_ISSET_ID);
  }

  /** Returns true if field dataId is set (has been assigned a value) and false otherwise */
  public boolean isSetDataId() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAID_ISSET_ID);
  }

  public void setDataIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public FileInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getFileId() {
    return this.fileId;
  }

  public FileInfo setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public int getUploadUserId() {
    return this.uploadUserId;
  }

  public FileInfo setUploadUserId(int uploadUserId) {
    this.uploadUserId = uploadUserId;
    setUploadUserIdIsSet(true);
    return this;
  }

  public void unsetUploadUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADUSERID_ISSET_ID);
  }

  /** Returns true if field uploadUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADUSERID_ISSET_ID);
  }

  public void setUploadUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADUSERID_ISSET_ID, value);
  }

  public int getFileProperty() {
    return this.fileProperty;
  }

  public FileInfo setFileProperty(int fileProperty) {
    this.fileProperty = fileProperty;
    setFilePropertyIsSet(true);
    return this;
  }

  public void unsetFileProperty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEPROPERTY_ISSET_ID);
  }

  /** Returns true if field fileProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetFileProperty() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEPROPERTY_ISSET_ID);
  }

  public void setFilePropertyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEPROPERTY_ISSET_ID, value);
  }

  public String getFilePropertyName() {
    return this.filePropertyName;
  }

  public FileInfo setFilePropertyName(String filePropertyName) {
    this.filePropertyName = filePropertyName;
    return this;
  }

  public void unsetFilePropertyName() {
    this.filePropertyName = null;
  }

  /** Returns true if field filePropertyName is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePropertyName() {
    return this.filePropertyName != null;
  }

  public void setFilePropertyNameIsSet(boolean value) {
    if (!value) {
      this.filePropertyName = null;
    }
  }

  public String getFileDesc() {
    return this.fileDesc;
  }

  public FileInfo setFileDesc(String fileDesc) {
    this.fileDesc = fileDesc;
    return this;
  }

  public void unsetFileDesc() {
    this.fileDesc = null;
  }

  /** Returns true if field fileDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFileDesc() {
    return this.fileDesc != null;
  }

  public void setFileDescIsSet(boolean value) {
    if (!value) {
      this.fileDesc = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public FileInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getFileName() {
    return this.fileName;
  }

  public FileInfo setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getFileType() {
    return this.fileType;
  }

  public FileInfo setFileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  public int getFileSize() {
    return this.fileSize;
  }

  public FileInfo setFileSize(int fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public String getFileUrl() {
    return this.fileUrl;
  }

  public FileInfo setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  public void unsetFileUrl() {
    this.fileUrl = null;
  }

  /** Returns true if field fileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFileUrl() {
    return this.fileUrl != null;
  }

  public void setFileUrlIsSet(boolean value) {
    if (!value) {
      this.fileUrl = null;
    }
  }

  public String getUploadDttm() {
    return this.uploadDttm;
  }

  public FileInfo setUploadDttm(String uploadDttm) {
    this.uploadDttm = uploadDttm;
    return this;
  }

  public void unsetUploadDttm() {
    this.uploadDttm = null;
  }

  /** Returns true if field uploadDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadDttm() {
    return this.uploadDttm != null;
  }

  public void setUploadDttmIsSet(boolean value) {
    if (!value) {
      this.uploadDttm = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public FileInfo setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public FileInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public FileInfo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public FileInfo setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public FileInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_ID:
      if (value == null) {
        unsetDataId();
      } else {
        setDataId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case UPLOAD_USER_ID:
      if (value == null) {
        unsetUploadUserId();
      } else {
        setUploadUserId((Integer)value);
      }
      break;

    case FILE_PROPERTY:
      if (value == null) {
        unsetFileProperty();
      } else {
        setFileProperty((Integer)value);
      }
      break;

    case FILE_PROPERTY_NAME:
      if (value == null) {
        unsetFilePropertyName();
      } else {
        setFilePropertyName((String)value);
      }
      break;

    case FILE_DESC:
      if (value == null) {
        unsetFileDesc();
      } else {
        setFileDesc((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Integer)value);
      }
      break;

    case FILE_URL:
      if (value == null) {
        unsetFileUrl();
      } else {
        setFileUrl((String)value);
      }
      break;

    case UPLOAD_DTTM:
      if (value == null) {
        unsetUploadDttm();
      } else {
        setUploadDttm((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_ID:
      return Integer.valueOf(getDataId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case UPLOAD_USER_ID:
      return Integer.valueOf(getUploadUserId());

    case FILE_PROPERTY:
      return Integer.valueOf(getFileProperty());

    case FILE_PROPERTY_NAME:
      return getFilePropertyName();

    case FILE_DESC:
      return getFileDesc();

    case STATUS:
      return Integer.valueOf(getStatus());

    case FILE_NAME:
      return getFileName();

    case FILE_TYPE:
      return getFileType();

    case FILE_SIZE:
      return Integer.valueOf(getFileSize());

    case FILE_URL:
      return getFileUrl();

    case UPLOAD_DTTM:
      return getUploadDttm();

    case CUS_TYPE:
      return getCusType();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_ID:
      return isSetDataId();
    case PROJECT_ID:
      return isSetProjectId();
    case FILE_ID:
      return isSetFileId();
    case UPLOAD_USER_ID:
      return isSetUploadUserId();
    case FILE_PROPERTY:
      return isSetFileProperty();
    case FILE_PROPERTY_NAME:
      return isSetFilePropertyName();
    case FILE_DESC:
      return isSetFileDesc();
    case STATUS:
      return isSetStatus();
    case FILE_NAME:
      return isSetFileName();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_SIZE:
      return isSetFileSize();
    case FILE_URL:
      return isSetFileUrl();
    case UPLOAD_DTTM:
      return isSetUploadDttm();
    case CUS_TYPE:
      return isSetCusType();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case REF_ID:
      return isSetRefId();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileInfo)
      return this.equals((FileInfo)that);
    return false;
  }

  public boolean equals(FileInfo that) {
    if (that == null)
      return false;

    boolean this_present_dataId = true;
    boolean that_present_dataId = true;
    if (this_present_dataId || that_present_dataId) {
      if (!(this_present_dataId && that_present_dataId))
        return false;
      if (this.dataId != that.dataId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_uploadUserId = true;
    boolean that_present_uploadUserId = true;
    if (this_present_uploadUserId || that_present_uploadUserId) {
      if (!(this_present_uploadUserId && that_present_uploadUserId))
        return false;
      if (this.uploadUserId != that.uploadUserId)
        return false;
    }

    boolean this_present_fileProperty = true;
    boolean that_present_fileProperty = true;
    if (this_present_fileProperty || that_present_fileProperty) {
      if (!(this_present_fileProperty && that_present_fileProperty))
        return false;
      if (this.fileProperty != that.fileProperty)
        return false;
    }

    boolean this_present_filePropertyName = true && this.isSetFilePropertyName();
    boolean that_present_filePropertyName = true && that.isSetFilePropertyName();
    if (this_present_filePropertyName || that_present_filePropertyName) {
      if (!(this_present_filePropertyName && that_present_filePropertyName))
        return false;
      if (!this.filePropertyName.equals(that.filePropertyName))
        return false;
    }

    boolean this_present_fileDesc = true && this.isSetFileDesc();
    boolean that_present_fileDesc = true && that.isSetFileDesc();
    if (this_present_fileDesc || that_present_fileDesc) {
      if (!(this_present_fileDesc && that_present_fileDesc))
        return false;
      if (!this.fileDesc.equals(that.fileDesc))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_fileUrl = true && this.isSetFileUrl();
    boolean that_present_fileUrl = true && that.isSetFileUrl();
    if (this_present_fileUrl || that_present_fileUrl) {
      if (!(this_present_fileUrl && that_present_fileUrl))
        return false;
      if (!this.fileUrl.equals(that.fileUrl))
        return false;
    }

    boolean this_present_uploadDttm = true && this.isSetUploadDttm();
    boolean that_present_uploadDttm = true && that.isSetUploadDttm();
    if (this_present_uploadDttm || that_present_uploadDttm) {
      if (!(this_present_uploadDttm && that_present_uploadDttm))
        return false;
      if (!this.uploadDttm.equals(that.uploadDttm))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dataId = true;
    list.add(present_dataId);
    if (present_dataId)
      list.add(dataId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_uploadUserId = true;
    list.add(present_uploadUserId);
    if (present_uploadUserId)
      list.add(uploadUserId);

    boolean present_fileProperty = true;
    list.add(present_fileProperty);
    if (present_fileProperty)
      list.add(fileProperty);

    boolean present_filePropertyName = true && (isSetFilePropertyName());
    list.add(present_filePropertyName);
    if (present_filePropertyName)
      list.add(filePropertyName);

    boolean present_fileDesc = true && (isSetFileDesc());
    list.add(present_fileDesc);
    if (present_fileDesc)
      list.add(fileDesc);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileType = true && (isSetFileType());
    list.add(present_fileType);
    if (present_fileType)
      list.add(fileType);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_fileUrl = true && (isSetFileUrl());
    list.add(present_fileUrl);
    if (present_fileUrl)
      list.add(fileUrl);

    boolean present_uploadDttm = true && (isSetUploadDttm());
    list.add(present_uploadDttm);
    if (present_uploadDttm)
      list.add(uploadDttm);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDataId()).compareTo(other.isSetDataId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataId, other.dataId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadUserId()).compareTo(other.isSetUploadUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadUserId, other.uploadUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileProperty()).compareTo(other.isSetFileProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileProperty, other.fileProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePropertyName()).compareTo(other.isSetFilePropertyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePropertyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePropertyName, other.filePropertyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileDesc()).compareTo(other.isSetFileDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDesc, other.fileDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileUrl()).compareTo(other.isSetFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUrl, other.fileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadDttm()).compareTo(other.isSetUploadDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadDttm, other.uploadDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileInfo(");
    boolean first = true;

    sb.append("dataId:");
    sb.append(this.dataId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadUserId:");
    sb.append(this.uploadUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileProperty:");
    sb.append(this.fileProperty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filePropertyName:");
    if (this.filePropertyName == null) {
      sb.append("null");
    } else {
      sb.append(this.filePropertyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileDesc:");
    if (this.fileDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.fileDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileUrl:");
    if (this.fileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadDttm:");
    if (this.uploadDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileInfoStandardSchemeFactory implements SchemeFactory {
    public FileInfoStandardScheme getScheme() {
      return new FileInfoStandardScheme();
    }
  }

  private static class FileInfoStandardScheme extends StandardScheme<FileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataId = iprot.readI32();
              struct.setDataIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPLOAD_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uploadUserId = iprot.readI32();
              struct.setUploadUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileProperty = iprot.readI32();
              struct.setFilePropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_PROPERTY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePropertyName = iprot.readString();
              struct.setFilePropertyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileDesc = iprot.readString();
              struct.setFileDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileType = iprot.readString();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSize = iprot.readI32();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileUrl = iprot.readString();
              struct.setFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPLOAD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadDttm = iprot.readString();
              struct.setUploadDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DATA_ID_FIELD_DESC);
      oprot.writeI32(struct.dataId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPLOAD_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.uploadUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_PROPERTY_FIELD_DESC);
      oprot.writeI32(struct.fileProperty);
      oprot.writeFieldEnd();
      if (struct.filePropertyName != null) {
        oprot.writeFieldBegin(FILE_PROPERTY_NAME_FIELD_DESC);
        oprot.writeString(struct.filePropertyName);
        oprot.writeFieldEnd();
      }
      if (struct.fileDesc != null) {
        oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
        oprot.writeString(struct.fileDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fileSize);
      oprot.writeFieldEnd();
      if (struct.fileUrl != null) {
        oprot.writeFieldBegin(FILE_URL_FIELD_DESC);
        oprot.writeString(struct.fileUrl);
        oprot.writeFieldEnd();
      }
      if (struct.uploadDttm != null) {
        oprot.writeFieldBegin(UPLOAD_DTTM_FIELD_DESC);
        oprot.writeString(struct.uploadDttm);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileInfoTupleSchemeFactory implements SchemeFactory {
    public FileInfoTupleScheme getScheme() {
      return new FileInfoTupleScheme();
    }
  }

  private static class FileInfoTupleScheme extends TupleScheme<FileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDataId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetFileId()) {
        optionals.set(2);
      }
      if (struct.isSetUploadUserId()) {
        optionals.set(3);
      }
      if (struct.isSetFileProperty()) {
        optionals.set(4);
      }
      if (struct.isSetFilePropertyName()) {
        optionals.set(5);
      }
      if (struct.isSetFileDesc()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetFileName()) {
        optionals.set(8);
      }
      if (struct.isSetFileType()) {
        optionals.set(9);
      }
      if (struct.isSetFileSize()) {
        optionals.set(10);
      }
      if (struct.isSetFileUrl()) {
        optionals.set(11);
      }
      if (struct.isSetUploadDttm()) {
        optionals.set(12);
      }
      if (struct.isSetCusType()) {
        optionals.set(13);
      }
      if (struct.isSetPage()) {
        optionals.set(14);
      }
      if (struct.isSetRows()) {
        optionals.set(15);
      }
      if (struct.isSetRefId()) {
        optionals.set(16);
      }
      if (struct.isSetUserId()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetDataId()) {
        oprot.writeI32(struct.dataId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetUploadUserId()) {
        oprot.writeI32(struct.uploadUserId);
      }
      if (struct.isSetFileProperty()) {
        oprot.writeI32(struct.fileProperty);
      }
      if (struct.isSetFilePropertyName()) {
        oprot.writeString(struct.filePropertyName);
      }
      if (struct.isSetFileDesc()) {
        oprot.writeString(struct.fileDesc);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFileType()) {
        oprot.writeString(struct.fileType);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI32(struct.fileSize);
      }
      if (struct.isSetFileUrl()) {
        oprot.writeString(struct.fileUrl);
      }
      if (struct.isSetUploadDttm()) {
        oprot.writeString(struct.uploadDttm);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.dataId = iprot.readI32();
        struct.setDataIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.uploadUserId = iprot.readI32();
        struct.setUploadUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileProperty = iprot.readI32();
        struct.setFilePropertyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.filePropertyName = iprot.readString();
        struct.setFilePropertyNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fileDesc = iprot.readString();
        struct.setFileDescIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fileType = iprot.readString();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fileSize = iprot.readI32();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fileUrl = iprot.readString();
        struct.setFileUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.uploadDttm = iprot.readString();
        struct.setUploadDttmIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
    }
  }

}


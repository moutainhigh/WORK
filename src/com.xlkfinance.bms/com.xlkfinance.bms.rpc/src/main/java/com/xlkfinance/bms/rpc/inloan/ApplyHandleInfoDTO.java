/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class ApplyHandleInfoDTO implements org.apache.thrift.TBase<ApplyHandleInfoDTO, ApplyHandleInfoDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyHandleInfoDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyHandleInfoDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("subDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTACT_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("contactPerson", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTACT_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("contactPhone", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HANDLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SPECIAL_CASE_FIELD_DESC = new org.apache.thrift.protocol.TField("specialCase", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FEEDBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("feedback", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplyHandleInfoDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplyHandleInfoDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int handleId; // required
  public String subDate; // required
  public String contactPerson; // required
  public String contactPhone; // required
  public String handleDate; // required
  public String specialCase; // required
  public String feedback; // required
  public String remark; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public int projectId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    HANDLE_ID((short)2, "handleId"),
    SUB_DATE((short)3, "subDate"),
    CONTACT_PERSON((short)4, "contactPerson"),
    CONTACT_PHONE((short)5, "contactPhone"),
    HANDLE_DATE((short)6, "handleDate"),
    SPECIAL_CASE((short)7, "specialCase"),
    FEEDBACK((short)8, "feedback"),
    REMARK((short)9, "remark"),
    CREATER_ID((short)10, "createrId"),
    USER_IDS((short)11, "userIds"),
    PAGE((short)12, "page"),
    ROWS((short)13, "rows"),
    PROJECT_ID((short)14, "projectId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // HANDLE_ID
          return HANDLE_ID;
        case 3: // SUB_DATE
          return SUB_DATE;
        case 4: // CONTACT_PERSON
          return CONTACT_PERSON;
        case 5: // CONTACT_PHONE
          return CONTACT_PHONE;
        case 6: // HANDLE_DATE
          return HANDLE_DATE;
        case 7: // SPECIAL_CASE
          return SPECIAL_CASE;
        case 8: // FEEDBACK
          return FEEDBACK;
        case 9: // REMARK
          return REMARK;
        case 10: // CREATER_ID
          return CREATER_ID;
        case 11: // USER_IDS
          return USER_IDS;
        case 12: // PAGE
          return PAGE;
        case 13: // ROWS
          return ROWS;
        case 14: // PROJECT_ID
          return PROJECT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __HANDLEID_ISSET_ID = 1;
  private static final int __CREATERID_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __PROJECTID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_DATE, new org.apache.thrift.meta_data.FieldMetaData("subDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_PERSON, new org.apache.thrift.meta_data.FieldMetaData("contactPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_PHONE, new org.apache.thrift.meta_data.FieldMetaData("contactPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("handleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIAL_CASE, new org.apache.thrift.meta_data.FieldMetaData("specialCase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEEDBACK, new org.apache.thrift.meta_data.FieldMetaData("feedback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyHandleInfoDTO.class, metaDataMap);
  }

  public ApplyHandleInfoDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public ApplyHandleInfoDTO(
    int pid,
    int handleId,
    String subDate,
    String contactPerson,
    String contactPhone,
    String handleDate,
    String specialCase,
    String feedback,
    String remark,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows,
    int projectId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.handleId = handleId;
    setHandleIdIsSet(true);
    this.subDate = subDate;
    this.contactPerson = contactPerson;
    this.contactPhone = contactPhone;
    this.handleDate = handleDate;
    this.specialCase = specialCase;
    this.feedback = feedback;
    this.remark = remark;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplyHandleInfoDTO(ApplyHandleInfoDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.handleId = other.handleId;
    if (other.isSetSubDate()) {
      this.subDate = other.subDate;
    }
    if (other.isSetContactPerson()) {
      this.contactPerson = other.contactPerson;
    }
    if (other.isSetContactPhone()) {
      this.contactPhone = other.contactPhone;
    }
    if (other.isSetHandleDate()) {
      this.handleDate = other.handleDate;
    }
    if (other.isSetSpecialCase()) {
      this.specialCase = other.specialCase;
    }
    if (other.isSetFeedback()) {
      this.feedback = other.feedback;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.projectId = other.projectId;
  }

  public ApplyHandleInfoDTO deepCopy() {
    return new ApplyHandleInfoDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setHandleIdIsSet(false);
    this.handleId = 0;
    this.subDate = null;
    this.contactPerson = null;
    this.contactPhone = null;
    this.handleDate = null;
    this.specialCase = null;
    this.feedback = null;
    this.remark = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    setProjectIdIsSet(false);
    this.projectId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ApplyHandleInfoDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getHandleId() {
    return this.handleId;
  }

  public ApplyHandleInfoDTO setHandleId(int handleId) {
    this.handleId = handleId;
    setHandleIdIsSet(true);
    return this;
  }

  public void unsetHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  public void setHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
  }

  public String getSubDate() {
    return this.subDate;
  }

  public ApplyHandleInfoDTO setSubDate(String subDate) {
    this.subDate = subDate;
    return this;
  }

  public void unsetSubDate() {
    this.subDate = null;
  }

  /** Returns true if field subDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSubDate() {
    return this.subDate != null;
  }

  public void setSubDateIsSet(boolean value) {
    if (!value) {
      this.subDate = null;
    }
  }

  public String getContactPerson() {
    return this.contactPerson;
  }

  public ApplyHandleInfoDTO setContactPerson(String contactPerson) {
    this.contactPerson = contactPerson;
    return this;
  }

  public void unsetContactPerson() {
    this.contactPerson = null;
  }

  /** Returns true if field contactPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetContactPerson() {
    return this.contactPerson != null;
  }

  public void setContactPersonIsSet(boolean value) {
    if (!value) {
      this.contactPerson = null;
    }
  }

  public String getContactPhone() {
    return this.contactPhone;
  }

  public ApplyHandleInfoDTO setContactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
    return this;
  }

  public void unsetContactPhone() {
    this.contactPhone = null;
  }

  /** Returns true if field contactPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetContactPhone() {
    return this.contactPhone != null;
  }

  public void setContactPhoneIsSet(boolean value) {
    if (!value) {
      this.contactPhone = null;
    }
  }

  public String getHandleDate() {
    return this.handleDate;
  }

  public ApplyHandleInfoDTO setHandleDate(String handleDate) {
    this.handleDate = handleDate;
    return this;
  }

  public void unsetHandleDate() {
    this.handleDate = null;
  }

  /** Returns true if field handleDate is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleDate() {
    return this.handleDate != null;
  }

  public void setHandleDateIsSet(boolean value) {
    if (!value) {
      this.handleDate = null;
    }
  }

  public String getSpecialCase() {
    return this.specialCase;
  }

  public ApplyHandleInfoDTO setSpecialCase(String specialCase) {
    this.specialCase = specialCase;
    return this;
  }

  public void unsetSpecialCase() {
    this.specialCase = null;
  }

  /** Returns true if field specialCase is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialCase() {
    return this.specialCase != null;
  }

  public void setSpecialCaseIsSet(boolean value) {
    if (!value) {
      this.specialCase = null;
    }
  }

  public String getFeedback() {
    return this.feedback;
  }

  public ApplyHandleInfoDTO setFeedback(String feedback) {
    this.feedback = feedback;
    return this;
  }

  public void unsetFeedback() {
    this.feedback = null;
  }

  /** Returns true if field feedback is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedback() {
    return this.feedback != null;
  }

  public void setFeedbackIsSet(boolean value) {
    if (!value) {
      this.feedback = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ApplyHandleInfoDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public ApplyHandleInfoDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ApplyHandleInfoDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ApplyHandleInfoDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ApplyHandleInfoDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ApplyHandleInfoDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case HANDLE_ID:
      if (value == null) {
        unsetHandleId();
      } else {
        setHandleId((Integer)value);
      }
      break;

    case SUB_DATE:
      if (value == null) {
        unsetSubDate();
      } else {
        setSubDate((String)value);
      }
      break;

    case CONTACT_PERSON:
      if (value == null) {
        unsetContactPerson();
      } else {
        setContactPerson((String)value);
      }
      break;

    case CONTACT_PHONE:
      if (value == null) {
        unsetContactPhone();
      } else {
        setContactPhone((String)value);
      }
      break;

    case HANDLE_DATE:
      if (value == null) {
        unsetHandleDate();
      } else {
        setHandleDate((String)value);
      }
      break;

    case SPECIAL_CASE:
      if (value == null) {
        unsetSpecialCase();
      } else {
        setSpecialCase((String)value);
      }
      break;

    case FEEDBACK:
      if (value == null) {
        unsetFeedback();
      } else {
        setFeedback((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case HANDLE_ID:
      return Integer.valueOf(getHandleId());

    case SUB_DATE:
      return getSubDate();

    case CONTACT_PERSON:
      return getContactPerson();

    case CONTACT_PHONE:
      return getContactPhone();

    case HANDLE_DATE:
      return getHandleDate();

    case SPECIAL_CASE:
      return getSpecialCase();

    case FEEDBACK:
      return getFeedback();

    case REMARK:
      return getRemark();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case HANDLE_ID:
      return isSetHandleId();
    case SUB_DATE:
      return isSetSubDate();
    case CONTACT_PERSON:
      return isSetContactPerson();
    case CONTACT_PHONE:
      return isSetContactPhone();
    case HANDLE_DATE:
      return isSetHandleDate();
    case SPECIAL_CASE:
      return isSetSpecialCase();
    case FEEDBACK:
      return isSetFeedback();
    case REMARK:
      return isSetRemark();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PROJECT_ID:
      return isSetProjectId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplyHandleInfoDTO)
      return this.equals((ApplyHandleInfoDTO)that);
    return false;
  }

  public boolean equals(ApplyHandleInfoDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_handleId = true;
    boolean that_present_handleId = true;
    if (this_present_handleId || that_present_handleId) {
      if (!(this_present_handleId && that_present_handleId))
        return false;
      if (this.handleId != that.handleId)
        return false;
    }

    boolean this_present_subDate = true && this.isSetSubDate();
    boolean that_present_subDate = true && that.isSetSubDate();
    if (this_present_subDate || that_present_subDate) {
      if (!(this_present_subDate && that_present_subDate))
        return false;
      if (!this.subDate.equals(that.subDate))
        return false;
    }

    boolean this_present_contactPerson = true && this.isSetContactPerson();
    boolean that_present_contactPerson = true && that.isSetContactPerson();
    if (this_present_contactPerson || that_present_contactPerson) {
      if (!(this_present_contactPerson && that_present_contactPerson))
        return false;
      if (!this.contactPerson.equals(that.contactPerson))
        return false;
    }

    boolean this_present_contactPhone = true && this.isSetContactPhone();
    boolean that_present_contactPhone = true && that.isSetContactPhone();
    if (this_present_contactPhone || that_present_contactPhone) {
      if (!(this_present_contactPhone && that_present_contactPhone))
        return false;
      if (!this.contactPhone.equals(that.contactPhone))
        return false;
    }

    boolean this_present_handleDate = true && this.isSetHandleDate();
    boolean that_present_handleDate = true && that.isSetHandleDate();
    if (this_present_handleDate || that_present_handleDate) {
      if (!(this_present_handleDate && that_present_handleDate))
        return false;
      if (!this.handleDate.equals(that.handleDate))
        return false;
    }

    boolean this_present_specialCase = true && this.isSetSpecialCase();
    boolean that_present_specialCase = true && that.isSetSpecialCase();
    if (this_present_specialCase || that_present_specialCase) {
      if (!(this_present_specialCase && that_present_specialCase))
        return false;
      if (!this.specialCase.equals(that.specialCase))
        return false;
    }

    boolean this_present_feedback = true && this.isSetFeedback();
    boolean that_present_feedback = true && that.isSetFeedback();
    if (this_present_feedback || that_present_feedback) {
      if (!(this_present_feedback && that_present_feedback))
        return false;
      if (!this.feedback.equals(that.feedback))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_handleId = true;
    list.add(present_handleId);
    if (present_handleId)
      list.add(handleId);

    boolean present_subDate = true && (isSetSubDate());
    list.add(present_subDate);
    if (present_subDate)
      list.add(subDate);

    boolean present_contactPerson = true && (isSetContactPerson());
    list.add(present_contactPerson);
    if (present_contactPerson)
      list.add(contactPerson);

    boolean present_contactPhone = true && (isSetContactPhone());
    list.add(present_contactPhone);
    if (present_contactPhone)
      list.add(contactPhone);

    boolean present_handleDate = true && (isSetHandleDate());
    list.add(present_handleDate);
    if (present_handleDate)
      list.add(handleDate);

    boolean present_specialCase = true && (isSetSpecialCase());
    list.add(present_specialCase);
    if (present_specialCase)
      list.add(specialCase);

    boolean present_feedback = true && (isSetFeedback());
    list.add(present_feedback);
    if (present_feedback)
      list.add(feedback);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ApplyHandleInfoDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubDate()).compareTo(other.isSetSubDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subDate, other.subDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactPerson()).compareTo(other.isSetContactPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactPerson, other.contactPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactPhone()).compareTo(other.isSetContactPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactPhone, other.contactPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleDate()).compareTo(other.isSetHandleDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDate, other.handleDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialCase()).compareTo(other.isSetSpecialCase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialCase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialCase, other.specialCase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedback()).compareTo(other.isSetFeedback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedback, other.feedback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplyHandleInfoDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleId:");
    sb.append(this.handleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subDate:");
    if (this.subDate == null) {
      sb.append("null");
    } else {
      sb.append(this.subDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactPerson:");
    if (this.contactPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.contactPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactPhone:");
    if (this.contactPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.contactPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleDate:");
    if (this.handleDate == null) {
      sb.append("null");
    } else {
      sb.append(this.handleDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialCase:");
    if (this.specialCase == null) {
      sb.append("null");
    } else {
      sb.append(this.specialCase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feedback:");
    if (this.feedback == null) {
      sb.append("null");
    } else {
      sb.append(this.feedback);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplyHandleInfoDTOStandardSchemeFactory implements SchemeFactory {
    public ApplyHandleInfoDTOStandardScheme getScheme() {
      return new ApplyHandleInfoDTOStandardScheme();
    }
  }

  private static class ApplyHandleInfoDTOStandardScheme extends StandardScheme<ApplyHandleInfoDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyHandleInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleId = iprot.readI32();
              struct.setHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subDate = iprot.readString();
              struct.setSubDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTACT_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactPerson = iprot.readString();
              struct.setContactPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTACT_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactPhone = iprot.readString();
              struct.setContactPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HANDLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleDate = iprot.readString();
              struct.setHandleDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPECIAL_CASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specialCase = iprot.readString();
              struct.setSpecialCaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FEEDBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feedback = iprot.readString();
              struct.setFeedbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list64.size);
                int _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = iprot.readI32();
                  struct.userIds.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyHandleInfoDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.handleId);
      oprot.writeFieldEnd();
      if (struct.subDate != null) {
        oprot.writeFieldBegin(SUB_DATE_FIELD_DESC);
        oprot.writeString(struct.subDate);
        oprot.writeFieldEnd();
      }
      if (struct.contactPerson != null) {
        oprot.writeFieldBegin(CONTACT_PERSON_FIELD_DESC);
        oprot.writeString(struct.contactPerson);
        oprot.writeFieldEnd();
      }
      if (struct.contactPhone != null) {
        oprot.writeFieldBegin(CONTACT_PHONE_FIELD_DESC);
        oprot.writeString(struct.contactPhone);
        oprot.writeFieldEnd();
      }
      if (struct.handleDate != null) {
        oprot.writeFieldBegin(HANDLE_DATE_FIELD_DESC);
        oprot.writeString(struct.handleDate);
        oprot.writeFieldEnd();
      }
      if (struct.specialCase != null) {
        oprot.writeFieldBegin(SPECIAL_CASE_FIELD_DESC);
        oprot.writeString(struct.specialCase);
        oprot.writeFieldEnd();
      }
      if (struct.feedback != null) {
        oprot.writeFieldBegin(FEEDBACK_FIELD_DESC);
        oprot.writeString(struct.feedback);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter67 : struct.userIds)
          {
            oprot.writeI32(_iter67);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplyHandleInfoDTOTupleSchemeFactory implements SchemeFactory {
    public ApplyHandleInfoDTOTupleScheme getScheme() {
      return new ApplyHandleInfoDTOTupleScheme();
    }
  }

  private static class ApplyHandleInfoDTOTupleScheme extends TupleScheme<ApplyHandleInfoDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplyHandleInfoDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetHandleId()) {
        optionals.set(1);
      }
      if (struct.isSetSubDate()) {
        optionals.set(2);
      }
      if (struct.isSetContactPerson()) {
        optionals.set(3);
      }
      if (struct.isSetContactPhone()) {
        optionals.set(4);
      }
      if (struct.isSetHandleDate()) {
        optionals.set(5);
      }
      if (struct.isSetSpecialCase()) {
        optionals.set(6);
      }
      if (struct.isSetFeedback()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(9);
      }
      if (struct.isSetUserIds()) {
        optionals.set(10);
      }
      if (struct.isSetPage()) {
        optionals.set(11);
      }
      if (struct.isSetRows()) {
        optionals.set(12);
      }
      if (struct.isSetProjectId()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetHandleId()) {
        oprot.writeI32(struct.handleId);
      }
      if (struct.isSetSubDate()) {
        oprot.writeString(struct.subDate);
      }
      if (struct.isSetContactPerson()) {
        oprot.writeString(struct.contactPerson);
      }
      if (struct.isSetContactPhone()) {
        oprot.writeString(struct.contactPhone);
      }
      if (struct.isSetHandleDate()) {
        oprot.writeString(struct.handleDate);
      }
      if (struct.isSetSpecialCase()) {
        oprot.writeString(struct.specialCase);
      }
      if (struct.isSetFeedback()) {
        oprot.writeString(struct.feedback);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter68 : struct.userIds)
          {
            oprot.writeI32(_iter68);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplyHandleInfoDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.handleId = iprot.readI32();
        struct.setHandleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subDate = iprot.readString();
        struct.setSubDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contactPerson = iprot.readString();
        struct.setContactPersonIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contactPhone = iprot.readString();
        struct.setContactPhoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.handleDate = iprot.readString();
        struct.setHandleDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.specialCase = iprot.readString();
        struct.setSpecialCaseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.feedback = iprot.readString();
        struct.setFeedbackIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list69.size);
          int _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readI32();
            struct.userIds.add(_elem70);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
    }
  }

}


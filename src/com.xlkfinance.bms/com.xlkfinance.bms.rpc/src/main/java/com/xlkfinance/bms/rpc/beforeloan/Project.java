/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-10")
public class Project implements org.apache.thrift.TBase<Project, Project._Fields>, java.io.Serializable, Cloneable, Comparable<Project> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Project");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("projectTypeText", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCatelog", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATELOG_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCatelogText", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessTypeText", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FLOW_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("flowCatelog", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField FLOW_CATELOG_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("flowCatelogText", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("myType", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField MY_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("myTypeText", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MY_MAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("myMain", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField MY_MAIN_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("myMainText", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecord", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecordText", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecordNo", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecord", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecordText", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecordNo", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFee", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFeeText", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFeeNo", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField IS_ALLOW_PREPAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isAllowPrepay", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField IS_ALLOW_PREPAY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("isAllowPrepayText", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField IS_RETURN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("isReturnInterest", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField IS_RETURN_INTEREST_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("isReturnInterestText", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField PERSON_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("personIds", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField BEGIN_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("beginRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField END_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("endRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("acctTypeText", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField CREDTI_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("credtiStartDt", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField CREDTI_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("credtiEndDt", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
  private static final org.apache.thrift.protocol.TField IS_HOOP_FIELD_DESC = new org.apache.thrift.protocol.TField("isHoop", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField DATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateMode", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField REPAY_FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("repayFun", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycleType", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycleDate", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField REPAY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("repayOption", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)57);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)58);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)59);
  private static final org.apache.thrift.protocol.TField YEAR_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("yearLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)60);
  private static final org.apache.thrift.protocol.TField YEAR_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("yearLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)61);
  private static final org.apache.thrift.protocol.TField YEAR_LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("yearLoanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)62);
  private static final org.apache.thrift.protocol.TField DAY_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)63);
  private static final org.apache.thrift.protocol.TField DAY_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)64);
  private static final org.apache.thrift.protocol.TField DAY_LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLoanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)65);
  private static final org.apache.thrift.protocol.TField LIQ_DMG_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("liqDmgProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)66);
  private static final org.apache.thrift.protocol.TField OVERDUE_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)67);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)68);
  private static final org.apache.thrift.protocol.TField MIS_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("misFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)69);
  private static final org.apache.thrift.protocol.TField PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prepayLiqDmgProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)70);
  private static final org.apache.thrift.protocol.TField CIRCULATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("circulateType", org.apache.thrift.protocol.TType.I32, (short)71);
  private static final org.apache.thrift.protocol.TField ABBREVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("abbreviation", org.apache.thrift.protocol.TType.STRING, (short)72);
  private static final org.apache.thrift.protocol.TField USER_PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userPids", org.apache.thrift.protocol.TType.STRING, (short)73);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)74);
  private static final org.apache.thrift.protocol.TField SURVEY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("surveyResult", org.apache.thrift.protocol.TType.STRING, (short)75);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatusVal", org.apache.thrift.protocol.TType.STRING, (short)76);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTradeText", org.apache.thrift.protocol.TType.STRING, (short)77);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.STRING, (short)78);
  private static final org.apache.thrift.protocol.TField ASS_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("assWay", org.apache.thrift.protocol.TType.STRING, (short)79);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)80);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)81);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)82);
  private static final org.apache.thrift.protocol.TField BEGIN_COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("beginCompleteDttm", org.apache.thrift.protocol.TType.STRING, (short)83);
  private static final org.apache.thrift.protocol.TField END_COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("endCompleteDttm", org.apache.thrift.protocol.TType.STRING, (short)84);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)85);
  private static final org.apache.thrift.protocol.TField REPAY_OPTION_TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("repayOptionTest", org.apache.thrift.protocol.TType.I32, (short)86);
  private static final org.apache.thrift.protocol.TField EACHISSUE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("eachissueOption", org.apache.thrift.protocol.TType.I32, (short)87);
  private static final org.apache.thrift.protocol.TField FEES_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("feesProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)88);
  private static final org.apache.thrift.protocol.TField CREDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creditId", org.apache.thrift.protocol.TType.I32, (short)89);
  private static final org.apache.thrift.protocol.TField EXTENSION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionNum", org.apache.thrift.protocol.TType.I32, (short)90);
  private static final org.apache.thrift.protocol.TField EXTENSION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)91);
  private static final org.apache.thrift.protocol.TField LIMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("limitId", org.apache.thrift.protocol.TType.I32, (short)92);
  private static final org.apache.thrift.protocol.TField NOW_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nowUserId", org.apache.thrift.protocol.TType.I32, (short)93);
  private static final org.apache.thrift.protocol.TField CREDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("creditStatus", org.apache.thrift.protocol.TType.I32, (short)94);
  private static final org.apache.thrift.protocol.TField REPAY_FUN_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("repayFunText", org.apache.thrift.protocol.TType.STRING, (short)95);
  private static final org.apache.thrift.protocol.TField ASS_WAY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("assWayText", org.apache.thrift.protocol.TType.STRING, (short)96);
  private static final org.apache.thrift.protocol.TField JUDGE_REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("judgeRepayCycle", org.apache.thrift.protocol.TType.I32, (short)97);
  private static final org.apache.thrift.protocol.TField OLD_PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldProjectId", org.apache.thrift.protocol.TType.I32, (short)98);
  private static final org.apache.thrift.protocol.TField PROJECT_GUARANTEE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectGuarantee", org.apache.thrift.protocol.TType.STRUCT, (short)99);
  private static final org.apache.thrift.protocol.TField PROJECT_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("projectProperty", org.apache.thrift.protocol.TType.STRUCT, (short)100);
  private static final org.apache.thrift.protocol.TField PROJECT_FORECLOSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectForeclosure", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)102);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)103);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)104);
  private static final org.apache.thrift.protocol.TField BUSINESS_CONTACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("businessContacts", org.apache.thrift.protocol.TType.STRING, (short)105);
  private static final org.apache.thrift.protocol.TField CONTACTS_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("contactsPhone", org.apache.thrift.protocol.TType.STRING, (short)106);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOut", org.apache.thrift.protocol.TType.I32, (short)107);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCategory", org.apache.thrift.protocol.TType.I32, (short)108);
  private static final org.apache.thrift.protocol.TField IS_NOTARIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotarization", org.apache.thrift.protocol.TType.I32, (short)109);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.I32, (short)110);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)111);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)112);
  private static final org.apache.thrift.protocol.TField MANAGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("managers", org.apache.thrift.protocol.TType.STRING, (short)113);
  private static final org.apache.thrift.protocol.TField MANAGERS_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("managersPhone", org.apache.thrift.protocol.TType.STRING, (short)114);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)115);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)116);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanBank", org.apache.thrift.protocol.TType.STRING, (short)117);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)118);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)119);
  private static final org.apache.thrift.protocol.TField EXTENSION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDate", org.apache.thrift.protocol.TType.STRING, (short)120);
  private static final org.apache.thrift.protocol.TField EXTENSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionRate", org.apache.thrift.protocol.TType.DOUBLE, (short)121);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceNo", org.apache.thrift.protocol.TType.I32, (short)122);
  private static final org.apache.thrift.protocol.TField COLLECT_FILE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFileStatus", org.apache.thrift.protocol.TType.I32, (short)123);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)124);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)125);
  private static final org.apache.thrift.protocol.TField FORE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("foreList", org.apache.thrift.protocol.TType.LIST, (short)126);
  private static final org.apache.thrift.protocol.TField AUDITOR_OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("auditorOpinion", org.apache.thrift.protocol.TType.STRING, (short)127);
  private static final org.apache.thrift.protocol.TField SPECIAL_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDesc", org.apache.thrift.protocol.TType.STRING, (short)128);
  private static final org.apache.thrift.protocol.TField DECLARATION_FIELD_DESC = new org.apache.thrift.protocol.TField("declaration", org.apache.thrift.protocol.TType.STRING, (short)129);
  private static final org.apache.thrift.protocol.TField IS_SELLER_FIELD_DESC = new org.apache.thrift.protocol.TField("isSeller", org.apache.thrift.protocol.TType.I32, (short)130);
  private static final org.apache.thrift.protocol.TField REFUND_FILE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFileStatus", org.apache.thrift.protocol.TType.I32, (short)131);
  private static final org.apache.thrift.protocol.TField CHECHAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanDate", org.apache.thrift.protocol.TType.STRING, (short)132);
  private static final org.apache.thrift.protocol.TField CHECHAN_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanUserId", org.apache.thrift.protocol.TType.I32, (short)133);
  private static final org.apache.thrift.protocol.TField CHECHAN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanUserName", org.apache.thrift.protocol.TType.STRING, (short)134);
  private static final org.apache.thrift.protocol.TField CHECHAN_CAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanCause", org.apache.thrift.protocol.TType.STRING, (short)135);
  private static final org.apache.thrift.protocol.TField EXTENSION_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDays", org.apache.thrift.protocol.TType.I32, (short)136);
  private static final org.apache.thrift.protocol.TField SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceStr", org.apache.thrift.protocol.TType.STRING, (short)137);
  private static final org.apache.thrift.protocol.TField ORG_CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCustomerName", org.apache.thrift.protocol.TType.STRING, (short)140);
  private static final org.apache.thrift.protocol.TField ORG_CUSTOMER_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCustomerPhone", org.apache.thrift.protocol.TType.STRING, (short)141);
  private static final org.apache.thrift.protocol.TField ORG_CUSTOMER_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCustomerCard", org.apache.thrift.protocol.TType.STRING, (short)142);
  private static final org.apache.thrift.protocol.TField PLAN_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planLoanDate", org.apache.thrift.protocol.TType.STRING, (short)143);
  private static final org.apache.thrift.protocol.TField PLAN_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("planLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)144);
  private static final org.apache.thrift.protocol.TField LOAN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRate", org.apache.thrift.protocol.TType.DOUBLE, (short)145);
  private static final org.apache.thrift.protocol.TField MAX_LOAN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLoanRate", org.apache.thrift.protocol.TType.DOUBLE, (short)146);
  private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isClosed", org.apache.thrift.protocol.TType.I32, (short)147);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)148);
  private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)149);
  private static final org.apache.thrift.protocol.TField APPLY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyUserId", org.apache.thrift.protocol.TType.I32, (short)150);
  private static final org.apache.thrift.protocol.TField IS_NEED_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedHandle", org.apache.thrift.protocol.TType.I32, (short)151);
  private static final org.apache.thrift.protocol.TField CANCEL_GUARANTEE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelGuaranteeDate", org.apache.thrift.protocol.TType.STRING, (short)152);
  private static final org.apache.thrift.protocol.TField IS_NEED_FINANCIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedFinancial", org.apache.thrift.protocol.TType.I32, (short)153);
  private static final org.apache.thrift.protocol.TField ESTATE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("estateList", org.apache.thrift.protocol.TType.LIST, (short)154);
  private static final org.apache.thrift.protocol.TField HOUSE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("houseIds", org.apache.thrift.protocol.TType.STRING, (short)155);
  private static final org.apache.thrift.protocol.TField IS_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isReject", org.apache.thrift.protocol.TType.I32, (short)156);
  private static final org.apache.thrift.protocol.TField IS_ASSIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isAssigned", org.apache.thrift.protocol.TType.I32, (short)157);
  private static final org.apache.thrift.protocol.TField RECORD_CLERK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordClerkId", org.apache.thrift.protocol.TType.I32, (short)158);
  private static final org.apache.thrift.protocol.TField FORE_AFTER_MONITOR_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreAfterMonitorStatus", org.apache.thrift.protocol.TType.I32, (short)159);
  private static final org.apache.thrift.protocol.TField ORIGINAL_LOAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("originalLoanList", org.apache.thrift.protocol.TType.LIST, (short)160);
  private static final org.apache.thrift.protocol.TField ORIGINAL_LOAN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("originalLoanIds", org.apache.thrift.protocol.TType.STRING, (short)161);
  private static final org.apache.thrift.protocol.TField CUS_ENTERPRISE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cusEnterpriseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)162);
  private static final org.apache.thrift.protocol.TField CUS_CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("cusCredentials", org.apache.thrift.protocol.TType.STRUCT, (short)163);
  private static final org.apache.thrift.protocol.TField CUS_CARD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cusCardInfo", org.apache.thrift.protocol.TType.STRUCT, (short)164);
  private static final org.apache.thrift.protocol.TField CAPITAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("capitalName", org.apache.thrift.protocol.TType.STRING, (short)165);
  private static final org.apache.thrift.protocol.TField LOAN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanType", org.apache.thrift.protocol.TType.STRING, (short)166);
  private static final org.apache.thrift.protocol.TField NEXT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nextUserId", org.apache.thrift.protocol.TType.STRING, (short)167);
  private static final org.apache.thrift.protocol.TField PRO_CONTACT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("proContactIds", org.apache.thrift.protocol.TType.STRING, (short)168);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectTupleSchemeFactory());
  }

  public int pid; // required
  public int acctId; // required
  public int projectType; // required
  public String projectTypeText; // required
  public String projectName; // required
  public String projectNumber; // required
  public int pmUserId; // required
  public String realName; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public int status; // required
  public int businessCatelog; // required
  public String businessCatelogText; // required
  public int businessType; // required
  public String businessTypeText; // required
  public int flowCatelog; // required
  public String flowCatelogText; // required
  public int myType; // required
  public String myTypeText; // required
  public String myMain; // required
  public String myMainText; // required
  public int loanInterestRecord; // required
  public String loanInterestRecordText; // required
  public String loanInterestRecordNo; // required
  public int loanMgrRecord; // required
  public String loanMgrRecordText; // required
  public String loanMgrRecordNo; // required
  public int loanOtherFee; // required
  public String loanOtherFeeText; // required
  public String loanOtherFeeNo; // required
  public int isAllowPrepay; // required
  public String isAllowPrepayText; // required
  public int isReturnInterest; // required
  public String isReturnInterestText; // required
  public String personIds; // required
  public String beginRequestDttm; // required
  public String endRequestDttm; // required
  public String acctName; // required
  public int acctType; // required
  public String acctTypeText; // required
  public String credtiStartDt; // required
  public String credtiEndDt; // required
  public double creditAmt; // required
  public int isHoop; // required
  public double loanAmt; // required
  public int currency; // required
  public int dateMode; // required
  public int repayFun; // required
  public int repayCycleType; // required
  public int repayCycleDate; // required
  public int repayCycle; // required
  public String planOutLoanDt; // required
  public String planRepayLoanDt; // required
  public int repayOption; // required
  public int repayDate; // required
  public double monthLoanInterest; // required
  public double monthLoanMgr; // required
  public double monthLoanOtherFee; // required
  public double yearLoanInterest; // required
  public double yearLoanMgr; // required
  public double yearLoanOtherFee; // required
  public double dayLoanInterest; // required
  public double dayLoanMgr; // required
  public double dayLoanOtherFee; // required
  public double liqDmgProportion; // required
  public double overdueLoanInterest; // required
  public double overdueFineInterest; // required
  public double misFineInterest; // required
  public double prepayLiqDmgProportion; // required
  public int circulateType; // required
  public String abbreviation; // required
  public String userPids; // required
  public int cusType; // required
  public String surveyResult; // required
  public String requestStatusVal; // required
  public String ecoTradeText; // required
  public String ecoTrade; // required
  public String assWay; // required
  public int loanId; // required
  public int page; // required
  public int rows; // required
  public String beginCompleteDttm; // required
  public String endCompleteDttm; // required
  public String comments; // required
  public int repayOptionTest; // required
  public int eachissueOption; // required
  public double feesProportion; // required
  public int creditId; // required
  public int extensionNum; // required
  public double extensionAmt; // required
  public int limitId; // required
  public int nowUserId; // required
  public int creditStatus; // required
  public String repayFunText; // required
  public String assWayText; // required
  public int judgeRepayCycle; // required
  public int oldProjectId; // required
  public ProjectGuarantee projectGuarantee; // required
  public ProjectProperty projectProperty; // required
  public ProjectForeclosure projectForeclosure; // required
  public int productId; // required
  public int businessSource; // required
  public String address; // required
  public String businessContacts; // required
  public String contactsPhone; // required
  public int innerOrOut; // required
  public int businessCategory; // required
  public int isNotarization; // required
  public int isDelete; // required
  public int isChechan; // required
  public int productType; // required
  public String managers; // required
  public String managersPhone; // required
  public List<Integer> userIds; // required
  public int foreclosureStatus; // required
  public String oldLoanBank; // required
  public int orgId; // required
  public double extensionFee; // required
  public String extensionDate; // required
  public double extensionRate; // required
  public int businessSourceNo; // required
  public int collectFileStatus; // required
  public int projectSource; // required
  public String businessSourceStr; // required
  public List<ProjectForeInformation> foreList; // required
  public String auditorOpinion; // required
  public String specialDesc; // required
  public String declaration; // required
  public int isSeller; // required
  public int refundFileStatus; // required
  public String chechanDate; // required
  public int chechanUserId; // required
  public String chechanUserName; // required
  public String chechanCause; // required
  public int extensionDays; // required
  public String sourceStr; // required
  public String orgCustomerName; // required
  public String orgCustomerPhone; // required
  public String orgCustomerCard; // required
  public String planLoanDate; // required
  public double planLoanMoney; // required
  public double loanRate; // required
  public double maxLoanRate; // required
  public int isClosed; // required
  public String orgName; // required
  public String areaCode; // required
  public int applyUserId; // required
  public int isNeedHandle; // required
  public String cancelGuaranteeDate; // required
  public int isNeedFinancial; // required
  public List<BizProjectEstate> estateList; // required
  public String houseIds; // required
  public int isReject; // required
  public int isAssigned; // required
  public int recordClerkId; // required
  public int foreAfterMonitorStatus; // required
  public List<BizOriginalLoan> originalLoanList; // required
  public String originalLoanIds; // required
  public com.xlkfinance.bms.rpc.project.CusEnterpriseInfo cusEnterpriseInfo; // required
  public com.xlkfinance.bms.rpc.project.CusCredentials cusCredentials; // required
  public com.xlkfinance.bms.rpc.project.CusCardInfo cusCardInfo; // required
  public String capitalName; // required
  public String loanType; // required
  public String nextUserId; // required
  public String proContactIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACCT_ID((short)2, "acctId"),
    PROJECT_TYPE((short)3, "projectType"),
    PROJECT_TYPE_TEXT((short)4, "projectTypeText"),
    PROJECT_NAME((short)5, "projectName"),
    PROJECT_NUMBER((short)6, "projectNumber"),
    PM_USER_ID((short)7, "pmUserId"),
    REAL_NAME((short)8, "realName"),
    REQUEST_STATUS((short)9, "requestStatus"),
    REQUEST_DTTM((short)10, "requestDttm"),
    COMPLETE_DTTM((short)11, "completeDttm"),
    STATUS((short)12, "status"),
    BUSINESS_CATELOG((short)13, "businessCatelog"),
    BUSINESS_CATELOG_TEXT((short)14, "businessCatelogText"),
    BUSINESS_TYPE((short)15, "businessType"),
    BUSINESS_TYPE_TEXT((short)16, "businessTypeText"),
    FLOW_CATELOG((short)17, "flowCatelog"),
    FLOW_CATELOG_TEXT((short)18, "flowCatelogText"),
    MY_TYPE((short)19, "myType"),
    MY_TYPE_TEXT((short)20, "myTypeText"),
    MY_MAIN((short)21, "myMain"),
    MY_MAIN_TEXT((short)22, "myMainText"),
    LOAN_INTEREST_RECORD((short)23, "loanInterestRecord"),
    LOAN_INTEREST_RECORD_TEXT((short)24, "loanInterestRecordText"),
    LOAN_INTEREST_RECORD_NO((short)25, "loanInterestRecordNo"),
    LOAN_MGR_RECORD((short)26, "loanMgrRecord"),
    LOAN_MGR_RECORD_TEXT((short)27, "loanMgrRecordText"),
    LOAN_MGR_RECORD_NO((short)28, "loanMgrRecordNo"),
    LOAN_OTHER_FEE((short)29, "loanOtherFee"),
    LOAN_OTHER_FEE_TEXT((short)30, "loanOtherFeeText"),
    LOAN_OTHER_FEE_NO((short)31, "loanOtherFeeNo"),
    IS_ALLOW_PREPAY((short)32, "isAllowPrepay"),
    IS_ALLOW_PREPAY_TEXT((short)33, "isAllowPrepayText"),
    IS_RETURN_INTEREST((short)34, "isReturnInterest"),
    IS_RETURN_INTEREST_TEXT((short)35, "isReturnInterestText"),
    PERSON_IDS((short)36, "personIds"),
    BEGIN_REQUEST_DTTM((short)37, "beginRequestDttm"),
    END_REQUEST_DTTM((short)38, "endRequestDttm"),
    ACCT_NAME((short)39, "acctName"),
    ACCT_TYPE((short)40, "acctType"),
    ACCT_TYPE_TEXT((short)41, "acctTypeText"),
    CREDTI_START_DT((short)42, "credtiStartDt"),
    CREDTI_END_DT((short)43, "credtiEndDt"),
    CREDIT_AMT((short)44, "creditAmt"),
    IS_HOOP((short)45, "isHoop"),
    LOAN_AMT((short)46, "loanAmt"),
    CURRENCY((short)47, "currency"),
    DATE_MODE((short)48, "dateMode"),
    REPAY_FUN((short)49, "repayFun"),
    REPAY_CYCLE_TYPE((short)50, "repayCycleType"),
    REPAY_CYCLE_DATE((short)51, "repayCycleDate"),
    REPAY_CYCLE((short)52, "repayCycle"),
    PLAN_OUT_LOAN_DT((short)53, "planOutLoanDt"),
    PLAN_REPAY_LOAN_DT((short)54, "planRepayLoanDt"),
    REPAY_OPTION((short)55, "repayOption"),
    REPAY_DATE((short)56, "repayDate"),
    MONTH_LOAN_INTEREST((short)57, "monthLoanInterest"),
    MONTH_LOAN_MGR((short)58, "monthLoanMgr"),
    MONTH_LOAN_OTHER_FEE((short)59, "monthLoanOtherFee"),
    YEAR_LOAN_INTEREST((short)60, "yearLoanInterest"),
    YEAR_LOAN_MGR((short)61, "yearLoanMgr"),
    YEAR_LOAN_OTHER_FEE((short)62, "yearLoanOtherFee"),
    DAY_LOAN_INTEREST((short)63, "dayLoanInterest"),
    DAY_LOAN_MGR((short)64, "dayLoanMgr"),
    DAY_LOAN_OTHER_FEE((short)65, "dayLoanOtherFee"),
    LIQ_DMG_PROPORTION((short)66, "liqDmgProportion"),
    OVERDUE_LOAN_INTEREST((short)67, "overdueLoanInterest"),
    OVERDUE_FINE_INTEREST((short)68, "overdueFineInterest"),
    MIS_FINE_INTEREST((short)69, "misFineInterest"),
    PREPAY_LIQ_DMG_PROPORTION((short)70, "prepayLiqDmgProportion"),
    CIRCULATE_TYPE((short)71, "circulateType"),
    ABBREVIATION((short)72, "abbreviation"),
    USER_PIDS((short)73, "userPids"),
    CUS_TYPE((short)74, "cusType"),
    SURVEY_RESULT((short)75, "surveyResult"),
    REQUEST_STATUS_VAL((short)76, "requestStatusVal"),
    ECO_TRADE_TEXT((short)77, "ecoTradeText"),
    ECO_TRADE((short)78, "ecoTrade"),
    ASS_WAY((short)79, "assWay"),
    LOAN_ID((short)80, "loanId"),
    PAGE((short)81, "page"),
    ROWS((short)82, "rows"),
    BEGIN_COMPLETE_DTTM((short)83, "beginCompleteDttm"),
    END_COMPLETE_DTTM((short)84, "endCompleteDttm"),
    COMMENTS((short)85, "comments"),
    REPAY_OPTION_TEST((short)86, "repayOptionTest"),
    EACHISSUE_OPTION((short)87, "eachissueOption"),
    FEES_PROPORTION((short)88, "feesProportion"),
    CREDIT_ID((short)89, "creditId"),
    EXTENSION_NUM((short)90, "extensionNum"),
    EXTENSION_AMT((short)91, "extensionAmt"),
    LIMIT_ID((short)92, "limitId"),
    NOW_USER_ID((short)93, "nowUserId"),
    CREDIT_STATUS((short)94, "creditStatus"),
    REPAY_FUN_TEXT((short)95, "repayFunText"),
    ASS_WAY_TEXT((short)96, "assWayText"),
    JUDGE_REPAY_CYCLE((short)97, "judgeRepayCycle"),
    OLD_PROJECT_ID((short)98, "oldProjectId"),
    PROJECT_GUARANTEE((short)99, "projectGuarantee"),
    PROJECT_PROPERTY((short)100, "projectProperty"),
    PROJECT_FORECLOSURE((short)101, "projectForeclosure"),
    PRODUCT_ID((short)102, "productId"),
    BUSINESS_SOURCE((short)103, "businessSource"),
    ADDRESS((short)104, "address"),
    BUSINESS_CONTACTS((short)105, "businessContacts"),
    CONTACTS_PHONE((short)106, "contactsPhone"),
    INNER_OR_OUT((short)107, "innerOrOut"),
    BUSINESS_CATEGORY((short)108, "businessCategory"),
    IS_NOTARIZATION((short)109, "isNotarization"),
    IS_DELETE((short)110, "isDelete"),
    IS_CHECHAN((short)111, "isChechan"),
    PRODUCT_TYPE((short)112, "productType"),
    MANAGERS((short)113, "managers"),
    MANAGERS_PHONE((short)114, "managersPhone"),
    USER_IDS((short)115, "userIds"),
    FORECLOSURE_STATUS((short)116, "foreclosureStatus"),
    OLD_LOAN_BANK((short)117, "oldLoanBank"),
    ORG_ID((short)118, "orgId"),
    EXTENSION_FEE((short)119, "extensionFee"),
    EXTENSION_DATE((short)120, "extensionDate"),
    EXTENSION_RATE((short)121, "extensionRate"),
    BUSINESS_SOURCE_NO((short)122, "businessSourceNo"),
    COLLECT_FILE_STATUS((short)123, "collectFileStatus"),
    PROJECT_SOURCE((short)124, "projectSource"),
    BUSINESS_SOURCE_STR((short)125, "businessSourceStr"),
    FORE_LIST((short)126, "foreList"),
    AUDITOR_OPINION((short)127, "auditorOpinion"),
    SPECIAL_DESC((short)128, "specialDesc"),
    DECLARATION((short)129, "declaration"),
    IS_SELLER((short)130, "isSeller"),
    REFUND_FILE_STATUS((short)131, "refundFileStatus"),
    CHECHAN_DATE((short)132, "chechanDate"),
    CHECHAN_USER_ID((short)133, "chechanUserId"),
    CHECHAN_USER_NAME((short)134, "chechanUserName"),
    CHECHAN_CAUSE((short)135, "chechanCause"),
    EXTENSION_DAYS((short)136, "extensionDays"),
    SOURCE_STR((short)137, "sourceStr"),
    ORG_CUSTOMER_NAME((short)140, "orgCustomerName"),
    ORG_CUSTOMER_PHONE((short)141, "orgCustomerPhone"),
    ORG_CUSTOMER_CARD((short)142, "orgCustomerCard"),
    PLAN_LOAN_DATE((short)143, "planLoanDate"),
    PLAN_LOAN_MONEY((short)144, "planLoanMoney"),
    LOAN_RATE((short)145, "loanRate"),
    MAX_LOAN_RATE((short)146, "maxLoanRate"),
    IS_CLOSED((short)147, "isClosed"),
    ORG_NAME((short)148, "orgName"),
    AREA_CODE((short)149, "areaCode"),
    APPLY_USER_ID((short)150, "applyUserId"),
    IS_NEED_HANDLE((short)151, "isNeedHandle"),
    CANCEL_GUARANTEE_DATE((short)152, "cancelGuaranteeDate"),
    IS_NEED_FINANCIAL((short)153, "isNeedFinancial"),
    ESTATE_LIST((short)154, "estateList"),
    HOUSE_IDS((short)155, "houseIds"),
    IS_REJECT((short)156, "isReject"),
    IS_ASSIGNED((short)157, "isAssigned"),
    RECORD_CLERK_ID((short)158, "recordClerkId"),
    FORE_AFTER_MONITOR_STATUS((short)159, "foreAfterMonitorStatus"),
    ORIGINAL_LOAN_LIST((short)160, "originalLoanList"),
    ORIGINAL_LOAN_IDS((short)161, "originalLoanIds"),
    CUS_ENTERPRISE_INFO((short)162, "cusEnterpriseInfo"),
    CUS_CREDENTIALS((short)163, "cusCredentials"),
    CUS_CARD_INFO((short)164, "cusCardInfo"),
    CAPITAL_NAME((short)165, "capitalName"),
    LOAN_TYPE((short)166, "loanType"),
    NEXT_USER_ID((short)167, "nextUserId"),
    PRO_CONTACT_IDS((short)168, "proContactIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACCT_ID
          return ACCT_ID;
        case 3: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 4: // PROJECT_TYPE_TEXT
          return PROJECT_TYPE_TEXT;
        case 5: // PROJECT_NAME
          return PROJECT_NAME;
        case 6: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 7: // PM_USER_ID
          return PM_USER_ID;
        case 8: // REAL_NAME
          return REAL_NAME;
        case 9: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 10: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 11: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 12: // STATUS
          return STATUS;
        case 13: // BUSINESS_CATELOG
          return BUSINESS_CATELOG;
        case 14: // BUSINESS_CATELOG_TEXT
          return BUSINESS_CATELOG_TEXT;
        case 15: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 16: // BUSINESS_TYPE_TEXT
          return BUSINESS_TYPE_TEXT;
        case 17: // FLOW_CATELOG
          return FLOW_CATELOG;
        case 18: // FLOW_CATELOG_TEXT
          return FLOW_CATELOG_TEXT;
        case 19: // MY_TYPE
          return MY_TYPE;
        case 20: // MY_TYPE_TEXT
          return MY_TYPE_TEXT;
        case 21: // MY_MAIN
          return MY_MAIN;
        case 22: // MY_MAIN_TEXT
          return MY_MAIN_TEXT;
        case 23: // LOAN_INTEREST_RECORD
          return LOAN_INTEREST_RECORD;
        case 24: // LOAN_INTEREST_RECORD_TEXT
          return LOAN_INTEREST_RECORD_TEXT;
        case 25: // LOAN_INTEREST_RECORD_NO
          return LOAN_INTEREST_RECORD_NO;
        case 26: // LOAN_MGR_RECORD
          return LOAN_MGR_RECORD;
        case 27: // LOAN_MGR_RECORD_TEXT
          return LOAN_MGR_RECORD_TEXT;
        case 28: // LOAN_MGR_RECORD_NO
          return LOAN_MGR_RECORD_NO;
        case 29: // LOAN_OTHER_FEE
          return LOAN_OTHER_FEE;
        case 30: // LOAN_OTHER_FEE_TEXT
          return LOAN_OTHER_FEE_TEXT;
        case 31: // LOAN_OTHER_FEE_NO
          return LOAN_OTHER_FEE_NO;
        case 32: // IS_ALLOW_PREPAY
          return IS_ALLOW_PREPAY;
        case 33: // IS_ALLOW_PREPAY_TEXT
          return IS_ALLOW_PREPAY_TEXT;
        case 34: // IS_RETURN_INTEREST
          return IS_RETURN_INTEREST;
        case 35: // IS_RETURN_INTEREST_TEXT
          return IS_RETURN_INTEREST_TEXT;
        case 36: // PERSON_IDS
          return PERSON_IDS;
        case 37: // BEGIN_REQUEST_DTTM
          return BEGIN_REQUEST_DTTM;
        case 38: // END_REQUEST_DTTM
          return END_REQUEST_DTTM;
        case 39: // ACCT_NAME
          return ACCT_NAME;
        case 40: // ACCT_TYPE
          return ACCT_TYPE;
        case 41: // ACCT_TYPE_TEXT
          return ACCT_TYPE_TEXT;
        case 42: // CREDTI_START_DT
          return CREDTI_START_DT;
        case 43: // CREDTI_END_DT
          return CREDTI_END_DT;
        case 44: // CREDIT_AMT
          return CREDIT_AMT;
        case 45: // IS_HOOP
          return IS_HOOP;
        case 46: // LOAN_AMT
          return LOAN_AMT;
        case 47: // CURRENCY
          return CURRENCY;
        case 48: // DATE_MODE
          return DATE_MODE;
        case 49: // REPAY_FUN
          return REPAY_FUN;
        case 50: // REPAY_CYCLE_TYPE
          return REPAY_CYCLE_TYPE;
        case 51: // REPAY_CYCLE_DATE
          return REPAY_CYCLE_DATE;
        case 52: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 53: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 54: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 55: // REPAY_OPTION
          return REPAY_OPTION;
        case 56: // REPAY_DATE
          return REPAY_DATE;
        case 57: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 58: // MONTH_LOAN_MGR
          return MONTH_LOAN_MGR;
        case 59: // MONTH_LOAN_OTHER_FEE
          return MONTH_LOAN_OTHER_FEE;
        case 60: // YEAR_LOAN_INTEREST
          return YEAR_LOAN_INTEREST;
        case 61: // YEAR_LOAN_MGR
          return YEAR_LOAN_MGR;
        case 62: // YEAR_LOAN_OTHER_FEE
          return YEAR_LOAN_OTHER_FEE;
        case 63: // DAY_LOAN_INTEREST
          return DAY_LOAN_INTEREST;
        case 64: // DAY_LOAN_MGR
          return DAY_LOAN_MGR;
        case 65: // DAY_LOAN_OTHER_FEE
          return DAY_LOAN_OTHER_FEE;
        case 66: // LIQ_DMG_PROPORTION
          return LIQ_DMG_PROPORTION;
        case 67: // OVERDUE_LOAN_INTEREST
          return OVERDUE_LOAN_INTEREST;
        case 68: // OVERDUE_FINE_INTEREST
          return OVERDUE_FINE_INTEREST;
        case 69: // MIS_FINE_INTEREST
          return MIS_FINE_INTEREST;
        case 70: // PREPAY_LIQ_DMG_PROPORTION
          return PREPAY_LIQ_DMG_PROPORTION;
        case 71: // CIRCULATE_TYPE
          return CIRCULATE_TYPE;
        case 72: // ABBREVIATION
          return ABBREVIATION;
        case 73: // USER_PIDS
          return USER_PIDS;
        case 74: // CUS_TYPE
          return CUS_TYPE;
        case 75: // SURVEY_RESULT
          return SURVEY_RESULT;
        case 76: // REQUEST_STATUS_VAL
          return REQUEST_STATUS_VAL;
        case 77: // ECO_TRADE_TEXT
          return ECO_TRADE_TEXT;
        case 78: // ECO_TRADE
          return ECO_TRADE;
        case 79: // ASS_WAY
          return ASS_WAY;
        case 80: // LOAN_ID
          return LOAN_ID;
        case 81: // PAGE
          return PAGE;
        case 82: // ROWS
          return ROWS;
        case 83: // BEGIN_COMPLETE_DTTM
          return BEGIN_COMPLETE_DTTM;
        case 84: // END_COMPLETE_DTTM
          return END_COMPLETE_DTTM;
        case 85: // COMMENTS
          return COMMENTS;
        case 86: // REPAY_OPTION_TEST
          return REPAY_OPTION_TEST;
        case 87: // EACHISSUE_OPTION
          return EACHISSUE_OPTION;
        case 88: // FEES_PROPORTION
          return FEES_PROPORTION;
        case 89: // CREDIT_ID
          return CREDIT_ID;
        case 90: // EXTENSION_NUM
          return EXTENSION_NUM;
        case 91: // EXTENSION_AMT
          return EXTENSION_AMT;
        case 92: // LIMIT_ID
          return LIMIT_ID;
        case 93: // NOW_USER_ID
          return NOW_USER_ID;
        case 94: // CREDIT_STATUS
          return CREDIT_STATUS;
        case 95: // REPAY_FUN_TEXT
          return REPAY_FUN_TEXT;
        case 96: // ASS_WAY_TEXT
          return ASS_WAY_TEXT;
        case 97: // JUDGE_REPAY_CYCLE
          return JUDGE_REPAY_CYCLE;
        case 98: // OLD_PROJECT_ID
          return OLD_PROJECT_ID;
        case 99: // PROJECT_GUARANTEE
          return PROJECT_GUARANTEE;
        case 100: // PROJECT_PROPERTY
          return PROJECT_PROPERTY;
        case 101: // PROJECT_FORECLOSURE
          return PROJECT_FORECLOSURE;
        case 102: // PRODUCT_ID
          return PRODUCT_ID;
        case 103: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 104: // ADDRESS
          return ADDRESS;
        case 105: // BUSINESS_CONTACTS
          return BUSINESS_CONTACTS;
        case 106: // CONTACTS_PHONE
          return CONTACTS_PHONE;
        case 107: // INNER_OR_OUT
          return INNER_OR_OUT;
        case 108: // BUSINESS_CATEGORY
          return BUSINESS_CATEGORY;
        case 109: // IS_NOTARIZATION
          return IS_NOTARIZATION;
        case 110: // IS_DELETE
          return IS_DELETE;
        case 111: // IS_CHECHAN
          return IS_CHECHAN;
        case 112: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 113: // MANAGERS
          return MANAGERS;
        case 114: // MANAGERS_PHONE
          return MANAGERS_PHONE;
        case 115: // USER_IDS
          return USER_IDS;
        case 116: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 117: // OLD_LOAN_BANK
          return OLD_LOAN_BANK;
        case 118: // ORG_ID
          return ORG_ID;
        case 119: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 120: // EXTENSION_DATE
          return EXTENSION_DATE;
        case 121: // EXTENSION_RATE
          return EXTENSION_RATE;
        case 122: // BUSINESS_SOURCE_NO
          return BUSINESS_SOURCE_NO;
        case 123: // COLLECT_FILE_STATUS
          return COLLECT_FILE_STATUS;
        case 124: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 125: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 126: // FORE_LIST
          return FORE_LIST;
        case 127: // AUDITOR_OPINION
          return AUDITOR_OPINION;
        case 128: // SPECIAL_DESC
          return SPECIAL_DESC;
        case 129: // DECLARATION
          return DECLARATION;
        case 130: // IS_SELLER
          return IS_SELLER;
        case 131: // REFUND_FILE_STATUS
          return REFUND_FILE_STATUS;
        case 132: // CHECHAN_DATE
          return CHECHAN_DATE;
        case 133: // CHECHAN_USER_ID
          return CHECHAN_USER_ID;
        case 134: // CHECHAN_USER_NAME
          return CHECHAN_USER_NAME;
        case 135: // CHECHAN_CAUSE
          return CHECHAN_CAUSE;
        case 136: // EXTENSION_DAYS
          return EXTENSION_DAYS;
        case 137: // SOURCE_STR
          return SOURCE_STR;
        case 140: // ORG_CUSTOMER_NAME
          return ORG_CUSTOMER_NAME;
        case 141: // ORG_CUSTOMER_PHONE
          return ORG_CUSTOMER_PHONE;
        case 142: // ORG_CUSTOMER_CARD
          return ORG_CUSTOMER_CARD;
        case 143: // PLAN_LOAN_DATE
          return PLAN_LOAN_DATE;
        case 144: // PLAN_LOAN_MONEY
          return PLAN_LOAN_MONEY;
        case 145: // LOAN_RATE
          return LOAN_RATE;
        case 146: // MAX_LOAN_RATE
          return MAX_LOAN_RATE;
        case 147: // IS_CLOSED
          return IS_CLOSED;
        case 148: // ORG_NAME
          return ORG_NAME;
        case 149: // AREA_CODE
          return AREA_CODE;
        case 150: // APPLY_USER_ID
          return APPLY_USER_ID;
        case 151: // IS_NEED_HANDLE
          return IS_NEED_HANDLE;
        case 152: // CANCEL_GUARANTEE_DATE
          return CANCEL_GUARANTEE_DATE;
        case 153: // IS_NEED_FINANCIAL
          return IS_NEED_FINANCIAL;
        case 154: // ESTATE_LIST
          return ESTATE_LIST;
        case 155: // HOUSE_IDS
          return HOUSE_IDS;
        case 156: // IS_REJECT
          return IS_REJECT;
        case 157: // IS_ASSIGNED
          return IS_ASSIGNED;
        case 158: // RECORD_CLERK_ID
          return RECORD_CLERK_ID;
        case 159: // FORE_AFTER_MONITOR_STATUS
          return FORE_AFTER_MONITOR_STATUS;
        case 160: // ORIGINAL_LOAN_LIST
          return ORIGINAL_LOAN_LIST;
        case 161: // ORIGINAL_LOAN_IDS
          return ORIGINAL_LOAN_IDS;
        case 162: // CUS_ENTERPRISE_INFO
          return CUS_ENTERPRISE_INFO;
        case 163: // CUS_CREDENTIALS
          return CUS_CREDENTIALS;
        case 164: // CUS_CARD_INFO
          return CUS_CARD_INFO;
        case 165: // CAPITAL_NAME
          return CAPITAL_NAME;
        case 166: // LOAN_TYPE
          return LOAN_TYPE;
        case 167: // NEXT_USER_ID
          return NEXT_USER_ID;
        case 168: // PRO_CONTACT_IDS
          return PRO_CONTACT_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTID_ISSET_ID = 1;
  private static final int __PROJECTTYPE_ISSET_ID = 2;
  private static final int __PMUSERID_ISSET_ID = 3;
  private static final int __REQUESTSTATUS_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __BUSINESSCATELOG_ISSET_ID = 6;
  private static final int __BUSINESSTYPE_ISSET_ID = 7;
  private static final int __FLOWCATELOG_ISSET_ID = 8;
  private static final int __MYTYPE_ISSET_ID = 9;
  private static final int __LOANINTERESTRECORD_ISSET_ID = 10;
  private static final int __LOANMGRRECORD_ISSET_ID = 11;
  private static final int __LOANOTHERFEE_ISSET_ID = 12;
  private static final int __ISALLOWPREPAY_ISSET_ID = 13;
  private static final int __ISRETURNINTEREST_ISSET_ID = 14;
  private static final int __ACCTTYPE_ISSET_ID = 15;
  private static final int __CREDITAMT_ISSET_ID = 16;
  private static final int __ISHOOP_ISSET_ID = 17;
  private static final int __LOANAMT_ISSET_ID = 18;
  private static final int __CURRENCY_ISSET_ID = 19;
  private static final int __DATEMODE_ISSET_ID = 20;
  private static final int __REPAYFUN_ISSET_ID = 21;
  private static final int __REPAYCYCLETYPE_ISSET_ID = 22;
  private static final int __REPAYCYCLEDATE_ISSET_ID = 23;
  private static final int __REPAYCYCLE_ISSET_ID = 24;
  private static final int __REPAYOPTION_ISSET_ID = 25;
  private static final int __REPAYDATE_ISSET_ID = 26;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 27;
  private static final int __MONTHLOANMGR_ISSET_ID = 28;
  private static final int __MONTHLOANOTHERFEE_ISSET_ID = 29;
  private static final int __YEARLOANINTEREST_ISSET_ID = 30;
  private static final int __YEARLOANMGR_ISSET_ID = 31;
  private static final int __YEARLOANOTHERFEE_ISSET_ID = 32;
  private static final int __DAYLOANINTEREST_ISSET_ID = 33;
  private static final int __DAYLOANMGR_ISSET_ID = 34;
  private static final int __DAYLOANOTHERFEE_ISSET_ID = 35;
  private static final int __LIQDMGPROPORTION_ISSET_ID = 36;
  private static final int __OVERDUELOANINTEREST_ISSET_ID = 37;
  private static final int __OVERDUEFINEINTEREST_ISSET_ID = 38;
  private static final int __MISFINEINTEREST_ISSET_ID = 39;
  private static final int __PREPAYLIQDMGPROPORTION_ISSET_ID = 40;
  private static final int __CIRCULATETYPE_ISSET_ID = 41;
  private static final int __CUSTYPE_ISSET_ID = 42;
  private static final int __LOANID_ISSET_ID = 43;
  private static final int __PAGE_ISSET_ID = 44;
  private static final int __ROWS_ISSET_ID = 45;
  private static final int __REPAYOPTIONTEST_ISSET_ID = 46;
  private static final int __EACHISSUEOPTION_ISSET_ID = 47;
  private static final int __FEESPROPORTION_ISSET_ID = 48;
  private static final int __CREDITID_ISSET_ID = 49;
  private static final int __EXTENSIONNUM_ISSET_ID = 50;
  private static final int __EXTENSIONAMT_ISSET_ID = 51;
  private static final int __LIMITID_ISSET_ID = 52;
  private static final int __NOWUSERID_ISSET_ID = 53;
  private static final int __CREDITSTATUS_ISSET_ID = 54;
  private static final int __JUDGEREPAYCYCLE_ISSET_ID = 55;
  private static final int __OLDPROJECTID_ISSET_ID = 56;
  private static final int __PRODUCTID_ISSET_ID = 57;
  private static final int __BUSINESSSOURCE_ISSET_ID = 58;
  private static final int __INNEROROUT_ISSET_ID = 59;
  private static final int __BUSINESSCATEGORY_ISSET_ID = 60;
  private static final int __ISNOTARIZATION_ISSET_ID = 61;
  private static final int __ISDELETE_ISSET_ID = 62;
  private static final int __ISCHECHAN_ISSET_ID = 63;
  private static final int __PRODUCTTYPE_ISSET_ID = 64;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 65;
  private static final int __ORGID_ISSET_ID = 66;
  private static final int __EXTENSIONFEE_ISSET_ID = 67;
  private static final int __EXTENSIONRATE_ISSET_ID = 68;
  private static final int __BUSINESSSOURCENO_ISSET_ID = 69;
  private static final int __COLLECTFILESTATUS_ISSET_ID = 70;
  private static final int __PROJECTSOURCE_ISSET_ID = 71;
  private static final int __ISSELLER_ISSET_ID = 72;
  private static final int __REFUNDFILESTATUS_ISSET_ID = 73;
  private static final int __CHECHANUSERID_ISSET_ID = 74;
  private static final int __EXTENSIONDAYS_ISSET_ID = 75;
  private static final int __PLANLOANMONEY_ISSET_ID = 76;
  private static final int __LOANRATE_ISSET_ID = 77;
  private static final int __MAXLOANRATE_ISSET_ID = 78;
  private static final int __ISCLOSED_ISSET_ID = 79;
  private static final int __APPLYUSERID_ISSET_ID = 80;
  private static final int __ISNEEDHANDLE_ISSET_ID = 81;
  private static final int __ISNEEDFINANCIAL_ISSET_ID = 82;
  private static final int __ISREJECT_ISSET_ID = 83;
  private static final int __ISASSIGNED_ISSET_ID = 84;
  private static final int __RECORDCLERKID_ISSET_ID = 85;
  private static final int __FOREAFTERMONITORSTATUS_ISSET_ID = 86;
  private BitSet __isset_bit_vector = new BitSet(87);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("projectTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("businessCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATELOG_TEXT, new org.apache.thrift.meta_data.FieldMetaData("businessCatelogText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("businessTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("flowCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLOW_CATELOG_TEXT, new org.apache.thrift.meta_data.FieldMetaData("flowCatelogText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("myType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MY_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("myTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_MAIN, new org.apache.thrift.meta_data.FieldMetaData("myMain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_MAIN_TEXT, new org.apache.thrift.meta_data.FieldMetaData("myMainText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_INTEREST_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_INTEREST_RECORD_TEXT, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecordText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_INTEREST_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecordNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MGR_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MGR_RECORD_TEXT, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecordText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MGR_RECORD_NO, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecordNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFeeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_OTHER_FEE_NO, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFeeNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ALLOW_PREPAY, new org.apache.thrift.meta_data.FieldMetaData("isAllowPrepay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ALLOW_PREPAY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("isAllowPrepayText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RETURN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("isReturnInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_RETURN_INTEREST_TEXT, new org.apache.thrift.meta_data.FieldMetaData("isReturnInterestText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON_IDS, new org.apache.thrift.meta_data.FieldMetaData("personIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("beginRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("endRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("acctTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDTI_START_DT, new org.apache.thrift.meta_data.FieldMetaData("credtiStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDTI_END_DT, new org.apache.thrift.meta_data.FieldMetaData("credtiEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_HOOP, new org.apache.thrift.meta_data.FieldMetaData("isHoop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("dateMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_FUN, new org.apache.thrift.meta_data.FieldMetaData("repayFun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_CYCLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repayCycleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_CYCLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayCycleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("repayOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("monthLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("monthLoanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("yearLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("yearLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("yearLoanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("dayLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("dayLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("dayLoanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIQ_DMG_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("liqDmgProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIS_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("misFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREPAY_LIQ_DMG_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("prepayLiqDmgProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CIRCULATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("circulateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ABBREVIATION, new org.apache.thrift.meta_data.FieldMetaData("abbreviation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PIDS, new org.apache.thrift.meta_data.FieldMetaData("userPids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SURVEY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("surveyResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS_VAL, new org.apache.thrift.meta_data.FieldMetaData("requestStatusVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("ecoTradeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASS_WAY, new org.apache.thrift.meta_data.FieldMetaData("assWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEGIN_COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("beginCompleteDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("endCompleteDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_OPTION_TEST, new org.apache.thrift.meta_data.FieldMetaData("repayOptionTest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EACHISSUE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("eachissueOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEES_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("feesProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("creditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_NUM, new org.apache.thrift.meta_data.FieldMetaData("extensionNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_AMT, new org.apache.thrift.meta_data.FieldMetaData("extensionAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("limitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOW_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("nowUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("creditStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_FUN_TEXT, new org.apache.thrift.meta_data.FieldMetaData("repayFunText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASS_WAY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("assWayText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JUDGE_REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("judgeRepayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("oldProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_GUARANTEE, new org.apache.thrift.meta_data.FieldMetaData("projectGuarantee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ProjectGuarantee")));
    tmpMap.put(_Fields.PROJECT_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("projectProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ProjectProperty")));
    tmpMap.put(_Fields.PROJECT_FORECLOSURE, new org.apache.thrift.meta_data.FieldMetaData("projectForeclosure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ProjectForeclosure")));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CONTACTS, new org.apache.thrift.meta_data.FieldMetaData("businessContacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTS_PHONE, new org.apache.thrift.meta_data.FieldMetaData("contactsPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_OR_OUT, new org.apache.thrift.meta_data.FieldMetaData("innerOrOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("businessCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NOTARIZATION, new org.apache.thrift.meta_data.FieldMetaData("isNotarization", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANAGERS, new org.apache.thrift.meta_data.FieldMetaData("managers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGERS_PHONE, new org.apache.thrift.meta_data.FieldMetaData("managersPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("oldLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_DATE, new org.apache.thrift.meta_data.FieldMetaData("extensionDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("extensionRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NO, new org.apache.thrift.meta_data.FieldMetaData("businessSourceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECT_FILE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("collectFileStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORE_LIST, new org.apache.thrift.meta_data.FieldMetaData("foreList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ProjectForeInformation"))));
    tmpMap.put(_Fields.AUDITOR_OPINION, new org.apache.thrift.meta_data.FieldMetaData("auditorOpinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIAL_DESC, new org.apache.thrift.meta_data.FieldMetaData("specialDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DECLARATION, new org.apache.thrift.meta_data.FieldMetaData("declaration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SELLER, new org.apache.thrift.meta_data.FieldMetaData("isSeller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_FILE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("refundFileStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECHAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("chechanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECHAN_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("chechanUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECHAN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("chechanUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECHAN_CAUSE, new org.apache.thrift.meta_data.FieldMetaData("chechanCause", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION_DAYS, new org.apache.thrift.meta_data.FieldMetaData("extensionDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("sourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgCustomerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CUSTOMER_PHONE, new org.apache.thrift.meta_data.FieldMetaData("orgCustomerPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CUSTOMER_CARD, new org.apache.thrift.meta_data.FieldMetaData("orgCustomerCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("planLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("planLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_RATE, new org.apache.thrift.meta_data.FieldMetaData("loanRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_LOAN_RATE, new org.apache.thrift.meta_data.FieldMetaData("maxLoanRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("isClosed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("applyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEED_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("isNeedHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCEL_GUARANTEE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelGuaranteeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEED_FINANCIAL, new org.apache.thrift.meta_data.FieldMetaData("isNeedFinancial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESTATE_LIST, new org.apache.thrift.meta_data.FieldMetaData("estateList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BizProjectEstate"))));
    tmpMap.put(_Fields.HOUSE_IDS, new org.apache.thrift.meta_data.FieldMetaData("houseIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_REJECT, new org.apache.thrift.meta_data.FieldMetaData("isReject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ASSIGNED, new org.apache.thrift.meta_data.FieldMetaData("isAssigned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORD_CLERK_ID, new org.apache.thrift.meta_data.FieldMetaData("recordClerkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORE_AFTER_MONITOR_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreAfterMonitorStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORIGINAL_LOAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("originalLoanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BizOriginalLoan"))));
    tmpMap.put(_Fields.ORIGINAL_LOAN_IDS, new org.apache.thrift.meta_data.FieldMetaData("originalLoanIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_ENTERPRISE_INFO, new org.apache.thrift.meta_data.FieldMetaData("cusEnterpriseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.project.CusEnterpriseInfo.class)));
    tmpMap.put(_Fields.CUS_CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("cusCredentials", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.project.CusCredentials.class)));
    tmpMap.put(_Fields.CUS_CARD_INFO, new org.apache.thrift.meta_data.FieldMetaData("cusCardInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.project.CusCardInfo.class)));
    tmpMap.put(_Fields.CAPITAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("capitalName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("loanType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("nextUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRO_CONTACT_IDS, new org.apache.thrift.meta_data.FieldMetaData("proContactIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Project.class, metaDataMap);
  }

  public Project() {
  }

  public Project(
    int pid,
    int acctId,
    int projectType,
    String projectTypeText,
    String projectName,
    String projectNumber,
    int pmUserId,
    String realName,
    int requestStatus,
    String requestDttm,
    String completeDttm,
    int status,
    int businessCatelog,
    String businessCatelogText,
    int businessType,
    String businessTypeText,
    int flowCatelog,
    String flowCatelogText,
    int myType,
    String myTypeText,
    String myMain,
    String myMainText,
    int loanInterestRecord,
    String loanInterestRecordText,
    String loanInterestRecordNo,
    int loanMgrRecord,
    String loanMgrRecordText,
    String loanMgrRecordNo,
    int loanOtherFee,
    String loanOtherFeeText,
    String loanOtherFeeNo,
    int isAllowPrepay,
    String isAllowPrepayText,
    int isReturnInterest,
    String isReturnInterestText,
    String personIds,
    String beginRequestDttm,
    String endRequestDttm,
    String acctName,
    int acctType,
    String acctTypeText,
    String credtiStartDt,
    String credtiEndDt,
    double creditAmt,
    int isHoop,
    double loanAmt,
    int currency,
    int dateMode,
    int repayFun,
    int repayCycleType,
    int repayCycleDate,
    int repayCycle,
    String planOutLoanDt,
    String planRepayLoanDt,
    int repayOption,
    int repayDate,
    double monthLoanInterest,
    double monthLoanMgr,
    double monthLoanOtherFee,
    double yearLoanInterest,
    double yearLoanMgr,
    double yearLoanOtherFee,
    double dayLoanInterest,
    double dayLoanMgr,
    double dayLoanOtherFee,
    double liqDmgProportion,
    double overdueLoanInterest,
    double overdueFineInterest,
    double misFineInterest,
    double prepayLiqDmgProportion,
    int circulateType,
    String abbreviation,
    String userPids,
    int cusType,
    String surveyResult,
    String requestStatusVal,
    String ecoTradeText,
    String ecoTrade,
    String assWay,
    int loanId,
    int page,
    int rows,
    String beginCompleteDttm,
    String endCompleteDttm,
    String comments,
    int repayOptionTest,
    int eachissueOption,
    double feesProportion,
    int creditId,
    int extensionNum,
    double extensionAmt,
    int limitId,
    int nowUserId,
    int creditStatus,
    String repayFunText,
    String assWayText,
    int judgeRepayCycle,
    int oldProjectId,
    ProjectGuarantee projectGuarantee,
    ProjectProperty projectProperty,
    ProjectForeclosure projectForeclosure,
    int productId,
    int businessSource,
    String address,
    String businessContacts,
    String contactsPhone,
    int innerOrOut,
    int businessCategory,
    int isNotarization,
    int isDelete,
    int isChechan,
    int productType,
    String managers,
    String managersPhone,
    List<Integer> userIds,
    int foreclosureStatus,
    String oldLoanBank,
    int orgId,
    double extensionFee,
    String extensionDate,
    double extensionRate,
    int businessSourceNo,
    int collectFileStatus,
    int projectSource,
    String businessSourceStr,
    List<ProjectForeInformation> foreList,
    String auditorOpinion,
    String specialDesc,
    String declaration,
    int isSeller,
    int refundFileStatus,
    String chechanDate,
    int chechanUserId,
    String chechanUserName,
    String chechanCause,
    int extensionDays,
    String sourceStr,
    String orgCustomerName,
    String orgCustomerPhone,
    String orgCustomerCard,
    String planLoanDate,
    double planLoanMoney,
    double loanRate,
    double maxLoanRate,
    int isClosed,
    String orgName,
    String areaCode,
    int applyUserId,
    int isNeedHandle,
    String cancelGuaranteeDate,
    int isNeedFinancial,
    List<BizProjectEstate> estateList,
    String houseIds,
    int isReject,
    int isAssigned,
    int recordClerkId,
    int foreAfterMonitorStatus,
    List<BizOriginalLoan> originalLoanList,
    String originalLoanIds,
    com.xlkfinance.bms.rpc.project.CusEnterpriseInfo cusEnterpriseInfo,
    com.xlkfinance.bms.rpc.project.CusCredentials cusCredentials,
    com.xlkfinance.bms.rpc.project.CusCardInfo cusCardInfo,
    String capitalName,
    String loanType,
    String nextUserId,
    String proContactIds)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    this.projectTypeText = projectTypeText;
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.realName = realName;
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.status = status;
    setStatusIsSet(true);
    this.businessCatelog = businessCatelog;
    setBusinessCatelogIsSet(true);
    this.businessCatelogText = businessCatelogText;
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    this.businessTypeText = businessTypeText;
    this.flowCatelog = flowCatelog;
    setFlowCatelogIsSet(true);
    this.flowCatelogText = flowCatelogText;
    this.myType = myType;
    setMyTypeIsSet(true);
    this.myTypeText = myTypeText;
    this.myMain = myMain;
    this.myMainText = myMainText;
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    this.loanInterestRecordText = loanInterestRecordText;
    this.loanInterestRecordNo = loanInterestRecordNo;
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    this.loanMgrRecordText = loanMgrRecordText;
    this.loanMgrRecordNo = loanMgrRecordNo;
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    this.loanOtherFeeText = loanOtherFeeText;
    this.loanOtherFeeNo = loanOtherFeeNo;
    this.isAllowPrepay = isAllowPrepay;
    setIsAllowPrepayIsSet(true);
    this.isAllowPrepayText = isAllowPrepayText;
    this.isReturnInterest = isReturnInterest;
    setIsReturnInterestIsSet(true);
    this.isReturnInterestText = isReturnInterestText;
    this.personIds = personIds;
    this.beginRequestDttm = beginRequestDttm;
    this.endRequestDttm = endRequestDttm;
    this.acctName = acctName;
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    this.acctTypeText = acctTypeText;
    this.credtiStartDt = credtiStartDt;
    this.credtiEndDt = credtiEndDt;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.isHoop = isHoop;
    setIsHoopIsSet(true);
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.currency = currency;
    setCurrencyIsSet(true);
    this.dateMode = dateMode;
    setDateModeIsSet(true);
    this.repayFun = repayFun;
    setRepayFunIsSet(true);
    this.repayCycleType = repayCycleType;
    setRepayCycleTypeIsSet(true);
    this.repayCycleDate = repayCycleDate;
    setRepayCycleDateIsSet(true);
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    this.planOutLoanDt = planOutLoanDt;
    this.planRepayLoanDt = planRepayLoanDt;
    this.repayOption = repayOption;
    setRepayOptionIsSet(true);
    this.repayDate = repayDate;
    setRepayDateIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    this.monthLoanOtherFee = monthLoanOtherFee;
    setMonthLoanOtherFeeIsSet(true);
    this.yearLoanInterest = yearLoanInterest;
    setYearLoanInterestIsSet(true);
    this.yearLoanMgr = yearLoanMgr;
    setYearLoanMgrIsSet(true);
    this.yearLoanOtherFee = yearLoanOtherFee;
    setYearLoanOtherFeeIsSet(true);
    this.dayLoanInterest = dayLoanInterest;
    setDayLoanInterestIsSet(true);
    this.dayLoanMgr = dayLoanMgr;
    setDayLoanMgrIsSet(true);
    this.dayLoanOtherFee = dayLoanOtherFee;
    setDayLoanOtherFeeIsSet(true);
    this.liqDmgProportion = liqDmgProportion;
    setLiqDmgProportionIsSet(true);
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    this.misFineInterest = misFineInterest;
    setMisFineInterestIsSet(true);
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    this.circulateType = circulateType;
    setCirculateTypeIsSet(true);
    this.abbreviation = abbreviation;
    this.userPids = userPids;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.surveyResult = surveyResult;
    this.requestStatusVal = requestStatusVal;
    this.ecoTradeText = ecoTradeText;
    this.ecoTrade = ecoTrade;
    this.assWay = assWay;
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.beginCompleteDttm = beginCompleteDttm;
    this.endCompleteDttm = endCompleteDttm;
    this.comments = comments;
    this.repayOptionTest = repayOptionTest;
    setRepayOptionTestIsSet(true);
    this.eachissueOption = eachissueOption;
    setEachissueOptionIsSet(true);
    this.feesProportion = feesProportion;
    setFeesProportionIsSet(true);
    this.creditId = creditId;
    setCreditIdIsSet(true);
    this.extensionNum = extensionNum;
    setExtensionNumIsSet(true);
    this.extensionAmt = extensionAmt;
    setExtensionAmtIsSet(true);
    this.limitId = limitId;
    setLimitIdIsSet(true);
    this.nowUserId = nowUserId;
    setNowUserIdIsSet(true);
    this.creditStatus = creditStatus;
    setCreditStatusIsSet(true);
    this.repayFunText = repayFunText;
    this.assWayText = assWayText;
    this.judgeRepayCycle = judgeRepayCycle;
    setJudgeRepayCycleIsSet(true);
    this.oldProjectId = oldProjectId;
    setOldProjectIdIsSet(true);
    this.projectGuarantee = projectGuarantee;
    this.projectProperty = projectProperty;
    this.projectForeclosure = projectForeclosure;
    this.productId = productId;
    setProductIdIsSet(true);
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.address = address;
    this.businessContacts = businessContacts;
    this.contactsPhone = contactsPhone;
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    this.isNotarization = isNotarization;
    setIsNotarizationIsSet(true);
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.productType = productType;
    setProductTypeIsSet(true);
    this.managers = managers;
    this.managersPhone = managersPhone;
    this.userIds = userIds;
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.oldLoanBank = oldLoanBank;
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.extensionDate = extensionDate;
    this.extensionRate = extensionRate;
    setExtensionRateIsSet(true);
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    this.collectFileStatus = collectFileStatus;
    setCollectFileStatusIsSet(true);
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.businessSourceStr = businessSourceStr;
    this.foreList = foreList;
    this.auditorOpinion = auditorOpinion;
    this.specialDesc = specialDesc;
    this.declaration = declaration;
    this.isSeller = isSeller;
    setIsSellerIsSet(true);
    this.refundFileStatus = refundFileStatus;
    setRefundFileStatusIsSet(true);
    this.chechanDate = chechanDate;
    this.chechanUserId = chechanUserId;
    setChechanUserIdIsSet(true);
    this.chechanUserName = chechanUserName;
    this.chechanCause = chechanCause;
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    this.sourceStr = sourceStr;
    this.orgCustomerName = orgCustomerName;
    this.orgCustomerPhone = orgCustomerPhone;
    this.orgCustomerCard = orgCustomerCard;
    this.planLoanDate = planLoanDate;
    this.planLoanMoney = planLoanMoney;
    setPlanLoanMoneyIsSet(true);
    this.loanRate = loanRate;
    setLoanRateIsSet(true);
    this.maxLoanRate = maxLoanRate;
    setMaxLoanRateIsSet(true);
    this.isClosed = isClosed;
    setIsClosedIsSet(true);
    this.orgName = orgName;
    this.areaCode = areaCode;
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    this.isNeedFinancial = isNeedFinancial;
    setIsNeedFinancialIsSet(true);
    this.estateList = estateList;
    this.houseIds = houseIds;
    this.isReject = isReject;
    setIsRejectIsSet(true);
    this.isAssigned = isAssigned;
    setIsAssignedIsSet(true);
    this.recordClerkId = recordClerkId;
    setRecordClerkIdIsSet(true);
    this.foreAfterMonitorStatus = foreAfterMonitorStatus;
    setForeAfterMonitorStatusIsSet(true);
    this.originalLoanList = originalLoanList;
    this.originalLoanIds = originalLoanIds;
    this.cusEnterpriseInfo = cusEnterpriseInfo;
    this.cusCredentials = cusCredentials;
    this.cusCardInfo = cusCardInfo;
    this.capitalName = capitalName;
    this.loanType = loanType;
    this.nextUserId = nextUserId;
    this.proContactIds = proContactIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Project(Project other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.pid = other.pid;
    this.acctId = other.acctId;
    this.projectType = other.projectType;
    if (other.isSetProjectTypeText()) {
      this.projectTypeText = other.projectTypeText;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.pmUserId = other.pmUserId;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    this.status = other.status;
    this.businessCatelog = other.businessCatelog;
    if (other.isSetBusinessCatelogText()) {
      this.businessCatelogText = other.businessCatelogText;
    }
    this.businessType = other.businessType;
    if (other.isSetBusinessTypeText()) {
      this.businessTypeText = other.businessTypeText;
    }
    this.flowCatelog = other.flowCatelog;
    if (other.isSetFlowCatelogText()) {
      this.flowCatelogText = other.flowCatelogText;
    }
    this.myType = other.myType;
    if (other.isSetMyTypeText()) {
      this.myTypeText = other.myTypeText;
    }
    if (other.isSetMyMain()) {
      this.myMain = other.myMain;
    }
    if (other.isSetMyMainText()) {
      this.myMainText = other.myMainText;
    }
    this.loanInterestRecord = other.loanInterestRecord;
    if (other.isSetLoanInterestRecordText()) {
      this.loanInterestRecordText = other.loanInterestRecordText;
    }
    if (other.isSetLoanInterestRecordNo()) {
      this.loanInterestRecordNo = other.loanInterestRecordNo;
    }
    this.loanMgrRecord = other.loanMgrRecord;
    if (other.isSetLoanMgrRecordText()) {
      this.loanMgrRecordText = other.loanMgrRecordText;
    }
    if (other.isSetLoanMgrRecordNo()) {
      this.loanMgrRecordNo = other.loanMgrRecordNo;
    }
    this.loanOtherFee = other.loanOtherFee;
    if (other.isSetLoanOtherFeeText()) {
      this.loanOtherFeeText = other.loanOtherFeeText;
    }
    if (other.isSetLoanOtherFeeNo()) {
      this.loanOtherFeeNo = other.loanOtherFeeNo;
    }
    this.isAllowPrepay = other.isAllowPrepay;
    if (other.isSetIsAllowPrepayText()) {
      this.isAllowPrepayText = other.isAllowPrepayText;
    }
    this.isReturnInterest = other.isReturnInterest;
    if (other.isSetIsReturnInterestText()) {
      this.isReturnInterestText = other.isReturnInterestText;
    }
    if (other.isSetPersonIds()) {
      this.personIds = other.personIds;
    }
    if (other.isSetBeginRequestDttm()) {
      this.beginRequestDttm = other.beginRequestDttm;
    }
    if (other.isSetEndRequestDttm()) {
      this.endRequestDttm = other.endRequestDttm;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    this.acctType = other.acctType;
    if (other.isSetAcctTypeText()) {
      this.acctTypeText = other.acctTypeText;
    }
    if (other.isSetCredtiStartDt()) {
      this.credtiStartDt = other.credtiStartDt;
    }
    if (other.isSetCredtiEndDt()) {
      this.credtiEndDt = other.credtiEndDt;
    }
    this.creditAmt = other.creditAmt;
    this.isHoop = other.isHoop;
    this.loanAmt = other.loanAmt;
    this.currency = other.currency;
    this.dateMode = other.dateMode;
    this.repayFun = other.repayFun;
    this.repayCycleType = other.repayCycleType;
    this.repayCycleDate = other.repayCycleDate;
    this.repayCycle = other.repayCycle;
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    this.repayOption = other.repayOption;
    this.repayDate = other.repayDate;
    this.monthLoanInterest = other.monthLoanInterest;
    this.monthLoanMgr = other.monthLoanMgr;
    this.monthLoanOtherFee = other.monthLoanOtherFee;
    this.yearLoanInterest = other.yearLoanInterest;
    this.yearLoanMgr = other.yearLoanMgr;
    this.yearLoanOtherFee = other.yearLoanOtherFee;
    this.dayLoanInterest = other.dayLoanInterest;
    this.dayLoanMgr = other.dayLoanMgr;
    this.dayLoanOtherFee = other.dayLoanOtherFee;
    this.liqDmgProportion = other.liqDmgProportion;
    this.overdueLoanInterest = other.overdueLoanInterest;
    this.overdueFineInterest = other.overdueFineInterest;
    this.misFineInterest = other.misFineInterest;
    this.prepayLiqDmgProportion = other.prepayLiqDmgProportion;
    this.circulateType = other.circulateType;
    if (other.isSetAbbreviation()) {
      this.abbreviation = other.abbreviation;
    }
    if (other.isSetUserPids()) {
      this.userPids = other.userPids;
    }
    this.cusType = other.cusType;
    if (other.isSetSurveyResult()) {
      this.surveyResult = other.surveyResult;
    }
    if (other.isSetRequestStatusVal()) {
      this.requestStatusVal = other.requestStatusVal;
    }
    if (other.isSetEcoTradeText()) {
      this.ecoTradeText = other.ecoTradeText;
    }
    if (other.isSetEcoTrade()) {
      this.ecoTrade = other.ecoTrade;
    }
    if (other.isSetAssWay()) {
      this.assWay = other.assWay;
    }
    this.loanId = other.loanId;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetBeginCompleteDttm()) {
      this.beginCompleteDttm = other.beginCompleteDttm;
    }
    if (other.isSetEndCompleteDttm()) {
      this.endCompleteDttm = other.endCompleteDttm;
    }
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
    this.repayOptionTest = other.repayOptionTest;
    this.eachissueOption = other.eachissueOption;
    this.feesProportion = other.feesProportion;
    this.creditId = other.creditId;
    this.extensionNum = other.extensionNum;
    this.extensionAmt = other.extensionAmt;
    this.limitId = other.limitId;
    this.nowUserId = other.nowUserId;
    this.creditStatus = other.creditStatus;
    if (other.isSetRepayFunText()) {
      this.repayFunText = other.repayFunText;
    }
    if (other.isSetAssWayText()) {
      this.assWayText = other.assWayText;
    }
    this.judgeRepayCycle = other.judgeRepayCycle;
    this.oldProjectId = other.oldProjectId;
    if (other.isSetProjectGuarantee()) {
      this.projectGuarantee = other.projectGuarantee;
    }
    if (other.isSetProjectProperty()) {
      this.projectProperty = other.projectProperty;
    }
    if (other.isSetProjectForeclosure()) {
      this.projectForeclosure = other.projectForeclosure;
    }
    this.productId = other.productId;
    this.businessSource = other.businessSource;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetBusinessContacts()) {
      this.businessContacts = other.businessContacts;
    }
    if (other.isSetContactsPhone()) {
      this.contactsPhone = other.contactsPhone;
    }
    this.innerOrOut = other.innerOrOut;
    this.businessCategory = other.businessCategory;
    this.isNotarization = other.isNotarization;
    this.isDelete = other.isDelete;
    this.isChechan = other.isChechan;
    this.productType = other.productType;
    if (other.isSetManagers()) {
      this.managers = other.managers;
    }
    if (other.isSetManagersPhone()) {
      this.managersPhone = other.managersPhone;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.foreclosureStatus = other.foreclosureStatus;
    if (other.isSetOldLoanBank()) {
      this.oldLoanBank = other.oldLoanBank;
    }
    this.orgId = other.orgId;
    this.extensionFee = other.extensionFee;
    if (other.isSetExtensionDate()) {
      this.extensionDate = other.extensionDate;
    }
    this.extensionRate = other.extensionRate;
    this.businessSourceNo = other.businessSourceNo;
    this.collectFileStatus = other.collectFileStatus;
    this.projectSource = other.projectSource;
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetForeList()) {
      List<ProjectForeInformation> __this__foreList = new ArrayList<ProjectForeInformation>(other.foreList.size());
      for (ProjectForeInformation other_element : other.foreList) {
        __this__foreList.add(other_element);
      }
      this.foreList = __this__foreList;
    }
    if (other.isSetAuditorOpinion()) {
      this.auditorOpinion = other.auditorOpinion;
    }
    if (other.isSetSpecialDesc()) {
      this.specialDesc = other.specialDesc;
    }
    if (other.isSetDeclaration()) {
      this.declaration = other.declaration;
    }
    this.isSeller = other.isSeller;
    this.refundFileStatus = other.refundFileStatus;
    if (other.isSetChechanDate()) {
      this.chechanDate = other.chechanDate;
    }
    this.chechanUserId = other.chechanUserId;
    if (other.isSetChechanUserName()) {
      this.chechanUserName = other.chechanUserName;
    }
    if (other.isSetChechanCause()) {
      this.chechanCause = other.chechanCause;
    }
    this.extensionDays = other.extensionDays;
    if (other.isSetSourceStr()) {
      this.sourceStr = other.sourceStr;
    }
    if (other.isSetOrgCustomerName()) {
      this.orgCustomerName = other.orgCustomerName;
    }
    if (other.isSetOrgCustomerPhone()) {
      this.orgCustomerPhone = other.orgCustomerPhone;
    }
    if (other.isSetOrgCustomerCard()) {
      this.orgCustomerCard = other.orgCustomerCard;
    }
    if (other.isSetPlanLoanDate()) {
      this.planLoanDate = other.planLoanDate;
    }
    this.planLoanMoney = other.planLoanMoney;
    this.loanRate = other.loanRate;
    this.maxLoanRate = other.maxLoanRate;
    this.isClosed = other.isClosed;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetAreaCode()) {
      this.areaCode = other.areaCode;
    }
    this.applyUserId = other.applyUserId;
    this.isNeedHandle = other.isNeedHandle;
    if (other.isSetCancelGuaranteeDate()) {
      this.cancelGuaranteeDate = other.cancelGuaranteeDate;
    }
    this.isNeedFinancial = other.isNeedFinancial;
    if (other.isSetEstateList()) {
      List<BizProjectEstate> __this__estateList = new ArrayList<BizProjectEstate>(other.estateList.size());
      for (BizProjectEstate other_element : other.estateList) {
        __this__estateList.add(other_element);
      }
      this.estateList = __this__estateList;
    }
    if (other.isSetHouseIds()) {
      this.houseIds = other.houseIds;
    }
    this.isReject = other.isReject;
    this.isAssigned = other.isAssigned;
    this.recordClerkId = other.recordClerkId;
    this.foreAfterMonitorStatus = other.foreAfterMonitorStatus;
    if (other.isSetOriginalLoanList()) {
      List<BizOriginalLoan> __this__originalLoanList = new ArrayList<BizOriginalLoan>(other.originalLoanList.size());
      for (BizOriginalLoan other_element : other.originalLoanList) {
        __this__originalLoanList.add(other_element);
      }
      this.originalLoanList = __this__originalLoanList;
    }
    if (other.isSetOriginalLoanIds()) {
      this.originalLoanIds = other.originalLoanIds;
    }
    if (other.isSetCusEnterpriseInfo()) {
      this.cusEnterpriseInfo = new com.xlkfinance.bms.rpc.project.CusEnterpriseInfo(other.cusEnterpriseInfo);
    }
    if (other.isSetCusCredentials()) {
      this.cusCredentials = new com.xlkfinance.bms.rpc.project.CusCredentials(other.cusCredentials);
    }
    if (other.isSetCusCardInfo()) {
      this.cusCardInfo = new com.xlkfinance.bms.rpc.project.CusCardInfo(other.cusCardInfo);
    }
    if (other.isSetCapitalName()) {
      this.capitalName = other.capitalName;
    }
    if (other.isSetLoanType()) {
      this.loanType = other.loanType;
    }
    if (other.isSetNextUserId()) {
      this.nextUserId = other.nextUserId;
    }
    if (other.isSetProContactIds()) {
      this.proContactIds = other.proContactIds;
    }
  }

  public Project deepCopy() {
    return new Project(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
    this.projectTypeText = null;
    this.projectName = null;
    this.projectNumber = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.realName = null;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.completeDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    setBusinessCatelogIsSet(false);
    this.businessCatelog = 0;
    this.businessCatelogText = null;
    setBusinessTypeIsSet(false);
    this.businessType = 0;
    this.businessTypeText = null;
    setFlowCatelogIsSet(false);
    this.flowCatelog = 0;
    this.flowCatelogText = null;
    setMyTypeIsSet(false);
    this.myType = 0;
    this.myTypeText = null;
    this.myMain = null;
    this.myMainText = null;
    setLoanInterestRecordIsSet(false);
    this.loanInterestRecord = 0;
    this.loanInterestRecordText = null;
    this.loanInterestRecordNo = null;
    setLoanMgrRecordIsSet(false);
    this.loanMgrRecord = 0;
    this.loanMgrRecordText = null;
    this.loanMgrRecordNo = null;
    setLoanOtherFeeIsSet(false);
    this.loanOtherFee = 0;
    this.loanOtherFeeText = null;
    this.loanOtherFeeNo = null;
    setIsAllowPrepayIsSet(false);
    this.isAllowPrepay = 0;
    this.isAllowPrepayText = null;
    setIsReturnInterestIsSet(false);
    this.isReturnInterest = 0;
    this.isReturnInterestText = null;
    this.personIds = null;
    this.beginRequestDttm = null;
    this.endRequestDttm = null;
    this.acctName = null;
    setAcctTypeIsSet(false);
    this.acctType = 0;
    this.acctTypeText = null;
    this.credtiStartDt = null;
    this.credtiEndDt = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setIsHoopIsSet(false);
    this.isHoop = 0;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    setCurrencyIsSet(false);
    this.currency = 0;
    setDateModeIsSet(false);
    this.dateMode = 0;
    setRepayFunIsSet(false);
    this.repayFun = 0;
    setRepayCycleTypeIsSet(false);
    this.repayCycleType = 0;
    setRepayCycleDateIsSet(false);
    this.repayCycleDate = 0;
    setRepayCycleIsSet(false);
    this.repayCycle = 0;
    this.planOutLoanDt = null;
    this.planRepayLoanDt = null;
    setRepayOptionIsSet(false);
    this.repayOption = 0;
    setRepayDateIsSet(false);
    this.repayDate = 0;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
    setMonthLoanMgrIsSet(false);
    this.monthLoanMgr = 0.0;
    setMonthLoanOtherFeeIsSet(false);
    this.monthLoanOtherFee = 0.0;
    setYearLoanInterestIsSet(false);
    this.yearLoanInterest = 0.0;
    setYearLoanMgrIsSet(false);
    this.yearLoanMgr = 0.0;
    setYearLoanOtherFeeIsSet(false);
    this.yearLoanOtherFee = 0.0;
    setDayLoanInterestIsSet(false);
    this.dayLoanInterest = 0.0;
    setDayLoanMgrIsSet(false);
    this.dayLoanMgr = 0.0;
    setDayLoanOtherFeeIsSet(false);
    this.dayLoanOtherFee = 0.0;
    setLiqDmgProportionIsSet(false);
    this.liqDmgProportion = 0.0;
    setOverdueLoanInterestIsSet(false);
    this.overdueLoanInterest = 0.0;
    setOverdueFineInterestIsSet(false);
    this.overdueFineInterest = 0.0;
    setMisFineInterestIsSet(false);
    this.misFineInterest = 0.0;
    setPrepayLiqDmgProportionIsSet(false);
    this.prepayLiqDmgProportion = 0.0;
    setCirculateTypeIsSet(false);
    this.circulateType = 0;
    this.abbreviation = null;
    this.userPids = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    this.surveyResult = null;
    this.requestStatusVal = null;
    this.ecoTradeText = null;
    this.ecoTrade = null;
    this.assWay = null;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.beginCompleteDttm = null;
    this.endCompleteDttm = null;
    this.comments = null;
    setRepayOptionTestIsSet(false);
    this.repayOptionTest = 0;
    setEachissueOptionIsSet(false);
    this.eachissueOption = 0;
    setFeesProportionIsSet(false);
    this.feesProportion = 0.0;
    setCreditIdIsSet(false);
    this.creditId = 0;
    setExtensionNumIsSet(false);
    this.extensionNum = 0;
    setExtensionAmtIsSet(false);
    this.extensionAmt = 0.0;
    setLimitIdIsSet(false);
    this.limitId = 0;
    setNowUserIdIsSet(false);
    this.nowUserId = 0;
    setCreditStatusIsSet(false);
    this.creditStatus = 0;
    this.repayFunText = null;
    this.assWayText = null;
    setJudgeRepayCycleIsSet(false);
    this.judgeRepayCycle = 0;
    setOldProjectIdIsSet(false);
    this.oldProjectId = 0;
    this.projectGuarantee = null;
    this.projectProperty = null;
    this.projectForeclosure = null;
    setProductIdIsSet(false);
    this.productId = 0;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.address = null;
    this.businessContacts = null;
    this.contactsPhone = null;
    setInnerOrOutIsSet(false);
    this.innerOrOut = 0;
    setBusinessCategoryIsSet(false);
    this.businessCategory = 0;
    setIsNotarizationIsSet(false);
    this.isNotarization = 0;
    setIsDeleteIsSet(false);
    this.isDelete = 0;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    setProductTypeIsSet(false);
    this.productType = 0;
    this.managers = null;
    this.managersPhone = null;
    this.userIds = null;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    this.oldLoanBank = null;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    this.extensionDate = null;
    setExtensionRateIsSet(false);
    this.extensionRate = 0.0;
    setBusinessSourceNoIsSet(false);
    this.businessSourceNo = 0;
    setCollectFileStatusIsSet(false);
    this.collectFileStatus = 0;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    this.businessSourceStr = null;
    this.foreList = null;
    this.auditorOpinion = null;
    this.specialDesc = null;
    this.declaration = null;
    setIsSellerIsSet(false);
    this.isSeller = 0;
    setRefundFileStatusIsSet(false);
    this.refundFileStatus = 0;
    this.chechanDate = null;
    setChechanUserIdIsSet(false);
    this.chechanUserId = 0;
    this.chechanUserName = null;
    this.chechanCause = null;
    setExtensionDaysIsSet(false);
    this.extensionDays = 0;
    this.sourceStr = null;
    this.orgCustomerName = null;
    this.orgCustomerPhone = null;
    this.orgCustomerCard = null;
    this.planLoanDate = null;
    setPlanLoanMoneyIsSet(false);
    this.planLoanMoney = 0.0;
    setLoanRateIsSet(false);
    this.loanRate = 0.0;
    setMaxLoanRateIsSet(false);
    this.maxLoanRate = 0.0;
    setIsClosedIsSet(false);
    this.isClosed = 0;
    this.orgName = null;
    this.areaCode = null;
    setApplyUserIdIsSet(false);
    this.applyUserId = 0;
    setIsNeedHandleIsSet(false);
    this.isNeedHandle = 0;
    this.cancelGuaranteeDate = null;
    setIsNeedFinancialIsSet(false);
    this.isNeedFinancial = 0;
    this.estateList = null;
    this.houseIds = null;
    setIsRejectIsSet(false);
    this.isReject = 0;
    setIsAssignedIsSet(false);
    this.isAssigned = 0;
    setRecordClerkIdIsSet(false);
    this.recordClerkId = 0;
    setForeAfterMonitorStatusIsSet(false);
    this.foreAfterMonitorStatus = 0;
    this.originalLoanList = null;
    this.originalLoanIds = null;
    this.cusEnterpriseInfo = null;
    this.cusCredentials = null;
    this.cusCardInfo = null;
    this.capitalName = null;
    this.loanType = null;
    this.nextUserId = null;
    this.proContactIds = null;
  }

  public int getPid() {
    return this.pid;
  }

  public Project setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bit_vector.clear(__PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return __isset_bit_vector.get(__PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bit_vector.set(__PID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public Project setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bit_vector.clear(__ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return __isset_bit_vector.get(__ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bit_vector.set(__ACCTID_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public Project setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bit_vector.clear(__PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return __isset_bit_vector.get(__PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bit_vector.set(__PROJECTTYPE_ISSET_ID, value);
  }

  public String getProjectTypeText() {
    return this.projectTypeText;
  }

  public Project setProjectTypeText(String projectTypeText) {
    this.projectTypeText = projectTypeText;
    return this;
  }

  public void unsetProjectTypeText() {
    this.projectTypeText = null;
  }

  /** Returns true if field projectTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectTypeText() {
    return this.projectTypeText != null;
  }

  public void setProjectTypeTextIsSet(boolean value) {
    if (!value) {
      this.projectTypeText = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public Project setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public Project setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public Project setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bit_vector.clear(__PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return __isset_bit_vector.get(__PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__PMUSERID_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public Project setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public Project setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bit_vector.clear(__REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return __isset_bit_vector.get(__REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bit_vector.set(__REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public Project setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public Project setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Project setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getBusinessCatelog() {
    return this.businessCatelog;
  }

  public Project setBusinessCatelog(int businessCatelog) {
    this.businessCatelog = businessCatelog;
    setBusinessCatelogIsSet(true);
    return this;
  }

  public void unsetBusinessCatelog() {
    __isset_bit_vector.clear(__BUSINESSCATELOG_ISSET_ID);
  }

  /** Returns true if field businessCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCatelog() {
    return __isset_bit_vector.get(__BUSINESSCATELOG_ISSET_ID);
  }

  public void setBusinessCatelogIsSet(boolean value) {
    __isset_bit_vector.set(__BUSINESSCATELOG_ISSET_ID, value);
  }

  public String getBusinessCatelogText() {
    return this.businessCatelogText;
  }

  public Project setBusinessCatelogText(String businessCatelogText) {
    this.businessCatelogText = businessCatelogText;
    return this;
  }

  public void unsetBusinessCatelogText() {
    this.businessCatelogText = null;
  }

  /** Returns true if field businessCatelogText is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCatelogText() {
    return this.businessCatelogText != null;
  }

  public void setBusinessCatelogTextIsSet(boolean value) {
    if (!value) {
      this.businessCatelogText = null;
    }
  }

  public int getBusinessType() {
    return this.businessType;
  }

  public Project setBusinessType(int businessType) {
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    return this;
  }

  public void unsetBusinessType() {
    __isset_bit_vector.clear(__BUSINESSTYPE_ISSET_ID);
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return __isset_bit_vector.get(__BUSINESSTYPE_ISSET_ID);
  }

  public void setBusinessTypeIsSet(boolean value) {
    __isset_bit_vector.set(__BUSINESSTYPE_ISSET_ID, value);
  }

  public String getBusinessTypeText() {
    return this.businessTypeText;
  }

  public Project setBusinessTypeText(String businessTypeText) {
    this.businessTypeText = businessTypeText;
    return this;
  }

  public void unsetBusinessTypeText() {
    this.businessTypeText = null;
  }

  /** Returns true if field businessTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessTypeText() {
    return this.businessTypeText != null;
  }

  public void setBusinessTypeTextIsSet(boolean value) {
    if (!value) {
      this.businessTypeText = null;
    }
  }

  public int getFlowCatelog() {
    return this.flowCatelog;
  }

  public Project setFlowCatelog(int flowCatelog) {
    this.flowCatelog = flowCatelog;
    setFlowCatelogIsSet(true);
    return this;
  }

  public void unsetFlowCatelog() {
    __isset_bit_vector.clear(__FLOWCATELOG_ISSET_ID);
  }

  /** Returns true if field flowCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowCatelog() {
    return __isset_bit_vector.get(__FLOWCATELOG_ISSET_ID);
  }

  public void setFlowCatelogIsSet(boolean value) {
    __isset_bit_vector.set(__FLOWCATELOG_ISSET_ID, value);
  }

  public String getFlowCatelogText() {
    return this.flowCatelogText;
  }

  public Project setFlowCatelogText(String flowCatelogText) {
    this.flowCatelogText = flowCatelogText;
    return this;
  }

  public void unsetFlowCatelogText() {
    this.flowCatelogText = null;
  }

  /** Returns true if field flowCatelogText is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowCatelogText() {
    return this.flowCatelogText != null;
  }

  public void setFlowCatelogTextIsSet(boolean value) {
    if (!value) {
      this.flowCatelogText = null;
    }
  }

  public int getMyType() {
    return this.myType;
  }

  public Project setMyType(int myType) {
    this.myType = myType;
    setMyTypeIsSet(true);
    return this;
  }

  public void unsetMyType() {
    __isset_bit_vector.clear(__MYTYPE_ISSET_ID);
  }

  /** Returns true if field myType is set (has been assigned a value) and false otherwise */
  public boolean isSetMyType() {
    return __isset_bit_vector.get(__MYTYPE_ISSET_ID);
  }

  public void setMyTypeIsSet(boolean value) {
    __isset_bit_vector.set(__MYTYPE_ISSET_ID, value);
  }

  public String getMyTypeText() {
    return this.myTypeText;
  }

  public Project setMyTypeText(String myTypeText) {
    this.myTypeText = myTypeText;
    return this;
  }

  public void unsetMyTypeText() {
    this.myTypeText = null;
  }

  /** Returns true if field myTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetMyTypeText() {
    return this.myTypeText != null;
  }

  public void setMyTypeTextIsSet(boolean value) {
    if (!value) {
      this.myTypeText = null;
    }
  }

  public String getMyMain() {
    return this.myMain;
  }

  public Project setMyMain(String myMain) {
    this.myMain = myMain;
    return this;
  }

  public void unsetMyMain() {
    this.myMain = null;
  }

  /** Returns true if field myMain is set (has been assigned a value) and false otherwise */
  public boolean isSetMyMain() {
    return this.myMain != null;
  }

  public void setMyMainIsSet(boolean value) {
    if (!value) {
      this.myMain = null;
    }
  }

  public String getMyMainText() {
    return this.myMainText;
  }

  public Project setMyMainText(String myMainText) {
    this.myMainText = myMainText;
    return this;
  }

  public void unsetMyMainText() {
    this.myMainText = null;
  }

  /** Returns true if field myMainText is set (has been assigned a value) and false otherwise */
  public boolean isSetMyMainText() {
    return this.myMainText != null;
  }

  public void setMyMainTextIsSet(boolean value) {
    if (!value) {
      this.myMainText = null;
    }
  }

  public int getLoanInterestRecord() {
    return this.loanInterestRecord;
  }

  public Project setLoanInterestRecord(int loanInterestRecord) {
    this.loanInterestRecord = loanInterestRecord;
    setLoanInterestRecordIsSet(true);
    return this;
  }

  public void unsetLoanInterestRecord() {
    __isset_bit_vector.clear(__LOANINTERESTRECORD_ISSET_ID);
  }

  /** Returns true if field loanInterestRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestRecord() {
    return __isset_bit_vector.get(__LOANINTERESTRECORD_ISSET_ID);
  }

  public void setLoanInterestRecordIsSet(boolean value) {
    __isset_bit_vector.set(__LOANINTERESTRECORD_ISSET_ID, value);
  }

  public String getLoanInterestRecordText() {
    return this.loanInterestRecordText;
  }

  public Project setLoanInterestRecordText(String loanInterestRecordText) {
    this.loanInterestRecordText = loanInterestRecordText;
    return this;
  }

  public void unsetLoanInterestRecordText() {
    this.loanInterestRecordText = null;
  }

  /** Returns true if field loanInterestRecordText is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestRecordText() {
    return this.loanInterestRecordText != null;
  }

  public void setLoanInterestRecordTextIsSet(boolean value) {
    if (!value) {
      this.loanInterestRecordText = null;
    }
  }

  public String getLoanInterestRecordNo() {
    return this.loanInterestRecordNo;
  }

  public Project setLoanInterestRecordNo(String loanInterestRecordNo) {
    this.loanInterestRecordNo = loanInterestRecordNo;
    return this;
  }

  public void unsetLoanInterestRecordNo() {
    this.loanInterestRecordNo = null;
  }

  /** Returns true if field loanInterestRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInterestRecordNo() {
    return this.loanInterestRecordNo != null;
  }

  public void setLoanInterestRecordNoIsSet(boolean value) {
    if (!value) {
      this.loanInterestRecordNo = null;
    }
  }

  public int getLoanMgrRecord() {
    return this.loanMgrRecord;
  }

  public Project setLoanMgrRecord(int loanMgrRecord) {
    this.loanMgrRecord = loanMgrRecord;
    setLoanMgrRecordIsSet(true);
    return this;
  }

  public void unsetLoanMgrRecord() {
    __isset_bit_vector.clear(__LOANMGRRECORD_ISSET_ID);
  }

  /** Returns true if field loanMgrRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrRecord() {
    return __isset_bit_vector.get(__LOANMGRRECORD_ISSET_ID);
  }

  public void setLoanMgrRecordIsSet(boolean value) {
    __isset_bit_vector.set(__LOANMGRRECORD_ISSET_ID, value);
  }

  public String getLoanMgrRecordText() {
    return this.loanMgrRecordText;
  }

  public Project setLoanMgrRecordText(String loanMgrRecordText) {
    this.loanMgrRecordText = loanMgrRecordText;
    return this;
  }

  public void unsetLoanMgrRecordText() {
    this.loanMgrRecordText = null;
  }

  /** Returns true if field loanMgrRecordText is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrRecordText() {
    return this.loanMgrRecordText != null;
  }

  public void setLoanMgrRecordTextIsSet(boolean value) {
    if (!value) {
      this.loanMgrRecordText = null;
    }
  }

  public String getLoanMgrRecordNo() {
    return this.loanMgrRecordNo;
  }

  public Project setLoanMgrRecordNo(String loanMgrRecordNo) {
    this.loanMgrRecordNo = loanMgrRecordNo;
    return this;
  }

  public void unsetLoanMgrRecordNo() {
    this.loanMgrRecordNo = null;
  }

  /** Returns true if field loanMgrRecordNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMgrRecordNo() {
    return this.loanMgrRecordNo != null;
  }

  public void setLoanMgrRecordNoIsSet(boolean value) {
    if (!value) {
      this.loanMgrRecordNo = null;
    }
  }

  public int getLoanOtherFee() {
    return this.loanOtherFee;
  }

  public Project setLoanOtherFee(int loanOtherFee) {
    this.loanOtherFee = loanOtherFee;
    setLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetLoanOtherFee() {
    __isset_bit_vector.clear(__LOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field loanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFee() {
    return __isset_bit_vector.get(__LOANOTHERFEE_ISSET_ID);
  }

  public void setLoanOtherFeeIsSet(boolean value) {
    __isset_bit_vector.set(__LOANOTHERFEE_ISSET_ID, value);
  }

  public String getLoanOtherFeeText() {
    return this.loanOtherFeeText;
  }

  public Project setLoanOtherFeeText(String loanOtherFeeText) {
    this.loanOtherFeeText = loanOtherFeeText;
    return this;
  }

  public void unsetLoanOtherFeeText() {
    this.loanOtherFeeText = null;
  }

  /** Returns true if field loanOtherFeeText is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFeeText() {
    return this.loanOtherFeeText != null;
  }

  public void setLoanOtherFeeTextIsSet(boolean value) {
    if (!value) {
      this.loanOtherFeeText = null;
    }
  }

  public String getLoanOtherFeeNo() {
    return this.loanOtherFeeNo;
  }

  public Project setLoanOtherFeeNo(String loanOtherFeeNo) {
    this.loanOtherFeeNo = loanOtherFeeNo;
    return this;
  }

  public void unsetLoanOtherFeeNo() {
    this.loanOtherFeeNo = null;
  }

  /** Returns true if field loanOtherFeeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFeeNo() {
    return this.loanOtherFeeNo != null;
  }

  public void setLoanOtherFeeNoIsSet(boolean value) {
    if (!value) {
      this.loanOtherFeeNo = null;
    }
  }

  public int getIsAllowPrepay() {
    return this.isAllowPrepay;
  }

  public Project setIsAllowPrepay(int isAllowPrepay) {
    this.isAllowPrepay = isAllowPrepay;
    setIsAllowPrepayIsSet(true);
    return this;
  }

  public void unsetIsAllowPrepay() {
    __isset_bit_vector.clear(__ISALLOWPREPAY_ISSET_ID);
  }

  /** Returns true if field isAllowPrepay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAllowPrepay() {
    return __isset_bit_vector.get(__ISALLOWPREPAY_ISSET_ID);
  }

  public void setIsAllowPrepayIsSet(boolean value) {
    __isset_bit_vector.set(__ISALLOWPREPAY_ISSET_ID, value);
  }

  public String getIsAllowPrepayText() {
    return this.isAllowPrepayText;
  }

  public Project setIsAllowPrepayText(String isAllowPrepayText) {
    this.isAllowPrepayText = isAllowPrepayText;
    return this;
  }

  public void unsetIsAllowPrepayText() {
    this.isAllowPrepayText = null;
  }

  /** Returns true if field isAllowPrepayText is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAllowPrepayText() {
    return this.isAllowPrepayText != null;
  }

  public void setIsAllowPrepayTextIsSet(boolean value) {
    if (!value) {
      this.isAllowPrepayText = null;
    }
  }

  public int getIsReturnInterest() {
    return this.isReturnInterest;
  }

  public Project setIsReturnInterest(int isReturnInterest) {
    this.isReturnInterest = isReturnInterest;
    setIsReturnInterestIsSet(true);
    return this;
  }

  public void unsetIsReturnInterest() {
    __isset_bit_vector.clear(__ISRETURNINTEREST_ISSET_ID);
  }

  /** Returns true if field isReturnInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReturnInterest() {
    return __isset_bit_vector.get(__ISRETURNINTEREST_ISSET_ID);
  }

  public void setIsReturnInterestIsSet(boolean value) {
    __isset_bit_vector.set(__ISRETURNINTEREST_ISSET_ID, value);
  }

  public String getIsReturnInterestText() {
    return this.isReturnInterestText;
  }

  public Project setIsReturnInterestText(String isReturnInterestText) {
    this.isReturnInterestText = isReturnInterestText;
    return this;
  }

  public void unsetIsReturnInterestText() {
    this.isReturnInterestText = null;
  }

  /** Returns true if field isReturnInterestText is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReturnInterestText() {
    return this.isReturnInterestText != null;
  }

  public void setIsReturnInterestTextIsSet(boolean value) {
    if (!value) {
      this.isReturnInterestText = null;
    }
  }

  public String getPersonIds() {
    return this.personIds;
  }

  public Project setPersonIds(String personIds) {
    this.personIds = personIds;
    return this;
  }

  public void unsetPersonIds() {
    this.personIds = null;
  }

  /** Returns true if field personIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonIds() {
    return this.personIds != null;
  }

  public void setPersonIdsIsSet(boolean value) {
    if (!value) {
      this.personIds = null;
    }
  }

  public String getBeginRequestDttm() {
    return this.beginRequestDttm;
  }

  public Project setBeginRequestDttm(String beginRequestDttm) {
    this.beginRequestDttm = beginRequestDttm;
    return this;
  }

  public void unsetBeginRequestDttm() {
    this.beginRequestDttm = null;
  }

  /** Returns true if field beginRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginRequestDttm() {
    return this.beginRequestDttm != null;
  }

  public void setBeginRequestDttmIsSet(boolean value) {
    if (!value) {
      this.beginRequestDttm = null;
    }
  }

  public String getEndRequestDttm() {
    return this.endRequestDttm;
  }

  public Project setEndRequestDttm(String endRequestDttm) {
    this.endRequestDttm = endRequestDttm;
    return this;
  }

  public void unsetEndRequestDttm() {
    this.endRequestDttm = null;
  }

  /** Returns true if field endRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetEndRequestDttm() {
    return this.endRequestDttm != null;
  }

  public void setEndRequestDttmIsSet(boolean value) {
    if (!value) {
      this.endRequestDttm = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public Project setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public int getAcctType() {
    return this.acctType;
  }

  public Project setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bit_vector.clear(__ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return __isset_bit_vector.get(__ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bit_vector.set(__ACCTTYPE_ISSET_ID, value);
  }

  public String getAcctTypeText() {
    return this.acctTypeText;
  }

  public Project setAcctTypeText(String acctTypeText) {
    this.acctTypeText = acctTypeText;
    return this;
  }

  public void unsetAcctTypeText() {
    this.acctTypeText = null;
  }

  /** Returns true if field acctTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctTypeText() {
    return this.acctTypeText != null;
  }

  public void setAcctTypeTextIsSet(boolean value) {
    if (!value) {
      this.acctTypeText = null;
    }
  }

  public String getCredtiStartDt() {
    return this.credtiStartDt;
  }

  public Project setCredtiStartDt(String credtiStartDt) {
    this.credtiStartDt = credtiStartDt;
    return this;
  }

  public void unsetCredtiStartDt() {
    this.credtiStartDt = null;
  }

  /** Returns true if field credtiStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetCredtiStartDt() {
    return this.credtiStartDt != null;
  }

  public void setCredtiStartDtIsSet(boolean value) {
    if (!value) {
      this.credtiStartDt = null;
    }
  }

  public String getCredtiEndDt() {
    return this.credtiEndDt;
  }

  public Project setCredtiEndDt(String credtiEndDt) {
    this.credtiEndDt = credtiEndDt;
    return this;
  }

  public void unsetCredtiEndDt() {
    this.credtiEndDt = null;
  }

  /** Returns true if field credtiEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetCredtiEndDt() {
    return this.credtiEndDt != null;
  }

  public void setCredtiEndDtIsSet(boolean value) {
    if (!value) {
      this.credtiEndDt = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public Project setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bit_vector.clear(__CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return __isset_bit_vector.get(__CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bit_vector.set(__CREDITAMT_ISSET_ID, value);
  }

  public int getIsHoop() {
    return this.isHoop;
  }

  public Project setIsHoop(int isHoop) {
    this.isHoop = isHoop;
    setIsHoopIsSet(true);
    return this;
  }

  public void unsetIsHoop() {
    __isset_bit_vector.clear(__ISHOOP_ISSET_ID);
  }

  /** Returns true if field isHoop is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHoop() {
    return __isset_bit_vector.get(__ISHOOP_ISSET_ID);
  }

  public void setIsHoopIsSet(boolean value) {
    __isset_bit_vector.set(__ISHOOP_ISSET_ID, value);
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public Project setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bit_vector.clear(__LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return __isset_bit_vector.get(__LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bit_vector.set(__LOANAMT_ISSET_ID, value);
  }

  public int getCurrency() {
    return this.currency;
  }

  public Project setCurrency(int currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bit_vector.clear(__CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return __isset_bit_vector.get(__CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENCY_ISSET_ID, value);
  }

  public int getDateMode() {
    return this.dateMode;
  }

  public Project setDateMode(int dateMode) {
    this.dateMode = dateMode;
    setDateModeIsSet(true);
    return this;
  }

  public void unsetDateMode() {
    __isset_bit_vector.clear(__DATEMODE_ISSET_ID);
  }

  /** Returns true if field dateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDateMode() {
    return __isset_bit_vector.get(__DATEMODE_ISSET_ID);
  }

  public void setDateModeIsSet(boolean value) {
    __isset_bit_vector.set(__DATEMODE_ISSET_ID, value);
  }

  public int getRepayFun() {
    return this.repayFun;
  }

  public Project setRepayFun(int repayFun) {
    this.repayFun = repayFun;
    setRepayFunIsSet(true);
    return this;
  }

  public void unsetRepayFun() {
    __isset_bit_vector.clear(__REPAYFUN_ISSET_ID);
  }

  /** Returns true if field repayFun is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayFun() {
    return __isset_bit_vector.get(__REPAYFUN_ISSET_ID);
  }

  public void setRepayFunIsSet(boolean value) {
    __isset_bit_vector.set(__REPAYFUN_ISSET_ID, value);
  }

  public int getRepayCycleType() {
    return this.repayCycleType;
  }

  public Project setRepayCycleType(int repayCycleType) {
    this.repayCycleType = repayCycleType;
    setRepayCycleTypeIsSet(true);
    return this;
  }

  public void unsetRepayCycleType() {
    __isset_bit_vector.clear(__REPAYCYCLETYPE_ISSET_ID);
  }

  /** Returns true if field repayCycleType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycleType() {
    return __isset_bit_vector.get(__REPAYCYCLETYPE_ISSET_ID);
  }

  public void setRepayCycleTypeIsSet(boolean value) {
    __isset_bit_vector.set(__REPAYCYCLETYPE_ISSET_ID, value);
  }

  public int getRepayCycleDate() {
    return this.repayCycleDate;
  }

  public Project setRepayCycleDate(int repayCycleDate) {
    this.repayCycleDate = repayCycleDate;
    setRepayCycleDateIsSet(true);
    return this;
  }

  public void unsetRepayCycleDate() {
    __isset_bit_vector.clear(__REPAYCYCLEDATE_ISSET_ID);
  }

  /** Returns true if field repayCycleDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycleDate() {
    return __isset_bit_vector.get(__REPAYCYCLEDATE_ISSET_ID);
  }

  public void setRepayCycleDateIsSet(boolean value) {
    __isset_bit_vector.set(__REPAYCYCLEDATE_ISSET_ID, value);
  }

  public int getRepayCycle() {
    return this.repayCycle;
  }

  public Project setRepayCycle(int repayCycle) {
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    return this;
  }

  public void unsetRepayCycle() {
    __isset_bit_vector.clear(__REPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return __isset_bit_vector.get(__REPAYCYCLE_ISSET_ID);
  }

  public void setRepayCycleIsSet(boolean value) {
    __isset_bit_vector.set(__REPAYCYCLE_ISSET_ID, value);
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public Project setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public Project setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public int getRepayOption() {
    return this.repayOption;
  }

  public Project setRepayOption(int repayOption) {
    this.repayOption = repayOption;
    setRepayOptionIsSet(true);
    return this;
  }

  public void unsetRepayOption() {
    __isset_bit_vector.clear(__REPAYOPTION_ISSET_ID);
  }

  /** Returns true if field repayOption is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayOption() {
    return __isset_bit_vector.get(__REPAYOPTION_ISSET_ID);
  }

  public void setRepayOptionIsSet(boolean value) {
    __isset_bit_vector.set(__REPAYOPTION_ISSET_ID, value);
  }

  public int getRepayDate() {
    return this.repayDate;
  }

  public Project setRepayDate(int repayDate) {
    this.repayDate = repayDate;
    setRepayDateIsSet(true);
    return this;
  }

  public void unsetRepayDate() {
    __isset_bit_vector.clear(__REPAYDATE_ISSET_ID);
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return __isset_bit_vector.get(__REPAYDATE_ISSET_ID);
  }

  public void setRepayDateIsSet(boolean value) {
    __isset_bit_vector.set(__REPAYDATE_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public Project setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bit_vector.clear(__MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return __isset_bit_vector.get(__MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bit_vector.set(__MONTHLOANINTEREST_ISSET_ID, value);
  }

  public double getMonthLoanMgr() {
    return this.monthLoanMgr;
  }

  public Project setMonthLoanMgr(double monthLoanMgr) {
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    return this;
  }

  public void unsetMonthLoanMgr() {
    __isset_bit_vector.clear(__MONTHLOANMGR_ISSET_ID);
  }

  /** Returns true if field monthLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanMgr() {
    return __isset_bit_vector.get(__MONTHLOANMGR_ISSET_ID);
  }

  public void setMonthLoanMgrIsSet(boolean value) {
    __isset_bit_vector.set(__MONTHLOANMGR_ISSET_ID, value);
  }

  public double getMonthLoanOtherFee() {
    return this.monthLoanOtherFee;
  }

  public Project setMonthLoanOtherFee(double monthLoanOtherFee) {
    this.monthLoanOtherFee = monthLoanOtherFee;
    setMonthLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetMonthLoanOtherFee() {
    __isset_bit_vector.clear(__MONTHLOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field monthLoanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanOtherFee() {
    return __isset_bit_vector.get(__MONTHLOANOTHERFEE_ISSET_ID);
  }

  public void setMonthLoanOtherFeeIsSet(boolean value) {
    __isset_bit_vector.set(__MONTHLOANOTHERFEE_ISSET_ID, value);
  }

  public double getYearLoanInterest() {
    return this.yearLoanInterest;
  }

  public Project setYearLoanInterest(double yearLoanInterest) {
    this.yearLoanInterest = yearLoanInterest;
    setYearLoanInterestIsSet(true);
    return this;
  }

  public void unsetYearLoanInterest() {
    __isset_bit_vector.clear(__YEARLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field yearLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetYearLoanInterest() {
    return __isset_bit_vector.get(__YEARLOANINTEREST_ISSET_ID);
  }

  public void setYearLoanInterestIsSet(boolean value) {
    __isset_bit_vector.set(__YEARLOANINTEREST_ISSET_ID, value);
  }

  public double getYearLoanMgr() {
    return this.yearLoanMgr;
  }

  public Project setYearLoanMgr(double yearLoanMgr) {
    this.yearLoanMgr = yearLoanMgr;
    setYearLoanMgrIsSet(true);
    return this;
  }

  public void unsetYearLoanMgr() {
    __isset_bit_vector.clear(__YEARLOANMGR_ISSET_ID);
  }

  /** Returns true if field yearLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetYearLoanMgr() {
    return __isset_bit_vector.get(__YEARLOANMGR_ISSET_ID);
  }

  public void setYearLoanMgrIsSet(boolean value) {
    __isset_bit_vector.set(__YEARLOANMGR_ISSET_ID, value);
  }

  public double getYearLoanOtherFee() {
    return this.yearLoanOtherFee;
  }

  public Project setYearLoanOtherFee(double yearLoanOtherFee) {
    this.yearLoanOtherFee = yearLoanOtherFee;
    setYearLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetYearLoanOtherFee() {
    __isset_bit_vector.clear(__YEARLOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field yearLoanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetYearLoanOtherFee() {
    return __isset_bit_vector.get(__YEARLOANOTHERFEE_ISSET_ID);
  }

  public void setYearLoanOtherFeeIsSet(boolean value) {
    __isset_bit_vector.set(__YEARLOANOTHERFEE_ISSET_ID, value);
  }

  public double getDayLoanInterest() {
    return this.dayLoanInterest;
  }

  public Project setDayLoanInterest(double dayLoanInterest) {
    this.dayLoanInterest = dayLoanInterest;
    setDayLoanInterestIsSet(true);
    return this;
  }

  public void unsetDayLoanInterest() {
    __isset_bit_vector.clear(__DAYLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field dayLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLoanInterest() {
    return __isset_bit_vector.get(__DAYLOANINTEREST_ISSET_ID);
  }

  public void setDayLoanInterestIsSet(boolean value) {
    __isset_bit_vector.set(__DAYLOANINTEREST_ISSET_ID, value);
  }

  public double getDayLoanMgr() {
    return this.dayLoanMgr;
  }

  public Project setDayLoanMgr(double dayLoanMgr) {
    this.dayLoanMgr = dayLoanMgr;
    setDayLoanMgrIsSet(true);
    return this;
  }

  public void unsetDayLoanMgr() {
    __isset_bit_vector.clear(__DAYLOANMGR_ISSET_ID);
  }

  /** Returns true if field dayLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLoanMgr() {
    return __isset_bit_vector.get(__DAYLOANMGR_ISSET_ID);
  }

  public void setDayLoanMgrIsSet(boolean value) {
    __isset_bit_vector.set(__DAYLOANMGR_ISSET_ID, value);
  }

  public double getDayLoanOtherFee() {
    return this.dayLoanOtherFee;
  }

  public Project setDayLoanOtherFee(double dayLoanOtherFee) {
    this.dayLoanOtherFee = dayLoanOtherFee;
    setDayLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetDayLoanOtherFee() {
    __isset_bit_vector.clear(__DAYLOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field dayLoanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLoanOtherFee() {
    return __isset_bit_vector.get(__DAYLOANOTHERFEE_ISSET_ID);
  }

  public void setDayLoanOtherFeeIsSet(boolean value) {
    __isset_bit_vector.set(__DAYLOANOTHERFEE_ISSET_ID, value);
  }

  public double getLiqDmgProportion() {
    return this.liqDmgProportion;
  }

  public Project setLiqDmgProportion(double liqDmgProportion) {
    this.liqDmgProportion = liqDmgProportion;
    setLiqDmgProportionIsSet(true);
    return this;
  }

  public void unsetLiqDmgProportion() {
    __isset_bit_vector.clear(__LIQDMGPROPORTION_ISSET_ID);
  }

  /** Returns true if field liqDmgProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetLiqDmgProportion() {
    return __isset_bit_vector.get(__LIQDMGPROPORTION_ISSET_ID);
  }

  public void setLiqDmgProportionIsSet(boolean value) {
    __isset_bit_vector.set(__LIQDMGPROPORTION_ISSET_ID, value);
  }

  public double getOverdueLoanInterest() {
    return this.overdueLoanInterest;
  }

  public Project setOverdueLoanInterest(double overdueLoanInterest) {
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    return this;
  }

  public void unsetOverdueLoanInterest() {
    __isset_bit_vector.clear(__OVERDUELOANINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueLoanInterest() {
    return __isset_bit_vector.get(__OVERDUELOANINTEREST_ISSET_ID);
  }

  public void setOverdueLoanInterestIsSet(boolean value) {
    __isset_bit_vector.set(__OVERDUELOANINTEREST_ISSET_ID, value);
  }

  public double getOverdueFineInterest() {
    return this.overdueFineInterest;
  }

  public Project setOverdueFineInterest(double overdueFineInterest) {
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    return this;
  }

  public void unsetOverdueFineInterest() {
    __isset_bit_vector.clear(__OVERDUEFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFineInterest() {
    return __isset_bit_vector.get(__OVERDUEFINEINTEREST_ISSET_ID);
  }

  public void setOverdueFineInterestIsSet(boolean value) {
    __isset_bit_vector.set(__OVERDUEFINEINTEREST_ISSET_ID, value);
  }

  public double getMisFineInterest() {
    return this.misFineInterest;
  }

  public Project setMisFineInterest(double misFineInterest) {
    this.misFineInterest = misFineInterest;
    setMisFineInterestIsSet(true);
    return this;
  }

  public void unsetMisFineInterest() {
    __isset_bit_vector.clear(__MISFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field misFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMisFineInterest() {
    return __isset_bit_vector.get(__MISFINEINTEREST_ISSET_ID);
  }

  public void setMisFineInterestIsSet(boolean value) {
    __isset_bit_vector.set(__MISFINEINTEREST_ISSET_ID, value);
  }

  public double getPrepayLiqDmgProportion() {
    return this.prepayLiqDmgProportion;
  }

  public Project setPrepayLiqDmgProportion(double prepayLiqDmgProportion) {
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    return this;
  }

  public void unsetPrepayLiqDmgProportion() {
    __isset_bit_vector.clear(__PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  /** Returns true if field prepayLiqDmgProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepayLiqDmgProportion() {
    return __isset_bit_vector.get(__PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  public void setPrepayLiqDmgProportionIsSet(boolean value) {
    __isset_bit_vector.set(__PREPAYLIQDMGPROPORTION_ISSET_ID, value);
  }

  public int getCirculateType() {
    return this.circulateType;
  }

  public Project setCirculateType(int circulateType) {
    this.circulateType = circulateType;
    setCirculateTypeIsSet(true);
    return this;
  }

  public void unsetCirculateType() {
    __isset_bit_vector.clear(__CIRCULATETYPE_ISSET_ID);
  }

  /** Returns true if field circulateType is set (has been assigned a value) and false otherwise */
  public boolean isSetCirculateType() {
    return __isset_bit_vector.get(__CIRCULATETYPE_ISSET_ID);
  }

  public void setCirculateTypeIsSet(boolean value) {
    __isset_bit_vector.set(__CIRCULATETYPE_ISSET_ID, value);
  }

  public String getAbbreviation() {
    return this.abbreviation;
  }

  public Project setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
    return this;
  }

  public void unsetAbbreviation() {
    this.abbreviation = null;
  }

  /** Returns true if field abbreviation is set (has been assigned a value) and false otherwise */
  public boolean isSetAbbreviation() {
    return this.abbreviation != null;
  }

  public void setAbbreviationIsSet(boolean value) {
    if (!value) {
      this.abbreviation = null;
    }
  }

  public String getUserPids() {
    return this.userPids;
  }

  public Project setUserPids(String userPids) {
    this.userPids = userPids;
    return this;
  }

  public void unsetUserPids() {
    this.userPids = null;
  }

  /** Returns true if field userPids is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPids() {
    return this.userPids != null;
  }

  public void setUserPidsIsSet(boolean value) {
    if (!value) {
      this.userPids = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public Project setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bit_vector.clear(__CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return __isset_bit_vector.get(__CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bit_vector.set(__CUSTYPE_ISSET_ID, value);
  }

  public String getSurveyResult() {
    return this.surveyResult;
  }

  public Project setSurveyResult(String surveyResult) {
    this.surveyResult = surveyResult;
    return this;
  }

  public void unsetSurveyResult() {
    this.surveyResult = null;
  }

  /** Returns true if field surveyResult is set (has been assigned a value) and false otherwise */
  public boolean isSetSurveyResult() {
    return this.surveyResult != null;
  }

  public void setSurveyResultIsSet(boolean value) {
    if (!value) {
      this.surveyResult = null;
    }
  }

  public String getRequestStatusVal() {
    return this.requestStatusVal;
  }

  public Project setRequestStatusVal(String requestStatusVal) {
    this.requestStatusVal = requestStatusVal;
    return this;
  }

  public void unsetRequestStatusVal() {
    this.requestStatusVal = null;
  }

  /** Returns true if field requestStatusVal is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatusVal() {
    return this.requestStatusVal != null;
  }

  public void setRequestStatusValIsSet(boolean value) {
    if (!value) {
      this.requestStatusVal = null;
    }
  }

  public String getEcoTradeText() {
    return this.ecoTradeText;
  }

  public Project setEcoTradeText(String ecoTradeText) {
    this.ecoTradeText = ecoTradeText;
    return this;
  }

  public void unsetEcoTradeText() {
    this.ecoTradeText = null;
  }

  /** Returns true if field ecoTradeText is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTradeText() {
    return this.ecoTradeText != null;
  }

  public void setEcoTradeTextIsSet(boolean value) {
    if (!value) {
      this.ecoTradeText = null;
    }
  }

  public String getEcoTrade() {
    return this.ecoTrade;
  }

  public Project setEcoTrade(String ecoTrade) {
    this.ecoTrade = ecoTrade;
    return this;
  }

  public void unsetEcoTrade() {
    this.ecoTrade = null;
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return this.ecoTrade != null;
  }

  public void setEcoTradeIsSet(boolean value) {
    if (!value) {
      this.ecoTrade = null;
    }
  }

  public String getAssWay() {
    return this.assWay;
  }

  public Project setAssWay(String assWay) {
    this.assWay = assWay;
    return this;
  }

  public void unsetAssWay() {
    this.assWay = null;
  }

  /** Returns true if field assWay is set (has been assigned a value) and false otherwise */
  public boolean isSetAssWay() {
    return this.assWay != null;
  }

  public void setAssWayIsSet(boolean value) {
    if (!value) {
      this.assWay = null;
    }
  }

  public int getLoanId() {
    return this.loanId;
  }

  public Project setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bit_vector.clear(__LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return __isset_bit_vector.get(__LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bit_vector.set(__LOANID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public Project setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bit_vector.clear(__PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return __isset_bit_vector.get(__PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bit_vector.set(__PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public Project setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bit_vector.clear(__ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return __isset_bit_vector.get(__ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bit_vector.set(__ROWS_ISSET_ID, value);
  }

  public String getBeginCompleteDttm() {
    return this.beginCompleteDttm;
  }

  public Project setBeginCompleteDttm(String beginCompleteDttm) {
    this.beginCompleteDttm = beginCompleteDttm;
    return this;
  }

  public void unsetBeginCompleteDttm() {
    this.beginCompleteDttm = null;
  }

  /** Returns true if field beginCompleteDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginCompleteDttm() {
    return this.beginCompleteDttm != null;
  }

  public void setBeginCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.beginCompleteDttm = null;
    }
  }

  public String getEndCompleteDttm() {
    return this.endCompleteDttm;
  }

  public Project setEndCompleteDttm(String endCompleteDttm) {
    this.endCompleteDttm = endCompleteDttm;
    return this;
  }

  public void unsetEndCompleteDttm() {
    this.endCompleteDttm = null;
  }

  /** Returns true if field endCompleteDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetEndCompleteDttm() {
    return this.endCompleteDttm != null;
  }

  public void setEndCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.endCompleteDttm = null;
    }
  }

  public String getComments() {
    return this.comments;
  }

  public Project setComments(String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public int getRepayOptionTest() {
    return this.repayOptionTest;
  }

  public Project setRepayOptionTest(int repayOptionTest) {
    this.repayOptionTest = repayOptionTest;
    setRepayOptionTestIsSet(true);
    return this;
  }

  public void unsetRepayOptionTest() {
    __isset_bit_vector.clear(__REPAYOPTIONTEST_ISSET_ID);
  }

  /** Returns true if field repayOptionTest is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayOptionTest() {
    return __isset_bit_vector.get(__REPAYOPTIONTEST_ISSET_ID);
  }

  public void setRepayOptionTestIsSet(boolean value) {
    __isset_bit_vector.set(__REPAYOPTIONTEST_ISSET_ID, value);
  }

  public int getEachissueOption() {
    return this.eachissueOption;
  }

  public Project setEachissueOption(int eachissueOption) {
    this.eachissueOption = eachissueOption;
    setEachissueOptionIsSet(true);
    return this;
  }

  public void unsetEachissueOption() {
    __isset_bit_vector.clear(__EACHISSUEOPTION_ISSET_ID);
  }

  /** Returns true if field eachissueOption is set (has been assigned a value) and false otherwise */
  public boolean isSetEachissueOption() {
    return __isset_bit_vector.get(__EACHISSUEOPTION_ISSET_ID);
  }

  public void setEachissueOptionIsSet(boolean value) {
    __isset_bit_vector.set(__EACHISSUEOPTION_ISSET_ID, value);
  }

  public double getFeesProportion() {
    return this.feesProportion;
  }

  public Project setFeesProportion(double feesProportion) {
    this.feesProportion = feesProportion;
    setFeesProportionIsSet(true);
    return this;
  }

  public void unsetFeesProportion() {
    __isset_bit_vector.clear(__FEESPROPORTION_ISSET_ID);
  }

  /** Returns true if field feesProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetFeesProportion() {
    return __isset_bit_vector.get(__FEESPROPORTION_ISSET_ID);
  }

  public void setFeesProportionIsSet(boolean value) {
    __isset_bit_vector.set(__FEESPROPORTION_ISSET_ID, value);
  }

  public int getCreditId() {
    return this.creditId;
  }

  public Project setCreditId(int creditId) {
    this.creditId = creditId;
    setCreditIdIsSet(true);
    return this;
  }

  public void unsetCreditId() {
    __isset_bit_vector.clear(__CREDITID_ISSET_ID);
  }

  /** Returns true if field creditId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditId() {
    return __isset_bit_vector.get(__CREDITID_ISSET_ID);
  }

  public void setCreditIdIsSet(boolean value) {
    __isset_bit_vector.set(__CREDITID_ISSET_ID, value);
  }

  public int getExtensionNum() {
    return this.extensionNum;
  }

  public Project setExtensionNum(int extensionNum) {
    this.extensionNum = extensionNum;
    setExtensionNumIsSet(true);
    return this;
  }

  public void unsetExtensionNum() {
    __isset_bit_vector.clear(__EXTENSIONNUM_ISSET_ID);
  }

  /** Returns true if field extensionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionNum() {
    return __isset_bit_vector.get(__EXTENSIONNUM_ISSET_ID);
  }

  public void setExtensionNumIsSet(boolean value) {
    __isset_bit_vector.set(__EXTENSIONNUM_ISSET_ID, value);
  }

  public double getExtensionAmt() {
    return this.extensionAmt;
  }

  public Project setExtensionAmt(double extensionAmt) {
    this.extensionAmt = extensionAmt;
    setExtensionAmtIsSet(true);
    return this;
  }

  public void unsetExtensionAmt() {
    __isset_bit_vector.clear(__EXTENSIONAMT_ISSET_ID);
  }

  /** Returns true if field extensionAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionAmt() {
    return __isset_bit_vector.get(__EXTENSIONAMT_ISSET_ID);
  }

  public void setExtensionAmtIsSet(boolean value) {
    __isset_bit_vector.set(__EXTENSIONAMT_ISSET_ID, value);
  }

  public int getLimitId() {
    return this.limitId;
  }

  public Project setLimitId(int limitId) {
    this.limitId = limitId;
    setLimitIdIsSet(true);
    return this;
  }

  public void unsetLimitId() {
    __isset_bit_vector.clear(__LIMITID_ISSET_ID);
  }

  /** Returns true if field limitId is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitId() {
    return __isset_bit_vector.get(__LIMITID_ISSET_ID);
  }

  public void setLimitIdIsSet(boolean value) {
    __isset_bit_vector.set(__LIMITID_ISSET_ID, value);
  }

  public int getNowUserId() {
    return this.nowUserId;
  }

  public Project setNowUserId(int nowUserId) {
    this.nowUserId = nowUserId;
    setNowUserIdIsSet(true);
    return this;
  }

  public void unsetNowUserId() {
    __isset_bit_vector.clear(__NOWUSERID_ISSET_ID);
  }

  /** Returns true if field nowUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetNowUserId() {
    return __isset_bit_vector.get(__NOWUSERID_ISSET_ID);
  }

  public void setNowUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__NOWUSERID_ISSET_ID, value);
  }

  public int getCreditStatus() {
    return this.creditStatus;
  }

  public Project setCreditStatus(int creditStatus) {
    this.creditStatus = creditStatus;
    setCreditStatusIsSet(true);
    return this;
  }

  public void unsetCreditStatus() {
    __isset_bit_vector.clear(__CREDITSTATUS_ISSET_ID);
  }

  /** Returns true if field creditStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditStatus() {
    return __isset_bit_vector.get(__CREDITSTATUS_ISSET_ID);
  }

  public void setCreditStatusIsSet(boolean value) {
    __isset_bit_vector.set(__CREDITSTATUS_ISSET_ID, value);
  }

  public String getRepayFunText() {
    return this.repayFunText;
  }

  public Project setRepayFunText(String repayFunText) {
    this.repayFunText = repayFunText;
    return this;
  }

  public void unsetRepayFunText() {
    this.repayFunText = null;
  }

  /** Returns true if field repayFunText is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayFunText() {
    return this.repayFunText != null;
  }

  public void setRepayFunTextIsSet(boolean value) {
    if (!value) {
      this.repayFunText = null;
    }
  }

  public String getAssWayText() {
    return this.assWayText;
  }

  public Project setAssWayText(String assWayText) {
    this.assWayText = assWayText;
    return this;
  }

  public void unsetAssWayText() {
    this.assWayText = null;
  }

  /** Returns true if field assWayText is set (has been assigned a value) and false otherwise */
  public boolean isSetAssWayText() {
    return this.assWayText != null;
  }

  public void setAssWayTextIsSet(boolean value) {
    if (!value) {
      this.assWayText = null;
    }
  }

  public int getJudgeRepayCycle() {
    return this.judgeRepayCycle;
  }

  public Project setJudgeRepayCycle(int judgeRepayCycle) {
    this.judgeRepayCycle = judgeRepayCycle;
    setJudgeRepayCycleIsSet(true);
    return this;
  }

  public void unsetJudgeRepayCycle() {
    __isset_bit_vector.clear(__JUDGEREPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field judgeRepayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetJudgeRepayCycle() {
    return __isset_bit_vector.get(__JUDGEREPAYCYCLE_ISSET_ID);
  }

  public void setJudgeRepayCycleIsSet(boolean value) {
    __isset_bit_vector.set(__JUDGEREPAYCYCLE_ISSET_ID, value);
  }

  public int getOldProjectId() {
    return this.oldProjectId;
  }

  public Project setOldProjectId(int oldProjectId) {
    this.oldProjectId = oldProjectId;
    setOldProjectIdIsSet(true);
    return this;
  }

  public void unsetOldProjectId() {
    __isset_bit_vector.clear(__OLDPROJECTID_ISSET_ID);
  }

  /** Returns true if field oldProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetOldProjectId() {
    return __isset_bit_vector.get(__OLDPROJECTID_ISSET_ID);
  }

  public void setOldProjectIdIsSet(boolean value) {
    __isset_bit_vector.set(__OLDPROJECTID_ISSET_ID, value);
  }

  public ProjectGuarantee getProjectGuarantee() {
    return this.projectGuarantee;
  }

  public Project setProjectGuarantee(ProjectGuarantee projectGuarantee) {
    this.projectGuarantee = projectGuarantee;
    return this;
  }

  public void unsetProjectGuarantee() {
    this.projectGuarantee = null;
  }

  /** Returns true if field projectGuarantee is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectGuarantee() {
    return this.projectGuarantee != null;
  }

  public void setProjectGuaranteeIsSet(boolean value) {
    if (!value) {
      this.projectGuarantee = null;
    }
  }

  public ProjectProperty getProjectProperty() {
    return this.projectProperty;
  }

  public Project setProjectProperty(ProjectProperty projectProperty) {
    this.projectProperty = projectProperty;
    return this;
  }

  public void unsetProjectProperty() {
    this.projectProperty = null;
  }

  /** Returns true if field projectProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectProperty() {
    return this.projectProperty != null;
  }

  public void setProjectPropertyIsSet(boolean value) {
    if (!value) {
      this.projectProperty = null;
    }
  }

  public ProjectForeclosure getProjectForeclosure() {
    return this.projectForeclosure;
  }

  public Project setProjectForeclosure(ProjectForeclosure projectForeclosure) {
    this.projectForeclosure = projectForeclosure;
    return this;
  }

  public void unsetProjectForeclosure() {
    this.projectForeclosure = null;
  }

  /** Returns true if field projectForeclosure is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectForeclosure() {
    return this.projectForeclosure != null;
  }

  public void setProjectForeclosureIsSet(boolean value) {
    if (!value) {
      this.projectForeclosure = null;
    }
  }

  public int getProductId() {
    return this.productId;
  }

  public Project setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bit_vector.clear(__PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return __isset_bit_vector.get(__PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bit_vector.set(__PRODUCTID_ISSET_ID, value);
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public Project setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bit_vector.clear(__BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return __isset_bit_vector.get(__BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bit_vector.set(__BUSINESSSOURCE_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public Project setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getBusinessContacts() {
    return this.businessContacts;
  }

  public Project setBusinessContacts(String businessContacts) {
    this.businessContacts = businessContacts;
    return this;
  }

  public void unsetBusinessContacts() {
    this.businessContacts = null;
  }

  /** Returns true if field businessContacts is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessContacts() {
    return this.businessContacts != null;
  }

  public void setBusinessContactsIsSet(boolean value) {
    if (!value) {
      this.businessContacts = null;
    }
  }

  public String getContactsPhone() {
    return this.contactsPhone;
  }

  public Project setContactsPhone(String contactsPhone) {
    this.contactsPhone = contactsPhone;
    return this;
  }

  public void unsetContactsPhone() {
    this.contactsPhone = null;
  }

  /** Returns true if field contactsPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetContactsPhone() {
    return this.contactsPhone != null;
  }

  public void setContactsPhoneIsSet(boolean value) {
    if (!value) {
      this.contactsPhone = null;
    }
  }

  public int getInnerOrOut() {
    return this.innerOrOut;
  }

  public Project setInnerOrOut(int innerOrOut) {
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    return this;
  }

  public void unsetInnerOrOut() {
    __isset_bit_vector.clear(__INNEROROUT_ISSET_ID);
  }

  /** Returns true if field innerOrOut is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOut() {
    return __isset_bit_vector.get(__INNEROROUT_ISSET_ID);
  }

  public void setInnerOrOutIsSet(boolean value) {
    __isset_bit_vector.set(__INNEROROUT_ISSET_ID, value);
  }

  public int getBusinessCategory() {
    return this.businessCategory;
  }

  public Project setBusinessCategory(int businessCategory) {
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    return this;
  }

  public void unsetBusinessCategory() {
    __isset_bit_vector.clear(__BUSINESSCATEGORY_ISSET_ID);
  }

  /** Returns true if field businessCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCategory() {
    return __isset_bit_vector.get(__BUSINESSCATEGORY_ISSET_ID);
  }

  public void setBusinessCategoryIsSet(boolean value) {
    __isset_bit_vector.set(__BUSINESSCATEGORY_ISSET_ID, value);
  }

  public int getIsNotarization() {
    return this.isNotarization;
  }

  public Project setIsNotarization(int isNotarization) {
    this.isNotarization = isNotarization;
    setIsNotarizationIsSet(true);
    return this;
  }

  public void unsetIsNotarization() {
    __isset_bit_vector.clear(__ISNOTARIZATION_ISSET_ID);
  }

  /** Returns true if field isNotarization is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotarization() {
    return __isset_bit_vector.get(__ISNOTARIZATION_ISSET_ID);
  }

  public void setIsNotarizationIsSet(boolean value) {
    __isset_bit_vector.set(__ISNOTARIZATION_ISSET_ID, value);
  }

  public int getIsDelete() {
    return this.isDelete;
  }

  public Project setIsDelete(int isDelete) {
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    return this;
  }

  public void unsetIsDelete() {
    __isset_bit_vector.clear(__ISDELETE_ISSET_ID);
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return __isset_bit_vector.get(__ISDELETE_ISSET_ID);
  }

  public void setIsDeleteIsSet(boolean value) {
    __isset_bit_vector.set(__ISDELETE_ISSET_ID, value);
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public Project setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bit_vector.clear(__ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return __isset_bit_vector.get(__ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bit_vector.set(__ISCHECHAN_ISSET_ID, value);
  }

  public int getProductType() {
    return this.productType;
  }

  public Project setProductType(int productType) {
    this.productType = productType;
    setProductTypeIsSet(true);
    return this;
  }

  public void unsetProductType() {
    __isset_bit_vector.clear(__PRODUCTTYPE_ISSET_ID);
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return __isset_bit_vector.get(__PRODUCTTYPE_ISSET_ID);
  }

  public void setProductTypeIsSet(boolean value) {
    __isset_bit_vector.set(__PRODUCTTYPE_ISSET_ID, value);
  }

  public String getManagers() {
    return this.managers;
  }

  public Project setManagers(String managers) {
    this.managers = managers;
    return this;
  }

  public void unsetManagers() {
    this.managers = null;
  }

  /** Returns true if field managers is set (has been assigned a value) and false otherwise */
  public boolean isSetManagers() {
    return this.managers != null;
  }

  public void setManagersIsSet(boolean value) {
    if (!value) {
      this.managers = null;
    }
  }

  public String getManagersPhone() {
    return this.managersPhone;
  }

  public Project setManagersPhone(String managersPhone) {
    this.managersPhone = managersPhone;
    return this;
  }

  public void unsetManagersPhone() {
    this.managersPhone = null;
  }

  /** Returns true if field managersPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetManagersPhone() {
    return this.managersPhone != null;
  }

  public void setManagersPhoneIsSet(boolean value) {
    if (!value) {
      this.managersPhone = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public Project setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public Project setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bit_vector.clear(__FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return __isset_bit_vector.get(__FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bit_vector.set(__FORECLOSURESTATUS_ISSET_ID, value);
  }

  public String getOldLoanBank() {
    return this.oldLoanBank;
  }

  public Project setOldLoanBank(String oldLoanBank) {
    this.oldLoanBank = oldLoanBank;
    return this;
  }

  public void unsetOldLoanBank() {
    this.oldLoanBank = null;
  }

  /** Returns true if field oldLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanBank() {
    return this.oldLoanBank != null;
  }

  public void setOldLoanBankIsSet(boolean value) {
    if (!value) {
      this.oldLoanBank = null;
    }
  }

  public int getOrgId() {
    return this.orgId;
  }

  public Project setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bit_vector.clear(__ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return __isset_bit_vector.get(__ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bit_vector.set(__ORGID_ISSET_ID, value);
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public Project setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bit_vector.clear(__EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return __isset_bit_vector.get(__EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bit_vector.set(__EXTENSIONFEE_ISSET_ID, value);
  }

  public String getExtensionDate() {
    return this.extensionDate;
  }

  public Project setExtensionDate(String extensionDate) {
    this.extensionDate = extensionDate;
    return this;
  }

  public void unsetExtensionDate() {
    this.extensionDate = null;
  }

  /** Returns true if field extensionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDate() {
    return this.extensionDate != null;
  }

  public void setExtensionDateIsSet(boolean value) {
    if (!value) {
      this.extensionDate = null;
    }
  }

  public double getExtensionRate() {
    return this.extensionRate;
  }

  public Project setExtensionRate(double extensionRate) {
    this.extensionRate = extensionRate;
    setExtensionRateIsSet(true);
    return this;
  }

  public void unsetExtensionRate() {
    __isset_bit_vector.clear(__EXTENSIONRATE_ISSET_ID);
  }

  /** Returns true if field extensionRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionRate() {
    return __isset_bit_vector.get(__EXTENSIONRATE_ISSET_ID);
  }

  public void setExtensionRateIsSet(boolean value) {
    __isset_bit_vector.set(__EXTENSIONRATE_ISSET_ID, value);
  }

  public int getBusinessSourceNo() {
    return this.businessSourceNo;
  }

  public Project setBusinessSourceNo(int businessSourceNo) {
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    return this;
  }

  public void unsetBusinessSourceNo() {
    __isset_bit_vector.clear(__BUSINESSSOURCENO_ISSET_ID);
  }

  /** Returns true if field businessSourceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceNo() {
    return __isset_bit_vector.get(__BUSINESSSOURCENO_ISSET_ID);
  }

  public void setBusinessSourceNoIsSet(boolean value) {
    __isset_bit_vector.set(__BUSINESSSOURCENO_ISSET_ID, value);
  }

  public int getCollectFileStatus() {
    return this.collectFileStatus;
  }

  public Project setCollectFileStatus(int collectFileStatus) {
    this.collectFileStatus = collectFileStatus;
    setCollectFileStatusIsSet(true);
    return this;
  }

  public void unsetCollectFileStatus() {
    __isset_bit_vector.clear(__COLLECTFILESTATUS_ISSET_ID);
  }

  /** Returns true if field collectFileStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFileStatus() {
    return __isset_bit_vector.get(__COLLECTFILESTATUS_ISSET_ID);
  }

  public void setCollectFileStatusIsSet(boolean value) {
    __isset_bit_vector.set(__COLLECTFILESTATUS_ISSET_ID, value);
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public Project setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bit_vector.clear(__PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return __isset_bit_vector.get(__PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bit_vector.set(__PROJECTSOURCE_ISSET_ID, value);
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public Project setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public int getForeListSize() {
    return (this.foreList == null) ? 0 : this.foreList.size();
  }

  public java.util.Iterator<ProjectForeInformation> getForeListIterator() {
    return (this.foreList == null) ? null : this.foreList.iterator();
  }

  public void addToForeList(ProjectForeInformation elem) {
    if (this.foreList == null) {
      this.foreList = new ArrayList<ProjectForeInformation>();
    }
    this.foreList.add(elem);
  }

  public List<ProjectForeInformation> getForeList() {
    return this.foreList;
  }

  public Project setForeList(List<ProjectForeInformation> foreList) {
    this.foreList = foreList;
    return this;
  }

  public void unsetForeList() {
    this.foreList = null;
  }

  /** Returns true if field foreList is set (has been assigned a value) and false otherwise */
  public boolean isSetForeList() {
    return this.foreList != null;
  }

  public void setForeListIsSet(boolean value) {
    if (!value) {
      this.foreList = null;
    }
  }

  public String getAuditorOpinion() {
    return this.auditorOpinion;
  }

  public Project setAuditorOpinion(String auditorOpinion) {
    this.auditorOpinion = auditorOpinion;
    return this;
  }

  public void unsetAuditorOpinion() {
    this.auditorOpinion = null;
  }

  /** Returns true if field auditorOpinion is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditorOpinion() {
    return this.auditorOpinion != null;
  }

  public void setAuditorOpinionIsSet(boolean value) {
    if (!value) {
      this.auditorOpinion = null;
    }
  }

  public String getSpecialDesc() {
    return this.specialDesc;
  }

  public Project setSpecialDesc(String specialDesc) {
    this.specialDesc = specialDesc;
    return this;
  }

  public void unsetSpecialDesc() {
    this.specialDesc = null;
  }

  /** Returns true if field specialDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialDesc() {
    return this.specialDesc != null;
  }

  public void setSpecialDescIsSet(boolean value) {
    if (!value) {
      this.specialDesc = null;
    }
  }

  public String getDeclaration() {
    return this.declaration;
  }

  public Project setDeclaration(String declaration) {
    this.declaration = declaration;
    return this;
  }

  public void unsetDeclaration() {
    this.declaration = null;
  }

  /** Returns true if field declaration is set (has been assigned a value) and false otherwise */
  public boolean isSetDeclaration() {
    return this.declaration != null;
  }

  public void setDeclarationIsSet(boolean value) {
    if (!value) {
      this.declaration = null;
    }
  }

  public int getIsSeller() {
    return this.isSeller;
  }

  public Project setIsSeller(int isSeller) {
    this.isSeller = isSeller;
    setIsSellerIsSet(true);
    return this;
  }

  public void unsetIsSeller() {
    __isset_bit_vector.clear(__ISSELLER_ISSET_ID);
  }

  /** Returns true if field isSeller is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSeller() {
    return __isset_bit_vector.get(__ISSELLER_ISSET_ID);
  }

  public void setIsSellerIsSet(boolean value) {
    __isset_bit_vector.set(__ISSELLER_ISSET_ID, value);
  }

  public int getRefundFileStatus() {
    return this.refundFileStatus;
  }

  public Project setRefundFileStatus(int refundFileStatus) {
    this.refundFileStatus = refundFileStatus;
    setRefundFileStatusIsSet(true);
    return this;
  }

  public void unsetRefundFileStatus() {
    __isset_bit_vector.clear(__REFUNDFILESTATUS_ISSET_ID);
  }

  /** Returns true if field refundFileStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundFileStatus() {
    return __isset_bit_vector.get(__REFUNDFILESTATUS_ISSET_ID);
  }

  public void setRefundFileStatusIsSet(boolean value) {
    __isset_bit_vector.set(__REFUNDFILESTATUS_ISSET_ID, value);
  }

  public String getChechanDate() {
    return this.chechanDate;
  }

  public Project setChechanDate(String chechanDate) {
    this.chechanDate = chechanDate;
    return this;
  }

  public void unsetChechanDate() {
    this.chechanDate = null;
  }

  /** Returns true if field chechanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanDate() {
    return this.chechanDate != null;
  }

  public void setChechanDateIsSet(boolean value) {
    if (!value) {
      this.chechanDate = null;
    }
  }

  public int getChechanUserId() {
    return this.chechanUserId;
  }

  public Project setChechanUserId(int chechanUserId) {
    this.chechanUserId = chechanUserId;
    setChechanUserIdIsSet(true);
    return this;
  }

  public void unsetChechanUserId() {
    __isset_bit_vector.clear(__CHECHANUSERID_ISSET_ID);
  }

  /** Returns true if field chechanUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanUserId() {
    return __isset_bit_vector.get(__CHECHANUSERID_ISSET_ID);
  }

  public void setChechanUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__CHECHANUSERID_ISSET_ID, value);
  }

  public String getChechanUserName() {
    return this.chechanUserName;
  }

  public Project setChechanUserName(String chechanUserName) {
    this.chechanUserName = chechanUserName;
    return this;
  }

  public void unsetChechanUserName() {
    this.chechanUserName = null;
  }

  /** Returns true if field chechanUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanUserName() {
    return this.chechanUserName != null;
  }

  public void setChechanUserNameIsSet(boolean value) {
    if (!value) {
      this.chechanUserName = null;
    }
  }

  public String getChechanCause() {
    return this.chechanCause;
  }

  public Project setChechanCause(String chechanCause) {
    this.chechanCause = chechanCause;
    return this;
  }

  public void unsetChechanCause() {
    this.chechanCause = null;
  }

  /** Returns true if field chechanCause is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanCause() {
    return this.chechanCause != null;
  }

  public void setChechanCauseIsSet(boolean value) {
    if (!value) {
      this.chechanCause = null;
    }
  }

  public int getExtensionDays() {
    return this.extensionDays;
  }

  public Project setExtensionDays(int extensionDays) {
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    return this;
  }

  public void unsetExtensionDays() {
    __isset_bit_vector.clear(__EXTENSIONDAYS_ISSET_ID);
  }

  /** Returns true if field extensionDays is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDays() {
    return __isset_bit_vector.get(__EXTENSIONDAYS_ISSET_ID);
  }

  public void setExtensionDaysIsSet(boolean value) {
    __isset_bit_vector.set(__EXTENSIONDAYS_ISSET_ID, value);
  }

  public String getSourceStr() {
    return this.sourceStr;
  }

  public Project setSourceStr(String sourceStr) {
    this.sourceStr = sourceStr;
    return this;
  }

  public void unsetSourceStr() {
    this.sourceStr = null;
  }

  /** Returns true if field sourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceStr() {
    return this.sourceStr != null;
  }

  public void setSourceStrIsSet(boolean value) {
    if (!value) {
      this.sourceStr = null;
    }
  }

  public String getOrgCustomerName() {
    return this.orgCustomerName;
  }

  public Project setOrgCustomerName(String orgCustomerName) {
    this.orgCustomerName = orgCustomerName;
    return this;
  }

  public void unsetOrgCustomerName() {
    this.orgCustomerName = null;
  }

  /** Returns true if field orgCustomerName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCustomerName() {
    return this.orgCustomerName != null;
  }

  public void setOrgCustomerNameIsSet(boolean value) {
    if (!value) {
      this.orgCustomerName = null;
    }
  }

  public String getOrgCustomerPhone() {
    return this.orgCustomerPhone;
  }

  public Project setOrgCustomerPhone(String orgCustomerPhone) {
    this.orgCustomerPhone = orgCustomerPhone;
    return this;
  }

  public void unsetOrgCustomerPhone() {
    this.orgCustomerPhone = null;
  }

  /** Returns true if field orgCustomerPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCustomerPhone() {
    return this.orgCustomerPhone != null;
  }

  public void setOrgCustomerPhoneIsSet(boolean value) {
    if (!value) {
      this.orgCustomerPhone = null;
    }
  }

  public String getOrgCustomerCard() {
    return this.orgCustomerCard;
  }

  public Project setOrgCustomerCard(String orgCustomerCard) {
    this.orgCustomerCard = orgCustomerCard;
    return this;
  }

  public void unsetOrgCustomerCard() {
    this.orgCustomerCard = null;
  }

  /** Returns true if field orgCustomerCard is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCustomerCard() {
    return this.orgCustomerCard != null;
  }

  public void setOrgCustomerCardIsSet(boolean value) {
    if (!value) {
      this.orgCustomerCard = null;
    }
  }

  public String getPlanLoanDate() {
    return this.planLoanDate;
  }

  public Project setPlanLoanDate(String planLoanDate) {
    this.planLoanDate = planLoanDate;
    return this;
  }

  public void unsetPlanLoanDate() {
    this.planLoanDate = null;
  }

  /** Returns true if field planLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanLoanDate() {
    return this.planLoanDate != null;
  }

  public void setPlanLoanDateIsSet(boolean value) {
    if (!value) {
      this.planLoanDate = null;
    }
  }

  public double getPlanLoanMoney() {
    return this.planLoanMoney;
  }

  public Project setPlanLoanMoney(double planLoanMoney) {
    this.planLoanMoney = planLoanMoney;
    setPlanLoanMoneyIsSet(true);
    return this;
  }

  public void unsetPlanLoanMoney() {
    __isset_bit_vector.clear(__PLANLOANMONEY_ISSET_ID);
  }

  /** Returns true if field planLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanLoanMoney() {
    return __isset_bit_vector.get(__PLANLOANMONEY_ISSET_ID);
  }

  public void setPlanLoanMoneyIsSet(boolean value) {
    __isset_bit_vector.set(__PLANLOANMONEY_ISSET_ID, value);
  }

  public double getLoanRate() {
    return this.loanRate;
  }

  public Project setLoanRate(double loanRate) {
    this.loanRate = loanRate;
    setLoanRateIsSet(true);
    return this;
  }

  public void unsetLoanRate() {
    __isset_bit_vector.clear(__LOANRATE_ISSET_ID);
  }

  /** Returns true if field loanRate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRate() {
    return __isset_bit_vector.get(__LOANRATE_ISSET_ID);
  }

  public void setLoanRateIsSet(boolean value) {
    __isset_bit_vector.set(__LOANRATE_ISSET_ID, value);
  }

  public double getMaxLoanRate() {
    return this.maxLoanRate;
  }

  public Project setMaxLoanRate(double maxLoanRate) {
    this.maxLoanRate = maxLoanRate;
    setMaxLoanRateIsSet(true);
    return this;
  }

  public void unsetMaxLoanRate() {
    __isset_bit_vector.clear(__MAXLOANRATE_ISSET_ID);
  }

  /** Returns true if field maxLoanRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLoanRate() {
    return __isset_bit_vector.get(__MAXLOANRATE_ISSET_ID);
  }

  public void setMaxLoanRateIsSet(boolean value) {
    __isset_bit_vector.set(__MAXLOANRATE_ISSET_ID, value);
  }

  public int getIsClosed() {
    return this.isClosed;
  }

  public Project setIsClosed(int isClosed) {
    this.isClosed = isClosed;
    setIsClosedIsSet(true);
    return this;
  }

  public void unsetIsClosed() {
    __isset_bit_vector.clear(__ISCLOSED_ISSET_ID);
  }

  /** Returns true if field isClosed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsClosed() {
    return __isset_bit_vector.get(__ISCLOSED_ISSET_ID);
  }

  public void setIsClosedIsSet(boolean value) {
    __isset_bit_vector.set(__ISCLOSED_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public Project setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getAreaCode() {
    return this.areaCode;
  }

  public Project setAreaCode(String areaCode) {
    this.areaCode = areaCode;
    return this;
  }

  public void unsetAreaCode() {
    this.areaCode = null;
  }

  /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCode() {
    return this.areaCode != null;
  }

  public void setAreaCodeIsSet(boolean value) {
    if (!value) {
      this.areaCode = null;
    }
  }

  public int getApplyUserId() {
    return this.applyUserId;
  }

  public Project setApplyUserId(int applyUserId) {
    this.applyUserId = applyUserId;
    setApplyUserIdIsSet(true);
    return this;
  }

  public void unsetApplyUserId() {
    __isset_bit_vector.clear(__APPLYUSERID_ISSET_ID);
  }

  /** Returns true if field applyUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserId() {
    return __isset_bit_vector.get(__APPLYUSERID_ISSET_ID);
  }

  public void setApplyUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__APPLYUSERID_ISSET_ID, value);
  }

  public int getIsNeedHandle() {
    return this.isNeedHandle;
  }

  public Project setIsNeedHandle(int isNeedHandle) {
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    return this;
  }

  public void unsetIsNeedHandle() {
    __isset_bit_vector.clear(__ISNEEDHANDLE_ISSET_ID);
  }

  /** Returns true if field isNeedHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedHandle() {
    return __isset_bit_vector.get(__ISNEEDHANDLE_ISSET_ID);
  }

  public void setIsNeedHandleIsSet(boolean value) {
    __isset_bit_vector.set(__ISNEEDHANDLE_ISSET_ID, value);
  }

  public String getCancelGuaranteeDate() {
    return this.cancelGuaranteeDate;
  }

  public Project setCancelGuaranteeDate(String cancelGuaranteeDate) {
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    return this;
  }

  public void unsetCancelGuaranteeDate() {
    this.cancelGuaranteeDate = null;
  }

  /** Returns true if field cancelGuaranteeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelGuaranteeDate() {
    return this.cancelGuaranteeDate != null;
  }

  public void setCancelGuaranteeDateIsSet(boolean value) {
    if (!value) {
      this.cancelGuaranteeDate = null;
    }
  }

  public int getIsNeedFinancial() {
    return this.isNeedFinancial;
  }

  public Project setIsNeedFinancial(int isNeedFinancial) {
    this.isNeedFinancial = isNeedFinancial;
    setIsNeedFinancialIsSet(true);
    return this;
  }

  public void unsetIsNeedFinancial() {
    __isset_bit_vector.clear(__ISNEEDFINANCIAL_ISSET_ID);
  }

  /** Returns true if field isNeedFinancial is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedFinancial() {
    return __isset_bit_vector.get(__ISNEEDFINANCIAL_ISSET_ID);
  }

  public void setIsNeedFinancialIsSet(boolean value) {
    __isset_bit_vector.set(__ISNEEDFINANCIAL_ISSET_ID, value);
  }

  public int getEstateListSize() {
    return (this.estateList == null) ? 0 : this.estateList.size();
  }

  public java.util.Iterator<BizProjectEstate> getEstateListIterator() {
    return (this.estateList == null) ? null : this.estateList.iterator();
  }

  public void addToEstateList(BizProjectEstate elem) {
    if (this.estateList == null) {
      this.estateList = new ArrayList<BizProjectEstate>();
    }
    this.estateList.add(elem);
  }

  public List<BizProjectEstate> getEstateList() {
    return this.estateList;
  }

  public Project setEstateList(List<BizProjectEstate> estateList) {
    this.estateList = estateList;
    return this;
  }

  public void unsetEstateList() {
    this.estateList = null;
  }

  /** Returns true if field estateList is set (has been assigned a value) and false otherwise */
  public boolean isSetEstateList() {
    return this.estateList != null;
  }

  public void setEstateListIsSet(boolean value) {
    if (!value) {
      this.estateList = null;
    }
  }

  public String getHouseIds() {
    return this.houseIds;
  }

  public Project setHouseIds(String houseIds) {
    this.houseIds = houseIds;
    return this;
  }

  public void unsetHouseIds() {
    this.houseIds = null;
  }

  /** Returns true if field houseIds is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseIds() {
    return this.houseIds != null;
  }

  public void setHouseIdsIsSet(boolean value) {
    if (!value) {
      this.houseIds = null;
    }
  }

  public int getIsReject() {
    return this.isReject;
  }

  public Project setIsReject(int isReject) {
    this.isReject = isReject;
    setIsRejectIsSet(true);
    return this;
  }

  public void unsetIsReject() {
    __isset_bit_vector.clear(__ISREJECT_ISSET_ID);
  }

  /** Returns true if field isReject is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReject() {
    return __isset_bit_vector.get(__ISREJECT_ISSET_ID);
  }

  public void setIsRejectIsSet(boolean value) {
    __isset_bit_vector.set(__ISREJECT_ISSET_ID, value);
  }

  public int getIsAssigned() {
    return this.isAssigned;
  }

  public Project setIsAssigned(int isAssigned) {
    this.isAssigned = isAssigned;
    setIsAssignedIsSet(true);
    return this;
  }

  public void unsetIsAssigned() {
    __isset_bit_vector.clear(__ISASSIGNED_ISSET_ID);
  }

  /** Returns true if field isAssigned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAssigned() {
    return __isset_bit_vector.get(__ISASSIGNED_ISSET_ID);
  }

  public void setIsAssignedIsSet(boolean value) {
    __isset_bit_vector.set(__ISASSIGNED_ISSET_ID, value);
  }

  public int getRecordClerkId() {
    return this.recordClerkId;
  }

  public Project setRecordClerkId(int recordClerkId) {
    this.recordClerkId = recordClerkId;
    setRecordClerkIdIsSet(true);
    return this;
  }

  public void unsetRecordClerkId() {
    __isset_bit_vector.clear(__RECORDCLERKID_ISSET_ID);
  }

  /** Returns true if field recordClerkId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordClerkId() {
    return __isset_bit_vector.get(__RECORDCLERKID_ISSET_ID);
  }

  public void setRecordClerkIdIsSet(boolean value) {
    __isset_bit_vector.set(__RECORDCLERKID_ISSET_ID, value);
  }

  public int getForeAfterMonitorStatus() {
    return this.foreAfterMonitorStatus;
  }

  public Project setForeAfterMonitorStatus(int foreAfterMonitorStatus) {
    this.foreAfterMonitorStatus = foreAfterMonitorStatus;
    setForeAfterMonitorStatusIsSet(true);
    return this;
  }

  public void unsetForeAfterMonitorStatus() {
    __isset_bit_vector.clear(__FOREAFTERMONITORSTATUS_ISSET_ID);
  }

  /** Returns true if field foreAfterMonitorStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeAfterMonitorStatus() {
    return __isset_bit_vector.get(__FOREAFTERMONITORSTATUS_ISSET_ID);
  }

  public void setForeAfterMonitorStatusIsSet(boolean value) {
    __isset_bit_vector.set(__FOREAFTERMONITORSTATUS_ISSET_ID, value);
  }

  public int getOriginalLoanListSize() {
    return (this.originalLoanList == null) ? 0 : this.originalLoanList.size();
  }

  public java.util.Iterator<BizOriginalLoan> getOriginalLoanListIterator() {
    return (this.originalLoanList == null) ? null : this.originalLoanList.iterator();
  }

  public void addToOriginalLoanList(BizOriginalLoan elem) {
    if (this.originalLoanList == null) {
      this.originalLoanList = new ArrayList<BizOriginalLoan>();
    }
    this.originalLoanList.add(elem);
  }

  public List<BizOriginalLoan> getOriginalLoanList() {
    return this.originalLoanList;
  }

  public Project setOriginalLoanList(List<BizOriginalLoan> originalLoanList) {
    this.originalLoanList = originalLoanList;
    return this;
  }

  public void unsetOriginalLoanList() {
    this.originalLoanList = null;
  }

  /** Returns true if field originalLoanList is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalLoanList() {
    return this.originalLoanList != null;
  }

  public void setOriginalLoanListIsSet(boolean value) {
    if (!value) {
      this.originalLoanList = null;
    }
  }

  public String getOriginalLoanIds() {
    return this.originalLoanIds;
  }

  public Project setOriginalLoanIds(String originalLoanIds) {
    this.originalLoanIds = originalLoanIds;
    return this;
  }

  public void unsetOriginalLoanIds() {
    this.originalLoanIds = null;
  }

  /** Returns true if field originalLoanIds is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalLoanIds() {
    return this.originalLoanIds != null;
  }

  public void setOriginalLoanIdsIsSet(boolean value) {
    if (!value) {
      this.originalLoanIds = null;
    }
  }

  public com.xlkfinance.bms.rpc.project.CusEnterpriseInfo getCusEnterpriseInfo() {
    return this.cusEnterpriseInfo;
  }

  public Project setCusEnterpriseInfo(com.xlkfinance.bms.rpc.project.CusEnterpriseInfo cusEnterpriseInfo) {
    this.cusEnterpriseInfo = cusEnterpriseInfo;
    return this;
  }

  public void unsetCusEnterpriseInfo() {
    this.cusEnterpriseInfo = null;
  }

  /** Returns true if field cusEnterpriseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCusEnterpriseInfo() {
    return this.cusEnterpriseInfo != null;
  }

  public void setCusEnterpriseInfoIsSet(boolean value) {
    if (!value) {
      this.cusEnterpriseInfo = null;
    }
  }

  public com.xlkfinance.bms.rpc.project.CusCredentials getCusCredentials() {
    return this.cusCredentials;
  }

  public Project setCusCredentials(com.xlkfinance.bms.rpc.project.CusCredentials cusCredentials) {
    this.cusCredentials = cusCredentials;
    return this;
  }

  public void unsetCusCredentials() {
    this.cusCredentials = null;
  }

  /** Returns true if field cusCredentials is set (has been assigned a value) and false otherwise */
  public boolean isSetCusCredentials() {
    return this.cusCredentials != null;
  }

  public void setCusCredentialsIsSet(boolean value) {
    if (!value) {
      this.cusCredentials = null;
    }
  }

  public com.xlkfinance.bms.rpc.project.CusCardInfo getCusCardInfo() {
    return this.cusCardInfo;
  }

  public Project setCusCardInfo(com.xlkfinance.bms.rpc.project.CusCardInfo cusCardInfo) {
    this.cusCardInfo = cusCardInfo;
    return this;
  }

  public void unsetCusCardInfo() {
    this.cusCardInfo = null;
  }

  /** Returns true if field cusCardInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCusCardInfo() {
    return this.cusCardInfo != null;
  }

  public void setCusCardInfoIsSet(boolean value) {
    if (!value) {
      this.cusCardInfo = null;
    }
  }

  public String getCapitalName() {
    return this.capitalName;
  }

  public Project setCapitalName(String capitalName) {
    this.capitalName = capitalName;
    return this;
  }

  public void unsetCapitalName() {
    this.capitalName = null;
  }

  /** Returns true if field capitalName is set (has been assigned a value) and false otherwise */
  public boolean isSetCapitalName() {
    return this.capitalName != null;
  }

  public void setCapitalNameIsSet(boolean value) {
    if (!value) {
      this.capitalName = null;
    }
  }

  public String getLoanType() {
    return this.loanType;
  }

  public Project setLoanType(String loanType) {
    this.loanType = loanType;
    return this;
  }

  public void unsetLoanType() {
    this.loanType = null;
  }

  /** Returns true if field loanType is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanType() {
    return this.loanType != null;
  }

  public void setLoanTypeIsSet(boolean value) {
    if (!value) {
      this.loanType = null;
    }
  }

  public String getNextUserId() {
    return this.nextUserId;
  }

  public Project setNextUserId(String nextUserId) {
    this.nextUserId = nextUserId;
    return this;
  }

  public void unsetNextUserId() {
    this.nextUserId = null;
  }

  /** Returns true if field nextUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetNextUserId() {
    return this.nextUserId != null;
  }

  public void setNextUserIdIsSet(boolean value) {
    if (!value) {
      this.nextUserId = null;
    }
  }

  public String getProContactIds() {
    return this.proContactIds;
  }

  public Project setProContactIds(String proContactIds) {
    this.proContactIds = proContactIds;
    return this;
  }

  public void unsetProContactIds() {
    this.proContactIds = null;
  }

  /** Returns true if field proContactIds is set (has been assigned a value) and false otherwise */
  public boolean isSetProContactIds() {
    return this.proContactIds != null;
  }

  public void setProContactIdsIsSet(boolean value) {
    if (!value) {
      this.proContactIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    case PROJECT_TYPE_TEXT:
      if (value == null) {
        unsetProjectTypeText();
      } else {
        setProjectTypeText((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case BUSINESS_CATELOG:
      if (value == null) {
        unsetBusinessCatelog();
      } else {
        setBusinessCatelog((Integer)value);
      }
      break;

    case BUSINESS_CATELOG_TEXT:
      if (value == null) {
        unsetBusinessCatelogText();
      } else {
        setBusinessCatelogText((String)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((Integer)value);
      }
      break;

    case BUSINESS_TYPE_TEXT:
      if (value == null) {
        unsetBusinessTypeText();
      } else {
        setBusinessTypeText((String)value);
      }
      break;

    case FLOW_CATELOG:
      if (value == null) {
        unsetFlowCatelog();
      } else {
        setFlowCatelog((Integer)value);
      }
      break;

    case FLOW_CATELOG_TEXT:
      if (value == null) {
        unsetFlowCatelogText();
      } else {
        setFlowCatelogText((String)value);
      }
      break;

    case MY_TYPE:
      if (value == null) {
        unsetMyType();
      } else {
        setMyType((Integer)value);
      }
      break;

    case MY_TYPE_TEXT:
      if (value == null) {
        unsetMyTypeText();
      } else {
        setMyTypeText((String)value);
      }
      break;

    case MY_MAIN:
      if (value == null) {
        unsetMyMain();
      } else {
        setMyMain((String)value);
      }
      break;

    case MY_MAIN_TEXT:
      if (value == null) {
        unsetMyMainText();
      } else {
        setMyMainText((String)value);
      }
      break;

    case LOAN_INTEREST_RECORD:
      if (value == null) {
        unsetLoanInterestRecord();
      } else {
        setLoanInterestRecord((Integer)value);
      }
      break;

    case LOAN_INTEREST_RECORD_TEXT:
      if (value == null) {
        unsetLoanInterestRecordText();
      } else {
        setLoanInterestRecordText((String)value);
      }
      break;

    case LOAN_INTEREST_RECORD_NO:
      if (value == null) {
        unsetLoanInterestRecordNo();
      } else {
        setLoanInterestRecordNo((String)value);
      }
      break;

    case LOAN_MGR_RECORD:
      if (value == null) {
        unsetLoanMgrRecord();
      } else {
        setLoanMgrRecord((Integer)value);
      }
      break;

    case LOAN_MGR_RECORD_TEXT:
      if (value == null) {
        unsetLoanMgrRecordText();
      } else {
        setLoanMgrRecordText((String)value);
      }
      break;

    case LOAN_MGR_RECORD_NO:
      if (value == null) {
        unsetLoanMgrRecordNo();
      } else {
        setLoanMgrRecordNo((String)value);
      }
      break;

    case LOAN_OTHER_FEE:
      if (value == null) {
        unsetLoanOtherFee();
      } else {
        setLoanOtherFee((Integer)value);
      }
      break;

    case LOAN_OTHER_FEE_TEXT:
      if (value == null) {
        unsetLoanOtherFeeText();
      } else {
        setLoanOtherFeeText((String)value);
      }
      break;

    case LOAN_OTHER_FEE_NO:
      if (value == null) {
        unsetLoanOtherFeeNo();
      } else {
        setLoanOtherFeeNo((String)value);
      }
      break;

    case IS_ALLOW_PREPAY:
      if (value == null) {
        unsetIsAllowPrepay();
      } else {
        setIsAllowPrepay((Integer)value);
      }
      break;

    case IS_ALLOW_PREPAY_TEXT:
      if (value == null) {
        unsetIsAllowPrepayText();
      } else {
        setIsAllowPrepayText((String)value);
      }
      break;

    case IS_RETURN_INTEREST:
      if (value == null) {
        unsetIsReturnInterest();
      } else {
        setIsReturnInterest((Integer)value);
      }
      break;

    case IS_RETURN_INTEREST_TEXT:
      if (value == null) {
        unsetIsReturnInterestText();
      } else {
        setIsReturnInterestText((String)value);
      }
      break;

    case PERSON_IDS:
      if (value == null) {
        unsetPersonIds();
      } else {
        setPersonIds((String)value);
      }
      break;

    case BEGIN_REQUEST_DTTM:
      if (value == null) {
        unsetBeginRequestDttm();
      } else {
        setBeginRequestDttm((String)value);
      }
      break;

    case END_REQUEST_DTTM:
      if (value == null) {
        unsetEndRequestDttm();
      } else {
        setEndRequestDttm((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    case ACCT_TYPE_TEXT:
      if (value == null) {
        unsetAcctTypeText();
      } else {
        setAcctTypeText((String)value);
      }
      break;

    case CREDTI_START_DT:
      if (value == null) {
        unsetCredtiStartDt();
      } else {
        setCredtiStartDt((String)value);
      }
      break;

    case CREDTI_END_DT:
      if (value == null) {
        unsetCredtiEndDt();
      } else {
        setCredtiEndDt((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case IS_HOOP:
      if (value == null) {
        unsetIsHoop();
      } else {
        setIsHoop((Integer)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Integer)value);
      }
      break;

    case DATE_MODE:
      if (value == null) {
        unsetDateMode();
      } else {
        setDateMode((Integer)value);
      }
      break;

    case REPAY_FUN:
      if (value == null) {
        unsetRepayFun();
      } else {
        setRepayFun((Integer)value);
      }
      break;

    case REPAY_CYCLE_TYPE:
      if (value == null) {
        unsetRepayCycleType();
      } else {
        setRepayCycleType((Integer)value);
      }
      break;

    case REPAY_CYCLE_DATE:
      if (value == null) {
        unsetRepayCycleDate();
      } else {
        setRepayCycleDate((Integer)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((Integer)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case REPAY_OPTION:
      if (value == null) {
        unsetRepayOption();
      } else {
        setRepayOption((Integer)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((Integer)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case MONTH_LOAN_MGR:
      if (value == null) {
        unsetMonthLoanMgr();
      } else {
        setMonthLoanMgr((Double)value);
      }
      break;

    case MONTH_LOAN_OTHER_FEE:
      if (value == null) {
        unsetMonthLoanOtherFee();
      } else {
        setMonthLoanOtherFee((Double)value);
      }
      break;

    case YEAR_LOAN_INTEREST:
      if (value == null) {
        unsetYearLoanInterest();
      } else {
        setYearLoanInterest((Double)value);
      }
      break;

    case YEAR_LOAN_MGR:
      if (value == null) {
        unsetYearLoanMgr();
      } else {
        setYearLoanMgr((Double)value);
      }
      break;

    case YEAR_LOAN_OTHER_FEE:
      if (value == null) {
        unsetYearLoanOtherFee();
      } else {
        setYearLoanOtherFee((Double)value);
      }
      break;

    case DAY_LOAN_INTEREST:
      if (value == null) {
        unsetDayLoanInterest();
      } else {
        setDayLoanInterest((Double)value);
      }
      break;

    case DAY_LOAN_MGR:
      if (value == null) {
        unsetDayLoanMgr();
      } else {
        setDayLoanMgr((Double)value);
      }
      break;

    case DAY_LOAN_OTHER_FEE:
      if (value == null) {
        unsetDayLoanOtherFee();
      } else {
        setDayLoanOtherFee((Double)value);
      }
      break;

    case LIQ_DMG_PROPORTION:
      if (value == null) {
        unsetLiqDmgProportion();
      } else {
        setLiqDmgProportion((Double)value);
      }
      break;

    case OVERDUE_LOAN_INTEREST:
      if (value == null) {
        unsetOverdueLoanInterest();
      } else {
        setOverdueLoanInterest((Double)value);
      }
      break;

    case OVERDUE_FINE_INTEREST:
      if (value == null) {
        unsetOverdueFineInterest();
      } else {
        setOverdueFineInterest((Double)value);
      }
      break;

    case MIS_FINE_INTEREST:
      if (value == null) {
        unsetMisFineInterest();
      } else {
        setMisFineInterest((Double)value);
      }
      break;

    case PREPAY_LIQ_DMG_PROPORTION:
      if (value == null) {
        unsetPrepayLiqDmgProportion();
      } else {
        setPrepayLiqDmgProportion((Double)value);
      }
      break;

    case CIRCULATE_TYPE:
      if (value == null) {
        unsetCirculateType();
      } else {
        setCirculateType((Integer)value);
      }
      break;

    case ABBREVIATION:
      if (value == null) {
        unsetAbbreviation();
      } else {
        setAbbreviation((String)value);
      }
      break;

    case USER_PIDS:
      if (value == null) {
        unsetUserPids();
      } else {
        setUserPids((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case SURVEY_RESULT:
      if (value == null) {
        unsetSurveyResult();
      } else {
        setSurveyResult((String)value);
      }
      break;

    case REQUEST_STATUS_VAL:
      if (value == null) {
        unsetRequestStatusVal();
      } else {
        setRequestStatusVal((String)value);
      }
      break;

    case ECO_TRADE_TEXT:
      if (value == null) {
        unsetEcoTradeText();
      } else {
        setEcoTradeText((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((String)value);
      }
      break;

    case ASS_WAY:
      if (value == null) {
        unsetAssWay();
      } else {
        setAssWay((String)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case BEGIN_COMPLETE_DTTM:
      if (value == null) {
        unsetBeginCompleteDttm();
      } else {
        setBeginCompleteDttm((String)value);
      }
      break;

    case END_COMPLETE_DTTM:
      if (value == null) {
        unsetEndCompleteDttm();
      } else {
        setEndCompleteDttm((String)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((String)value);
      }
      break;

    case REPAY_OPTION_TEST:
      if (value == null) {
        unsetRepayOptionTest();
      } else {
        setRepayOptionTest((Integer)value);
      }
      break;

    case EACHISSUE_OPTION:
      if (value == null) {
        unsetEachissueOption();
      } else {
        setEachissueOption((Integer)value);
      }
      break;

    case FEES_PROPORTION:
      if (value == null) {
        unsetFeesProportion();
      } else {
        setFeesProportion((Double)value);
      }
      break;

    case CREDIT_ID:
      if (value == null) {
        unsetCreditId();
      } else {
        setCreditId((Integer)value);
      }
      break;

    case EXTENSION_NUM:
      if (value == null) {
        unsetExtensionNum();
      } else {
        setExtensionNum((Integer)value);
      }
      break;

    case EXTENSION_AMT:
      if (value == null) {
        unsetExtensionAmt();
      } else {
        setExtensionAmt((Double)value);
      }
      break;

    case LIMIT_ID:
      if (value == null) {
        unsetLimitId();
      } else {
        setLimitId((Integer)value);
      }
      break;

    case NOW_USER_ID:
      if (value == null) {
        unsetNowUserId();
      } else {
        setNowUserId((Integer)value);
      }
      break;

    case CREDIT_STATUS:
      if (value == null) {
        unsetCreditStatus();
      } else {
        setCreditStatus((Integer)value);
      }
      break;

    case REPAY_FUN_TEXT:
      if (value == null) {
        unsetRepayFunText();
      } else {
        setRepayFunText((String)value);
      }
      break;

    case ASS_WAY_TEXT:
      if (value == null) {
        unsetAssWayText();
      } else {
        setAssWayText((String)value);
      }
      break;

    case JUDGE_REPAY_CYCLE:
      if (value == null) {
        unsetJudgeRepayCycle();
      } else {
        setJudgeRepayCycle((Integer)value);
      }
      break;

    case OLD_PROJECT_ID:
      if (value == null) {
        unsetOldProjectId();
      } else {
        setOldProjectId((Integer)value);
      }
      break;

    case PROJECT_GUARANTEE:
      if (value == null) {
        unsetProjectGuarantee();
      } else {
        setProjectGuarantee((ProjectGuarantee)value);
      }
      break;

    case PROJECT_PROPERTY:
      if (value == null) {
        unsetProjectProperty();
      } else {
        setProjectProperty((ProjectProperty)value);
      }
      break;

    case PROJECT_FORECLOSURE:
      if (value == null) {
        unsetProjectForeclosure();
      } else {
        setProjectForeclosure((ProjectForeclosure)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case BUSINESS_CONTACTS:
      if (value == null) {
        unsetBusinessContacts();
      } else {
        setBusinessContacts((String)value);
      }
      break;

    case CONTACTS_PHONE:
      if (value == null) {
        unsetContactsPhone();
      } else {
        setContactsPhone((String)value);
      }
      break;

    case INNER_OR_OUT:
      if (value == null) {
        unsetInnerOrOut();
      } else {
        setInnerOrOut((Integer)value);
      }
      break;

    case BUSINESS_CATEGORY:
      if (value == null) {
        unsetBusinessCategory();
      } else {
        setBusinessCategory((Integer)value);
      }
      break;

    case IS_NOTARIZATION:
      if (value == null) {
        unsetIsNotarization();
      } else {
        setIsNotarization((Integer)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((Integer)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((Integer)value);
      }
      break;

    case MANAGERS:
      if (value == null) {
        unsetManagers();
      } else {
        setManagers((String)value);
      }
      break;

    case MANAGERS_PHONE:
      if (value == null) {
        unsetManagersPhone();
      } else {
        setManagersPhone((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case OLD_LOAN_BANK:
      if (value == null) {
        unsetOldLoanBank();
      } else {
        setOldLoanBank((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case EXTENSION_DATE:
      if (value == null) {
        unsetExtensionDate();
      } else {
        setExtensionDate((String)value);
      }
      break;

    case EXTENSION_RATE:
      if (value == null) {
        unsetExtensionRate();
      } else {
        setExtensionRate((Double)value);
      }
      break;

    case BUSINESS_SOURCE_NO:
      if (value == null) {
        unsetBusinessSourceNo();
      } else {
        setBusinessSourceNo((Integer)value);
      }
      break;

    case COLLECT_FILE_STATUS:
      if (value == null) {
        unsetCollectFileStatus();
      } else {
        setCollectFileStatus((Integer)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case FORE_LIST:
      if (value == null) {
        unsetForeList();
      } else {
        setForeList((List<ProjectForeInformation>)value);
      }
      break;

    case AUDITOR_OPINION:
      if (value == null) {
        unsetAuditorOpinion();
      } else {
        setAuditorOpinion((String)value);
      }
      break;

    case SPECIAL_DESC:
      if (value == null) {
        unsetSpecialDesc();
      } else {
        setSpecialDesc((String)value);
      }
      break;

    case DECLARATION:
      if (value == null) {
        unsetDeclaration();
      } else {
        setDeclaration((String)value);
      }
      break;

    case IS_SELLER:
      if (value == null) {
        unsetIsSeller();
      } else {
        setIsSeller((Integer)value);
      }
      break;

    case REFUND_FILE_STATUS:
      if (value == null) {
        unsetRefundFileStatus();
      } else {
        setRefundFileStatus((Integer)value);
      }
      break;

    case CHECHAN_DATE:
      if (value == null) {
        unsetChechanDate();
      } else {
        setChechanDate((String)value);
      }
      break;

    case CHECHAN_USER_ID:
      if (value == null) {
        unsetChechanUserId();
      } else {
        setChechanUserId((Integer)value);
      }
      break;

    case CHECHAN_USER_NAME:
      if (value == null) {
        unsetChechanUserName();
      } else {
        setChechanUserName((String)value);
      }
      break;

    case CHECHAN_CAUSE:
      if (value == null) {
        unsetChechanCause();
      } else {
        setChechanCause((String)value);
      }
      break;

    case EXTENSION_DAYS:
      if (value == null) {
        unsetExtensionDays();
      } else {
        setExtensionDays((Integer)value);
      }
      break;

    case SOURCE_STR:
      if (value == null) {
        unsetSourceStr();
      } else {
        setSourceStr((String)value);
      }
      break;

    case ORG_CUSTOMER_NAME:
      if (value == null) {
        unsetOrgCustomerName();
      } else {
        setOrgCustomerName((String)value);
      }
      break;

    case ORG_CUSTOMER_PHONE:
      if (value == null) {
        unsetOrgCustomerPhone();
      } else {
        setOrgCustomerPhone((String)value);
      }
      break;

    case ORG_CUSTOMER_CARD:
      if (value == null) {
        unsetOrgCustomerCard();
      } else {
        setOrgCustomerCard((String)value);
      }
      break;

    case PLAN_LOAN_DATE:
      if (value == null) {
        unsetPlanLoanDate();
      } else {
        setPlanLoanDate((String)value);
      }
      break;

    case PLAN_LOAN_MONEY:
      if (value == null) {
        unsetPlanLoanMoney();
      } else {
        setPlanLoanMoney((Double)value);
      }
      break;

    case LOAN_RATE:
      if (value == null) {
        unsetLoanRate();
      } else {
        setLoanRate((Double)value);
      }
      break;

    case MAX_LOAN_RATE:
      if (value == null) {
        unsetMaxLoanRate();
      } else {
        setMaxLoanRate((Double)value);
      }
      break;

    case IS_CLOSED:
      if (value == null) {
        unsetIsClosed();
      } else {
        setIsClosed((Integer)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case AREA_CODE:
      if (value == null) {
        unsetAreaCode();
      } else {
        setAreaCode((String)value);
      }
      break;

    case APPLY_USER_ID:
      if (value == null) {
        unsetApplyUserId();
      } else {
        setApplyUserId((Integer)value);
      }
      break;

    case IS_NEED_HANDLE:
      if (value == null) {
        unsetIsNeedHandle();
      } else {
        setIsNeedHandle((Integer)value);
      }
      break;

    case CANCEL_GUARANTEE_DATE:
      if (value == null) {
        unsetCancelGuaranteeDate();
      } else {
        setCancelGuaranteeDate((String)value);
      }
      break;

    case IS_NEED_FINANCIAL:
      if (value == null) {
        unsetIsNeedFinancial();
      } else {
        setIsNeedFinancial((Integer)value);
      }
      break;

    case ESTATE_LIST:
      if (value == null) {
        unsetEstateList();
      } else {
        setEstateList((List<BizProjectEstate>)value);
      }
      break;

    case HOUSE_IDS:
      if (value == null) {
        unsetHouseIds();
      } else {
        setHouseIds((String)value);
      }
      break;

    case IS_REJECT:
      if (value == null) {
        unsetIsReject();
      } else {
        setIsReject((Integer)value);
      }
      break;

    case IS_ASSIGNED:
      if (value == null) {
        unsetIsAssigned();
      } else {
        setIsAssigned((Integer)value);
      }
      break;

    case RECORD_CLERK_ID:
      if (value == null) {
        unsetRecordClerkId();
      } else {
        setRecordClerkId((Integer)value);
      }
      break;

    case FORE_AFTER_MONITOR_STATUS:
      if (value == null) {
        unsetForeAfterMonitorStatus();
      } else {
        setForeAfterMonitorStatus((Integer)value);
      }
      break;

    case ORIGINAL_LOAN_LIST:
      if (value == null) {
        unsetOriginalLoanList();
      } else {
        setOriginalLoanList((List<BizOriginalLoan>)value);
      }
      break;

    case ORIGINAL_LOAN_IDS:
      if (value == null) {
        unsetOriginalLoanIds();
      } else {
        setOriginalLoanIds((String)value);
      }
      break;

    case CUS_ENTERPRISE_INFO:
      if (value == null) {
        unsetCusEnterpriseInfo();
      } else {
        setCusEnterpriseInfo((com.xlkfinance.bms.rpc.project.CusEnterpriseInfo)value);
      }
      break;

    case CUS_CREDENTIALS:
      if (value == null) {
        unsetCusCredentials();
      } else {
        setCusCredentials((com.xlkfinance.bms.rpc.project.CusCredentials)value);
      }
      break;

    case CUS_CARD_INFO:
      if (value == null) {
        unsetCusCardInfo();
      } else {
        setCusCardInfo((com.xlkfinance.bms.rpc.project.CusCardInfo)value);
      }
      break;

    case CAPITAL_NAME:
      if (value == null) {
        unsetCapitalName();
      } else {
        setCapitalName((String)value);
      }
      break;

    case LOAN_TYPE:
      if (value == null) {
        unsetLoanType();
      } else {
        setLoanType((String)value);
      }
      break;

    case NEXT_USER_ID:
      if (value == null) {
        unsetNextUserId();
      } else {
        setNextUserId((String)value);
      }
      break;

    case PRO_CONTACT_IDS:
      if (value == null) {
        unsetProContactIds();
      } else {
        setProContactIds((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    case PROJECT_TYPE_TEXT:
      return getProjectTypeText();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case REAL_NAME:
      return getRealName();

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case BUSINESS_CATELOG:
      return Integer.valueOf(getBusinessCatelog());

    case BUSINESS_CATELOG_TEXT:
      return getBusinessCatelogText();

    case BUSINESS_TYPE:
      return Integer.valueOf(getBusinessType());

    case BUSINESS_TYPE_TEXT:
      return getBusinessTypeText();

    case FLOW_CATELOG:
      return Integer.valueOf(getFlowCatelog());

    case FLOW_CATELOG_TEXT:
      return getFlowCatelogText();

    case MY_TYPE:
      return Integer.valueOf(getMyType());

    case MY_TYPE_TEXT:
      return getMyTypeText();

    case MY_MAIN:
      return getMyMain();

    case MY_MAIN_TEXT:
      return getMyMainText();

    case LOAN_INTEREST_RECORD:
      return Integer.valueOf(getLoanInterestRecord());

    case LOAN_INTEREST_RECORD_TEXT:
      return getLoanInterestRecordText();

    case LOAN_INTEREST_RECORD_NO:
      return getLoanInterestRecordNo();

    case LOAN_MGR_RECORD:
      return Integer.valueOf(getLoanMgrRecord());

    case LOAN_MGR_RECORD_TEXT:
      return getLoanMgrRecordText();

    case LOAN_MGR_RECORD_NO:
      return getLoanMgrRecordNo();

    case LOAN_OTHER_FEE:
      return Integer.valueOf(getLoanOtherFee());

    case LOAN_OTHER_FEE_TEXT:
      return getLoanOtherFeeText();

    case LOAN_OTHER_FEE_NO:
      return getLoanOtherFeeNo();

    case IS_ALLOW_PREPAY:
      return Integer.valueOf(getIsAllowPrepay());

    case IS_ALLOW_PREPAY_TEXT:
      return getIsAllowPrepayText();

    case IS_RETURN_INTEREST:
      return Integer.valueOf(getIsReturnInterest());

    case IS_RETURN_INTEREST_TEXT:
      return getIsReturnInterestText();

    case PERSON_IDS:
      return getPersonIds();

    case BEGIN_REQUEST_DTTM:
      return getBeginRequestDttm();

    case END_REQUEST_DTTM:
      return getEndRequestDttm();

    case ACCT_NAME:
      return getAcctName();

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    case ACCT_TYPE_TEXT:
      return getAcctTypeText();

    case CREDTI_START_DT:
      return getCredtiStartDt();

    case CREDTI_END_DT:
      return getCredtiEndDt();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case IS_HOOP:
      return Integer.valueOf(getIsHoop());

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case CURRENCY:
      return Integer.valueOf(getCurrency());

    case DATE_MODE:
      return Integer.valueOf(getDateMode());

    case REPAY_FUN:
      return Integer.valueOf(getRepayFun());

    case REPAY_CYCLE_TYPE:
      return Integer.valueOf(getRepayCycleType());

    case REPAY_CYCLE_DATE:
      return Integer.valueOf(getRepayCycleDate());

    case REPAY_CYCLE:
      return Integer.valueOf(getRepayCycle());

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case REPAY_OPTION:
      return Integer.valueOf(getRepayOption());

    case REPAY_DATE:
      return Integer.valueOf(getRepayDate());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case MONTH_LOAN_MGR:
      return Double.valueOf(getMonthLoanMgr());

    case MONTH_LOAN_OTHER_FEE:
      return Double.valueOf(getMonthLoanOtherFee());

    case YEAR_LOAN_INTEREST:
      return Double.valueOf(getYearLoanInterest());

    case YEAR_LOAN_MGR:
      return Double.valueOf(getYearLoanMgr());

    case YEAR_LOAN_OTHER_FEE:
      return Double.valueOf(getYearLoanOtherFee());

    case DAY_LOAN_INTEREST:
      return Double.valueOf(getDayLoanInterest());

    case DAY_LOAN_MGR:
      return Double.valueOf(getDayLoanMgr());

    case DAY_LOAN_OTHER_FEE:
      return Double.valueOf(getDayLoanOtherFee());

    case LIQ_DMG_PROPORTION:
      return Double.valueOf(getLiqDmgProportion());

    case OVERDUE_LOAN_INTEREST:
      return Double.valueOf(getOverdueLoanInterest());

    case OVERDUE_FINE_INTEREST:
      return Double.valueOf(getOverdueFineInterest());

    case MIS_FINE_INTEREST:
      return Double.valueOf(getMisFineInterest());

    case PREPAY_LIQ_DMG_PROPORTION:
      return Double.valueOf(getPrepayLiqDmgProportion());

    case CIRCULATE_TYPE:
      return Integer.valueOf(getCirculateType());

    case ABBREVIATION:
      return getAbbreviation();

    case USER_PIDS:
      return getUserPids();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case SURVEY_RESULT:
      return getSurveyResult();

    case REQUEST_STATUS_VAL:
      return getRequestStatusVal();

    case ECO_TRADE_TEXT:
      return getEcoTradeText();

    case ECO_TRADE:
      return getEcoTrade();

    case ASS_WAY:
      return getAssWay();

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case BEGIN_COMPLETE_DTTM:
      return getBeginCompleteDttm();

    case END_COMPLETE_DTTM:
      return getEndCompleteDttm();

    case COMMENTS:
      return getComments();

    case REPAY_OPTION_TEST:
      return Integer.valueOf(getRepayOptionTest());

    case EACHISSUE_OPTION:
      return Integer.valueOf(getEachissueOption());

    case FEES_PROPORTION:
      return Double.valueOf(getFeesProportion());

    case CREDIT_ID:
      return Integer.valueOf(getCreditId());

    case EXTENSION_NUM:
      return Integer.valueOf(getExtensionNum());

    case EXTENSION_AMT:
      return Double.valueOf(getExtensionAmt());

    case LIMIT_ID:
      return Integer.valueOf(getLimitId());

    case NOW_USER_ID:
      return Integer.valueOf(getNowUserId());

    case CREDIT_STATUS:
      return Integer.valueOf(getCreditStatus());

    case REPAY_FUN_TEXT:
      return getRepayFunText();

    case ASS_WAY_TEXT:
      return getAssWayText();

    case JUDGE_REPAY_CYCLE:
      return Integer.valueOf(getJudgeRepayCycle());

    case OLD_PROJECT_ID:
      return Integer.valueOf(getOldProjectId());

    case PROJECT_GUARANTEE:
      return getProjectGuarantee();

    case PROJECT_PROPERTY:
      return getProjectProperty();

    case PROJECT_FORECLOSURE:
      return getProjectForeclosure();

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case ADDRESS:
      return getAddress();

    case BUSINESS_CONTACTS:
      return getBusinessContacts();

    case CONTACTS_PHONE:
      return getContactsPhone();

    case INNER_OR_OUT:
      return Integer.valueOf(getInnerOrOut());

    case BUSINESS_CATEGORY:
      return Integer.valueOf(getBusinessCategory());

    case IS_NOTARIZATION:
      return Integer.valueOf(getIsNotarization());

    case IS_DELETE:
      return Integer.valueOf(getIsDelete());

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case PRODUCT_TYPE:
      return Integer.valueOf(getProductType());

    case MANAGERS:
      return getManagers();

    case MANAGERS_PHONE:
      return getManagersPhone();

    case USER_IDS:
      return getUserIds();

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case OLD_LOAN_BANK:
      return getOldLoanBank();

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case EXTENSION_DATE:
      return getExtensionDate();

    case EXTENSION_RATE:
      return Double.valueOf(getExtensionRate());

    case BUSINESS_SOURCE_NO:
      return Integer.valueOf(getBusinessSourceNo());

    case COLLECT_FILE_STATUS:
      return Integer.valueOf(getCollectFileStatus());

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case FORE_LIST:
      return getForeList();

    case AUDITOR_OPINION:
      return getAuditorOpinion();

    case SPECIAL_DESC:
      return getSpecialDesc();

    case DECLARATION:
      return getDeclaration();

    case IS_SELLER:
      return Integer.valueOf(getIsSeller());

    case REFUND_FILE_STATUS:
      return Integer.valueOf(getRefundFileStatus());

    case CHECHAN_DATE:
      return getChechanDate();

    case CHECHAN_USER_ID:
      return Integer.valueOf(getChechanUserId());

    case CHECHAN_USER_NAME:
      return getChechanUserName();

    case CHECHAN_CAUSE:
      return getChechanCause();

    case EXTENSION_DAYS:
      return Integer.valueOf(getExtensionDays());

    case SOURCE_STR:
      return getSourceStr();

    case ORG_CUSTOMER_NAME:
      return getOrgCustomerName();

    case ORG_CUSTOMER_PHONE:
      return getOrgCustomerPhone();

    case ORG_CUSTOMER_CARD:
      return getOrgCustomerCard();

    case PLAN_LOAN_DATE:
      return getPlanLoanDate();

    case PLAN_LOAN_MONEY:
      return Double.valueOf(getPlanLoanMoney());

    case LOAN_RATE:
      return Double.valueOf(getLoanRate());

    case MAX_LOAN_RATE:
      return Double.valueOf(getMaxLoanRate());

    case IS_CLOSED:
      return Integer.valueOf(getIsClosed());

    case ORG_NAME:
      return getOrgName();

    case AREA_CODE:
      return getAreaCode();

    case APPLY_USER_ID:
      return Integer.valueOf(getApplyUserId());

    case IS_NEED_HANDLE:
      return Integer.valueOf(getIsNeedHandle());

    case CANCEL_GUARANTEE_DATE:
      return getCancelGuaranteeDate();

    case IS_NEED_FINANCIAL:
      return Integer.valueOf(getIsNeedFinancial());

    case ESTATE_LIST:
      return getEstateList();

    case HOUSE_IDS:
      return getHouseIds();

    case IS_REJECT:
      return Integer.valueOf(getIsReject());

    case IS_ASSIGNED:
      return Integer.valueOf(getIsAssigned());

    case RECORD_CLERK_ID:
      return Integer.valueOf(getRecordClerkId());

    case FORE_AFTER_MONITOR_STATUS:
      return Integer.valueOf(getForeAfterMonitorStatus());

    case ORIGINAL_LOAN_LIST:
      return getOriginalLoanList();

    case ORIGINAL_LOAN_IDS:
      return getOriginalLoanIds();

    case CUS_ENTERPRISE_INFO:
      return getCusEnterpriseInfo();

    case CUS_CREDENTIALS:
      return getCusCredentials();

    case CUS_CARD_INFO:
      return getCusCardInfo();

    case CAPITAL_NAME:
      return getCapitalName();

    case LOAN_TYPE:
      return getLoanType();

    case NEXT_USER_ID:
      return getNextUserId();

    case PRO_CONTACT_IDS:
      return getProContactIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACCT_ID:
      return isSetAcctId();
    case PROJECT_TYPE:
      return isSetProjectType();
    case PROJECT_TYPE_TEXT:
      return isSetProjectTypeText();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PM_USER_ID:
      return isSetPmUserId();
    case REAL_NAME:
      return isSetRealName();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case STATUS:
      return isSetStatus();
    case BUSINESS_CATELOG:
      return isSetBusinessCatelog();
    case BUSINESS_CATELOG_TEXT:
      return isSetBusinessCatelogText();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case BUSINESS_TYPE_TEXT:
      return isSetBusinessTypeText();
    case FLOW_CATELOG:
      return isSetFlowCatelog();
    case FLOW_CATELOG_TEXT:
      return isSetFlowCatelogText();
    case MY_TYPE:
      return isSetMyType();
    case MY_TYPE_TEXT:
      return isSetMyTypeText();
    case MY_MAIN:
      return isSetMyMain();
    case MY_MAIN_TEXT:
      return isSetMyMainText();
    case LOAN_INTEREST_RECORD:
      return isSetLoanInterestRecord();
    case LOAN_INTEREST_RECORD_TEXT:
      return isSetLoanInterestRecordText();
    case LOAN_INTEREST_RECORD_NO:
      return isSetLoanInterestRecordNo();
    case LOAN_MGR_RECORD:
      return isSetLoanMgrRecord();
    case LOAN_MGR_RECORD_TEXT:
      return isSetLoanMgrRecordText();
    case LOAN_MGR_RECORD_NO:
      return isSetLoanMgrRecordNo();
    case LOAN_OTHER_FEE:
      return isSetLoanOtherFee();
    case LOAN_OTHER_FEE_TEXT:
      return isSetLoanOtherFeeText();
    case LOAN_OTHER_FEE_NO:
      return isSetLoanOtherFeeNo();
    case IS_ALLOW_PREPAY:
      return isSetIsAllowPrepay();
    case IS_ALLOW_PREPAY_TEXT:
      return isSetIsAllowPrepayText();
    case IS_RETURN_INTEREST:
      return isSetIsReturnInterest();
    case IS_RETURN_INTEREST_TEXT:
      return isSetIsReturnInterestText();
    case PERSON_IDS:
      return isSetPersonIds();
    case BEGIN_REQUEST_DTTM:
      return isSetBeginRequestDttm();
    case END_REQUEST_DTTM:
      return isSetEndRequestDttm();
    case ACCT_NAME:
      return isSetAcctName();
    case ACCT_TYPE:
      return isSetAcctType();
    case ACCT_TYPE_TEXT:
      return isSetAcctTypeText();
    case CREDTI_START_DT:
      return isSetCredtiStartDt();
    case CREDTI_END_DT:
      return isSetCredtiEndDt();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case IS_HOOP:
      return isSetIsHoop();
    case LOAN_AMT:
      return isSetLoanAmt();
    case CURRENCY:
      return isSetCurrency();
    case DATE_MODE:
      return isSetDateMode();
    case REPAY_FUN:
      return isSetRepayFun();
    case REPAY_CYCLE_TYPE:
      return isSetRepayCycleType();
    case REPAY_CYCLE_DATE:
      return isSetRepayCycleDate();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case REPAY_OPTION:
      return isSetRepayOption();
    case REPAY_DATE:
      return isSetRepayDate();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case MONTH_LOAN_MGR:
      return isSetMonthLoanMgr();
    case MONTH_LOAN_OTHER_FEE:
      return isSetMonthLoanOtherFee();
    case YEAR_LOAN_INTEREST:
      return isSetYearLoanInterest();
    case YEAR_LOAN_MGR:
      return isSetYearLoanMgr();
    case YEAR_LOAN_OTHER_FEE:
      return isSetYearLoanOtherFee();
    case DAY_LOAN_INTEREST:
      return isSetDayLoanInterest();
    case DAY_LOAN_MGR:
      return isSetDayLoanMgr();
    case DAY_LOAN_OTHER_FEE:
      return isSetDayLoanOtherFee();
    case LIQ_DMG_PROPORTION:
      return isSetLiqDmgProportion();
    case OVERDUE_LOAN_INTEREST:
      return isSetOverdueLoanInterest();
    case OVERDUE_FINE_INTEREST:
      return isSetOverdueFineInterest();
    case MIS_FINE_INTEREST:
      return isSetMisFineInterest();
    case PREPAY_LIQ_DMG_PROPORTION:
      return isSetPrepayLiqDmgProportion();
    case CIRCULATE_TYPE:
      return isSetCirculateType();
    case ABBREVIATION:
      return isSetAbbreviation();
    case USER_PIDS:
      return isSetUserPids();
    case CUS_TYPE:
      return isSetCusType();
    case SURVEY_RESULT:
      return isSetSurveyResult();
    case REQUEST_STATUS_VAL:
      return isSetRequestStatusVal();
    case ECO_TRADE_TEXT:
      return isSetEcoTradeText();
    case ECO_TRADE:
      return isSetEcoTrade();
    case ASS_WAY:
      return isSetAssWay();
    case LOAN_ID:
      return isSetLoanId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case BEGIN_COMPLETE_DTTM:
      return isSetBeginCompleteDttm();
    case END_COMPLETE_DTTM:
      return isSetEndCompleteDttm();
    case COMMENTS:
      return isSetComments();
    case REPAY_OPTION_TEST:
      return isSetRepayOptionTest();
    case EACHISSUE_OPTION:
      return isSetEachissueOption();
    case FEES_PROPORTION:
      return isSetFeesProportion();
    case CREDIT_ID:
      return isSetCreditId();
    case EXTENSION_NUM:
      return isSetExtensionNum();
    case EXTENSION_AMT:
      return isSetExtensionAmt();
    case LIMIT_ID:
      return isSetLimitId();
    case NOW_USER_ID:
      return isSetNowUserId();
    case CREDIT_STATUS:
      return isSetCreditStatus();
    case REPAY_FUN_TEXT:
      return isSetRepayFunText();
    case ASS_WAY_TEXT:
      return isSetAssWayText();
    case JUDGE_REPAY_CYCLE:
      return isSetJudgeRepayCycle();
    case OLD_PROJECT_ID:
      return isSetOldProjectId();
    case PROJECT_GUARANTEE:
      return isSetProjectGuarantee();
    case PROJECT_PROPERTY:
      return isSetProjectProperty();
    case PROJECT_FORECLOSURE:
      return isSetProjectForeclosure();
    case PRODUCT_ID:
      return isSetProductId();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case ADDRESS:
      return isSetAddress();
    case BUSINESS_CONTACTS:
      return isSetBusinessContacts();
    case CONTACTS_PHONE:
      return isSetContactsPhone();
    case INNER_OR_OUT:
      return isSetInnerOrOut();
    case BUSINESS_CATEGORY:
      return isSetBusinessCategory();
    case IS_NOTARIZATION:
      return isSetIsNotarization();
    case IS_DELETE:
      return isSetIsDelete();
    case IS_CHECHAN:
      return isSetIsChechan();
    case PRODUCT_TYPE:
      return isSetProductType();
    case MANAGERS:
      return isSetManagers();
    case MANAGERS_PHONE:
      return isSetManagersPhone();
    case USER_IDS:
      return isSetUserIds();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case OLD_LOAN_BANK:
      return isSetOldLoanBank();
    case ORG_ID:
      return isSetOrgId();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case EXTENSION_DATE:
      return isSetExtensionDate();
    case EXTENSION_RATE:
      return isSetExtensionRate();
    case BUSINESS_SOURCE_NO:
      return isSetBusinessSourceNo();
    case COLLECT_FILE_STATUS:
      return isSetCollectFileStatus();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case FORE_LIST:
      return isSetForeList();
    case AUDITOR_OPINION:
      return isSetAuditorOpinion();
    case SPECIAL_DESC:
      return isSetSpecialDesc();
    case DECLARATION:
      return isSetDeclaration();
    case IS_SELLER:
      return isSetIsSeller();
    case REFUND_FILE_STATUS:
      return isSetRefundFileStatus();
    case CHECHAN_DATE:
      return isSetChechanDate();
    case CHECHAN_USER_ID:
      return isSetChechanUserId();
    case CHECHAN_USER_NAME:
      return isSetChechanUserName();
    case CHECHAN_CAUSE:
      return isSetChechanCause();
    case EXTENSION_DAYS:
      return isSetExtensionDays();
    case SOURCE_STR:
      return isSetSourceStr();
    case ORG_CUSTOMER_NAME:
      return isSetOrgCustomerName();
    case ORG_CUSTOMER_PHONE:
      return isSetOrgCustomerPhone();
    case ORG_CUSTOMER_CARD:
      return isSetOrgCustomerCard();
    case PLAN_LOAN_DATE:
      return isSetPlanLoanDate();
    case PLAN_LOAN_MONEY:
      return isSetPlanLoanMoney();
    case LOAN_RATE:
      return isSetLoanRate();
    case MAX_LOAN_RATE:
      return isSetMaxLoanRate();
    case IS_CLOSED:
      return isSetIsClosed();
    case ORG_NAME:
      return isSetOrgName();
    case AREA_CODE:
      return isSetAreaCode();
    case APPLY_USER_ID:
      return isSetApplyUserId();
    case IS_NEED_HANDLE:
      return isSetIsNeedHandle();
    case CANCEL_GUARANTEE_DATE:
      return isSetCancelGuaranteeDate();
    case IS_NEED_FINANCIAL:
      return isSetIsNeedFinancial();
    case ESTATE_LIST:
      return isSetEstateList();
    case HOUSE_IDS:
      return isSetHouseIds();
    case IS_REJECT:
      return isSetIsReject();
    case IS_ASSIGNED:
      return isSetIsAssigned();
    case RECORD_CLERK_ID:
      return isSetRecordClerkId();
    case FORE_AFTER_MONITOR_STATUS:
      return isSetForeAfterMonitorStatus();
    case ORIGINAL_LOAN_LIST:
      return isSetOriginalLoanList();
    case ORIGINAL_LOAN_IDS:
      return isSetOriginalLoanIds();
    case CUS_ENTERPRISE_INFO:
      return isSetCusEnterpriseInfo();
    case CUS_CREDENTIALS:
      return isSetCusCredentials();
    case CUS_CARD_INFO:
      return isSetCusCardInfo();
    case CAPITAL_NAME:
      return isSetCapitalName();
    case LOAN_TYPE:
      return isSetLoanType();
    case NEXT_USER_ID:
      return isSetNextUserId();
    case PRO_CONTACT_IDS:
      return isSetProContactIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Project)
      return this.equals((Project)that);
    return false;
  }

  public boolean equals(Project that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    boolean this_present_projectTypeText = true && this.isSetProjectTypeText();
    boolean that_present_projectTypeText = true && that.isSetProjectTypeText();
    if (this_present_projectTypeText || that_present_projectTypeText) {
      if (!(this_present_projectTypeText && that_present_projectTypeText))
        return false;
      if (!this.projectTypeText.equals(that.projectTypeText))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_businessCatelog = true;
    boolean that_present_businessCatelog = true;
    if (this_present_businessCatelog || that_present_businessCatelog) {
      if (!(this_present_businessCatelog && that_present_businessCatelog))
        return false;
      if (this.businessCatelog != that.businessCatelog)
        return false;
    }

    boolean this_present_businessCatelogText = true && this.isSetBusinessCatelogText();
    boolean that_present_businessCatelogText = true && that.isSetBusinessCatelogText();
    if (this_present_businessCatelogText || that_present_businessCatelogText) {
      if (!(this_present_businessCatelogText && that_present_businessCatelogText))
        return false;
      if (!this.businessCatelogText.equals(that.businessCatelogText))
        return false;
    }

    boolean this_present_businessType = true;
    boolean that_present_businessType = true;
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (this.businessType != that.businessType)
        return false;
    }

    boolean this_present_businessTypeText = true && this.isSetBusinessTypeText();
    boolean that_present_businessTypeText = true && that.isSetBusinessTypeText();
    if (this_present_businessTypeText || that_present_businessTypeText) {
      if (!(this_present_businessTypeText && that_present_businessTypeText))
        return false;
      if (!this.businessTypeText.equals(that.businessTypeText))
        return false;
    }

    boolean this_present_flowCatelog = true;
    boolean that_present_flowCatelog = true;
    if (this_present_flowCatelog || that_present_flowCatelog) {
      if (!(this_present_flowCatelog && that_present_flowCatelog))
        return false;
      if (this.flowCatelog != that.flowCatelog)
        return false;
    }

    boolean this_present_flowCatelogText = true && this.isSetFlowCatelogText();
    boolean that_present_flowCatelogText = true && that.isSetFlowCatelogText();
    if (this_present_flowCatelogText || that_present_flowCatelogText) {
      if (!(this_present_flowCatelogText && that_present_flowCatelogText))
        return false;
      if (!this.flowCatelogText.equals(that.flowCatelogText))
        return false;
    }

    boolean this_present_myType = true;
    boolean that_present_myType = true;
    if (this_present_myType || that_present_myType) {
      if (!(this_present_myType && that_present_myType))
        return false;
      if (this.myType != that.myType)
        return false;
    }

    boolean this_present_myTypeText = true && this.isSetMyTypeText();
    boolean that_present_myTypeText = true && that.isSetMyTypeText();
    if (this_present_myTypeText || that_present_myTypeText) {
      if (!(this_present_myTypeText && that_present_myTypeText))
        return false;
      if (!this.myTypeText.equals(that.myTypeText))
        return false;
    }

    boolean this_present_myMain = true && this.isSetMyMain();
    boolean that_present_myMain = true && that.isSetMyMain();
    if (this_present_myMain || that_present_myMain) {
      if (!(this_present_myMain && that_present_myMain))
        return false;
      if (!this.myMain.equals(that.myMain))
        return false;
    }

    boolean this_present_myMainText = true && this.isSetMyMainText();
    boolean that_present_myMainText = true && that.isSetMyMainText();
    if (this_present_myMainText || that_present_myMainText) {
      if (!(this_present_myMainText && that_present_myMainText))
        return false;
      if (!this.myMainText.equals(that.myMainText))
        return false;
    }

    boolean this_present_loanInterestRecord = true;
    boolean that_present_loanInterestRecord = true;
    if (this_present_loanInterestRecord || that_present_loanInterestRecord) {
      if (!(this_present_loanInterestRecord && that_present_loanInterestRecord))
        return false;
      if (this.loanInterestRecord != that.loanInterestRecord)
        return false;
    }

    boolean this_present_loanInterestRecordText = true && this.isSetLoanInterestRecordText();
    boolean that_present_loanInterestRecordText = true && that.isSetLoanInterestRecordText();
    if (this_present_loanInterestRecordText || that_present_loanInterestRecordText) {
      if (!(this_present_loanInterestRecordText && that_present_loanInterestRecordText))
        return false;
      if (!this.loanInterestRecordText.equals(that.loanInterestRecordText))
        return false;
    }

    boolean this_present_loanInterestRecordNo = true && this.isSetLoanInterestRecordNo();
    boolean that_present_loanInterestRecordNo = true && that.isSetLoanInterestRecordNo();
    if (this_present_loanInterestRecordNo || that_present_loanInterestRecordNo) {
      if (!(this_present_loanInterestRecordNo && that_present_loanInterestRecordNo))
        return false;
      if (!this.loanInterestRecordNo.equals(that.loanInterestRecordNo))
        return false;
    }

    boolean this_present_loanMgrRecord = true;
    boolean that_present_loanMgrRecord = true;
    if (this_present_loanMgrRecord || that_present_loanMgrRecord) {
      if (!(this_present_loanMgrRecord && that_present_loanMgrRecord))
        return false;
      if (this.loanMgrRecord != that.loanMgrRecord)
        return false;
    }

    boolean this_present_loanMgrRecordText = true && this.isSetLoanMgrRecordText();
    boolean that_present_loanMgrRecordText = true && that.isSetLoanMgrRecordText();
    if (this_present_loanMgrRecordText || that_present_loanMgrRecordText) {
      if (!(this_present_loanMgrRecordText && that_present_loanMgrRecordText))
        return false;
      if (!this.loanMgrRecordText.equals(that.loanMgrRecordText))
        return false;
    }

    boolean this_present_loanMgrRecordNo = true && this.isSetLoanMgrRecordNo();
    boolean that_present_loanMgrRecordNo = true && that.isSetLoanMgrRecordNo();
    if (this_present_loanMgrRecordNo || that_present_loanMgrRecordNo) {
      if (!(this_present_loanMgrRecordNo && that_present_loanMgrRecordNo))
        return false;
      if (!this.loanMgrRecordNo.equals(that.loanMgrRecordNo))
        return false;
    }

    boolean this_present_loanOtherFee = true;
    boolean that_present_loanOtherFee = true;
    if (this_present_loanOtherFee || that_present_loanOtherFee) {
      if (!(this_present_loanOtherFee && that_present_loanOtherFee))
        return false;
      if (this.loanOtherFee != that.loanOtherFee)
        return false;
    }

    boolean this_present_loanOtherFeeText = true && this.isSetLoanOtherFeeText();
    boolean that_present_loanOtherFeeText = true && that.isSetLoanOtherFeeText();
    if (this_present_loanOtherFeeText || that_present_loanOtherFeeText) {
      if (!(this_present_loanOtherFeeText && that_present_loanOtherFeeText))
        return false;
      if (!this.loanOtherFeeText.equals(that.loanOtherFeeText))
        return false;
    }

    boolean this_present_loanOtherFeeNo = true && this.isSetLoanOtherFeeNo();
    boolean that_present_loanOtherFeeNo = true && that.isSetLoanOtherFeeNo();
    if (this_present_loanOtherFeeNo || that_present_loanOtherFeeNo) {
      if (!(this_present_loanOtherFeeNo && that_present_loanOtherFeeNo))
        return false;
      if (!this.loanOtherFeeNo.equals(that.loanOtherFeeNo))
        return false;
    }

    boolean this_present_isAllowPrepay = true;
    boolean that_present_isAllowPrepay = true;
    if (this_present_isAllowPrepay || that_present_isAllowPrepay) {
      if (!(this_present_isAllowPrepay && that_present_isAllowPrepay))
        return false;
      if (this.isAllowPrepay != that.isAllowPrepay)
        return false;
    }

    boolean this_present_isAllowPrepayText = true && this.isSetIsAllowPrepayText();
    boolean that_present_isAllowPrepayText = true && that.isSetIsAllowPrepayText();
    if (this_present_isAllowPrepayText || that_present_isAllowPrepayText) {
      if (!(this_present_isAllowPrepayText && that_present_isAllowPrepayText))
        return false;
      if (!this.isAllowPrepayText.equals(that.isAllowPrepayText))
        return false;
    }

    boolean this_present_isReturnInterest = true;
    boolean that_present_isReturnInterest = true;
    if (this_present_isReturnInterest || that_present_isReturnInterest) {
      if (!(this_present_isReturnInterest && that_present_isReturnInterest))
        return false;
      if (this.isReturnInterest != that.isReturnInterest)
        return false;
    }

    boolean this_present_isReturnInterestText = true && this.isSetIsReturnInterestText();
    boolean that_present_isReturnInterestText = true && that.isSetIsReturnInterestText();
    if (this_present_isReturnInterestText || that_present_isReturnInterestText) {
      if (!(this_present_isReturnInterestText && that_present_isReturnInterestText))
        return false;
      if (!this.isReturnInterestText.equals(that.isReturnInterestText))
        return false;
    }

    boolean this_present_personIds = true && this.isSetPersonIds();
    boolean that_present_personIds = true && that.isSetPersonIds();
    if (this_present_personIds || that_present_personIds) {
      if (!(this_present_personIds && that_present_personIds))
        return false;
      if (!this.personIds.equals(that.personIds))
        return false;
    }

    boolean this_present_beginRequestDttm = true && this.isSetBeginRequestDttm();
    boolean that_present_beginRequestDttm = true && that.isSetBeginRequestDttm();
    if (this_present_beginRequestDttm || that_present_beginRequestDttm) {
      if (!(this_present_beginRequestDttm && that_present_beginRequestDttm))
        return false;
      if (!this.beginRequestDttm.equals(that.beginRequestDttm))
        return false;
    }

    boolean this_present_endRequestDttm = true && this.isSetEndRequestDttm();
    boolean that_present_endRequestDttm = true && that.isSetEndRequestDttm();
    if (this_present_endRequestDttm || that_present_endRequestDttm) {
      if (!(this_present_endRequestDttm && that_present_endRequestDttm))
        return false;
      if (!this.endRequestDttm.equals(that.endRequestDttm))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    boolean this_present_acctTypeText = true && this.isSetAcctTypeText();
    boolean that_present_acctTypeText = true && that.isSetAcctTypeText();
    if (this_present_acctTypeText || that_present_acctTypeText) {
      if (!(this_present_acctTypeText && that_present_acctTypeText))
        return false;
      if (!this.acctTypeText.equals(that.acctTypeText))
        return false;
    }

    boolean this_present_credtiStartDt = true && this.isSetCredtiStartDt();
    boolean that_present_credtiStartDt = true && that.isSetCredtiStartDt();
    if (this_present_credtiStartDt || that_present_credtiStartDt) {
      if (!(this_present_credtiStartDt && that_present_credtiStartDt))
        return false;
      if (!this.credtiStartDt.equals(that.credtiStartDt))
        return false;
    }

    boolean this_present_credtiEndDt = true && this.isSetCredtiEndDt();
    boolean that_present_credtiEndDt = true && that.isSetCredtiEndDt();
    if (this_present_credtiEndDt || that_present_credtiEndDt) {
      if (!(this_present_credtiEndDt && that_present_credtiEndDt))
        return false;
      if (!this.credtiEndDt.equals(that.credtiEndDt))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_isHoop = true;
    boolean that_present_isHoop = true;
    if (this_present_isHoop || that_present_isHoop) {
      if (!(this_present_isHoop && that_present_isHoop))
        return false;
      if (this.isHoop != that.isHoop)
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_dateMode = true;
    boolean that_present_dateMode = true;
    if (this_present_dateMode || that_present_dateMode) {
      if (!(this_present_dateMode && that_present_dateMode))
        return false;
      if (this.dateMode != that.dateMode)
        return false;
    }

    boolean this_present_repayFun = true;
    boolean that_present_repayFun = true;
    if (this_present_repayFun || that_present_repayFun) {
      if (!(this_present_repayFun && that_present_repayFun))
        return false;
      if (this.repayFun != that.repayFun)
        return false;
    }

    boolean this_present_repayCycleType = true;
    boolean that_present_repayCycleType = true;
    if (this_present_repayCycleType || that_present_repayCycleType) {
      if (!(this_present_repayCycleType && that_present_repayCycleType))
        return false;
      if (this.repayCycleType != that.repayCycleType)
        return false;
    }

    boolean this_present_repayCycleDate = true;
    boolean that_present_repayCycleDate = true;
    if (this_present_repayCycleDate || that_present_repayCycleDate) {
      if (!(this_present_repayCycleDate && that_present_repayCycleDate))
        return false;
      if (this.repayCycleDate != that.repayCycleDate)
        return false;
    }

    boolean this_present_repayCycle = true;
    boolean that_present_repayCycle = true;
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (this.repayCycle != that.repayCycle)
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_repayOption = true;
    boolean that_present_repayOption = true;
    if (this_present_repayOption || that_present_repayOption) {
      if (!(this_present_repayOption && that_present_repayOption))
        return false;
      if (this.repayOption != that.repayOption)
        return false;
    }

    boolean this_present_repayDate = true;
    boolean that_present_repayDate = true;
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (this.repayDate != that.repayDate)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_monthLoanMgr = true;
    boolean that_present_monthLoanMgr = true;
    if (this_present_monthLoanMgr || that_present_monthLoanMgr) {
      if (!(this_present_monthLoanMgr && that_present_monthLoanMgr))
        return false;
      if (this.monthLoanMgr != that.monthLoanMgr)
        return false;
    }

    boolean this_present_monthLoanOtherFee = true;
    boolean that_present_monthLoanOtherFee = true;
    if (this_present_monthLoanOtherFee || that_present_monthLoanOtherFee) {
      if (!(this_present_monthLoanOtherFee && that_present_monthLoanOtherFee))
        return false;
      if (this.monthLoanOtherFee != that.monthLoanOtherFee)
        return false;
    }

    boolean this_present_yearLoanInterest = true;
    boolean that_present_yearLoanInterest = true;
    if (this_present_yearLoanInterest || that_present_yearLoanInterest) {
      if (!(this_present_yearLoanInterest && that_present_yearLoanInterest))
        return false;
      if (this.yearLoanInterest != that.yearLoanInterest)
        return false;
    }

    boolean this_present_yearLoanMgr = true;
    boolean that_present_yearLoanMgr = true;
    if (this_present_yearLoanMgr || that_present_yearLoanMgr) {
      if (!(this_present_yearLoanMgr && that_present_yearLoanMgr))
        return false;
      if (this.yearLoanMgr != that.yearLoanMgr)
        return false;
    }

    boolean this_present_yearLoanOtherFee = true;
    boolean that_present_yearLoanOtherFee = true;
    if (this_present_yearLoanOtherFee || that_present_yearLoanOtherFee) {
      if (!(this_present_yearLoanOtherFee && that_present_yearLoanOtherFee))
        return false;
      if (this.yearLoanOtherFee != that.yearLoanOtherFee)
        return false;
    }

    boolean this_present_dayLoanInterest = true;
    boolean that_present_dayLoanInterest = true;
    if (this_present_dayLoanInterest || that_present_dayLoanInterest) {
      if (!(this_present_dayLoanInterest && that_present_dayLoanInterest))
        return false;
      if (this.dayLoanInterest != that.dayLoanInterest)
        return false;
    }

    boolean this_present_dayLoanMgr = true;
    boolean that_present_dayLoanMgr = true;
    if (this_present_dayLoanMgr || that_present_dayLoanMgr) {
      if (!(this_present_dayLoanMgr && that_present_dayLoanMgr))
        return false;
      if (this.dayLoanMgr != that.dayLoanMgr)
        return false;
    }

    boolean this_present_dayLoanOtherFee = true;
    boolean that_present_dayLoanOtherFee = true;
    if (this_present_dayLoanOtherFee || that_present_dayLoanOtherFee) {
      if (!(this_present_dayLoanOtherFee && that_present_dayLoanOtherFee))
        return false;
      if (this.dayLoanOtherFee != that.dayLoanOtherFee)
        return false;
    }

    boolean this_present_liqDmgProportion = true;
    boolean that_present_liqDmgProportion = true;
    if (this_present_liqDmgProportion || that_present_liqDmgProportion) {
      if (!(this_present_liqDmgProportion && that_present_liqDmgProportion))
        return false;
      if (this.liqDmgProportion != that.liqDmgProportion)
        return false;
    }

    boolean this_present_overdueLoanInterest = true;
    boolean that_present_overdueLoanInterest = true;
    if (this_present_overdueLoanInterest || that_present_overdueLoanInterest) {
      if (!(this_present_overdueLoanInterest && that_present_overdueLoanInterest))
        return false;
      if (this.overdueLoanInterest != that.overdueLoanInterest)
        return false;
    }

    boolean this_present_overdueFineInterest = true;
    boolean that_present_overdueFineInterest = true;
    if (this_present_overdueFineInterest || that_present_overdueFineInterest) {
      if (!(this_present_overdueFineInterest && that_present_overdueFineInterest))
        return false;
      if (this.overdueFineInterest != that.overdueFineInterest)
        return false;
    }

    boolean this_present_misFineInterest = true;
    boolean that_present_misFineInterest = true;
    if (this_present_misFineInterest || that_present_misFineInterest) {
      if (!(this_present_misFineInterest && that_present_misFineInterest))
        return false;
      if (this.misFineInterest != that.misFineInterest)
        return false;
    }

    boolean this_present_prepayLiqDmgProportion = true;
    boolean that_present_prepayLiqDmgProportion = true;
    if (this_present_prepayLiqDmgProportion || that_present_prepayLiqDmgProportion) {
      if (!(this_present_prepayLiqDmgProportion && that_present_prepayLiqDmgProportion))
        return false;
      if (this.prepayLiqDmgProportion != that.prepayLiqDmgProportion)
        return false;
    }

    boolean this_present_circulateType = true;
    boolean that_present_circulateType = true;
    if (this_present_circulateType || that_present_circulateType) {
      if (!(this_present_circulateType && that_present_circulateType))
        return false;
      if (this.circulateType != that.circulateType)
        return false;
    }

    boolean this_present_abbreviation = true && this.isSetAbbreviation();
    boolean that_present_abbreviation = true && that.isSetAbbreviation();
    if (this_present_abbreviation || that_present_abbreviation) {
      if (!(this_present_abbreviation && that_present_abbreviation))
        return false;
      if (!this.abbreviation.equals(that.abbreviation))
        return false;
    }

    boolean this_present_userPids = true && this.isSetUserPids();
    boolean that_present_userPids = true && that.isSetUserPids();
    if (this_present_userPids || that_present_userPids) {
      if (!(this_present_userPids && that_present_userPids))
        return false;
      if (!this.userPids.equals(that.userPids))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_surveyResult = true && this.isSetSurveyResult();
    boolean that_present_surveyResult = true && that.isSetSurveyResult();
    if (this_present_surveyResult || that_present_surveyResult) {
      if (!(this_present_surveyResult && that_present_surveyResult))
        return false;
      if (!this.surveyResult.equals(that.surveyResult))
        return false;
    }

    boolean this_present_requestStatusVal = true && this.isSetRequestStatusVal();
    boolean that_present_requestStatusVal = true && that.isSetRequestStatusVal();
    if (this_present_requestStatusVal || that_present_requestStatusVal) {
      if (!(this_present_requestStatusVal && that_present_requestStatusVal))
        return false;
      if (!this.requestStatusVal.equals(that.requestStatusVal))
        return false;
    }

    boolean this_present_ecoTradeText = true && this.isSetEcoTradeText();
    boolean that_present_ecoTradeText = true && that.isSetEcoTradeText();
    if (this_present_ecoTradeText || that_present_ecoTradeText) {
      if (!(this_present_ecoTradeText && that_present_ecoTradeText))
        return false;
      if (!this.ecoTradeText.equals(that.ecoTradeText))
        return false;
    }

    boolean this_present_ecoTrade = true && this.isSetEcoTrade();
    boolean that_present_ecoTrade = true && that.isSetEcoTrade();
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (!this.ecoTrade.equals(that.ecoTrade))
        return false;
    }

    boolean this_present_assWay = true && this.isSetAssWay();
    boolean that_present_assWay = true && that.isSetAssWay();
    if (this_present_assWay || that_present_assWay) {
      if (!(this_present_assWay && that_present_assWay))
        return false;
      if (!this.assWay.equals(that.assWay))
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_beginCompleteDttm = true && this.isSetBeginCompleteDttm();
    boolean that_present_beginCompleteDttm = true && that.isSetBeginCompleteDttm();
    if (this_present_beginCompleteDttm || that_present_beginCompleteDttm) {
      if (!(this_present_beginCompleteDttm && that_present_beginCompleteDttm))
        return false;
      if (!this.beginCompleteDttm.equals(that.beginCompleteDttm))
        return false;
    }

    boolean this_present_endCompleteDttm = true && this.isSetEndCompleteDttm();
    boolean that_present_endCompleteDttm = true && that.isSetEndCompleteDttm();
    if (this_present_endCompleteDttm || that_present_endCompleteDttm) {
      if (!(this_present_endCompleteDttm && that_present_endCompleteDttm))
        return false;
      if (!this.endCompleteDttm.equals(that.endCompleteDttm))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    boolean this_present_repayOptionTest = true;
    boolean that_present_repayOptionTest = true;
    if (this_present_repayOptionTest || that_present_repayOptionTest) {
      if (!(this_present_repayOptionTest && that_present_repayOptionTest))
        return false;
      if (this.repayOptionTest != that.repayOptionTest)
        return false;
    }

    boolean this_present_eachissueOption = true;
    boolean that_present_eachissueOption = true;
    if (this_present_eachissueOption || that_present_eachissueOption) {
      if (!(this_present_eachissueOption && that_present_eachissueOption))
        return false;
      if (this.eachissueOption != that.eachissueOption)
        return false;
    }

    boolean this_present_feesProportion = true;
    boolean that_present_feesProportion = true;
    if (this_present_feesProportion || that_present_feesProportion) {
      if (!(this_present_feesProportion && that_present_feesProportion))
        return false;
      if (this.feesProportion != that.feesProportion)
        return false;
    }

    boolean this_present_creditId = true;
    boolean that_present_creditId = true;
    if (this_present_creditId || that_present_creditId) {
      if (!(this_present_creditId && that_present_creditId))
        return false;
      if (this.creditId != that.creditId)
        return false;
    }

    boolean this_present_extensionNum = true;
    boolean that_present_extensionNum = true;
    if (this_present_extensionNum || that_present_extensionNum) {
      if (!(this_present_extensionNum && that_present_extensionNum))
        return false;
      if (this.extensionNum != that.extensionNum)
        return false;
    }

    boolean this_present_extensionAmt = true;
    boolean that_present_extensionAmt = true;
    if (this_present_extensionAmt || that_present_extensionAmt) {
      if (!(this_present_extensionAmt && that_present_extensionAmt))
        return false;
      if (this.extensionAmt != that.extensionAmt)
        return false;
    }

    boolean this_present_limitId = true;
    boolean that_present_limitId = true;
    if (this_present_limitId || that_present_limitId) {
      if (!(this_present_limitId && that_present_limitId))
        return false;
      if (this.limitId != that.limitId)
        return false;
    }

    boolean this_present_nowUserId = true;
    boolean that_present_nowUserId = true;
    if (this_present_nowUserId || that_present_nowUserId) {
      if (!(this_present_nowUserId && that_present_nowUserId))
        return false;
      if (this.nowUserId != that.nowUserId)
        return false;
    }

    boolean this_present_creditStatus = true;
    boolean that_present_creditStatus = true;
    if (this_present_creditStatus || that_present_creditStatus) {
      if (!(this_present_creditStatus && that_present_creditStatus))
        return false;
      if (this.creditStatus != that.creditStatus)
        return false;
    }

    boolean this_present_repayFunText = true && this.isSetRepayFunText();
    boolean that_present_repayFunText = true && that.isSetRepayFunText();
    if (this_present_repayFunText || that_present_repayFunText) {
      if (!(this_present_repayFunText && that_present_repayFunText))
        return false;
      if (!this.repayFunText.equals(that.repayFunText))
        return false;
    }

    boolean this_present_assWayText = true && this.isSetAssWayText();
    boolean that_present_assWayText = true && that.isSetAssWayText();
    if (this_present_assWayText || that_present_assWayText) {
      if (!(this_present_assWayText && that_present_assWayText))
        return false;
      if (!this.assWayText.equals(that.assWayText))
        return false;
    }

    boolean this_present_judgeRepayCycle = true;
    boolean that_present_judgeRepayCycle = true;
    if (this_present_judgeRepayCycle || that_present_judgeRepayCycle) {
      if (!(this_present_judgeRepayCycle && that_present_judgeRepayCycle))
        return false;
      if (this.judgeRepayCycle != that.judgeRepayCycle)
        return false;
    }

    boolean this_present_oldProjectId = true;
    boolean that_present_oldProjectId = true;
    if (this_present_oldProjectId || that_present_oldProjectId) {
      if (!(this_present_oldProjectId && that_present_oldProjectId))
        return false;
      if (this.oldProjectId != that.oldProjectId)
        return false;
    }

    boolean this_present_projectGuarantee = true && this.isSetProjectGuarantee();
    boolean that_present_projectGuarantee = true && that.isSetProjectGuarantee();
    if (this_present_projectGuarantee || that_present_projectGuarantee) {
      if (!(this_present_projectGuarantee && that_present_projectGuarantee))
        return false;
      if (!this.projectGuarantee.equals(that.projectGuarantee))
        return false;
    }

    boolean this_present_projectProperty = true && this.isSetProjectProperty();
    boolean that_present_projectProperty = true && that.isSetProjectProperty();
    if (this_present_projectProperty || that_present_projectProperty) {
      if (!(this_present_projectProperty && that_present_projectProperty))
        return false;
      if (!this.projectProperty.equals(that.projectProperty))
        return false;
    }

    boolean this_present_projectForeclosure = true && this.isSetProjectForeclosure();
    boolean that_present_projectForeclosure = true && that.isSetProjectForeclosure();
    if (this_present_projectForeclosure || that_present_projectForeclosure) {
      if (!(this_present_projectForeclosure && that_present_projectForeclosure))
        return false;
      if (!this.projectForeclosure.equals(that.projectForeclosure))
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_businessContacts = true && this.isSetBusinessContacts();
    boolean that_present_businessContacts = true && that.isSetBusinessContacts();
    if (this_present_businessContacts || that_present_businessContacts) {
      if (!(this_present_businessContacts && that_present_businessContacts))
        return false;
      if (!this.businessContacts.equals(that.businessContacts))
        return false;
    }

    boolean this_present_contactsPhone = true && this.isSetContactsPhone();
    boolean that_present_contactsPhone = true && that.isSetContactsPhone();
    if (this_present_contactsPhone || that_present_contactsPhone) {
      if (!(this_present_contactsPhone && that_present_contactsPhone))
        return false;
      if (!this.contactsPhone.equals(that.contactsPhone))
        return false;
    }

    boolean this_present_innerOrOut = true;
    boolean that_present_innerOrOut = true;
    if (this_present_innerOrOut || that_present_innerOrOut) {
      if (!(this_present_innerOrOut && that_present_innerOrOut))
        return false;
      if (this.innerOrOut != that.innerOrOut)
        return false;
    }

    boolean this_present_businessCategory = true;
    boolean that_present_businessCategory = true;
    if (this_present_businessCategory || that_present_businessCategory) {
      if (!(this_present_businessCategory && that_present_businessCategory))
        return false;
      if (this.businessCategory != that.businessCategory)
        return false;
    }

    boolean this_present_isNotarization = true;
    boolean that_present_isNotarization = true;
    if (this_present_isNotarization || that_present_isNotarization) {
      if (!(this_present_isNotarization && that_present_isNotarization))
        return false;
      if (this.isNotarization != that.isNotarization)
        return false;
    }

    boolean this_present_isDelete = true;
    boolean that_present_isDelete = true;
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (this.isDelete != that.isDelete)
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_productType = true;
    boolean that_present_productType = true;
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (this.productType != that.productType)
        return false;
    }

    boolean this_present_managers = true && this.isSetManagers();
    boolean that_present_managers = true && that.isSetManagers();
    if (this_present_managers || that_present_managers) {
      if (!(this_present_managers && that_present_managers))
        return false;
      if (!this.managers.equals(that.managers))
        return false;
    }

    boolean this_present_managersPhone = true && this.isSetManagersPhone();
    boolean that_present_managersPhone = true && that.isSetManagersPhone();
    if (this_present_managersPhone || that_present_managersPhone) {
      if (!(this_present_managersPhone && that_present_managersPhone))
        return false;
      if (!this.managersPhone.equals(that.managersPhone))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_oldLoanBank = true && this.isSetOldLoanBank();
    boolean that_present_oldLoanBank = true && that.isSetOldLoanBank();
    if (this_present_oldLoanBank || that_present_oldLoanBank) {
      if (!(this_present_oldLoanBank && that_present_oldLoanBank))
        return false;
      if (!this.oldLoanBank.equals(that.oldLoanBank))
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_extensionDate = true && this.isSetExtensionDate();
    boolean that_present_extensionDate = true && that.isSetExtensionDate();
    if (this_present_extensionDate || that_present_extensionDate) {
      if (!(this_present_extensionDate && that_present_extensionDate))
        return false;
      if (!this.extensionDate.equals(that.extensionDate))
        return false;
    }

    boolean this_present_extensionRate = true;
    boolean that_present_extensionRate = true;
    if (this_present_extensionRate || that_present_extensionRate) {
      if (!(this_present_extensionRate && that_present_extensionRate))
        return false;
      if (this.extensionRate != that.extensionRate)
        return false;
    }

    boolean this_present_businessSourceNo = true;
    boolean that_present_businessSourceNo = true;
    if (this_present_businessSourceNo || that_present_businessSourceNo) {
      if (!(this_present_businessSourceNo && that_present_businessSourceNo))
        return false;
      if (this.businessSourceNo != that.businessSourceNo)
        return false;
    }

    boolean this_present_collectFileStatus = true;
    boolean that_present_collectFileStatus = true;
    if (this_present_collectFileStatus || that_present_collectFileStatus) {
      if (!(this_present_collectFileStatus && that_present_collectFileStatus))
        return false;
      if (this.collectFileStatus != that.collectFileStatus)
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_foreList = true && this.isSetForeList();
    boolean that_present_foreList = true && that.isSetForeList();
    if (this_present_foreList || that_present_foreList) {
      if (!(this_present_foreList && that_present_foreList))
        return false;
      if (!this.foreList.equals(that.foreList))
        return false;
    }

    boolean this_present_auditorOpinion = true && this.isSetAuditorOpinion();
    boolean that_present_auditorOpinion = true && that.isSetAuditorOpinion();
    if (this_present_auditorOpinion || that_present_auditorOpinion) {
      if (!(this_present_auditorOpinion && that_present_auditorOpinion))
        return false;
      if (!this.auditorOpinion.equals(that.auditorOpinion))
        return false;
    }

    boolean this_present_specialDesc = true && this.isSetSpecialDesc();
    boolean that_present_specialDesc = true && that.isSetSpecialDesc();
    if (this_present_specialDesc || that_present_specialDesc) {
      if (!(this_present_specialDesc && that_present_specialDesc))
        return false;
      if (!this.specialDesc.equals(that.specialDesc))
        return false;
    }

    boolean this_present_declaration = true && this.isSetDeclaration();
    boolean that_present_declaration = true && that.isSetDeclaration();
    if (this_present_declaration || that_present_declaration) {
      if (!(this_present_declaration && that_present_declaration))
        return false;
      if (!this.declaration.equals(that.declaration))
        return false;
    }

    boolean this_present_isSeller = true;
    boolean that_present_isSeller = true;
    if (this_present_isSeller || that_present_isSeller) {
      if (!(this_present_isSeller && that_present_isSeller))
        return false;
      if (this.isSeller != that.isSeller)
        return false;
    }

    boolean this_present_refundFileStatus = true;
    boolean that_present_refundFileStatus = true;
    if (this_present_refundFileStatus || that_present_refundFileStatus) {
      if (!(this_present_refundFileStatus && that_present_refundFileStatus))
        return false;
      if (this.refundFileStatus != that.refundFileStatus)
        return false;
    }

    boolean this_present_chechanDate = true && this.isSetChechanDate();
    boolean that_present_chechanDate = true && that.isSetChechanDate();
    if (this_present_chechanDate || that_present_chechanDate) {
      if (!(this_present_chechanDate && that_present_chechanDate))
        return false;
      if (!this.chechanDate.equals(that.chechanDate))
        return false;
    }

    boolean this_present_chechanUserId = true;
    boolean that_present_chechanUserId = true;
    if (this_present_chechanUserId || that_present_chechanUserId) {
      if (!(this_present_chechanUserId && that_present_chechanUserId))
        return false;
      if (this.chechanUserId != that.chechanUserId)
        return false;
    }

    boolean this_present_chechanUserName = true && this.isSetChechanUserName();
    boolean that_present_chechanUserName = true && that.isSetChechanUserName();
    if (this_present_chechanUserName || that_present_chechanUserName) {
      if (!(this_present_chechanUserName && that_present_chechanUserName))
        return false;
      if (!this.chechanUserName.equals(that.chechanUserName))
        return false;
    }

    boolean this_present_chechanCause = true && this.isSetChechanCause();
    boolean that_present_chechanCause = true && that.isSetChechanCause();
    if (this_present_chechanCause || that_present_chechanCause) {
      if (!(this_present_chechanCause && that_present_chechanCause))
        return false;
      if (!this.chechanCause.equals(that.chechanCause))
        return false;
    }

    boolean this_present_extensionDays = true;
    boolean that_present_extensionDays = true;
    if (this_present_extensionDays || that_present_extensionDays) {
      if (!(this_present_extensionDays && that_present_extensionDays))
        return false;
      if (this.extensionDays != that.extensionDays)
        return false;
    }

    boolean this_present_sourceStr = true && this.isSetSourceStr();
    boolean that_present_sourceStr = true && that.isSetSourceStr();
    if (this_present_sourceStr || that_present_sourceStr) {
      if (!(this_present_sourceStr && that_present_sourceStr))
        return false;
      if (!this.sourceStr.equals(that.sourceStr))
        return false;
    }

    boolean this_present_orgCustomerName = true && this.isSetOrgCustomerName();
    boolean that_present_orgCustomerName = true && that.isSetOrgCustomerName();
    if (this_present_orgCustomerName || that_present_orgCustomerName) {
      if (!(this_present_orgCustomerName && that_present_orgCustomerName))
        return false;
      if (!this.orgCustomerName.equals(that.orgCustomerName))
        return false;
    }

    boolean this_present_orgCustomerPhone = true && this.isSetOrgCustomerPhone();
    boolean that_present_orgCustomerPhone = true && that.isSetOrgCustomerPhone();
    if (this_present_orgCustomerPhone || that_present_orgCustomerPhone) {
      if (!(this_present_orgCustomerPhone && that_present_orgCustomerPhone))
        return false;
      if (!this.orgCustomerPhone.equals(that.orgCustomerPhone))
        return false;
    }

    boolean this_present_orgCustomerCard = true && this.isSetOrgCustomerCard();
    boolean that_present_orgCustomerCard = true && that.isSetOrgCustomerCard();
    if (this_present_orgCustomerCard || that_present_orgCustomerCard) {
      if (!(this_present_orgCustomerCard && that_present_orgCustomerCard))
        return false;
      if (!this.orgCustomerCard.equals(that.orgCustomerCard))
        return false;
    }

    boolean this_present_planLoanDate = true && this.isSetPlanLoanDate();
    boolean that_present_planLoanDate = true && that.isSetPlanLoanDate();
    if (this_present_planLoanDate || that_present_planLoanDate) {
      if (!(this_present_planLoanDate && that_present_planLoanDate))
        return false;
      if (!this.planLoanDate.equals(that.planLoanDate))
        return false;
    }

    boolean this_present_planLoanMoney = true;
    boolean that_present_planLoanMoney = true;
    if (this_present_planLoanMoney || that_present_planLoanMoney) {
      if (!(this_present_planLoanMoney && that_present_planLoanMoney))
        return false;
      if (this.planLoanMoney != that.planLoanMoney)
        return false;
    }

    boolean this_present_loanRate = true;
    boolean that_present_loanRate = true;
    if (this_present_loanRate || that_present_loanRate) {
      if (!(this_present_loanRate && that_present_loanRate))
        return false;
      if (this.loanRate != that.loanRate)
        return false;
    }

    boolean this_present_maxLoanRate = true;
    boolean that_present_maxLoanRate = true;
    if (this_present_maxLoanRate || that_present_maxLoanRate) {
      if (!(this_present_maxLoanRate && that_present_maxLoanRate))
        return false;
      if (this.maxLoanRate != that.maxLoanRate)
        return false;
    }

    boolean this_present_isClosed = true;
    boolean that_present_isClosed = true;
    if (this_present_isClosed || that_present_isClosed) {
      if (!(this_present_isClosed && that_present_isClosed))
        return false;
      if (this.isClosed != that.isClosed)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_areaCode = true && this.isSetAreaCode();
    boolean that_present_areaCode = true && that.isSetAreaCode();
    if (this_present_areaCode || that_present_areaCode) {
      if (!(this_present_areaCode && that_present_areaCode))
        return false;
      if (!this.areaCode.equals(that.areaCode))
        return false;
    }

    boolean this_present_applyUserId = true;
    boolean that_present_applyUserId = true;
    if (this_present_applyUserId || that_present_applyUserId) {
      if (!(this_present_applyUserId && that_present_applyUserId))
        return false;
      if (this.applyUserId != that.applyUserId)
        return false;
    }

    boolean this_present_isNeedHandle = true;
    boolean that_present_isNeedHandle = true;
    if (this_present_isNeedHandle || that_present_isNeedHandle) {
      if (!(this_present_isNeedHandle && that_present_isNeedHandle))
        return false;
      if (this.isNeedHandle != that.isNeedHandle)
        return false;
    }

    boolean this_present_cancelGuaranteeDate = true && this.isSetCancelGuaranteeDate();
    boolean that_present_cancelGuaranteeDate = true && that.isSetCancelGuaranteeDate();
    if (this_present_cancelGuaranteeDate || that_present_cancelGuaranteeDate) {
      if (!(this_present_cancelGuaranteeDate && that_present_cancelGuaranteeDate))
        return false;
      if (!this.cancelGuaranteeDate.equals(that.cancelGuaranteeDate))
        return false;
    }

    boolean this_present_isNeedFinancial = true;
    boolean that_present_isNeedFinancial = true;
    if (this_present_isNeedFinancial || that_present_isNeedFinancial) {
      if (!(this_present_isNeedFinancial && that_present_isNeedFinancial))
        return false;
      if (this.isNeedFinancial != that.isNeedFinancial)
        return false;
    }

    boolean this_present_estateList = true && this.isSetEstateList();
    boolean that_present_estateList = true && that.isSetEstateList();
    if (this_present_estateList || that_present_estateList) {
      if (!(this_present_estateList && that_present_estateList))
        return false;
      if (!this.estateList.equals(that.estateList))
        return false;
    }

    boolean this_present_houseIds = true && this.isSetHouseIds();
    boolean that_present_houseIds = true && that.isSetHouseIds();
    if (this_present_houseIds || that_present_houseIds) {
      if (!(this_present_houseIds && that_present_houseIds))
        return false;
      if (!this.houseIds.equals(that.houseIds))
        return false;
    }

    boolean this_present_isReject = true;
    boolean that_present_isReject = true;
    if (this_present_isReject || that_present_isReject) {
      if (!(this_present_isReject && that_present_isReject))
        return false;
      if (this.isReject != that.isReject)
        return false;
    }

    boolean this_present_isAssigned = true;
    boolean that_present_isAssigned = true;
    if (this_present_isAssigned || that_present_isAssigned) {
      if (!(this_present_isAssigned && that_present_isAssigned))
        return false;
      if (this.isAssigned != that.isAssigned)
        return false;
    }

    boolean this_present_recordClerkId = true;
    boolean that_present_recordClerkId = true;
    if (this_present_recordClerkId || that_present_recordClerkId) {
      if (!(this_present_recordClerkId && that_present_recordClerkId))
        return false;
      if (this.recordClerkId != that.recordClerkId)
        return false;
    }

    boolean this_present_foreAfterMonitorStatus = true;
    boolean that_present_foreAfterMonitorStatus = true;
    if (this_present_foreAfterMonitorStatus || that_present_foreAfterMonitorStatus) {
      if (!(this_present_foreAfterMonitorStatus && that_present_foreAfterMonitorStatus))
        return false;
      if (this.foreAfterMonitorStatus != that.foreAfterMonitorStatus)
        return false;
    }

    boolean this_present_originalLoanList = true && this.isSetOriginalLoanList();
    boolean that_present_originalLoanList = true && that.isSetOriginalLoanList();
    if (this_present_originalLoanList || that_present_originalLoanList) {
      if (!(this_present_originalLoanList && that_present_originalLoanList))
        return false;
      if (!this.originalLoanList.equals(that.originalLoanList))
        return false;
    }

    boolean this_present_originalLoanIds = true && this.isSetOriginalLoanIds();
    boolean that_present_originalLoanIds = true && that.isSetOriginalLoanIds();
    if (this_present_originalLoanIds || that_present_originalLoanIds) {
      if (!(this_present_originalLoanIds && that_present_originalLoanIds))
        return false;
      if (!this.originalLoanIds.equals(that.originalLoanIds))
        return false;
    }

    boolean this_present_cusEnterpriseInfo = true && this.isSetCusEnterpriseInfo();
    boolean that_present_cusEnterpriseInfo = true && that.isSetCusEnterpriseInfo();
    if (this_present_cusEnterpriseInfo || that_present_cusEnterpriseInfo) {
      if (!(this_present_cusEnterpriseInfo && that_present_cusEnterpriseInfo))
        return false;
      if (!this.cusEnterpriseInfo.equals(that.cusEnterpriseInfo))
        return false;
    }

    boolean this_present_cusCredentials = true && this.isSetCusCredentials();
    boolean that_present_cusCredentials = true && that.isSetCusCredentials();
    if (this_present_cusCredentials || that_present_cusCredentials) {
      if (!(this_present_cusCredentials && that_present_cusCredentials))
        return false;
      if (!this.cusCredentials.equals(that.cusCredentials))
        return false;
    }

    boolean this_present_cusCardInfo = true && this.isSetCusCardInfo();
    boolean that_present_cusCardInfo = true && that.isSetCusCardInfo();
    if (this_present_cusCardInfo || that_present_cusCardInfo) {
      if (!(this_present_cusCardInfo && that_present_cusCardInfo))
        return false;
      if (!this.cusCardInfo.equals(that.cusCardInfo))
        return false;
    }

    boolean this_present_capitalName = true && this.isSetCapitalName();
    boolean that_present_capitalName = true && that.isSetCapitalName();
    if (this_present_capitalName || that_present_capitalName) {
      if (!(this_present_capitalName && that_present_capitalName))
        return false;
      if (!this.capitalName.equals(that.capitalName))
        return false;
    }

    boolean this_present_loanType = true && this.isSetLoanType();
    boolean that_present_loanType = true && that.isSetLoanType();
    if (this_present_loanType || that_present_loanType) {
      if (!(this_present_loanType && that_present_loanType))
        return false;
      if (!this.loanType.equals(that.loanType))
        return false;
    }

    boolean this_present_nextUserId = true && this.isSetNextUserId();
    boolean that_present_nextUserId = true && that.isSetNextUserId();
    if (this_present_nextUserId || that_present_nextUserId) {
      if (!(this_present_nextUserId && that_present_nextUserId))
        return false;
      if (!this.nextUserId.equals(that.nextUserId))
        return false;
    }

    boolean this_present_proContactIds = true && this.isSetProContactIds();
    boolean that_present_proContactIds = true && that.isSetProContactIds();
    if (this_present_proContactIds || that_present_proContactIds) {
      if (!(this_present_proContactIds && that_present_proContactIds))
        return false;
      if (!this.proContactIds.equals(that.proContactIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_projectTypeText = true && (isSetProjectTypeText());
    list.add(present_projectTypeText);
    if (present_projectTypeText)
      list.add(projectTypeText);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_businessCatelog = true;
    list.add(present_businessCatelog);
    if (present_businessCatelog)
      list.add(businessCatelog);

    boolean present_businessCatelogText = true && (isSetBusinessCatelogText());
    list.add(present_businessCatelogText);
    if (present_businessCatelogText)
      list.add(businessCatelogText);

    boolean present_businessType = true;
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_businessTypeText = true && (isSetBusinessTypeText());
    list.add(present_businessTypeText);
    if (present_businessTypeText)
      list.add(businessTypeText);

    boolean present_flowCatelog = true;
    list.add(present_flowCatelog);
    if (present_flowCatelog)
      list.add(flowCatelog);

    boolean present_flowCatelogText = true && (isSetFlowCatelogText());
    list.add(present_flowCatelogText);
    if (present_flowCatelogText)
      list.add(flowCatelogText);

    boolean present_myType = true;
    list.add(present_myType);
    if (present_myType)
      list.add(myType);

    boolean present_myTypeText = true && (isSetMyTypeText());
    list.add(present_myTypeText);
    if (present_myTypeText)
      list.add(myTypeText);

    boolean present_myMain = true && (isSetMyMain());
    list.add(present_myMain);
    if (present_myMain)
      list.add(myMain);

    boolean present_myMainText = true && (isSetMyMainText());
    list.add(present_myMainText);
    if (present_myMainText)
      list.add(myMainText);

    boolean present_loanInterestRecord = true;
    list.add(present_loanInterestRecord);
    if (present_loanInterestRecord)
      list.add(loanInterestRecord);

    boolean present_loanInterestRecordText = true && (isSetLoanInterestRecordText());
    list.add(present_loanInterestRecordText);
    if (present_loanInterestRecordText)
      list.add(loanInterestRecordText);

    boolean present_loanInterestRecordNo = true && (isSetLoanInterestRecordNo());
    list.add(present_loanInterestRecordNo);
    if (present_loanInterestRecordNo)
      list.add(loanInterestRecordNo);

    boolean present_loanMgrRecord = true;
    list.add(present_loanMgrRecord);
    if (present_loanMgrRecord)
      list.add(loanMgrRecord);

    boolean present_loanMgrRecordText = true && (isSetLoanMgrRecordText());
    list.add(present_loanMgrRecordText);
    if (present_loanMgrRecordText)
      list.add(loanMgrRecordText);

    boolean present_loanMgrRecordNo = true && (isSetLoanMgrRecordNo());
    list.add(present_loanMgrRecordNo);
    if (present_loanMgrRecordNo)
      list.add(loanMgrRecordNo);

    boolean present_loanOtherFee = true;
    list.add(present_loanOtherFee);
    if (present_loanOtherFee)
      list.add(loanOtherFee);

    boolean present_loanOtherFeeText = true && (isSetLoanOtherFeeText());
    list.add(present_loanOtherFeeText);
    if (present_loanOtherFeeText)
      list.add(loanOtherFeeText);

    boolean present_loanOtherFeeNo = true && (isSetLoanOtherFeeNo());
    list.add(present_loanOtherFeeNo);
    if (present_loanOtherFeeNo)
      list.add(loanOtherFeeNo);

    boolean present_isAllowPrepay = true;
    list.add(present_isAllowPrepay);
    if (present_isAllowPrepay)
      list.add(isAllowPrepay);

    boolean present_isAllowPrepayText = true && (isSetIsAllowPrepayText());
    list.add(present_isAllowPrepayText);
    if (present_isAllowPrepayText)
      list.add(isAllowPrepayText);

    boolean present_isReturnInterest = true;
    list.add(present_isReturnInterest);
    if (present_isReturnInterest)
      list.add(isReturnInterest);

    boolean present_isReturnInterestText = true && (isSetIsReturnInterestText());
    list.add(present_isReturnInterestText);
    if (present_isReturnInterestText)
      list.add(isReturnInterestText);

    boolean present_personIds = true && (isSetPersonIds());
    list.add(present_personIds);
    if (present_personIds)
      list.add(personIds);

    boolean present_beginRequestDttm = true && (isSetBeginRequestDttm());
    list.add(present_beginRequestDttm);
    if (present_beginRequestDttm)
      list.add(beginRequestDttm);

    boolean present_endRequestDttm = true && (isSetEndRequestDttm());
    list.add(present_endRequestDttm);
    if (present_endRequestDttm)
      list.add(endRequestDttm);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_acctTypeText = true && (isSetAcctTypeText());
    list.add(present_acctTypeText);
    if (present_acctTypeText)
      list.add(acctTypeText);

    boolean present_credtiStartDt = true && (isSetCredtiStartDt());
    list.add(present_credtiStartDt);
    if (present_credtiStartDt)
      list.add(credtiStartDt);

    boolean present_credtiEndDt = true && (isSetCredtiEndDt());
    list.add(present_credtiEndDt);
    if (present_credtiEndDt)
      list.add(credtiEndDt);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_isHoop = true;
    list.add(present_isHoop);
    if (present_isHoop)
      list.add(isHoop);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_currency = true;
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_dateMode = true;
    list.add(present_dateMode);
    if (present_dateMode)
      list.add(dateMode);

    boolean present_repayFun = true;
    list.add(present_repayFun);
    if (present_repayFun)
      list.add(repayFun);

    boolean present_repayCycleType = true;
    list.add(present_repayCycleType);
    if (present_repayCycleType)
      list.add(repayCycleType);

    boolean present_repayCycleDate = true;
    list.add(present_repayCycleDate);
    if (present_repayCycleDate)
      list.add(repayCycleDate);

    boolean present_repayCycle = true;
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_repayOption = true;
    list.add(present_repayOption);
    if (present_repayOption)
      list.add(repayOption);

    boolean present_repayDate = true;
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_monthLoanMgr = true;
    list.add(present_monthLoanMgr);
    if (present_monthLoanMgr)
      list.add(monthLoanMgr);

    boolean present_monthLoanOtherFee = true;
    list.add(present_monthLoanOtherFee);
    if (present_monthLoanOtherFee)
      list.add(monthLoanOtherFee);

    boolean present_yearLoanInterest = true;
    list.add(present_yearLoanInterest);
    if (present_yearLoanInterest)
      list.add(yearLoanInterest);

    boolean present_yearLoanMgr = true;
    list.add(present_yearLoanMgr);
    if (present_yearLoanMgr)
      list.add(yearLoanMgr);

    boolean present_yearLoanOtherFee = true;
    list.add(present_yearLoanOtherFee);
    if (present_yearLoanOtherFee)
      list.add(yearLoanOtherFee);

    boolean present_dayLoanInterest = true;
    list.add(present_dayLoanInterest);
    if (present_dayLoanInterest)
      list.add(dayLoanInterest);

    boolean present_dayLoanMgr = true;
    list.add(present_dayLoanMgr);
    if (present_dayLoanMgr)
      list.add(dayLoanMgr);

    boolean present_dayLoanOtherFee = true;
    list.add(present_dayLoanOtherFee);
    if (present_dayLoanOtherFee)
      list.add(dayLoanOtherFee);

    boolean present_liqDmgProportion = true;
    list.add(present_liqDmgProportion);
    if (present_liqDmgProportion)
      list.add(liqDmgProportion);

    boolean present_overdueLoanInterest = true;
    list.add(present_overdueLoanInterest);
    if (present_overdueLoanInterest)
      list.add(overdueLoanInterest);

    boolean present_overdueFineInterest = true;
    list.add(present_overdueFineInterest);
    if (present_overdueFineInterest)
      list.add(overdueFineInterest);

    boolean present_misFineInterest = true;
    list.add(present_misFineInterest);
    if (present_misFineInterest)
      list.add(misFineInterest);

    boolean present_prepayLiqDmgProportion = true;
    list.add(present_prepayLiqDmgProportion);
    if (present_prepayLiqDmgProportion)
      list.add(prepayLiqDmgProportion);

    boolean present_circulateType = true;
    list.add(present_circulateType);
    if (present_circulateType)
      list.add(circulateType);

    boolean present_abbreviation = true && (isSetAbbreviation());
    list.add(present_abbreviation);
    if (present_abbreviation)
      list.add(abbreviation);

    boolean present_userPids = true && (isSetUserPids());
    list.add(present_userPids);
    if (present_userPids)
      list.add(userPids);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_surveyResult = true && (isSetSurveyResult());
    list.add(present_surveyResult);
    if (present_surveyResult)
      list.add(surveyResult);

    boolean present_requestStatusVal = true && (isSetRequestStatusVal());
    list.add(present_requestStatusVal);
    if (present_requestStatusVal)
      list.add(requestStatusVal);

    boolean present_ecoTradeText = true && (isSetEcoTradeText());
    list.add(present_ecoTradeText);
    if (present_ecoTradeText)
      list.add(ecoTradeText);

    boolean present_ecoTrade = true && (isSetEcoTrade());
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_assWay = true && (isSetAssWay());
    list.add(present_assWay);
    if (present_assWay)
      list.add(assWay);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_beginCompleteDttm = true && (isSetBeginCompleteDttm());
    list.add(present_beginCompleteDttm);
    if (present_beginCompleteDttm)
      list.add(beginCompleteDttm);

    boolean present_endCompleteDttm = true && (isSetEndCompleteDttm());
    list.add(present_endCompleteDttm);
    if (present_endCompleteDttm)
      list.add(endCompleteDttm);

    boolean present_comments = true && (isSetComments());
    list.add(present_comments);
    if (present_comments)
      list.add(comments);

    boolean present_repayOptionTest = true;
    list.add(present_repayOptionTest);
    if (present_repayOptionTest)
      list.add(repayOptionTest);

    boolean present_eachissueOption = true;
    list.add(present_eachissueOption);
    if (present_eachissueOption)
      list.add(eachissueOption);

    boolean present_feesProportion = true;
    list.add(present_feesProportion);
    if (present_feesProportion)
      list.add(feesProportion);

    boolean present_creditId = true;
    list.add(present_creditId);
    if (present_creditId)
      list.add(creditId);

    boolean present_extensionNum = true;
    list.add(present_extensionNum);
    if (present_extensionNum)
      list.add(extensionNum);

    boolean present_extensionAmt = true;
    list.add(present_extensionAmt);
    if (present_extensionAmt)
      list.add(extensionAmt);

    boolean present_limitId = true;
    list.add(present_limitId);
    if (present_limitId)
      list.add(limitId);

    boolean present_nowUserId = true;
    list.add(present_nowUserId);
    if (present_nowUserId)
      list.add(nowUserId);

    boolean present_creditStatus = true;
    list.add(present_creditStatus);
    if (present_creditStatus)
      list.add(creditStatus);

    boolean present_repayFunText = true && (isSetRepayFunText());
    list.add(present_repayFunText);
    if (present_repayFunText)
      list.add(repayFunText);

    boolean present_assWayText = true && (isSetAssWayText());
    list.add(present_assWayText);
    if (present_assWayText)
      list.add(assWayText);

    boolean present_judgeRepayCycle = true;
    list.add(present_judgeRepayCycle);
    if (present_judgeRepayCycle)
      list.add(judgeRepayCycle);

    boolean present_oldProjectId = true;
    list.add(present_oldProjectId);
    if (present_oldProjectId)
      list.add(oldProjectId);

    boolean present_projectGuarantee = true && (isSetProjectGuarantee());
    list.add(present_projectGuarantee);
    if (present_projectGuarantee)
      list.add(projectGuarantee);

    boolean present_projectProperty = true && (isSetProjectProperty());
    list.add(present_projectProperty);
    if (present_projectProperty)
      list.add(projectProperty);

    boolean present_projectForeclosure = true && (isSetProjectForeclosure());
    list.add(present_projectForeclosure);
    if (present_projectForeclosure)
      list.add(projectForeclosure);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_businessContacts = true && (isSetBusinessContacts());
    list.add(present_businessContacts);
    if (present_businessContacts)
      list.add(businessContacts);

    boolean present_contactsPhone = true && (isSetContactsPhone());
    list.add(present_contactsPhone);
    if (present_contactsPhone)
      list.add(contactsPhone);

    boolean present_innerOrOut = true;
    list.add(present_innerOrOut);
    if (present_innerOrOut)
      list.add(innerOrOut);

    boolean present_businessCategory = true;
    list.add(present_businessCategory);
    if (present_businessCategory)
      list.add(businessCategory);

    boolean present_isNotarization = true;
    list.add(present_isNotarization);
    if (present_isNotarization)
      list.add(isNotarization);

    boolean present_isDelete = true;
    list.add(present_isDelete);
    if (present_isDelete)
      list.add(isDelete);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_productType = true;
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_managers = true && (isSetManagers());
    list.add(present_managers);
    if (present_managers)
      list.add(managers);

    boolean present_managersPhone = true && (isSetManagersPhone());
    list.add(present_managersPhone);
    if (present_managersPhone)
      list.add(managersPhone);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_oldLoanBank = true && (isSetOldLoanBank());
    list.add(present_oldLoanBank);
    if (present_oldLoanBank)
      list.add(oldLoanBank);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_extensionDate = true && (isSetExtensionDate());
    list.add(present_extensionDate);
    if (present_extensionDate)
      list.add(extensionDate);

    boolean present_extensionRate = true;
    list.add(present_extensionRate);
    if (present_extensionRate)
      list.add(extensionRate);

    boolean present_businessSourceNo = true;
    list.add(present_businessSourceNo);
    if (present_businessSourceNo)
      list.add(businessSourceNo);

    boolean present_collectFileStatus = true;
    list.add(present_collectFileStatus);
    if (present_collectFileStatus)
      list.add(collectFileStatus);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_foreList = true && (isSetForeList());
    list.add(present_foreList);
    if (present_foreList)
      list.add(foreList);

    boolean present_auditorOpinion = true && (isSetAuditorOpinion());
    list.add(present_auditorOpinion);
    if (present_auditorOpinion)
      list.add(auditorOpinion);

    boolean present_specialDesc = true && (isSetSpecialDesc());
    list.add(present_specialDesc);
    if (present_specialDesc)
      list.add(specialDesc);

    boolean present_declaration = true && (isSetDeclaration());
    list.add(present_declaration);
    if (present_declaration)
      list.add(declaration);

    boolean present_isSeller = true;
    list.add(present_isSeller);
    if (present_isSeller)
      list.add(isSeller);

    boolean present_refundFileStatus = true;
    list.add(present_refundFileStatus);
    if (present_refundFileStatus)
      list.add(refundFileStatus);

    boolean present_chechanDate = true && (isSetChechanDate());
    list.add(present_chechanDate);
    if (present_chechanDate)
      list.add(chechanDate);

    boolean present_chechanUserId = true;
    list.add(present_chechanUserId);
    if (present_chechanUserId)
      list.add(chechanUserId);

    boolean present_chechanUserName = true && (isSetChechanUserName());
    list.add(present_chechanUserName);
    if (present_chechanUserName)
      list.add(chechanUserName);

    boolean present_chechanCause = true && (isSetChechanCause());
    list.add(present_chechanCause);
    if (present_chechanCause)
      list.add(chechanCause);

    boolean present_extensionDays = true;
    list.add(present_extensionDays);
    if (present_extensionDays)
      list.add(extensionDays);

    boolean present_sourceStr = true && (isSetSourceStr());
    list.add(present_sourceStr);
    if (present_sourceStr)
      list.add(sourceStr);

    boolean present_orgCustomerName = true && (isSetOrgCustomerName());
    list.add(present_orgCustomerName);
    if (present_orgCustomerName)
      list.add(orgCustomerName);

    boolean present_orgCustomerPhone = true && (isSetOrgCustomerPhone());
    list.add(present_orgCustomerPhone);
    if (present_orgCustomerPhone)
      list.add(orgCustomerPhone);

    boolean present_orgCustomerCard = true && (isSetOrgCustomerCard());
    list.add(present_orgCustomerCard);
    if (present_orgCustomerCard)
      list.add(orgCustomerCard);

    boolean present_planLoanDate = true && (isSetPlanLoanDate());
    list.add(present_planLoanDate);
    if (present_planLoanDate)
      list.add(planLoanDate);

    boolean present_planLoanMoney = true;
    list.add(present_planLoanMoney);
    if (present_planLoanMoney)
      list.add(planLoanMoney);

    boolean present_loanRate = true;
    list.add(present_loanRate);
    if (present_loanRate)
      list.add(loanRate);

    boolean present_maxLoanRate = true;
    list.add(present_maxLoanRate);
    if (present_maxLoanRate)
      list.add(maxLoanRate);

    boolean present_isClosed = true;
    list.add(present_isClosed);
    if (present_isClosed)
      list.add(isClosed);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_areaCode = true && (isSetAreaCode());
    list.add(present_areaCode);
    if (present_areaCode)
      list.add(areaCode);

    boolean present_applyUserId = true;
    list.add(present_applyUserId);
    if (present_applyUserId)
      list.add(applyUserId);

    boolean present_isNeedHandle = true;
    list.add(present_isNeedHandle);
    if (present_isNeedHandle)
      list.add(isNeedHandle);

    boolean present_cancelGuaranteeDate = true && (isSetCancelGuaranteeDate());
    list.add(present_cancelGuaranteeDate);
    if (present_cancelGuaranteeDate)
      list.add(cancelGuaranteeDate);

    boolean present_isNeedFinancial = true;
    list.add(present_isNeedFinancial);
    if (present_isNeedFinancial)
      list.add(isNeedFinancial);

    boolean present_estateList = true && (isSetEstateList());
    list.add(present_estateList);
    if (present_estateList)
      list.add(estateList);

    boolean present_houseIds = true && (isSetHouseIds());
    list.add(present_houseIds);
    if (present_houseIds)
      list.add(houseIds);

    boolean present_isReject = true;
    list.add(present_isReject);
    if (present_isReject)
      list.add(isReject);

    boolean present_isAssigned = true;
    list.add(present_isAssigned);
    if (present_isAssigned)
      list.add(isAssigned);

    boolean present_recordClerkId = true;
    list.add(present_recordClerkId);
    if (present_recordClerkId)
      list.add(recordClerkId);

    boolean present_foreAfterMonitorStatus = true;
    list.add(present_foreAfterMonitorStatus);
    if (present_foreAfterMonitorStatus)
      list.add(foreAfterMonitorStatus);

    boolean present_originalLoanList = true && (isSetOriginalLoanList());
    list.add(present_originalLoanList);
    if (present_originalLoanList)
      list.add(originalLoanList);

    boolean present_originalLoanIds = true && (isSetOriginalLoanIds());
    list.add(present_originalLoanIds);
    if (present_originalLoanIds)
      list.add(originalLoanIds);

    boolean present_cusEnterpriseInfo = true && (isSetCusEnterpriseInfo());
    list.add(present_cusEnterpriseInfo);
    if (present_cusEnterpriseInfo)
      list.add(cusEnterpriseInfo);

    boolean present_cusCredentials = true && (isSetCusCredentials());
    list.add(present_cusCredentials);
    if (present_cusCredentials)
      list.add(cusCredentials);

    boolean present_cusCardInfo = true && (isSetCusCardInfo());
    list.add(present_cusCardInfo);
    if (present_cusCardInfo)
      list.add(cusCardInfo);

    boolean present_capitalName = true && (isSetCapitalName());
    list.add(present_capitalName);
    if (present_capitalName)
      list.add(capitalName);

    boolean present_loanType = true && (isSetLoanType());
    list.add(present_loanType);
    if (present_loanType)
      list.add(loanType);

    boolean present_nextUserId = true && (isSetNextUserId());
    list.add(present_nextUserId);
    if (present_nextUserId)
      list.add(nextUserId);

    boolean present_proContactIds = true && (isSetProContactIds());
    list.add(present_proContactIds);
    if (present_proContactIds)
      list.add(proContactIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(Project other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectTypeText()).compareTo(other.isSetProjectTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectTypeText, other.projectTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCatelog()).compareTo(other.isSetBusinessCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCatelog, other.businessCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCatelogText()).compareTo(other.isSetBusinessCatelogText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCatelogText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCatelogText, other.businessCatelogText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessTypeText()).compareTo(other.isSetBusinessTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessTypeText, other.businessTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowCatelog()).compareTo(other.isSetFlowCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowCatelog, other.flowCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowCatelogText()).compareTo(other.isSetFlowCatelogText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowCatelogText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowCatelogText, other.flowCatelogText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyType()).compareTo(other.isSetMyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myType, other.myType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyTypeText()).compareTo(other.isSetMyTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myTypeText, other.myTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyMain()).compareTo(other.isSetMyMain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyMain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myMain, other.myMain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyMainText()).compareTo(other.isSetMyMainText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyMainText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myMainText, other.myMainText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterestRecord()).compareTo(other.isSetLoanInterestRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecord, other.loanInterestRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterestRecordText()).compareTo(other.isSetLoanInterestRecordText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestRecordText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecordText, other.loanInterestRecordText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanInterestRecordNo()).compareTo(other.isSetLoanInterestRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInterestRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecordNo, other.loanInterestRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrRecord()).compareTo(other.isSetLoanMgrRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecord, other.loanMgrRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrRecordText()).compareTo(other.isSetLoanMgrRecordText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrRecordText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecordText, other.loanMgrRecordText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMgrRecordNo()).compareTo(other.isSetLoanMgrRecordNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMgrRecordNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecordNo, other.loanMgrRecordNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFee()).compareTo(other.isSetLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFee, other.loanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFeeText()).compareTo(other.isSetLoanOtherFeeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFeeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFeeText, other.loanOtherFeeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFeeNo()).compareTo(other.isSetLoanOtherFeeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFeeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFeeNo, other.loanOtherFeeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAllowPrepay()).compareTo(other.isSetIsAllowPrepay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAllowPrepay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAllowPrepay, other.isAllowPrepay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAllowPrepayText()).compareTo(other.isSetIsAllowPrepayText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAllowPrepayText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAllowPrepayText, other.isAllowPrepayText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReturnInterest()).compareTo(other.isSetIsReturnInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReturnInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReturnInterest, other.isReturnInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReturnInterestText()).compareTo(other.isSetIsReturnInterestText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReturnInterestText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReturnInterestText, other.isReturnInterestText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonIds()).compareTo(other.isSetPersonIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personIds, other.personIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginRequestDttm()).compareTo(other.isSetBeginRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginRequestDttm, other.beginRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndRequestDttm()).compareTo(other.isSetEndRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRequestDttm, other.endRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctTypeText()).compareTo(other.isSetAcctTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctTypeText, other.acctTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredtiStartDt()).compareTo(other.isSetCredtiStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredtiStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credtiStartDt, other.credtiStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredtiEndDt()).compareTo(other.isSetCredtiEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredtiEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credtiEndDt, other.credtiEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHoop()).compareTo(other.isSetIsHoop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHoop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHoop, other.isHoop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateMode()).compareTo(other.isSetDateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateMode, other.dateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayFun()).compareTo(other.isSetRepayFun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayFun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayFun, other.repayFun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycleType()).compareTo(other.isSetRepayCycleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycleType, other.repayCycleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycleDate()).compareTo(other.isSetRepayCycleDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycleDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycleDate, other.repayCycleDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayOption()).compareTo(other.isSetRepayOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayOption, other.repayOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanMgr()).compareTo(other.isSetMonthLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanMgr, other.monthLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanOtherFee()).compareTo(other.isSetMonthLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanOtherFee, other.monthLoanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearLoanInterest()).compareTo(other.isSetYearLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearLoanInterest, other.yearLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearLoanMgr()).compareTo(other.isSetYearLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearLoanMgr, other.yearLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearLoanOtherFee()).compareTo(other.isSetYearLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearLoanOtherFee, other.yearLoanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLoanInterest()).compareTo(other.isSetDayLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLoanInterest, other.dayLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLoanMgr()).compareTo(other.isSetDayLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLoanMgr, other.dayLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLoanOtherFee()).compareTo(other.isSetDayLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLoanOtherFee, other.dayLoanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiqDmgProportion()).compareTo(other.isSetLiqDmgProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiqDmgProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liqDmgProportion, other.liqDmgProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueLoanInterest()).compareTo(other.isSetOverdueLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueLoanInterest, other.overdueLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFineInterest()).compareTo(other.isSetOverdueFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFineInterest, other.overdueFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMisFineInterest()).compareTo(other.isSetMisFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMisFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.misFineInterest, other.misFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrepayLiqDmgProportion()).compareTo(other.isSetPrepayLiqDmgProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepayLiqDmgProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepayLiqDmgProportion, other.prepayLiqDmgProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCirculateType()).compareTo(other.isSetCirculateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCirculateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circulateType, other.circulateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbbreviation()).compareTo(other.isSetAbbreviation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbbreviation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbreviation, other.abbreviation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPids()).compareTo(other.isSetUserPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPids, other.userPids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurveyResult()).compareTo(other.isSetSurveyResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurveyResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surveyResult, other.surveyResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatusVal()).compareTo(other.isSetRequestStatusVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatusVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatusVal, other.requestStatusVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTradeText()).compareTo(other.isSetEcoTradeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTradeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTradeText, other.ecoTradeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssWay()).compareTo(other.isSetAssWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assWay, other.assWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginCompleteDttm()).compareTo(other.isSetBeginCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginCompleteDttm, other.beginCompleteDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndCompleteDttm()).compareTo(other.isSetEndCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endCompleteDttm, other.endCompleteDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayOptionTest()).compareTo(other.isSetRepayOptionTest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayOptionTest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayOptionTest, other.repayOptionTest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEachissueOption()).compareTo(other.isSetEachissueOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEachissueOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eachissueOption, other.eachissueOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeesProportion()).compareTo(other.isSetFeesProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeesProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feesProportion, other.feesProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditId()).compareTo(other.isSetCreditId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditId, other.creditId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionNum()).compareTo(other.isSetExtensionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionNum, other.extensionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionAmt()).compareTo(other.isSetExtensionAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionAmt, other.extensionAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitId()).compareTo(other.isSetLimitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitId, other.limitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNowUserId()).compareTo(other.isSetNowUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowUserId, other.nowUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditStatus()).compareTo(other.isSetCreditStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditStatus, other.creditStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayFunText()).compareTo(other.isSetRepayFunText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayFunText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayFunText, other.repayFunText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssWayText()).compareTo(other.isSetAssWayText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssWayText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assWayText, other.assWayText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJudgeRepayCycle()).compareTo(other.isSetJudgeRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudgeRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judgeRepayCycle, other.judgeRepayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldProjectId()).compareTo(other.isSetOldProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldProjectId, other.oldProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectGuarantee()).compareTo(other.isSetProjectGuarantee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectGuarantee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectGuarantee, other.projectGuarantee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectProperty()).compareTo(other.isSetProjectProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectProperty, other.projectProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectForeclosure()).compareTo(other.isSetProjectForeclosure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectForeclosure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectForeclosure, other.projectForeclosure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessContacts()).compareTo(other.isSetBusinessContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessContacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessContacts, other.businessContacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactsPhone()).compareTo(other.isSetContactsPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactsPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactsPhone, other.contactsPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOut()).compareTo(other.isSetInnerOrOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOut, other.innerOrOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCategory()).compareTo(other.isSetBusinessCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCategory, other.businessCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotarization()).compareTo(other.isSetIsNotarization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotarization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotarization, other.isNotarization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagers()).compareTo(other.isSetManagers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managers, other.managers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagersPhone()).compareTo(other.isSetManagersPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagersPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managersPhone, other.managersPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanBank()).compareTo(other.isSetOldLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanBank, other.oldLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDate()).compareTo(other.isSetExtensionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDate, other.extensionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionRate()).compareTo(other.isSetExtensionRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionRate, other.extensionRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceNo()).compareTo(other.isSetBusinessSourceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceNo, other.businessSourceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFileStatus()).compareTo(other.isSetCollectFileStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFileStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFileStatus, other.collectFileStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeList()).compareTo(other.isSetForeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreList, other.foreList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditorOpinion()).compareTo(other.isSetAuditorOpinion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditorOpinion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditorOpinion, other.auditorOpinion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialDesc()).compareTo(other.isSetSpecialDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDesc, other.specialDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeclaration()).compareTo(other.isSetDeclaration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeclaration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.declaration, other.declaration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSeller()).compareTo(other.isSetIsSeller());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSeller()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSeller, other.isSeller);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundFileStatus()).compareTo(other.isSetRefundFileStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundFileStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFileStatus, other.refundFileStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanDate()).compareTo(other.isSetChechanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanDate, other.chechanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanUserId()).compareTo(other.isSetChechanUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanUserId, other.chechanUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanUserName()).compareTo(other.isSetChechanUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanUserName, other.chechanUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanCause()).compareTo(other.isSetChechanCause());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanCause()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanCause, other.chechanCause);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDays()).compareTo(other.isSetExtensionDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDays, other.extensionDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceStr()).compareTo(other.isSetSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceStr, other.sourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCustomerName()).compareTo(other.isSetOrgCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCustomerName, other.orgCustomerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCustomerPhone()).compareTo(other.isSetOrgCustomerPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCustomerPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCustomerPhone, other.orgCustomerPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCustomerCard()).compareTo(other.isSetOrgCustomerCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCustomerCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCustomerCard, other.orgCustomerCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanLoanDate()).compareTo(other.isSetPlanLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planLoanDate, other.planLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanLoanMoney()).compareTo(other.isSetPlanLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planLoanMoney, other.planLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRate()).compareTo(other.isSetLoanRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRate, other.loanRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxLoanRate()).compareTo(other.isSetMaxLoanRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLoanRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLoanRate, other.maxLoanRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsClosed()).compareTo(other.isSetIsClosed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsClosed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isClosed, other.isClosed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyUserId()).compareTo(other.isSetApplyUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyUserId, other.applyUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedHandle()).compareTo(other.isSetIsNeedHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedHandle, other.isNeedHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelGuaranteeDate()).compareTo(other.isSetCancelGuaranteeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelGuaranteeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelGuaranteeDate, other.cancelGuaranteeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedFinancial()).compareTo(other.isSetIsNeedFinancial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedFinancial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedFinancial, other.isNeedFinancial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstateList()).compareTo(other.isSetEstateList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstateList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estateList, other.estateList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseIds()).compareTo(other.isSetHouseIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseIds, other.houseIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReject()).compareTo(other.isSetIsReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReject, other.isReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAssigned()).compareTo(other.isSetIsAssigned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAssigned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAssigned, other.isAssigned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordClerkId()).compareTo(other.isSetRecordClerkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordClerkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordClerkId, other.recordClerkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeAfterMonitorStatus()).compareTo(other.isSetForeAfterMonitorStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeAfterMonitorStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreAfterMonitorStatus, other.foreAfterMonitorStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalLoanList()).compareTo(other.isSetOriginalLoanList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalLoanList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalLoanList, other.originalLoanList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalLoanIds()).compareTo(other.isSetOriginalLoanIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalLoanIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalLoanIds, other.originalLoanIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusEnterpriseInfo()).compareTo(other.isSetCusEnterpriseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusEnterpriseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusEnterpriseInfo, other.cusEnterpriseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusCredentials()).compareTo(other.isSetCusCredentials());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusCredentials()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusCredentials, other.cusCredentials);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusCardInfo()).compareTo(other.isSetCusCardInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusCardInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusCardInfo, other.cusCardInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapitalName()).compareTo(other.isSetCapitalName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapitalName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capitalName, other.capitalName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanType()).compareTo(other.isSetLoanType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanType, other.loanType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextUserId()).compareTo(other.isSetNextUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextUserId, other.nextUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProContactIds()).compareTo(other.isSetProContactIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProContactIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proContactIds, other.proContactIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Project(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectTypeText:");
    if (this.projectTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.projectTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCatelog:");
    sb.append(this.businessCatelog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCatelogText:");
    if (this.businessCatelogText == null) {
      sb.append("null");
    } else {
      sb.append(this.businessCatelogText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    sb.append(this.businessType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessTypeText:");
    if (this.businessTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.businessTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowCatelog:");
    sb.append(this.flowCatelog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowCatelogText:");
    if (this.flowCatelogText == null) {
      sb.append("null");
    } else {
      sb.append(this.flowCatelogText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myType:");
    sb.append(this.myType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("myTypeText:");
    if (this.myTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.myTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myMain:");
    if (this.myMain == null) {
      sb.append("null");
    } else {
      sb.append(this.myMain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myMainText:");
    if (this.myMainText == null) {
      sb.append("null");
    } else {
      sb.append(this.myMainText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterestRecord:");
    sb.append(this.loanInterestRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterestRecordText:");
    if (this.loanInterestRecordText == null) {
      sb.append("null");
    } else {
      sb.append(this.loanInterestRecordText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanInterestRecordNo:");
    if (this.loanInterestRecordNo == null) {
      sb.append("null");
    } else {
      sb.append(this.loanInterestRecordNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrRecord:");
    sb.append(this.loanMgrRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrRecordText:");
    if (this.loanMgrRecordText == null) {
      sb.append("null");
    } else {
      sb.append(this.loanMgrRecordText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMgrRecordNo:");
    if (this.loanMgrRecordNo == null) {
      sb.append("null");
    } else {
      sb.append(this.loanMgrRecordNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFee:");
    sb.append(this.loanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFeeText:");
    if (this.loanOtherFeeText == null) {
      sb.append("null");
    } else {
      sb.append(this.loanOtherFeeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFeeNo:");
    if (this.loanOtherFeeNo == null) {
      sb.append("null");
    } else {
      sb.append(this.loanOtherFeeNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAllowPrepay:");
    sb.append(this.isAllowPrepay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAllowPrepayText:");
    if (this.isAllowPrepayText == null) {
      sb.append("null");
    } else {
      sb.append(this.isAllowPrepayText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReturnInterest:");
    sb.append(this.isReturnInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReturnInterestText:");
    if (this.isReturnInterestText == null) {
      sb.append("null");
    } else {
      sb.append(this.isReturnInterestText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personIds:");
    if (this.personIds == null) {
      sb.append("null");
    } else {
      sb.append(this.personIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginRequestDttm:");
    if (this.beginRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.beginRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endRequestDttm:");
    if (this.endRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.endRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctTypeText:");
    if (this.acctTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.acctTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("credtiStartDt:");
    if (this.credtiStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.credtiStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("credtiEndDt:");
    if (this.credtiEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.credtiEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHoop:");
    sb.append(this.isHoop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateMode:");
    sb.append(this.dateMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayFun:");
    sb.append(this.repayFun);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycleType:");
    sb.append(this.repayCycleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycleDate:");
    sb.append(this.repayCycleDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    sb.append(this.repayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayOption:");
    sb.append(this.repayOption);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    sb.append(this.repayDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanMgr:");
    sb.append(this.monthLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanOtherFee:");
    sb.append(this.monthLoanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearLoanInterest:");
    sb.append(this.yearLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearLoanMgr:");
    sb.append(this.yearLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearLoanOtherFee:");
    sb.append(this.yearLoanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLoanInterest:");
    sb.append(this.dayLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLoanMgr:");
    sb.append(this.dayLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLoanOtherFee:");
    sb.append(this.dayLoanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liqDmgProportion:");
    sb.append(this.liqDmgProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueLoanInterest:");
    sb.append(this.overdueLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFineInterest:");
    sb.append(this.overdueFineInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("misFineInterest:");
    sb.append(this.misFineInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prepayLiqDmgProportion:");
    sb.append(this.prepayLiqDmgProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("circulateType:");
    sb.append(this.circulateType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("abbreviation:");
    if (this.abbreviation == null) {
      sb.append("null");
    } else {
      sb.append(this.abbreviation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPids:");
    if (this.userPids == null) {
      sb.append("null");
    } else {
      sb.append(this.userPids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surveyResult:");
    if (this.surveyResult == null) {
      sb.append("null");
    } else {
      sb.append(this.surveyResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatusVal:");
    if (this.requestStatusVal == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStatusVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTradeText:");
    if (this.ecoTradeText == null) {
      sb.append("null");
    } else {
      sb.append(this.ecoTradeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    if (this.ecoTrade == null) {
      sb.append("null");
    } else {
      sb.append(this.ecoTrade);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assWay:");
    if (this.assWay == null) {
      sb.append("null");
    } else {
      sb.append(this.assWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginCompleteDttm:");
    if (this.beginCompleteDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.beginCompleteDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endCompleteDttm:");
    if (this.endCompleteDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.endCompleteDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comments:");
    if (this.comments == null) {
      sb.append("null");
    } else {
      sb.append(this.comments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayOptionTest:");
    sb.append(this.repayOptionTest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eachissueOption:");
    sb.append(this.eachissueOption);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feesProportion:");
    sb.append(this.feesProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditId:");
    sb.append(this.creditId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionNum:");
    sb.append(this.extensionNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionAmt:");
    sb.append(this.extensionAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitId:");
    sb.append(this.limitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nowUserId:");
    sb.append(this.nowUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditStatus:");
    sb.append(this.creditStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayFunText:");
    if (this.repayFunText == null) {
      sb.append("null");
    } else {
      sb.append(this.repayFunText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assWayText:");
    if (this.assWayText == null) {
      sb.append("null");
    } else {
      sb.append(this.assWayText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("judgeRepayCycle:");
    sb.append(this.judgeRepayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldProjectId:");
    sb.append(this.oldProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectGuarantee:");
    if (this.projectGuarantee == null) {
      sb.append("null");
    } else {
      sb.append(this.projectGuarantee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectProperty:");
    if (this.projectProperty == null) {
      sb.append("null");
    } else {
      sb.append(this.projectProperty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectForeclosure:");
    if (this.projectForeclosure == null) {
      sb.append("null");
    } else {
      sb.append(this.projectForeclosure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessContacts:");
    if (this.businessContacts == null) {
      sb.append("null");
    } else {
      sb.append(this.businessContacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactsPhone:");
    if (this.contactsPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.contactsPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOut:");
    sb.append(this.innerOrOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCategory:");
    sb.append(this.businessCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNotarization:");
    sb.append(this.isNotarization);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDelete:");
    sb.append(this.isDelete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    sb.append(this.productType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("managers:");
    if (this.managers == null) {
      sb.append("null");
    } else {
      sb.append(this.managers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("managersPhone:");
    if (this.managersPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.managersPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanBank:");
    if (this.oldLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDate:");
    if (this.extensionDate == null) {
      sb.append("null");
    } else {
      sb.append(this.extensionDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionRate:");
    sb.append(this.extensionRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceNo:");
    sb.append(this.businessSourceNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFileStatus:");
    sb.append(this.collectFileStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreList:");
    if (this.foreList == null) {
      sb.append("null");
    } else {
      sb.append(this.foreList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditorOpinion:");
    if (this.auditorOpinion == null) {
      sb.append("null");
    } else {
      sb.append(this.auditorOpinion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialDesc:");
    if (this.specialDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.specialDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("declaration:");
    if (this.declaration == null) {
      sb.append("null");
    } else {
      sb.append(this.declaration);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSeller:");
    sb.append(this.isSeller);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundFileStatus:");
    sb.append(this.refundFileStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanDate:");
    if (this.chechanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanUserId:");
    sb.append(this.chechanUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanUserName:");
    if (this.chechanUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanCause:");
    if (this.chechanCause == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanCause);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDays:");
    sb.append(this.extensionDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceStr:");
    if (this.sourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCustomerName:");
    if (this.orgCustomerName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCustomerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCustomerPhone:");
    if (this.orgCustomerPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCustomerPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCustomerCard:");
    if (this.orgCustomerCard == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCustomerCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planLoanDate:");
    if (this.planLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planLoanMoney:");
    sb.append(this.planLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRate:");
    sb.append(this.loanRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxLoanRate:");
    sb.append(this.maxLoanRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isClosed:");
    sb.append(this.isClosed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaCode:");
    if (this.areaCode == null) {
      sb.append("null");
    } else {
      sb.append(this.areaCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyUserId:");
    sb.append(this.applyUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedHandle:");
    sb.append(this.isNeedHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelGuaranteeDate:");
    if (this.cancelGuaranteeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelGuaranteeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedFinancial:");
    sb.append(this.isNeedFinancial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estateList:");
    if (this.estateList == null) {
      sb.append("null");
    } else {
      sb.append(this.estateList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseIds:");
    if (this.houseIds == null) {
      sb.append("null");
    } else {
      sb.append(this.houseIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReject:");
    sb.append(this.isReject);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAssigned:");
    sb.append(this.isAssigned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordClerkId:");
    sb.append(this.recordClerkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreAfterMonitorStatus:");
    sb.append(this.foreAfterMonitorStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalLoanList:");
    if (this.originalLoanList == null) {
      sb.append("null");
    } else {
      sb.append(this.originalLoanList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalLoanIds:");
    if (this.originalLoanIds == null) {
      sb.append("null");
    } else {
      sb.append(this.originalLoanIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusEnterpriseInfo:");
    if (this.cusEnterpriseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.cusEnterpriseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusCredentials:");
    if (this.cusCredentials == null) {
      sb.append("null");
    } else {
      sb.append(this.cusCredentials);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusCardInfo:");
    if (this.cusCardInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.cusCardInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("capitalName:");
    if (this.capitalName == null) {
      sb.append("null");
    } else {
      sb.append(this.capitalName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanType:");
    if (this.loanType == null) {
      sb.append("null");
    } else {
      sb.append(this.loanType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextUserId:");
    if (this.nextUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.nextUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proContactIds:");
    if (this.proContactIds == null) {
      sb.append("null");
    } else {
      sb.append(this.proContactIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusEnterpriseInfo != null) {
      cusEnterpriseInfo.validate();
    }
    if (cusCredentials != null) {
      cusCredentials.validate();
    }
    if (cusCardInfo != null) {
      cusCardInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectStandardSchemeFactory implements SchemeFactory {
    public ProjectStandardScheme getScheme() {
      return new ProjectStandardScheme();
    }
  }

  private static class ProjectStandardScheme extends StandardScheme<Project> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Project struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectTypeText = iprot.readString();
              struct.setProjectTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BUSINESS_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessCatelog = iprot.readI32();
              struct.setBusinessCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BUSINESS_CATELOG_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessCatelogText = iprot.readString();
              struct.setBusinessCatelogTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessType = iprot.readI32();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BUSINESS_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessTypeText = iprot.readString();
              struct.setBusinessTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FLOW_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flowCatelog = iprot.readI32();
              struct.setFlowCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FLOW_CATELOG_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowCatelogText = iprot.readString();
              struct.setFlowCatelogTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myType = iprot.readI32();
              struct.setMyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MY_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.myTypeText = iprot.readString();
              struct.setMyTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MY_MAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.myMain = iprot.readString();
              struct.setMyMainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MY_MAIN_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.myMainText = iprot.readString();
              struct.setMyMainTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LOAN_INTEREST_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanInterestRecord = iprot.readI32();
              struct.setLoanInterestRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LOAN_INTEREST_RECORD_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanInterestRecordText = iprot.readString();
              struct.setLoanInterestRecordTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LOAN_INTEREST_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanInterestRecordNo = iprot.readString();
              struct.setLoanInterestRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LOAN_MGR_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanMgrRecord = iprot.readI32();
              struct.setLoanMgrRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // LOAN_MGR_RECORD_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanMgrRecordText = iprot.readString();
              struct.setLoanMgrRecordTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LOAN_MGR_RECORD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanMgrRecordNo = iprot.readString();
              struct.setLoanMgrRecordNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanOtherFee = iprot.readI32();
              struct.setLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // LOAN_OTHER_FEE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanOtherFeeText = iprot.readString();
              struct.setLoanOtherFeeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LOAN_OTHER_FEE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanOtherFeeNo = iprot.readString();
              struct.setLoanOtherFeeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // IS_ALLOW_PREPAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAllowPrepay = iprot.readI32();
              struct.setIsAllowPrepayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // IS_ALLOW_PREPAY_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isAllowPrepayText = iprot.readString();
              struct.setIsAllowPrepayTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // IS_RETURN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReturnInterest = iprot.readI32();
              struct.setIsReturnInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // IS_RETURN_INTEREST_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isReturnInterestText = iprot.readString();
              struct.setIsReturnInterestTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PERSON_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.personIds = iprot.readString();
              struct.setPersonIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // BEGIN_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginRequestDttm = iprot.readString();
              struct.setBeginRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // END_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endRequestDttm = iprot.readString();
              struct.setEndRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // ACCT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctTypeText = iprot.readString();
              struct.setAcctTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // CREDTI_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credtiStartDt = iprot.readString();
              struct.setCredtiStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CREDTI_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credtiEndDt = iprot.readString();
              struct.setCredtiEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // IS_HOOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isHoop = iprot.readI32();
              struct.setIsHoopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currency = iprot.readI32();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // DATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateMode = iprot.readI32();
              struct.setDateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // REPAY_FUN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayFun = iprot.readI32();
              struct.setRepayFunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // REPAY_CYCLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycleType = iprot.readI32();
              struct.setRepayCycleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // REPAY_CYCLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycleDate = iprot.readI32();
              struct.setRepayCycleDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycle = iprot.readI32();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // REPAY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayOption = iprot.readI32();
              struct.setRepayOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayDate = iprot.readI32();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // MONTH_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanMgr = iprot.readDouble();
              struct.setMonthLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // MONTH_LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanOtherFee = iprot.readDouble();
              struct.setMonthLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // YEAR_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearLoanInterest = iprot.readDouble();
              struct.setYearLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // YEAR_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearLoanMgr = iprot.readDouble();
              struct.setYearLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // YEAR_LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearLoanOtherFee = iprot.readDouble();
              struct.setYearLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // DAY_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayLoanInterest = iprot.readDouble();
              struct.setDayLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // DAY_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayLoanMgr = iprot.readDouble();
              struct.setDayLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // DAY_LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayLoanOtherFee = iprot.readDouble();
              struct.setDayLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // LIQ_DMG_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.liqDmgProportion = iprot.readDouble();
              struct.setLiqDmgProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // OVERDUE_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueLoanInterest = iprot.readDouble();
              struct.setOverdueLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // OVERDUE_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFineInterest = iprot.readDouble();
              struct.setOverdueFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // MIS_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.misFineInterest = iprot.readDouble();
              struct.setMisFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // PREPAY_LIQ_DMG_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prepayLiqDmgProportion = iprot.readDouble();
              struct.setPrepayLiqDmgProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // CIRCULATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.circulateType = iprot.readI32();
              struct.setCirculateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // ABBREVIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abbreviation = iprot.readString();
              struct.setAbbreviationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // USER_PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userPids = iprot.readString();
              struct.setUserPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // SURVEY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.surveyResult = iprot.readString();
              struct.setSurveyResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // REQUEST_STATUS_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestStatusVal = iprot.readString();
              struct.setRequestStatusValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // ECO_TRADE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecoTradeText = iprot.readString();
              struct.setEcoTradeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecoTrade = iprot.readString();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // ASS_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assWay = iprot.readString();
              struct.setAssWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 82: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 83: // BEGIN_COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginCompleteDttm = iprot.readString();
              struct.setBeginCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 84: // END_COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endCompleteDttm = iprot.readString();
              struct.setEndCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comments = iprot.readString();
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // REPAY_OPTION_TEST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayOptionTest = iprot.readI32();
              struct.setRepayOptionTestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // EACHISSUE_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eachissueOption = iprot.readI32();
              struct.setEachissueOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // FEES_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feesProportion = iprot.readDouble();
              struct.setFeesProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // CREDIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditId = iprot.readI32();
              struct.setCreditIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // EXTENSION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionNum = iprot.readI32();
              struct.setExtensionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // EXTENSION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionAmt = iprot.readDouble();
              struct.setExtensionAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 92: // LIMIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitId = iprot.readI32();
              struct.setLimitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 93: // NOW_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nowUserId = iprot.readI32();
              struct.setNowUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 94: // CREDIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditStatus = iprot.readI32();
              struct.setCreditStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 95: // REPAY_FUN_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayFunText = iprot.readString();
              struct.setRepayFunTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 96: // ASS_WAY_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assWayText = iprot.readString();
              struct.setAssWayTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 97: // JUDGE_REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.judgeRepayCycle = iprot.readI32();
              struct.setJudgeRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 98: // OLD_PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oldProjectId = iprot.readI32();
              struct.setOldProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 99: // PROJECT_GUARANTEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectGuarantee = new ProjectGuarantee();
              struct.projectGuarantee.read(iprot);
              struct.setProjectGuaranteeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // PROJECT_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectProperty = new ProjectProperty();
              struct.projectProperty.read(iprot);
              struct.setProjectPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // PROJECT_FORECLOSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectForeclosure = new ProjectForeclosure();
              struct.projectForeclosure.read(iprot);
              struct.setProjectForeclosureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // BUSINESS_CONTACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessContacts = iprot.readString();
              struct.setBusinessContactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // CONTACTS_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactsPhone = iprot.readString();
              struct.setContactsPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // INNER_OR_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.innerOrOut = iprot.readI32();
              struct.setInnerOrOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // BUSINESS_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessCategory = iprot.readI32();
              struct.setBusinessCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // IS_NOTARIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNotarization = iprot.readI32();
              struct.setIsNotarizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isDelete = iprot.readI32();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = iprot.readI32();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // MANAGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.managers = iprot.readString();
              struct.setManagersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // MANAGERS_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.managersPhone = iprot.readString();
              struct.setManagersPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 115: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 116: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 117: // OLD_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanBank = iprot.readString();
              struct.setOldLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 118: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 119: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 120: // EXTENSION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extensionDate = iprot.readString();
              struct.setExtensionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 121: // EXTENSION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionRate = iprot.readDouble();
              struct.setExtensionRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 122: // BUSINESS_SOURCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSourceNo = iprot.readI32();
              struct.setBusinessSourceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 123: // COLLECT_FILE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collectFileStatus = iprot.readI32();
              struct.setCollectFileStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 124: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 125: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 126: // FORE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.foreList = new ArrayList<ProjectForeInformation>(_list3.size);
                ProjectForeInformation _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new ProjectForeInformation();
                  _elem4.read(iprot);
                  struct.foreList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setForeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 127: // AUDITOR_OPINION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditorOpinion = iprot.readString();
              struct.setAuditorOpinionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 128: // SPECIAL_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specialDesc = iprot.readString();
              struct.setSpecialDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 129: // DECLARATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.declaration = iprot.readString();
              struct.setDeclarationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 130: // IS_SELLER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSeller = iprot.readI32();
              struct.setIsSellerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 131: // REFUND_FILE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundFileStatus = iprot.readI32();
              struct.setRefundFileStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 132: // CHECHAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanDate = iprot.readString();
              struct.setChechanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 133: // CHECHAN_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chechanUserId = iprot.readI32();
              struct.setChechanUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 134: // CHECHAN_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanUserName = iprot.readString();
              struct.setChechanUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 135: // CHECHAN_CAUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanCause = iprot.readString();
              struct.setChechanCauseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 136: // EXTENSION_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionDays = iprot.readI32();
              struct.setExtensionDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 137: // SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceStr = iprot.readString();
              struct.setSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 140: // ORG_CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCustomerName = iprot.readString();
              struct.setOrgCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 141: // ORG_CUSTOMER_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCustomerPhone = iprot.readString();
              struct.setOrgCustomerPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 142: // ORG_CUSTOMER_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCustomerCard = iprot.readString();
              struct.setOrgCustomerCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 143: // PLAN_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planLoanDate = iprot.readString();
              struct.setPlanLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 144: // PLAN_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.planLoanMoney = iprot.readDouble();
              struct.setPlanLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 145: // LOAN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanRate = iprot.readDouble();
              struct.setLoanRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 146: // MAX_LOAN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxLoanRate = iprot.readDouble();
              struct.setMaxLoanRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 147: // IS_CLOSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isClosed = iprot.readI32();
              struct.setIsClosedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 148: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 149: // AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaCode = iprot.readString();
              struct.setAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 150: // APPLY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyUserId = iprot.readI32();
              struct.setApplyUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 151: // IS_NEED_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedHandle = iprot.readI32();
              struct.setIsNeedHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 152: // CANCEL_GUARANTEE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelGuaranteeDate = iprot.readString();
              struct.setCancelGuaranteeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 153: // IS_NEED_FINANCIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedFinancial = iprot.readI32();
              struct.setIsNeedFinancialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 154: // ESTATE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.estateList = new ArrayList<BizProjectEstate>(_list6.size);
                BizProjectEstate _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new BizProjectEstate();
                  _elem7.read(iprot);
                  struct.estateList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setEstateListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 155: // HOUSE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseIds = iprot.readString();
              struct.setHouseIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 156: // IS_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReject = iprot.readI32();
              struct.setIsRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 157: // IS_ASSIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAssigned = iprot.readI32();
              struct.setIsAssignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 158: // RECORD_CLERK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordClerkId = iprot.readI32();
              struct.setRecordClerkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 159: // FORE_AFTER_MONITOR_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreAfterMonitorStatus = iprot.readI32();
              struct.setForeAfterMonitorStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 160: // ORIGINAL_LOAN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.originalLoanList = new ArrayList<BizOriginalLoan>(_list9.size);
                BizOriginalLoan _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new BizOriginalLoan();
                  _elem10.read(iprot);
                  struct.originalLoanList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setOriginalLoanListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 161: // ORIGINAL_LOAN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalLoanIds = iprot.readString();
              struct.setOriginalLoanIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 162: // CUS_ENTERPRISE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusEnterpriseInfo = new com.xlkfinance.bms.rpc.project.CusEnterpriseInfo();
              struct.cusEnterpriseInfo.read(iprot);
              struct.setCusEnterpriseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 163: // CUS_CREDENTIALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusCredentials = new com.xlkfinance.bms.rpc.project.CusCredentials();
              struct.cusCredentials.read(iprot);
              struct.setCusCredentialsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 164: // CUS_CARD_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusCardInfo = new com.xlkfinance.bms.rpc.project.CusCardInfo();
              struct.cusCardInfo.read(iprot);
              struct.setCusCardInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 165: // CAPITAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.capitalName = iprot.readString();
              struct.setCapitalNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 166: // LOAN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanType = iprot.readString();
              struct.setLoanTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 167: // NEXT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextUserId = iprot.readString();
              struct.setNextUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 168: // PRO_CONTACT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proContactIds = iprot.readString();
              struct.setProContactIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Project struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      if (struct.projectTypeText != null) {
        oprot.writeFieldBegin(PROJECT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.projectTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_CATELOG_FIELD_DESC);
      oprot.writeI32(struct.businessCatelog);
      oprot.writeFieldEnd();
      if (struct.businessCatelogText != null) {
        oprot.writeFieldBegin(BUSINESS_CATELOG_TEXT_FIELD_DESC);
        oprot.writeString(struct.businessCatelogText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.businessType);
      oprot.writeFieldEnd();
      if (struct.businessTypeText != null) {
        oprot.writeFieldBegin(BUSINESS_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.businessTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLOW_CATELOG_FIELD_DESC);
      oprot.writeI32(struct.flowCatelog);
      oprot.writeFieldEnd();
      if (struct.flowCatelogText != null) {
        oprot.writeFieldBegin(FLOW_CATELOG_TEXT_FIELD_DESC);
        oprot.writeString(struct.flowCatelogText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.myType);
      oprot.writeFieldEnd();
      if (struct.myTypeText != null) {
        oprot.writeFieldBegin(MY_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.myTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.myMain != null) {
        oprot.writeFieldBegin(MY_MAIN_FIELD_DESC);
        oprot.writeString(struct.myMain);
        oprot.writeFieldEnd();
      }
      if (struct.myMainText != null) {
        oprot.writeFieldBegin(MY_MAIN_TEXT_FIELD_DESC);
        oprot.writeString(struct.myMainText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_INTEREST_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanInterestRecord);
      oprot.writeFieldEnd();
      if (struct.loanInterestRecordText != null) {
        oprot.writeFieldBegin(LOAN_INTEREST_RECORD_TEXT_FIELD_DESC);
        oprot.writeString(struct.loanInterestRecordText);
        oprot.writeFieldEnd();
      }
      if (struct.loanInterestRecordNo != null) {
        oprot.writeFieldBegin(LOAN_INTEREST_RECORD_NO_FIELD_DESC);
        oprot.writeString(struct.loanInterestRecordNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MGR_RECORD_FIELD_DESC);
      oprot.writeI32(struct.loanMgrRecord);
      oprot.writeFieldEnd();
      if (struct.loanMgrRecordText != null) {
        oprot.writeFieldBegin(LOAN_MGR_RECORD_TEXT_FIELD_DESC);
        oprot.writeString(struct.loanMgrRecordText);
        oprot.writeFieldEnd();
      }
      if (struct.loanMgrRecordNo != null) {
        oprot.writeFieldBegin(LOAN_MGR_RECORD_NO_FIELD_DESC);
        oprot.writeString(struct.loanMgrRecordNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeI32(struct.loanOtherFee);
      oprot.writeFieldEnd();
      if (struct.loanOtherFeeText != null) {
        oprot.writeFieldBegin(LOAN_OTHER_FEE_TEXT_FIELD_DESC);
        oprot.writeString(struct.loanOtherFeeText);
        oprot.writeFieldEnd();
      }
      if (struct.loanOtherFeeNo != null) {
        oprot.writeFieldBegin(LOAN_OTHER_FEE_NO_FIELD_DESC);
        oprot.writeString(struct.loanOtherFeeNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ALLOW_PREPAY_FIELD_DESC);
      oprot.writeI32(struct.isAllowPrepay);
      oprot.writeFieldEnd();
      if (struct.isAllowPrepayText != null) {
        oprot.writeFieldBegin(IS_ALLOW_PREPAY_TEXT_FIELD_DESC);
        oprot.writeString(struct.isAllowPrepayText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RETURN_INTEREST_FIELD_DESC);
      oprot.writeI32(struct.isReturnInterest);
      oprot.writeFieldEnd();
      if (struct.isReturnInterestText != null) {
        oprot.writeFieldBegin(IS_RETURN_INTEREST_TEXT_FIELD_DESC);
        oprot.writeString(struct.isReturnInterestText);
        oprot.writeFieldEnd();
      }
      if (struct.personIds != null) {
        oprot.writeFieldBegin(PERSON_IDS_FIELD_DESC);
        oprot.writeString(struct.personIds);
        oprot.writeFieldEnd();
      }
      if (struct.beginRequestDttm != null) {
        oprot.writeFieldBegin(BEGIN_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.beginRequestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.endRequestDttm != null) {
        oprot.writeFieldBegin(END_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.endRequestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      if (struct.acctTypeText != null) {
        oprot.writeFieldBegin(ACCT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.acctTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.credtiStartDt != null) {
        oprot.writeFieldBegin(CREDTI_START_DT_FIELD_DESC);
        oprot.writeString(struct.credtiStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.credtiEndDt != null) {
        oprot.writeFieldBegin(CREDTI_END_DT_FIELD_DESC);
        oprot.writeString(struct.credtiEndDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_HOOP_FIELD_DESC);
      oprot.writeI32(struct.isHoop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeI32(struct.currency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_MODE_FIELD_DESC);
      oprot.writeI32(struct.dateMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_FUN_FIELD_DESC);
      oprot.writeI32(struct.repayFun);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_CYCLE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repayCycleType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_CYCLE_DATE_FIELD_DESC);
      oprot.writeI32(struct.repayCycleDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.repayCycle);
      oprot.writeFieldEnd();
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_OPTION_FIELD_DESC);
      oprot.writeI32(struct.repayOption);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
      oprot.writeI32(struct.repayDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.yearLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.yearLoanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.yearLoanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.dayLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.dayLoanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.dayLoanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIQ_DMG_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.liqDmgProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIS_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.misFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.prepayLiqDmgProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CIRCULATE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.circulateType);
      oprot.writeFieldEnd();
      if (struct.abbreviation != null) {
        oprot.writeFieldBegin(ABBREVIATION_FIELD_DESC);
        oprot.writeString(struct.abbreviation);
        oprot.writeFieldEnd();
      }
      if (struct.userPids != null) {
        oprot.writeFieldBegin(USER_PIDS_FIELD_DESC);
        oprot.writeString(struct.userPids);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      if (struct.surveyResult != null) {
        oprot.writeFieldBegin(SURVEY_RESULT_FIELD_DESC);
        oprot.writeString(struct.surveyResult);
        oprot.writeFieldEnd();
      }
      if (struct.requestStatusVal != null) {
        oprot.writeFieldBegin(REQUEST_STATUS_VAL_FIELD_DESC);
        oprot.writeString(struct.requestStatusVal);
        oprot.writeFieldEnd();
      }
      if (struct.ecoTradeText != null) {
        oprot.writeFieldBegin(ECO_TRADE_TEXT_FIELD_DESC);
        oprot.writeString(struct.ecoTradeText);
        oprot.writeFieldEnd();
      }
      if (struct.ecoTrade != null) {
        oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
        oprot.writeString(struct.ecoTrade);
        oprot.writeFieldEnd();
      }
      if (struct.assWay != null) {
        oprot.writeFieldBegin(ASS_WAY_FIELD_DESC);
        oprot.writeString(struct.assWay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.beginCompleteDttm != null) {
        oprot.writeFieldBegin(BEGIN_COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.beginCompleteDttm);
        oprot.writeFieldEnd();
      }
      if (struct.endCompleteDttm != null) {
        oprot.writeFieldBegin(END_COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.endCompleteDttm);
        oprot.writeFieldEnd();
      }
      if (struct.comments != null) {
        oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
        oprot.writeString(struct.comments);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_OPTION_TEST_FIELD_DESC);
      oprot.writeI32(struct.repayOptionTest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EACHISSUE_OPTION_FIELD_DESC);
      oprot.writeI32(struct.eachissueOption);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEES_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.feesProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_ID_FIELD_DESC);
      oprot.writeI32(struct.creditId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_NUM_FIELD_DESC);
      oprot.writeI32(struct.extensionNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.extensionAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_ID_FIELD_DESC);
      oprot.writeI32(struct.limitId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOW_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.nowUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.creditStatus);
      oprot.writeFieldEnd();
      if (struct.repayFunText != null) {
        oprot.writeFieldBegin(REPAY_FUN_TEXT_FIELD_DESC);
        oprot.writeString(struct.repayFunText);
        oprot.writeFieldEnd();
      }
      if (struct.assWayText != null) {
        oprot.writeFieldBegin(ASS_WAY_TEXT_FIELD_DESC);
        oprot.writeString(struct.assWayText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JUDGE_REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.judgeRepayCycle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.oldProjectId);
      oprot.writeFieldEnd();
      if (struct.projectGuarantee != null) {
        oprot.writeFieldBegin(PROJECT_GUARANTEE_FIELD_DESC);
        struct.projectGuarantee.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.projectProperty != null) {
        oprot.writeFieldBegin(PROJECT_PROPERTY_FIELD_DESC);
        struct.projectProperty.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.projectForeclosure != null) {
        oprot.writeFieldBegin(PROJECT_FORECLOSURE_FIELD_DESC);
        struct.projectForeclosure.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.businessContacts != null) {
        oprot.writeFieldBegin(BUSINESS_CONTACTS_FIELD_DESC);
        oprot.writeString(struct.businessContacts);
        oprot.writeFieldEnd();
      }
      if (struct.contactsPhone != null) {
        oprot.writeFieldBegin(CONTACTS_PHONE_FIELD_DESC);
        oprot.writeString(struct.contactsPhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INNER_OR_OUT_FIELD_DESC);
      oprot.writeI32(struct.innerOrOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.businessCategory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NOTARIZATION_FIELD_DESC);
      oprot.writeI32(struct.isNotarization);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
      oprot.writeI32(struct.isDelete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.productType);
      oprot.writeFieldEnd();
      if (struct.managers != null) {
        oprot.writeFieldBegin(MANAGERS_FIELD_DESC);
        oprot.writeString(struct.managers);
        oprot.writeFieldEnd();
      }
      if (struct.managersPhone != null) {
        oprot.writeFieldBegin(MANAGERS_PHONE_FIELD_DESC);
        oprot.writeString(struct.managersPhone);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter12 : struct.userIds)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      if (struct.oldLoanBank != null) {
        oprot.writeFieldBegin(OLD_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.oldLoanBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      if (struct.extensionDate != null) {
        oprot.writeFieldBegin(EXTENSION_DATE_FIELD_DESC);
        oprot.writeString(struct.extensionDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXTENSION_RATE_FIELD_DESC);
      oprot.writeDouble(struct.extensionRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_SOURCE_NO_FIELD_DESC);
      oprot.writeI32(struct.businessSourceNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECT_FILE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.collectFileStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.foreList != null) {
        oprot.writeFieldBegin(FORE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foreList.size()));
          for (ProjectForeInformation _iter13 : struct.foreList)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.auditorOpinion != null) {
        oprot.writeFieldBegin(AUDITOR_OPINION_FIELD_DESC);
        oprot.writeString(struct.auditorOpinion);
        oprot.writeFieldEnd();
      }
      if (struct.specialDesc != null) {
        oprot.writeFieldBegin(SPECIAL_DESC_FIELD_DESC);
        oprot.writeString(struct.specialDesc);
        oprot.writeFieldEnd();
      }
      if (struct.declaration != null) {
        oprot.writeFieldBegin(DECLARATION_FIELD_DESC);
        oprot.writeString(struct.declaration);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_SELLER_FIELD_DESC);
      oprot.writeI32(struct.isSeller);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_FILE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.refundFileStatus);
      oprot.writeFieldEnd();
      if (struct.chechanDate != null) {
        oprot.writeFieldBegin(CHECHAN_DATE_FIELD_DESC);
        oprot.writeString(struct.chechanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECHAN_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.chechanUserId);
      oprot.writeFieldEnd();
      if (struct.chechanUserName != null) {
        oprot.writeFieldBegin(CHECHAN_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.chechanUserName);
        oprot.writeFieldEnd();
      }
      if (struct.chechanCause != null) {
        oprot.writeFieldBegin(CHECHAN_CAUSE_FIELD_DESC);
        oprot.writeString(struct.chechanCause);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXTENSION_DAYS_FIELD_DESC);
      oprot.writeI32(struct.extensionDays);
      oprot.writeFieldEnd();
      if (struct.sourceStr != null) {
        oprot.writeFieldBegin(SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.sourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.orgCustomerName != null) {
        oprot.writeFieldBegin(ORG_CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.orgCustomerName);
        oprot.writeFieldEnd();
      }
      if (struct.orgCustomerPhone != null) {
        oprot.writeFieldBegin(ORG_CUSTOMER_PHONE_FIELD_DESC);
        oprot.writeString(struct.orgCustomerPhone);
        oprot.writeFieldEnd();
      }
      if (struct.orgCustomerCard != null) {
        oprot.writeFieldBegin(ORG_CUSTOMER_CARD_FIELD_DESC);
        oprot.writeString(struct.orgCustomerCard);
        oprot.writeFieldEnd();
      }
      if (struct.planLoanDate != null) {
        oprot.writeFieldBegin(PLAN_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.planLoanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.planLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.loanRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_LOAN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.maxLoanRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
      oprot.writeI32(struct.isClosed);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.areaCode != null) {
        oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
        oprot.writeString(struct.areaCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.applyUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NEED_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.isNeedHandle);
      oprot.writeFieldEnd();
      if (struct.cancelGuaranteeDate != null) {
        oprot.writeFieldBegin(CANCEL_GUARANTEE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelGuaranteeDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_NEED_FINANCIAL_FIELD_DESC);
      oprot.writeI32(struct.isNeedFinancial);
      oprot.writeFieldEnd();
      if (struct.estateList != null) {
        oprot.writeFieldBegin(ESTATE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.estateList.size()));
          for (BizProjectEstate _iter14 : struct.estateList)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.houseIds != null) {
        oprot.writeFieldBegin(HOUSE_IDS_FIELD_DESC);
        oprot.writeString(struct.houseIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_REJECT_FIELD_DESC);
      oprot.writeI32(struct.isReject);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ASSIGNED_FIELD_DESC);
      oprot.writeI32(struct.isAssigned);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_CLERK_ID_FIELD_DESC);
      oprot.writeI32(struct.recordClerkId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORE_AFTER_MONITOR_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreAfterMonitorStatus);
      oprot.writeFieldEnd();
      if (struct.originalLoanList != null) {
        oprot.writeFieldBegin(ORIGINAL_LOAN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.originalLoanList.size()));
          for (BizOriginalLoan _iter15 : struct.originalLoanList)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.originalLoanIds != null) {
        oprot.writeFieldBegin(ORIGINAL_LOAN_IDS_FIELD_DESC);
        oprot.writeString(struct.originalLoanIds);
        oprot.writeFieldEnd();
      }
      if (struct.cusEnterpriseInfo != null) {
        oprot.writeFieldBegin(CUS_ENTERPRISE_INFO_FIELD_DESC);
        struct.cusEnterpriseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusCredentials != null) {
        oprot.writeFieldBegin(CUS_CREDENTIALS_FIELD_DESC);
        struct.cusCredentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusCardInfo != null) {
        oprot.writeFieldBegin(CUS_CARD_INFO_FIELD_DESC);
        struct.cusCardInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.capitalName != null) {
        oprot.writeFieldBegin(CAPITAL_NAME_FIELD_DESC);
        oprot.writeString(struct.capitalName);
        oprot.writeFieldEnd();
      }
      if (struct.loanType != null) {
        oprot.writeFieldBegin(LOAN_TYPE_FIELD_DESC);
        oprot.writeString(struct.loanType);
        oprot.writeFieldEnd();
      }
      if (struct.nextUserId != null) {
        oprot.writeFieldBegin(NEXT_USER_ID_FIELD_DESC);
        oprot.writeString(struct.nextUserId);
        oprot.writeFieldEnd();
      }
      if (struct.proContactIds != null) {
        oprot.writeFieldBegin(PRO_CONTACT_IDS_FIELD_DESC);
        oprot.writeString(struct.proContactIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectTupleSchemeFactory implements SchemeFactory {
    public ProjectTupleScheme getScheme() {
      return new ProjectTupleScheme();
    }
  }

  private static class ProjectTupleScheme extends TupleScheme<Project> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Project struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAcctId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectType()) {
        optionals.set(2);
      }
      if (struct.isSetProjectTypeText()) {
        optionals.set(3);
      }
      if (struct.isSetProjectName()) {
        optionals.set(4);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(5);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(6);
      }
      if (struct.isSetRealName()) {
        optionals.set(7);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(8);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(9);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetBusinessCatelog()) {
        optionals.set(12);
      }
      if (struct.isSetBusinessCatelogText()) {
        optionals.set(13);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(14);
      }
      if (struct.isSetBusinessTypeText()) {
        optionals.set(15);
      }
      if (struct.isSetFlowCatelog()) {
        optionals.set(16);
      }
      if (struct.isSetFlowCatelogText()) {
        optionals.set(17);
      }
      if (struct.isSetMyType()) {
        optionals.set(18);
      }
      if (struct.isSetMyTypeText()) {
        optionals.set(19);
      }
      if (struct.isSetMyMain()) {
        optionals.set(20);
      }
      if (struct.isSetMyMainText()) {
        optionals.set(21);
      }
      if (struct.isSetLoanInterestRecord()) {
        optionals.set(22);
      }
      if (struct.isSetLoanInterestRecordText()) {
        optionals.set(23);
      }
      if (struct.isSetLoanInterestRecordNo()) {
        optionals.set(24);
      }
      if (struct.isSetLoanMgrRecord()) {
        optionals.set(25);
      }
      if (struct.isSetLoanMgrRecordText()) {
        optionals.set(26);
      }
      if (struct.isSetLoanMgrRecordNo()) {
        optionals.set(27);
      }
      if (struct.isSetLoanOtherFee()) {
        optionals.set(28);
      }
      if (struct.isSetLoanOtherFeeText()) {
        optionals.set(29);
      }
      if (struct.isSetLoanOtherFeeNo()) {
        optionals.set(30);
      }
      if (struct.isSetIsAllowPrepay()) {
        optionals.set(31);
      }
      if (struct.isSetIsAllowPrepayText()) {
        optionals.set(32);
      }
      if (struct.isSetIsReturnInterest()) {
        optionals.set(33);
      }
      if (struct.isSetIsReturnInterestText()) {
        optionals.set(34);
      }
      if (struct.isSetPersonIds()) {
        optionals.set(35);
      }
      if (struct.isSetBeginRequestDttm()) {
        optionals.set(36);
      }
      if (struct.isSetEndRequestDttm()) {
        optionals.set(37);
      }
      if (struct.isSetAcctName()) {
        optionals.set(38);
      }
      if (struct.isSetAcctType()) {
        optionals.set(39);
      }
      if (struct.isSetAcctTypeText()) {
        optionals.set(40);
      }
      if (struct.isSetCredtiStartDt()) {
        optionals.set(41);
      }
      if (struct.isSetCredtiEndDt()) {
        optionals.set(42);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(43);
      }
      if (struct.isSetIsHoop()) {
        optionals.set(44);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(45);
      }
      if (struct.isSetCurrency()) {
        optionals.set(46);
      }
      if (struct.isSetDateMode()) {
        optionals.set(47);
      }
      if (struct.isSetRepayFun()) {
        optionals.set(48);
      }
      if (struct.isSetRepayCycleType()) {
        optionals.set(49);
      }
      if (struct.isSetRepayCycleDate()) {
        optionals.set(50);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(51);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(52);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(53);
      }
      if (struct.isSetRepayOption()) {
        optionals.set(54);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(55);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(56);
      }
      if (struct.isSetMonthLoanMgr()) {
        optionals.set(57);
      }
      if (struct.isSetMonthLoanOtherFee()) {
        optionals.set(58);
      }
      if (struct.isSetYearLoanInterest()) {
        optionals.set(59);
      }
      if (struct.isSetYearLoanMgr()) {
        optionals.set(60);
      }
      if (struct.isSetYearLoanOtherFee()) {
        optionals.set(61);
      }
      if (struct.isSetDayLoanInterest()) {
        optionals.set(62);
      }
      if (struct.isSetDayLoanMgr()) {
        optionals.set(63);
      }
      if (struct.isSetDayLoanOtherFee()) {
        optionals.set(64);
      }
      if (struct.isSetLiqDmgProportion()) {
        optionals.set(65);
      }
      if (struct.isSetOverdueLoanInterest()) {
        optionals.set(66);
      }
      if (struct.isSetOverdueFineInterest()) {
        optionals.set(67);
      }
      if (struct.isSetMisFineInterest()) {
        optionals.set(68);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        optionals.set(69);
      }
      if (struct.isSetCirculateType()) {
        optionals.set(70);
      }
      if (struct.isSetAbbreviation()) {
        optionals.set(71);
      }
      if (struct.isSetUserPids()) {
        optionals.set(72);
      }
      if (struct.isSetCusType()) {
        optionals.set(73);
      }
      if (struct.isSetSurveyResult()) {
        optionals.set(74);
      }
      if (struct.isSetRequestStatusVal()) {
        optionals.set(75);
      }
      if (struct.isSetEcoTradeText()) {
        optionals.set(76);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(77);
      }
      if (struct.isSetAssWay()) {
        optionals.set(78);
      }
      if (struct.isSetLoanId()) {
        optionals.set(79);
      }
      if (struct.isSetPage()) {
        optionals.set(80);
      }
      if (struct.isSetRows()) {
        optionals.set(81);
      }
      if (struct.isSetBeginCompleteDttm()) {
        optionals.set(82);
      }
      if (struct.isSetEndCompleteDttm()) {
        optionals.set(83);
      }
      if (struct.isSetComments()) {
        optionals.set(84);
      }
      if (struct.isSetRepayOptionTest()) {
        optionals.set(85);
      }
      if (struct.isSetEachissueOption()) {
        optionals.set(86);
      }
      if (struct.isSetFeesProportion()) {
        optionals.set(87);
      }
      if (struct.isSetCreditId()) {
        optionals.set(88);
      }
      if (struct.isSetExtensionNum()) {
        optionals.set(89);
      }
      if (struct.isSetExtensionAmt()) {
        optionals.set(90);
      }
      if (struct.isSetLimitId()) {
        optionals.set(91);
      }
      if (struct.isSetNowUserId()) {
        optionals.set(92);
      }
      if (struct.isSetCreditStatus()) {
        optionals.set(93);
      }
      if (struct.isSetRepayFunText()) {
        optionals.set(94);
      }
      if (struct.isSetAssWayText()) {
        optionals.set(95);
      }
      if (struct.isSetJudgeRepayCycle()) {
        optionals.set(96);
      }
      if (struct.isSetOldProjectId()) {
        optionals.set(97);
      }
      if (struct.isSetProjectGuarantee()) {
        optionals.set(98);
      }
      if (struct.isSetProjectProperty()) {
        optionals.set(99);
      }
      if (struct.isSetProjectForeclosure()) {
        optionals.set(100);
      }
      if (struct.isSetProductId()) {
        optionals.set(101);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(102);
      }
      if (struct.isSetAddress()) {
        optionals.set(103);
      }
      if (struct.isSetBusinessContacts()) {
        optionals.set(104);
      }
      if (struct.isSetContactsPhone()) {
        optionals.set(105);
      }
      if (struct.isSetInnerOrOut()) {
        optionals.set(106);
      }
      if (struct.isSetBusinessCategory()) {
        optionals.set(107);
      }
      if (struct.isSetIsNotarization()) {
        optionals.set(108);
      }
      if (struct.isSetIsDelete()) {
        optionals.set(109);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(110);
      }
      if (struct.isSetProductType()) {
        optionals.set(111);
      }
      if (struct.isSetManagers()) {
        optionals.set(112);
      }
      if (struct.isSetManagersPhone()) {
        optionals.set(113);
      }
      if (struct.isSetUserIds()) {
        optionals.set(114);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(115);
      }
      if (struct.isSetOldLoanBank()) {
        optionals.set(116);
      }
      if (struct.isSetOrgId()) {
        optionals.set(117);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(118);
      }
      if (struct.isSetExtensionDate()) {
        optionals.set(119);
      }
      if (struct.isSetExtensionRate()) {
        optionals.set(120);
      }
      if (struct.isSetBusinessSourceNo()) {
        optionals.set(121);
      }
      if (struct.isSetCollectFileStatus()) {
        optionals.set(122);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(123);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(124);
      }
      if (struct.isSetForeList()) {
        optionals.set(125);
      }
      if (struct.isSetAuditorOpinion()) {
        optionals.set(126);
      }
      if (struct.isSetSpecialDesc()) {
        optionals.set(127);
      }
      if (struct.isSetDeclaration()) {
        optionals.set(128);
      }
      if (struct.isSetIsSeller()) {
        optionals.set(129);
      }
      if (struct.isSetRefundFileStatus()) {
        optionals.set(130);
      }
      if (struct.isSetChechanDate()) {
        optionals.set(131);
      }
      if (struct.isSetChechanUserId()) {
        optionals.set(132);
      }
      if (struct.isSetChechanUserName()) {
        optionals.set(133);
      }
      if (struct.isSetChechanCause()) {
        optionals.set(134);
      }
      if (struct.isSetExtensionDays()) {
        optionals.set(135);
      }
      if (struct.isSetSourceStr()) {
        optionals.set(136);
      }
      if (struct.isSetOrgCustomerName()) {
        optionals.set(137);
      }
      if (struct.isSetOrgCustomerPhone()) {
        optionals.set(138);
      }
      if (struct.isSetOrgCustomerCard()) {
        optionals.set(139);
      }
      if (struct.isSetPlanLoanDate()) {
        optionals.set(140);
      }
      if (struct.isSetPlanLoanMoney()) {
        optionals.set(141);
      }
      if (struct.isSetLoanRate()) {
        optionals.set(142);
      }
      if (struct.isSetMaxLoanRate()) {
        optionals.set(143);
      }
      if (struct.isSetIsClosed()) {
        optionals.set(144);
      }
      if (struct.isSetOrgName()) {
        optionals.set(145);
      }
      if (struct.isSetAreaCode()) {
        optionals.set(146);
      }
      if (struct.isSetApplyUserId()) {
        optionals.set(147);
      }
      if (struct.isSetIsNeedHandle()) {
        optionals.set(148);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        optionals.set(149);
      }
      if (struct.isSetIsNeedFinancial()) {
        optionals.set(150);
      }
      if (struct.isSetEstateList()) {
        optionals.set(151);
      }
      if (struct.isSetHouseIds()) {
        optionals.set(152);
      }
      if (struct.isSetIsReject()) {
        optionals.set(153);
      }
      if (struct.isSetIsAssigned()) {
        optionals.set(154);
      }
      if (struct.isSetRecordClerkId()) {
        optionals.set(155);
      }
      if (struct.isSetForeAfterMonitorStatus()) {
        optionals.set(156);
      }
      if (struct.isSetOriginalLoanList()) {
        optionals.set(157);
      }
      if (struct.isSetOriginalLoanIds()) {
        optionals.set(158);
      }
      if (struct.isSetCusEnterpriseInfo()) {
        optionals.set(159);
      }
      if (struct.isSetCusCredentials()) {
        optionals.set(160);
      }
      if (struct.isSetCusCardInfo()) {
        optionals.set(161);
      }
      if (struct.isSetCapitalName()) {
        optionals.set(162);
      }
      if (struct.isSetLoanType()) {
        optionals.set(163);
      }
      if (struct.isSetNextUserId()) {
        optionals.set(164);
      }
      if (struct.isSetProContactIds()) {
        optionals.set(165);
      }
      oprot.writeBitSet(optionals, 166);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
      if (struct.isSetProjectTypeText()) {
        oprot.writeString(struct.projectTypeText);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetBusinessCatelog()) {
        oprot.writeI32(struct.businessCatelog);
      }
      if (struct.isSetBusinessCatelogText()) {
        oprot.writeString(struct.businessCatelogText);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeI32(struct.businessType);
      }
      if (struct.isSetBusinessTypeText()) {
        oprot.writeString(struct.businessTypeText);
      }
      if (struct.isSetFlowCatelog()) {
        oprot.writeI32(struct.flowCatelog);
      }
      if (struct.isSetFlowCatelogText()) {
        oprot.writeString(struct.flowCatelogText);
      }
      if (struct.isSetMyType()) {
        oprot.writeI32(struct.myType);
      }
      if (struct.isSetMyTypeText()) {
        oprot.writeString(struct.myTypeText);
      }
      if (struct.isSetMyMain()) {
        oprot.writeString(struct.myMain);
      }
      if (struct.isSetMyMainText()) {
        oprot.writeString(struct.myMainText);
      }
      if (struct.isSetLoanInterestRecord()) {
        oprot.writeI32(struct.loanInterestRecord);
      }
      if (struct.isSetLoanInterestRecordText()) {
        oprot.writeString(struct.loanInterestRecordText);
      }
      if (struct.isSetLoanInterestRecordNo()) {
        oprot.writeString(struct.loanInterestRecordNo);
      }
      if (struct.isSetLoanMgrRecord()) {
        oprot.writeI32(struct.loanMgrRecord);
      }
      if (struct.isSetLoanMgrRecordText()) {
        oprot.writeString(struct.loanMgrRecordText);
      }
      if (struct.isSetLoanMgrRecordNo()) {
        oprot.writeString(struct.loanMgrRecordNo);
      }
      if (struct.isSetLoanOtherFee()) {
        oprot.writeI32(struct.loanOtherFee);
      }
      if (struct.isSetLoanOtherFeeText()) {
        oprot.writeString(struct.loanOtherFeeText);
      }
      if (struct.isSetLoanOtherFeeNo()) {
        oprot.writeString(struct.loanOtherFeeNo);
      }
      if (struct.isSetIsAllowPrepay()) {
        oprot.writeI32(struct.isAllowPrepay);
      }
      if (struct.isSetIsAllowPrepayText()) {
        oprot.writeString(struct.isAllowPrepayText);
      }
      if (struct.isSetIsReturnInterest()) {
        oprot.writeI32(struct.isReturnInterest);
      }
      if (struct.isSetIsReturnInterestText()) {
        oprot.writeString(struct.isReturnInterestText);
      }
      if (struct.isSetPersonIds()) {
        oprot.writeString(struct.personIds);
      }
      if (struct.isSetBeginRequestDttm()) {
        oprot.writeString(struct.beginRequestDttm);
      }
      if (struct.isSetEndRequestDttm()) {
        oprot.writeString(struct.endRequestDttm);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
      if (struct.isSetAcctTypeText()) {
        oprot.writeString(struct.acctTypeText);
      }
      if (struct.isSetCredtiStartDt()) {
        oprot.writeString(struct.credtiStartDt);
      }
      if (struct.isSetCredtiEndDt()) {
        oprot.writeString(struct.credtiEndDt);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetIsHoop()) {
        oprot.writeI32(struct.isHoop);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetCurrency()) {
        oprot.writeI32(struct.currency);
      }
      if (struct.isSetDateMode()) {
        oprot.writeI32(struct.dateMode);
      }
      if (struct.isSetRepayFun()) {
        oprot.writeI32(struct.repayFun);
      }
      if (struct.isSetRepayCycleType()) {
        oprot.writeI32(struct.repayCycleType);
      }
      if (struct.isSetRepayCycleDate()) {
        oprot.writeI32(struct.repayCycleDate);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeI32(struct.repayCycle);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetRepayOption()) {
        oprot.writeI32(struct.repayOption);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeI32(struct.repayDate);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetMonthLoanMgr()) {
        oprot.writeDouble(struct.monthLoanMgr);
      }
      if (struct.isSetMonthLoanOtherFee()) {
        oprot.writeDouble(struct.monthLoanOtherFee);
      }
      if (struct.isSetYearLoanInterest()) {
        oprot.writeDouble(struct.yearLoanInterest);
      }
      if (struct.isSetYearLoanMgr()) {
        oprot.writeDouble(struct.yearLoanMgr);
      }
      if (struct.isSetYearLoanOtherFee()) {
        oprot.writeDouble(struct.yearLoanOtherFee);
      }
      if (struct.isSetDayLoanInterest()) {
        oprot.writeDouble(struct.dayLoanInterest);
      }
      if (struct.isSetDayLoanMgr()) {
        oprot.writeDouble(struct.dayLoanMgr);
      }
      if (struct.isSetDayLoanOtherFee()) {
        oprot.writeDouble(struct.dayLoanOtherFee);
      }
      if (struct.isSetLiqDmgProportion()) {
        oprot.writeDouble(struct.liqDmgProportion);
      }
      if (struct.isSetOverdueLoanInterest()) {
        oprot.writeDouble(struct.overdueLoanInterest);
      }
      if (struct.isSetOverdueFineInterest()) {
        oprot.writeDouble(struct.overdueFineInterest);
      }
      if (struct.isSetMisFineInterest()) {
        oprot.writeDouble(struct.misFineInterest);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        oprot.writeDouble(struct.prepayLiqDmgProportion);
      }
      if (struct.isSetCirculateType()) {
        oprot.writeI32(struct.circulateType);
      }
      if (struct.isSetAbbreviation()) {
        oprot.writeString(struct.abbreviation);
      }
      if (struct.isSetUserPids()) {
        oprot.writeString(struct.userPids);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetSurveyResult()) {
        oprot.writeString(struct.surveyResult);
      }
      if (struct.isSetRequestStatusVal()) {
        oprot.writeString(struct.requestStatusVal);
      }
      if (struct.isSetEcoTradeText()) {
        oprot.writeString(struct.ecoTradeText);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeString(struct.ecoTrade);
      }
      if (struct.isSetAssWay()) {
        oprot.writeString(struct.assWay);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetBeginCompleteDttm()) {
        oprot.writeString(struct.beginCompleteDttm);
      }
      if (struct.isSetEndCompleteDttm()) {
        oprot.writeString(struct.endCompleteDttm);
      }
      if (struct.isSetComments()) {
        oprot.writeString(struct.comments);
      }
      if (struct.isSetRepayOptionTest()) {
        oprot.writeI32(struct.repayOptionTest);
      }
      if (struct.isSetEachissueOption()) {
        oprot.writeI32(struct.eachissueOption);
      }
      if (struct.isSetFeesProportion()) {
        oprot.writeDouble(struct.feesProportion);
      }
      if (struct.isSetCreditId()) {
        oprot.writeI32(struct.creditId);
      }
      if (struct.isSetExtensionNum()) {
        oprot.writeI32(struct.extensionNum);
      }
      if (struct.isSetExtensionAmt()) {
        oprot.writeDouble(struct.extensionAmt);
      }
      if (struct.isSetLimitId()) {
        oprot.writeI32(struct.limitId);
      }
      if (struct.isSetNowUserId()) {
        oprot.writeI32(struct.nowUserId);
      }
      if (struct.isSetCreditStatus()) {
        oprot.writeI32(struct.creditStatus);
      }
      if (struct.isSetRepayFunText()) {
        oprot.writeString(struct.repayFunText);
      }
      if (struct.isSetAssWayText()) {
        oprot.writeString(struct.assWayText);
      }
      if (struct.isSetJudgeRepayCycle()) {
        oprot.writeI32(struct.judgeRepayCycle);
      }
      if (struct.isSetOldProjectId()) {
        oprot.writeI32(struct.oldProjectId);
      }
      if (struct.isSetProjectGuarantee()) {
        struct.projectGuarantee.write(oprot);
      }
      if (struct.isSetProjectProperty()) {
        struct.projectProperty.write(oprot);
      }
      if (struct.isSetProjectForeclosure()) {
        struct.projectForeclosure.write(oprot);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetBusinessContacts()) {
        oprot.writeString(struct.businessContacts);
      }
      if (struct.isSetContactsPhone()) {
        oprot.writeString(struct.contactsPhone);
      }
      if (struct.isSetInnerOrOut()) {
        oprot.writeI32(struct.innerOrOut);
      }
      if (struct.isSetBusinessCategory()) {
        oprot.writeI32(struct.businessCategory);
      }
      if (struct.isSetIsNotarization()) {
        oprot.writeI32(struct.isNotarization);
      }
      if (struct.isSetIsDelete()) {
        oprot.writeI32(struct.isDelete);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType);
      }
      if (struct.isSetManagers()) {
        oprot.writeString(struct.managers);
      }
      if (struct.isSetManagersPhone()) {
        oprot.writeString(struct.managersPhone);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter16 : struct.userIds)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetOldLoanBank()) {
        oprot.writeString(struct.oldLoanBank);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetExtensionDate()) {
        oprot.writeString(struct.extensionDate);
      }
      if (struct.isSetExtensionRate()) {
        oprot.writeDouble(struct.extensionRate);
      }
      if (struct.isSetBusinessSourceNo()) {
        oprot.writeI32(struct.businessSourceNo);
      }
      if (struct.isSetCollectFileStatus()) {
        oprot.writeI32(struct.collectFileStatus);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetForeList()) {
        {
          oprot.writeI32(struct.foreList.size());
          for (ProjectForeInformation _iter17 : struct.foreList)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetAuditorOpinion()) {
        oprot.writeString(struct.auditorOpinion);
      }
      if (struct.isSetSpecialDesc()) {
        oprot.writeString(struct.specialDesc);
      }
      if (struct.isSetDeclaration()) {
        oprot.writeString(struct.declaration);
      }
      if (struct.isSetIsSeller()) {
        oprot.writeI32(struct.isSeller);
      }
      if (struct.isSetRefundFileStatus()) {
        oprot.writeI32(struct.refundFileStatus);
      }
      if (struct.isSetChechanDate()) {
        oprot.writeString(struct.chechanDate);
      }
      if (struct.isSetChechanUserId()) {
        oprot.writeI32(struct.chechanUserId);
      }
      if (struct.isSetChechanUserName()) {
        oprot.writeString(struct.chechanUserName);
      }
      if (struct.isSetChechanCause()) {
        oprot.writeString(struct.chechanCause);
      }
      if (struct.isSetExtensionDays()) {
        oprot.writeI32(struct.extensionDays);
      }
      if (struct.isSetSourceStr()) {
        oprot.writeString(struct.sourceStr);
      }
      if (struct.isSetOrgCustomerName()) {
        oprot.writeString(struct.orgCustomerName);
      }
      if (struct.isSetOrgCustomerPhone()) {
        oprot.writeString(struct.orgCustomerPhone);
      }
      if (struct.isSetOrgCustomerCard()) {
        oprot.writeString(struct.orgCustomerCard);
      }
      if (struct.isSetPlanLoanDate()) {
        oprot.writeString(struct.planLoanDate);
      }
      if (struct.isSetPlanLoanMoney()) {
        oprot.writeDouble(struct.planLoanMoney);
      }
      if (struct.isSetLoanRate()) {
        oprot.writeDouble(struct.loanRate);
      }
      if (struct.isSetMaxLoanRate()) {
        oprot.writeDouble(struct.maxLoanRate);
      }
      if (struct.isSetIsClosed()) {
        oprot.writeI32(struct.isClosed);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetAreaCode()) {
        oprot.writeString(struct.areaCode);
      }
      if (struct.isSetApplyUserId()) {
        oprot.writeI32(struct.applyUserId);
      }
      if (struct.isSetIsNeedHandle()) {
        oprot.writeI32(struct.isNeedHandle);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        oprot.writeString(struct.cancelGuaranteeDate);
      }
      if (struct.isSetIsNeedFinancial()) {
        oprot.writeI32(struct.isNeedFinancial);
      }
      if (struct.isSetEstateList()) {
        {
          oprot.writeI32(struct.estateList.size());
          for (BizProjectEstate _iter18 : struct.estateList)
          {
            _iter18.write(oprot);
          }
        }
      }
      if (struct.isSetHouseIds()) {
        oprot.writeString(struct.houseIds);
      }
      if (struct.isSetIsReject()) {
        oprot.writeI32(struct.isReject);
      }
      if (struct.isSetIsAssigned()) {
        oprot.writeI32(struct.isAssigned);
      }
      if (struct.isSetRecordClerkId()) {
        oprot.writeI32(struct.recordClerkId);
      }
      if (struct.isSetForeAfterMonitorStatus()) {
        oprot.writeI32(struct.foreAfterMonitorStatus);
      }
      if (struct.isSetOriginalLoanList()) {
        {
          oprot.writeI32(struct.originalLoanList.size());
          for (BizOriginalLoan _iter19 : struct.originalLoanList)
          {
            _iter19.write(oprot);
          }
        }
      }
      if (struct.isSetOriginalLoanIds()) {
        oprot.writeString(struct.originalLoanIds);
      }
      if (struct.isSetCusEnterpriseInfo()) {
        struct.cusEnterpriseInfo.write(oprot);
      }
      if (struct.isSetCusCredentials()) {
        struct.cusCredentials.write(oprot);
      }
      if (struct.isSetCusCardInfo()) {
        struct.cusCardInfo.write(oprot);
      }
      if (struct.isSetCapitalName()) {
        oprot.writeString(struct.capitalName);
      }
      if (struct.isSetLoanType()) {
        oprot.writeString(struct.loanType);
      }
      if (struct.isSetNextUserId()) {
        oprot.writeString(struct.nextUserId);
      }
      if (struct.isSetProContactIds()) {
        oprot.writeString(struct.proContactIds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Project struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(166);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectTypeText = iprot.readString();
        struct.setProjectTypeTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(10)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.businessCatelog = iprot.readI32();
        struct.setBusinessCatelogIsSet(true);
      }
      if (incoming.get(13)) {
        struct.businessCatelogText = iprot.readString();
        struct.setBusinessCatelogTextIsSet(true);
      }
      if (incoming.get(14)) {
        struct.businessType = iprot.readI32();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.businessTypeText = iprot.readString();
        struct.setBusinessTypeTextIsSet(true);
      }
      if (incoming.get(16)) {
        struct.flowCatelog = iprot.readI32();
        struct.setFlowCatelogIsSet(true);
      }
      if (incoming.get(17)) {
        struct.flowCatelogText = iprot.readString();
        struct.setFlowCatelogTextIsSet(true);
      }
      if (incoming.get(18)) {
        struct.myType = iprot.readI32();
        struct.setMyTypeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.myTypeText = iprot.readString();
        struct.setMyTypeTextIsSet(true);
      }
      if (incoming.get(20)) {
        struct.myMain = iprot.readString();
        struct.setMyMainIsSet(true);
      }
      if (incoming.get(21)) {
        struct.myMainText = iprot.readString();
        struct.setMyMainTextIsSet(true);
      }
      if (incoming.get(22)) {
        struct.loanInterestRecord = iprot.readI32();
        struct.setLoanInterestRecordIsSet(true);
      }
      if (incoming.get(23)) {
        struct.loanInterestRecordText = iprot.readString();
        struct.setLoanInterestRecordTextIsSet(true);
      }
      if (incoming.get(24)) {
        struct.loanInterestRecordNo = iprot.readString();
        struct.setLoanInterestRecordNoIsSet(true);
      }
      if (incoming.get(25)) {
        struct.loanMgrRecord = iprot.readI32();
        struct.setLoanMgrRecordIsSet(true);
      }
      if (incoming.get(26)) {
        struct.loanMgrRecordText = iprot.readString();
        struct.setLoanMgrRecordTextIsSet(true);
      }
      if (incoming.get(27)) {
        struct.loanMgrRecordNo = iprot.readString();
        struct.setLoanMgrRecordNoIsSet(true);
      }
      if (incoming.get(28)) {
        struct.loanOtherFee = iprot.readI32();
        struct.setLoanOtherFeeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.loanOtherFeeText = iprot.readString();
        struct.setLoanOtherFeeTextIsSet(true);
      }
      if (incoming.get(30)) {
        struct.loanOtherFeeNo = iprot.readString();
        struct.setLoanOtherFeeNoIsSet(true);
      }
      if (incoming.get(31)) {
        struct.isAllowPrepay = iprot.readI32();
        struct.setIsAllowPrepayIsSet(true);
      }
      if (incoming.get(32)) {
        struct.isAllowPrepayText = iprot.readString();
        struct.setIsAllowPrepayTextIsSet(true);
      }
      if (incoming.get(33)) {
        struct.isReturnInterest = iprot.readI32();
        struct.setIsReturnInterestIsSet(true);
      }
      if (incoming.get(34)) {
        struct.isReturnInterestText = iprot.readString();
        struct.setIsReturnInterestTextIsSet(true);
      }
      if (incoming.get(35)) {
        struct.personIds = iprot.readString();
        struct.setPersonIdsIsSet(true);
      }
      if (incoming.get(36)) {
        struct.beginRequestDttm = iprot.readString();
        struct.setBeginRequestDttmIsSet(true);
      }
      if (incoming.get(37)) {
        struct.endRequestDttm = iprot.readString();
        struct.setEndRequestDttmIsSet(true);
      }
      if (incoming.get(38)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(39)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.acctTypeText = iprot.readString();
        struct.setAcctTypeTextIsSet(true);
      }
      if (incoming.get(41)) {
        struct.credtiStartDt = iprot.readString();
        struct.setCredtiStartDtIsSet(true);
      }
      if (incoming.get(42)) {
        struct.credtiEndDt = iprot.readString();
        struct.setCredtiEndDtIsSet(true);
      }
      if (incoming.get(43)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(44)) {
        struct.isHoop = iprot.readI32();
        struct.setIsHoopIsSet(true);
      }
      if (incoming.get(45)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(46)) {
        struct.currency = iprot.readI32();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(47)) {
        struct.dateMode = iprot.readI32();
        struct.setDateModeIsSet(true);
      }
      if (incoming.get(48)) {
        struct.repayFun = iprot.readI32();
        struct.setRepayFunIsSet(true);
      }
      if (incoming.get(49)) {
        struct.repayCycleType = iprot.readI32();
        struct.setRepayCycleTypeIsSet(true);
      }
      if (incoming.get(50)) {
        struct.repayCycleDate = iprot.readI32();
        struct.setRepayCycleDateIsSet(true);
      }
      if (incoming.get(51)) {
        struct.repayCycle = iprot.readI32();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(52)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(53)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(54)) {
        struct.repayOption = iprot.readI32();
        struct.setRepayOptionIsSet(true);
      }
      if (incoming.get(55)) {
        struct.repayDate = iprot.readI32();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(56)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(57)) {
        struct.monthLoanMgr = iprot.readDouble();
        struct.setMonthLoanMgrIsSet(true);
      }
      if (incoming.get(58)) {
        struct.monthLoanOtherFee = iprot.readDouble();
        struct.setMonthLoanOtherFeeIsSet(true);
      }
      if (incoming.get(59)) {
        struct.yearLoanInterest = iprot.readDouble();
        struct.setYearLoanInterestIsSet(true);
      }
      if (incoming.get(60)) {
        struct.yearLoanMgr = iprot.readDouble();
        struct.setYearLoanMgrIsSet(true);
      }
      if (incoming.get(61)) {
        struct.yearLoanOtherFee = iprot.readDouble();
        struct.setYearLoanOtherFeeIsSet(true);
      }
      if (incoming.get(62)) {
        struct.dayLoanInterest = iprot.readDouble();
        struct.setDayLoanInterestIsSet(true);
      }
      if (incoming.get(63)) {
        struct.dayLoanMgr = iprot.readDouble();
        struct.setDayLoanMgrIsSet(true);
      }
      if (incoming.get(64)) {
        struct.dayLoanOtherFee = iprot.readDouble();
        struct.setDayLoanOtherFeeIsSet(true);
      }
      if (incoming.get(65)) {
        struct.liqDmgProportion = iprot.readDouble();
        struct.setLiqDmgProportionIsSet(true);
      }
      if (incoming.get(66)) {
        struct.overdueLoanInterest = iprot.readDouble();
        struct.setOverdueLoanInterestIsSet(true);
      }
      if (incoming.get(67)) {
        struct.overdueFineInterest = iprot.readDouble();
        struct.setOverdueFineInterestIsSet(true);
      }
      if (incoming.get(68)) {
        struct.misFineInterest = iprot.readDouble();
        struct.setMisFineInterestIsSet(true);
      }
      if (incoming.get(69)) {
        struct.prepayLiqDmgProportion = iprot.readDouble();
        struct.setPrepayLiqDmgProportionIsSet(true);
      }
      if (incoming.get(70)) {
        struct.circulateType = iprot.readI32();
        struct.setCirculateTypeIsSet(true);
      }
      if (incoming.get(71)) {
        struct.abbreviation = iprot.readString();
        struct.setAbbreviationIsSet(true);
      }
      if (incoming.get(72)) {
        struct.userPids = iprot.readString();
        struct.setUserPidsIsSet(true);
      }
      if (incoming.get(73)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(74)) {
        struct.surveyResult = iprot.readString();
        struct.setSurveyResultIsSet(true);
      }
      if (incoming.get(75)) {
        struct.requestStatusVal = iprot.readString();
        struct.setRequestStatusValIsSet(true);
      }
      if (incoming.get(76)) {
        struct.ecoTradeText = iprot.readString();
        struct.setEcoTradeTextIsSet(true);
      }
      if (incoming.get(77)) {
        struct.ecoTrade = iprot.readString();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(78)) {
        struct.assWay = iprot.readString();
        struct.setAssWayIsSet(true);
      }
      if (incoming.get(79)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(80)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(81)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(82)) {
        struct.beginCompleteDttm = iprot.readString();
        struct.setBeginCompleteDttmIsSet(true);
      }
      if (incoming.get(83)) {
        struct.endCompleteDttm = iprot.readString();
        struct.setEndCompleteDttmIsSet(true);
      }
      if (incoming.get(84)) {
        struct.comments = iprot.readString();
        struct.setCommentsIsSet(true);
      }
      if (incoming.get(85)) {
        struct.repayOptionTest = iprot.readI32();
        struct.setRepayOptionTestIsSet(true);
      }
      if (incoming.get(86)) {
        struct.eachissueOption = iprot.readI32();
        struct.setEachissueOptionIsSet(true);
      }
      if (incoming.get(87)) {
        struct.feesProportion = iprot.readDouble();
        struct.setFeesProportionIsSet(true);
      }
      if (incoming.get(88)) {
        struct.creditId = iprot.readI32();
        struct.setCreditIdIsSet(true);
      }
      if (incoming.get(89)) {
        struct.extensionNum = iprot.readI32();
        struct.setExtensionNumIsSet(true);
      }
      if (incoming.get(90)) {
        struct.extensionAmt = iprot.readDouble();
        struct.setExtensionAmtIsSet(true);
      }
      if (incoming.get(91)) {
        struct.limitId = iprot.readI32();
        struct.setLimitIdIsSet(true);
      }
      if (incoming.get(92)) {
        struct.nowUserId = iprot.readI32();
        struct.setNowUserIdIsSet(true);
      }
      if (incoming.get(93)) {
        struct.creditStatus = iprot.readI32();
        struct.setCreditStatusIsSet(true);
      }
      if (incoming.get(94)) {
        struct.repayFunText = iprot.readString();
        struct.setRepayFunTextIsSet(true);
      }
      if (incoming.get(95)) {
        struct.assWayText = iprot.readString();
        struct.setAssWayTextIsSet(true);
      }
      if (incoming.get(96)) {
        struct.judgeRepayCycle = iprot.readI32();
        struct.setJudgeRepayCycleIsSet(true);
      }
      if (incoming.get(97)) {
        struct.oldProjectId = iprot.readI32();
        struct.setOldProjectIdIsSet(true);
      }
      if (incoming.get(98)) {
        struct.projectGuarantee = new ProjectGuarantee();
        struct.projectGuarantee.read(iprot);
        struct.setProjectGuaranteeIsSet(true);
      }
      if (incoming.get(99)) {
        struct.projectProperty = new ProjectProperty();
        struct.projectProperty.read(iprot);
        struct.setProjectPropertyIsSet(true);
      }
      if (incoming.get(100)) {
        struct.projectForeclosure = new ProjectForeclosure();
        struct.projectForeclosure.read(iprot);
        struct.setProjectForeclosureIsSet(true);
      }
      if (incoming.get(101)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(102)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(103)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(104)) {
        struct.businessContacts = iprot.readString();
        struct.setBusinessContactsIsSet(true);
      }
      if (incoming.get(105)) {
        struct.contactsPhone = iprot.readString();
        struct.setContactsPhoneIsSet(true);
      }
      if (incoming.get(106)) {
        struct.innerOrOut = iprot.readI32();
        struct.setInnerOrOutIsSet(true);
      }
      if (incoming.get(107)) {
        struct.businessCategory = iprot.readI32();
        struct.setBusinessCategoryIsSet(true);
      }
      if (incoming.get(108)) {
        struct.isNotarization = iprot.readI32();
        struct.setIsNotarizationIsSet(true);
      }
      if (incoming.get(109)) {
        struct.isDelete = iprot.readI32();
        struct.setIsDeleteIsSet(true);
      }
      if (incoming.get(110)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(111)) {
        struct.productType = iprot.readI32();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(112)) {
        struct.managers = iprot.readString();
        struct.setManagersIsSet(true);
      }
      if (incoming.get(113)) {
        struct.managersPhone = iprot.readString();
        struct.setManagersPhoneIsSet(true);
      }
      if (incoming.get(114)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list20.size);
          int _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = iprot.readI32();
            struct.userIds.add(_elem21);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(115)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(116)) {
        struct.oldLoanBank = iprot.readString();
        struct.setOldLoanBankIsSet(true);
      }
      if (incoming.get(117)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(118)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(119)) {
        struct.extensionDate = iprot.readString();
        struct.setExtensionDateIsSet(true);
      }
      if (incoming.get(120)) {
        struct.extensionRate = iprot.readDouble();
        struct.setExtensionRateIsSet(true);
      }
      if (incoming.get(121)) {
        struct.businessSourceNo = iprot.readI32();
        struct.setBusinessSourceNoIsSet(true);
      }
      if (incoming.get(122)) {
        struct.collectFileStatus = iprot.readI32();
        struct.setCollectFileStatusIsSet(true);
      }
      if (incoming.get(123)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(124)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(125)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.foreList = new ArrayList<ProjectForeInformation>(_list23.size);
          ProjectForeInformation _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new ProjectForeInformation();
            _elem24.read(iprot);
            struct.foreList.add(_elem24);
          }
        }
        struct.setForeListIsSet(true);
      }
      if (incoming.get(126)) {
        struct.auditorOpinion = iprot.readString();
        struct.setAuditorOpinionIsSet(true);
      }
      if (incoming.get(127)) {
        struct.specialDesc = iprot.readString();
        struct.setSpecialDescIsSet(true);
      }
      if (incoming.get(128)) {
        struct.declaration = iprot.readString();
        struct.setDeclarationIsSet(true);
      }
      if (incoming.get(129)) {
        struct.isSeller = iprot.readI32();
        struct.setIsSellerIsSet(true);
      }
      if (incoming.get(130)) {
        struct.refundFileStatus = iprot.readI32();
        struct.setRefundFileStatusIsSet(true);
      }
      if (incoming.get(131)) {
        struct.chechanDate = iprot.readString();
        struct.setChechanDateIsSet(true);
      }
      if (incoming.get(132)) {
        struct.chechanUserId = iprot.readI32();
        struct.setChechanUserIdIsSet(true);
      }
      if (incoming.get(133)) {
        struct.chechanUserName = iprot.readString();
        struct.setChechanUserNameIsSet(true);
      }
      if (incoming.get(134)) {
        struct.chechanCause = iprot.readString();
        struct.setChechanCauseIsSet(true);
      }
      if (incoming.get(135)) {
        struct.extensionDays = iprot.readI32();
        struct.setExtensionDaysIsSet(true);
      }
      if (incoming.get(136)) {
        struct.sourceStr = iprot.readString();
        struct.setSourceStrIsSet(true);
      }
      if (incoming.get(137)) {
        struct.orgCustomerName = iprot.readString();
        struct.setOrgCustomerNameIsSet(true);
      }
      if (incoming.get(138)) {
        struct.orgCustomerPhone = iprot.readString();
        struct.setOrgCustomerPhoneIsSet(true);
      }
      if (incoming.get(139)) {
        struct.orgCustomerCard = iprot.readString();
        struct.setOrgCustomerCardIsSet(true);
      }
      if (incoming.get(140)) {
        struct.planLoanDate = iprot.readString();
        struct.setPlanLoanDateIsSet(true);
      }
      if (incoming.get(141)) {
        struct.planLoanMoney = iprot.readDouble();
        struct.setPlanLoanMoneyIsSet(true);
      }
      if (incoming.get(142)) {
        struct.loanRate = iprot.readDouble();
        struct.setLoanRateIsSet(true);
      }
      if (incoming.get(143)) {
        struct.maxLoanRate = iprot.readDouble();
        struct.setMaxLoanRateIsSet(true);
      }
      if (incoming.get(144)) {
        struct.isClosed = iprot.readI32();
        struct.setIsClosedIsSet(true);
      }
      if (incoming.get(145)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(146)) {
        struct.areaCode = iprot.readString();
        struct.setAreaCodeIsSet(true);
      }
      if (incoming.get(147)) {
        struct.applyUserId = iprot.readI32();
        struct.setApplyUserIdIsSet(true);
      }
      if (incoming.get(148)) {
        struct.isNeedHandle = iprot.readI32();
        struct.setIsNeedHandleIsSet(true);
      }
      if (incoming.get(149)) {
        struct.cancelGuaranteeDate = iprot.readString();
        struct.setCancelGuaranteeDateIsSet(true);
      }
      if (incoming.get(150)) {
        struct.isNeedFinancial = iprot.readI32();
        struct.setIsNeedFinancialIsSet(true);
      }
      if (incoming.get(151)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.estateList = new ArrayList<BizProjectEstate>(_list26.size);
          BizProjectEstate _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new BizProjectEstate();
            _elem27.read(iprot);
            struct.estateList.add(_elem27);
          }
        }
        struct.setEstateListIsSet(true);
      }
      if (incoming.get(152)) {
        struct.houseIds = iprot.readString();
        struct.setHouseIdsIsSet(true);
      }
      if (incoming.get(153)) {
        struct.isReject = iprot.readI32();
        struct.setIsRejectIsSet(true);
      }
      if (incoming.get(154)) {
        struct.isAssigned = iprot.readI32();
        struct.setIsAssignedIsSet(true);
      }
      if (incoming.get(155)) {
        struct.recordClerkId = iprot.readI32();
        struct.setRecordClerkIdIsSet(true);
      }
      if (incoming.get(156)) {
        struct.foreAfterMonitorStatus = iprot.readI32();
        struct.setForeAfterMonitorStatusIsSet(true);
      }
      if (incoming.get(157)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.originalLoanList = new ArrayList<BizOriginalLoan>(_list29.size);
          BizOriginalLoan _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new BizOriginalLoan();
            _elem30.read(iprot);
            struct.originalLoanList.add(_elem30);
          }
        }
        struct.setOriginalLoanListIsSet(true);
      }
      if (incoming.get(158)) {
        struct.originalLoanIds = iprot.readString();
        struct.setOriginalLoanIdsIsSet(true);
      }
      if (incoming.get(159)) {
        struct.cusEnterpriseInfo = new com.xlkfinance.bms.rpc.project.CusEnterpriseInfo();
        struct.cusEnterpriseInfo.read(iprot);
        struct.setCusEnterpriseInfoIsSet(true);
      }
      if (incoming.get(160)) {
        struct.cusCredentials = new com.xlkfinance.bms.rpc.project.CusCredentials();
        struct.cusCredentials.read(iprot);
        struct.setCusCredentialsIsSet(true);
      }
      if (incoming.get(161)) {
        struct.cusCardInfo = new com.xlkfinance.bms.rpc.project.CusCardInfo();
        struct.cusCardInfo.read(iprot);
        struct.setCusCardInfoIsSet(true);
      }
      if (incoming.get(162)) {
        struct.capitalName = iprot.readString();
        struct.setCapitalNameIsSet(true);
      }
      if (incoming.get(163)) {
        struct.loanType = iprot.readString();
        struct.setLoanTypeIsSet(true);
      }
      if (incoming.get(164)) {
        struct.nextUserId = iprot.readString();
        struct.setNextUserIdIsSet(true);
      }
      if (incoming.get(165)) {
        struct.proContactIds = iprot.readString();
        struct.setProContactIdsIsSet(true);
      }
    }
  }

}

